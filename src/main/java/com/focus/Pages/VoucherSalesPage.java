package com.focus.Pages;

import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.ddf.EscherColorRef.SysIndexProcedure;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.TimeoutException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.testng.Assert;
import org.testng.SkipException;

import com.focus.base.BaseEngine;
import com.focus.supporters.ExcelReader;
import com.focus.utilities.POJOUtility;

public class VoucherSalesPage extends BaseEngine
{

	
	//Vouchers Home Page Ribbon Control
	@FindBy(xpath="//div[@id='myNavbar']//span[@class='icon-new icon-font6']")
	private static WebElement  newBtn;
	
	@FindBy(xpath="//div[@id='id_transaction_homescreen_edit']//span[@class='icon-edit icon-font6 ImagesinArabic']")
	private static WebElement  editBtn;

	@FindBy(xpath="//span[@class='icon-print icon-font6']")
	private static WebElement  printBtn;
	
	@FindBy(xpath="//div[@id='id_transaction_homescreen_Delete']//span[@class='icon-delete icon-font6']")
	private static WebElement  deleteBtn;
	
	@FindBy(xpath="//span[@class='icon-authorize icon-font6']")
	private static WebElement  authorizeBtn;
	
	@FindBy(xpath="//span[@class='icon-suspend icon-font6']")
	private static WebElement  suspendBtn;
	
	@FindBy(xpath="//span[@class='icon-reject2 icon-font6']")
	private static WebElement  rejectBtn;
	
	@FindBy(xpath="//span[@class='icon-cheque icon-font6']")
	private static WebElement  chequeReturnBtn;
	
	@FindBy(xpath="//span[@class='icon-printbarcode icon-font6']")
	private static WebElement  printBarCodeBtn;
	
	@FindBy(xpath="//span[@class='icon-convert icon-font6']")
	private static WebElement  convertBtn;
	
	@FindBy(xpath="//span[@class='icon-export icon-font6']")
	private static WebElement  exportToXMLBtn;  
		
	@FindBy(xpath="//div[@id='myNavbar']//span[@class='icon-settings icon-font6']")
	private static WebElement  settingsBtn;
	
	@FindBy(xpath="//div[@id='dvHomeTransClose']//span[@class='icon-close icon-font6']")  
	private static WebElement  homeCloseBtn;
			
	//Vouchers Home Page Options
	@FindBy(xpath="//a[@class='transaction_viewname_anchor theme_color-inverse font-5']")
	private static WebElement  allVouchersOption;
	
	@FindBy(xpath="//a[@class='transaction_viewname_anchor font-5']")
	private static WebElement  pendingBillsOption;
	
	@FindBy(xpath="//input[@id='SelectDefaultView']")
	private static WebElement  selectDefaultViewChkBox;
		
	@FindBy(xpath="//span[@class='icon-sorting icon-font6 toolbar_button_image theme_button_color dropdown-toggle']")
	private static WebElement  sortingBtn;
	
    @FindBy(xpath="//div[@id='btnCreateView']//span[@class='icon-new icon-font6']")
    private static WebElement  createViewBtn;

    @FindBy(xpath="//div[@id='btnCustomize']//span[@class='icon-settings icon-font6']")
    private static WebElement  customizeBtn;
   
    @FindBy(xpath="//span[@class='icon-filter icon-font6']")
    private static WebElement  filterBtn;
   
    @FindBy(xpath="//span[@id='transhomeRefresh']")
    private static WebElement  refreshBtn;
   
    @FindBy(xpath="//i[@class='icon-font6 icon-export']")
    private static WebElement  exportBtn;
   
 
	// Options Button  (Display Option)	
    @FindBy(xpath="//span[@id='transOptions']")
    private static WebElement  optionsBtn;
   
    @FindBy(xpath="//a[contains(text(),'Auto Adjust Width')]")
    private static WebElement  autoAdjustWidthBtn;
   
    @FindBy(xpath="//a[contains(text(),'Fit To Screen')]")
    private static WebElement  fitToScreenBtn;
   
    @FindBy(xpath="//a[contains(text(),'Normal')]")
    private static WebElement  normalBtn;
   
				
	//Voucher Home Page Grid Header Columns
	@FindBy(xpath="//input[@id='HeaderChkBox']")
	private static WebElement  grid_HeaderChkBox;	
	
	@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[3]")
	private static WebElement  grid_Header_Date;
	
	@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[4]")
	private static WebElement  grid_Header_VoucherNumber;
	
	@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[5]")
	private static WebElement  grid_Header_CreatedBy;
	
	@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[6]")
	private static WebElement  grid_Header_ModifiedBy;
	
	@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[7]")
	private static WebElement  grid_Header_CreatedDate;
	
	@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[8]")
	private static WebElement  grid_Header_ModifiedDate;
	
	@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[9]")
	private static WebElement  grid_Header_CreatedTime;
	
	@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[10]")
	private static WebElement  grid_Header_ModifiedTime;
	
	@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[11]")
	private static WebElement  grid_Header_Suspended;
	
	@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[12]")
	private static WebElement  grid_Header_Cancelled;
	
	@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[13]")
	private static WebElement  grid_Header_AuthorizationStatus;
	
	
	//Grid Voucher DetailsBtn
	@FindBy(xpath="//tr[@id='trRender_1']//i[@class='icon-info icon-font7']")
	private static WebElement  grid_VoucherDetailsBtn1;
	
	@FindBy(xpath="//tr[@id='trRender_2']//i[@class='icon-info icon-font7']")
	private static WebElement  grid_VoucherDetailsBtn2;
	
	
	//Grid CheckBox 1 And 2
	
	@FindBy(xpath="//tr[@id='trRender_1']//td//input")
	private static WebElement  grid_ChkBox1;
	
	@FindBy(xpath="//tr[@id='trRender_2']//td//input")
	private static WebElement  grid_ChkBox2;
	
	@FindBy(xpath="//tr[@id='trRender_3']//td//input")
	private static WebElement  grid_ChkBox3;
	
	@FindBy(xpath="//tr[@id='trRender_4']//td//input")
	private static WebElement  grid_ChkBox4;
	
	
	// Vouchers Home Page Footer
	@FindBy(xpath="//div[@id='tblFooterReportRender']//input[@id='txtSearch']")
	private static WebElement  searchField;
							
	@FindBy(xpath="//button[@id='frstPage']")
	private static WebElement  firstPageBtn;

	@FindBy(xpath="//button[@id='id_previousPage']")
	private static WebElement  previousPageBtn;

	@FindBy(xpath="//button[@id='id_pagenumber']")
	private static WebElement  currentPageNo;

	@FindBy(xpath="//button[@id='id_nextPage']")
	private static WebElement  nextPageBtn;

	@FindBy(xpath="//button[@id='lstPage']")
	private static WebElement  lastPageBtn;
	
	
	
	//Vouchers Entry Page Ribbon Control Options
	@FindBy(xpath="//span[@class='icon-scroll icon-font6']")
	private static WebElement  freeFlowBtn;
	
	@FindBy(xpath="//span[@class='icon-header icon-font6']")
	private static WebElement  jumpToHeaderSectionBtn;
	
	@FindBy(xpath="//span[@class='icon-panel icon-font6']")
	private static WebElement  jumpToBodySectionBtn;
	
	@FindBy(xpath="//span[@class='icon-footer icon-font6']")
	private static WebElement  jumpToFooterBtn;
	
	@FindBy(xpath="//*[@id='id_transactionentry_new']")
	private static WebElement  new_newBtn;
	
	@FindBy(xpath="//*[@id='id_transactionentry_save']/div[2]")
	private static WebElement  saveBtn;
	
	@FindBy(xpath="//*[@id='id_transactionentry_previous']")
	private static WebElement  previousBtn;
	
	@FindBy(xpath="//*[@id='id_transactionentry_next']")
	private static WebElement  nextBtn;
	
	@FindBy(xpath="//*[@id='id_transactionentry_print']")
	private static WebElement  new_PrintBtn;
	
	@FindBy(xpath="//*[@id='id_transactionentry_suspend']")
	private static WebElement  new_SuspendBtn;
	
	@FindBy(xpath="//*[@id='id_transactionentry_close']")
	private static WebElement  new_CloseBtn;
	
	@FindBy(xpath="//div[@id='id_transactionentry_delete']//span[contains(@class,'icon-delete icon-font6')]")
	private static WebElement  new_DeleteBtn;
	
	@FindBy(xpath="//span[@class='icon-menu icon-font4']")
	private static WebElement  toggleBtn;
	
	@FindBy(xpath="//*[@id='id_transactionentry_copydocument']")
	private static WebElement  copyDocumentOption;
	
	@FindBy(xpath="//*[@id='id_transactionentry_copytoclipboard']")
	private static WebElement  copyToClipBoardOption;
	
	@FindBy(xpath="//*[@id='id_transactionentry_pastefromclipboard']")
	private static WebElement  pasteFromClipBoardOption;
	
	@FindBy(xpath="//*[@id='id_transactionentry_raisechequereturn']")
	private static WebElement  raiseCheckReturnOption;
	
	@FindBy(xpath="//*[@id='id_transactionentry_addtostock']")
	private static WebElement  addToStockOption;
	
	@FindBy(xpath="//*[@id='id_transactionentry_markconvert']")
	private static WebElement  markConvertedOption;
	
	@FindBy(xpath="//*[@id='id_transactionentry_bominput']")
	private static WebElement  bOMinputOption;
	
	@FindBy(xpath="//*[@id='id_transactionentry_autoallocate']")
	private static WebElement  autoAllocateOption;
	
	@FindBy(xpath="//*[@id='id_transactionentry_reverseentry']")
	private static WebElement  reverseEntryOption;
	
	@FindBy(xpath="//*[@id='id_transactionentry_printbarcode']")
	private static WebElement  printBarCodeOption;
	
	@FindBy(xpath="//*[@id='id_transactionentry_postingdetails']")
	private static WebElement  postingDetailsOption;
	
	@FindBy(xpath="//*[@id='id_transactionentry_exporttoxml']")
	private static WebElement  exportToXMLOption;
	
	@FindBy(xpath="//*[@id='id_transactionentry_settings']")
	private static WebElement  settingsOption;
	
	
	
	//Voucher Entry Page Header Fields
	@FindBy(xpath="//input[@id='id_header_1']")
	private static WebElement  documentNumberTxt;
	
	@FindBy(xpath="//*[@id='id_header_1_input_image']/span")
	private static WebElement  documentNumberdropdown_ExpansionBtn;
	
	@FindBy(xpath="//input[@id='id_header_2']")
	private static WebElement  dateTxt;
	
	@FindBy(xpath="//td[@id='id_header_2_input_image']//span[@class='icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow']")
	private static WebElement  dateTxt_CalenderBtn;
	
	@FindBy(xpath="//tr[@id='id_header_2_day_today']//span[@class='theme_color-inverse'][contains(text(),'Today')]")
	private static WebElement  calender_TodayBtn;
	
	@FindBy(xpath="//input[@id='id_header_4']")
	private static WebElement  caskBankAccountTxt;
	
	@FindBy(xpath="//*[@id='id_header_4_input_image']/span")
	private static WebElement  caskBankAccount_ExpansionBtn;
	
	@FindBy(xpath="//*[@id='id_header_4_input_settings']/span")
	private static WebElement  cashBankAccount_SettingsBtn;

		@FindBy(xpath="//div[@id='id_header_4_customize_popup_container']")
		private static WebElement  cashBankAccount_Settings_Container;
								
		@FindBy(xpath="//div[@id='id_header_4_customize_popup_footer']//input[1]")
		private static WebElement  cashBankAccount_Settings_StandardFieldsBtn;
								
					@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_list']")
					private static WebElement  cashBankAccount_Settings_StandardFieldsBtn_Fielddropdown;
														
					@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_header']")
					private static WebElement  cashBankAccount_Settings_StandardFieldsBtn_HeaderTxt;
													
					@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_alignment']")
					private static WebElement  cashBankAccount_Settings_StandardFieldsBtn_Alignmentdropdown;
														
					@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_width']")
					private static WebElement  cashBankAccount_Settings_StandardFieldsBtn_WidthTxt;
														
					@FindBy(xpath="//div[@class='panel']//input[3]")
					private static WebElement  cashBankAccount_Settings_StandardFieldsBtn_OkBtn;
														
					@FindBy(xpath="//div[@class='panel']//input[4]")
					private static WebElement  cashBankAccount_Settings_StandardFieldsBtn_CancelBtn;
								
								
		@FindBy(xpath="//div[@id='id_header_4_search_container']//input[2]")
		private static WebElement  cashBankAccount_Settings_DeleteColumnBtn;
								
		@FindBy(xpath="//div[@class='panel']//input[3]")
		private static WebElement  cashBankAccount_Settings_OkBtn;
						
		@FindBy(xpath="//div[@class='panel']//input[4]")
		private static WebElement  cashBankAccount_Settings_CancelBtn;
			
	@FindBy(xpath="//input[@id='id_header_268435459']")
	private static WebElement  departmentTxt;
	
	@FindBy(xpath="//*[@id='id_header_268435459_input_image']/span")
	private static WebElement  department_ExpansionBtn;
	
	@FindBy(xpath="//*[@id='id_header_268435459_input_settings']/span")
	private static WebElement  department_SettingsBtn;

		@FindBy(xpath="//div[@id='id_header_268435459_customize_popup_container']")
		private static WebElement  department_Settings_Container;
								
		@FindBy(xpath="//div[@id='id_header_268435459_customize_popup_footer']//input[1]")
		private static WebElement  department_Settings_StandardFieldsBtn;
						
			@FindBy(xpath="//select[@id='id_header_268435459_customize_popup_standardfields_list']")
			private static WebElement  department_Settings_StandardFieldsBtn_Fielddropdown;
												
			@FindBy(xpath="//input[@id='id_header_268435459_customize_popup_standardfields_header']")
			private static WebElement  department_Settings_StandardFieldsBtn_HeaderTxt;
											
			@FindBy(xpath="//select[@id='id_header_268435459_customize_popup_standardfields_alignment']")
			private static WebElement  department_Settings_StandardFieldsBtn_Alignmentdropdown;
												
			@FindBy(xpath="//input[@id='id_header_268435459_customize_popup_standardfields_width']")
			private static WebElement  department_Settings_StandardFieldsBtn_WidthTxt;
												
			@FindBy(xpath="//div[@class='panel']//input[3]")
			private static WebElement  department_Settings_StandardFieldsBtn_OkBtn;
												
			@FindBy(xpath="//div[@class='panel']//input[4]")
			private static WebElement  department_Settings_StandardFieldsBtn_CancelBtn;
						
								
		@FindBy(xpath="//div[@id='id_header_268435459_search_container']//input[2]")
		private static WebElement  department_Settings_DeleteColumnBtn;
								
		@FindBy(xpath="//div[@class='panel']//input[3]")
		private static WebElement  department_Settings_OkBtn;
						
		@FindBy(xpath="//div[@class='panel']//input[4]")
		private static WebElement  department_Settings_CancelBtn;

	@FindBy(xpath="//*[@id='id_header_6']")
	private static WebElement  maturityDateTxt;
	
	@FindBy(xpath="//*[@id='id_header_6_input_image']/span']")
	private static WebElement  maturityDateTxt_CalenderBtn;
	
	@FindBy(xpath="//input[@id='id_header_3']")
	private static WebElement  purchaseAccountTxt;
	
	@FindBy(xpath="//*[@id='id_header_3_input_image']/span")
	private static WebElement  purchaseAccount_ExpansionBtn;
	
	@FindBy(xpath="//*[@id='id_header_3_input_settings']/span")
	private static WebElement  purchaseAccount_SettingsBtn;

		@FindBy(xpath="//div[@id='id_header_3_customize_popup_container']")
		private static WebElement  purchaseAccount_Settings_Container;
								
		@FindBy(xpath="//div[@id='id_header_3_customize_popup_footer']//input[1]")
		private static WebElement  purchaseAccount_Settings_StandardFieldsBtn;
						
			@FindBy(xpath="//select[@id='id_header_3_customize_popup_standardfields_list']")
			private static WebElement  purchaseAccount_Settings_StandardFieldsBtn_Fielddropdown;
												
			@FindBy(xpath="//input[@id='id_header_3_customize_popup_standardfields_header']")
			private static WebElement  purchaseAccount_Settings_StandardFieldsBtn_HeaderTxt;
											
			@FindBy(xpath="//select[@id='id_header_3_customize_popup_standardfields_alignment']")
			private static WebElement  purchaseAccount_Settings_StandardFieldsBtn_Alignmentdropdown;
												
			@FindBy(xpath="//input[@id='id_header_3_customize_popup_standardfields_width']")
			private static WebElement  purchaseAccount_Settings_StandardFieldsBtn_WidthTxt;
												
			@FindBy(xpath="//div[@class='panel']//input[3]")
			private static WebElement  purchaseAccount_Settings_StandardFieldsBtn_OkBtn;
												
			@FindBy(xpath="//div[@class='panel']//input[4]")
			private static WebElement  purchaseAccount_Settings_StandardFieldsBtn_CancelBtn;
								
								
		@FindBy(xpath="//div[@id='id_header_3_search_container']//input[2]")
		private static WebElement  purchaseAccount_Settings_DeleteColumnBtn;
								
		@FindBy(xpath="//div[@class='panel']//input[3]")
		private static WebElement  purchaseAccount_Settings_OkBtn;
						
		@FindBy(xpath="//div[@class='panel']//input[4]")
		private static WebElement  purchaseAccount_Settings_CancelBtn;


@FindBy(xpath="//input[@id='id_header_4']")
private static WebElement  vendorAccountTxt;

@FindBy(xpath="//*[@id='id_header_4_input_image']/span")
private static WebElement  vendorAccount_ExpansionBtn;

@FindBy(xpath="//*[@id='id_header_4_input_settings']/span")
private static WebElement  vendorAccount_SettingsBtn;

		@FindBy(xpath="//div[@id='id_header_4_customize_popup_container']")
		private static WebElement  vendorAccount_Settings_Container;
								
		@FindBy(xpath="//div[@id='id_header_4_customize_popup_footer']//input[1]")
		private static WebElement  vendorAccount_Settings_StandardFieldsBtn;
								
					@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_list']")
					private static WebElement  vendorAccount_Settings_StandardFieldsBtn_Fielddropdown;
														
					@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_header']")
					private static WebElement  vendorAccount_Settings_StandardFieldsBtn_HeaderTxt;
													
					@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_alignment']")
					private static WebElement  vendorAccount_Settings_StandardFieldsBtn_Alignmentdropdown;
														
					@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_width']")
					private static WebElement  vendorAccount_Settings_StandardFieldsBtn_WidthTxt;
														
					@FindBy(xpath="//div[@class='panel']//input[3]")
					private static WebElement  vendorAccount_Settings_StandardFieldsBtn_OkBtn;
														
					@FindBy(xpath="//div[@class='panel']//input[4]")
					private static WebElement  vendorAccount_Settings_StandardFieldsBtn_CancelBtn;
								
								
		@FindBy(xpath="//div[@id='id_header_4_search_container']//input[2]")
		private static WebElement  vendorAccount_Settings_DeleteColumnBtn;
								
		@FindBy(xpath="//div[@class='panel']//input[3]")
		private static WebElement  vendorAccount_Settings_OkBtn;
						
		@FindBy(xpath="//div[@class='panel']//input[4]")
		private static WebElement  vendorAccount_Settings_CancelBtn;

@FindBy(xpath="//input[@id='id_header_3']")
private static WebElement  salesAccountTxt;

@FindBy(xpath="//*[@id='id_header_3_input_image']/span")
private static WebElement  salesAccount_ExpansionBtn;

@FindBy(xpath="//*[@id='id_header_3_input_settings']/span")
private static WebElement  salesAccount_SettingsBtn;

		@FindBy(xpath="//div[@id='id_header_3_customize_popup_container']")
		private static WebElement  salesAccount_Settings_Container;
								
		@FindBy(xpath="//div[@id='id_header_3_customize_popup_footer']//input[1]")
		private static WebElement  salesAccount_Settings_StandardFieldsBtn;
								
					@FindBy(xpath="//select[@id='id_header_3_customize_popup_standardfields_list']")
					private static WebElement  salesAccount_Settings_StandardFieldsBtn_Fielddropdown;
														
					@FindBy(xpath="//input[@id='id_header_3_customize_popup_standardfields_header']")
					private static WebElement  salesAccount_Settings_StandardFieldsBtn_HeaderTxt;
													
					@FindBy(xpath="//select[@id='id_header_3_customize_popup_standardfields_alignment']")
					private static WebElement  salesAccount_Settings_StandardFieldsBtn_Alignmentdropdown;
														
					@FindBy(xpath="//input[@id='id_header_3_customize_popup_standardfields_width']")
					private static WebElement  salesAccount_Settings_StandardFieldsBtn_WidthTxt;
														
					@FindBy(xpath="//div[@class='panel']//input[3]")
					private static WebElement  salesAccount_Settings_StandardFieldsBtn_OkBtn;
														
					@FindBy(xpath="//div[@class='panel']//input[4]")
					private static WebElement  salesAccount_Settings_StandardFieldsBtn_CancelBtn;
								
								
		@FindBy(xpath="//div[@id='id_header_3_search_container']//input[2]")
		private static WebElement  salesAccount_Settings_DeleteColumnBtn;
								
		@FindBy(xpath="//div[@class='panel']//input[3]")
		private static WebElement  salesAccount_Settings_OkBtn;
						
		@FindBy(xpath="//div[@class='panel']//input[4]")
		private static WebElement  salesAccount_Settings_CancelBtn;

	@FindBy(xpath="//input[@id='id_header_4']")
	private static WebElement  customerAccountTxt;
	
	@FindBy(xpath="//*[@id='id_header_4_input_image']/span")
	private static WebElement  customerAccount_ExpansionBtn;
	
	@FindBy(xpath="//*[@id='id_header_4_input_settings']/span")
	private static WebElement  customerAccount_SettingsBtn;

		@FindBy(xpath="//div[@id='id_header_4_customize_popup_container']")
		private static WebElement  customerAccount_Settings_Container;
								
		@FindBy(xpath="//div[@id='id_header_4_customize_popup_footer']//input[1]")
		private static WebElement  customerAccount_Settings_StandardFieldsBtn;
								
					@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_list']")
					private static WebElement  customerAccount_Settings_StandardFieldsBtn_Fielddropdown;
														
					@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_header']")
					private static WebElement  customerAccount_Settings_StandardFieldsBtn_HeaderTxt;
													
					@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_alignment']")
					private static WebElement  customerAccount_Settings_StandardFieldsBtn_Alignmentdropdown;
														
					@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_width']")
					private static WebElement  customerAccount_Settings_StandardFieldsBtn_WidthTxt;
														
					@FindBy(xpath="//div[@class='panel']//input[3]")
					private static WebElement  customerAccount_Settings_StandardFieldsBtn_OkBtn;
														
					@FindBy(xpath="//div[@class='panel']//input[4]")
					private static WebElement  customerAccount_Settings_StandardFieldsBtn_CancelBtn;
								
								
		@FindBy(xpath="//div[@id='id_header_4_search_container']//input[2]")
		private static WebElement  customerAccount_Settings_DeleteColumnBtn;
								
		@FindBy(xpath="//div[@class='panel']//input[3]")
		private static WebElement  customerAccount_Settings_OkBtn;
						
		@FindBy(xpath="//div[@class='panel']//input[4]")
		private static WebElement  customerAccount_Settings_CancelBtn;
	
	@FindBy(xpath="//input[@id='id_header_12']")
	private static WebElement  accountTxt;
	
	@FindBy(xpath="//*[@id='id_header_12_input_image']/span")
	private static WebElement  account_ExpansionBtn;
	
	@FindBy(xpath="//*[@id='id_header_4_input_settings']/span")
	private static WebElement  account_SettingsBtn;

		@FindBy(xpath="//div[@id='id_header_4_customize_popup_container']")
		private static WebElement  account_Settings_Container;
								
		@FindBy(xpath="//div[@id='id_header_4_customize_popup_footer']//input[1]")
		private static WebElement  account_Settings_StandardFieldsBtn;
								
			@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_list']")
			private static WebElement  account_Settings_StandardFieldsBtn_Fielddropdown;
												
			@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_header']")
			private static WebElement  account_Settings_StandardFieldsBtn_HeaderTxt;
											
			@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_alignment']")
			private static WebElement  account_Settings_StandardFieldsBtn_Alignmentdropdown;
												
			@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_width']")
			private static WebElement  account_Settings_StandardFieldsBtn_WidthTxt;
												
			@FindBy(xpath="//div[@class='panel']//input[3]")
			private static WebElement  account_Settings_StandardFieldsBtn_OkBtn;
												
			@FindBy(xpath="//div[@class='panel']//input[4]")
			private static WebElement  account_Settings_StandardFieldsBtn_CancelBtn;
								
								
		@FindBy(xpath="//div[@id='id_header_4_search_container']//input[2]")
		private static WebElement  account_Settings_DeleteColumnBtn;
								
		@FindBy(xpath="//div[@class='panel']//input[3]")
		private static WebElement  account_Settings_OkBtn;
						
		@FindBy(xpath="//div[@class='panel']//input[4]")
		private static WebElement  account_Settings_CancelBtn;
	
	@FindBy(xpath="//input[@id='id_header_31']")
	private static WebElement  issuesReceiptsTxt;
	
	@FindBy(xpath="//input[@id='id_header_268435460']")
	private static WebElement  wareHouseTxt;
	
	@FindBy(xpath="//*[@id='id_header_268435460_input_image']/span")
	private static WebElement  wareHouse_ExpansionBtn;
	
	@FindBy(xpath="//*[@id='id_header_268435460_input_settings']/span")
	private static WebElement  wareHouse_SettingsBtn;

		@FindBy(xpath="//div[@id='id_header_268435460_customize_popup_container']")
		private static WebElement  wareHouse_Settings_Container;
								
		@FindBy(xpath="//div[@id='id_header_268435460_customize_popup_footer']//input[1]")
		private static WebElement  wareHouse_Settings_StandardFieldsBtn;
								
			@FindBy(xpath="//select[@id='id_header_268435460_customize_popup_standardfields_list']")
			private static WebElement  wareHouse_Settings_StandardFieldsBtn_Fielddropdown;
												
			@FindBy(xpath="//input[@id='id_header_268435460_customize_popup_standardfields_header']")
			private static WebElement  wareHouse_Settings_StandardFieldsBtn_HeaderTxt;
											
			@FindBy(xpath="//select[@id='id_header_268435460_customize_popup_standardfields_alignment']")
			private static WebElement  wareHouse_Settings_StandardFieldsBtn_Alignmentdropdown;
												
			@FindBy(xpath="//input[@id='id_header_268435460_customize_popup_standardfields_width']")
			private static WebElement  wareHouse_Settings_StandardFieldsBtn_WidthTxt;
												
			@FindBy(xpath="//div[@class='panel']//input[3]")
			private static WebElement  wareHouse_Settings_StandardFieldsBtn_OkBtn;
												
			@FindBy(xpath="//div[@class='panel']//input[4]")
			private static WebElement  wareHouse_Settings_StandardFieldsBtn_CancelBtn;
								
		@FindBy(xpath="//div[@id='id_header_268435460_search_container']//input[2]")
		private static WebElement  wareHouse_Settings_DeleteColumnBtn;
								
		@FindBy(xpath="//div[@class='panel']//input[3]")
		private static WebElement  wareHouse_Settings_OkBtn;
						
		@FindBy(xpath="//div[@class='panel']//input[4]")
		private static WebElement  wareHouse_Settings_CancelBtn;
	
	@FindBy(xpath="//span[contains(text(),'sName')]")
	private static WebElement  customize_sName;
	
	@FindBy(xpath="//span[@class='vcenter'][contains(text(),'Code')]")
	private static WebElement  customize_sCode;
	
	@FindBy(xpath="//span[contains(text(),'Alias')]")
	private static WebElement  customize_Alias;
	
	@FindBy(xpath="//span[@class='vcenter'][contains(text(),'Group')]")
	private static WebElement  customize_bGroup;
	
	@FindBy(xpath="//span[contains(@class,'vcenter')][contains(text(),'Balance')]")
	private static WebElement  customize_Balance;
	
	@FindBy(xpath="//input[@id='id_header_67108920']")
	private static WebElement  appropriateBasedOndropdown;
	
	@FindBy(xpath="//input[@id='id_header_67108921']")
	private static WebElement  additionalValueTxt;
	
	@FindBy(xpath="//input[@id='id_header_21']")
	private static WebElement  raiseReceiptsChkBox;
	
	@FindBy(xpath="//input[@id='id_header_67108865']")
	private static WebElement  receipts_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108868']")
	private static WebElement  payments_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108871']")
	private static WebElement  pettyCash_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108874']")
	private static WebElement  postDatedReceipts_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108865']")
	private static WebElement  postDatedPayments_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108880']")
	private static WebElement  purchaseVouchers_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108881']")
	private static WebElement  purchaseReturns_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108884']")
	private static WebElement  salesInvoice_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108886']")
	private static WebElement  salesOrder_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108928']")
	private static WebElement  salesInvoiceNewNarrationTxt;
	
	
	@FindBy(xpath="//input[@id='id_header_67108885']")
	private static WebElement  salesReturns_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108913']")
	private static WebElement  cashSales_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108914']")
	private static WebElement  hirePurchaseSales_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108890']")
	private static WebElement  journalEntries_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108916']")
	private static WebElement  forexJV_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108910']")
	private static WebElement  interDepartmentalJV_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108888']")
	private static WebElement  nonStandardJournalEntries_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108892']")
	private static WebElement  debitNotes_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108911']")
	private static WebElement  debitNotesLineWise_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108893']")
	private static WebElement  creditNotes_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108912']")
	private static WebElement  creditNotesLineWisePayroll_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108894']")
	private static WebElement  openingBalance_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108891']")
	private static WebElement  fixedAssetDepreciationVoucher_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108909']")
	private static WebElement  requestForQuote_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108903']")
	private static WebElement  purchasesQuotations_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108882']")
	private static WebElement  purchasesOrders_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108882']")
	private static WebElement  materialReceiptsNotes_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108904']")
	private static WebElement  salesQuotationss_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108887']")
	private static WebElement  deliveryNotes_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108917']")
	private static WebElement  posSales_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108918']")
	private static WebElement  productionOrder_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108886']")
	private static WebElement  salesOrders_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108895']")
	private static WebElement  shortagesinStock_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108896']")
	private static WebElement  excessesinStocks_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108897']")
	private static WebElement  stockTransfers_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108898']")
	private static WebElement  openingStocks_NarrationTxt;
	
	/*@FindBy(xpath="//*[@id='id_header_67108923']")
	private static WebElement  openingStocksNEW_NarrationTxt;*/
	
	@FindBy(xpath="//input[@id='id_header_67108940']")
	private static WebElement  openingStocksNEW_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108908']")
	private static WebElement  materialRequisition_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108866']")
	private static WebElement  receipts_ChequeNoTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108869']")
	private static WebElement  payments_ChequeNoTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108872']")
	private static WebElement  pettyCash_ChequeNoTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108875']")
	private static WebElement  postDatedReceipts_ChequeNoTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108878']")
	private static WebElement  postDatedPayments_ChequeNoTxt;



	//Voucher Entry Page Body Fields
	
	@FindBy(xpath="//input[@id='id_body_536870916']")
	private static WebElement  pvWareHouseTxt;
	
	@FindBy(xpath="//td[@id='id_body_536870916_input_image']//span[@class='icon-down-arrow optioncontrol_arrow_margin']")
	private static WebElement  pvWareHouse_ExpansionBtn;
	
	@FindBy(xpath="//td[@id='id_body_536870916_input_settings']//span[@class='icon-settings optioncontrol_settings_margin']")
	private static WebElement  pvWareHouse_SettingsBtn;

		@FindBy(xpath="//div[@id='id_body_536870916_customize_popup_container']")
		private static WebElement  pvWareHouse_Settings_Container;
								
		@FindBy(xpath="//div[@id='id_body_536870916_customize_popup_footer']//input[1]")
		private static WebElement  pvWareHouse_Settings_StandardFieldsBtn;
								
			@FindBy(xpath="//select[@id='id_body_536870916_customize_popup_standardfields_list']")
			private static WebElement  pvWareHouse_Settings_StandardFieldsBtn_Fielddropdown;
												
			@FindBy(xpath="//input[@id='id_body_536870916_customize_popup_standardfields_header']")
			private static WebElement  pvWareHouse_Settings_StandardFieldsBtn_HeaderTxt;
											
			@FindBy(xpath="//select[@id='id_body_536870916_customize_popup_standardfields_alignment']")
			private static WebElement  pvWareHouse_Settings_StandardFieldsBtn_Alignmentdropdown;
												
			@FindBy(xpath="//input[@id='id_body_536870916_customize_popup_standardfields_width']")
			private static WebElement  pvWareHouse_Settings_StandardFieldsBtn_WidthTxt;
												
			@FindBy(xpath="//div[@class='panel']//input[3]")
			private static WebElement  pvWareHouse_Settings_StandardFieldsBtn_OkBtn;
												
			@FindBy(xpath="//div[@class='panel']//input[4]")
			private static WebElement  pvWareHouse_Settings_StandardFieldsBtn_CancelBtn;
								
		@FindBy(xpath="//div[@id='id_body_536870916_search_container']//input[2]")
		private static WebElement  pvWareHouse_Settings_DeleteColumnBtn;
								
		@FindBy(xpath="//div[@class='panel']//input[3]")
		private static WebElement  pvWareHouse_Settings_OkBtn;
						
		@FindBy(xpath="//div[@class='panel']//input[4]")
		private static WebElement  pvWareHouse_Settings_CancelBtn;
	
	// Grid Elements
	@FindBy(xpath="//th[@id='id_transaction_entry_detail_table_control_heading_1']")
	private static WebElement  grid_Header_Account;
	
	@FindBy(xpath="//th[@id='id_transaction_entry_detail_table_control_heading_1']")
	private static WebElement  grid_Header_Item;
	
	@FindBy(xpath="//th[@id='id_transaction_entry_detail_table_control_heading_1']")
	private static WebElement  grid_Header_DebitAC;
	
	@FindBy(xpath="//th[@id='id_transaction_entry_detail_table_control_heading_2']")
	private static WebElement  grid_Header_CreditAC;



	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[1]")
	private static WebElement  firstRowIndex;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[1]")
	private static WebElement  secondRowIndex;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[1]")
	private static WebElement  thirdRowIndex;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[1]")
	private static WebElement  fourthRowIndex;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[1]")
	private static WebElement  fifthRowIndex;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[1]")
	private static WebElement  sixthRowIndex;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[1]")
	private static WebElement  seventhRowIndex;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[1]")
	private static WebElement  eigthRowIndex;
	
	@FindBy(xpath="//span[@class='icon-delete icon-font8']")
	private static WebElement  deleteRowBtn;
	
	@FindBy(xpath="//span[@class='icon-insertrow icon-font8']")
	private static WebElement  insertRowBtn;
	
	@FindBy(xpath="//span[@class='icon-selectall icon-font8']")
	private static WebElement  selectRowBtn;
	
	@FindBy(xpath="//span[@class='icon-unselectall1 icon-font8']")
	private static WebElement  unSelectRowBtn;
	
	@FindBy(xpath="//span[@class='icon-clone icon-font8']")
	private static WebElement  duplicateRowBtn;

	
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[2]")
	private static WebElement  select1stRow_1stColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[3]")
	private static WebElement  select1stRow_2ndColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[4]")
	private static WebElement  select1stRow_3rdColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[5]")
	private static WebElement  select1stRow_4thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[6]")
	private static WebElement  select1stRow_5thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[7]")
	private static WebElement  select1stRow_6thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[8]")
	private static WebElement  select1stRow_7thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[9]")
	private static WebElement  select1stRow_8thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[10]")
	private static WebElement  select1stRow_9thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[11]")
	private static WebElement  select1stRow_10thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[12]")
	private static WebElement  select1stRow_11thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[13]")
	private static WebElement  select1stRow_12thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[14]")
	private static WebElement  select1stRow_13thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[15]")
	private static WebElement  select1stRow_14thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[16]")
	private static WebElement  select1stRow_15thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[17]")
	private static WebElement  select1stRow_16thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[18]")
	private static WebElement  select1stRow_17thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[19]")
	private static WebElement  select1stRow_18thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[20]")
	private static WebElement  select1stRow_19thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[21]")
	private static WebElement  select1stRow_20thColumn;
	
	
	
	
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[2]")
	private static WebElement  select2ndRow_1stColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[3]")
	private static WebElement  select2ndRow_2ndColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[4]")
	private static WebElement  select2ndRow_3rdColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[5]")
	private static WebElement  select2ndRow_4thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[6]")
	private static WebElement  select2ndRow_5thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[7]")
	private static WebElement  select2ndRow_6thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[8]")
	private static WebElement  select2ndRow_7thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[9]")
	private static WebElement  select2ndRow_8thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[10]")
	private static WebElement  select2ndRow_9thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[12]")
	private static WebElement  select2ndRow_11thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[13]")
	private static WebElement  select2ndRow_12thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[11]")
	private static WebElement  select2ndRow_10thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[15]")
	private static WebElement  select2ndRow_14thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[16]")
	private static WebElement  select2ndRow_15thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[17]")
	private static WebElement  select2ndRow_16thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[18]")
	private static WebElement  select2ndRow_17thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[19]")
	private static WebElement  select2ndRow_18thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[20]")
	private static WebElement  select2ndRow_19thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[21]")
	private static WebElement  select2ndRow_20thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[22]")
	private static WebElement  select2ndRow_21thColumn;

	
	
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[2]")
	private static WebElement  select3rdRow_1stColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[3]")
	private static WebElement  select3rdRow_2ndColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[4]")
	private static WebElement  select3rdRow_3rdColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[5]")
	private static WebElement  select3rdRow_4thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[6]")
	private static WebElement  select3rdRow_5thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[7]")
	private static WebElement  select3rdRow_6thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[8]")
	private static WebElement  select3rdRow_7thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[9]")
	private static WebElement  select3rdRow_8thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[10]")
	private static WebElement  select3rdRow_9thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[11]")
	private static WebElement  select3rdRow_10thColumn;

    @FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[12]")
	private static WebElement  select3rdRow_11thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[13]")
	private static WebElement  select3rdRow_12thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[14]")
	private static WebElement  select3rdRow_13thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[15]")
	private static WebElement  select3rdRow_14thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[16]")
	private static WebElement  select3rdRow_15thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[17]")
	private static WebElement  select3rdRow_16thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[18]")
	private static WebElement  select3rdRow_17thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[19]")
	private static WebElement  select3rdRow_18thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[20]")
	private static WebElement  select3rdRow_19thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[21]")
	private static WebElement  select3rdRow_20thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[22]")
	private static WebElement  select3rdRow_21thColumn;


	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[2]")
	private static WebElement  select4thRow_1stColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[3]")
	private static WebElement  select4thRow_2ndColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[4]")
	private static WebElement  select4thRow_3rdColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[5]")
	private static WebElement  select4thRow_4thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[6]")
	private static WebElement  select4thRow_5thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[7]")
	private static WebElement  select4thRow_6thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[8]")
	private static WebElement  select4thRow_7thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[9]")
	private static WebElement  select4thRow_8thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[10]")
	private static WebElement  select4thRow_9thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[11]")
	private static WebElement  select4thRow_10thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[12]")
	private static WebElement  select4thRow_11thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[13]")
	private static WebElement  select4thRow_12thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[14]")
	private static WebElement  select4thRow_13thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[15]")
	private static WebElement  select4thRow_14thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[16]")
	private static WebElement  select4thRow_15thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[17]")
	private static WebElement  select4thRow_16thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[18]")
	private static WebElement  select4thRow_17thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[19]")
	private static WebElement  select4thRow_18thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[20]")
	private static WebElement  select4thRow_19thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[21]")
	private static WebElement  select4thRow_20thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[22]")
	private static WebElement  select4thRow_21thColumn;



	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[2]")
	private static WebElement  select5thRow_1stColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[3]")
	private static WebElement  select5thRow_2ndColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[4]")
	private static WebElement  select5thRow_3rdColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[5]")
	private static WebElement  select5thRow_4thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[6]")
	private static WebElement  select5thRow_5thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[7]")
	private static WebElement  select5thRow_6thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[8]")
	private static WebElement  select5thRow_7thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[9]")
	private static WebElement  select5thRow_8thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[10]")
	private static WebElement  select5thRow_9thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[11]")
	private static WebElement  select5thRow_10thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[12]")
	private static WebElement  select5thRow_11thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[13]")
	private static WebElement  select5thRow_12thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[14]")
	private static WebElement  select5thRow_13thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[15]")
	private static WebElement  select5thRow_14thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[16]")
	private static WebElement  select5thRow_15thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[17]")
	private static WebElement  select5thRow_16thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[18]")
	private static WebElement  select5thRow_17thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[19]")
	private static WebElement  select5thRow_18thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[20]")
	private static WebElement  select5thRow_19thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[21]")
	private static WebElement  select5thRow_20thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[22]")
	private static WebElement  select5thRow_21thColumn;




	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[2]")
	private static WebElement  select6thRow_1stColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[3]")
	private static WebElement  select6thRow_2ndColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[4]")
	private static WebElement  select6thRow_3rdColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[5]")
	private static WebElement  select6thRow_4thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[6]")
	private static WebElement  select6thRow_5thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[7]")
	private static WebElement  select6thRow_6thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[8]")
	private static WebElement  select6thRow_7thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[9]")
	private static WebElement  select6thRow_8thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[10]")
	private static WebElement  select6thRow_9thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[11]")
	private static WebElement  select6thRow_10thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[12]")
	private static WebElement  select6thRow_11thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[13]")
	private static WebElement  select6thRow_12thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[14]")
	private static WebElement  select6thRow_13thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[15]")
	private static WebElement  select6thRow_14thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[16]")
	private static WebElement  select6thRow_15thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[17]")
	private static WebElement  select6thRow_16thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[18]")
	private static WebElement  select6thRow_17thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[19]")
	private static WebElement  select6thRow_18thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[20]")
	private static WebElement  select6thRow_19thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[21]")
	private static WebElement  select6thRow_20thColumn;


	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[2]")
	private static WebElement  select7thRow_1stColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[3]")
	private static WebElement  select7thRow_2ndColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[4]")
	private static WebElement  select7thRow_3rdColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[5]")
	private static WebElement  select7thRow_4thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[6]")
	private static WebElement  select7thRow_5thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[7]")
	private static WebElement  select7thRow_6thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[8]")
	private static WebElement  select7thRow_7thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[9]")
	private static WebElement  select7thRow_8thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[10]")
	private static WebElement  select7thRow_9thColumn;



	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[2]")
	private static WebElement  select8thRow_1stColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[3]")
	private static WebElement  select8thRow_2ndColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[4]")
	private static WebElement  select8thRow_3rdColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[5]")
	private static WebElement  select8thRow_4thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[6]")
	private static WebElement  select8thRow_5thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[7]")
	private static WebElement  select8thRow_6thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[8]")
	private static WebElement  select8thRow_7thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[9]")
	private static WebElement  select8thRow_8thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[10]")
	private static WebElement  select8thRow_9thColumn;


	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[2]")
	private static WebElement  select9thRow_1stColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[3]")
	private static WebElement  select9thRow_2ndColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[4]")
	private static WebElement  select9thRow_3rdColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[5]")
	private static WebElement  select9thRow_4thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[6]")
	private static WebElement  select9thRow_5thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[7]")
	private static WebElement  select9thRow_6thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[8]")
	private static WebElement  select9thRow_7thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[9]")
	private static WebElement  select9thRow_8thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[10]")
	private static WebElement  select9thRow_9thColumn;



	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[2]")
	private static WebElement  select10thRow_1stColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[3]")
	private static WebElement  select10thRow_2ndColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[4]")
	private static WebElement  select10thRow_3rdColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[5]")
	private static WebElement  select10thRow_4thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[6]")
	private static WebElement  select10thRow_5thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[7]")
	private static WebElement  select10thRow_6thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[8]")
	private static WebElement  select10thRow_7thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[9]")
	private static WebElement  select10thRow_8thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[10]")
	private static WebElement  select10thRow_9thColumn;


	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[2]")
	private static WebElement  select11thRow_1stColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[3]")
	private static WebElement  select11thRow_2ndColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[4]")
	private static WebElement  select11thRow_3rdColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[5]")
	private static WebElement  select11thRow_4thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[6]")
	private static WebElement  select11thRow_5thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[7]")
	private static WebElement  select11thRow_6thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[8]")
	private static WebElement  select11thRow_7thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[9]")
	private static WebElement  select11thRow_8thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[10]")
	private static WebElement  select11thRow_9thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[2]")
	private static WebElement  select12thRow_1stColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[3]")
	private static WebElement  select12thRow_2ndColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[4]")
	private static WebElement  select12thRow_3rdColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[5]")
	private static WebElement  select12thRow_4thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[6]")
	private static WebElement  select12thRow_5thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[7]")
	private static WebElement  select12thRow_6thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[8]")
	private static WebElement  select12thRow_7thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[9]")
	private static WebElement  select12thRow_8thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[10]")
	private static WebElement  select12thRow_9thColumn;

	@FindBy(xpath="//input[@id='id_body_12']")
	private static WebElement  enter_AccountTxt;
	
	@FindBy(xpath="//*[@id='id_body_12_input_image']/span")
	private static WebElement  enter_Account_ExpansionBtn;
	
	@FindBy(xpath="//*[@id='id_body_12_input_settings']/span")
	private static WebElement  enter_Account_SettingsBtn;

		@FindBy(xpath="//div[@id='id_header_12_customize_popup_container']")
		private static WebElement  enter_Account_Settings_Container;
								
		@FindBy(xpath="//div[@id='id_header_12_customize_popup_footer']//input[1]")
		private static WebElement  enter_Account_Settings_StandardFieldsBtn;
								
					@FindBy(xpath="//select[@id='id_header_12_customize_popup_standardfields_list']")
					private static WebElement  enter_Account_Settings_StandardFieldsBtn_Fielddropdown;
														
					@FindBy(xpath="//input[@id='id_header_12_customize_popup_standardfields_header']")
					private static WebElement  enter_Account_Settings_StandardFieldsBtn_HeaderTxt;
													
					@FindBy(xpath="//select[@id='id_header_12_customize_popup_standardfields_alignment']")
					private static WebElement  enter_Account_Settings_StandardFieldsBtn_Alignmentdropdown;
														
					@FindBy(xpath="//input[@id='id_header_12_customize_popup_standardfields_width']")
					private static WebElement  enter_Account_Settings_StandardFieldsBtn_WidthTxt;
														
					@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
					private static WebElement  enter_Account_Settings_StandardFieldsBtn_OkBtn;
														
					@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
					private static WebElement  enter_Account_Settings_StandardFieldsBtn_CancelBtn;
								
		@FindBy(xpath="//div[@id='id_header_12_search_container']//input[2]")
		private static WebElement  enter_Account_Settings_DeleteColumnBtn;
								
		@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
		private static WebElement  enter_Account_Settings_OkBtn;
						
		@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
		private static WebElement  enter_Account_Settings_CancelBtn;

	@FindBy(xpath="//input[@id='id_body_16']")
	private static WebElement  enter_Amount;
	
	@FindBy(xpath="//textarea[@id='id_body_16777219']")
	private static WebElement  enter_Receipts_Remarks;
	
	@FindBy(xpath="//textarea[@id='id_body_16777222']")
	private static WebElement  enter_Payments_Remarks;
	
	@FindBy(xpath="//textarea[@id='id_body_16777225']")
	private static WebElement  enter_PettyCash_Remarks;
	
	@FindBy(xpath="//textarea[@id='id_body_16777228']")
	private static WebElement  enter_PostDatedReceipts_Remarks;
	
	@FindBy(xpath="//textarea[@id='id_body_16777231']")
	private static WebElement  enter_PostDatedPaymentss_Remarks;
	
	@FindBy(xpath="//input[@id='id_body_23']")
	private static WebElement  enter_ItemTxt;
	
	@FindBy(xpath="//*[@id='id_body_23_input_image']/span")
	private static WebElement  item_ExpansionBtn;
	
	@FindBy(xpath="//*[@id='id_body_23_input_settings']/span")
	private static WebElement  item_SettingsBtn;

		@FindBy(xpath="//div[@id='id_body_23_customize_popup_container']")
		private static WebElement  item_Settings_Container;
								
		@FindBy(xpath="//div[@id='id_body_23_customize_popup_footer']//input[1]")
		private static WebElement  item_Settings_StandardFieldsBtn;
								
			@FindBy(xpath="//select[@id='id_body_23_customize_popup_standardfields_list']")
			private static WebElement  item_Settings_StandardFieldsBtn_Fielddropdown;
												
			@FindBy(xpath="//input[@id='id_body_23_customize_popup_standardfields_header']")
			private static WebElement  item_Settings_StandardFieldsBtn_HeaderTxt;
											
			@FindBy(xpath="//select[@id='id_body_23_customize_popup_standardfields_alignment']")
			private static WebElement  item_Settings_StandardFieldsBtn_Alignmentdropdown;
												
			@FindBy(xpath="//input[@id='id_body_23_customize_popup_standardfields_width']")
			private static WebElement  item_Settings_StandardFieldsBtn_WidthTxt;
												
			@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
			private static WebElement  item_Settings_StandardFieldsBtn_OkBtn;
												
			@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
			private static WebElement  item_Settings_StandardFieldsBtn_CancelBtn;
								
		@FindBy(xpath="//div[@id='id_body_23_search_container']//input[2]")
		private static WebElement  item_Settings_DeleteColumnBtn;
								
		@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
		private static WebElement  item_Settings_OkBtn;
						
		@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
		private static WebElement  item_Settings_CancelBtn;

	@FindBy(xpath="//input[@id='id_body_24']")
	private static WebElement  enter_UnitTxt;
	
	@FindBy(xpath="//*[@id='id_body_24_input_image']/span")
	private static WebElement  unit_ExpansionBtn;
	
	@FindBy(xpath="//*[@id='id_body_24_input_settings']/span")
	private static WebElement  unit_SettingsBtn;

		@FindBy(xpath="//div[@id='id_body_24_customize_popup_container']")
		private static WebElement  unit_Settings_Container;
								
		@FindBy(xpath="//div[@id='id_body_24_customize_popup_footer']//input[1]")
		private static WebElement  unit_Settings_StandardFieldsBtn;
								
			@FindBy(xpath="//select[@id='id_body_24_customize_popup_standardfields_list']")
			private static WebElement  unit_Settings_StandardFieldsBtn_Fielddropdown;
												
			@FindBy(xpath="//input[@id='id_body_24_customize_popup_standardfields_header']")
			private static WebElement  unit_Settings_StandardFieldsBtn_HeaderTxt;
											
			@FindBy(xpath="//select[@id='id_body_24_customize_popup_standardfields_alignment']")
			private static WebElement  unit_Settings_StandardFieldsBtn_Alignmentdropdown;
												
			@FindBy(xpath="//input[@id='id_body_24_customize_popup_standardfields_width']")
			private static WebElement  unit_Settings_StandardFieldsBtn_WidthTxt;
												
			@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
			private static WebElement  unit_Settings_StandardFieldsBtn_OkBtn;
												
			@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
			private static WebElement  unit_Settings_StandardFieldsBtn_CancelBtn;
								
		@FindBy(xpath="//div[@id='id_body_24_search_container']//input[2]")
		private static WebElement  unit_Settings_DeleteColumnBtn;
								
		@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
		private static WebElement  unit_Settings_OkBtn;
						
		@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
		private static WebElement  unit_Settings_CancelBtn;

			
	@FindBy(xpath="//input[@id='id_body_26']")
	private static WebElement  enter_Quantity;
	
	@FindBy(xpath="//input[@id='id_body_27']")
	private static WebElement  enter_Rate;
	
	@FindBy(xpath="//*[@id='id_body_28']")
	private static WebElement  enter_Gross;
	
	@FindBy(xpath="//input[@id='id_body_13']")
	private static WebElement  enter_Batch;
	
	@FindBy(xpath="//input[@id='id_body_12']")
	private static WebElement  enter_DebitACTxt;
	
	@FindBy(xpath="//*[@id='id_body_12_input_image']/span")
	private static WebElement  enter_DebitAC_ExpansionBtn;
	
	@FindBy(xpath="//*[@id='id_body_12_input_settings']/span")
	private static WebElement  enter_DebitAC_SettingsBtn;

		@FindBy(xpath="//div[@id='id_header_12_customize_popup_container']")
		private static WebElement  enter_DebitAC_Settings_Container;
								
		@FindBy(xpath="//div[@id='id_header_12_customize_popup_footer']//input[1]")
		private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn;
								
			@FindBy(xpath="//select[@id='id_header_12_customize_popup_standardfields_list']")
			private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_Fielddropdown;
												
			@FindBy(xpath="//input[@id='id_header_12_customize_popup_standardfields_header']")
			private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_HeaderTxt;
											
			@FindBy(xpath="//select[@id='id_header_12_customize_popup_standardfields_alignment']")
			private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_Alignmentdropdown;
												
			@FindBy(xpath="//input[@id='id_header_12_customize_popup_standardfields_width']")
			private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_WidthTxt;
												
			@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
			private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_OkBtn;
												
			@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
			private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_CancelBtn;
								
		@FindBy(xpath="//div[@id='id_header_12_search_container']//input[2]")
		private static WebElement  enter_DebitAC_Settings_DeleteColumnBtn;
								
		@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
		private static WebElement  enter_DebitAC_Settings_OkBtn;
						
		@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
		private static WebElement  enter_DebitAC_Settings_CancelBtn;

	@FindBy(xpath="//input[@id='id_body_39']")
	private static WebElement  enter_CreditACTxt;
	
	@FindBy(xpath="//*[@id='id_body_39_input_image']/span")
	private static WebElement  enter_CreditAC_ExpansionBtn;
	
	@FindBy(xpath="//*[@id='id_body_39_input_settings']/span")
	private static WebElement  enter_CreditAC_SettingsBtn;

		@FindBy(xpath="//div[@id='id_header_39_customize_popup_container']")
		private static WebElement  enter_CreditAC_Settings_Container;
								
		@FindBy(xpath="//div[@id='id_header_39_customize_popup_footer']//input[1]")
		private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn;
								
			@FindBy(xpath="//select[@id='id_header_39_customize_popup_standardfields_list']")
			private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_Fielddropdown;
												
			@FindBy(xpath="//input[@id='id_header_39_customize_popup_standardfields_header']")
			private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_HeaderTxt;
											
			@FindBy(xpath="//select[@id='id_header_39_customize_popup_standardfields_alignment']")
			private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_Alignmentdropdown;
												
			@FindBy(xpath="//input[@id='id_header_39_customize_popup_standardfields_width']")
			private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_WidthTxt;
												
			@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
			private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_OkBtn;
												
			@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
			private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_CancelBtn;
								
		@FindBy(xpath="//div[@id='id_header_39_search_container']//input[2]")
		private static WebElement  enter_CreditAC_Settings_DeleteColumnBtn;
								
		@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
		private static WebElement  enter_CreditAC_Settings_OkBtn;
						
		@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
		private static WebElement  enter_CreditAC_Settings_CancelBtn;

	@FindBy(xpath="//input[@id='id_body_18']")
	private static WebElement  enter_DebitTxt;
	
	@FindBy(xpath="//input[@id='id_body_19']")
	private static WebElement  enter_CreditTxt;
	
	@FindBy(xpath="//textarea[@id='id_body_16777241']")
	private static WebElement  enter_NonStandardJournalEntries_RemarksTxt;
	
	@FindBy(xpath="//input[@id='id_body_87']")
	private static WebElement  enter_Warehouse2Txt;
	
	@FindBy(xpath="//*[@id='id_body_87_input_image']/span")
	private static WebElement  enter_Warehouse2_ExpansionBtn;
	
	@FindBy(xpath="//*[@id='id_body_87_input_settings']/span")
	private static WebElement  enter_Warehouse2_SettingsBtn;

		@FindBy(xpath="//div[@id='id_header_87_customize_popup_container']")
		private static WebElement  enter_WareHouse2_Settings_Container;
								
		@FindBy(xpath="//div[@id='id_header_87_customize_popup_footer']//input[1]")
		private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn;
								
			@FindBy(xpath="//select[@id='id_header_87_customize_popup_standardfields_list']")
			private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_Fielddropdown;
												
			@FindBy(xpath="//input[@id='id_header_87_customize_popup_standardfields_header']")
			private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_HeaderTxt;
											
			@FindBy(xpath="//select[@id='id_header_87_customize_popup_standardfields_alignment']")
			private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_Alignmentdropdown;
												
			@FindBy(xpath="//input[@id='id_header_87_customize_popup_standardfields_width']")
			private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_WidthTxt;
												
			@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
			private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_OkBtn;
												
			@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
			private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_CancelBtn;
								
		@FindBy(xpath="//div[@id='id_header_87_search_container']//input[2]")
		private static WebElement  enter_WareHouse2_Settings_DeleteColumnBtn;
								
		@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
		private static WebElement  enter_WareHouse2_Settings_OkBtn;
						
		@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
		private static WebElement  enter_WareHouse2_Settings_CancelBtn;


	// Right Panel InfoSide Bar	
	@FindBy(xpath="//*[@id='id_transactionentry_infopanel_container']/div[1]/div[2]/span")
	private static WebElement  infoSideBarCustomizeBtn;

	@FindBy(xpath="//*[@id='id_transactionentry_infopanel_container']/div[1]/div[3]/span")
	private static WebElement  infoSideBarMinimizeExpandBtn;
		
		@FindBy(xpath="//li[@id='Trans_Dash_Save']//span[text()='Save']")
		private static WebElement  customizeSaveBtn;
		
		@FindBy(xpath="//span[@class='noWrap clsBlueColor'][contains(text(),'Cancel')]")
		private static WebElement  customizeCancelBtn;
		
		@FindBy(xpath="//input[@id='searchBoxTrans']")
		private static WebElement  customizeSearchTxt;
					
		@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//i[@class='icon-search searchicon']")
		private static WebElement  customizeSearchBtn;
					
		@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//i[@id='g']")
		private static WebElement  graphBtn;
					
			@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//li[@id='Newgraph']")
			private static WebElement  newGraphOption;
				
		@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//i[@id='r']")
		private static WebElement  reportBtn;
			
			@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//li[@id='NewReport']")
			private static WebElement  newReportOption;
					
		@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//i[@id='i']")
		private static WebElement  infoPanelBtn;
					
			@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//li[@id='NewInfopanel']")
			private static WebElement  newInfoPanelOption;
			
		@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//i[@id='w']")
		private static WebElement  workFlowBtn;
						
				@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//li[@id='NewWorkflow']")
				private static WebElement  newWorkFlowOption;
						
		@FindBy(xpath="//a[@id='DocumentInfoOption']")
		private static WebElement  otherDashlets;
						
			@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//label[contains(@class,'theme_icon-color')][contains(text(),'Document Info')]")
			private static WebElement  documentInfo;

	/*@FindBy(xpath="//span[contains(@class,'icon-left-and-right-panel-icon icon-font6 no_padding_left_right')]")
	private static WebElement  infoSideBarMinimizeExpandBtn;	*/	
			
	@FindBy(xpath="//span[@class='icon-left-and-right-panel-icon icon-font6 no_padding_left_right']")
	private static WebElement  infoSideBarExpandBtn;


	// Footer Section
	@FindBy(xpath="//label[@id='id_transactionentry_footer_panel_summary_value_net']")
	private static WebElement  netLabel;
	
	@FindBy(xpath="//*[@id='id_transactionentry_footer_panel_summary_value_net']/span[2]")
	private static WebElement  netAmount;


	
	//Navigation of Voucher Menus
	
	// Financial Menu and Sub Menus
	@FindBy(xpath="//span[@class='icon-financial icon-font1']")
	private static WebElement  finacinalsMenu;
	
		@FindBy(xpath="//a[@id='61']//span[contains(text(),'Transactions')]")
		private static WebElement  transactionsExpandBtn;
			
			@FindBy(xpath="//a[@id='2007']//span[contains(text(),'Purchases')]")
			private static WebElement  purchasesExpandBtn;
			
			@FindBy(xpath="//span[contains(text(),'Purchases Vouchers')]")
			private static WebElement  purchaseVouchersBtn;
			
    //Inventory Menu and Sub Menus		
	@FindBy(xpath="//div[contains(text(),'Inventory')]")
	private static WebElement  inventoryMenu; 
	
		@FindBy(xpath="//a[@id='137']//span[contains(text(),'Transactions')]")
		private static WebElement  inventoryTransactionsMenu; 
			
			@FindBy(xpath="//*[@id='139']/span")
			private static WebElement  inventoryTransactionsPurchasesMenu; 
		
				@FindBy(xpath="//*[@id='2010']/span")
				private static WebElement  requestForQuoteVoucher;
				
				@FindBy(xpath="//*[@id='2011']/span")
				private static WebElement  purchasesQuotationsVoucher;
					
				@FindBy(xpath="//a[@id='2012']//span[contains(text(),'Purchases Orders')]")
				private static WebElement  purchasesOrdersVoucher;
			
				@FindBy(xpath="//*[@id='2013']/span")
				private static WebElement  materialReceiptNotesVoucher;
					
			@FindBy(xpath="//*[@id='140']/span")
			private static WebElement  inventoyTransactionsSalesMenu; 
				
				@FindBy(xpath="//*[@id='2018']/span")
				private static WebElement  salesQuotationsVoucher;
				
				@FindBy(xpath="//*[@id='2019']/span")
				private static WebElement  deliveryNotesVoucher;
				
				@FindBy(xpath="//*[@id='2022']/span")
				private static WebElement  posSalesVoucher;
				
				@FindBy(xpath="//*[@id='2045']/span")
				private static WebElement  productionOrdersVoucher;
				
				@FindBy(xpath="//*[@id='2017']/span")
				private static WebElement  salesOrdersVoucher;
							
			@FindBy(xpath="//a[@id='2033']//span[contains(text(),'Stocks')]")
			private static WebElement  inventoryTransactionsStocksMenu; 
				
				@FindBy(xpath="//*[@id='2034']/span")
				private static WebElement  shortagesInStockVoucher;
				
				@FindBy(xpath="//*[@id='2035']/span")
				private static WebElement  excessesInStocksVoucher;
					
				@FindBy(xpath="//*[@id='2036']/span")
				private static WebElement  stockTransfersVoucher;
				
				@FindBy(xpath="//a[@id='2037']//span[contains(text(),'Opening Stocks')]")
				private static WebElement  openingStocksVoucher;
				
				@FindBy(xpath="//a[@id='2061']//span[contains(text(),'Opening Stock New')]")
				private static WebElement  openingStocksNewVoucher;
				
				@FindBy(xpath="//*[@id='2038']/span")
				private static WebElement  materialRequisitionVoucher;
						
				@FindBy(xpath="//*[@id='2049']/span")
				private static WebElement  stockAdjustmentVoucher;
					
			@FindBy(xpath="//*[@id='164']/span")
			private static WebElement  holdAndUnholdStockVoucher;
			
			@FindBy(xpath="//*[@id='93']/span")
			private static WebElement  stockReconciliation;
			
			@FindBy(xpath="//*[@id='99']/span")
			private static WebElement  stockAllocation;
		
			
    //Validation and Confirmation messages
	@FindBy(xpath="//div[@class='theme_color font-6']")
	public static WebElement errorMessage;
	 
	@FindBy(xpath="//span[@class='icon-reject2 theme_color']")
	public static WebElement errorMessageCloseBtn;
	
	//Dash board Page
	@FindBy(xpath="//*[@id='dashName']")
    private static WebElement labelDashboard ;
	
	@FindBy(xpath="//*[@id='Select_dash']")
	private static WebElement selectDashboard ;
		
	@FindBy(xpath="//*[@id='Dashboard_AddDash']")
    private static WebElement newAddDashBoard;
	 
    @FindBy(xpath="//*[@id='Dashboard_Dash_Config']")
    private static WebElement dashboardCustomizationSettings;
			
		   
		    
    //Vouchers Settings Options
	@FindBy(xpath="//span[@id='updateButton']")
	private static WebElement  updateBtn;
	
	@FindBy(xpath="//i[@class='icon-close icon-font6']")
	private static WebElement  settings_closeBtn;
					
		//Documents Tab
		@FindBy(xpath="//div[@class='font-5 theme_background-color-inverse theme_color-inverse']")
		private static WebElement  documentsTab;
		
		@FindBy(xpath="//li[@id='navigationtab1']")
		private static WebElement  documentsTabForMaterialReceiptNotes;
		
		@FindBy(xpath="//span[@id='DocumentLoadMasterPopupBtn']")
		private static WebElement  loadMastersBtn;
			
			@FindBy(xpath="//select[@id='doc_voucherDropDown']")
			private static WebElement  loadmasterDropDown;
			
			@FindBy(xpath="//button[@id='btnSelectDependMaster']")
			private static WebElement  selectAllBtn;
			
			@FindBy(xpath="//button[contains(text(),'Reset')]")
			private static WebElement  resetBtn;
			
			@FindBy(xpath="//button[@class='Fbutton pull-right'][contains(text(),'Ok')]")
			private static WebElement  okBtn;
			
			@FindBy(xpath="//*[@id='editScreen_CustomizeButtons']/span[1]")
			private static WebElement  deleteTagBtn;
			
			@FindBy(xpath="//span[@id='DocumentAddGroupPopupBtn']")
			private static WebElement  addGroupBtn;
			
				@FindBy(xpath="//input[@id='doc_GroupName']")
				private static WebElement  groupNameTXt;
				
				@FindBy(xpath="//button[contains(text(),'Add')]")
				private static WebElement  addBtn;
				
				@FindBy(xpath="//div[@class='col-xs-12 form-group']//button[@id='btnCancel']")
				private static WebElement  cancelBtn;

			@FindBy(xpath="//div[@id='voucherTabContent']//span[2]")
			private static WebElement  deletegroupBtn;
			
			@FindBy(xpath="//input[@id='doc_title']")
			private static WebElement  titleTxt;
			
			@FindBy(xpath="//input[@id='doc_baseDocument']")
			private static WebElement  baseDocumentTxt;
			
			@FindBy(xpath="//input[@id='txtbox_doc_Accountdepandency']")
			private static WebElement  accountDependencyTxt;
			
				@FindBy(xpath="//span[contains(text(),'iExchangeAdjustmentGainAC')]")
				private static WebElement  iExchangeAdjustmentGainACChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iExchangeAdjustmentLossAC')]")
				private static WebElement  iExchangeAdjustmentLossACChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iPrimaryAccount')]")
				private static WebElement  iPrimaryAccountChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iCity')]")
				private static WebElement  iCityChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iDeliveryCity')]")
				private static WebElement  iDeliverycityChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iBankAc')]")
				private static WebElement  iBankACChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iPDCDiscountedAC')]")
				private static WebElement  iPDCDiscountedACChkBox;
						
			@FindBy(xpath="//input[@id='txtbox_doc_Productdepandency']")
			private static WebElement  itemDependencyTxt;
			
				@FindBy(xpath="//span[contains(text(),'Outlet__')]")
				private static WebElement  outletChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iCostofShortageStockAC')]")
				private static WebElement  iCostofShortageStockACChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iCostofExcessStockAC')]")
				private static WebElement  iCostofExcessStockACChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iCostofSaleReturnAC')]")
				private static WebElement  iCostofSaleReturnACChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iPurchaseVarianceAC')]")
				private static WebElement  iPurchaseVarianceACChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iDefaultBaseUnit')]")
				private static WebElement  iDefaultBaseUnitChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iDefaultSalesUnit')]")
				private static WebElement  iDefaultSalesUnitChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iDefaultPurchaseUnit')]")
				private static WebElement  iDefaultPurchaseUnitChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iCostOfIssueAccount')]")
				private static WebElement  iCostOfIssueAccountChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iStocksAccount')]")
				private static WebElement  iStocksAccountChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iSalesAccount')]")
				private static WebElement  iSalesAccountChkBox;
				
				@FindBy(xpath="//li[12]//div[1]//label[1]//span[1]")
				private static WebElement  otherdetails1Box;
				
				@FindBy(xpath="//li[13]//div[1]//label[1]//span[1]")
				private static WebElement  replenishment1ChkBox;
				
				@FindBy(xpath="//span[contains(text(),'Reorder__')]")
				private static WebElement  reorderChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iCategory')]")
				private static WebElement  iCategoryChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iWIPAccount')]")
				private static WebElement  iWIPAccountChkBox;
				
				@FindBy(xpath="//span[contains(text(),'Classification__')]")
				private static WebElement  classificationChkBox;
				
				@FindBy(xpath="//li[18]//div[1]//label[1]//span[1]")
				private static WebElement  repelenishment2ChkBox;
				
				@FindBy(xpath="//li[19]//div[1]//label[1]//span[1]")
				private static WebElement  otherDetails2ChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iBin')]")
				private static WebElement  iBinChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iAlternateCategory')]")
				private static WebElement  iAlternateCategoryChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iTaxCode')]")
				private static WebElement  iTaxCodeChkBox;
			
			@FindBy(xpath="//select[@id='doc_Accountdepandency_Filter']")
			private static WebElement  accountfilterDropdown;
			
			@FindBy(xpath="//select[@id='doc_Itemdepandency_Filter']")
			private static WebElement  itemfilterDropdown;
			
			
			// Documents Tab Grid Elements
			
		    // first row 
			
			@FindBy(xpath="//td[@id='doc_TagsTable_col_1-0']")
			private static WebElement  firstrow;
			
			@FindBy(xpath="//div[contains(text(),'Delete Row')]")
			private static WebElement  doc_deleterowBtn;
			
			@FindBy(xpath="//div[contains(text(),'Insert Row')]")
			private static WebElement  doc_insertRowBtn;
			
			@FindBy(xpath="//td[@id='doc_TagsTable_col_1-1']")
			private static WebElement  masters1;
			
			@FindBy(xpath="//td[@id='doc_TagsTable_col_1-2']")
			private static WebElement  position1;
			
			@FindBy(xpath="//td[@id='doc_TagsTable_col_1-3']")
			private static WebElement  showDependency1;
			
			@FindBy(xpath="//td[@id='doc_TagsTable_col_1-4']")
			private static WebElement  group1;
			
			@FindBy(xpath="//td[@id='doc_TagsTable_col_1-5']")
			private static WebElement  filter1;
			
			@FindBy(xpath="//td[@id='doc_TagsTable_col_1-6']")
			private static WebElement  mandatory1;
			
			
			// Second Row // Delete and Insert row are same
			
			@FindBy(xpath="//td[@id='doc_TagsTable_col_2-0']")
			private static WebElement  secondRow;
			
			@FindBy(xpath="//td[@id='doc_TagsTable_col_2-1']")
			private static WebElement  masters2;
			
			@FindBy(xpath="//td[@id='doc_TagsTable_col_2-2']")
			private static WebElement  position2;
			
			@FindBy(xpath="//td[@id='doc_TagsTable_col_2-3']")
			private static WebElement  showDependency2;
			
			@FindBy(xpath="//td[@id='doc_TagsTable_col_2-4']")
			private static WebElement  group2;
			
			@FindBy(xpath="//td[@id='doc_TagsTable_col_2-5']")
			private static WebElement  filter2;
			
			@FindBy(xpath="//td[@id='doc_TagsTable_col_2-6']")
			private static WebElement  mandatory2;
			
			// After clicking // Properties Changes which are same for all rows
			
			@FindBy(xpath="//select[@id='doc_TagsTableMasterDropDown']")
			private static WebElement  masterDropDown;
			
			@FindBy(xpath="//select[@id='doc_TagsPositionDropDown']")
			private static WebElement  positionDropdown;
			
			@FindBy(xpath="//input[@id='txtbox_doc_TagsDepedencyDropDown']")
			private static WebElement  showDependencyDropdown;
			
			@FindBy(xpath="//input[@id='doc_TagsGroupTxtbox']")
			private static WebElement  groupTxt;
			
			@FindBy(xpath="//select[@id='docFilter']")
			private static WebElement  filterDropdown;
			
			@FindBy(xpath="//select[@id='doc_MandatoryDropDown']")
			private static WebElement  mandatoryDropDown;
			
		    
	
			
	 //Views Tab
	@FindBy(xpath="//span[@class='icon-views'")
	private static WebElement  viewsTab;
		
	//Export Fields 
	@FindBy(xpath="//span[contains(text(),'Export Fields')]")
	private static WebElement exportFieldsTab;
		
	//Triggers
	@FindBy(xpath="//span[@class='icon-trigger icon-font7']")
	private static WebElement  triggersTab;	
		
	//Document Numbering
	@FindBy(xpath="//span[contains(text(),'Document Numbering')]")
	private static WebElement  documentNumberingTab;
		
	//Hire Purchase	
	@FindBy(xpath="//span[contains(text(),'Hire Purchase')]")
	private static WebElement hirePurchasetab;
		
	//Reports Tab	
	@FindBy(xpath="//span[@class='icon-text70 icon-font7']")
	private static WebElement  reportsTab;	
	
	//Schemes
	@FindBy(xpath="//span[contains(text(),'Schemes')]")
	private static WebElement schemestab;	
	
	
	// Bin Inward Elements
	
		@FindBy (xpath="//input[@id='id_bins_totalquantity']")
		private static WebElement binTotalQty;
		
		@FindBy (xpath="//div[@class='modal-body']//div[4]")
		private static WebElement binBaseUOM;
		
		@FindBy (xpath="//input[@id='srch_bin']")
		private static WebElement binSearchTxt;
		
		@FindBy (xpath="//button[contains(text(),'Search')]")
		private static WebElement binSearchBtn; 
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-0']")
		private static WebElement  binselect1stRow_1stColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-1']")
		private static WebElement  binselect1stRow_2ndColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-3']")
		private static WebElement  binselect1stRow_3rdColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-5']")
		private static WebElement  binselect1stRow_4thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-6']")
		private static WebElement  binselect1stRow_5thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-7']")
		private static WebElement  binselect1stRow_6thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-8']")
		private static WebElement  binselect1stRow_7thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-12']")
		private static WebElement  binselect1stRow_8thColumn;
		
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-0']")
		private static WebElement  binselect2ndRow_1stColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-1']")
		private static WebElement  binselect2ndRow_2ndColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-3']")
		private static WebElement  binselect2ndRow_3rdColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-5']")
		private static WebElement  binselect2ndRow_4thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-6']")
		private static WebElement  binselect2ndRow_5thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-7']")
		private static WebElement  binselect2ndRow_6thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-8']")
		private static WebElement  binselect2ndRow_7thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-12']")
		private static WebElement  binselect2ndRow_8thColumn;
		
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-0']")
		private static WebElement  binselect3rdRow_1stColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-1']")
		private static WebElement  binselect3rdRow_2ndColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-3']")
		private static WebElement  binselect3rdRow_3rdColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-5']")
		private static WebElement  binselect3rdRow_4thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-6']")
		private static WebElement  binselect3rdRow_5thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-7']")
		private static WebElement  binselect3rdRow_6thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-8']")
		private static WebElement  binselect3rdRow_7thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-12']")
		private static WebElement  binselect3rdRow_8thColumn;
		
		
		@FindBy(xpath="//span[@class='icon-sum']")
		private static WebElement  binRowSum;
		
		@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[2]")
		private static WebElement  binRowSum_2ndColumn;
		
		@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[4]")
		private static WebElement  binSelect4htRow_3rdColumn;
		
		@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[6]")
		private static WebElement  binRowSum_4thColumn;
		
		@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[7]")
		private static WebElement  binRowSum_5thColumn;
		
		@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[8]")
		private static WebElement  binRowSum_6thColumn;
		
		@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[9]")
		private static WebElement  binRowSum_7thColumn;
		
		@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[12]")
		private static WebElement  binRowSum_8thColumn;
		
		
		@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[13]")
		private static WebElement  binSumInward;
		
		
		
		@FindBy (xpath="//input[@id='id_bins_balance']")
		private static WebElement binBalanceTxt;
		
		@FindBy (xpath="//div[@id='id_btnalternatecategorycheck']//div[@class='toolbar_button_image']")
		private static WebElement binAlternateCategoryCheckBtn;
		
		@FindBy (xpath="//div[@id='id_btnautoallocate']")
		private static WebElement binAutoAllocateBtn;
		
		@FindBy (xpath="//span[@class='icon-pick icon-font4']")
		private static WebElement binPickBtn; 
		
		@FindBy (xpath="//div[@id='id_btnautoallocategroup']//div[@class='toolbar_button_image']")
		private static WebElement binAutoAllocateWithinGroupBtn;
		
		@FindBy (xpath="//div[@id='id_bins_ok']//span[@class='icon-ok icon-font6']")
		private static WebElement binOkBtn;
		
		@FindBy (xpath="//div[@class='col-xs-9 pull-right']//span[@class='icon-close icon-font6']")
		private static WebElement binCancelBtn;

		
		// RMA POpup Window
		@FindBy (xpath="//div[@id='Modal_Header']/div[1]")
		private static WebElement rmaScreenTitle;
		
		@FindBy (xpath="//input[@id='txtSerialNo']")
		private static WebElement rmaSerialNumberTxtField;

		@FindBy (xpath="//input[@id='txtQuantity']")
		private static WebElement rmaQuantityTxtField;
		
		@FindBy (xpath="//div[@id='img_add']/span")
		private static WebElement rmaAddBtn;
			
		@FindBy (xpath="//div[@id='Modal_Search_Body']/div[3]/label")
		private static WebElement rmaNumberofItemsLabel;
		
		@FindBy (xpath="//th[@id='RMA_Table_control_heading_1']/div")
		private static WebElement rmaTableHeadingRMA;
		
		@FindBy (xpath="//th[@id='RMA_Table_control_heading_2']/div")
		private static WebElement rmaTableHeadingDocumentNo;
		
		@FindBy (xpath="//th[@id='RMA_Table_control_heading_3']/div")
		private static WebElement rmaTableHeadingDocumentDate;
		
		@FindBy (xpath="//div[@id='RMAModel_Bottom']/div[1]/label")
		private static WebElement rmaClearBtn;
		
		@FindBy (xpath="//div[@id='RMAModel_Bottom']/div[2]/label")
		private static WebElement rmaOkBtn;
		
		@FindBy (xpath="//div[@id='RMAModel_Bottom']/div[3]/label")
		private static WebElement rmaCancelBtn;
		
		@FindBy (xpath="//div[@id='Modal_Header']/div[2]/span/i")
		private static WebElement rmaCloseBtn;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_1-1']")
		private static WebElement rmaTableRow1Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_2-1']")
		private static WebElement rmaTableRow2Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_3-1']")
		private static WebElement rmaTableRow3Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_4-1']")
		private static WebElement rmaTableRow4Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_5-1']")
		private static WebElement rmaTableRow5Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_6-1']")
		private static WebElement rmaTableRow6Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_7-1']")
		private static WebElement rmaTableRow7Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_8-1']")
		private static WebElement rmaTableRow8Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_9-1']")
		private static WebElement rmaTableRow9Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_10-1']")
		private static WebElement rmaTableRow10Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_11-1']")
		private static WebElement rmaTableRow11Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_12-1']")
		private static WebElement rmaTableRow12Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_13-1']")
		private static WebElement rmaTableRow13Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_14-1']")
		private static WebElement rmaTableRow14Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_15-1']")
		private static WebElement rmaTableRow15Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_16-1']")
		private static WebElement rmaTableRow16Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_17-1']")
		private static WebElement rmaTableRow17Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_18-1']")
		private static WebElement rmaTableRow18Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_19-1']")
		private static WebElement rmaTableRow19Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_20-1']")
		private static WebElement rmaTableRow20Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_1-2']")
		private static WebElement rmaTableRow1Column2;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_1-3']")
		private static WebElement rmaTableRow1Column3;
		
		@FindBy (xpath="//td[@id='id_body_38_input_image']/img")
		private static WebElement rmaExpansionBtn;
		
		
		//----------------------------------------------------------------------------------------------------------    
	    // Edit Screen Tab     
				    
	    @FindBy(xpath="//span[contains(text(),'Edit Screen')]")
	   	private static WebElement  editScreenTab; 
		
		@FindBy(xpath="//i[@class='icon-add icon-font7']")
		private static WebElement editScreenaddBtn;

		@FindBy(xpath="//a[contains(text(),'Field Details')]")
		private static WebElement editScreenFieldDetailsTab;
	   
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_Caption']")
		private static WebElement  editScreenCaptionTxt;

		@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_DataType']")
		private static WebElement  editScreenCaptionDataTypeDropdown;
		
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_DefaultValue']")
		private static WebElement editScreenDefaultValueTxt;
	   
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_noofDecimals']")
		private static WebElement editScreenNoOfDecimalsDropdown;
	   
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_toolTip']")
		private static WebElement editScreenToolTipTxt;
	   
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_bannerText']")
		private static WebElement editScreenBannerTextTxt;
	   
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_MinValue']")
		private static WebElement editScreenMinimunValueTxt;
	   
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_MaxValue']")
		private static WebElement editScreenMaximunValueTxt;
	   
		@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_behaviour']")
		private static WebElement editScreenAddFieldsBehaviourDropdown;
		
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_Formula_textbox']")
		private static WebElement  editScreenAddBehaviourformulaTxt;
		
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_Formula_Ok']")
		private static WebElement  editScreenAddBehaviourFormulaokBtn;
	   
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_PreLoad_textbox']")
		private static WebElement editScreenPreloadTxt;
	   
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_PreLoad_textbox']")
		private static WebElement editScreenRestrictformulaTxt;
	   
		@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_RoundOff']")
		private static WebElement editScreenRoundOffsDropdown;
	   
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_RoundOffTo']")
		private static WebElement editScreenRoundOffToTxt;
	   
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_RestrictMsg']")
		private static WebElement editScreenRestrictMessageTxt;
	   
		@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_AddToNet']")
		private static WebElement editScreenAddToNetDropdown;
	   
		@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_AddToStock']")
		private static WebElement editScreenAddToStockDropDown;

		@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_Position']")
		private static WebElement editScreenpositionDropdown;  
	   
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_Columnwidth']")
		private static WebElement editScreenColumnWidthTxt;  
	   
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkValinBaseCurency']")
		private static WebElement editScreenValueInBaseCurrencyChkBox;  
	   
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkValinBaseCurency']")
		private static WebElement editScreenHideFromSummaryChkBox;  
	   
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkPostToAcc']")
		private static WebElement editScreenPostToAccountChkBox;  
	 
		@FindBy(xpath="//input[@id='acc1-1']")
		private static WebElement editScreenAccount1Radio;  
				   
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_defaultAcc1']")
		private static WebElement editScreenAccount1Txt;  
	   
		@FindBy(xpath="//*[@id='editScreen_FieldsCustomization_defaultAcc1_input_image']/span")
		private static WebElement editScreenAccount1ExpandBtn;  
	   
		@FindBy(xpath="//*[@id='editScreen_FieldsCustomization_defaultAcc1_input_settings']/span")
		private static WebElement editScreenAccount1SettingsBtn;  
				   
		    @FindBy(xpath="//div[@id='editScreen_FieldsCustomization_defaultAcc1_customize_popup_container']")
			private static WebElement editScreenAccount1Container;  
		    
		    @FindBy(xpath="//div[@id='editScreen_FieldsCustomization_defaultAcc1_customize_popup_footer']//input[1]")
			private static WebElement editScreenAccount1StandardFiledsBtn;  
							    
			    @FindBy(xpath="//select[@id='editScreen_FieldsCustomization_defaultAcc1_customize_popup_standardfields_list']")
				private static WebElement editScreenAccount1StandardFiledsDropdown;  
			    
			    @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_defaultAcc1_customize_popup_standardfields_header']")
				private static WebElement editScreenAccount1StandardFiledsHeaderTxt;  
			    
			    @FindBy(xpath="//select[@id='editScreen_FieldsCustomization_defaultAcc1_customize_popup_standardfields_alignment']")
				private static WebElement editScreenAccount1StandardFiledsAllignmentDropdown; 
			    
			    @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_defaultAcc1_customize_popup_standardfields_width']")
				private static WebElement editScreenAccount1StandardFiledsWidthTxt;  
			    
			    @FindBy(xpath="//section[@id='page_Content']//input[3]")
				private static WebElement editScreenAccount1StandardFiledsokBtn;  
			    
			    @FindBy(xpath="//section[@id='page_Content']//input[4]")
				private static WebElement editScreenAccount1StandardFiledscancelBtn;  
							    
		    @FindBy(xpath="//div[@id='editScreen_FieldsCustomization_defaultAcc1_search_container']//input[2]")
			private static WebElement editScreenAccount1deleteColumnBtn;
		    
		    @FindBy(xpath="//section[@id='page_Content']//input[3]")
		   	private static WebElement editScreenAccount1okBtn;  
		       
		    @FindBy(xpath="//section[@id='page_Content']//input[4]")
		   	private static WebElement editScreenAccount1cancelBtn;
				
		@FindBy(xpath="//input[@id='acc2-2']")
		private static WebElement editScreenAccount2Radio;  
		    
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_defaultAcc2']")
		private static WebElement editScreenAccount2Txt;  
		    
		@FindBy(xpath="//*[@id='editScreen_FieldsCustomization_defaultAcc2_input_image']/span")
		private static WebElement editScreenAccount2ExpandBtn;
	  
	    @FindBy(xpath="//*[@id='editScreen_FieldsCustomization_defaultAcc2_input_settings']/span")
	  	private static WebElement editScreenAccount2SettingsBtn;  
				      
		    @FindBy(xpath="//div[@id='editScreen_FieldsCustomization_defaultAcc2_customize_popup_container']")
			private static WebElement editScreenAccount2Container;  
		    
		    @FindBy(xpath="//div[@id='editScreen_FieldsCustomization_defaultAcc2_customize_popup_footer']//input[1]")
			private static WebElement editScreenAccount2StandardFiledsBtn;  
				  			    
			    @FindBy(xpath="//select[@id='editScreen_FieldsCustomization_defaultAcc2_customize_popup_standardfields_list']")
				private static WebElement editScreenAccount2StandardFiledsDropdown;  
			    
			    @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_defaultAcc2_customize_popup_standardfields_header']")
				private static WebElement editScreenAccount2StandardFiledsHeaderTxt;  
			    
			    @FindBy(xpath="//select[@id='editScreen_FieldsCustomization_defaultAcc2_customize_popup_standardfields_alignment']")
				private static WebElement editScreenAccount2StandardFiledsAllignmentDropdown; 
			    
			    @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_defaultAcc2_customize_popup_standardfields_width']")
				private static WebElement editScreenAccount2StandardFiledsWidthTxt;  
			    
			    @FindBy(xpath="//section[@id='page_Content']//input[3]")
				private static WebElement editScreenAccount2StandardFiledsokBtn;  
			    
			    @FindBy(xpath="//section[@id='page_Content']//input[4]")
				private static WebElement editScreenAccount2StandardFiledscancelBtn;  
				  			    
		    @FindBy(xpath="//div[@id='editScreen_FieldsCustomization_defaultAcc2_search_container']//input[2]")
			private static WebElement editScreenAccount2deleteColumnBtn;
		    
		    @FindBy(xpath="//section[@id='page_Content']//input[3]")
		   	private static WebElement editScreenAccount2okBtn;  
		       
		       @FindBy(xpath="//section[@id='page_Content']//input[4]")
		   	private static WebElement editScreenAccount2cancelBtn;
	   
	   @FindBy(xpath="//input[@id='acc1-3']")
	   private static WebElement editScreenAccount1VariableRadio; 
	  
	   @FindBy(xpath="//input[@id='Account_1Var']")
	   private static WebElement editScreenAccount1VariableTxt;
	   
	   @FindBy(xpath="//input[@id='acc2-4']")
	   private static WebElement editScreenAccount2VariableRadio; 
	  
	   @FindBy(xpath="//input[@id='Account_2Var']")
	   private static WebElement editScreenAccount2VariableTxt;
	   
	   @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_RegularExpr']")
	   private static WebElement editScreenRegularExpTxt; 
	   
	   @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_ErrorMsg']")
	   private static WebElement editScreenerrorMessageTxt; 

	 // properties  
	   
	  @FindBy(xpath="//a[contains(text(),'Properties')]")
	  private static WebElement editScreenPropertiesTab;  
	     
	  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkAuditTrail']")
	  private static WebElement editScreenauditTrailChkBox;  
	     
	  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkCantExprt']")
	  private static WebElement editScreencantExportChkBox;  
	  
	  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkCantImprt']")
	  private static WebElement editScreencantImportChkbox; 
	     
	  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkHidden']")
	  private static WebElement editScreenhiddenChkbox;  
	  
	  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkMandatory']")
	  private static WebElement editScreenmandatorychkBox; 
	     
	  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkNotAvailForReports']")
	  private static WebElement editScreennotAvailableForReportsChkBox;  
	     
	  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkReadOnly']")
	  private static WebElement editScreenreadOnlyChkBox;  
	 
	     
	  @FindBy(xpath="//span[contains(text(),'Apply')]")
	  private static WebElement editScreenApplyBtn;  
	     
	  @FindBy(xpath="//span[@id='editScreen_FieldsCustomization_Close']")
	  private static WebElement editScreencloseBtn;  
	  

	 
	  @FindBy(xpath="//a[@href='#editScreen_FieldsCustomization_ExternalModules']")
	  private static WebElement editScreenExternalModulesTab; 
				
		// External Module Tab is named As EFES And ELV For Each Screen (ReceiptsEFES,ReceiptsELV )
	    // External Functions(External Fields) Changes From Screen to Screen
	
		// Formatting Tab
				  
	    @FindBy(xpath="//*[@id='editScreen_FieldsCustomization_tabs']/li[3]/a")
	    private static WebElement editScreenformattingTab;

		@FindBy(xpath="//*[@id='fontFamily_editScreen_FieldsCustomization_FontCtrl']")
	    private static WebElement editScreenFontFamilyDropdown;
		
	    @FindBy(xpath="//*[@id='fontStyle_editScreen_FieldsCustomization_FontCtrl']")
	    private static WebElement editScreenFontStyleDropdown;

	    @FindBy(xpath="//*[@id='fontWeight_editScreen_FieldsCustomization_FontCtrl']")
	    private static WebElement editScreenFontWeightDropdown;

		@FindBy(xpath="//*[@id='fontSizes_editScreen_FieldsCustomization_FontCtrl']")
		private static WebElement editScreenFontSizeDropdown;
		
		@FindBy(xpath="//*[@id='fontForeColor_editScreen_FieldsCustomization_FontCtrl']")
		private static WebElement editScreenForeColourDropdown;
		
		@FindBy(xpath="//*[@id='fontBackColor_editScreen_FieldsCustomization_FontCtrl']")
		private static WebElement editScreenBackColourDropdown;
		
		@FindBy(xpath="//*[@id='chkBaseline_editScreen_FieldsCustomization_FontCtrl']")
		private static WebElement editScreenBaseLineCheckbox;
		
		@FindBy(xpath="//*[@id='chkOverLine_editScreen_FieldsCustomization_FontCtrl']")
		private static WebElement editScreenOverLineCheckbox;
		
		@FindBy(xpath="//*[@id='chkStrikeThrough_editScreen_FieldsCustomization_FontCtrl']")
		private static WebElement EditScreenStrikeThroughCheckbox;
		
		@FindBy(xpath="//*[@id='chkUnderline_editScreen_FieldsCustomization_FontCtrl']")
		private static WebElement editScreenUnderlineCheckbox;
		
		@FindBy(xpath="//*[@id='previewfont_editScreen_FieldsCustomization_FontCtrl']")
		private static WebElement editScreenFontPreviewTxt;
		
		@FindBy(xpath="//*[@id='editScreen_FieldsCustomization_Formatting_chkenableFont']")
		private static WebElement editScreenenableFontChkbox;
				
		  @FindBy(xpath="//i[@class='icon-copyfields icon-font7']")
		  private static WebElement editScreenLoadFieldsBtn;  
		     
		  @FindBy(xpath="//select[@id='editScreen_voucherDropDown']")
		  private static WebElement editScreenLoadFieldsDropdown;  
		     
		  @FindBy(xpath="//*[@id='editScreen_copyFieldsDiv']/div[3]/button[1]")
		  private static WebElement editScreenselectAllBtn;  
		  
		  @FindBy(xpath="//div[@id='editScreen_copyFieldsDiv']//button[@class='Fbutton pull-right'][contains(text(),'Ok')]")
		  private static WebElement editScreenokBtn;  
		     
		  @FindBy(xpath="//input[@id='searchlayout2']")
		  private static WebElement editScreenSearchTxt;  
		     
		  @FindBy(xpath="//button[@id='btnEditScreenPrev']")
		  private static WebElement editScreenPreviousBtn;  
		     
		  @FindBy(xpath="//button[@id='btnEditScreenNext']")
		  private static WebElement editScreenNextBtn;  
		  
		  @FindBy(xpath="//*[@id='editScreen_tabContent']/label")
			private static WebElement editScreenRatePreloadLabel;
		  
		  @FindBy(xpath="//select[@id='cmbBehaviour']")
		  private static WebElement editScreenBehaviourDropdown;
		  
		  @FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_textbox']")
		  private static WebElement editScreenQuantityPreloadedTxt;
		  	  
		  @FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_formulaText']")
		  private static WebElement  formulaTxt;
			
		  @FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_expandedFormula']")
		  private static WebElement  expandeFormula;
					
	     // Grid Elements 
		@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_1-2']//span[@class='icon-collepse icon-font8']")
		private static WebElement  editScreenTransactionExpandBtn;
				
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_2-2']")
			private static WebElement  editScreenQuantity;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_2-3']")
			private static WebElement  editScreenqty;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_3-2']")
			private static WebElement  editScreenRate;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_3-3']")
			private static WebElement  editScreenrt;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_4-2']")
			private static WebElement  editScreenAlternateQty;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_4-3']")
			private static WebElement  editScreenqtya;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_5-2']")
			private static WebElement  editScreengrossAmount;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_5-3']")
			private static WebElement  editScreengr;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_6-2']")
			private static WebElement  editScreenStockValue;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_6-3']")
			private static WebElement  editScreenstkv;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_7-2']")
			private static WebElement  editScreenAccount;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_7-3']")
			private static WebElement  EditScreenacc;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_8-2']")
			private static WebElement  editScreenAccount2;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_8-3']")
			private static WebElement  editScreenacc2;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_9-2']")
			private static WebElement  editScreenExchangeRate;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_9-3']")
			private static WebElement  editScreenexrt;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_10-2']")
			private static WebElement  editScreenqtyinBaseUnit;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_10-3']")
			private static WebElement  editScreenqtyb;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_11-2']")
			private static WebElement  editScreenCurrency;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_11-3']")
			private static WebElement  editScreencrn;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_12-2']")
			private static WebElement  editScreenValueOfThetagMasterIDofTheTag;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_12-3']")
			private static WebElement  editScreentgval;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_13-2']")
			private static WebElement  editScreenNetAmount;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_13-3']")
			private static WebElement  EditScreennet;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_14-2']")
			private static WebElement  editScreenNetAmountInOriginalCurrency;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_14-3']")
			private static WebElement  editScreenneto;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_15-2']")
			private static WebElement  editScreenTotalQuantity;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_15-3']")
			private static WebElement  editScreentqty;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_16-2']")
			private static WebElement  editScreenTotalGross;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_16-3']")
			private static WebElement  editScreentgr;
							
		@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_17-2']//span[@class='icon-expand icon-font8']")
		private static WebElement  screenFiledExpandBtn;
				
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_18-2']")
			private static WebElement  mrnQtyInput;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_18-3']")
			private static WebElement  sb1;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_19-2']")
			private static WebElement  mrnQtyCalculatedValue;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_19-3']")
			private static WebElement  sbo1;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_20-2']")
			private static WebElement  qtyBalancedInput;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_20-3']")
			private static WebElement  sb2;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_21-2']")
			private static WebElement  qtyCalculatedValue;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_21-3']")
			private static WebElement  sbO2;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_22-2']")
			private static WebElement  averagerateInput;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_22-3']")
			private static WebElement  sb3;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_23-2']")
			private static WebElement  avreageRateCalculatedValue;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_23-3']")
			private static WebElement  sbO3;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_24-2']")
			private static WebElement  addValueInput;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_24-3']")
			private static WebElement  sb4;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_25-2']")
			private static WebElement  addValueInputCalculatedValue;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_25-3']")
			private static WebElement  sbO4;
				
		@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_26-2']//span[@class='icon-collepse icon-font8']")
		private static WebElement  layoutFieldExpandBtn;
		
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_27-2']")
			private static WebElement  appropriateBasedOnInput;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_27-3']")
			private static WebElement  lh0;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_28-2']")
			private static WebElement  additionalValueInput;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_28-3']")
			private static WebElement  lh1;
							
	    //Grid Completed
		
		@FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_availableVariables']")
		private static WebElement  editScreenqtyFormulaSearchTxt;
		
		@FindBy(xpath="//button[@id='editScreen_qtyPreLoaded_PlusOpt']")
		private static WebElement  editScreenqtyPlusBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'-')]")
		private static WebElement  editScreenqtyMinusBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded']//button[3]")
		private static WebElement  editScreenqtyDivideBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'*')]")
		private static WebElement  editScreenqtyMultiplyBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded']//button[5]")
		private static WebElement  editScreenqtyBrackets1Btn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded']//button[6]")
		private static WebElement  editScreenqtyBrackets2Btn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'~')]")
		private static WebElement  editScreenqtyTildeBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'&')]")
		private static WebElement  editScreenqtyAndBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'%')]")
		private static WebElement  editScreenqtyPercentBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//div[@id='operationButtons']//button[@class='btn btn-link'][contains(text(),']')]")
		private static WebElement  editScreenqtySquarebracketBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'|')]")
		private static WebElement  editScreenqtyVerticalBarBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'\')]")
		private static WebElement  editScreenqtyBackSlashBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'<')]")
		private static WebElement  editScreenqtyLessThanbtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'>')]")
		private static WebElement  editScreenqtyGreaterThanBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'=')]")
		private static WebElement  editScreenqtyExclamationBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'=')]")
		private static WebElement  editScreenqtyEqualBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'?:')]")
		private static WebElement  editScreenqtyQuestionBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'^')]")
		private static WebElement  editScreenqtyCaretBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'DateDiff()')]")
		private static WebElement  editScreenqtyDateDiffBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'Cond()')]")
		private static WebElement  editScreenqtyCondBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'Min()')]")
		private static WebElement  editScreenqtyMinBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'Max()')]")
		private static WebElement  editScreenqtyMaxBtn;
		
		@FindBy(xpath="//button[@id='editScreen_qtyPreLoaded_Ok']")
		private static WebElement  editScreenqtyConditionokBtn;
		
		@FindBy(xpath="//button[@id='editScreen_qtyPreLoaded_Cancel']")
		private static WebElement  editScreenqtyConditioncancelBtn;
				
				
		@FindBy(xpath="//*[@id='editScreen_qtyFormula_textbox']")
		private static WebElement  editScreenformulaTxt;
		
		
		// CustomizeGrid
		
		@FindBy(xpath="//i[@class='icon-custamize icon-font7']")
		private static WebElement editScreencustomizeGridBtn;  
		  
		@FindBy(xpath="//span[contains(text(),'Apportion')")
		private static WebElement editScreenApportionBtn;
		     
		@FindBy(xpath="//span[contains(text(),'Audit Trial')]")
		private static WebElement editScreenAuditTrialBtn;  
		    
		@FindBy(xpath="//span[contains(text(),'Back color')]")
		private static WebElement editScreenbackColorBtn;  
		     
		@FindBy(xpath="//span[contains(text(),'Banner text')]")
		private static WebElement editScreenbannerTextBtn;  
		 
		  @FindBy(xpath="//span[contains(text(),'Cannot be exported')]")
		  private static WebElement editScreencannotBeExportedBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Cannot be imported')]")
		  private static WebElement editScreencannotBeImportedBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Column Span')]")
		  private static WebElement editScreencolumnSpanBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Copy from Parent')]")
		  private static WebElement editScreencopyFromParentBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'DataType')]")
		  private static WebElement editScreendataTypeBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Default Value')]")
		  private static WebElement editScreenDefaultValueBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Error message')]")
		  private static WebElement editScreenerrorMessageBtn;  
		 
		  @FindBy(xpath="//span[contains(text(),'External module attached')]")
		  private static WebElement editScreenExternalModuleAttachedBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Field Order')]")
		  private static WebElement editScreenFilterOrderBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Font')]")
		  private static WebElement editScreenFontBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Group Name')]")
		  private static WebElement editScreengroupNameBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Hide left panel')]")
		  private static WebElement editScreenHideLeftPanelBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Information Field')]")
		  private static WebElement editScreenInformationFieldBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Mandatory')]")
		  private static WebElement editScreenMandatoryBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Mass Update')]")
		  private static WebElement editScreenMassupdateBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Maximum Value')]")
		  private static WebElement editScreenMaximumValueBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Merge Field')]")
		  private static WebElement editScreenMergerFieldBtn;  
		  
		  @FindBy(xpath="//span[contains(text(),'Minimum Value')]")
		  private static WebElement editScreenMinimumValueBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'No Of Decimals')]")
		  private static WebElement editScreenNoOfDecimalsBtn;  
		  
		  @FindBy(xpath="//span[contains(text(),'Not available for reports')]")
		  private static WebElement editScreenNotAvailableForReportsBtn; 
		     
		  @FindBy(xpath="//span[contains(text(),'Read Only')]")
		  private static WebElement editScreenReadOnlyBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Regular expression')]")
		  private static WebElement editScreenRegularExpressionBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Restrict formula')]")
		  private static WebElement editScreenRestrictFormulaBtn;  
		  
		  @FindBy(xpath="//span[contains(text(),'Restrict Message')]")
		  private static WebElement editScreenRestrictMessageBtn;  
		  
		  @FindBy(xpath="//span[contains(text(),'Round Offs')]")
		  private static WebElement editScreenRoundsOffsBtn;  
		
		  @FindBy(xpath="//span[contains(text(),'Row Span')]")
		  private static WebElement editScreenRowSpanBtn; 
		     
		  @FindBy(xpath="//span[contains(text(),'Rule Attached')]")
		  private static WebElement editScreenRuleAttachedBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Tooltip')]")
		  private static WebElement editScreenToolTipBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Variable name')]")
		  private static WebElement editScreenVariableNameBtn;  
		 
		  
		  
		  
		
		 // Body Tab 
		  
		  @FindBy(xpath="//a[contains(text(),'Body')]")
		  private static WebElement  editScreenBodyTab; 
		  
		  @FindBy(xpath="//td[@id='editScreen_bodyrow_1 _1']//span[@id='editIcon']")
		  private static WebElement  editScreenBody1stRowEditBtn; 
		  
		  @FindBy(xpath="//td[@id='editScreen_bodyrow_1 _1']//span[@id='deleteIcon']")
		  private static WebElement  editScreenBody1stRowDeleteBtn; 
		  
		  @FindBy(xpath="//td[@id='editScreen_bodyrow_2 _1']//span[@id='editIcon']")
		  private static WebElement  editScreenBody2ndRowEditBtn; 
		  
		  @FindBy(xpath="//td[@id='editScreen_bodyrow_2 _1']//span[@id='deleteIcon']")
		  private static WebElement  editScreenBody2ndRowDeleteBtn; 
		  
		  @FindBy(xpath="//td[@id='editScreen_bodyrow_3 _1']//span[@id='editIcon']")
		  private static WebElement  editScreenBody3rdRowEditBtn; 
		  
		  @FindBy(xpath="//td[@id='editScreen_bodyrow_3 _1']//span[@id='deleteIcon']")
		  private static WebElement  editScreenBody3rdRowDeleteBtn; 
		  
		  @FindBy(xpath="//td[@id='editScreen_bodyrow_4 _1']//span[@id='editIcon']")
		  private static WebElement  editScreenBody4thRowEditBtn; 
		  
		  @FindBy(xpath="//td[@id='editScreen_bodyrow_4 _1']//span[@id='deleteIcon']")
		  private static WebElement  editScreenBody4thRowDeleteBtn; 
		  
		  @FindBy(xpath="//td[@id='editScreen_bodyrow_5 _1']//span[@id='editIcon']")
		  private static WebElement  editScreenBody5thRowEditBtn; 
		  
		  @FindBy(xpath="//td[@id='editScreen_bodyrow_5 _1']//span[@id='deleteIcon']")
		  private static WebElement  editScreenBody5thRowDeleteBtn;
		  
		  @FindBy(xpath="//td[@id='editScreen_bodyrow_6 _1']//span[@id='editIcon']")
		  private static WebElement  editScreenBody6thRowEditBtn; 
		  
		  @FindBy(xpath="//td[@id='editScreen_bodyrow_6 _1']//span[@id='deleteIcon']")
		  private static WebElement  editScreenBody6thRowDeleteBtn;
		  
		  @FindBy(xpath="//div[@id='editScreen_body']//button[@class='icon-up-arrow Fbutton']")
		  private static WebElement  editScreenBodyUpArrowBtn; 
		
		  @FindBy(xpath="//div[@id='editScreen_body']//button[@class='icon-down-arrow Fbutton']")
		  private static WebElement  editScreenBodyDownArrowBtn;
						
		  // Footer Tab
		  
		  @FindBy(xpath="//a[contains(text(),'Footer')]")
		  private static WebElement  editScreenFooterTab;  
		  
		  @FindBy(xpath="//td[@id='editScreen_footerrow_1 _1']//span[@id='editIcon']")
		  private static WebElement  editScreenFooter1stRowEditBtn; 
		  
		  @FindBy(xpath="//td[@id='editScreen_footerrow_1 _1']//span[@id='deleteIcon']")
		  private static WebElement  editScreenFooter1stRowDeleteBtn; 
		  
		  @FindBy(xpath="//td[@id='editScreen_footerrow_2 _1']//span[@id='editIcon']")
		  private static WebElement  editScreenFooter2ndRowEditBtn; 
		  
		  @FindBy(xpath="//td[@id='editScreen_footerrow_2 _1']//span[@id='deleteIcon']")
		  private static WebElement  editScreenFooter2ndRowDeleteBtn; 
		  
		  @FindBy(xpath="//div[@id='editScreen_footer']//button[@class='icon-up-arrow Fbutton']")
		  private static WebElement  editScreenFooterUpArrowBtn; 
		
		  @FindBy(xpath="//div[@id='editScreen_footer']//button[@class='icon-down-arrow Fbutton']")
		  private static WebElement  editScreenFooterDownArrowBtn; 
		  
		  	@FindBy(xpath="//label[contains(text(),'Quantity preloaded')]")
			private static WebElement qtyPreloadedLabel;
			
			@FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_textbox']")
			private static WebElement qtyPreloadedTxt;
			
			@FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_formulaText']")
			private static WebElement qtyPreloadedformulaTxt;
			
			@FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_availableVariables']")
			private static WebElement qtyPreloadedFormulaSearchTxt;
			
			@FindBy(xpath="//button[@id='editScreen_qtyPreLoaded_Ok']")
			private static WebElement qtyPreloadedFormulaokBtn;
			
			@FindBy(xpath="//button[@id='editScreen_qtyPreLoaded_Cancel']")
			private static WebElement qtyPreloadedFormulacancelBtn;


			@FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div[1]/label/span")
			private static WebElement editScreenLoadFields1stChkBox;
			
			@FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div[2]/label/span")
			private static WebElement editScreenLoadFields2ndChkBox;
			
			@FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div[3]/label/span")
			private static WebElement editScreenLoadFields3rdChkBox;
			
			@FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div[4]/label/span")
			private static WebElement editScreenLoadFields4thChkBox;
			
			@FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div[5]/label/span")
			private static WebElement editScreenLoadFields5hChkBox;
			
			@FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div[6]/label/span")
			private static WebElement editScreenLoadFields6thChkBox;
			
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_PreLoad_formulaText']")
			private static WebElement  preloadformulaTxt;
			
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_PreLoad_availableVariables']")
			private static WebElement  preloadFormulaSearchTxt;
			
			@FindBy(xpath="//button[@id='editScreen_FieldsCustomization_PreLoad_Ok']")
			private static WebElement  preloadFormulaokBtn;
				
			@FindBy(xpath="//button[@id='editScreen_FieldsCustomization_PreLoad_Cancel']")
			private static WebElement  preloadFormulacancelBtn;
			
			
			@FindBy(xpath="//td[@id='editScreen_footerrow_1 _3']")
			private static WebElement  editScreenFooter1stRowCaption;
			
			@FindBy(xpath="//td[@id='editScreen_footerrow_1 _3']")
			private static WebElement  editScreenFooter2ndRowCaption;
			
			@FindBy(xpath="//td[@id='editScreen_bodyrow_1 _3']")
			private static WebElement  editScreenbody1stRowCaption;
			
			@FindBy(xpath="//td[@id='editScreen_bodyrow_2 _3']")
			private static WebElement  editScreenbody2ndRowCaption;
			
			@FindBy(xpath="//td[@id='editScreen_bodyrow_3 _3']")
			private static WebElement  editScreenbody3rdRowCaption;
			
			@FindBy(xpath="//td[@id='editScreen_bodyrow_4 _3']")
			private static WebElement  editScreenbody4thRowCaption;
			
			@FindBy(xpath="//td[@id='editScreen_bodyrow_5 _3']")
			private static WebElement  editScreenbody5thRowCaption;
			
			
			
			// Add To Stock Status
			
			@FindBy(xpath="//td[@id='editScreen_bodyrow_1 _14']")
			private static WebElement  editScreenbody1stRowAddtoStock;
			
			@FindBy(xpath="//td[@id='editScreen_bodyrow_2 _14']")
			private static WebElement  editScreenbody2ndRowAddtoStock;
			
			@FindBy(xpath="//td[@id='editScreen_bodyrow_3 _14']")
			private static WebElement  editScreenbody3rdRowAddtoStock;
			
			@FindBy(xpath="//td[@id='editScreen_bodyrow_4 _14']")
			private static WebElement  editScreenbody4thRowAddtoStock;
			
			@FindBy(xpath="//td[@id='editScreen_bodyrow_5 _14']")
			private static WebElement  editScreenbody5thRowAddtoStock;			
			
		// Suspend Status Of Entry Page
		@FindBy(xpath="//tr[1]//td[11]")
		private static WebElement suspendStatusRow1;
	
	//User Name Display
		@FindBy(xpath="//span[@class='hidden-xs']")
		private static WebElement userNameDisplay;

	@FindBy(xpath="//*[@id='ulCompanyDetails_HomePage']/li[1]")
	private static WebElement companyName;

	@FindBy(xpath="//*[@id='companyLogo']")
	private static WebElement companyLogo;

    @FindBy(xpath="//div[@id='Layout_Popup']//input[2]")
	private static WebElement noIn;
    
    @FindBy(xpath="//input[@id='donotshow']")
	private static WebElement doNotShowCheckbox;
    
    @FindBy(xpath="//span[@class='pull-right']")
	private static WebElement closeBtnInDemoPopupScreen;
    
    
    // Inentory Menu 
    
    @FindBy(xpath="//a[@id='137']//span[contains(text(),'Transactions')]")
    private static WebElement  invTransactionsMenu; 
    
    @FindBy(xpath="//a[@id='139']//span[contains(text(),'Purchases')]")
    private static WebElement  invTransPurchasesMenu; 
    
    @FindBy(xpath="//a[@id='140']//span[contains(text(),'Sales')]")
    private static WebElement  invTransSalesMenu; 
    
    @FindBy(xpath="//a[@id='2033']//span[contains(text(),'Stocks')]")
    private static WebElement  invTransStocksMenu; 
    
    @FindBy(xpath="//a[@id='200']//span[contains(text(),'Reports')]")
	private static WebElement  inventoryReportsMenu; 
    
	@FindBy(xpath="//span[contains(text(),'Order Management')]")
	private static WebElement  orderManagementMenu; 
	
	// Home Menu
	@FindBy(xpath = "//*[@id='1']/div/span")
	public static WebElement homeMenu;

	//Financial Menu
	@FindBy (xpath="//span[@class='icon-financial icon-font1']")
	private static WebElement financialMenu;
	
	//Fixed Assets Menu
	@FindBy (xpath="//span[@class='icon-assets icon-font1']")
	private static WebElement fixedAssetsMenu;
	
	//Production Menu
	@FindBy (xpath="//span[@class='icon-production icon-font1']")
	private static WebElement productionMenu;
	
	//Point Of Sale Menu
	@FindBy (xpath="//div[contains(text(),'Point of Sale')]")
	private static WebElement pointOfSaleMenu;
	
	//Quality Of Control Menu
	@FindBy (xpath="//span[@class='icon-quotationanalysis icon-font1']")
	private static WebElement qualityControlMenu;
	
	//Settings Menu
	@FindBy (xpath="//span[@class='icon-settings icon-font1']")
	private static WebElement SettingsMenu;
	
	
	// Login Page
	@FindBy(xpath = "//*[@id='txtUsername']")
	private static WebElement username;
	

		
	private static String xlfile;
	private static String resPass="Pass";
	private static String resFail="Fail";
	private static ExcelReader excelReader;
	
	private static String xlSheetName = "SmokeVouchers";
	
	private static boolean Status;

	private String expOsVoucherGrossR4;
	
	

  public boolean checkLoadingMessage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessage));
		String actVoucherLoadingMessage=errorMessage.getText();
		String expVoucherLoadingMessage="Voucher loaded successfully";
		
		System.out.println("VoucherLoadingMessage  : " + actVoucherLoadingMessage + " Value Expected : " + expVoucherLoadingMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
		errorMessageCloseBtn.click();

		if(actVoucherLoadingMessage.startsWith(expVoucherLoadingMessage))
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	catch(Exception e)
	{
		System.err.println("UNABLE TO COMPARE");
		return false;
	}
  }
	
	
	
	
  public boolean checkVoucherSavingMessage(String docno) throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(errorMessage));
		String actErrorMessage=errorMessage.getText();
		String expErrorMessage="Voucher saved successfully";
		String expErrorMessage1=": "+docno;
		
		System.out.println("SavingMessage  :  "+actErrorMessage +" Value Expected : "+expErrorMessage+" "+expErrorMessage1);
		
		if(actErrorMessage.startsWith(expErrorMessage) && actErrorMessage.endsWith(expErrorMessage1))
		{
			try
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
				errorMessageCloseBtn.click();
				
				return  true;
			}
			catch(Exception ee)
			{
				return true;
			}	
		}
		else
		{
			return false;
		}	
	}
	catch(Exception e)
	{
		System.err.println("UNABLE TO COMPARE");
		return false;
	}
  }
	
	
	
  public static String checkValidationMessage(String ExpMessage) throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(errorMessage));
		String actErrorMessage=errorMessage.getText();
		String expErrorMessage=ExpMessage;
		
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			
			System.out.println("ValidationMessage  :  "+actErrorMessage +" Value Expected : "+expErrorMessage);
			
			return actErrorMessage;
		}
		catch(Exception ee)
		{
			
			System.out.println("ValidationMessage  :  "+actErrorMessage +" Value Expected : "+expErrorMessage);
			
			return actErrorMessage;
		}
	}
	catch(Exception e)
	{
		System.err.println("Error Message NOT Found or NOT Clickable");
		System.err.println(e.getMessage());
                
		String Exception=e.getMessage();
		
		return Exception;	
	} 
  }	
		

  public static void checkUserFriendlyMessage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(errorMessage));
		String actErrorMessage=errorMessage.getText();
		
		System.out.println("Open Page then Message Display  :  " + actErrorMessage);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
		errorMessageCloseBtn.click();
		
		/*try
		{	
			System.out.println("In Try Block Validation Message  :  " + actErrorMessage);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
		}
		catch(Exception ee)
		{
			System.out.println("In Catch Block Validation Message  :  " + actErrorMessage);	
		}*/
	}
	catch(Exception e)
	{
		System.err.println("Error Message NOT Found or NOT Clickable");
		System.err.println(e.getMessage());
		
		String Exception=e.getMessage();
	}
  }
	
	
	
	
  public boolean checkEntryPageDeleteMessage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(errorMessage));
	String actErrorMessage=errorMessage.getText();
	String expErrorMessage="Voucher deleted Successfully";
	
	System.out.println("DeletingMessage  :  " + actErrorMessage + " Value Expected : " + expErrorMessage);
	
	if(actErrorMessage.equalsIgnoreCase(expErrorMessage))
	{
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			
			return  true;
		}
		catch(Exception ee)
		{
			return true;
		}
	}
	else
	{
		return false;
	}
  }

	
	
	
		 
	public static void checkPopUpWindow() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		 //Thread.sleep(5000);
	      
		 try 
		 {
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(doNotShowCheckbox));
			 doNotShowCheckbox.click();
			 
			 //Thread.sleep(2000);
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtnInDemoPopupScreen));
			 closeBtnInDemoPopupScreen.click(); 
			 
			 System.err.println("POP UP DISPLAYED AND CLOSED SUCCESSFULLY");	 
		 } 
		 catch (Exception e)
		 {
			 System.err.println("NO POP UP DISPLAYED");
		 }	
	
		 Thread.sleep(4000);
	}
			 


	@FindBy(xpath="//button[contains(text(),'Ok')]")
	private static WebElement loginRefreshOkBtn;
	
	public static void checkRefreshPopOnlogin() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		try 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(loginRefreshOkBtn));
			loginRefreshOkBtn.click();
		} 
		catch (Exception e)
		{
			System.err.println("Exception : "+e.getMessage());
			System.err.println("NO ALERT POP UP DISPLAYED");
		}
		
		Thread.sleep(4000);
	}

	
	@FindBy(xpath = "//ul[@id='navigation_menu']/li/a/div/div")
	private static List<WebElement> menusList;
	
	@FindBy(xpath = "//ul[@id='navigation_menu']/li[3]/ul/li/a/span")
	private static List<WebElement> inventoryMenusList;
	
	@FindBy(xpath = "//ul[@id='navigation_menu']/li[3]/ul/li[1]/ul/li/a/span")
	private static List<WebElement> inventoryTransactionsMenusList;
	
	@FindBy(xpath = "//ul[@id='navigation_menu']/li[3]/ul/li[1]/ul/li[3]/ul/li/a/span")
	private static List<WebElement> inventoryTransactionsStocksMenusList;
	
	@FindBy(xpath = "//*[@id='dv_TranHomeHeading']/nav/div[2]/div/div/div[2]")
	private static List<WebElement> openingStocksNewToolBarButtons;
	

	private static int cSize; 
	
	
    
    @FindBy(xpath="//*[@id='plnCustomizecolumn']/div/span[4]/a")
	private static WebElement  custRemoveBtn;
    
	
	public static void checkDeleteLinkStatus() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeBtn));
		customizeBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(custSaveBtn));
		
		int custBodyHeaderListCount = custBodyHeaderList.size();
		
		for (int i = 0; i < custBodyHeaderListCount; i++)
		{
			String data = custBodyHeaderList.get(i).getText();
			
			System.out.println(i+" "+data);
			
			/*int temp=i+1;
			
			JavascriptExecutor js = (JavascriptExecutor) getDriver();
			js.executeScript("arguments[0].scrollIntoView();",custBodyHeaderList.get(temp));*/
			
			if (data.equalsIgnoreCase("Link status")) 
			{
				custBodyHeaderList.get(i).click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(custRemoveBtn));
				custRemoveBtn.click();
				
				Thread.sleep(1000);
				
				break;
			}
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(custSaveBtn));
		custSaveBtn.click();
		
		String expMessage  = "Data saved successfully";
		String actSaveMessage = checkValidationMessage(expMessage);
	}
	
  public static  boolean checkSignInDemoPopupPageOnClickDoNotShowAndCloseToDisplayMenusAndHomePage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException 
  {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	   
	try
	{  
		
		 getDriver().navigate().refresh();
 		 Thread.sleep(1999);
 		 
 		 getDriver().navigate().refresh();
 		 Thread.sleep(1999);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(username));
    	 
		LoginPage lp                          = new LoginPage(getDriver());
      
        String unamelt                        = excelReader.getCellData(xlSheetName, 7, 6);
        String pawslt                         = excelReader.getCellData(xlSheetName, 8, 6);
		
		LoginPage.enterUserName(unamelt);
		LoginPage.enterPassword(pawslt);
		
		String compname="Automation Company";
	 	
		 Select oSelect = new Select(companyDropDownList);
		 
		 List <WebElement> elementCount = oSelect.getOptions();
		
		 int cqSize = elementCount.size();
		 
		 int zqSize=cSize+1;
		 
		 System.out.println("CompanyDropdownList Count :"+cqSize);
		 
		 System.out.println("Company dropdown is :"+ zqSize);
	 
	 
	 //Select dropdown= new Select(lp.companyDropDownList);
	  int i;
	  
	  //List<WebElement> list = dropdown.getOptions();

		//List<String> text = new ArrayList<>();
		for(i=0; i<elementCount.size(); i++) 
		{
		
		  elementCount.get(i).getText();
	  String optionName = elementCount.get(i).getText();
	  if(optionName.toUpperCase().startsWith(compname.toUpperCase()))
	  {
		  System.out.println("q"+elementCount.get(i).getText());
		  elementCount.get(i).click();
		  
	  }
 
 }
		
		LoginPage.clickOnSignInBtn();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		
		boolean actHomeMenuIsDisplay           = homeMenu.isDisplayed();
		boolean actFinancialMenuIsDisplay      = financialMenu.isDisplayed();
		boolean actInventoryMenuIsDisplay      = inventoryMenu.isDisplayed();
		boolean actFixedAssetsMenuIsDisplay    = fixedAssetsMenu.isDisplayed();
		boolean actProductionMenuIsDisplay     = productionMenu.isDisplayed();
		boolean actPointOfSaleMenuIsDisplay    = pointOfSaleMenu.isDisplayed();
		boolean actQualityControlMenuIsDisplay = qualityControlMenu.isDisplayed();
		boolean actSettingsMenuIsDisplay       = SettingsMenu.isDisplayed();
		
		boolean expHomeMenuIsDisplay           = true;
		boolean expFinancialMenuIsDisplay      = true;
		boolean expInventoryMenuIsDisplay      = true;
		boolean expFixedAssetsMenuIsDisplay    = true;
		boolean expProductionMenuIsDisplay     = true;
		boolean expPointOfSaleMenuIsDisplay    = true;
		boolean expQualityControlMenuIsDisplay = true;
		boolean expSettingsMenuIsDisplay       = true;
		
		System.out.println("Home Menu Display Value Actual            : " + actHomeMenuIsDisplay +           " Value Expected : " + expHomeMenuIsDisplay);
		System.out.println("Financial Menu Display Value Actual       : " + actFinancialMenuIsDisplay +      " Value Expected : " + expFinancialMenuIsDisplay);
		System.out.println("Inventory Menu Display Value Actual       : " + actInventoryMenuIsDisplay +      " Value Expected : " + expInventoryMenuIsDisplay);
		System.out.println("Fixed Assets Menu Display Value Actual    : " + actFixedAssetsMenuIsDisplay +    " Value Expected : " + expFixedAssetsMenuIsDisplay);
		System.out.println("Production Menu Display Value Actual      : " + actProductionMenuIsDisplay +     " Value Expected : " + expProductionMenuIsDisplay);
		System.out.println("Point Of Sale Menu Display Value Actual   : " + actPointOfSaleMenuIsDisplay +    " Value Expected : " + expPointOfSaleMenuIsDisplay);
		System.out.println("Quality Control Menu Display Value Actual : " + actQualityControlMenuIsDisplay + " Value Expected : " + expQualityControlMenuIsDisplay);
		System.out.println("Settings Menu Display Value Actual        : " + actSettingsMenuIsDisplay +       " Value Expected : " + expSettingsMenuIsDisplay);
	
		boolean actMethod = actHomeMenuIsDisplay==actHomeMenuIsDisplay && actFinancialMenuIsDisplay==actFinancialMenuIsDisplay
				&& actInventoryMenuIsDisplay==actInventoryMenuIsDisplay && actFixedAssetsMenuIsDisplay==actFixedAssetsMenuIsDisplay
				&& actProductionMenuIsDisplay==actProductionMenuIsDisplay && actPointOfSaleMenuIsDisplay==actPointOfSaleMenuIsDisplay
				&& actQualityControlMenuIsDisplay==actQualityControlMenuIsDisplay && actSettingsMenuIsDisplay==actSettingsMenuIsDisplay;

		String actDisplayingResult =Boolean.toString(actMethod);
		String elementsIsDisplay = actDisplayingResult.toUpperCase();
		excelReader.setCellData(xlfile, xlSheetName, 7, 8, elementsIsDisplay);
		
		int actCount					         = menusList.size();
		ArrayList<String> actMenusArray          = new ArrayList<String>();
		
		for (int j = 0; j < actCount; j++) 
		{
			String data                          = menusList.get(j).getText();
			actMenusArray.add(data);
		}

		String actMenus 					     = actMenusArray.toString();
		String expMenus					         = excelReader.getCellData(xlSheetName, 8, 7);
		
		System.out.println("Menu Names Text Display Value Actual             : " + actMenus);
		System.out.println("Menus Names Text Display Value Expected          : " + expMenus);
		excelReader.setCellData(xlfile, xlSheetName, 8, 8, actMenus);
			
		Thread.sleep(4000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
		String actUserInfo                      = userNameDisplay.getText();
		String expUserInfo                      = excelReader.getCellData(xlSheetName, 9, 7);	
		excelReader.setCellData(xlfile, xlSheetName, 9, 8, actUserInfo);
		
		System.out.println("User Name Display Value Actual                   : " + actUserInfo +             " Value Expected : " + expUserInfo);
		
		
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
		companyLogo.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyName));
		String actGetLoginCompanyNameInformation = companyName.getText();
		String actGetLoginCompanyName            = actGetLoginCompanyNameInformation.substring(0, 19);
		String expGetLoginCompanyName            = excelReader.getCellData(xlSheetName, 10, 7);
		excelReader.setCellData(xlfile, xlSheetName, 10, 8, actGetLoginCompanyName);
		companyLogo.click();
		
		System.out.println("Company Name Display Value Actual                : " + actGetLoginCompanyName +  " Value Expected : " + expGetLoginCompanyName);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
		String actDashboardLabel                = labelDashboard.getText();
		String expDashboardLabel                = excelReader.getCellData(xlSheetName, 11, 7);	
		
		System.out.println("Dashboard Label Value Actual                     : " + actDashboardLabel +      " Value Expected : " + expDashboardLabel);
		
		excelReader.setCellData(xlfile, xlSheetName, 11, 8, actDashboardLabel);
		
		if (actUserInfo.equalsIgnoreCase(expUserInfo) && actGetLoginCompanyName.equalsIgnoreCase(expGetLoginCompanyName)
				&& actDashboardLabel.equalsIgnoreCase(expDashboardLabel)
				
				&& actDisplayingResult.equalsIgnoreCase("true")
				&& actMenus.equalsIgnoreCase(expMenus)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 7, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 7, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
    {
		 String exception =e.getMessage().substring(0, 50);
        excelReader.setExceptionInExcel(xlfile, xlSheetName, 7, 10, e.getMessage());
        System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
        return false;
    }
 }
	

 public static boolean checkInventoryMenu() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
 {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(invTransactionsMenu));
		
		boolean actinvTransactionsMenuIsDisplay           = invTransactionsMenu.isDisplayed();
    	boolean actinventoryReportsMenuIsDisplay          = inventoryReportsMenu.isDisplayed(); 	
    	boolean actorderManagementMenuIsDispaly           = orderManagementMenu.isDisplayed();

    	boolean expinvTransactionsMenuIsDisplay           = true;
    	boolean expinventoryReportsMenuIsDisplay          = true;   	
    	boolean exporderManagementMenuIsDispaly           = true;
    	
    	System.out.println("invTransactionsMenuDisplay    : " + actinvTransactionsMenuIsDisplay   + "  Value Expected  " + expinvTransactionsMenuIsDisplay);	
    	System.out.println("inventoryReportsMenuDisplay   : " + actinventoryReportsMenuIsDisplay  + "  Value Expected  " + expinventoryReportsMenuIsDisplay); 	
    	System.out.println("orderManagementMenuDisplay    : " + actorderManagementMenuIsDispaly   + "  Value Expected  " + exporderManagementMenuIsDispaly);
   
    	int count										  = inventoryMenusList.size();
    	
    	ArrayList<String> actList  = new ArrayList<String>();
    	
    	for (int i = 0; i < count; i++) 
    	{
    		String data		                              = inventoryMenusList.get(i).getText();
    		actList.add(data);
		}
    	
    	String actInventoryMenusList					  = actList.toString();
    	String expInventoryMenusList					  = excelReader.getCellData(xlSheetName, 13, 7);
    	
    	System.out.println("Inventories Menu Names Display Text Actual Values      :  " + actInventoryMenusList);
    	System.out.println("Inventories Menu Names Display Text Expected Values    :  " + expInventoryMenusList);
    	
    	excelReader.setCellData(xlfile, xlSheetName, 13, 8, actInventoryMenusList);
    	
		if(actinvTransactionsMenuIsDisplay==expinvTransactionsMenuIsDisplay  
				&& actinventoryReportsMenuIsDisplay==expinventoryReportsMenuIsDisplay
				&& actorderManagementMenuIsDispaly==exporderManagementMenuIsDispaly 
				&& actInventoryMenusList.equalsIgnoreCase(expInventoryMenusList))
		{
			excelReader.setCellData(xlfile, xlSheetName, 12, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 12, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
    {
		 String exception =e.getMessage().substring(0, 50);
        excelReader.setExceptionInExcel(xlfile, xlSheetName, 12, 10, e.getMessage());
        System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
        return false;
    }
 }
	
	

 public static boolean checkTransactionMenuInInventoryMenu() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
 {
  excelReader=new ExcelReader(POJOUtility.getExcelPath());
  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
  try
  {	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(invTransactionsMenu));
	invTransactionsMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockAllocation));
	
	boolean actinvTransPurchasesMenuIsDisplay     = invTransPurchasesMenu.isDisplayed();
	boolean actinvTransSalesMenuIsDisplay         = invTransSalesMenu.isDisplayed();
	boolean actinvTransStocksMenuIsDisplay        = invTransStocksMenu.isDisplayed();
	boolean actholdAndUnholdStockVoucherIsDisplay = holdAndUnholdStockVoucher.isDisplayed();
	boolean actstockReconciliationIsDisplay       = stockReconciliation.isDisplayed();
	boolean actstockAllocationIsDisplay           = stockAllocation.isDisplayed();

	boolean expinvTransPurchasesMenuIsDisplay     = true;
    boolean expinvTransSalesMenuIsDisplay         = true;
    boolean expinvTransStocksMenuIsDisplay        = true;
    boolean expholdAndUnholdStockVoucherIsDisplay = true;
	boolean expstockReconciliationIsDisplay       = true;
	boolean expstockAllocationIsDisplay           = true;
	
	System.out.println("TransPurchasesMenu              : " + actinvTransPurchasesMenuIsDisplay      + " Value Expected : " + expinvTransPurchasesMenuIsDisplay);
	System.out.println("TransSalesMenu                  : " + actinvTransSalesMenuIsDisplay          + " Value Expected : " + expinvTransSalesMenuIsDisplay);
	System.out.println("TransStocksMenu                 : " + actinvTransStocksMenuIsDisplay         + " Value Expected : " + expinvTransStocksMenuIsDisplay);
	System.out.println("holdAndUnholdStockVoucher       : " + actholdAndUnholdStockVoucherIsDisplay  + " Value Expected : " + expholdAndUnholdStockVoucherIsDisplay);
	System.out.println("stockReconciliation             : " + actstockReconciliationIsDisplay        + " Value Expected : " + expstockReconciliationIsDisplay);
	System.out.println("stockAllocation                 : " + actstockAllocationIsDisplay            + " Value Expected : " + expstockAllocationIsDisplay);
	
	int count											   =inventoryTransactionsMenusList.size();
	
	ArrayList<String> actmenus = new ArrayList<String>();
	
	for (int i = 0; i < count; i++) 
	{
		String data=inventoryTransactionsMenusList.get(i).getText();
		
		actmenus.add(data);
	}
	    
	String actInventoryTransactionsMenus=actmenus.toString();
	String expInventoryTransactionsMenus=excelReader.getCellData(xlSheetName, 15, 7);
		 
	System.out.println("actInventoryTransactionsMenus   : " + actInventoryTransactionsMenus);
	System.out.println("expInventoryTransactionsMenus   : " + expInventoryTransactionsMenus);
	
	excelReader.setCellData(xlfile, xlSheetName, 15, 8, actInventoryTransactionsMenus);
	
	if(actinvTransPurchasesMenuIsDisplay==expinvTransPurchasesMenuIsDisplay && actinvTransSalesMenuIsDisplay==expinvTransSalesMenuIsDisplay && 
			actinvTransStocksMenuIsDisplay==expinvTransStocksMenuIsDisplay
			&& actholdAndUnholdStockVoucherIsDisplay==expholdAndUnholdStockVoucherIsDisplay && actstockReconciliationIsDisplay==expstockReconciliationIsDisplay
			&& actstockAllocationIsDisplay==expstockAllocationIsDisplay  && actInventoryTransactionsMenus.equalsIgnoreCase(expInventoryTransactionsMenus))
	{
		excelReader.setCellData(xlfile, xlSheetName, 14, 9, resPass);
		return true;
	}
	else
	{
		excelReader.setCellData(xlfile, xlSheetName, 14, 9, resFail);
		return false;
	}
  }
  catch (Exception e) 
  {
		 String exception =e.getMessage().substring(0, 50);
      excelReader.setExceptionInExcel(xlfile, xlSheetName, 14, 10, e.getMessage());
      System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
      return false;
  }
 }
	

	
	
	
 public static boolean checkStocksMenuInTransactionMenuInInventoryMenu() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
 {
   excelReader=new ExcelReader(POJOUtility.getExcelPath());
   xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
   try
   {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(invTransStocksMenu));
		invTransStocksMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(materialRequisitionVoucher));
		
		boolean actshortagesInStockVoucher             = shortagesInStockVoucher.isDisplayed();
		boolean actexcessesInStocksVoucher             = excessesInStocksVoucher.isDisplayed();
		boolean actstockTransfersVoucher               = stockTransfersVoucher.isDisplayed();
		boolean actopeningStocksVoucher                = openingStocksVoucher.isDisplayed();
		boolean actmaterialRequisitionVoucher          = materialRequisitionVoucher.isDisplayed();
			
		boolean expshortagesInStockVoucher             = true;
		boolean expexcessesInStocksVoucher             = true;
		boolean expstockTransfersVoucher               = true;
		boolean expopeningStocksVoucher                = true;
		boolean expmaterialRequisitionVoucher          = true;
				
		System.out.println("shortagesInStockVoucher               : " + actshortagesInStockVoucher    + " Value Expected : " + expshortagesInStockVoucher);
		System.out.println("excessesInStocksVoucher               : " + actexcessesInStocksVoucher    + " Value Expected : " + expexcessesInStocksVoucher);
		System.out.println("stockTransfersVoucher                 : " + actstockTransfersVoucher      + " Value Expected : " + expstockTransfersVoucher);
		System.out.println("openingStocksVoucher                  : " + actopeningStocksVoucher       + " Value Expected : " + expopeningStocksVoucher);
		System.out.println("materialRequisitionVoucher            : " + actmaterialRequisitionVoucher + " Value Expected : " + expmaterialRequisitionVoucher);	
		
		int count									    = inventoryTransactionsStocksMenusList.size();
		
		ArrayList<String> actmenus = new ArrayList<String>();
		
		for (int i = 0; i < count; i++) 
		{
			String data                                = inventoryTransactionsStocksMenusList.get(i).getText();
			actmenus.add(data);
		}
		    
		String actinventoryTransactionsStocksMenusList = actmenus.toString();
		String expinventoryTransactionsStocksMenusList = excelReader.getCellData(xlSheetName, 17, 7);
		
		System.out.println("actinventoryTransactionsStocksMenusList   : " + actinventoryTransactionsStocksMenusList);
		System.out.println("expinventoryTransactionsStocksMenusList   : " + expinventoryTransactionsStocksMenusList);
		
		excelReader.setCellData(xlfile, xlSheetName, 17, 8, actinventoryTransactionsStocksMenusList);	
		
		if(actshortagesInStockVoucher==expshortagesInStockVoucher && actexcessesInStocksVoucher==expexcessesInStocksVoucher && actstockTransfersVoucher==expstockTransfersVoucher
				&& actopeningStocksVoucher==expopeningStocksVoucher && actmaterialRequisitionVoucher==expmaterialRequisitionVoucher  
				&& actinventoryTransactionsStocksMenusList.equalsIgnoreCase(expinventoryTransactionsStocksMenusList))
		
		{
			excelReader.setCellData(xlfile, xlSheetName, 16, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 16, 9, resFail);
			return false;
		}
   }
   catch (Exception e) 
   {
 		 String exception =e.getMessage().substring(0, 50);
       excelReader.setExceptionInExcel(xlfile, xlSheetName, 16, 10, e.getMessage());
       System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
       return false;
   }
 }
			
	

	
  public boolean checkOpeningStocksNewVoucherDisplayHomePage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(openingStocksNewVoucher));
		openingStocksNewVoucher.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
	
		boolean actHomePageNewBtnIsDisplayed = newBtn.isDisplayed();
		boolean actHomePageEditBtn           = editBtn.isDisplayed();		
		boolean actHomePagePrintBtn          = printBtn.isDisplayed();
		boolean actHomePageDeleteBtn         = deleteBtn.isDisplayed();
		boolean actHomePageSuspendBtn        = suspendBtn.isDisplayed();
		boolean actHomePagePrintBarcodeBtn   = printBarCodeBtn.isDisplayed();
		boolean actHomePageExportXMLBtn      = exportToXMLBtn.isDisplayed();
		boolean actHomePageSettingsBtn       = settingsBtn.isDisplayed();
		boolean actHomePageCloseBtn          = homeCloseBtn.isDisplayed();
		boolean actHomePageGridCheckBox      = grid_HeaderChkBox.isDisplayed();
		boolean actHomePageSortingBtn        = sortingBtn.isDisplayed();
		boolean actHomePageCreateViewBn      = createViewBtn.isDisplayed();
		boolean actHomePageCustomizeBtn      = customizeBtn.isDisplayed();
		boolean actHomePageFilterBtn         = filterBtn.isDisplayed();
		boolean actHomePageRefreshBtn        = refreshBtn.isDisplayed();
		boolean actHomePageOptionsBtn        = optionsBtn.isDisplayed();
		boolean actHomePageExportBtn         = exportBtn.isDisplayed();
		
		boolean expHomePageNewBtnIsDisplayed = true;	
		boolean expHomePageEditBtn           = true;
		boolean expHomePagePrintBtn          = true;
		boolean expHomePageDeleteBtn         = true;
		boolean expHomePageSuspendBtn        = true;
		boolean expHomePagePrintBarcodeBtn   = true;
		boolean expHomePageExportXMLBtn      = true;
		boolean expHomePageSettingsBtn       = true;
		boolean expHomePageCloseBtn          = true;
		boolean expHomePageGridCheckBox      = true;
		boolean expHomePageSortingBtn        = true;
		boolean expHomePageCreateViewBn      = true;
		boolean expHomePageCustomizeBtn      = true;
		boolean expHomePageFilterBtn         = true;
		boolean expHomePageRefreshBtn        = true;
		boolean expHomePageOptionsBtn        = true;
		boolean expHomePageExportBtn         = true;
		
		System.out.println("Home Page New Btn Value Actual           : " + actHomePageNewBtnIsDisplayed+ "  Value Expected : " + expHomePageNewBtnIsDisplayed);
		System.out.println("Home Page Edit Btn Value Actual          : " + actHomePageEditBtn+           "  Value Expected : " + expHomePageEditBtn);
		System.out.println("Home Page Print Btn Value Actual         : " + actHomePagePrintBtn+          "	Value Expected : " + expHomePagePrintBtn);
		System.out.println("Home Page Delete Btn Value Actual        : " + actHomePageDeleteBtn+         "	Value Expected : " + expHomePageDeleteBtn);
		System.out.println("Home Page Suspend Btn Value Actual       : " + actHomePageSuspendBtn+        "	Value Expected : " + expHomePageSuspendBtn);
		System.out.println("Home Page Print Barcode Btn Value Actual : " + actHomePagePrintBarcodeBtn+   "	Value Expected : " + expHomePagePrintBarcodeBtn);
		System.out.println("Home Page Export XML Btn Value Actual    : " + actHomePageExportXMLBtn+      "	Value Expected : " + expHomePageExportXMLBtn);
		System.out.println("Home Page Settings Btn Value Actual      : " + actHomePageSettingsBtn+       "	Value Expected : " + expHomePageSettingsBtn);
		System.out.println("Home Page Close Btn Value Actual         : " + actHomePageCloseBtn+          "	Value Expected : " + expHomePageCloseBtn);
		System.out.println("Home Page Grid check Value Actual        : " + actHomePageGridCheckBox+      "	Value Expected : " + expHomePageGridCheckBox);
		System.out.println("Home Page Sorting Btn Value Actual       : " + actHomePageSortingBtn+        "	Value Expected : " + expHomePageSortingBtn);
		System.out.println("Home Page Create View Btn Value Actual   : " + actHomePageCreateViewBn+      "	Value Expected : " + expHomePageCreateViewBn);
		System.out.println("Home Page Customize Btn Value Actual     : " + actHomePageCustomizeBtn+      "	Value Expected : " + expHomePageCustomizeBtn);
		System.out.println("Home Page Filter check Value Actual      : " + actHomePageFilterBtn+         "	Value Expected : " + expHomePageFilterBtn);
		System.out.println("Home Page Refesh Btn Value Actual        : " + actHomePageRefreshBtn+        "	Value Expected : " + expHomePageRefreshBtn);
		System.out.println("Home Page Options Btn Value Actual       : " + actHomePageOptionsBtn+        "	Value Expected : " + expHomePageOptionsBtn);
		System.out.println("Home Page Export Btn Value Actual        : " + actHomePageExportBtn+         "  Value Expected : " + expHomePageExportBtn);
		
		int count				                 = openingStocksNewToolBarButtons.size();
		
		ArrayList<String> actbuttons             = new ArrayList<String>();
		
		for (int i = 0; i < count; i++) 
		{
			String data                          = openingStocksNewToolBarButtons.get(i).getText();
			actbuttons.add(data);
		}
		    
		String actopeningStocksNewToolBarButtons = actbuttons.toString();
		String expopeningStocksNewToolBarButtons = excelReader.getCellData(xlSheetName, 19, 7);
	
		System.out.println("actopeningStocksNewToolBarButtons  : " + actopeningStocksNewToolBarButtons);
		System.out.println("expopeningStocksNewToolBarButtons  : " + expopeningStocksNewToolBarButtons);
		
		excelReader.setCellData(xlfile, xlSheetName, 19, 8, actopeningStocksNewToolBarButtons);	
		
		String actsetAsDefaultView		=	setAsDefaultView.getText();
		String expsetAsDefaultView		=	excelReader.getCellData(xlSheetName, 20, 7);
		excelReader.setCellData(xlfile, xlSheetName, 20, 8, actsetAsDefaultView);
		
		
		//Ribbon Control Icons
        int count1		= headingOptions.size();
		
		ArrayList<String> headingButtons = new ArrayList<String>();
		
		for (int i = 1; i < count1; i++) 
		{
			String data=headingOptions.get(i).getAttribute("title");
			
			headingButtons.add(data);
		}
		
		String actHeadingButtons = headingButtons.toString();
		String expHeadingButtons = excelReader.getCellData(xlSheetName, 21, 7);
		excelReader.setCellData(xlfile, xlSheetName, 21, 8, actHeadingButtons);
		
		
		System.out.println("actopeningStocksNewHeadingButtons  : " + actHeadingButtons);
		System.out.println("expopeningStocksNewHeadingButtons  : " + expHeadingButtons);
		
		//Home Page Column Headings
        int headerTxtCount		= headerTxtList.size();
		
		ArrayList<String> headerTxt = new ArrayList<String>();
		
		for (int i = 2; i < headerTxtCount; i++) 
		{
			String data=headerTxtList.get(i).getText();
			headerTxt.add(data);
		}
		
		String actHeaderTxt = headerTxt.toString();
		String expHeaderTxt = excelReader.getCellData(xlSheetName, 22, 7);
		excelReader.setCellData(xlfile, xlSheetName, 22, 8, actHeaderTxt);
		
		
		System.out.println("actopeningStocksNewHomePageColumnsButtons  : " + actHeaderTxt);
		System.out.println("expopeningStocksNewHomePageColumnsButtons  : " + expHeaderTxt);
		
		if(actHomePageNewBtnIsDisplayed==expHomePageNewBtnIsDisplayed  && actHomePageEditBtn==expHomePageEditBtn && actHomePagePrintBtn==expHomePagePrintBtn
				&& actHomePageDeleteBtn==expHomePageDeleteBtn  && actHomePageSuspendBtn==expHomePageSuspendBtn 
			    && actHomePagePrintBarcodeBtn==expHomePagePrintBarcodeBtn && actHomePageExportXMLBtn==expHomePageExportXMLBtn
				&& actHomePageSettingsBtn==expHomePageSettingsBtn && actHomePageCloseBtn==expHomePageCloseBtn && actHomePageGridCheckBox==expHomePageGridCheckBox
				&& actHomePageSortingBtn==expHomePageSortingBtn && actHomePageCreateViewBn==expHomePageCreateViewBn && actHomePageCustomizeBtn==expHomePageCustomizeBtn
				&& actHomePageFilterBtn==expHomePageFilterBtn && actHomePageRefreshBtn==expHomePageRefreshBtn && actHomePageOptionsBtn==expHomePageOptionsBtn
				&& actHomePageExportBtn==expHomePageExportBtn  
				&& actopeningStocksNewToolBarButtons.equalsIgnoreCase(expopeningStocksNewToolBarButtons)
				&& actHeadingButtons.equalsIgnoreCase(expHeadingButtons)
				&& actHeaderTxt.equalsIgnoreCase(expHeaderTxt))
		{
			System.out.println("Test Pass : HomeScreen Options Are Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 18, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : HomeScreen Options Are NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 18, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
	{
		String exception =e.getMessage().substring(0, 50);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 18, 10, e.getMessage());
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		return false;
	}
  }
	

  @FindBy(xpath="//*[@id='txtViewName']")
  private static WebElement  viewNameTxtInCreateView;
  
  @FindBy(xpath="//*[@id='cmbDataSet']")
  private static WebElement  dataSetInCreateView;
  
  @FindBy(xpath="//*[@id='cmbViewType']")
  private static WebElement  viewTypeInCreateView;

  @FindBy(xpath="//*[@id='cmbAuthorization']")
  private static WebElement  authorizationInCreateView;

  @FindBy(xpath="//*[@id='cmbCheckStatus']")
  private static WebElement  checkSatusInCreateView;
  
  @FindBy(xpath="//*[@id='cmbQC']")
  private static WebElement  qcInCreateView;
  
  @FindBy(xpath="//*[@id='Suspendstatus']")
  private static WebElement  suspendStatusInCreateView;
  
  @FindBy(xpath="//*[@id='idFilterCustomizeIcon']")
  private static WebElement  filterOptionInCreateView;
  
  @FindBy(xpath="//*[@id='a']")
  private static WebElement  advanvefilterOptionInCreateView;
  
  @FindBy(xpath="//*[@id='dvCreateEditView']/div/div/div[3]/div/button[1]")
  private static WebElement  saveOptionInCreateView;
  
  @FindBy(xpath="//*[@id='dvCreateEditView']/div/div/div[3]/div/button[2]")
  private static WebElement  closeOptionInCreateView;
  
  @FindBy(xpath="//*[@id='dv_TranHomeHeading']/div[2]/div/div[1]/label")
  private static WebElement setAsDefaultView;
 
  @FindBy(xpath="//*[@id='dv_TranHomeHeading']/div[2]/div/div")
  private static List<WebElement> headingOptions;
 
  @FindBy(xpath="//*[@id='tblHeadTransRender']/tr/th")
  private static List<WebElement> headerTxtList;
  
  @FindBy(xpath="//*[@id='cmbDataSet']/option")
  private static WebElement datasetGetText;
  
  @FindBy(xpath="//*[@id='cmbViewType']/option[1]")
  private static WebElement viewTypeGetText;
  
  @FindBy(xpath="//*[@id='cmbCheckStatus']/option[1]")
  private static WebElement checkStatusGetText;
  
  @FindBy(xpath="//*[@id='Suspendstatus']/option[1]")
  private static WebElement suspendStatusGetText;

  @FindBy(xpath="//*[@id='cmbAuthorization']/option[1]")
  private static WebElement authorizationGetText;
  
  @FindBy(xpath="//*[@id='cmbQC']/option[1]")
  private static WebElement qcGetText;
  
  @FindBy(xpath="//*[@id='txtViewName']")
  private static WebElement viewNameGetText;
  
  
  public boolean checkOpeningStocksNewVoucherCreateViewOptionInHomePage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createViewBtn));
		createViewBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(qcInCreateView));
	
		boolean actViewTxt              = viewNameTxtInCreateView.isDisplayed();
		boolean actDataSet              = dataSetInCreateView.isDisplayed();
		boolean actViewType             = viewTypeInCreateView.isDisplayed();
		boolean actAuthorization        = authorizationInCreateView.isDisplayed();
		boolean actCheckStatus          = checkSatusInCreateView.isDisplayed();
		boolean actQC                   = qcInCreateView.isDisplayed();
		boolean actSuspendStatus        = suspendStatusInCreateView.isDisplayed();
		boolean actFilterOption         = filterOptionInCreateView.isDisplayed();
		boolean actAdvanceFilter        = advanvefilterOptionInCreateView.isDisplayed();
		boolean actSaveOption           = saveOptionInCreateView.isDisplayed();
		boolean actCloseOption          = closeOptionInCreateView.isDisplayed();
		
		boolean expViewTxt              = true;
		boolean expDataSet              = true;
		boolean expViewType             = true;
		boolean expAuthorization        = true;
		boolean expCheckStatus          = true;
		boolean expQC                   = true;
		boolean expSuspendStatus        = true;
		boolean expFilterOption         = true;
		boolean expAdvanceFilter        = true;
		boolean expSaveOption           = true;
		boolean expCloseOption          = true;
		
		boolean actMethod = actViewTxt==expViewTxt  && actDataSet==expDataSet && actViewType==expViewType && actAuthorization==expAuthorization
							&& actCheckStatus==expCheckStatus && actQC==expQC && actSuspendStatus==expSuspendStatus 
							&& actFilterOption==expFilterOption && actAdvanceFilter==expAdvanceFilter && actSaveOption==expSaveOption && actCloseOption==expCloseOption;
		
		String actResult = Boolean.toString(actMethod);
		
		excelReader.setCellData(xlfile, xlSheetName, 24, 8, actResult.toUpperCase());
		
		
		System.out.println("View Text Box Value Actual       : " + actViewTxt       +     "  Value Expected : " + expViewTxt);
		System.out.println("Data Set Value Actual            : " + actDataSet       +     "  Value Expected : " + expDataSet);
		System.out.println("View Type Value Actual           : " + actViewType      +     "	 Value Expected : " + expViewType);
		System.out.println("Authorization Value Actual       : " + actAuthorization +     "  Value Expected : " + expAuthorization);
		System.out.println("Check Status Value Actual        : " + actCheckStatus   +     "	 Value Expected : " + expCheckStatus);
		System.out.println("QC Value Actual                  : " + actQC            +     "	 Value Expected : " + expQC);
		System.out.println("Suspend Value Actual             : " + actSuspendStatus +     "	 Value Expected : " + expSuspendStatus);
		System.out.println("Filter Value Actual              : " + actFilterOption  +     "	 Value Expected : " + expFilterOption);
		System.out.println("Advance Filter Value Actual      : " + actAdvanceFilter +     "	 Value Expected : " + expAdvanceFilter);
		System.out.println("Save Option Value Actual         : " + actSaveOption    +     "	 Value Expected : " + expSaveOption);
		System.out.println("Close Option Value Actual        : " + actCloseOption   +     "	 Value Expected : " + actCloseOption);
		
		System.out.println("Test"+ datasetGetText.getText());
		System.out.println("Test"+ viewTypeGetText.getText());
		System.out.println("Test"+ checkStatusGetText.getText());
		System.out.println("Test"+ suspendStatusGetText.getText());
		System.out.println("Test"+ authorizationGetText.getText());
		System.out.println("Test"+ qcGetText.getText());
	
		if(actMethod==true)
		{
			System.out.println("Test Pass : HomeScreen Options Are Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 23, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : HomeScreen Options Are NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 23, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
	{
		String exception =e.getMessage().substring(0, 50);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 23, 10, e.getMessage());
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		return false;
	}
  }
  

  
  
  @FindBy(xpath="//*[@id='id_transaction_viewcontainer']/li[2]/a")
  private static WebElement createViewNameDisplayInHomePage;
  
  
  public boolean checkSaveInCreateViewOfHomePageOfOpeningStocksNew() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
	    try
	    {	
	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(viewNameTxtInCreateView));
	     viewNameTxtInCreateView.click();
	     
	     viewNameTxtInCreateView.sendKeys(excelReader.getCellData(xlSheetName, 25, 6));
	     
	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveOptionInCreateView));
	     saveOptionInCreateView.click();
	     
	     String expSaveViewMessage = excelReader.getCellData(xlSheetName, 26, 7);
			
		 String actSaveViewMessage = checkValidationMessage(expSaveViewMessage);
			
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createViewNameDisplayInHomePage));
		 
		 String actcreateViewNameDisplayInHomePage = createViewNameDisplayInHomePage.getText();
		 String expcreateViewNameDisplayInHomePage = excelReader.getCellData(xlSheetName, 27, 7);
		 
		 
		 excelReader.setCellData(xlfile, xlSheetName, 26, 8, actSaveViewMessage);
		 excelReader.setCellData(xlfile, xlSheetName, 27, 8, actcreateViewNameDisplayInHomePage);
		 
		 
		 System.out.println("View Display In Home page Value Actual    : " + actcreateViewNameDisplayInHomePage   +     "	 Value Expected : " + expcreateViewNameDisplayInHomePage);
		
		 if(actSaveViewMessage.equalsIgnoreCase(expSaveViewMessage) && actcreateViewNameDisplayInHomePage.equalsIgnoreCase(expcreateViewNameDisplayInHomePage) )
		 {
			System.out.println("Test Pass : View Saved Successfully");
			
			excelReader.setCellData(xlfile, xlSheetName, 25, 9, resPass);
			return true;
		 }
		 else
		 {
			System.out.println("Test Fail : View NOT Saved Successfully");
			
			excelReader.setCellData(xlfile, xlSheetName, 25, 9, resFail);
			return false;
		 } 
	    }
	    catch (Exception e) 
		{
			String exception =e.getMessage().substring(0, 50);
			excelReader.setExceptionInExcel(xlfile, xlSheetName, 25, 10, e.getMessage());
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		}
	 }
  
  
  
  
 
  @FindBy(xpath="//*[@id='id_transaction_viewcontainer']/li[3]/a")
  private static WebElement createViewNameToDeleteDisplayInHomePage;
  
  @FindBy(xpath="//*[@id='id_transaction_viewcontainer']/li")
  private static List<WebElement> countOfCreateView;
  
  @FindBy(xpath="//*[@id='btnDeleteview']/div/span")
  private static WebElement deleteViewButton;
  
  
  public boolean checkDeleteCreateViewOfHomePageOfOpeningStocksNew() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
    try
    {
    	
     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createViewBtn));
   	 createViewBtn.click();
   			
     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(viewNameTxtInCreateView));
     viewNameTxtInCreateView.click();
     
     viewNameTxtInCreateView.sendKeys(excelReader.getCellData(xlSheetName, 28, 6));
     
     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveOptionInCreateView));
     saveOptionInCreateView.click();
     
     String expSaveViewMessage =excelReader.getCellData(xlSheetName, 29, 7);
		
	 String actSaveViewMessage = checkValidationMessage(expSaveViewMessage);
	 
	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createViewNameDisplayInHomePage));
	 
	 String actcreateViewNameDisplayInHomePage = createViewNameToDeleteDisplayInHomePage.getText();
	 String expcreateViewNameDisplayInHomePage = excelReader.getCellData(xlSheetName, 30, 7);
	 
	 System.out.println("View Display In Home page Value Actual    : " + actcreateViewNameDisplayInHomePage   +     "	 Value Expected : " + expcreateViewNameDisplayInHomePage);
	 
	 Thread.sleep(2000);
	 
	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createViewNameToDeleteDisplayInHomePage));
	 createViewNameToDeleteDisplayInHomePage.click();
	 
	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteViewButton));
	 deleteViewButton.click();
	 
	 getWaitForAlert();
	 
	 String actAlertMessageOnDeleteView = getAlert().getText();
	 String expAlertMessageOnDeleteView = excelReader.getCellData(xlSheetName, 31, 7);
	 
	 System.out.println("View Display In Home page Value Actual    : " + actAlertMessageOnDeleteView   +     "	 Value Expected : " + expAlertMessageOnDeleteView);
	 
	 getAlert().accept();
	 
	 String expDeleteViewMessage =excelReader.getCellData(xlSheetName, 32, 7);
		
	 String actDeleteViewMessage = checkValidationMessage(expDeleteViewMessage);
	
	 int Count=countOfCreateView.size();
	 
	 String actCount=Integer.toString(Count);
		
	 String expCount = excelReader.getCellData(xlSheetName, 33, 7);
	 
	 
	 System.out.println("Count In Home page Value Actual    : " + actCount   +     "	 Value Expected : " + expCount);
	 
	 
	 excelReader.setCellData(xlfile, xlSheetName, 29, 8, actSaveViewMessage);
	 excelReader.setCellData(xlfile, xlSheetName, 30, 8, actcreateViewNameDisplayInHomePage);
	 excelReader.setCellData(xlfile, xlSheetName, 31, 8, actAlertMessageOnDeleteView);
	 excelReader.setCellData(xlfile, xlSheetName, 32, 8, actDeleteViewMessage);
	 excelReader.setCellData(xlfile, xlSheetName, 33, 8, actCount);
	 
	 
	 if(actSaveViewMessage.equalsIgnoreCase(expSaveViewMessage) && actcreateViewNameDisplayInHomePage.equalsIgnoreCase(expcreateViewNameDisplayInHomePage)
			 && actAlertMessageOnDeleteView.equalsIgnoreCase(expAlertMessageOnDeleteView) && actCount.equalsIgnoreCase(expCount))
	 {
		System.out.println("Test Pass : View Saved Successfully");
		
		excelReader.setCellData(xlfile, xlSheetName, 28, 9, resPass);
		return true;
	 }
	 else
	 {
		System.out.println("Test Fail : View NOT Saved Successfully");
		
		excelReader.setCellData(xlfile, xlSheetName, 28, 9, resFail);
		return false;
	 } 
    }
    catch (Exception e) 
	{
		String exception =e.getMessage().substring(0, 50);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 28, 10, e.getMessage());
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		return false;
	}
 }
  
  
  @FindBy(xpath="//*[@id='id_transaction_viewcontainer']/li[2]/a")
  private static WebElement createViewNameToEditInHomePage;
 
  @FindBy(xpath="//*[@id='btnEditView']/div/span")
  private static WebElement editViewOptionInHomePage;
 
  
  public boolean checkEditCreateViewOfHomePageOfOpeningStocksNew() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
    try
    {
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createViewNameToEditInHomePage));
        createViewNameToEditInHomePage.click();
   		
        //Home Page Column Headings
        
        int headerTxtCount		= headerTxtList.size();
		
		ArrayList<String> headerTxt = new ArrayList<String>();
		
		for (int i = 2; i < headerTxtCount; i++) 
		{
			String data=headerTxtList.get(i).getText();
			headerTxt.add(data);
		}
		
		String actHeaderTxt = headerTxt.toString();
		String expHeaderTxt = excelReader.getCellData(xlSheetName, 35, 7);
		excelReader.setCellData(xlfile, xlSheetName, 35, 8, actHeaderTxt);
	
		System.out.println("actopeningStocksNewHomePageColumnsButtons  : " + actHeaderTxt);
		System.out.println("expopeningStocksNewHomePageColumnsButtons  : " + expHeaderTxt);
	
		//Click on Edit option

		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editViewOptionInHomePage));
		 editViewOptionInHomePage.click();
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(viewTypeInCreateView));
	
	     boolean actViewTxt              = viewNameTxtInCreateView.isDisplayed();
		 boolean actDataSet              = dataSetInCreateView.isDisplayed();
		 boolean actViewType             = viewTypeInCreateView.isDisplayed();
		 boolean actAuthorization        = authorizationInCreateView.isDisplayed();
		 boolean actCheckStatus          = checkSatusInCreateView.isDisplayed();
		 boolean actQC                   = qcInCreateView.isDisplayed();
		 boolean actSuspendStatus        = suspendStatusInCreateView.isDisplayed();
		 boolean actFilterOption         = filterOptionInCreateView.isDisplayed();
		 boolean actAdvanceFilter        = advanvefilterOptionInCreateView.isDisplayed();
		 boolean actSaveOption           = saveOptionInCreateView.isDisplayed();
		 boolean actCloseOption          = closeOptionInCreateView.isDisplayed();
		
		 boolean expViewTxt              = true;
		 boolean expDataSet              = true;
		 boolean expViewType             = true;
		 boolean expAuthorization        = true;
		 boolean expCheckStatus          = true;
		 boolean expQC                   = true;
		 boolean expSuspendStatus        = true;
		 boolean expFilterOption         = true;
		 boolean expAdvanceFilter        = true;
		 boolean expSaveOption           = true;
		 boolean expCloseOption          = true;
		 
		 System.out.println("View Text Box Value Actual       : " + actViewTxt       +     "  Value Expected : " + expViewTxt);
		 System.out.println("Data Set Value Actual            : " + actDataSet       +     "  Value Expected : " + expDataSet);
		 System.out.println("View Type Value Actual           : " + actViewType      +     "  Value Expected : " + expViewType);
		 System.out.println("Authorization Value Actual       : " + actAuthorization +     "  Value Expected : " + expAuthorization);
		 System.out.println("Check Status Value Actual        : " + actCheckStatus   +     "  Value Expected : " + expCheckStatus);
		 System.out.println("QC Value Actual                  : " + actQC            +     "  Value Expected : " + expQC);
		 System.out.println("Suspend Value Actual             : " + actSuspendStatus +     "  Value Expected : " + expSuspendStatus);
		 System.out.println("Filter Value Actual              : " + actFilterOption  +     "  Value Expected : " + expFilterOption);
		 System.out.println("Advance Filter Value Actual      : " + actAdvanceFilter +     "  Value Expected : " + expAdvanceFilter);
		 System.out.println("Save Option Value Actual         : " + actSaveOption    +     "  Value Expected : " + expSaveOption);
		 System.out.println("Close Option Value Actual        : " + actCloseOption   +     "  Value Expected : " + expCloseOption);
		
		 String actdatasetGetText       = datasetGetText.getText();
		 String actviewTypeGetText      = viewTypeGetText.getText();
		 String actcheckStatusGetText   = checkStatusGetText.getText();
		 String actsuspendTypeGetText   = suspendStatusGetText.getText();
		 String actauthorizationGetText = authorizationGetText.getText();
		 String actqcGetText            = qcGetText.getText();
		 String actGetViewName          = viewNameGetText.getAttribute("value");
		
		 String expdatasetGetText       = excelReader.getCellData(xlSheetName, 36, 7);
		 String expviewTypeGetText      = excelReader.getCellData(xlSheetName, 37, 7);
		 String expcheckStatusGetText   = excelReader.getCellData(xlSheetName, 38, 7);
		 String expsuspendTypeGetText   = excelReader.getCellData(xlSheetName, 39, 7);
		 String expauthorizationGetText = excelReader.getCellData(xlSheetName, 40, 7);
		 String expqcGetText            = excelReader.getCellData(xlSheetName, 41, 7);
		 String expGetViewName          = excelReader.getCellData(xlSheetName, 42, 7);
		 
		 excelReader.setCellData(xlfile, xlSheetName, 36, 8, actdatasetGetText);
		 excelReader.setCellData(xlfile, xlSheetName, 37, 8, actviewTypeGetText);
		 excelReader.setCellData(xlfile, xlSheetName, 38, 8, actcheckStatusGetText);
		 excelReader.setCellData(xlfile, xlSheetName, 39, 8, actsuspendTypeGetText);
		 excelReader.setCellData(xlfile, xlSheetName, 40, 8, actauthorizationGetText);
		 excelReader.setCellData(xlfile, xlSheetName, 41, 8, actqcGetText);
		 excelReader.setCellData(xlfile, xlSheetName, 42, 8, actGetViewName);
		 
		 
		 System.out.println("Data Set Value Actual        : " + actdatasetGetText  +      "  Value Expected : " + expdatasetGetText);
		 System.out.println("View Type Value Actual       : " + actviewTypeGetText  +     "  Value Expected : " + expviewTypeGetText);
		 System.out.println("Check Status Value Actual    : " + actcheckStatusGetText +   "  Value Expected : " + expcheckStatusGetText);
		 System.out.println("Suspend Value Actual         : " + actsuspendTypeGetText +   "  Value Expected : " + expsuspendTypeGetText);
		 System.out.println("Authorization Value Actual   : " + actauthorizationGetText + "  Value Expected : " + expauthorizationGetText);
		 System.out.println("QC Value Actual              : " + actqcGetText            + "  Value Expected : " + expqcGetText);
		 System.out.println("View Name Value Actual       : " + actGetViewName +          "  Value Expected : " + expGetViewName);

		 
		 Thread.sleep(2000);
		
	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(viewNameTxtInCreateView));
	     viewNameTxtInCreateView.click();
	     viewNameTxtInCreateView.sendKeys(Keys.END);
	     viewNameTxtInCreateView.sendKeys(Keys.SHIFT,Keys.HOME);
	     viewNameTxtInCreateView.sendKeys(excelReader.getCellData(xlSheetName, 34, 6));
	     
	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(suspendStatusInCreateView));
	     suspendStatusInCreateView.sendKeys(excelReader.getCellData(xlSheetName, 35, 6));
	     
	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveOptionInCreateView));
	     saveOptionInCreateView.click();
	     
	     String expSaveViewMessage =excelReader.getCellData(xlSheetName, 43, 7);
			
		 String actSaveViewMessage = checkValidationMessage(expSaveViewMessage);
		 
		 System.out.println("Save View In Home page Value Actual    : " + actSaveViewMessage   +     "	 Value Expected : " + expSaveViewMessage);
		 
		 excelReader.setCellData(xlfile, xlSheetName, 43, 8, actSaveViewMessage);
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createViewNameDisplayInHomePage));
		 
		 String actcreateViewNameDisplayInHomePage = createViewNameToEditInHomePage.getText();
		 String expcreateViewNameDisplayInHomePage = excelReader.getCellData(xlSheetName, 44, 7);
		 
		 System.out.println("View Display In Home page Value Actual    : " + actcreateViewNameDisplayInHomePage   +     "	 Value Expected : " + expcreateViewNameDisplayInHomePage);
		 
		 excelReader.setCellData(xlfile, xlSheetName, 44, 8, actcreateViewNameDisplayInHomePage);
		 
		 boolean actMethod = actViewTxt==expViewTxt &&    actDataSet==expDataSet && actViewType==expViewType && actAuthorization==expAuthorization
							&& actCheckStatus==expCheckStatus && actQC==expQC && actSuspendStatus==expSuspendStatus 
							&& actFilterOption==expFilterOption && actAdvanceFilter==expAdvanceFilter && actSaveOption==expSaveOption && actCloseOption==expCloseOption;
			
		 String actResult = Boolean.toString(actMethod);
		 
		 excelReader.setCellData(xlfile, xlSheetName, 34, 8, actResult.toUpperCase());
		 
		 if(actHeaderTxt.equalsIgnoreCase(expHeaderTxt) && actMethod==true
				
				&& actdatasetGetText.equalsIgnoreCase(expdatasetGetText) && actviewTypeGetText.equalsIgnoreCase(expviewTypeGetText)
				&& actcheckStatusGetText.equalsIgnoreCase(expcheckStatusGetText) && actsuspendTypeGetText.equalsIgnoreCase(expsuspendTypeGetText)
				&& actauthorizationGetText.equalsIgnoreCase(expauthorizationGetText) && actqcGetText.equalsIgnoreCase(expqcGetText)
				&& actGetViewName.equalsIgnoreCase(expGetViewName)
				
				&& actSaveViewMessage.equalsIgnoreCase(expSaveViewMessage) && actcreateViewNameDisplayInHomePage.equalsIgnoreCase(expcreateViewNameDisplayInHomePage))
		  {
			System.out.println("Test Pass : View Saved Successfully");
			
			excelReader.setCellData(xlfile, xlSheetName, 34, 9, resPass);
			return true;
		  }
		  else
		  {
			System.out.println("Test Fail : View NOT Saved Successfully");
			
			excelReader.setCellData(xlfile, xlSheetName, 34, 9, resFail);
			return false;
		  } 
    }
    catch (Exception e) 
	{
		String exception =e.getMessage().substring(0, 50);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 34, 10, e.getMessage());
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		return false;
	}
  }
  
  
  
  public boolean checkOpeningStocksNewVoucherHomePageNewOptionOnClickDisplayEntryPage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
    try
    {
     
     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
	 newBtn.click();
	
	 checkUserFriendlyMessage();
	
	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(freeFlowBtn));
	 
	 boolean actOpeningStocksNewVouherFreeFlowBtn=freeFlowBtn.isDisplayed();
	 boolean expOpeningStocksNewVouherFreeFlowBtn=true;
			
	 System.out.println("Opening Stocks Voucher Free Flow Option Value Actual : " + actOpeningStocksNewVouherFreeFlowBtn+ "  Value Expected : " + expOpeningStocksNewVouherFreeFlowBtn);
	 
	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoSideBarMinimizeExpandBtn));
	 infoSideBarMinimizeExpandBtn.click();
	 
	 boolean actMethod = actOpeningStocksNewVouherFreeFlowBtn==expOpeningStocksNewVouherFreeFlowBtn;
	 
	 String actResult = Boolean.toString(actMethod);
	 
	 excelReader.setCellData(xlfile, xlSheetName, 45, 8, actResult.toUpperCase());
	  
	 if(actOpeningStocksNewVouherFreeFlowBtn==expOpeningStocksNewVouherFreeFlowBtn )
	 {
		System.out.println("Test Pass : entry Page  Displayed");
		excelReader.setCellData(xlfile, xlSheetName, 45, 9, resPass);
		return true;
	 } 
	 else
	 {
		System.out.println("Test Fail : entry Page NOT Displayed");
		excelReader.setCellData(xlfile, xlSheetName, 45, 9, resFail);
		return false;
	 } 
    }
    catch (Exception e) 
	{
    	String exception =e.getMessage().substring(0, 50);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 45, 10, e.getMessage());
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		return false;
	}
 }
	
  
	
 public boolean checkOpeningStocksNewVoucherEntryPageRibbonControl() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
 {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(freeFlowBtn));
		
		boolean actEntryPageJumpToHeaderSectionBtn = jumpToHeaderSectionBtn.isDisplayed();
		boolean actEntryPageJumpToBodySectionBtn   = jumpToBodySectionBtn.isDisplayed();
		boolean actEntryPageJumpToFooterBtn        = jumpToFooterBtn.isDisplayed();
		boolean actEntryPageNewBtn                 = new_newBtn.isDisplayed();
		boolean actEntryPageSaveBtn                = saveBtn.isDisplayed();
		boolean actEntryPagePreviousBtn            = previousBtn.isDisplayed();
		boolean actEntryPageNextBtn                = nextBtn.isDisplayed();
		boolean actEntryPagePrintBtn               = new_PrintBtn.isDisplayed();
		boolean actEntryPageSuspendBtn             = new_SuspendBtn.isDisplayed();
		boolean actEntryPageCloseBtn               = new_CloseBtn.isDisplayed();
		boolean actEntryPageToggleBtn              = toggleBtn.isDisplayed();

		boolean expEntryPageJumpToHeaderSectionBtn = true;
		boolean expEntryPageJumpToBodySectionBtn   = true;
		boolean expEntryPageJumpToFooterBtn        = true;
		boolean expEntryPageNewBtn	               = true;
		boolean expEntryPageSaveBtn                = true;
		boolean expEntryPagePreviousBtn            = true;
		boolean expEntryPageNextBtn                = true;
		boolean expEntryPagePrintBtn               = true;
		boolean expEntryPageSuspendBtn             = true;
		boolean expEntryPageCloseBtn               = true;
		boolean expEntryPageToggleBtn              = true;
		
		boolean actMethod = actEntryPageJumpToHeaderSectionBtn==expEntryPageJumpToHeaderSectionBtn && actEntryPageJumpToBodySectionBtn==expEntryPageJumpToBodySectionBtn 
							&& actEntryPageJumpToFooterBtn==expEntryPageJumpToFooterBtn && actEntryPageJumpToFooterBtn==expEntryPageJumpToFooterBtn
							&& actEntryPageNewBtn==expEntryPageNewBtn && actEntryPageSaveBtn==expEntryPageSaveBtn && actEntryPagePreviousBtn==expEntryPagePreviousBtn
							&& actEntryPageNextBtn==expEntryPageNextBtn && actEntryPagePrintBtn==expEntryPagePrintBtn &&actEntryPageSuspendBtn==expEntryPageSuspendBtn 
							&& actEntryPageCloseBtn==expEntryPageCloseBtn && actEntryPageToggleBtn==expEntryPageToggleBtn ;
		
		String actResult = Boolean.toString(actMethod);
		
		excelReader.setCellData(xlfile, xlSheetName, 46, 8, actResult.toUpperCase());
		
		
		//System.out.println("************************************* Opening Stocks New Entry Page Ribbon Control Options  ********************************************");
		
		System.out.println("Jump to Header Value Actual : " + actEntryPageJumpToHeaderSectionBtn+ " Value Expected : " + expEntryPageJumpToHeaderSectionBtn);
		System.out.println("Jump To Body Value Actual   : " + actEntryPageJumpToBodySectionBtn+   " Value Expected : " + expEntryPageJumpToBodySectionBtn);
		System.out.println("Jump To Footer Value Actual : " + actEntryPageJumpToFooterBtn+        " Value Expected : " + expEntryPageJumpToFooterBtn);
		System.out.println("New Btn Value Actual        : " + actEntryPageNewBtn+                 " Value Expected : " + expEntryPageNewBtn);
		System.out.println("Save Btn Value Actual       : " + actEntryPageSaveBtn+                " Value Expected : " + expEntryPageSaveBtn);
		System.out.println("Previous Btn Value Actual   : " + actEntryPagePreviousBtn+            " Value Expected : " + expEntryPagePreviousBtn);
		System.out.println("Next Btn Value Actual       : " + actEntryPageNextBtn+                " Value Expected : " + expEntryPageNextBtn);
		System.out.println("Print Btn Value Actual      : " + actEntryPagePrintBtn+               " Value Expected : " + expEntryPagePrintBtn);
		System.out.println("Suspend Btn Value Actual    : " + actEntryPageSuspendBtn+             " Value Expected : " + expEntryPageSuspendBtn);
		System.out.println("Close Btn Value Actual      : " + actEntryPageCloseBtn+               " Value Expected : " + expEntryPageCloseBtn);
		System.out.println("Toggle Btn Value Actual     : " + actEntryPageToggleBtn+              " Value Expected : " + expEntryPageToggleBtn);
	
		if(actMethod==true)
		{
			System.out.println("Test Pass : Entry Page Options Are Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 46, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Entry Page NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 46, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
	{
		String exception =e.getMessage().substring(0, 50);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 46, 10, e.getMessage());
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		return false;
	}
 }
	
	
	
 @FindBy(xpath="//*[@id='id_transactionentry_header1_section']/div/div/div/label")
 private static List<WebElement> voucherHeaderList;
 
	
 public boolean checkOpeningStocksNewEntryPageHeaderFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
 {
		
  excelReader=new ExcelReader(POJOUtility.getExcelPath());
  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
  try
  {
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	  
	  int voucherHeaderListCount = voucherHeaderList.size();
	  
	  ArrayList<String> voucherHeaderListArray = new ArrayList<String>();
	  
	  for(int i=1;i<voucherHeaderListCount;i++)
	  {
		  String data = voucherHeaderList.get(i).getText();
		  voucherHeaderListArray.add(data);
	  }
			
	  String actvoucherHeaderList=voucherHeaderListArray.toString();
	  
	  String expvoucherHeaderList=excelReader.getCellData(xlSheetName, 48, 7);
	  
	  excelReader.setCellData(xlfile, xlSheetName, 48, 8, actvoucherHeaderList);
	  
	  System.out.println("voucherHeaderList Actual   : " + actvoucherHeaderList);
	  System.out.println("voucherHeaderList Expected : " + expvoucherHeaderList);
	  
	
	if(actvoucherHeaderList.equalsIgnoreCase(expvoucherHeaderList))
	{
		System.out.println("Test Pass : entry Page Header Options Are Displayed");
		excelReader.setCellData(xlfile, xlSheetName, 47, 9, resPass);
		return true;
	}
	else
	{
		System.out.println("Test Fail : entry Page NOT Displayed");
		excelReader.setCellData(xlfile, xlSheetName, 47, 9, resFail);
		return false;
	}
  }	
  catch (Exception e) 
  {
	  String exception =e.getMessage().substring(0, 50);
	  excelReader.setExceptionInExcel(xlfile, xlSheetName, 47, 10, e.getMessage());
	  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
	  return false;
  }
}
	
	
 @FindBy(xpath="//*[@id='id_transaction_entry_detail_table_row_heading']/th/div[1]")
 private static List<WebElement> voucherBodyGridHeaderList;
	
	
  public boolean checkOpeningStocksNewEntryPageBodyFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));		
		
		
		int voucherBodyGridHeaderListCount = voucherBodyGridHeaderList.size();
		  
		ArrayList<String> voucherBodyGridHeaderListArray = new ArrayList<String>();
		  
		for(int i=0;i<voucherBodyGridHeaderListCount;i++)
		{
			String data = voucherBodyGridHeaderList.get(i).getText();
			voucherBodyGridHeaderListArray.add(data);
		}	
		
		String actvoucherBodyGridHeaderList=voucherBodyGridHeaderListArray.toString();
		
		String expvoucherBodyGridHeaderList=excelReader.getCellData(xlSheetName, 50, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 50, 8, actvoucherBodyGridHeaderList);
		
		boolean actEntryPageBodyFieldsItem  = select1stRow_1stColumn.isDisplayed();
		boolean actEntryPageBodyFieldsUnits = select1stRow_2ndColumn.isDisplayed();
		boolean actEntryPageBodyFieldsQty   = select1stRow_3rdColumn.isDisplayed();
		boolean actEntryPageBodyFieldsRate  = select1stRow_4thColumn.isDisplayed();
		boolean actEntryPageBodyFieldsGross = select1stRow_5thColumn.isDisplayed();
		
		boolean expEntryPageBodyFieldsItem  = true;
		boolean expEntryPageBodyFieldsUnits = true;
		boolean expEntryPageBodyFieldsQty   = true;
		boolean expEntryPageBodyFieldsRate  = true;
		boolean expEntryPageBodyFieldsGross = true;
		
		
		boolean actMethod = actEntryPageBodyFieldsItem==expEntryPageBodyFieldsItem && actEntryPageBodyFieldsUnits==expEntryPageBodyFieldsUnits 
							&& actEntryPageBodyFieldsQty==expEntryPageBodyFieldsQty && actEntryPageBodyFieldsRate==expEntryPageBodyFieldsRate 
							&& actEntryPageBodyFieldsGross==expEntryPageBodyFieldsGross;

		String actResult = Boolean.toString(actMethod);

		excelReader.setCellData(xlfile, xlSheetName, 49, 8, actResult.toUpperCase());
		
		
		//System.out.println("************************************* checkOpeningStocksNewEntryPageBodyFields  ********************************************");
		System.out.println("Item Value Actual            : " + actEntryPageBodyFieldsItem+ "    Value Expected : " + expEntryPageBodyFieldsItem);
		System.out.println("Units Value Actual           : " + actEntryPageBodyFieldsUnits+ "   Value Expected : " + expEntryPageBodyFieldsUnits);
		System.out.println("Qty Value Actual             : " + actEntryPageBodyFieldsQty+ "     Value Expected : " + expEntryPageBodyFieldsQty);
		System.out.println("Rate Value Actual            : " + actEntryPageBodyFieldsRate+ "    Value Expected : " + expEntryPageBodyFieldsRate);	
		System.out.println("Gross Value Actual           : " + actEntryPageBodyFieldsGross+ "   Value Expected : " + expEntryPageBodyFieldsGross);	
		System.out.println("actvoucherBodyGridHeaderList : " + actvoucherBodyGridHeaderList);
		System.out.println("expvoucherBodyGridHeaderList : " + expvoucherBodyGridHeaderList);
		
		if(actMethod==true && actvoucherBodyGridHeaderList.equalsIgnoreCase(expvoucherBodyGridHeaderList))
		{
			System.out.println("Test Pass : entry Page Body Options Are Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 49, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 49, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
	{
		String exception =e.getMessage().substring(0, 50);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 49, 10, e.getMessage());
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		return false;
	}
  }
	
	
	
	
	public boolean checkOpeningStocksNewEntryPageFooterFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
	  excelReader=new ExcelReader(POJOUtility.getExcelPath());
	  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
	  try
	  {
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(netLabel));
		
		boolean actEntryPageFooterFieldsNetLabel  = netLabel.isDisplayed();
		boolean actEntryPageFooterFieldsNetAmount = netAmount.isDisplayed();

		boolean expEntryPageFooterFieldsNetLabel  = true;
		boolean expEntryPageFooterFieldsNetAmount = true;
		
		boolean actMethod = actEntryPageFooterFieldsNetLabel==expEntryPageFooterFieldsNetLabel && actEntryPageFooterFieldsNetAmount==expEntryPageFooterFieldsNetAmount;

		String actResult = Boolean.toString(actMethod);

		excelReader.setCellData(xlfile, xlSheetName, 51, 8, actResult.toUpperCase());
		
		System.out.println("Entry Page Footer Fields Net Label Value Actual  : "+actEntryPageFooterFieldsNetLabel+"   Value Expected : "+expEntryPageFooterFieldsNetLabel);
		System.out.println("Entry Page Footer Fields Net Amount Value Actual : "+actEntryPageFooterFieldsNetAmount+"  Value Expected : "+expEntryPageFooterFieldsNetAmount);
		
		if(actMethod==true)
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 51, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 51, 9, resFail);
			return false;
		}
	  }
	  catch (Exception e) 
	  {
		  String exception =e.getMessage().substring(0, 50);
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 51, 10, e.getMessage());
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
	}
	

   public boolean checkOpeningStocksNewVoucherDocumentNumber() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
   {
	  excelReader=new ExcelReader(POJOUtility.getExcelPath());
	  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
	  try
	  {
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();
		
		String actEntryPageGetDocumentNumberValue  = documentNumberTxt.getAttribute("value");
		String expEntryPageGetDocumentNumberValue  = excelReader.getCellData(xlSheetName, 53, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 53, 8, actEntryPageGetDocumentNumberValue);

		System.out.println("Document Number Value Actual  : " + actEntryPageGetDocumentNumberValue + "   Value Expected : " + expEntryPageGetDocumentNumberValue);
	
		if(actEntryPageGetDocumentNumberValue.equalsIgnoreCase(expEntryPageGetDocumentNumberValue))
		{
			System.out.println("Test Pass : Document No is 1");
			excelReader.setCellData(xlfile, xlSheetName, 52, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 52, 9, resFail);
			return false;
		}
	  }
	  catch (Exception e) 
	  {
		  String exception =e.getMessage().substring(0, 50);
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 52, 10, e.getMessage());
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
   }
	
	
	
  public boolean checkOpeningStocksNewVoucherDateIsDisable() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  { 
		
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt_CalenderBtn));
		dateTxt_CalenderBtn.click();
			
		boolean actEntryPageGetDatePickerValue  = calender_TodayBtn.isDisplayed();

		boolean expEntryPageGetDatePickerValue  = false;
		
		boolean actMethod = actEntryPageGetDatePickerValue==expEntryPageGetDatePickerValue;

		String actResult = Boolean.toString(actMethod);

		excelReader.setCellData(xlfile, xlSheetName, 54, 8, actResult.toUpperCase());

		System.out.println("Entry Page Date Calender Value Actual  : " + actEntryPageGetDatePickerValue + "  Value Expected : " + expEntryPageGetDatePickerValue);
			
		Thread.sleep(3000);
		
		if(actMethod==true)
		{
			System.out.println("Test Pass : Calender Opened");
			excelReader.setCellData(xlfile, xlSheetName, 54, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Pass : Date is 08/26/2019");
			excelReader.setCellData(xlfile, xlSheetName, 54, 9, resFail);
			return false;
		}
	
	}
	catch (Exception e) 
	{
		  String exception =e.getMessage().substring(0, 50);
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 54, 10, e.getMessage());
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	}	
  }
	
	
	
  public boolean checkOpeningStocksNewSaveWithoutMandatoryFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
		
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
     try
     {	
    	 
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
 		wareHouseTxt.click();
    	 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessage));
		
		String actGetWarehouseValidationMessage    = errorMessage.getText();
		String expGetWarehouseValidationMessageOne = excelReader.getCellData(xlSheetName, 56, 7);
		String expGetWarehouseValidationMessageTwo = excelReader.getCellData(xlSheetName, 57, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 56, 8, actGetWarehouseValidationMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
		errorMessageCloseBtn.click();
		
		System.out.println("Entry Page voucher Mandatory Validation Value Actual  : " + actGetWarehouseValidationMessage + "  Value Expected : " + expGetWarehouseValidationMessageOne+expGetWarehouseValidationMessageTwo);
		
		if(actGetWarehouseValidationMessage.startsWith(expGetWarehouseValidationMessageOne) && actGetWarehouseValidationMessage.endsWith(expGetWarehouseValidationMessageTwo))
		{
			excelReader.setCellData(xlfile, xlSheetName, 55, 9, resPass);
			return true;
		}
		else
		{	
			excelReader.setCellData(xlfile, xlSheetName, 55, 9, resFail);
			return false;
		}
     }
     catch (Exception e) 
     {
    	 String exception =e.getMessage().substring(0, 50);
    	 excelReader.setExceptionInExcel(xlfile, xlSheetName, 55, 10, e.getMessage());
    	 System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
    	 return false;
     }	
  }
  
  
	
  @FindBy(xpath="//tbody[@id='id_header_268435460_table_body']/tr/td[2]")
  private static List<WebElement> wareHouseListCount;
	
	
  public boolean checkOpeningStocksNewWareHouseOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
		wareHouseTxt.click();
		
		wareHouseTxt.sendKeys(Keys.SPACE);
		
		int wareHouseListCountCount = wareHouseListCount.size();
		
		ArrayList<String> wareHouseListCountArray = new ArrayList<String>();
		
		for(int i=0;i<wareHouseListCountCount;i++)
		{
			String data=wareHouseListCount.get(i).getText();
			wareHouseListCountArray.add(data);
		}
			
		String actwareHouseListCount=wareHouseListCountArray.toString();
		
		String expwareHouseListCount =excelReader.getCellData(xlSheetName, 59, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 59, 8, actwareHouseListCount);
		
		System.out.println("wareHouseListCount Actual   : " + actwareHouseListCount);
		System.out.println("wareHouseListCount Expected : " + expwareHouseListCount);
		
		
	    if(actwareHouseListCount.equalsIgnoreCase(expwareHouseListCount))
		{
			System.out.println("Test Pass : Error Message Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 58, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Pass : Date is 08/26/2019");
			excelReader.setCellData(xlfile, xlSheetName, 58, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
    {
		String exception =e.getMessage().substring(0, 50);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 58, 10, e.getMessage());
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
   	 	return false;
    }	
  }
	
  public boolean checkOpeningStocksNewWarehouseCustomize() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {		
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouse_SettingsBtn));
		wareHouse_SettingsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouse_Settings_Container));
		
		boolean actEntryPageWarehouseCMBSettings               = wareHouse_Settings_Container.isDisplayed();
		boolean actEntryPageWarehouseCMBSettingsStandardField  = wareHouse_Settings_StandardFieldsBtn.isDisplayed();
		boolean actEntryPageWarehouseCMBSettingsDelete         = wareHouse_Settings_DeleteColumnBtn.isDisplayed();
		boolean actEntryPageWarehouseCMBSettingsOk             = wareHouse_Settings_OkBtn.isDisplayed();
		boolean actEntryPageWarehouseCMBSettingsCancel         = wareHouse_Settings_CancelBtn.isDisplayed();
		
		boolean expEntryPageWarehouseCMBSettings              = true;
		boolean expEntryPageWarehouseCMBSettingsStandardField = true;
		boolean expEntryPageWarehouseCMBSettingsDelete        = true;
		boolean expEntryPageWarehouseCMBSettingsOk            = true;
		boolean expEntryPageWarehouseCMBSettingsCancel        = true;
		
		
		boolean actMethod = actEntryPageWarehouseCMBSettings==expEntryPageWarehouseCMBSettings && actEntryPageWarehouseCMBSettingsStandardField==expEntryPageWarehouseCMBSettingsStandardField 
							&& actEntryPageWarehouseCMBSettingsDelete==expEntryPageWarehouseCMBSettingsDelete && actEntryPageWarehouseCMBSettingsOk==expEntryPageWarehouseCMBSettingsOk 
							&& actEntryPageWarehouseCMBSettingsCancel==expEntryPageWarehouseCMBSettingsCancel;

		String actResult = Boolean.toString(actMethod);

		excelReader.setCellData(xlfile, xlSheetName, 60, 8, actResult.toUpperCase());
	
		System.out.println("Warehouse Settings Value Actual                : " + actEntryPageWarehouseCMBSettings+              " Value Expected : "+expEntryPageWarehouseCMBSettings);
		System.out.println("Warehouse Settings Standard Field Value Actual : " + actEntryPageWarehouseCMBSettingsStandardField+ " Value Expected : "+expEntryPageWarehouseCMBSettingsStandardField);
		System.out.println("Warehouse Settings Delete Value Actual         : " + actEntryPageWarehouseCMBSettingsDelete+        " Value Expected : "+expEntryPageWarehouseCMBSettingsDelete);
		System.out.println("Warehouse Settings Ok Value Actual             : " + actEntryPageWarehouseCMBSettingsOk+            " Value Expected : "+expEntryPageWarehouseCMBSettingsOk);	
		System.out.println("Warehouse Settings Cancel Value Actual         : " + actEntryPageWarehouseCMBSettingsCancel+        " Value Expected : "+expEntryPageWarehouseCMBSettingsCancel);		
		
		if(actMethod==true)
		{
			System.out.println("Test Pass : Customize Pop Up Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 60, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Pass : Date is 08/26/2019");
			excelReader.setCellData(xlfile, xlSheetName, 60, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
    {
		String exception =e.getMessage().substring(0, 50);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 60, 10, e.getMessage());
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
   	 	return false;
    }	
  }
	
  public boolean checkOpeningStocksNewWarehouseCustomizeStandardFieldOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  { 
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouse_Settings_StandardFieldsBtn));
		wareHouse_Settings_StandardFieldsBtn.click();
		
		boolean actEntryPageWarehouseStdFieldsDD          = wareHouse_Settings_StandardFieldsBtn_Fielddropdown.isDisplayed();
		boolean actEntryPageWarehouseStdHeaderTxt         = wareHouse_Settings_StandardFieldsBtn_HeaderTxt.isDisplayed();
		boolean actEntryPageWarehouseStdAlignmentDD       = wareHouse_Settings_StandardFieldsBtn_Alignmentdropdown.isDisplayed();
		boolean actEntryPageWarehouseStdWidthTxt          = wareHouse_Settings_StandardFieldsBtn_WidthTxt.isDisplayed();
		boolean actEntryPageWarehouseStdOkButton          = wareHouse_Settings_StandardFieldsBtn_OkBtn.isDisplayed();
		boolean actEntryPageWarehouseStdCancelBtn         = wareHouse_Settings_StandardFieldsBtn_CancelBtn.isDisplayed();
		
		boolean expEntryPageWarehouseStdFieldsDD          = true;
		boolean expEntryPageWarehouseStdHeaderTxt         = true;
		boolean expEntryPageWarehouseStdAlignmentDD       = true;
		boolean expEntryPageWarehouseStdWidthTxt          = true;
		boolean expEntryPageWarehouseStdOkButton          = true;
		boolean expEntryPageWarehouseStdCancelBtn         = true;
		
		boolean actMethod = actEntryPageWarehouseStdFieldsDD==expEntryPageWarehouseStdFieldsDD && actEntryPageWarehouseStdHeaderTxt==expEntryPageWarehouseStdHeaderTxt
							&& actEntryPageWarehouseStdAlignmentDD==expEntryPageWarehouseStdAlignmentDD && actEntryPageWarehouseStdWidthTxt==expEntryPageWarehouseStdWidthTxt
							&& actEntryPageWarehouseStdOkButton==expEntryPageWarehouseStdOkButton && actEntryPageWarehouseStdCancelBtn==expEntryPageWarehouseStdCancelBtn;

		String actResult = Boolean.toString(actMethod);

		excelReader.setCellData(xlfile, xlSheetName, 61, 8, actResult.toUpperCase());
		
		System.out.println("Warehouse StdFieldsDD Value Actual        : " + actEntryPageWarehouseStdFieldsDD +    " Value Expected : " + expEntryPageWarehouseStdFieldsDD);
		System.out.println("Warehouse StdFieldsText Value Actual      : " + actEntryPageWarehouseStdHeaderTxt +   " Value Expected : " + expEntryPageWarehouseStdHeaderTxt);
		System.out.println("Warehouse StdFieldsAlignment Value Actual : " + actEntryPageWarehouseStdAlignmentDD + " Value Expected : " + expEntryPageWarehouseStdAlignmentDD);
		System.out.println("Warehouse StdFieldsWidth Value Actual     : " + actEntryPageWarehouseStdWidthTxt +    " Value Expected : " + expEntryPageWarehouseStdWidthTxt);	
		System.out.println("Warehouse StdFieldsOK Value Actual        : " + actEntryPageWarehouseStdOkButton +    " Value Expected : " + expEntryPageWarehouseStdOkButton);	
		System.out.println("Warehouse StdFieldsCancel Value Actual    : " + actEntryPageWarehouseStdCancelBtn +   " Value Expected : " + expEntryPageWarehouseStdCancelBtn);
		
		if(actMethod==true)
		{
			System.out.println("Test Pass : Standard Field Options Are Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 61, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Pass : Date is 08/26/2019");
			excelReader.setCellData(xlfile, xlSheetName, 61, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
    {
		String exception =e.getMessage().substring(0, 50);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 61, 10, e.getMessage());
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
   	 	return false;
    }	
  }
	
  public boolean checkOpeningStocksNewWarehouseCustomizeOnSelectingCode() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
		
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouse_Settings_StandardFieldsBtn_Fielddropdown));
		wareHouse_Settings_StandardFieldsBtn_Fielddropdown.click();
		
		Select s=new Select(wareHouse_Settings_StandardFieldsBtn_Fielddropdown);
		s.selectByVisibleText(excelReader.getCellData(xlSheetName, 62, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouse_Settings_StandardFieldsBtn_OkBtn));
		wareHouse_Settings_StandardFieldsBtn_OkBtn.click();
		
		boolean actWarehouseCustomizeName  = customize_sName.isDisplayed();
		boolean actWarehouseCustomizeCode  = customize_sCode.isDisplayed();
		
		boolean expWarehouseCustomizeName  = true;
		boolean expWarehouseCustomizeCode  = true;
		
		boolean actMethod =actWarehouseCustomizeName==expWarehouseCustomizeName && actWarehouseCustomizeCode==expWarehouseCustomizeCode;

		String actResult = Boolean.toString(actMethod);

		excelReader.setCellData(xlfile, xlSheetName, 62, 8, actResult.toUpperCase());
		
		System.out.println("Warehouse Customize Name Value Actual  : " + actWarehouseCustomizeName + "  Value Expected : " + expWarehouseCustomizeName);
		System.out.println("Warehouse Customize Code Value Actual  : " + actWarehouseCustomizeCode + "  Value Expected : " + expWarehouseCustomizeCode);
		
		if(actMethod==true)
		{
			System.out.println("Test Pass : Code Selected");
			excelReader.setCellData(xlfile, xlSheetName, 62, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Pass : Date is 08/26/2019");
			excelReader.setCellData(xlfile, xlSheetName, 62, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
    {
		String exception =e.getMessage().substring(0, 50);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 62, 10, e.getMessage());
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
   	 	return false;
    }	
  }
	

  @FindBy (xpath="//*[@id='id_header_268435460_customize_popup_container']/div")
  public static List<WebElement> osHeaderWarehouseSettingsCustomizeCount;	

  public boolean checkOpeningStocksNewWarehouseCustomizeDeleteColumn() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
	try
	{	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouse_Settings_StandardFieldsBtn));
		wareHouse_Settings_StandardFieldsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouse_Settings_StandardFieldsBtn_Fielddropdown));
		wareHouse_Settings_StandardFieldsBtn_Fielddropdown.click();
		
		Select s=new Select(wareHouse_Settings_StandardFieldsBtn_Fielddropdown);
		s.selectByVisibleText(excelReader.getCellData(xlSheetName, 63, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouse_Settings_StandardFieldsBtn_OkBtn));
		wareHouse_Settings_StandardFieldsBtn_OkBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouse_Settings_StandardFieldsBtn));
		wareHouse_Settings_StandardFieldsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouse_Settings_StandardFieldsBtn_Fielddropdown));
		wareHouse_Settings_StandardFieldsBtn_Fielddropdown.click();
		
		s.selectByVisibleText(excelReader.getCellData(xlSheetName, 64, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouse_Settings_StandardFieldsBtn_OkBtn));
		wareHouse_Settings_StandardFieldsBtn_OkBtn.click();		
		
		boolean actWarehouseCustomizeName  = customize_sName.isDisplayed();
		boolean actWarehouseCustomizeCode  = customize_sCode.isDisplayed();
		boolean actWarehouseCustomizeAlias = customize_Alias.isDisplayed();
		boolean actWarehouseCustomizeGroup = customize_bGroup.isDisplayed();
		
		boolean expWarehouseCustomizeName  = true;
		boolean expWarehouseCustomizeCode  = true;
		boolean expWarehouseCustomizeAlias = true;
		boolean expWarehouseCustomizeGroup = true;
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customize_bGroup));
		customize_bGroup.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouse_Settings_DeleteColumnBtn));
		wareHouse_Settings_DeleteColumnBtn.click();
		
		int Count      = osHeaderWarehouseSettingsCustomizeCount.size();
		
		String actWarehouseCustomizeCount=Integer.toString(Count);
		
		String expWarehouseCustomizeCount = excelReader.getCellData(xlSheetName, 64, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 64, 8, actWarehouseCustomizeCount);
		
		boolean actMethod = actWarehouseCustomizeName==expWarehouseCustomizeName && actWarehouseCustomizeCode==expWarehouseCustomizeCode 
							&& actWarehouseCustomizeAlias==expWarehouseCustomizeAlias && actWarehouseCustomizeGroup==expWarehouseCustomizeGroup;
		
		String actResult = Boolean.toString(actMethod);
		
		excelReader.setCellData(xlfile, xlSheetName, 63, 8, actResult.toUpperCase());
		
		
		System.out.println("Name Value Actual           : " + actWarehouseCustomizeName +  " Value Expected : " + expWarehouseCustomizeName);
		System.out.println("Code Value Actual           : " + actWarehouseCustomizeCode +  " Value Expected : " + expWarehouseCustomizeCode);
		System.out.println("Allias Value Actual         : " + actWarehouseCustomizeAlias + " Value Expected : " + expWarehouseCustomizeAlias);
		System.out.println("Group Value Actual          : " + actWarehouseCustomizeGroup + " Value Expected : " + expWarehouseCustomizeGroup);
		System.out.println("Field Count on Delete Group : " + actWarehouseCustomizeCount + " Value Expected : " + expWarehouseCustomizeCount);

		if(actMethod==true && actWarehouseCustomizeCount.equalsIgnoreCase(expWarehouseCustomizeCount))
		{
			System.out.println("Test Fail : Group NOT Deleted");
			excelReader.setCellData(xlfile, xlSheetName, 63, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Pass : Date is 08/26/2019");
			excelReader.setCellData(xlfile, xlSheetName, 63, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
    {
		String exception =e.getMessage().substring(0, 50);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 63, 10, e.getMessage());
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
   	 	return false;
    }	
  }
	
	
  @FindBy (xpath="//td[@id='id_header_1_input_image']//span[@class='optioncontrol_arrow_margin icon-down-arrow']")
  public static WebElement documentNumberArrow;	

  @FindBy (xpath="//*[@id='id_transaction_entry_container']/div/div[1]/nav/div[1]/a/div/span[2]")
  public static WebElement getText;	

  public boolean checkOpeningStocksNewWarehouseCustomizationCancel() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
	boolean res = false;
	
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouse_Settings_CancelBtn));
		wareHouse_Settings_CancelBtn.click();
		
		if(wareHouse_Settings_StandardFieldsBtn.isDisplayed())
		{
			res=false;
			String result = Boolean.toString(res);
			excelReader.setCellData(xlfile, xlSheetName, 65, 8, result.toUpperCase());
			
			System.out.println("Test Fail : Customize Screen Displaying");
			excelReader.setCellData(xlfile, xlSheetName, 65, 9, resFail);
					
			return false;
		}
		else
		{
			
			res=true;
			String result = Boolean.toString(res);
			excelReader.setCellData(xlfile, xlSheetName, 65, 8, result.toUpperCase());
			
			System.out.println("Test Pass : Customize Screen NOT Displaying ");
			excelReader.setCellData(xlfile, xlSheetName, 65, 9, resPass);
			return true;
		}
	}
	catch(Exception e)
	{
		res=true;
		String result = Boolean.toString(res);
		excelReader.setCellData(xlfile, xlSheetName, 65, 8, result.toUpperCase());
		
		System.out.println("Test Pass : Customize Screen NOT Displaying");
		excelReader.setCellData(xlfile, xlSheetName, 65, 9, resPass);
		return true;
	}
  }
  
  
  

  public boolean checkOpeningStocksNewItemCustomize() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
		
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
    try
    {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(item_SettingsBtn));
		item_SettingsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(item_Settings_Container));
		
		boolean actItemCustomizeSettings          = item_Settings_Container.isDisplayed();
		boolean actItemCustomizeStandardFieldBtn  = item_Settings_StandardFieldsBtn.isDisplayed();
		boolean actItemCustomizeDeleteBtn         = item_Settings_DeleteColumnBtn.isDisplayed();
		boolean actItemCustomizeOkBtn             = item_Settings_OkBtn.isDisplayed();
		boolean actItemCustomizeCancelBtn         = item_Settings_CancelBtn.isDisplayed();
		
		boolean expItemCustomizeSettings          = true;
		boolean expItemCustomizeStandardFieldBtn  = true;
		boolean expItemCustomizeDeleteBtn         = true;
		boolean expItemCustomizeOkBtn             = true;
		boolean expItemCustomizeCancelBtn         = true;
		
		boolean actMethod = actItemCustomizeSettings==expItemCustomizeSettings && actItemCustomizeStandardFieldBtn==expItemCustomizeStandardFieldBtn 
							&& actItemCustomizeDeleteBtn==expItemCustomizeDeleteBtn && actItemCustomizeOkBtn==expItemCustomizeOkBtn
							&& actItemCustomizeCancelBtn==expItemCustomizeCancelBtn;

		String actResult = Boolean.toString(actMethod);

		excelReader.setCellData(xlfile, xlSheetName, 66, 8, actResult.toUpperCase());
		
		System.out.println("Settings Value Actual       : " + actItemCustomizeSettings +         "  Value Expected : " + expItemCustomizeSettings);
		System.out.println("Standard Field Value Actual : " + actItemCustomizeStandardFieldBtn + "  Value Expected : " + expItemCustomizeStandardFieldBtn);
		System.out.println("Delete Value Actual         : " + actItemCustomizeDeleteBtn +        "  Value Expected : " + expItemCustomizeDeleteBtn);
		System.out.println("Ok Value Actual             : " + actItemCustomizeOkBtn +            "  Value Expected : " + expItemCustomizeOkBtn);
		System.out.println("Cancel Value Actual         : " + actItemCustomizeCancelBtn +        "  Value Expected : " + expItemCustomizeCancelBtn);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(item_Settings_Container));
		
		if(actMethod==true)
		{
			System.out.println("Test Pass : Customize Pop Up Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 66, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Customize Pop Up NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 66, 9, resFail);
			return false;
		}
    }
    catch (Exception e) 
    {
		String exception =e.getMessage().substring(0, 50);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 66, 10, e.getMessage());
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
   	 	return false;
    }	
  }
	
  public boolean checkOpeningStocksNewItemCustomizationStandardFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(item_Settings_StandardFieldsBtn));
		item_Settings_StandardFieldsBtn.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(item_Settings_StandardFieldsBtn_Fielddropdown));
		boolean actItemCustomizeFieldDropdown     = item_Settings_StandardFieldsBtn_Fielddropdown.isDisplayed();
		boolean actItemCustomizeHeaderTxt         = item_Settings_StandardFieldsBtn_HeaderTxt.isDisplayed();
		boolean actItemCustomizeAlignmentBtn      = item_Settings_StandardFieldsBtn_Alignmentdropdown.isDisplayed();
		boolean actItemCustomizeWidth             = item_Settings_StandardFieldsBtn_WidthTxt.isDisplayed();
		boolean actItemCustomizeOkBtn             = item_Settings_StandardFieldsBtn_OkBtn.isDisplayed();
		boolean actItemCustomizeCancelBtn         = item_Settings_StandardFieldsBtn_CancelBtn.isDisplayed();
		
		boolean expItemCustomizeFieldDropdown     = true;
		boolean expItemCustomizeHeaderTxt         = true;
		boolean expItemCustomizeAlignmentBtn      = true;
		boolean expItemCustomizeWidth             = true;
		boolean expItemCustomizeOkBtn             = true;
		boolean expItemCustomizeCancelBtn         = true;
		
		boolean actMethod = actItemCustomizeFieldDropdown==expItemCustomizeFieldDropdown && actItemCustomizeHeaderTxt==expItemCustomizeHeaderTxt
							&& actItemCustomizeAlignmentBtn==expItemCustomizeAlignmentBtn && actItemCustomizeWidth==expItemCustomizeWidth
							&& actItemCustomizeOkBtn==expItemCustomizeOkBtn && actItemCustomizeCancelBtn==expItemCustomizeCancelBtn;

		String actResult = Boolean.toString(actMethod);

		excelReader.setCellData(xlfile, xlSheetName, 67, 8, actResult.toUpperCase());
	
		System.out.println("Item Customize fieldDropdown Value Actual  : " + actItemCustomizeFieldDropdown + " Value Expected : "+expItemCustomizeFieldDropdown);
		System.out.println("Item Customize Header Value Actual         : " + actItemCustomizeHeaderTxt +     " Value Expected : "+expItemCustomizeHeaderTxt);
		System.out.println("Item Customize Alignment Value Actual      : " + actItemCustomizeAlignmentBtn +  " Value Expected : "+expItemCustomizeAlignmentBtn);
		System.out.println("Item Customize Width Value Actual          : " + actItemCustomizeWidth +         " Value Expected : "+expItemCustomizeWidth);
		System.out.println("Item Customize OK Value Actual             : " + actItemCustomizeOkBtn +         " Value Expected : "+expItemCustomizeOkBtn);
		System.out.println("Item Customize Cancel Value Actual         : " + actItemCustomizeCancelBtn +     " Value Expected : "+expItemCustomizeCancelBtn);
		
		if(actMethod==true)
		{
			System.out.println("Test Pass : Standard Field Options Are Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 67, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Customize Pop Up NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 67, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
    {
		String exception =e.getMessage().substring(0, 50);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 67, 10, e.getMessage());
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
   	 	return false;
    }		
  }
  
  
	
  public boolean checkOpeningStocksNewItemCustomizationAddBalanceColumn() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(item_Settings_StandardFieldsBtn_Fielddropdown));
		item_Settings_StandardFieldsBtn_Fielddropdown.click();
		
		Select s=new Select(item_Settings_StandardFieldsBtn_Fielddropdown);
		s.selectByVisibleText(excelReader.getCellData(xlSheetName, 68, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(item_Settings_StandardFieldsBtn_OkBtn));
		item_Settings_StandardFieldsBtn_OkBtn.click();
				
		boolean actItemCustomizeFieldName       = customize_sName.isDisplayed();
		boolean actItemCustomizeFieldBalance    = customize_Balance.isDisplayed();
		
		boolean expItemCustomizeFieldName       = true;
		boolean expItemCustomizeFieldBalance    = true;
		
		boolean actMethod = actItemCustomizeFieldName==expItemCustomizeFieldName && actItemCustomizeFieldBalance==expItemCustomizeFieldBalance;

		String actResult = Boolean.toString(actMethod);

		excelReader.setCellData(xlfile, xlSheetName, 68, 8, actResult.toUpperCase());
		

		System.out.println("Name Value Actual      : " + actItemCustomizeFieldName    + " Value Expected        : " + expItemCustomizeFieldName);
		System.out.println("Balance Value Actual   : " + actItemCustomizeFieldBalance + " Value Expected        : " + expItemCustomizeFieldBalance);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(item_Settings_OkBtn));
		item_Settings_OkBtn.click();
	
		if(actMethod==true)
		{
			System.out.println("Test Pass : Balance Selected");
			excelReader.setCellData(xlfile, xlSheetName, 68, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Customize Pop Up NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 68, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
    {
		String exception =e.getMessage().substring(0, 50);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 68, 10, e.getMessage());
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
   	 	return false;
    }	
  }
  
  
 
  public boolean checkOpeningStocksNewSaveWithoutInputOfBodyRowsColumns() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
	    saveBtn.click();
	    	    
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessage));	 
	    
	    String expOnSaveMessageWithoutMandatory = excelReader.getCellData(xlSheetName, 70, 7);
	    
	    String actOnSaveMessageWithoutMandatory= checkValidationMessage(expOnSaveMessageWithoutMandatory);
	    
	    excelReader.setCellData(xlfile, xlSheetName, 70, 8, actOnSaveMessageWithoutMandatory);
		
	    
		System.out.println("Entry Page Save Without Input Value Actual : " + actOnSaveMessageWithoutMandatory + " Value Expected : " + expOnSaveMessageWithoutMandatory);
		
	    if (actOnSaveMessageWithoutMandatory.equalsIgnoreCase(expOnSaveMessageWithoutMandatory))
	    {
	        excelReader.setCellData(xlfile, xlSheetName, 69, 9, resPass);
	        return true;
	    } 
	    else 
	    {
	      excelReader.setCellData(xlfile, xlSheetName, 69, 9, resFail);
          return false;
	    }
	}
	catch (Exception e) 
    {
		String exception =e.getMessage().substring(0, 50);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 69, 10, e.getMessage());
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
   	 	return false;
    }	
 }
	
	
	
  public boolean checkOpeningStocksNewVouchersEntryPageNew() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
	try
	{
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();
		documentNumberTxt.clear();
		documentNumberTxt.sendKeys(excelReader.getCellData(xlSheetName, 71, 6));
		documentNumberTxt.sendKeys(Keys.TAB);
		
		String actDocNumberBeforeNewClick     = documentNumberTxt.getAttribute("value");
		String expDocNumberBeforeNewClick     = excelReader.getCellData(xlSheetName, 72, 7);
				
		System.out.println("Test Pass : Entered 2 in DOC NO");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_newBtn));
		new_newBtn.click();
		
		getWaitForAlert();
		
		String actAlertMessageBeforeNewClick   = getAlert().getText();
		String expAlertMessageBeforeNewClick0  = excelReader.getCellData(xlSheetName, 73, 7);
		String expAlertMessageBeforeNewClick1  = excelReader.getCellData(xlSheetName, 74, 7);
		
		getAlert().accept();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocNumberAfterNewClick       = documentNumberTxt.getAttribute("value");
		String expDocNumberAfterNewClick       = excelReader.getCellData(xlSheetName, 75, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 72, 8, actDocNumberBeforeNewClick);
		excelReader.setCellData(xlfile, xlSheetName, 73, 8, actAlertMessageBeforeNewClick);
		excelReader.setCellData(xlfile, xlSheetName, 75, 8, actDocNumberAfterNewClick);
		
		
		System.out.println("Entry Page Save on Click New Value Actual  : " + actAlertMessageBeforeNewClick + " Value Expected   : " + expAlertMessageBeforeNewClick0+expAlertMessageBeforeNewClick1);
				
		if(actDocNumberBeforeNewClick.equalsIgnoreCase(expDocNumberBeforeNewClick) && actAlertMessageBeforeNewClick.startsWith(expAlertMessageBeforeNewClick0) 
				&& actAlertMessageBeforeNewClick.endsWith(expAlertMessageBeforeNewClick1) && actDocNumberAfterNewClick.equalsIgnoreCase(expDocNumberAfterNewClick))
		{	
			System.out.println("Test Pass : DOC NO is 1");
			excelReader.setCellData(xlfile, xlSheetName, 71, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Customize Pop Up NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 71, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
    {
		String exception =e.getMessage().substring(0, 50);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 71, 10, e.getMessage());
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
   	 	return false;
    }	
  }
	

	
  @FindBy(xpath="//tbody[@id='id_body_23_table_body']/tr/td[2]")
  private static List<WebElement> itemListCount;
	
  public boolean checkOpeningStocksNewBodyRowsItemColumn() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
		wareHouseTxt.sendKeys(Keys.SPACE);
			
		int warehousecount=wareHouseListCount.size();
		
		System.err.println(warehousecount);
			
		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=wareHouseListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 76, 6)))
			{
				wareHouseListCount.get(i).click();
				break;
			}
		}
		
		wareHouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemListCounts = itemListCount.size();
		
		ArrayList<String> itemListCountArray = new ArrayList<String>();
		
		for(int i=0;i<itemListCounts;i++)
		{
			String data=itemListCount.get(i).getText();
			itemListCountArray.add(data);
		}
			
		String actitemListCount=itemListCountArray.toString();
		
		String expitemListCount =excelReader.getCellData(xlSheetName, 77, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 77, 8, actitemListCount);
		
		System.out.println("itemListCount Actual   : " + actitemListCount);
		System.out.println("itemListCount Expected : " + expitemListCount);
		
		if(actitemListCount.equalsIgnoreCase(expitemListCount))
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			excelReader.setCellData(xlfile, xlSheetName, 76, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			excelReader.setCellData(xlfile, xlSheetName, 76, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
    {
		String exception =e.getMessage().substring(0, 50);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 76, 10, e.getMessage());
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
   	 	return false;
    }	
  }
	
	
  public boolean checkOpeningStocksNewVoucherBodyRowUnitsColumn() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
	    int itemcount=itemListCount.size();
		
		System.err.println(itemcount);
			
		for(int i=0 ; i < itemcount ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 78, 6)))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.click();
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		String actUnitsColumnValue  = select1stRow_2ndColumn.getText();
		String expUnitsColumnValue  = excelReader.getCellData(xlSheetName, 79, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 79, 8, actUnitsColumnValue);
	
		System.out.println("Select Item Units Column Value Actual  : " + actUnitsColumnValue + "    Value Expected   : " + expUnitsColumnValue);
	
		if(actUnitsColumnValue.equalsIgnoreCase(expUnitsColumnValue))
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			excelReader.setCellData(xlfile, xlSheetName, 78, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			excelReader.setCellData(xlfile, xlSheetName, 78, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
    {
		String exception =e.getMessage().substring(0, 50);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 78, 10, e.getMessage());
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
   	 	return false;
    }	
  }
	
  public boolean checkOpeningStocksNewSaveVoucherWithoutBatch() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
		
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
			
	    String expSaveMessageWithOutBatch=excelReader.getCellData(xlSheetName, 81, 7);
		
		String validationMessage=checkValidationMessage(expSaveMessageWithOutBatch);

		excelReader.setCellData(xlfile, xlSheetName, 81, 8, validationMessage);
		
		System.out.println("Click On Save Without Input Of Batch Value Actual  : " + validationMessage + "  Value Expected   : " + "TRUE");

		if(validationMessage.equalsIgnoreCase(expSaveMessageWithOutBatch))
		{
			System.out.println("Test Pass : Error Message Is As Expected");
			
			excelReader.setCellData(xlfile, xlSheetName, 80, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Error Message Is NOT As Expected");
			
			excelReader.setCellData(xlfile, xlSheetName, 80, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
    {
		String exception =e.getMessage().substring(0, 50);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 80, 10, e.getMessage());
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
   	 	return false;
    }	
  }
	
	
	
  public boolean checkOpeningStocksNewSaveDataWithoutExpiryDate() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
		
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_3rdColumn));
		select1stRow_3rdColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.click();
		enter_Quantity.clear();
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 82, 6));
		enter_Quantity.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 83, 6));
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.click();
		enter_Batch.clear();
		enter_Batch.sendKeys(excelReader.getCellData(xlSheetName, 84, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		select2ndRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		String expSaveMessageWithOutBatchExpiry=excelReader.getCellData(xlSheetName, 83, 7);
		
		String validationMessage=checkValidationMessage(expSaveMessageWithOutBatchExpiry);
		
		excelReader.setCellData(xlfile, xlSheetName, 83, 8, validationMessage);
		
				
		System.out.println("Entry Page Save With Input Of Batch Value Actual  : " + validationMessage + "  Value Expected   : " + "TRUE");
	
	
		if(validationMessage.equalsIgnoreCase(expSaveMessageWithOutBatchExpiry))
		{
			System.out.println("Test Pass : Error Message Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 82, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test fail : Error Message NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 82, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
    {
		String exception =e.getMessage().substring(0, 50);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 82, 10, e.getMessage());
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
   	 	return false;
    }
  }

  
  @FindBy(xpath="//input[@id='id_body_37']")
  private static WebElement enter_Expirydate;

  public boolean checkOpeningStocksNewVoucherBRItemInputBodyDataInFirstRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
    try
    {
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.click();
		enter_Expirydate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_3rdColumn));
		String actQtyR1         = select1stRow_3rdColumn.getText();
		String actRateR1        = select1stRow_4thColumn.getText();
		String actGrossR1       = select1stRow_5thColumn.getText();
		String actBatchR1       = select1stRow_6thColumn.getText();
		
		String expQtyR1         = excelReader.getCellData(xlSheetName, 86, 7);
		String expRateR1        = excelReader.getCellData(xlSheetName, 87, 7);
		String expGrossR1       = excelReader.getCellData(xlSheetName, 88, 7);
		String expBatchR1       = excelReader.getCellData(xlSheetName, 89, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 86, 8, actQtyR1);
		excelReader.setCellData(xlfile, xlSheetName, 87, 8, actRateR1);
		excelReader.setCellData(xlfile, xlSheetName, 88, 8, actGrossR1);
		excelReader.setCellData(xlfile, xlSheetName, 89, 8, actBatchR1);

		System.out.println("Qty Row 1 Value Actual    : " + actQtyR1     +       " Value Expected   : " + expQtyR1);
		System.out.println("Rate Row 1 Value Actual   : " + actRateR1    +       " Value Expected   : " + expRateR1);
		System.out.println("Gross Row 1 Value Actual  : " + actGrossR1   +       " Value Expected   : " + expGrossR1);
		System.out.println("Batch Row 1 Value Actual  : " + actBatchR1   +       " Value Expected   : " + expBatchR1);
		
		
		if(actQtyR1.equalsIgnoreCase(expQtyR1) && actRateR1.equalsIgnoreCase(expRateR1) && actGrossR1.equalsIgnoreCase(expGrossR1)
				&& actBatchR1.equalsIgnoreCase(expBatchR1))
		{
			System.out.println("Test Pass : Data Entered in First Row");
			excelReader.setCellData(xlfile, xlSheetName, 85, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Data NOT Entered in First Row");
			excelReader.setCellData(xlfile, xlSheetName, 85, 9, resFail);
			return false;
		}
    }
    catch (Exception e) 
    {
		String exception =e.getMessage().substring(0, 50);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 85, 10, e.getMessage());
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
   	 	return false;
    }	
  }
	


  
  
  public boolean checkOpeningStocksNewVoucherBinsFifoInputWithoutBinSecondRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
    try
    {
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		select2ndRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount = itemListCount.size();
		
		System.err.println(itemcount);
			
		for(int i=0 ; i < itemcount ;i++)
		{
			String data = itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 90, 6)))
			{
				itemListCount.get(i).click();
				break;
			}
	    }
	
        enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		String actUnitsColumnSelectingBinsProduct = select2ndRow_2ndColumn.getText();
		String expUnitsColumnSelectingBinsProduct = excelReader.getCellData(xlSheetName, 91, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 91, 8, actUnitsColumnSelectingBinsProduct);
		
		System.out.println("Units Column Value is display On Select       : " + actUnitsColumnSelectingBinsProduct +  "  Value Expected : " + expUnitsColumnSelectingBinsProduct);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.click();
		enter_Quantity.clear();
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 91, 6));
		enter_Quantity.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 92, 6));
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		String expSaveMessageWithOutBatchExpiry=excelReader.getCellData(xlSheetName, 92, 7);
		
		String validationMessage=checkValidationMessage(expSaveMessageWithOutBatchExpiry);
		
		excelReader.setCellData(xlfile, xlSheetName, 92, 8, validationMessage);
				
		System.out.println("Entry Page Save With Input Of Batch Value Actual  : " + validationMessage + "  Value Expected   : " + "TRUE");
	
		if(actUnitsColumnSelectingBinsProduct.equalsIgnoreCase(expUnitsColumnSelectingBinsProduct) &&  expSaveMessageWithOutBatchExpiry.equalsIgnoreCase(validationMessage))
		{
			System.out.println("Test Pass : Bin Popup Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 90, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Bin Popup NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 90, 9, resFail);
			return false;
		}
    }
    catch (Exception e) 
    {
		String exception =e.getMessage().substring(0, 50);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 90, 10, e.getMessage());
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
   	 	return false;
    }	
 }
  
  
  
  @FindBy(xpath="//*[@id='id_transaction_bins_grid_body']/tr/td")
  private static List<WebElement> binInwardGridList;
	
  public boolean checkOpeningStocksNewVoucherInputBinFifoBinPopupOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_5thColumn));
		select2ndRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchBtn));
		binSearchBtn.click();
		
		Thread.sleep(2000);
				
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchTxt));
		
		boolean actBinSearch            = binSearchTxt.isDisplayed();
		boolean actBinSearchTxt         = binSearchTxt.isDisplayed();
		boolean actBinSearchBtn         = binSearchBtn.isDisplayed();
		//boolean actBinAlternateCategory = binAlternateCategoryCheckBtn.isDisplayed();
		boolean actBinAutoAllocateBtn   = binAutoAllocateBtn.isDisplayed();
		boolean actBinPickBtn           = binPickBtn.isDisplayed();
		boolean actBinCancelBtn         = binCancelBtn.isDisplayed();
		
		boolean expBinSearch            = true;
		boolean expBinSearchTxt         = true;
		boolean expBinSearchBtn         = true;
		boolean expBinAlternateCategory = true;
		boolean expBinAutoAllocateBtn   = true;
		boolean expBinPickBtn           = true;
		boolean expBinCancelBtn         = true;
		
		System.out.println("Entry Page Bin Search Value Actual  : " + actBinSearch + "    Value Expected   : " + expBinSearch);
		
		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchTxt));
			
		String actBinGroupNameR1        = binselect1stRow_2ndColumn.getText();
		
		String actBinNameR2             = binselect2ndRow_2ndColumn.getText();
		String actBinStockR2            = binselect2ndRow_3rdColumn.getText();
		String actBinCapacityR2         = binselect2ndRow_4thColumn.getText();
		String actBinLoadR2             = binselect2ndRow_5thColumn.getText();
		String actBinFreeSpaceR2        = binselect2ndRow_6thColumn.getText();
		String actBinFreeQtyR2          = binselect2ndRow_7thColumn.getText();
		String actBinToBeAllocatedR2    = binselect2ndRow_8thColumn.getText();				
		String actBinNameR3             = binselect3rdRow_2ndColumn.getText();
		String actBinStockR3            = binselect3rdRow_3rdColumn.getText();
		String actBinCapacityR3         = binselect3rdRow_4thColumn.getText();
		String actBinLoadR3             = binselect3rdRow_5thColumn.getText();
		String actBinFreeSpaceR3        = binselect3rdRow_6thColumn.getText();
		String actBinFreeQtyR3          = binselect3rdRow_7thColumn.getText();
		String actBinToBeAllocatedR3    = binselect3rdRow_8thColumn.getText();	*/
		String actBinTotalQty           = binTotalQty.getAttribute("value");
		String actBinBaseUom            = binBaseUOM.getText();
		String actBinBalanceQty         = binBalanceTxt.getAttribute("value");
		
		excelReader.setCellData(xlfile, xlSheetName, 95, 8, actBinTotalQty);
		excelReader.setCellData(xlfile, xlSheetName, 96, 8, actBinBaseUom);
		excelReader.setCellData(xlfile, xlSheetName, 97, 8, actBinBalanceQty);
		
		int binInwardGridListCount = binInwardGridList.size();
		
		ArrayList<String> binInwardGridListArray = new ArrayList<String>();
		
		for(int i=0;i<binInwardGridListCount;i++)
		{
			String data = binInwardGridList.get(i).getText();
			binInwardGridListArray.add(data);
		}
		
		
		String actbinInwardGridList=binInwardGridListArray.toString();
		
		String expbinInwardGridList=excelReader.getCellData(xlSheetName, 94, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 94, 8, actbinInwardGridList);
		
		System.out.println("ActbinInwardGridList : " + actbinInwardGridList);
		System.out.println("ExpbinInwardGridList : " + expbinInwardGridList);
		
		
		
		boolean actMethod = actBinSearch==expBinSearch && actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn 
				            /*&& actBinAlternateCategory==expBinAlternateCategory */
				            && actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn;
		
		String actResult = Boolean.toString(actMethod);
		
		excelReader.setCellData(xlfile, xlSheetName, 90, 8, actResult.toUpperCase());
		
		
      /*  String expBinGroupNameR1        = "BG1";
		String expBinNameR2             = "Bin4";
		String expBinStockR2            = "0.00";
		String expBinCapacityR2         = "90.00";
		String expBinLoadR2             = "0.00";
		String expBinFreeSpaceR2        = "90.00";
		String expBinFreeQtyR2          = "90.00";
		String expBinToBeAllocatedR2    = "0.00";
		String expBinNameR3             = "Bin5";
		String expBinStockR3            = "0.00";
		String expBinCapacityR3         = "98.00";
		String expBinLoadR3             = "0.00";
		String expBinFreeSpaceR3        = "98.00";
		String expBinFreeQtyR3          = "98.00";
		String expBinToBeAllocatedR3    = "0.00";*/
		String expBinTotalQty           = excelReader.getCellData(xlSheetName, 95, 7);
		String expBinBaseUom            = excelReader.getCellData(xlSheetName, 96, 7);
		String expBinBalanceQty         = excelReader.getCellData(xlSheetName, 97, 7);
				
       /* System.out.println("First Row Group Name Value Actual       :  " + actBinGroupNameR1 +       " Value Expected : " + expBinGroupNameR1);		
		System.out.println("Second Row Bin Name Value Actual        :  " + actBinNameR2 +            " Value Expected : " + expBinNameR2);
		System.out.println("Second Row Stock Value Actual           :  " + actBinStockR2 +           " Value Expected : " + expBinStockR2);
		System.out.println("Second Row Capacity Value Actual        :  " + actBinCapacityR2 +        " Value Expected : " + expBinCapacityR2);
		System.out.println("Second Row Load Value Actual            :  " + actBinLoadR2 +            " Value Expected : " + expBinLoadR2);
		System.out.println("Second Row Free Space Value Actual      :  " + actBinFreeSpaceR2 +       " Value Expected : " + expBinFreeSpaceR2);
		System.out.println("Second Row Free Qty Value Actual        :  " + actBinFreeQtyR2 +         " Value Expected : " + expBinFreeQtyR2);
		System.out.println("Second Row To Be Allocated Value Actual :  " + actBinToBeAllocatedR2 +   " Value Expected : " + expBinToBeAllocatedR2);			
		System.out.println("Third Row Bin Name Value Actual         :  " + actBinNameR3 +            " Value Expected : " + expBinNameR3);
		System.out.println("Third Row Stock Value Actual            :  " + actBinStockR3 +           " Value Expected : " + expBinStockR3);
		System.out.println("Third Row Capacity Value Actual         :  " + actBinCapacityR3 +        " Value Expected : " + expBinCapacityR3);
		System.out.println("Third Row Load Value Actual             :  " + actBinLoadR3 +            " Value Expected : " + expBinLoadR3);
		System.out.println("Third Row Free Space Value Actual       :  " + actBinFreeSpaceR3 +       " Value Expected : " + expBinFreeSpaceR3);
		System.out.println("Third Row Free Qty Value Actual         :  " + actBinFreeQtyR3 +         " Value Expected : " + expBinFreeQtyR3);
		System.out.println("Third Row To Be Allocated Value Actual  :  " + actBinToBeAllocatedR3 +   " Value Expected : " + expBinToBeAllocatedR3);	*/	
		System.out.println("Bin Total Qty Value Actual              :  " +actBinTotalQty +           " Value Expected : " + expBinTotalQty);
		System.out.println("Bin Base Uom Value Actual               :  " +actBinBaseUom +            " Value Expected : " + expBinBaseUom);
		System.out.println("Bin Balance Txt Value Actual            :  " +actBinBalanceQty +         " Value Expected : " + expBinBalanceQty);
		
		
	
		System.out.println("Bin Search Value Actual                 :  " + actBinSearchTxt +         " Value Expected : " + expBinSearchTxt);
		System.out.println("Bin Search Btn Value Actual             :  " + actBinSearchBtn +         " Value Expected : " + expBinSearchBtn);
		//System.out.println("Bin Alternate Category Value Actual     :  " + actBinAlternateCategory + " Value Expected : " + expBinAlternateCategory);
		System.out.println("Bin Auto Allocate Btn Value Actual      :  " + actBinAutoAllocateBtn +   " Value Expected : " + expBinAutoAllocateBtn);
		System.out.println("Bin Pick Btn Value Actual               :  " + actBinPickBtn +           " Value Expected : " + expBinPickBtn);
		System.out.println("Bin Cancel Btn Value Actual             :  " + actBinCancelBtn +         " Value Expected : " + expBinCancelBtn);
							
		if(actMethod==true && actbinInwardGridList.equalsIgnoreCase(expbinInwardGridList) && actBinTotalQty.equalsIgnoreCase(expBinTotalQty)
				&& actBinBaseUom.endsWith(expBinBaseUom) && actBinBalanceQty.equalsIgnoreCase(expBinBalanceQty))
		{
			System.out.println("Test Pass : Bin Popup options Are As Expected");
			excelReader.setCellData(xlfile, xlSheetName, 93, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Bin Popup options Are NOT As Expected");
			excelReader.setCellData(xlfile, xlSheetName, 93, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
    {
		String exception =e.getMessage().substring(0, 50);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 93, 10, e.getMessage());
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
   	 	return false;
    }	
  }
	
	
	
	
  // Not Updating Total Sum
  public boolean checkSelectingBinThroughDoubleClickAndCheckBinColumnInVoucherOnClickOnOk() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
		
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binselect2ndRow_1stColumn));
		getAction().doubleClick(binselect2ndRow_1stColumn).build().perform();
		
		/*String actBinGroupNameR1        = binselect1stRow_2ndColumn.getText();	
		
		String actBinNameR2             = binselect2ndRow_2ndColumn.getText();
		String actBinStockR2            = binselect2ndRow_3rdColumn.getText();
		String actBinCapacityR2         = binselect2ndRow_4thColumn.getText();
		String actBinLoadR2             = binselect2ndRow_5thColumn.getText();
		String actBinFreeSpaceR2        = binselect2ndRow_6thColumn.getText();
		String actBinFreeQtyR2          = binselect2ndRow_7thColumn.getText();
		String actBinToBeAllocatedR2    = binselect2ndRow_8thColumn.getText();
			
		String actBinNameR3             = binselect3rdRow_2ndColumn.getText();
		String actBinStockR3            = binselect3rdRow_3rdColumn.getText();
		String actBinCapacityR3         = binselect3rdRow_4thColumn.getText();
		String actBinLoadR3             = binselect3rdRow_5thColumn.getText();
		String actBinFreeSpaceR3        = binselect3rdRow_6thColumn.getText();
		String actBinFreeQtyR3          = binselect3rdRow_7thColumn.getText();
		String actBinToBeAllocatedR3    = binselect3rdRow_8thColumn.getText();*/
		
		String actBinTotalQty           = binTotalQty.getAttribute("value");
		String actBinBaseUom            = binBaseUOM.getText();
		String actBinBalanceQty         = binBalanceTxt.getAttribute("value");
		
		String actBinSum                = binSumInward.getText();
		
		/*String expBinGroupNameR1        = "BG1";
	 	
		String expBinNameR2             = "Bin4";
		String expBinStockR2            = "0.00";
		String expBinCapacityR2         = "90.00";
		String expBinLoadR2             = "0.00";
		String expBinFreeSpaceR2        = "90.00";
		String expBinFreeQtyR2          = "90.00";
		String expBinToBeAllocatedR2    = "12.00";
		
		String expBinNameR3             = "Bin5";
		String expBinStockR3            = "0.00";
		String expBinCapacityR3         = "98.00";
		String expBinLoadR3             = "0.00";
		String expBinFreeSpaceR3        = "98.00";
		String expBinFreeQtyR3          = "98.00";
		String expBinToBeAllocatedR3    = "0.00";*/
		
		String expBinTotalQty           = excelReader.getCellData(xlSheetName, 100, 7);
		String expBinBaseUom            = excelReader.getCellData(xlSheetName, 101, 7);
		String expBinBalanceQty         = excelReader.getCellData(xlSheetName, 102, 7);
		String expBinSum                = excelReader.getCellData(xlSheetName, 103, 7);
		
		
		excelReader.setCellData(xlfile, xlSheetName, 100, 8, actBinTotalQty);
		excelReader.setCellData(xlfile, xlSheetName, 101, 8, actBinBaseUom);
		excelReader.setCellData(xlfile, xlSheetName, 102, 8, actBinBalanceQty);
		excelReader.setCellData(xlfile, xlSheetName, 103, 8, actBinSum);
		
			
		boolean actBinSearchTxt         = binSearchTxt.isDisplayed();
		boolean actBinSearchBtn         = binSearchBtn.isDisplayed();
		//boolean actBinAlternateCategory = binAlternateCategoryCheckBtn.isDisplayed();
		boolean actBinAutoAllocateBtn   = binAutoAllocateBtn.isDisplayed();
		boolean actBinPickBtn           = binPickBtn.isDisplayed();
		boolean actBinCancelBtn         = binCancelBtn.isDisplayed();
		boolean actBinOkBtn             = binOkBtn.isEnabled();
		
		boolean expBinSearchTxt         = true;
		boolean expBinSearchBtn         = true;
		boolean expBinAlternateCategory = true;
		boolean expBinAutoAllocateBtn   = true;
		boolean expBinPickBtn           = true;
		boolean expBinCancelBtn         = true;
		boolean expBinOkBtn             = true;
		
		int binInwardGridListCount = binInwardGridList.size();
		
		ArrayList<String> binInwardGridListArray = new ArrayList<String>();
		
		for(int i=0;i<binInwardGridListCount;i++)
		{
			String data = binInwardGridList.get(i).getText();
			binInwardGridListArray.add(data);
		}
		
		
		String actbinInwardGridList=binInwardGridListArray.toString();
		
		String expbinInwardGridList=excelReader.getCellData(xlSheetName, 99, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 99, 8, actbinInwardGridList);
		
		System.out.println("ActbinInwardGridList : " + actbinInwardGridList);
		System.out.println("ExpbinInwardGridList : " + expbinInwardGridList);
		
		
		
		boolean actMethod = actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn 
				            /*&& actBinAlternateCategory==expBinAlternateCategory*/ 
				            && actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn;
		
		String actResult = Boolean.toString(actMethod);
		
		excelReader.setCellData(xlfile, xlSheetName, 98, 8, actResult.toUpperCase());
	
		System.out.println("Bin Search Value Actual                    :  " + actBinSearchTxt +         " Value Expected : " + expBinSearchTxt);
		System.out.println("Bin Search Btn Value Actual                :  " + actBinSearchBtn +         " Value Expected : " + expBinSearchBtn);
		//System.out.println("Bin Alternate Category Value Actual        :  " + actBinAlternateCategory + " Value Expected : " + expBinAlternateCategory);
		System.out.println("Bin Auto Allocate Btn Value Actual         :  " + actBinAutoAllocateBtn +   " Value Expected : " + expBinAutoAllocateBtn);
		System.out.println("Bin Pick Btn Value Actual                  :  " + actBinPickBtn +           " Value Expected : " + expBinPickBtn);
		System.out.println("Bin Cancel Btn Value Actual                :  " + actBinCancelBtn +         " Value Expected : " + expBinCancelBtn);
		System.out.println("Bin Ok Button                              :  " + actBinOkBtn +             " Value Expected : " + expBinOkBtn);
		
		/*System.out.println("First Row Group Name Value Actual          :  " + actBinGroupNameR1 +       " Value Expected : " + expBinGroupNameR1);
		
		System.out.println("Second Row Bin Name Value Actual           :  " + actBinNameR2 +            " Value Expected : " + expBinNameR2);
		System.out.println("Second Row Stock Value Actual              :  " + actBinStockR2 +           " Value Expected : " + expBinStockR2);
		System.out.println("Second Row Capacity Value Actual       	   :  " + actBinCapacityR2 +        " Value Expected : " + expBinCapacityR2);
		System.out.println("Second Row Load Value Actual               :  " + actBinLoadR2 +            " Value Expected : " + expBinLoadR2);
		System.out.println("Second Row Free Space Value Actual         :  " + actBinFreeSpaceR2 +       " Value Expected : " + expBinFreeSpaceR2);
		System.out.println("Second Row Free Qty Value Actual      	   :  " + actBinFreeQtyR2 +         " Value Expected : " + expBinFreeQtyR2);
		System.out.println("Second Row To Be Allocated Value Actual	   :  " + actBinToBeAllocatedR2 +   " Value Expected : " + expBinToBeAllocatedR2);
			
		System.out.println("Third Row Bin Name Value Actual        		:  " + actBinNameR3 +           " Value Expected : " + expBinNameR3);
		System.out.println("Third Row Stock Value Actual            	:  " + actBinStockR3 +          " Value Expected : " + expBinStockR3);
		System.out.println("Third Row Capacity Value Actual       	    :  " + actBinCapacityR3 +       " Value Expected : " + expBinCapacityR3);
		System.out.println("Third Row Load Value Actual            		:  " + actBinLoadR3 +           " Value Expected : " + expBinLoadR3);
		System.out.println("Third Row Free Space Value Actual      		:  " + actBinFreeSpaceR3 +      " Value Expected : " + expBinFreeSpaceR3);
		System.out.println("Third Row Free Qty Value Actual     		:  " + actBinFreeQtyR3 +        " Value Expected : " + expBinFreeQtyR3);
		System.out.println("Third Row To Be Allocated Value Actual 		:  " + actBinToBeAllocatedR3 +  " Value Expected : " + expBinToBeAllocatedR3);*/
		
		System.out.println("Bin Total Qty Value Actual                  :  " + actBinTotalQty +         " Value Expected : " + expBinTotalQty);
		System.out.println("Bin Sum of To Be Allocated Qty Value Actual :  " + actBinSum       +        " Value Expected : " + expBinSum);
			
		System.out.println("Bin Base Uom Value Actual            	    :  " + actBinBaseUom +          " Value Expected : " + expBinBaseUom);
		System.out.println("Bin Balance Txt Value Actual          		:  " + actBinBalanceQty +       " Value Expected : " + expBinBalanceQty);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
		binOkBtn.click();
		
		String actBinName      = excelReader.getCellData(xlSheetName, 104, 7);
		String expBinName      = select2ndRow_7thColumn.getText();
		
		excelReader.setCellData(xlfile, xlSheetName, 104, 8, actBinName);
		
		System.out.println("Bin Column in Voucher Value Actual          : " + actBinName +              " Value Exepected  : " + expBinName);
		
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_7thColumn));
				
		if(/*actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn && actBinAlternateCategory==expBinAlternateCategory 
				&& actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn
				
				&& actBinGroupNameR1.equalsIgnoreCase(expBinGroupNameR1)
				
				&& actBinNameR2.equalsIgnoreCase(expBinNameR2) && actBinStockR2.equalsIgnoreCase(expBinStockR2) 
				&& actBinCapacityR2.equalsIgnoreCase(expBinCapacityR2) && actBinLoadR2.equalsIgnoreCase(expBinLoadR2)
				&& actBinFreeSpaceR2.equalsIgnoreCase(expBinFreeSpaceR2) && actBinFreeQtyR2.equalsIgnoreCase(expBinFreeQtyR2)
				&& actBinToBeAllocatedR2.equalsIgnoreCase(expBinToBeAllocatedR2)
				
				&& actBinNameR3.equalsIgnoreCase(expBinNameR3) && actBinStockR3.equalsIgnoreCase(expBinStockR3) 
				&& actBinCapacityR3.equalsIgnoreCase(expBinCapacityR3) && actBinLoadR3.equalsIgnoreCase(expBinLoadR3)
				&& actBinFreeSpaceR3.equalsIgnoreCase(expBinFreeSpaceR3) && actBinFreeQtyR3.equalsIgnoreCase(expBinFreeQtyR3)
				&& actBinToBeAllocatedR3.equalsIgnoreCase(expBinToBeAllocatedR3)*/
				
				actMethod==true && actbinInwardGridList.equalsIgnoreCase(expbinInwardGridList)
				
				&& actBinTotalQty.equalsIgnoreCase(expBinTotalQty) && actBinBaseUom.equalsIgnoreCase(expBinBaseUom) 
				&& actBinBalanceQty.equalsIgnoreCase(expBinBalanceQty)
				
				&& actBinSum.equalsIgnoreCase(expBinSum)
				
				&& select2ndRow_7thColumn.getText().equalsIgnoreCase(actBinName))
			
		{
			System.out.println("Selected Bin And Ok Btn Not Enabled");
			excelReader.setCellData(xlfile, xlSheetName, 98, 9, resPass);
			return true;
			
		}
		else
		{
			System.out.println("Not Selected Bin And Ok Btn Not Enabled");
			excelReader.setCellData(xlfile, xlSheetName, 98, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
    {
		String exception =e.getMessage().substring(0, 50);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 98, 10, e.getMessage());
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
   	 	return false;
    }	
  }
	
	
	
	
  public boolean checkOpeningStocksAddingDataInThirdRowForBinCheking() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount=itemListCount.size();
		
		System.err.println(itemcount);
			
		for(int i=0 ; i < itemcount ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 105, 6)))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.click();
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.click();
		enter_Quantity.clear();
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 106, 6));
		enter_Quantity.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 107, 6));
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchTxt));
		
		boolean actBinSearchTxt             = binSearchTxt.isDisplayed();
		boolean actBinSearchBtn             = binSearchBtn.isDisplayed();
		//boolean actBinAlternateCategory     = binAlternateCategoryCheckBtn.isDisplayed();
		boolean actBinAutoAllocateBtn       = binAutoAllocateBtn.isDisplayed();
		boolean actBinPickBtn               = binPickBtn.isDisplayed();
		boolean actBinCancelBtn             = binCancelBtn.isDisplayed();
		boolean actBinOkBtn                 = binOkBtn.isEnabled();
		
		boolean expBinSearchTxt             = true;
		boolean expBinSearchBtn             = true;
		boolean expBinAlternateCategory     = true;
		boolean expBinAutoAllocateBtn       = true;
		boolean expBinPickBtn               = true;
		boolean expBinCancelBtn             = true;
		boolean expBinOkBtn                 = true;
		
		
      /*  String actBinGroupNameR1            = binselect1stRow_2ndColumn.getText();
		
		String actBinNameR2                 = binselect2ndRow_2ndColumn.getText();
		String actBinStockR2                = binselect2ndRow_3rdColumn.getText();
		String actBinCapacityR2             = binselect2ndRow_4thColumn.getText();
		String actBinLoadR2                 = binselect2ndRow_5thColumn.getText();
		String actBinFreeSpaceR2            = binselect2ndRow_6thColumn.getText();
		String actBinFreeQtyR2              = binselect2ndRow_7thColumn.getText();
		String actBinToBeAllocatedR2        = binselect2ndRow_8thColumn.getText();
			
		
		String actBinNameR3                 = binselect3rdRow_2ndColumn.getText();
		String actBinStockR3                = binselect3rdRow_3rdColumn.getText();
		String actBinCapacityR3             = binselect3rdRow_4thColumn.getText();
		String actBinLoadR3                 = binselect3rdRow_5thColumn.getText();
		String actBinFreeSpaceR3            = binselect3rdRow_6thColumn.getText();
		String actBinFreeQtyR3              = binselect3rdRow_7thColumn.getText();
		String actBinToBeAllocatedR3        = binselect3rdRow_8thColumn.getText();*/
		
		String actBinTotalQty               = binTotalQty.getAttribute("value");
		String actBinBaseUom                = binBaseUOM.getText();
		String actBinBalanceQty             = binBalanceTxt.getAttribute("value");
        String actBinSum                    = binSumInward.getText();
		
		
		/*String expBinGroupNameR1            = "BG1";
		
		String expBinNameR2                 = "Bin4";
		String expBinStockR2                = "0.00";
		String expBinCapacityR2             = "90.00";
		String expBinLoadR2                 = "12.00";
		String expBinFreeSpaceR2            = "78.00";
		String expBinFreeQtyR2              = "78.00";
		String expBinToBeAllocatedR2        = "0.00";
		
		String expBinNameR3                 = "Bin5";
		String expBinStockR3                = "0.00";
		String expBinCapacityR3             = "98.00";
		String expBinLoadR3                 = "0.00";
		String expBinFreeSpaceR3            = "98.00";
		String expBinFreeQtyR3              = "98.00";
		String expBinToBeAllocatedR3        = "0.00";*/

		String expBinTotalQty               = excelReader.getCellData(xlSheetName, 107, 7);
		String expBinBaseUom                = excelReader.getCellData(xlSheetName, 108, 7);
		String expBinBalanceQty             = excelReader.getCellData(xlSheetName, 109, 7);
		String expBinSum                    = excelReader.getCellData(xlSheetName, 110, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 107, 8, actBinTotalQty);
		excelReader.setCellData(xlfile, xlSheetName, 108, 8, actBinBaseUom);
		excelReader.setCellData(xlfile, xlSheetName, 109, 8, actBinBalanceQty);
		excelReader.setCellData(xlfile, xlSheetName, 110, 8, actBinSum);
		
	   /* System.out.println("First Row Group Name Value Actual          :  " + actBinGroupNameR1 +"          Value Expected : " + expBinGroupNameR1);
		
		System.out.println("Second Row Bin Name Value Actual           :  " + actBinNameR2 +"   			Value Expected :  " + expBinNameR2);
		System.out.println("Second Row Stock Value Actual              :  " + actBinStockR2 +"   			Value Expected : " + expBinStockR2);
		System.out.println("Second Row Capacity Value Actual           :  " + actBinCapacityR2 +"   		Value Expected : " + expBinCapacityR2);
		System.out.println("Second Row Load Value Actual               :  " + actBinLoadR2 +"   			Value Expected : " + expBinLoadR2);
		System.out.println("Second Row Free Space Value Actual         :  " + actBinFreeSpaceR2 +"   		Value Expected : " + expBinFreeSpaceR2);
		System.out.println("Second Row Free Qty Value Actual           :  " + actBinFreeQtyR2 +"   			Value Expected : " + expBinFreeQtyR2);
		System.out.println("Second Row To Be Allocated Value Actual    :  " + actBinToBeAllocatedR2 +"   	Value Expected : " + expBinToBeAllocatedR2);
		
		
		System.out.println("Third Row Bin Name Value Actual            :  " + actBinNameR3 +"   		    Value Expected : " + expBinNameR3);
		System.out.println("Third Row Stock Value Actual           	   :  " + actBinStockR3 +"   			Value Expected : " + expBinStockR3);
		System.out.println("Third Row Capacity Value Actual            :  " + actBinCapacityR3 +"   		Value Expected : " + expBinCapacityR3);
		System.out.println("Third Row Load Value Actual                :  " + actBinLoadR3 +"   			Value Expected : " + expBinLoadR3);
		System.out.println("Third Row Free Space Value Actual          :  " + actBinFreeSpaceR3 +"  		Value Expected :  " + expBinFreeSpaceR3);
		System.out.println("Third Row Free Qty Value Actual            :  " + actBinFreeQtyR3 +"   			Value Expected : " + expBinFreeQtyR3);
		System.out.println("Third Row To Be Allocated Value Actual     :  " + actBinToBeAllocatedR3 +"  	Value Expected :  " + expBinToBeAllocatedR3);*/
		
		

		
		
		int binInwardGridListCount = binInwardGridList.size();
		
		ArrayList<String> binInwardGridListArray = new ArrayList<String>();
		
		for(int i=0;i<binInwardGridListCount;i++)
		{
			String data = binInwardGridList.get(i).getText();
			binInwardGridListArray.add(data);
		}
		
		
		String actbinInwardGridList=binInwardGridListArray.toString();
		
		String expbinInwardGridList=excelReader.getCellData(xlSheetName, 106, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 106, 8, actbinInwardGridList);
		
		System.out.println("ActbinInwardGridList : " + actbinInwardGridList);
		System.out.println("ExpbinInwardGridList : " + expbinInwardGridList);
		
		
		
		boolean actMethod = actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn 
				            /*&& actBinAlternateCategory==expBinAlternateCategory*/ 
				            && actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn;
		
		String actResult = Boolean.toString(actMethod);
		
		excelReader.setCellData(xlfile, xlSheetName, 105, 8, actResult.toUpperCase());

	
		System.out.println("Bin Total Qty Value Actual                 :  " +actBinTotalQty +"  			Value Expected : "+expBinTotalQty);
		System.out.println("Bin Base Uom Value Actual                  :  " +actBinBaseUom +"  				Value Expected : "+expBinBaseUom);
		System.out.println("Bin Balance Txt Value Actual               :  " +actBinBalanceQty +"  		    Value Expected : "+expBinBalanceQty);
		System.out.println("Bin Total Sum Value Actual                 :  " + actBinSum +"                  Value Expected : " + expBinSum);
		
		System.out.println("Bin Search Value Actual                    :  " + actBinSearchTxt +"            Value Expected : " + expBinSearchTxt);
		System.out.println("Bin Search Btn Value Actual                :  " + actBinSearchBtn +"            Value Expected : " + expBinSearchBtn);
		//System.out.println("Bin Alternate Category Value Actual        :  " + actBinAlternateCategory +"    Value Expected : " + expBinAlternateCategory);
		System.out.println("Bin Auto Allocate Btn Value Actual         :  " + actBinAutoAllocateBtn +"      Value Expected : " + expBinAutoAllocateBtn);
		System.out.println("Bin Pick Btn Value Actual                  :  " + actBinPickBtn +"              Value Expected : " + expBinPickBtn);
		System.out.println("Bin Cancel Btn Value Actual                :  " + actBinCancelBtn +"            Value Expected : " + expBinCancelBtn);
		System.out.println("Bin Ok Btn Value Actual                    :  " + actBinOkBtn +"                Value Expected : " + expBinOkBtn);
		
					
		if(/*actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn && actBinAlternateCategory==expBinAlternateCategory 
				&& actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn
				
				&& actBinGroupNameR1.equalsIgnoreCase(expBinGroupNameR1)
				
				&& actBinNameR2.equalsIgnoreCase(expBinNameR2) && actBinStockR2.equalsIgnoreCase(expBinStockR2) 
				&& actBinCapacityR2.equalsIgnoreCase(expBinCapacityR2) && actBinLoadR2.equalsIgnoreCase(expBinLoadR2)
				&& actBinFreeSpaceR2.equalsIgnoreCase(expBinFreeSpaceR2) && actBinFreeQtyR2.equalsIgnoreCase(expBinFreeQtyR2)
				&& actBinToBeAllocatedR2.equalsIgnoreCase(expBinToBeAllocatedR2)
				
				&& actBinNameR3.equalsIgnoreCase(expBinNameR3) && actBinStockR3.equalsIgnoreCase(expBinStockR3) 
				&& actBinCapacityR3.equalsIgnoreCase(expBinCapacityR3) && actBinLoadR3.equalsIgnoreCase(expBinLoadR3)
				&& actBinFreeSpaceR3.equalsIgnoreCase(expBinFreeSpaceR3) && actBinFreeQtyR3.equalsIgnoreCase(expBinFreeQtyR3)
				&& actBinToBeAllocatedR3.equalsIgnoreCase(expBinToBeAllocatedR3)*/
				
				actMethod==true && actbinInwardGridList.equalsIgnoreCase(expbinInwardGridList)
				
				&& actBinTotalQty.equalsIgnoreCase(expBinTotalQty) && actBinBaseUom.equalsIgnoreCase(expBinBaseUom) 
				&& actBinBalanceQty.equalsIgnoreCase(expBinBalanceQty)
				
				&& actBinSum.equalsIgnoreCase(expBinSum))
		{
			
			System.out.println("Test Pass : Bin Popup options Are As Expected");
			excelReader.setCellData(xlfile, xlSheetName, 105, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Bin Popup options Are NOT As Expected");
			excelReader.setCellData(xlfile, xlSheetName, 105, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
    {
		String exception =e.getMessage().substring(0, 50);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 105, 10, e.getMessage());
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
   	 	return false;
    }	
  }
	
  
  
	
  public boolean checkOpeningStocksAddingBinInThridRowAutoAllocateInBin() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
		
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
	try
	{	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
		binAutoAllocateBtn.click();
			
		boolean actBinSearchTxt         = binSearchTxt.isDisplayed();
		boolean actBinSearchBtn         = binSearchBtn.isDisplayed();
		//boolean actBinAlternateCategory = binAlternateCategoryCheckBtn.isDisplayed();
		boolean actBinAutoAllocateBtn   = binAutoAllocateBtn.isDisplayed();
		boolean actBinPickBtn           = binPickBtn.isDisplayed();
		boolean actBinCancelBtn         = binCancelBtn.isDisplayed();
		boolean actBinOkBtn             = binOkBtn.isEnabled();
				
		boolean expBinSearchTxt         = true;
		boolean expBinSearchBtn         = true;
		boolean expBinAlternateCategory = true;
		boolean expBinAutoAllocateBtn   = true;
		boolean expBinPickBtn           = true;
		boolean expBinCancelBtn         = true;
		boolean expBinOkBtn             = true;
		
		boolean actMethod = actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn 
	            /*&& actBinAlternateCategory==expBinAlternateCategory*/ 
	            && actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn;

		String actResult = Boolean.toString(actMethod);

		excelReader.setCellData(xlfile, xlSheetName, 111, 8, actResult.toUpperCase());
			
		System.out.println("Bin Search Value Actual                :  " + actBinSearchTxt +         " Value Expected : " + expBinSearchTxt);
		System.out.println("Bin Search Btn Value Actual            :  " + actBinSearchBtn +         " Value Expected : " + expBinSearchBtn);
		//System.out.println("Bin Alternate Category Value Actual    :  " + actBinAlternateCategory + " Value Expected : " + expBinAlternateCategory);
		System.out.println("Bin Auto Allocate Btn Value Actual     :  " + actBinAutoAllocateBtn +   " Value Expected : " + expBinAutoAllocateBtn);
		System.out.println("Bin Pick Btn Value Actual              :  " + actBinPickBtn +           " Value Expected : " + expBinPickBtn);
		System.out.println("Bin Cancel Btn Value Actual            :  " + actBinCancelBtn +         " Value Expected : " + expBinCancelBtn);
		System.out.println("Bin Ok Btn Value Actual                :  " + actBinOkBtn +             " Value Expected : " + expBinOkBtn);
		
		int binInwardGridListCount = binInwardGridList.size();
		
		ArrayList<String> binInwardGridListArray = new ArrayList<String>();
		
		for(int i=0;i<binInwardGridListCount;i++)
		{
			String data = binInwardGridList.get(i).getText();
			binInwardGridListArray.add(data);
		}
		
		
		String actbinInwardGridList=binInwardGridListArray.toString();
		
		String expbinInwardGridList=excelReader.getCellData(xlSheetName, 112, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 112, 8, actbinInwardGridList);
		
		System.out.println("ActbinInwardGridList : " + actbinInwardGridList);
		System.out.println("ExpbinInwardGridList : " + expbinInwardGridList);
		
       /* String actBinGroupNameR1        = binselect1stRow_2ndColumn.getText();
		
		String actBinNameR2             = binselect2ndRow_2ndColumn.getText();
		String actBinStockR2            = binselect2ndRow_3rdColumn.getText();
		String actBinCapacityR2         = binselect2ndRow_4thColumn.getText();
		String actBinLoadR2             = binselect2ndRow_5thColumn.getText();
		String actBinFreeSpaceR2        = binselect2ndRow_6thColumn.getText();
		String actBinFreeQtyR2          = binselect2ndRow_7thColumn.getText();
		String actBinToBeAllocatedR2    = binselect2ndRow_8thColumn.getText();
			
		String actBinNameR3             = binselect3rdRow_2ndColumn.getText();
		String actBinStockR3            = binselect3rdRow_3rdColumn.getText();
		String actBinCapacityR3         = binselect3rdRow_4thColumn.getText();
		String actBinLoadR3             = binselect3rdRow_5thColumn.getText();
		String actBinFreeSpaceR3        = binselect3rdRow_6thColumn.getText();
		String actBinFreeQtyR3          = binselect3rdRow_7thColumn.getText();
		String actBinToBeAllocatedR3    = binselect3rdRow_8thColumn.getText();*/
		
		String actBinTotalQty           = binTotalQty.getAttribute("value");
		String actBinBaseUom            = binBaseUOM.getText();
		String actBinBalanceQty         = binBalanceTxt.getAttribute("value");
		String actBinSum                = binSumInward.getText();
		
		
		
		/*String expBinGroupNameR1        = "BG1";
		
		String expBinNameR2             = "Bin4";
		String expBinStockR2            = "0.00";
		String expBinCapacityR2         = "90.00";
		String expBinLoadR2             = "12.00";
		String expBinFreeSpaceR2        = "78.00";
		String expBinFreeQtyR2          = "78.00";
		String expBinToBeAllocatedR2    = "12.00";
	 	
		String expBinNameR3             = "Bin5";
		String expBinStockR3            = "0.00";
		String expBinCapacityR3         = "98.00";
		String expBinLoadR3             = "0.00";
		String expBinFreeSpaceR3        = "98.00";
		String expBinFreeQtyR3          = "98.00";
		String expBinToBeAllocatedR3    = "0.00";*/
		
		String expBinTotalQty           = excelReader.getCellData(xlSheetName, 113, 7);
		String expBinBaseUom            = excelReader.getCellData(xlSheetName, 114, 7);
		String expBinBalanceQty         = excelReader.getCellData(xlSheetName, 115, 7);
		String expBinSum                = excelReader.getCellData(xlSheetName, 116, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 113, 8, actBinTotalQty);
		excelReader.setCellData(xlfile, xlSheetName, 114, 8, actBinBaseUom);
		excelReader.setCellData(xlfile, xlSheetName, 115, 8, actBinBalanceQty);
		excelReader.setCellData(xlfile, xlSheetName, 116, 8, actBinSum);
		
		
		/*System.out.println("First Row Group Name Value Actual          :  " + actBinGroupNameR1 +     "  Value Expected : " + expBinGroupNameR1);
		
		System.out.println("Second Row Bin Name Value Actual           :  " + actBinNameR2 +          "  Value Expected : " + expBinNameR2);
		System.out.println("Second Row Stock Value Actual              :  " + actBinStockR2 +         "  Value Expected : " + expBinStockR2);
		System.out.println("Second Row Capacity Value Actual           :  " + actBinCapacityR2 +      "  Value Expected : " + expBinCapacityR2);
		System.out.println("Second Row Load Value Actual               :  " + actBinLoadR2 +          "  Value Expected : " + expBinLoadR2);
		System.out.println("Second Row Free Space Value Actual         :  " + actBinFreeSpaceR2 +     "  Value Expected : " + expBinFreeSpaceR2);
		System.out.println("Second Row Free Qty Value Actual           :  " + actBinFreeQtyR2 +       "  Value Expected : " + expBinFreeQtyR2);
		System.out.println("Second Row To Be Allocated Value Actual    :  " + actBinToBeAllocatedR2 + "  Value Expected : " + expBinToBeAllocatedR2);
				
		System.out.println("Third Row Bin Name Value Actual            :  " + actBinNameR3 +          "  Value Expected : " + expBinNameR3);
		System.out.println("Third Row Stock Value Actual               :  " + actBinStockR3 +         "  Value Expected : " + expBinStockR3);
		System.out.println("Third Row Capacity Value Actual            :  " + actBinCapacityR3 +      "  Value Expected : " + expBinCapacityR3);
		System.out.println("Third Row Load Value Actual                :  " + actBinLoadR3 +          "  Value Expected : " + expBinLoadR3);
		System.out.println("Third Row Free Space Value Actual          :  " + actBinFreeSpaceR3 +     "  Value Expected : " + expBinFreeSpaceR3);
		System.out.println("Third Row Free Qty Value Actual            :  " + actBinFreeQtyR3 +       "  Value Expected : " + expBinFreeQtyR3);
		System.out.println("Third Row To Be Allocated Value Actual     :  " + actBinToBeAllocatedR3 + "  Value Expected : " + expBinToBeAllocatedR3);*/
		
		System.out.println("Bin Total Qty Value Actual                 :  " + actBinTotalQty +         "  Value Expected : " + expBinTotalQty);
		System.out.println("Bin Base Uom  Value Actual                 :  " + actBinBaseUom +          "  Value Expected : " + expBinBaseUom);
		System.out.println("Bin Balance Value Actual                   :  " + actBinBalanceQty +       "  Value Expected : " + expBinBalanceQty);
		System.out.println("Bin Total Sum Value Actual                 :  " + actBinSum +             "  Value Expected :  " + expBinSum);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
		binOkBtn.click();
		
		String actBinNameDisplayInVoucherBinColumn = select3rdRow_7thColumn.getText();
		String expBinNameDisplayInVoucherBinColumn = excelReader.getCellData(xlSheetName, 117, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 117, 8, actBinNameDisplayInVoucherBinColumn);
		
		System.out.println("Bin Column in Voucher Value Actual : " + actBinNameDisplayInVoucherBinColumn +  " Value Expected : " + expBinNameDisplayInVoucherBinColumn);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_7thColumn));
				
		if(/*actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn && actBinAlternateCategory==expBinAlternateCategory 
				&& actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn
				&& actBinOkBtn==expBinOkBtn
				
				&& actBinGroupNameR1.equalsIgnoreCase(expBinGroupNameR1)
				
				&& actBinNameR2.equalsIgnoreCase(expBinNameR2) && actBinStockR2.equalsIgnoreCase(expBinStockR2) 
				&& actBinCapacityR2.equalsIgnoreCase(expBinCapacityR2) && actBinLoadR2.equalsIgnoreCase(expBinLoadR2)
				&& actBinFreeSpaceR2.equalsIgnoreCase(expBinFreeSpaceR2) && actBinFreeQtyR2.equalsIgnoreCase(expBinFreeQtyR2)
				&& actBinToBeAllocatedR2.equalsIgnoreCase(expBinToBeAllocatedR2)
				
				&& actBinNameR3.equalsIgnoreCase(expBinNameR3) && actBinStockR3.equalsIgnoreCase(expBinStockR3) 
				&& actBinCapacityR3.equalsIgnoreCase(expBinCapacityR3) && actBinLoadR3.equalsIgnoreCase(expBinLoadR3)
				&& actBinFreeSpaceR3.equalsIgnoreCase(expBinFreeSpaceR3) && actBinFreeQtyR3.equalsIgnoreCase(expBinFreeQtyR3)
				&& actBinToBeAllocatedR3.equalsIgnoreCase(expBinToBeAllocatedR3)*/
				
				actMethod==true && actbinInwardGridList.equalsIgnoreCase(expbinInwardGridList)
				
				&& actBinTotalQty.equalsIgnoreCase(expBinTotalQty) && actBinBaseUom.equalsIgnoreCase(expBinBaseUom) 
				&& actBinBalanceQty.equalsIgnoreCase(expBinBalanceQty)
				
				&& actBinSum.equalsIgnoreCase(expBinSum)
				
				&& actBinNameDisplayInVoucherBinColumn.equalsIgnoreCase(expBinNameDisplayInVoucherBinColumn))
		{
			System.out.println("Selected Bin And Ok Btn Not Enabled");
			excelReader.setCellData(xlfile, xlSheetName, 111, 9, resPass);
			return true;
		
		}
		else
		{
			System.out.println("Not Selected Bin And Ok Btn Not Enabled");
			excelReader.setCellData(xlfile, xlSheetName, 111, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
    {
		String exception =e.getMessage().substring(0, 50);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 111, 10, e.getMessage());
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
   	 	return false;
    }	
  }
	
	
	
	
	
  public boolean checkOpeningStocksNewAddingDataInFourthRowForBinCheking() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
		
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount   =  itemListCount.size();
		
		System.err.println(itemcount);
			
		for(int i=0 ; i < itemcount ;i++)
		{
			String data = itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 118, 6)))
			{
				itemListCount.get(i).click();		
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.click();
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.click();
		enter_Quantity.clear();
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 119, 6));
		enter_Quantity.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 120, 6));
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchTxt));
		
		boolean actBinSearchTxt                = binSearchTxt.isDisplayed();
		boolean actBinSearchBtn                = binSearchBtn.isDisplayed();
		//boolean actBinAlternateCategory        = binAlternateCategoryCheckBtn.isDisplayed();
		boolean actBinAutoAllocateBtn          = binAutoAllocateBtn.isDisplayed();
		boolean actBinPickBtn                  = binPickBtn.isDisplayed();
		boolean actBinCancelBtn                = binCancelBtn.isDisplayed();
		boolean actBinOkBtn                    = binOkBtn.isEnabled();
				
		boolean expBinSearchTxt                = true;
		boolean expBinSearchBtn                = true;
		boolean expBinAlternateCategory        = true;
		boolean expBinAutoAllocateBtn          = true;
		boolean expBinPickBtn                  = true;
		boolean expBinCancelBtn                = true;
		boolean expBinOkBtn                    = true;
			
		System.out.println("Bin Search Value Actual                :  " + actBinSearchTxt +         " Value Expected : " + expBinSearchTxt);
		System.out.println("Bin Search Btn Value Actual            :  " + actBinSearchBtn +         " Value Expected : " + expBinSearchBtn);
		//System.out.println("Bin Alternate Category Value Actual    :  " + actBinAlternateCategory + " Value Expected : " + expBinAlternateCategory);
		System.out.println("Bin Auto Allocate Btn Value Actual     :  " + actBinAutoAllocateBtn +   " Value Expected : " + expBinAutoAllocateBtn);
		System.out.println("Bin Pick Btn Value Actual              :  " + actBinPickBtn +           " Value Expected : " + expBinPickBtn);
		System.out.println("Bin Cancel Btn Value Actual            :  " + actBinCancelBtn +         " Value Expected : " + expBinCancelBtn);
		System.out.println("Bin Ok Btn Value Actual                :  " + actBinOkBtn +             " Value Expected : " + expBinOkBtn);
		

       /* String actBinGroupNameR1      = binselect1stRow_2ndColumn.getText();
		
		String actBinNameR2           = binselect2ndRow_2ndColumn.getText();
		String actBinStockR2          = binselect2ndRow_3rdColumn.getText();
		String actBinCapacityR2       = binselect2ndRow_4thColumn.getText();
		String actBinLoadR2           = binselect2ndRow_5thColumn.getText();
		String actBinFreeSpaceR2      = binselect2ndRow_6thColumn.getText();
		String actBinFreeQtyR2        = binselect2ndRow_7thColumn.getText();
		String actBinToBeAllocatedR2  = binselect2ndRow_8thColumn.getText();
			
		String actBinNameR3           = binselect3rdRow_2ndColumn.getText();
		String actBinStockR3          = binselect3rdRow_3rdColumn.getText();
		String actBinCapacityR3       = binselect3rdRow_4thColumn.getText();
		String actBinLoadR3           = binselect3rdRow_5thColumn.getText();
		String actBinFreeSpaceR3      = binselect3rdRow_6thColumn.getText();
		String actBinFreeQtyR3        = binselect3rdRow_7thColumn.getText();
		String actBinToBeAllocatedR3  = binselect3rdRow_8thColumn.getText();*/
		
		 int binInwardGridListCount = binInwardGridList.size();
         
         ArrayList<String> binInwardGridListArray = new ArrayList<String>();
         
         for(int i=0;i<binInwardGridListCount;i++)
         {
                 String data = binInwardGridList.get(i).getText();
                 binInwardGridListArray.add(data);
         }
         
         
         String actbinInwardGridList=binInwardGridListArray.toString();
         
         String expbinInwardGridList=excelReader.getCellData(xlSheetName, 119, 7);
         
         excelReader.setCellData(xlfile, xlSheetName, 119, 8, actbinInwardGridList);
         
         System.out.println("ActbinInwardGridList : " + actbinInwardGridList);
         System.out.println("ExpbinInwardGridList : " + expbinInwardGridList);
         
         
         
         boolean actMethod = actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn 
                                     /*&& actBinAlternateCategory==expBinAlternateCategory*/ 
                                     && actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn;
         
         String actResult = Boolean.toString(actMethod);
         
         excelReader.setCellData(xlfile, xlSheetName, 118, 8, actResult.toUpperCase());

		
		String actBinTotalQty         = binTotalQty.getAttribute("value");
		String actBinBaseUom          = binBaseUOM.getText();
		String actBinBalanceQty       = binBalanceTxt.getAttribute("value");
		String actBinSum              = binSumInward.getText();
			

		/*String expBinGroupNameR1      = "BG1";
		
		String expBinNameR2           = "Bin4";
		String expBinStockR2          = "0.00";
		String expBinCapacityR2       = "90.00";
		String expBinLoadR2           = "24.00";
		String expBinFreeSpaceR2      = "66.00";
		String expBinFreeQtyR2        = "66.00";
		String expBinToBeAllocatedR2  = "0.00";
		
		String expBinNameR3           = "Bin5";
		String expBinStockR3          = "0.00";
		String expBinCapacityR3       = "98.00";
		String expBinLoadR3           = "0.00";
		String expBinFreeSpaceR3      = "98.00";
		String expBinFreeQtyR3        = "98.00";
		String expBinToBeAllocatedR3  = "0.00";*/
	
		String expBinTotalQty         = excelReader.getCellData(xlSheetName, 120, 7);
		String expBinBaseUom          = excelReader.getCellData(xlSheetName, 121, 7);
		String expBinBalanceQty       = excelReader.getCellData(xlSheetName, 122, 7);
		String expBinSum              = excelReader.getCellData(xlSheetName, 123, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 120, 8, actBinTotalQty);
        excelReader.setCellData(xlfile, xlSheetName, 121, 8, actBinBaseUom);
        excelReader.setCellData(xlfile, xlSheetName, 122, 8, actBinBalanceQty);
        excelReader.setCellData(xlfile, xlSheetName, 123, 8, actBinSum);

				
		/*System.out.println("First Row Group Name        :  " + actBinGroupNameR1 +        "  Value Expected : "  + expBinGroupNameR1);
		
		System.out.println("Second Row Bin Name         :  " + actBinNameR2 +             "  Value Expected : "  + expBinNameR2);
		System.out.println("Second Row Stock            :  " + actBinStockR2 +            "  Value Expected : "  + expBinStockR2);
		System.out.println("Second Row Capacity         :  " + actBinCapacityR2 +         "  Value Expected : "  + expBinCapacityR2);
		System.out.println("Second Row Load             :  " + actBinLoadR2 +             "  Value Expected : "  + expBinLoadR2);
		System.out.println("Second Row Free Space       :  " + actBinFreeSpaceR2 +        "  Value Expected : "  + expBinFreeSpaceR2);
		System.out.println("Second Row Free Qty         :  " + actBinFreeQtyR2 +          "  Value Expected : "  + expBinFreeQtyR2);
		System.out.println("Second Row To Be Allocated  :  " + actBinToBeAllocatedR2 +    "  Value Expected : "  + expBinToBeAllocatedR2);
		
		System.out.println("Third Row Bin Name          :  " + actBinNameR3 +             "  Value Expected : "  + expBinNameR3);
		System.out.println("Third Row Stock             :  " + actBinStockR3 +            "  Value Expected : "  + expBinStockR3);
		System.out.println("Third Row Capacity          :  " + actBinCapacityR3 +         "  Value Expected : "  + expBinCapacityR3);
		System.out.println("Third Row Load              :  " + actBinLoadR3 +             "  Value Expected : "  + expBinLoadR3);
		System.out.println("Third Row Free Space        :  " + actBinFreeSpaceR3 +        "  Value Expected : "  + expBinFreeSpaceR3);
		System.out.println("Third Row Free Qty          :  " + actBinFreeQtyR3 +          "  Value Expected : "  + expBinFreeQtyR3);
		System.out.println("Third Row To Be Allocated   :  " + actBinToBeAllocatedR3 +    "  Value Expected : "  + expBinToBeAllocatedR3);*/
		
		System.out.println("Bin Total Qty               :  " +actBinTotalQty +            "  Value Expected : "  + expBinTotalQty);
		System.out.println("Bin Base Uom                :  " +actBinBaseUom +             "  Value Expected : "  + expBinBaseUom);
		System.out.println("Bin Balance Txt             :  " +actBinBalanceQty +          "  Value Expected : "  + expBinBalanceQty);
		
		System.out.println("Bin Total To Be Adjusted    :  " + actBinSum +"   " + expBinSum);
				
		if(/*actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn && actBinAlternateCategory==expBinAlternateCategory 
				&& actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn
				&& actBinOkBtn==expBinOkBtn
		
				&& actBinGroupNameR1.equalsIgnoreCase(expBinGroupNameR1)
				
				&& actBinNameR2.equalsIgnoreCase(expBinNameR2) && actBinStockR2.equalsIgnoreCase(expBinStockR2) 
				&& actBinCapacityR2.equalsIgnoreCase(expBinCapacityR2) && actBinLoadR2.equalsIgnoreCase(expBinLoadR2)
				&& actBinFreeSpaceR2.equalsIgnoreCase(expBinFreeSpaceR2) && actBinFreeQtyR2.equalsIgnoreCase(expBinFreeQtyR2)
				&& actBinToBeAllocatedR2.equalsIgnoreCase(expBinToBeAllocatedR2)
				
				&& actBinNameR3.equalsIgnoreCase(expBinNameR3) && actBinStockR3.equalsIgnoreCase(expBinStockR3) 
				&& actBinCapacityR3.equalsIgnoreCase(expBinCapacityR3) && actBinLoadR3.equalsIgnoreCase(expBinLoadR3)
				&& actBinFreeSpaceR3.equalsIgnoreCase(expBinFreeSpaceR3) && actBinFreeQtyR3.equalsIgnoreCase(expBinFreeQtyR3)
				&& actBinToBeAllocatedR3.equalsIgnoreCase(expBinToBeAllocatedR3)*/
				
				actMethod==true && actbinInwardGridList.equalsIgnoreCase(expbinInwardGridList)
				
				&& actBinTotalQty.equalsIgnoreCase(expBinTotalQty) && actBinBaseUom.equalsIgnoreCase(expBinBaseUom) 
				&& actBinBalanceQty.equalsIgnoreCase(expBinBalanceQty)
				
				&& actBinSum.equalsIgnoreCase(expBinSum))
		{
			
			System.out.println("Test Pass : Bin Popup options Are As Expected");
			excelReader.setCellData(xlfile, xlSheetName, 118, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Bin Popup options Are NOT As Expected");
			excelReader.setCellData(xlfile, xlSheetName, 118, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
    {
		String exception =e.getMessage().substring(0, 50);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 118, 10, e.getMessage());
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		return false;
    }   	 
  }
	
  
	
  @FindBy(xpath="//input[@id='id_transaction_bins_grid_control_heading_ctrl_12']")
  private static WebElement enter_ToBeAllocateTxt;
	
  public boolean checkOpeningStocksNewVoucherByInputBinColumnManuallyInBinScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
		
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binselect2ndRow_8thColumn));
		binselect2ndRow_8thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ToBeAllocateTxt));
		enter_ToBeAllocateTxt.sendKeys(excelReader.getCellData(xlSheetName, 124, 6));
		enter_ToBeAllocateTxt.sendKeys(Keys.TAB);
		
		boolean actBinSearchTxt                = binSearchTxt.isDisplayed();
		boolean actBinSearchBtn                = binSearchBtn.isDisplayed();
		//boolean actBinAlternateCategory        = binAlternateCategoryCheckBtn.isDisplayed();
		boolean actBinAutoAllocateBtn          = binAutoAllocateBtn.isDisplayed();
		boolean actBinPickBtn                  = binPickBtn.isDisplayed();
		boolean actBinCancelBtn                = binCancelBtn.isDisplayed();
		boolean actBinOkBtn                    = binOkBtn.isEnabled();
				
		boolean expBinSearchTxt                = true;
		boolean expBinSearchBtn                = true;
		boolean expBinAlternateCategory        = true;
		boolean expBinAutoAllocateBtn          = true;
		boolean expBinPickBtn                  = true;
		boolean expBinCancelBtn                = true;
		boolean expBinOkBtn                    = true;
			
		System.out.println("Bin Search Value Actual                :  " + actBinSearchTxt +         " Value Expected : " + expBinSearchTxt);
		System.out.println("Bin Search Btn Value Actual            :  " + actBinSearchBtn +         " Value Expected : " + expBinSearchBtn);
		//System.out.println("Bin Alternate Category Value Actual    :  " + actBinAlternateCategory + " Value Expected : " + expBinAlternateCategory);
		System.out.println("Bin Auto Allocate Btn Value Actual     :  " + actBinAutoAllocateBtn +   " Value Expected : " + expBinAutoAllocateBtn);
		System.out.println("Bin Pick Btn Value Actual              :  " + actBinPickBtn +           " Value Expected : " + expBinPickBtn);
		System.out.println("Bin Cancel Btn Value Actual            :  " + actBinCancelBtn +         " Value Expected : " + expBinCancelBtn);
		System.out.println("Bin Ok Btn Value Actual                :  " + actBinOkBtn +             " Value Expected : " + expBinOkBtn);
		
		

        /*String actBinGroupNameR1                = binselect1stRow_2ndColumn.getText();
		
		String actBinNameR2                     = binselect2ndRow_2ndColumn.getText();
		String actBinStockR2                    = binselect2ndRow_3rdColumn.getText();
		String actBinCapacityR2                 = binselect2ndRow_4thColumn.getText();
		String actBinLoadR2                     = binselect2ndRow_5thColumn.getText();
		String actBinFreeSpaceR2                = binselect2ndRow_6thColumn.getText();
		String actBinFreeQtyR2                  = binselect2ndRow_7thColumn.getText();
		String actBinToBeAllocatedR2            = binselect2ndRow_8thColumn.getText();
			
		String actBinNameR3                     = binselect3rdRow_2ndColumn.getText();
		String actBinStockR3                    = binselect3rdRow_3rdColumn.getText();
		String actBinCapacityR3                 = binselect3rdRow_4thColumn.getText();
		String actBinLoadR3                     = binselect3rdRow_5thColumn.getText();
		String actBinFreeSpaceR3                = binselect3rdRow_6thColumn.getText();
		String actBinFreeQtyR3                  = binselect3rdRow_7thColumn.getText();
		String actBinToBeAllocatedR3            = binselect3rdRow_8thColumn.getText();*/
		
		String actBinTotalQty                   = binTotalQty.getAttribute("value");
		String actBinBaseUom                    = binBaseUOM.getText();
		String actBinBalanceQty                 = binBalanceTxt.getAttribute("value");
		String actBinSum                        = binSumInward.getText();
		
		
		
		/*String expBinGroupNameR1                = "BG1";
		
		String expBinNameR2                     = "Bin4";
		String expBinStockR2                    = "0.00";
		String expBinCapacityR2                 = "90.00";
		String expBinLoadR2                     = "24.00";
		String expBinFreeSpaceR2                = "66.00";
		String expBinFreeQtyR2                  = "66.00";
		String expBinToBeAllocatedR2            = "12.00";
		
		String expBinNameR3                     = "Bin5";
		String expBinStockR3                    = "0.00";
		String expBinCapacityR3                 = "98.00";
		String expBinLoadR3                     = "0.00";
		String expBinFreeSpaceR3                = "98.00";
		String expBinFreeQtyR3                  = "98.00";
		String expBinToBeAllocatedR3            = "0.00";*/
		
		 String expBinTotalQty               = excelReader.getCellData(xlSheetName, 126, 7);
         String expBinBaseUom                = excelReader.getCellData(xlSheetName, 127, 7);
         String expBinBalanceQty             = excelReader.getCellData(xlSheetName, 128, 7);
         String expBinSum                    = excelReader.getCellData(xlSheetName, 129, 7);
         
         excelReader.setCellData(xlfile, xlSheetName, 126, 8, actBinTotalQty);
         excelReader.setCellData(xlfile, xlSheetName, 127, 8, actBinBaseUom);
         excelReader.setCellData(xlfile, xlSheetName, 128, 8, actBinBalanceQty);
         excelReader.setCellData(xlfile, xlSheetName, 129, 8, actBinSum);
         
         int binInwardGridListCount = binInwardGridList.size();
         
         ArrayList<String> binInwardGridListArray = new ArrayList<String>();
         
         for(int i=0;i<binInwardGridListCount;i++)
         {
                 String data = binInwardGridList.get(i).getText();
                 binInwardGridListArray.add(data);
         }
         
         
         String actbinInwardGridList=binInwardGridListArray.toString();
         
         String expbinInwardGridList=excelReader.getCellData(xlSheetName, 125, 7);
         
         excelReader.setCellData(xlfile, xlSheetName, 125, 8, actbinInwardGridList);
         
         System.out.println("ActbinInwardGridList : " + actbinInwardGridList);
         System.out.println("ExpbinInwardGridList : " + expbinInwardGridList);
         
         
         
         boolean actMethod = actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn 
                                     /*&& actBinAlternateCategory==expBinAlternateCategory*/ 
                                     && actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn;
         
         String actResult = Boolean.toString(actMethod);
         
         excelReader.setCellData(xlfile, xlSheetName, 124, 8, actResult.toUpperCase());

         

			
       /* System.out.println("First Row Group Name        :  " + actBinGroupNameR1 +        "  Value Expected : "  + expBinGroupNameR1);
		
		System.out.println("Second Row Bin Name         :  " + actBinNameR2 +             "  Value Expected : "  + expBinNameR2);
		System.out.println("Second Row Stock            :  " + actBinStockR2 +            "  Value Expected : "  + expBinStockR2);
		System.out.println("Second Row Capacity         :  " + actBinCapacityR2 +         "  Value Expected : "  + expBinCapacityR2);
		System.out.println("Second Row Load             :  " + actBinLoadR2 +             "  Value Expected : "  + expBinLoadR2);
		System.out.println("Second Row Free Space       :  " + actBinFreeSpaceR2 +        "  Value Expected : "  + expBinFreeSpaceR2);
		System.out.println("Second Row Free Qty         :  " + actBinFreeQtyR2 +          "  Value Expected : "  + expBinFreeQtyR2);
		System.out.println("Second Row To Be Allocated  :  " + actBinToBeAllocatedR2 +    "  Value Expected : "  + expBinToBeAllocatedR2);
		
		System.out.println("Third Row Bin Name          :  " + actBinNameR3 +             "  Value Expected : "  + expBinNameR3);
		System.out.println("Third Row Stock             :  " + actBinStockR3 +            "  Value Expected : "  + expBinStockR3);
		System.out.println("Third Row Capacity          :  " + actBinCapacityR3 +         "  Value Expected : "  + expBinCapacityR3);
		System.out.println("Third Row Load              :  " + actBinLoadR3 +             "  Value Expected : "  + expBinLoadR3);
		System.out.println("Third Row Free Space        :  " + actBinFreeSpaceR3 +        "  Value Expected : "  + expBinFreeSpaceR3);
		System.out.println("Third Row Free Qty          :  " + actBinFreeQtyR3 +          "  Value Expected : "  + expBinFreeQtyR3);
		System.out.println("Third Row To Be Allocated   :  " + actBinToBeAllocatedR3 +    "  Value Expected : "  + expBinToBeAllocatedR3);*/
		
		System.out.println("Bin Total Qty               :  " +actBinTotalQty +            "  Value Expected : "  + expBinTotalQty);
		System.out.println("Bin Base Uom                :  " +actBinBaseUom +             "  Value Expected : "  + expBinBaseUom);
		System.out.println("Bin Balance Txt             :  " +actBinBalanceQty +          "  Value Expected : "  + expBinBalanceQty);
		System.out.println("Bin Total To Be Adjusted    :  " + actBinSum +                "  Value Expected : " + expBinSum);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
		binOkBtn.click();
		
		String actBinName=excelReader.getCellData(xlSheetName, 130, 7);
		
		System.out.println("Bin Column in Voucher : "+ actBinName +  "    "+select3rdRow_7thColumn.getText());
		
		excelReader.setCellData(xlfile, xlSheetName, 130, 8, select3rdRow_7thColumn.getText());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_7thColumn));
				
		if(/*actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn && actBinAlternateCategory==expBinAlternateCategory 
				&& actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn
				&& actBinOkBtn==expBinOkBtn
				
				&& actBinGroupNameR1.equalsIgnoreCase(expBinGroupNameR1)
				
				&& actBinNameR2.equalsIgnoreCase(expBinNameR2) && actBinStockR2.equalsIgnoreCase(expBinStockR2) 
				&& actBinCapacityR2.equalsIgnoreCase(expBinCapacityR2) && actBinLoadR2.equalsIgnoreCase(expBinLoadR2)
				&& actBinFreeSpaceR2.equalsIgnoreCase(expBinFreeSpaceR2) && actBinFreeQtyR2.equalsIgnoreCase(expBinFreeQtyR2)
				&& actBinToBeAllocatedR2.equalsIgnoreCase(expBinToBeAllocatedR2)
				
				&& actBinNameR3.equalsIgnoreCase(expBinNameR3) && actBinStockR3.equalsIgnoreCase(expBinStockR3) 
				&& actBinCapacityR3.equalsIgnoreCase(expBinCapacityR3) && actBinLoadR3.equalsIgnoreCase(expBinLoadR3)
				&& actBinFreeSpaceR3.equalsIgnoreCase(expBinFreeSpaceR3) && actBinFreeQtyR3.equalsIgnoreCase(expBinFreeQtyR3)*/
				
				actMethod==true && actbinInwardGridList.equalsIgnoreCase(expbinInwardGridList)
				
				&& actBinTotalQty.equalsIgnoreCase(expBinTotalQty) && actBinBaseUom.equalsIgnoreCase(expBinBaseUom) 
				&& actBinBalanceQty.equalsIgnoreCase(expBinBalanceQty)
				
				&& actBinSum.equalsIgnoreCase(expBinSum)
				
				&& select4thRow_7thColumn.getText().equalsIgnoreCase(actBinName))
			
		{
			System.out.println("Selected Bin And Ok Btn Not Enabled");
			excelReader.setCellData(xlfile, xlSheetName, 124, 9, resPass);
			return true;
		
		}
		else
		{
			System.out.println("Not Selected Bin And Ok Btn Not Enabled");
			excelReader.setCellData(xlfile, xlSheetName, 124, 9, resFail);
			return false;
		}
	  }
	catch (Exception e) 
    {
		String exception =e.getMessage().substring(0, 50);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 124, 10, e.getMessage());
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		return false;
    } 
  }
		

  
  @FindBy(xpath="//input[@id='id_body_85']")
  private static WebElement  enter_Bin;
		
  public boolean checkOpeningStocksNewBinValuesForPreviousRowBinAfterAllocatingCurrentBinRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
		
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_7thColumn));
		select4thRow_7thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Bin));
		enter_Bin.sendKeys(Keys.SPACE);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchTxt));		
		
		boolean actBinSearchTxt                = binSearchTxt.isDisplayed();
		boolean actBinSearchBtn                = binSearchBtn.isDisplayed();
		//boolean actBinAlternateCategory        = binAlternateCategoryCheckBtn.isDisplayed();
		boolean actBinAutoAllocateBtn          = binAutoAllocateBtn.isDisplayed();
		boolean actBinPickBtn                  = binPickBtn.isDisplayed();
		boolean actBinCancelBtn                = binCancelBtn.isDisplayed();
		boolean actBinOkBtn                    = binOkBtn.isEnabled();
				
		boolean expBinSearchTxt                = true;
		boolean expBinSearchBtn                = true;
		boolean expBinAlternateCategory        = true;
		boolean expBinAutoAllocateBtn          = true;
		boolean expBinPickBtn                  = true;
		boolean expBinCancelBtn                = true;
		boolean expBinOkBtn                    = true;
			
		System.out.println("Bin Search Value Actual                :  " + actBinSearchTxt +         " Value Expected : " + expBinSearchTxt);
		System.out.println("Bin Search Btn Value Actual            :  " + actBinSearchBtn +         " Value Expected : " + expBinSearchBtn);
		//System.out.println("Bin Alternate Category Value Actual    :  " + actBinAlternateCategory + " Value Expected : " + expBinAlternateCategory);
		System.out.println("Bin Auto Allocate Btn Value Actual     :  " + actBinAutoAllocateBtn +   " Value Expected : " + expBinAutoAllocateBtn);
		System.out.println("Bin Pick Btn Value Actual              :  " + actBinPickBtn +           " Value Expected : " + expBinPickBtn);
		System.out.println("Bin Cancel Btn Value Actual            :  " + actBinCancelBtn +         " Value Expected : " + expBinCancelBtn);
		System.out.println("Bin Ok Btn Value Actual                :  " + actBinOkBtn +             " Value Expected : " + expBinOkBtn);
		
		
		/*String expBinGroupNameR1               = "BG1";
		
		String expBinNameR2                    = "Bin4";
		String expBinStockR2                   = "0.00";
		String expBinCapacityR2                = "90.00";
		String expBinLoadR2                    = "24.00";
		String expBinFreeSpaceR2               = "66.00";
		String expBinFreeQtyR2                 = "66.00";
		String expBinToBeAllocatedR2           = "12.00";
		
		String expBinNameR3                    = "Bin5";
		String expBinStockR3                   = "0.00";
		String expBinCapacityR3                = "98.00";
		String expBinLoadR3                    = "0.00";
		String expBinFreeSpaceR3               = "98.00";
		String expBinFreeQtyR3                 = "98.00";
		String expBinToBeAllocatedR3           = "0.00";*/
		
		String actBinTotalQty                  = binTotalQty.getAttribute("value");
		String actBinBaseUom                   = binBaseUOM.getText();
		String actBinBalanceQty                = binBalanceTxt.getAttribute("value");
		String actBinSum                       = binSumInward.getText();
		
		 String expBinTotalQty               = excelReader.getCellData(xlSheetName, 133, 7);
         String expBinBaseUom                = excelReader.getCellData(xlSheetName, 134, 7);
         String expBinBalanceQty             = excelReader.getCellData(xlSheetName, 135, 7);
         String expBinSum                    = excelReader.getCellData(xlSheetName, 136, 7);
         
         excelReader.setCellData(xlfile, xlSheetName, 133, 8, actBinTotalQty);
         excelReader.setCellData(xlfile, xlSheetName, 134, 8, actBinBaseUom);
         excelReader.setCellData(xlfile, xlSheetName, 135, 8, actBinBalanceQty);
         excelReader.setCellData(xlfile, xlSheetName, 136, 8, actBinSum);
         
         int binInwardGridListCount = binInwardGridList.size();
         
         ArrayList<String> binInwardGridListArray = new ArrayList<String>();
         
         for(int i=0;i<binInwardGridListCount;i++)
         {
                 String data = binInwardGridList.get(i).getText();
                 binInwardGridListArray.add(data);
         }
         
         
         String actbinInwardGridList=binInwardGridListArray.toString();
         
         String expbinInwardGridList=excelReader.getCellData(xlSheetName, 132, 7);
         
         excelReader.setCellData(xlfile, xlSheetName, 132, 8, actbinInwardGridList);
         
         System.out.println("ActbinInwardGridList : " + actbinInwardGridList);
         System.out.println("ExpbinInwardGridList : " + expbinInwardGridList);
         
         
         
         boolean actMethod = actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn 
                                     /*&& actBinAlternateCategory==expBinAlternateCategory*/ 
                                     && actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn;
         
         String actResult = Boolean.toString(actMethod);
         
         excelReader.setCellData(xlfile, xlSheetName, 131, 8, actResult.toUpperCase());
		
		
		/*String actBinGroupNameR1               = binselect1stRow_2ndColumn.getText();
		
		String actBinNameR2                    = binselect2ndRow_2ndColumn.getText();
		String actBinStockR2                   = binselect2ndRow_3rdColumn.getText();
		String actBinCapacityR2                = binselect2ndRow_4thColumn.getText();
		String actBinLoadR2                    = binselect2ndRow_5thColumn.getText();
		String actBinFreeSpaceR2               = binselect2ndRow_6thColumn.getText();
		String actBinFreeQtyR2                 = binselect2ndRow_7thColumn.getText();
		String actBinToBeAllocatedR2           = binselect2ndRow_8thColumn.getText();
			
		String actBinNameR3                    = binselect3rdRow_2ndColumn.getText();
		String actBinStockR3                   = binselect3rdRow_3rdColumn.getText();
		String actBinCapacityR3                = binselect3rdRow_4thColumn.getText();
		String actBinLoadR3                    = binselect3rdRow_5thColumn.getText();
		String actBinFreeSpaceR3               = binselect3rdRow_6thColumn.getText();
		String actBinFreeQtyR3                 = binselect3rdRow_7thColumn.getText();
		String actBinToBeAllocatedR3           = binselect3rdRow_8thColumn.getText();*/
		
		
			
		
        /*System.out.println("First Row Group Name        :  " + actBinGroupNameR1 +        "  Value Expected : "  + expBinGroupNameR1);
		
		System.out.println("Second Row Bin Name         :  " + actBinNameR2 +             "  Value Expected : "  + expBinNameR2);
		System.out.println("Second Row Stock            :  " + actBinStockR2 +            "  Value Expected : "  + expBinStockR2);
		System.out.println("Second Row Capacity         :  " + actBinCapacityR2 +         "  Value Expected : "  + expBinCapacityR2);
		System.out.println("Second Row Load             :  " + actBinLoadR2 +             "  Value Expected : "  + expBinLoadR2);
		System.out.println("Second Row Free Space       :  " + actBinFreeSpaceR2 +        "  Value Expected : "  + expBinFreeSpaceR2);
		System.out.println("Second Row Free Qty         :  " + actBinFreeQtyR2 +          "  Value Expected : "  + expBinFreeQtyR2);
		System.out.println("Second Row To Be Allocated  :  " + actBinToBeAllocatedR2 +    "  Value Expected : "  + expBinToBeAllocatedR2);
		
		System.out.println("Third Row Bin Name          :  " + actBinNameR3 +             "  Value Expected : "  + expBinNameR3);
		System.out.println("Third Row Stock             :  " + actBinStockR3 +            "  Value Expected : "  + expBinStockR3);
		System.out.println("Third Row Capacity          :  " + actBinCapacityR3 +         "  Value Expected : "  + expBinCapacityR3);
		System.out.println("Third Row Load              :  " + actBinLoadR3 +             "  Value Expected : "  + expBinLoadR3);
		System.out.println("Third Row Free Space        :  " + actBinFreeSpaceR3 +        "  Value Expected : "  + expBinFreeSpaceR3);
		System.out.println("Third Row Free Qty          :  " + actBinFreeQtyR3 +          "  Value Expected : "  + expBinFreeQtyR3);
		System.out.println("Third Row To Be Allocated   :  " + actBinToBeAllocatedR3 +    "  Value Expected : "  + expBinToBeAllocatedR3);*/
		
		System.out.println("Bin Total Qty               :  " + actBinTotalQty +            "  Value Expected : "  + expBinTotalQty);
		System.out.println("Bin Base Uom                :  " + actBinBaseUom +             "  Value Expected : "  + expBinBaseUom);
		System.out.println("Bin Balance Txt             :  " + actBinBalanceQty +          "  Value Expected : "  + expBinBalanceQty);
		
		System.out.println("Bin Total To Be Adjusted    :  " + actBinSum  +                "  Value Expected : "  + expBinSum);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binCancelBtn));
		binCancelBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_9thColumn));
		select4thRow_9thColumn.click();
		
		String actBinName                    = select4thRow_7thColumn.getText();
	    String expBinName                    = excelReader.getCellData(xlSheetName, 137, 7);
	    
	    excelReader.setCellData(xlfile, xlSheetName, 137, 8, actBinName); 
	    	
		System.out.println("Bin Column in Voucher       : " + actBinName +                "  Value Expected : " + expBinName);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_7thColumn));
				
		if(/*actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn && actBinAlternateCategory==expBinAlternateCategory 
				&& actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn
				&& actBinOkBtn==expBinOkBtn
				
				&& actBinGroupNameR1.equalsIgnoreCase(expBinGroupNameR1)
				
				&& actBinNameR2.equalsIgnoreCase(expBinNameR2) && actBinStockR2.equalsIgnoreCase(expBinStockR2) 
				&& actBinCapacityR2.equalsIgnoreCase(expBinCapacityR2) && actBinLoadR2.equalsIgnoreCase(expBinLoadR2)
				&& actBinFreeSpaceR2.equalsIgnoreCase(expBinFreeSpaceR2) && actBinFreeQtyR2.equalsIgnoreCase(expBinFreeQtyR2)
				&& actBinToBeAllocatedR2.equalsIgnoreCase(expBinToBeAllocatedR2)
				
				&& actBinNameR3.equalsIgnoreCase(expBinNameR3) && actBinStockR3.equalsIgnoreCase(expBinStockR3) 
				&& actBinCapacityR3.equalsIgnoreCase(expBinCapacityR3) && actBinLoadR3.equalsIgnoreCase(expBinLoadR3)
				&& actBinFreeSpaceR3.equalsIgnoreCase(expBinFreeSpaceR3) && actBinFreeQtyR3.equalsIgnoreCase(expBinFreeQtyR3)
				&& actBinToBeAllocatedR3.equalsIgnoreCase(expBinToBeAllocatedR3)*/
				
				actMethod==true && actbinInwardGridList.equalsIgnoreCase(expbinInwardGridList)
				
				&& actBinTotalQty.equalsIgnoreCase(expBinTotalQty) && actBinBaseUom.equalsIgnoreCase(expBinBaseUom) 
				&& actBinBalanceQty.equalsIgnoreCase(expBinBalanceQty)
				
				&& actBinSum.equalsIgnoreCase(expBinSum)
				
				&& actBinName.equalsIgnoreCase(expBinName))	
		{
			System.out.println("Selected Bin And Ok Btn Not Enabled");
			excelReader.setCellData(xlfile, xlSheetName, 131, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Not Selected Bin And Ok Btn Not Enabled");
			excelReader.setCellData(xlfile, xlSheetName, 131, 9, resFail);
			return false;
		}	
	  }
	catch (Exception e) 
    {
		String exception =e.getMessage().substring(0, 50);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 131, 10, e.getMessage());
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		return false;
    } 
	}
	

   // Delete row For Bin Validation
   public boolean checkOpeningStocksNewDeleteRowBin() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
   {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
	
	 try
	 {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fourthRowIndex));
		fourthRowIndex.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
		deleteRowBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(thirdRowIndex));
		thirdRowIndex.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
		deleteRowBtn.click();
		
		String actBinColumnR3GetText=select3rdRow_7thColumn.getText();
		System.out.println("actBinColumnR3GetText  :  "+actBinColumnR3GetText);
		
		boolean actBinColumnAfterDeleteRow=select3rdRow_7thColumn.getText().isEmpty();
		boolean expBonColumnAfterDeleteRow=true;
		
		String actResult = Boolean.toString(actBinColumnAfterDeleteRow);
		
		excelReader.setCellData(xlfile, xlSheetName, 138, 8, actResult.toUpperCase());

		System.out.println("Bin Column after Delete Row Value Actual     :  " + actBinColumnAfterDeleteRow +   " Value Expected : " + expBonColumnAfterDeleteRow);
			
		if(actBinColumnAfterDeleteRow==expBonColumnAfterDeleteRow)
		{
			System.out.println("Test Pass  deleted row Working  ");
			excelReader.setCellData(xlfile, xlSheetName, 138, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail Not Deleted Row");
			excelReader.setCellData(xlfile, xlSheetName, 138, 9, resPass);
			return false;
		}
	  }
	 catch (Exception e) 
	 {
		 String exception =e.getMessage().substring(0, 50);
		 excelReader.setExceptionInExcel(xlfile, xlSheetName, 138, 10, e.getMessage());
		 System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		 return false;
	 } 
	}
	
   
	public boolean checkOpeningStocksNewBinQuantityAfterAlocatingAndDeleting() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
	  excelReader=new ExcelReader(POJOUtility.getExcelPath());
	  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
		
	  try
	  {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
		select3rdRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount=itemListCount.size();
		
		System.err.println(itemcount);
			
		for(int i=0 ; i < itemcount ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 139, 6)))
			{
				itemListCount.get(i).click();
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.click();
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.click();
		enter_Quantity.clear();
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 140, 6));
		enter_Quantity.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 141, 6));
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchTxt));

		boolean actBinSearchTxt                = binSearchTxt.isDisplayed();
		boolean actBinSearchBtn                = binSearchBtn.isDisplayed();
		//boolean actBinAlternateCategory        = binAlternateCategoryCheckBtn.isDisplayed();
		boolean actBinAutoAllocateBtn          = binAutoAllocateBtn.isDisplayed();
		boolean actBinPickBtn                  = binPickBtn.isDisplayed();
		boolean actBinCancelBtn                = binCancelBtn.isDisplayed();
		boolean actBinOkBtn                    = binOkBtn.isEnabled();
				
		boolean expBinSearchTxt                = true;
		boolean expBinSearchBtn                = true;
		boolean expBinAlternateCategory        = true;
		boolean expBinAutoAllocateBtn          = true;
		boolean expBinPickBtn                  = true;
		boolean expBinCancelBtn                = true;
		boolean expBinOkBtn                    = true;
			
		System.out.println("Bin Search Value Actual                :  " + actBinSearchTxt +         " Value Expected : " + expBinSearchTxt);
		System.out.println("Bin Search Btn Value Actual            :  " + actBinSearchBtn +         " Value Expected : " + expBinSearchBtn);
		//System.out.println("Bin Alternate Category Value Actual    :  " + actBinAlternateCategory + " Value Expected : " + expBinAlternateCategory);
		System.out.println("Bin Auto Allocate Btn Value Actual     :  " + actBinAutoAllocateBtn +   " Value Expected : " + expBinAutoAllocateBtn);
		System.out.println("Bin Pick Btn Value Actual              :  " + actBinPickBtn +           " Value Expected : " + expBinPickBtn);
		System.out.println("Bin Cancel Btn Value Actual            :  " + actBinCancelBtn +         " Value Expected : " + expBinCancelBtn);
		System.out.println("Bin Ok Btn Value Actual                :  " + actBinOkBtn +             " Value Expected : " + expBinOkBtn);
		
	
        /*String actBinGroupNameR1          = binselect1stRow_2ndColumn.getText();
		
		String actBinNameR2               = binselect2ndRow_2ndColumn.getText();
		String actBinStockR2              = binselect2ndRow_3rdColumn.getText();
		String actBinCapacityR2           = binselect2ndRow_4thColumn.getText();
		String actBinLoadR2               = binselect2ndRow_5thColumn.getText();
		String actBinFreeSpaceR2          = binselect2ndRow_6thColumn.getText();
		String actBinFreeQtyR2            = binselect2ndRow_7thColumn.getText();
		String actBinToBeAllocatedR2      = binselect2ndRow_8thColumn.getText();
					
		String actBinNameR3               = binselect3rdRow_2ndColumn.getText();
		String actBinStockR3              = binselect3rdRow_3rdColumn.getText();
		String actBinCapacityR3           = binselect3rdRow_4thColumn.getText();
		String actBinLoadR3               = binselect3rdRow_5thColumn.getText();
		String actBinFreeSpaceR3          = binselect3rdRow_6thColumn.getText();
		String actBinFreeQtyR3            = binselect3rdRow_7thColumn.getText();
		String actBinToBeAllocatedR3      = binselect3rdRow_8thColumn.getText();*/
		
		String actBinTotalQty             = binTotalQty.getAttribute("value");
		String actBinBaseUom              = binBaseUOM.getText();
		String actBinBalanceQty           = binBalanceTxt.getAttribute("value");
		String actBinSum                  = binSumInward.getText();
	
		/*String expBinGroupNameR1          = "BG1";
		
		String expBinNameR2               = "Bin4";
		String expBinStockR2              = "0.00";
		String expBinCapacityR2           = "90.00";
		String expBinLoadR2               = "12.00";
		String expBinFreeSpaceR2          = "78.00";
		String expBinFreeQtyR2            = "78.00";
		String expBinToBeAllocatedR2      = "0.00";
		
		String expBinNameR3               = "Bin5";
		String expBinStockR3              = "0.00";
		String expBinCapacityR3           = "98.00";
		String expBinLoadR3               = "0.00";
		String expBinFreeSpaceR3          = "98.00";
		String expBinFreeQtyR3            = "98.00";
		String expBinToBeAllocatedR3      = "0.00";*/
		
		
		String expBinTotalQty               = excelReader.getCellData(xlSheetName, 141, 7);
        String expBinBaseUom                = excelReader.getCellData(xlSheetName, 142, 7);
        String expBinBalanceQty             = excelReader.getCellData(xlSheetName, 143, 7);
        String expBinSum                    = excelReader.getCellData(xlSheetName, 144, 7);
        
        excelReader.setCellData(xlfile, xlSheetName, 141, 8, actBinTotalQty);
        excelReader.setCellData(xlfile, xlSheetName, 142, 8, actBinBaseUom);
        excelReader.setCellData(xlfile, xlSheetName, 143, 8, actBinBalanceQty);
        excelReader.setCellData(xlfile, xlSheetName, 144, 8, actBinSum);

        int binInwardGridListCount = binInwardGridList.size();
        
        ArrayList<String> binInwardGridListArray = new ArrayList<String>();
        
        for(int i=0;i<binInwardGridListCount;i++)
        {
                String data = binInwardGridList.get(i).getText();
                binInwardGridListArray.add(data);
        }
        
        
        String actbinInwardGridList=binInwardGridListArray.toString();
        
        String expbinInwardGridList=excelReader.getCellData(xlSheetName, 140, 7);
        
        excelReader.setCellData(xlfile, xlSheetName, 140, 8, actbinInwardGridList);
        
        System.out.println("ActbinInwardGridList : " + actbinInwardGridList);
        System.out.println("ExpbinInwardGridList : " + expbinInwardGridList);
        
        boolean actMethod = actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn 
                                    /*&& actBinAlternateCategory==expBinAlternateCategory*/ 
                                    && actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn;
        
        String actResult = Boolean.toString(actMethod);
        
        excelReader.setCellData(xlfile, xlSheetName, 139, 8, actResult.toUpperCase());

		
	
        /*System.out.println("First Row Group Name        :  " + actBinGroupNameR1 +        "  Value Expected : "  + expBinGroupNameR1);
		
		System.out.println("Second Row Bin Name         :  " + actBinNameR2 +             "  Value Expected : "  + expBinNameR2);
		System.out.println("Second Row Stock            :  " + actBinStockR2 +            "  Value Expected : "  + expBinStockR2);
		System.out.println("Second Row Capacity         :  " + actBinCapacityR2 +         "  Value Expected : "  + expBinCapacityR2);
		System.out.println("Second Row Load             :  " + actBinLoadR2 +             "  Value Expected : "  + expBinLoadR2);
		System.out.println("Second Row Free Space       :  " + actBinFreeSpaceR2 +        "  Value Expected : "  + expBinFreeSpaceR2);
		System.out.println("Second Row Free Qty         :  " + actBinFreeQtyR2 +          "  Value Expected : "  + expBinFreeQtyR2);
		System.out.println("Second Row To Be Allocated  :  " + actBinToBeAllocatedR2 +    "  Value Expected : "  + expBinToBeAllocatedR2);
		
		System.out.println("Third Row Bin Name          :  " + actBinNameR3 +             "  Value Expected : "  + expBinNameR3);
		System.out.println("Third Row Stock             :  " + actBinStockR3 +            "  Value Expected : "  + expBinStockR3);
		System.out.println("Third Row Capacity          :  " + actBinCapacityR3 +         "  Value Expected : "  + expBinCapacityR3);
		System.out.println("Third Row Load              :  " + actBinLoadR3 +             "  Value Expected : "  + expBinLoadR3);
		System.out.println("Third Row Free Space        :  " + actBinFreeSpaceR3 +        "  Value Expected : "  + expBinFreeSpaceR3);
		System.out.println("Third Row Free Qty          :  " + actBinFreeQtyR3 +          "  Value Expected : "  + expBinFreeQtyR3);
		System.out.println("Third Row To Be Allocated   :  " + actBinToBeAllocatedR3 +    "  Value Expected : "  + expBinToBeAllocatedR3);*/
		
		System.out.println("Bin Total Qty               :  " +actBinTotalQty +            "  Value Expected : "  + expBinTotalQty);
		System.out.println("Bin Base Uom                :  " +actBinBaseUom +             "  Value Expected : "  + expBinBaseUom);
		System.out.println("Bin Balance Txt             :  " +actBinBalanceQty +          "  Value Expected : "  + expBinBalanceQty);
		
		System.out.println("Bin Total To Be Adjusted    :  " + actBinSum +                "  Value Expected : "  + expBinSum);
				
		if(/*actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn && actBinAlternateCategory==expBinAlternateCategory 
				&& actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn
				&& actBinOkBtn==expBinOkBtn
				
				&& actBinGroupNameR1.equalsIgnoreCase(expBinGroupNameR1)
				
				&& actBinNameR2.equalsIgnoreCase(expBinNameR2) && actBinStockR2.equalsIgnoreCase(expBinStockR2) 
				&& actBinCapacityR2.equalsIgnoreCase(expBinCapacityR2) && actBinLoadR2.equalsIgnoreCase(expBinLoadR2)
				&& actBinFreeSpaceR2.equalsIgnoreCase(expBinFreeSpaceR2) && actBinFreeQtyR2.equalsIgnoreCase(expBinFreeQtyR2)
				&& actBinToBeAllocatedR2.equalsIgnoreCase(expBinToBeAllocatedR2)
				
				&& actBinNameR3.equalsIgnoreCase(expBinNameR3) && actBinStockR3.equalsIgnoreCase(expBinStockR3) 
				&& actBinCapacityR3.equalsIgnoreCase(expBinCapacityR3) && actBinLoadR3.equalsIgnoreCase(expBinLoadR3)
				&& actBinFreeSpaceR3.equalsIgnoreCase(expBinFreeSpaceR3) && actBinFreeQtyR3.equalsIgnoreCase(expBinFreeQtyR3)
				&& actBinToBeAllocatedR3.equalsIgnoreCase(expBinToBeAllocatedR3)*/

				actMethod==true && actbinInwardGridList.equalsIgnoreCase(expbinInwardGridList)
				
				&& actBinTotalQty.equalsIgnoreCase(expBinTotalQty) && actBinBaseUom.equalsIgnoreCase(expBinBaseUom) 
				&& actBinBalanceQty.equalsIgnoreCase(expBinBalanceQty)
				
				&& actBinSum.equalsIgnoreCase(expBinSum))
		{
			
			System.out.println("Test Pass : Bin Popup options Are As Expected");
			excelReader.setCellData(xlfile, xlSheetName, 139, 9, resPass);
			
			return true;
		}
		else
		{
			System.out.println("Test Fail : Bin Popup options Are NOT As Expected");
			excelReader.setCellData(xlfile, xlSheetName, 139, 9, resFail);
			
			return false;
		}
	  }
	  catch (Exception e) 
	  {
		  String exception =e.getMessage().substring(0, 50);
		  	excelReader.setExceptionInExcel(xlfile, xlSheetName, 139, 10, e.getMessage());
		  	System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  	return false;
	  }  
  }
	
	  public boolean checkOpeningStocksNewVoucherWithInputingAllocateQtyMoreThanAvailableQty() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	  {
			
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
		
		 try
		 {
			 Thread.sleep(2000);
				
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binselect2ndRow_8thColumn));
			 binselect2ndRow_8thColumn.click();
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ToBeAllocateTxt));
			 enter_ToBeAllocateTxt.sendKeys(excelReader.getCellData(xlSheetName, 145, 6));
			 enter_ToBeAllocateTxt.sendKeys(Keys.TAB);
			 
			 int binInwardGridListCount = binInwardGridList.size();
		        
			 ArrayList<String> binInwardGridListArray = new ArrayList<String>();
			 
			 for(int i=0;i<binInwardGridListCount;i++)
			 {
				 String data = binInwardGridList.get(i).getText();
				 binInwardGridListArray.add(data);
			 }	
		        	
		        
			 String actbinInwardGridList=binInwardGridListArray.toString();
			 
			 String expbinInwardGridList=excelReader.getCellData(xlSheetName, 146, 7);
			 
			 excelReader.setCellData(xlfile, xlSheetName, 146, 8, actbinInwardGridList);
			 
			 System.out.println("ActbinInwardGridList : " + actbinInwardGridList);
			 System.out.println("ExpbinInwardGridList : " + expbinInwardGridList);
			 	
			 
			 if(actbinInwardGridList.equalsIgnoreCase(expbinInwardGridList))
			 {
				 System.out.println("Test Pass : Bin Popup options Are As Expected");
				 excelReader.setCellData(xlfile, xlSheetName, 145, 9, resPass);
				 
				 return true;
			 }
			 else
			 {
				 System.out.println("Test Fail : Bin Popup options Are NOT As Expected");
				 excelReader.setCellData(xlfile, xlSheetName, 145, 9, resFail);
				
				 return false;
			 }
		 }
		 catch (Exception e) 
		 {
			 String exception =e.getMessage().substring(0, 50);
			 excelReader.setExceptionInExcel(xlfile, xlSheetName, 145, 10, e.getMessage());
			 System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			 return false;
		 } 
	  }
	  
	  
	  
	  public boolean checkOpeningStocksNewVoucherWithInputingThroughAllocateQty() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	  {
			
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
		
		 try
		 {
			 Thread.sleep(2000);
				
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
			 binAutoAllocateBtn.click();
			 
			 int binInwardGridListCount = binInwardGridList.size();
		        
			 ArrayList<String> binInwardGridListArray = new ArrayList<String>();
			 
			 for(int i=0;i<binInwardGridListCount;i++)
			 {
				 String data = binInwardGridList.get(i).getText();
				 binInwardGridListArray.add(data);
			 }	
		        	
		        
			 String actbinInwardGridList=binInwardGridListArray.toString();
			 
			 String expbinInwardGridList=excelReader.getCellData(xlSheetName, 148, 7);
			 
			 excelReader.setCellData(xlfile, xlSheetName, 148, 8, actbinInwardGridList);
			 
			 System.out.println("ActbinInwardGridList : " + actbinInwardGridList);
			 System.out.println("ExpbinInwardGridList : " + expbinInwardGridList);
			 
			 if(actbinInwardGridList.equalsIgnoreCase(expbinInwardGridList))
			 {
				 System.out.println("Test Pass : Bin Popup options Are As Expected");
				 excelReader.setCellData(xlfile, xlSheetName, 147, 9, resPass);
				 
				 Status=true;
				 return true;
			 }
			 else
			 {
				 System.out.println("Test Fail : Bin Popup options Are NOT As Expected");
				 excelReader.setCellData(xlfile, xlSheetName, 147, 9, resFail);
				
				 Status=false;
				 return false;
			 }
		 }
		 catch (Exception e) 
		 {
			 String exception =e.getMessage().substring(0, 50);
			 excelReader.setExceptionInExcel(xlfile, xlSheetName, 147, 10, e.getMessage());
			 System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			 return false;
		 } 
	  }
	  
	  
	  
	  
	  @FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr/td")
	  private static List<WebElement> voucherGridBodyList;
	  
  public boolean checkOpeningStocksNewVoucherBinAutoAllocationForBinSplittingInThirdRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
		
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";		  
	
	
	try
	{
		System.err.println(" Status  : "+Status);
		
		if(Status==true)
		{
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
			 binOkBtn.click();
			 
			 Thread.sleep(2000);
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_9thColumn));
			 select4thRow_9thColumn.click();
			 
			/* 
				
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
			 
			 String actOsVoucherItemR3   =select3rdRow_1stColumn.getText();
			 String actOsVoucherUnitsR3  =select3rdRow_2ndColumn.getText();
			 String actOsVoucherQtyR3    =select3rdRow_3rdColumn.getText();
			 String actOsVoucherRateR3   =select3rdRow_4thColumn.getText();
			 String actOsVoucherGrossR3  =select3rdRow_5thColumn.getText();
			 String actOsVoucherBinR3    =select3rdRow_7thColumn.getText();
				
			 String actOsVoucherItemR4   =select4thRow_1stColumn.getText();
			 String actOsVoucherUnitsR4  =select4thRow_2ndColumn.getText();
			 String actOsVoucherQtyR4    =select4thRow_3rdColumn.getText();
			 String actOsVoucherRateR4   =select4thRow_4thColumn.getText();
			 String actOsVoucherGrossR4  =select4thRow_5thColumn.getText();
			 String actOsVoucherBinR4    =select4thRow_7thColumn.getText();
			 
			 String expOsVoucherItemR3   ="FIFO COGS ITEM";
			 String expOsVoucherUnitsR3  ="Dozs";
			 String expOsVoucherQtyR3    ="6.50";
			 String expOsVoucherRateR3   ="10.00";
			 String expOsVoucherGrossR3  ="65.00";
			 String expOsVoucherBinR3    ="Bin4";
				
			 String expOsVoucherItemR4   ="FIFO COGS ITEM";
			 String expOsVoucherUnitsR4  ="Dozs";
			 String expOsVoucherQtyR4    ="7.50";
			 String expOsVoucherRateR4   ="10.00";
			 String expOsVoucherGrossR4  ="75.00";
			 String expOsVoucherBinR4    ="Bin5";
			 
			 System.out.println("OsVoucherItemR3   : " +actOsVoucherItemR3   + " Value Expected : " + expOsVoucherItemR3);
			 System.out.println("OsVoucherUnitsR3  : " +actOsVoucherUnitsR3  + " Value Expected : " + expOsVoucherUnitsR3);
			 System.out.println("OsVoucherQtyR3    : " +actOsVoucherQtyR3    + " Value Expected : " + expOsVoucherQtyR3);
			 System.out.println("OsVoucherRateR3   : " +actOsVoucherRateR3   + " Value Expected : " + expOsVoucherRateR3);
			 System.out.println("OsVoucherGrossR3  : " +actOsVoucherGrossR3  + " Value Expected : " + expOsVoucherGrossR3);
			 System.out.println("OsVoucherBinR3    : " +actOsVoucherBinR3    + " Value Expected : " + expOsVoucherBinR3);
			 
			 System.out.println("OsVoucherItemR4   : " +actOsVoucherItemR4   + " Value Expected : " + expOsVoucherItemR4);
			 System.out.println("OsVoucherUnitsR4  : " +actOsVoucherUnitsR4  + " Value Expected : " + expOsVoucherUnitsR4);
			 System.out.println("OsVoucherQtyR4    : " +actOsVoucherQtyR4    + " Value Expected : " + expOsVoucherQtyR4);
			 System.out.println("OsVoucherRateR4   : " +actOsVoucherRateR4   + " Value Expected : " + expOsVoucherRateR4);
			 System.out.println("OsVoucherGrossR4  : " +actOsVoucherGrossR4  + " Value Expected : " + expOsVoucherGrossR4);
			 System.out.println("OsVoucherBinR4    : " +actOsVoucherBinR4    + " Value Expected : " + expOsVoucherBinR4);*/
			 
			 int voucherGridBodyListCount = voucherGridBodyList.size();
			 
			 ArrayList<String> voucherGridBodyListArray = new ArrayList<String>();
			 
			 for(int i=10;i<voucherGridBodyListCount;i++)
			 {
				 String data = voucherGridBodyList.get(i).getText();
				 voucherGridBodyListArray.add(data);
			 }
			 
			 String actvoucherGridBodyList=voucherGridBodyListArray.toString();
			 
			 String expvoucherGridBodyList=excelReader.getCellData(xlSheetName, 150, 7);
			 
			 excelReader.setCellData(xlfile, xlSheetName, 150, 8, actvoucherGridBodyList);
			 
			 System.out.println("voucherGridBodyList Actual   : " + actvoucherGridBodyList);
			 System.out.println("voucherGridBodyList Expected : " + expvoucherGridBodyList);
		 
			 if(/*actOsVoucherItemR3.equalsIgnoreCase(expOsVoucherItemR3) && actOsVoucherUnitsR3.equalsIgnoreCase(expOsVoucherUnitsR3)
					 && actOsVoucherQtyR3.equalsIgnoreCase(expOsVoucherQtyR3) && actOsVoucherRateR3.equalsIgnoreCase(expOsVoucherRateR3)
					 && actOsVoucherGrossR3.equalsIgnoreCase(expOsVoucherGrossR3) && actOsVoucherBinR3.equalsIgnoreCase(expOsVoucherBinR3)
					 
					 && actOsVoucherItemR4.equalsIgnoreCase(expOsVoucherItemR4) && actOsVoucherUnitsR4.equalsIgnoreCase(expOsVoucherUnitsR4)
					 && actOsVoucherQtyR4.equalsIgnoreCase(expOsVoucherQtyR4) && actOsVoucherRateR4.equalsIgnoreCase(expOsVoucherRateR4)
					 && actOsVoucherGrossR4.equalsIgnoreCase(expOsVoucherGrossR4) && actOsVoucherBinR4.equalsIgnoreCase(expOsVoucherBinR4)*/
					 actvoucherGridBodyList.equalsIgnoreCase(expvoucherGridBodyList))
			 {
				 System.out.println("Auto Allocate Spiltted Bin ");
				 
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fourthRowIndex));
				 fourthRowIndex.click();
					
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
				 deleteRowBtn.click();
					
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(thirdRowIndex));
				 thirdRowIndex.click();
					
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
				 deleteRowBtn.click();
				 excelReader.setCellData(xlfile, xlSheetName, 149, 9, resPass);
				 return true;
			 }
			 else
			 {
				 System.out.println("Auto Allocate Did not Spilt Bin ");
				 
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binCancelBtn));
				 binCancelBtn.click();
				 
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_9thColumn));
				 select3rdRow_9thColumn.click();
				 
				 Thread.sleep(2000);
				 
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fourthRowIndex));
				 fourthRowIndex.click();
					
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
				 deleteRowBtn.click();
					
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(thirdRowIndex));
				 thirdRowIndex.click();
					
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
				 deleteRowBtn.click();
				 
				 excelReader.setCellData(xlfile, xlSheetName, 149, 9, resFail);
				 
				 return false;
			 }
		}
		else
		{
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binCancelBtn));
			 binCancelBtn.click();
			 
			 Thread.sleep(2000);
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_9thColumn));
			 select3rdRow_9thColumn.click();
				
			 Thread.sleep(2000);
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fourthRowIndex));
			 fourthRowIndex.click();
				
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
			 deleteRowBtn.click();
				
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(thirdRowIndex));
			 thirdRowIndex.click();
				
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
			 deleteRowBtn.click();
			 
			System.out.println("Auto Allocate Did not Spilt Bin ");
			 excelReader.setCellData(xlfile, xlSheetName, 149, 9, resFail);
			return false;
		}
	}
	 catch (Exception e) 
	 {
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binCancelBtn));
		 binCancelBtn.click();
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_9thColumn));
		 select3rdRow_9thColumn.click();
			
		 Thread.sleep(2000);
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fourthRowIndex));
		 fourthRowIndex.click();
			
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
		 deleteRowBtn.click();
			
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(thirdRowIndex));
		 thirdRowIndex.click();
			
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
		 deleteRowBtn.click();
		
		 
		 String exception =e.getMessage().substring(0, 50);
		 excelReader.setExceptionInExcel(xlfile, xlSheetName, 149, 10, e.getMessage());
		 System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		 return false;
	 } 
  }
  
  
  public boolean checkOpeningStocksNewVoucherBinWithManualInputQtyInBinPopForBinSplittingInThirdRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";		
	
		try
		{	
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_9thColumn));
			select2ndRow_9thColumn.click();
			
			Thread.sleep(2000);
			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
			select3rdRow_1stColumn.click();*/
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemcount=itemListCount.size();
			
			System.err.println(itemcount);
				
			for(int i=0 ; i < itemcount ;i++)
			{
				String data=itemListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 151, 6)))
				{
					itemListCount.get(i).click();
					
					break;
				}
			}
				
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.click();
			enter_UnitTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 152, 6));
			
			enter_Quantity.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 153, 6));
			
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchTxt));
			
			boolean actBinSearchTxt                = binSearchTxt.isDisplayed();
			boolean actBinSearchBtn                = binSearchBtn.isDisplayed();
			//boolean actBinAlternateCategory        = binAlternateCategoryCheckBtn.isDisplayed();
			boolean actBinAutoAllocateBtn          = binAutoAllocateBtn.isDisplayed();
			boolean actBinPickBtn                  = binPickBtn.isDisplayed();
			boolean actBinCancelBtn                = binCancelBtn.isDisplayed();
			boolean actBinOkBtn                    = binOkBtn.isEnabled();
					
			boolean expBinSearchTxt                = true;
			boolean expBinSearchBtn                = true;
			boolean expBinAlternateCategory        = true;
			boolean expBinAutoAllocateBtn          = true;
			boolean expBinPickBtn                  = true;
			boolean expBinCancelBtn                = true;
			boolean expBinOkBtn                    = true;
				
			System.out.println("Bin Search Value Actual                :  " + actBinSearchTxt +         " Value Expected : " + expBinSearchTxt);
			System.out.println("Bin Search Btn Value Actual            :  " + actBinSearchBtn +         " Value Expected : " + expBinSearchBtn);
			//System.out.println("Bin Alternate Category Value Actual    :  " + actBinAlternateCategory + " Value Expected : " + expBinAlternateCategory);
			System.out.println("Bin Auto Allocate Btn Value Actual     :  " + actBinAutoAllocateBtn +   " Value Expected : " + expBinAutoAllocateBtn);
			System.out.println("Bin Pick Btn Value Actual              :  " + actBinPickBtn +           " Value Expected : " + expBinPickBtn);
			System.out.println("Bin Cancel Btn Value Actual            :  " + actBinCancelBtn +         " Value Expected : " + expBinCancelBtn);
			System.out.println("Bin Ok Btn Value Actual                :  " + actBinOkBtn +             " Value Expected : " + expBinOkBtn);
			
			
			/*String expBinGroupNameR1="BG1";
			
			String expBinNameR2="Bin4";
			String expBinStockR2="0.00";
			String expBinCapacityR2="90.00";
			String expBinLoadR2="12.00";
			String expBinFreeSpaceR2="78.00";
			String expBinFreeQtyR2="78.00";
			String expBinToBeAllocatedR2="0.00";
			
			String expBinNameR3="Bin5";
			String expBinStockR3="0.00";
			String expBinCapacityR3="98.00";
			String expBinLoadR3="0.00";
			String expBinFreeSpaceR3="98.00";
			String expBinFreeQtyR3="98.00";
			String expBinToBeAllocatedR3="0.00";*/
			
		
			
			
			/*String actBinGroupNameR1=binselect1stRow_2ndColumn.getText();
			
			String actBinNameR2=binselect2ndRow_2ndColumn.getText();
			String actBinStockR2=binselect2ndRow_3rdColumn.getText();
			String actBinCapacityR2=binselect2ndRow_4thColumn.getText();
			String actBinLoadR2=binselect2ndRow_5thColumn.getText();
			String actBinFreeSpaceR2=binselect2ndRow_6thColumn.getText();
			String actBinFreeQtyR2=binselect2ndRow_7thColumn.getText();
			String actBinToBeAllocatedR2=binselect2ndRow_8thColumn.getText();
				
			
			String actBinNameR3=binselect3rdRow_2ndColumn.getText();
			String actBinStockR3=binselect3rdRow_3rdColumn.getText();
			String actBinCapacityR3=binselect3rdRow_4thColumn.getText();
			String actBinLoadR3=binselect3rdRow_5thColumn.getText();
			String actBinFreeSpaceR3=binselect3rdRow_6thColumn.getText();
			String actBinFreeQtyR3=binselect3rdRow_7thColumn.getText();
			String actBinToBeAllocatedR3=binselect3rdRow_8thColumn.getText();*/
			
			String actBinTotalQty=binTotalQty.getAttribute("value");
			String actBinBaseUom=binBaseUOM.getText();
			String actBinBalanceQty=binBalanceTxt.getAttribute("value");
			
			
			String actBinSum=binSumInward.getText();
			
			System.out.println("actBinSum  : "+actBinSum);
			
			String expBinTotalQty               = excelReader.getCellData(xlSheetName, 153, 7);
            String expBinBaseUom                = excelReader.getCellData(xlSheetName, 154, 7);
            String expBinBalanceQty             = excelReader.getCellData(xlSheetName, 155, 7);
            String expBinSum                    = excelReader.getCellData(xlSheetName, 156, 7);
            
            excelReader.setCellData(xlfile, xlSheetName, 153, 8, actBinTotalQty);
            excelReader.setCellData(xlfile, xlSheetName, 154, 8, actBinBaseUom);
            excelReader.setCellData(xlfile, xlSheetName, 155, 8, actBinBalanceQty);
            excelReader.setCellData(xlfile, xlSheetName, 156, 8, actBinSum);
			
			
			int binInwardGridListCount = binInwardGridList.size();
            
            ArrayList<String> binInwardGridListArray = new ArrayList<String>();
            
            for(int i=0;i<binInwardGridListCount;i++)
            {
                    String data = binInwardGridList.get(i).getText();
                    binInwardGridListArray.add(data);
            }
            
            
            String actbinInwardGridList=binInwardGridListArray.toString();
            
            String expbinInwardGridList=excelReader.getCellData(xlSheetName, 152, 7);
            
            excelReader.setCellData(xlfile, xlSheetName, 152, 8, actbinInwardGridList);
            
            System.out.println("ActbinInwardGridList : " + actbinInwardGridList);
            System.out.println("ExpbinInwardGridList : " + expbinInwardGridList);
            
            
            boolean actMethod = actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn 
                                        /*&& actBinAlternateCategory==expBinAlternateCategory*/ 
                                        && actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn;
            
            String actResult = Boolean.toString(actMethod);
            
            excelReader.setCellData(xlfile, xlSheetName, 151, 8, actResult.toUpperCase());

			
			
			/*System.out.println("First Row Group Name        :  " + actBinGroupNameR1 +"   " + expBinGroupNameR1);
			
			System.out.println("Second Row Bin Name         :  " + actBinNameR2 +"   " + expBinNameR2);
			System.out.println("Second Row Stock            :  " + actBinStockR2 +"   " + expBinStockR2);
			System.out.println("Second Row Capacity         :  " + actBinCapacityR2 +"   " + expBinCapacityR2);
			System.out.println("Second Row Load             :  " + actBinLoadR2 +"   " + expBinLoadR2);
			System.out.println("Second Row Free Space       :  " + actBinFreeSpaceR2 +"   " + expBinFreeSpaceR2);
			System.out.println("Second Row Free Qty         :  " + actBinFreeQtyR2 +"   " + expBinFreeQtyR2);
			System.out.println("Second Row To Be Allocated  :  " + actBinToBeAllocatedR2 +"   " + expBinToBeAllocatedR2);
			
			
			System.out.println("Third Row Bin Name         :  " + actBinNameR3 +"   " + expBinNameR3);
			System.out.println("Third Row Stock            :  " + actBinStockR3 +"   " + expBinStockR3);
			System.out.println("Third Row Capacity         :  " + actBinCapacityR3 +"   " + expBinCapacityR3);
			System.out.println("Third Row Load             :  " + actBinLoadR3 +"   " + expBinLoadR3);
			System.out.println("Third Row Free Space       :  " + actBinFreeSpaceR3 +"   " + expBinFreeSpaceR3);
			System.out.println("Third Row Free Qty         :  " + actBinFreeQtyR3 +"   " + expBinFreeQtyR3);
			System.out.println("Third Row To Be Allocated  :  " + actBinToBeAllocatedR3 +"   " + expBinToBeAllocatedR3);*/
			
			System.out.println("Bin Total Qty              :  " +actBinTotalQty +"  "+expBinTotalQty);
			System.out.println("Bin Base Uom               :  " +actBinBaseUom +"  "+expBinBaseUom);
			System.out.println("Bin Balance Txt            :  " +actBinBalanceQty +"  "+expBinBalanceQty);
			
			System.out.println("Bin Total Sum :  " + actBinSum +"   " + expBinSum);
						
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
			binAutoAllocateBtn.click();	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binselect2ndRow_8thColumn));
			binselect2ndRow_8thColumn.click();
			
			enter_ToBeAllocateTxt.sendKeys(excelReader.getCellData(xlSheetName, 154, 6));
			
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binselect3rdRow_8thColumn));
			binselect3rdRow_8thColumn.click();
			
			enter_ToBeAllocateTxt.sendKeys(excelReader.getCellData(xlSheetName, 155, 6));
			
			enter_ToBeAllocateTxt.sendKeys(Keys.TAB);
			
			
			
			
			
			String actBinToBeAlloctionValueOnClickOnAutoAllocate2R = binselect2ndRow_8thColumn.getText();
			String actBinToBeAlloctionValueOnClickOnAutoAllocate3R = binselect3rdRow_8thColumn.getText();
				
			String expBinToBeAlloctionValueOnClickOnAutoAllocate2R = excelReader.getCellData(xlSheetName, 157, 7);
			String expBinToBeAlloctionValueOnClickOnAutoAllocate3R = excelReader.getCellData(xlSheetName, 158, 7);
			
			excelReader.setCellData(xlfile, xlSheetName, 157, 8, actBinToBeAlloctionValueOnClickOnAutoAllocate2R);
			excelReader.setCellData(xlfile, xlSheetName, 158, 8, actBinToBeAlloctionValueOnClickOnAutoAllocate3R);
			
			System.out.println("Row 2 To Be Allocated Value Actual :  " + actBinToBeAlloctionValueOnClickOnAutoAllocate2R + " Value Actual : " + expBinToBeAlloctionValueOnClickOnAutoAllocate2R);
			System.out.println("Row 3 To Be Allocated Value Actual  : " + actBinToBeAlloctionValueOnClickOnAutoAllocate3R + " Value Actual : " + expBinToBeAlloctionValueOnClickOnAutoAllocate3R);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
			binOkBtn.click();	
			
			if(/*actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn && actBinAlternateCategory==expBinAlternateCategory 
					&& actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn
					&& actBinOkBtn==expBinOkBtn
					
					&& actBinGroupNameR1.equalsIgnoreCase(expBinGroupNameR1)
					
					&& actBinNameR2.equalsIgnoreCase(expBinNameR2) && actBinStockR2.equalsIgnoreCase(expBinStockR2) 
					&& actBinCapacityR2.equalsIgnoreCase(expBinCapacityR2) && actBinLoadR2.equalsIgnoreCase(expBinLoadR2)
					&& actBinFreeSpaceR2.equalsIgnoreCase(expBinFreeSpaceR2) && actBinFreeQtyR2.equalsIgnoreCase(expBinFreeQtyR2)
					&& actBinToBeAllocatedR2.equalsIgnoreCase(expBinToBeAllocatedR2)
					
					&& actBinNameR3.equalsIgnoreCase(expBinNameR3) && actBinStockR3.equalsIgnoreCase(expBinStockR3) 
					&& actBinCapacityR3.equalsIgnoreCase(expBinCapacityR3) && actBinLoadR3.equalsIgnoreCase(expBinLoadR3)
					&& actBinFreeSpaceR3.equalsIgnoreCase(expBinFreeSpaceR3) && actBinFreeQtyR3.equalsIgnoreCase(expBinFreeQtyR3)
					&& actBinToBeAllocatedR3.equalsIgnoreCase(expBinToBeAllocatedR3)*/
					
					actMethod== true && actbinInwardGridList.equalsIgnoreCase(expbinInwardGridList)
					
					&& actBinTotalQty.equalsIgnoreCase(expBinTotalQty) && actBinBaseUom.equalsIgnoreCase(expBinBaseUom) 
					&& actBinBalanceQty.equalsIgnoreCase(expBinBalanceQty)
					
					&& actBinSum.equalsIgnoreCase(expBinSum))
			{
				excelReader.setCellData(xlfile, xlSheetName, 151, 9, resPass);
				System.out.println("Manual Spilt Bin ");
				return true;
			}
			else
			{
				
				excelReader.setCellData(xlfile, xlSheetName, 151, 9, resFail);
				System.out.println("Manual Did not Spilt Bin ");
				return false;
			}
		}
		 catch (Exception e) 
		 {
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binCancelBtn));
			 binCancelBtn.click();	
				
			 String exception =e.getMessage().substring(0, 50);
			 excelReader.setExceptionInExcel(xlfile, xlSheetName, 151, 10, e.getMessage());
			 System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			 return false;
		 } 
  	}

  

  public boolean checkOpeningStocksNewVoucherConsumeFullCapacityInFifthRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";		
	
		try
		{	
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_1stColumn));
			select5thRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemcount=itemListCount.size();
			
			System.err.println(itemcount);
				
			for(int i=0 ; i < itemcount ;i++)
			{
				String data=itemListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 159, 6)))
				{
					itemListCount.get(i).click();
					
					break;
				}
			}
				
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.sendKeys(Keys.END);
			enter_UnitTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			enter_UnitTxt.sendKeys(Keys.BACK_SPACE);
			Thread.sleep(2000);
			enter_UnitTxt.sendKeys(excelReader.getCellData(xlSheetName, 160, 6));
			Thread.sleep(2000);
			enter_UnitTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 161, 6));
			
			enter_Quantity.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 162, 6));
			
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchTxt));
			
			boolean actBinSearchTxt                = binSearchTxt.isDisplayed();
			boolean actBinSearchBtn                = binSearchBtn.isDisplayed();
			//boolean actBinAlternateCategory        = binAlternateCategoryCheckBtn.isDisplayed();
			boolean actBinAutoAllocateBtn          = binAutoAllocateBtn.isDisplayed();
			boolean actBinPickBtn                  = binPickBtn.isDisplayed();
			boolean actBinCancelBtn                = binCancelBtn.isDisplayed();
			boolean actBinOkBtn                    = binOkBtn.isEnabled();
					
			boolean expBinSearchTxt                = true;
			boolean expBinSearchBtn                = true;
			boolean expBinAlternateCategory        = true;
			boolean expBinAutoAllocateBtn          = true;
			boolean expBinPickBtn                  = true;
			boolean expBinCancelBtn                = true;
			boolean expBinOkBtn                    = true;
				
			System.out.println("Bin Search Value Actual                :  " + actBinSearchTxt +         " Value Expected : " + expBinSearchTxt);
			System.out.println("Bin Search Btn Value Actual            :  " + actBinSearchBtn +         " Value Expected : " + expBinSearchBtn);
			//System.out.println("Bin Alternate Category Value Actual    :  " + actBinAlternateCategory + " Value Expected : " + expBinAlternateCategory);
			System.out.println("Bin Auto Allocate Btn Value Actual     :  " + actBinAutoAllocateBtn +   " Value Expected : " + expBinAutoAllocateBtn);
			System.out.println("Bin Pick Btn Value Actual              :  " + actBinPickBtn +           " Value Expected : " + expBinPickBtn);
			System.out.println("Bin Cancel Btn Value Actual            :  " + actBinCancelBtn +         " Value Expected : " + expBinCancelBtn);
			System.out.println("Bin Ok Btn Value Actual                :  " + actBinOkBtn +             " Value Expected : " + expBinOkBtn);
			
			
			String expBinGroupNameR1="BG1";
			
			String expBinNameR2="Bin5";
			String expBinStockR2="0.00";
			String expBinCapacityR2="98.00";
			String expBinLoadR2="90.00";
			String expBinFreeSpaceR2="8.00";
			String expBinFreeQtyR2="8.00";
			String expBinToBeAllocatedR2="0.00";
			
			/*String expBinNameR3="Bin5";
			String expBinStockR3="0.00";
			String expBinCapacityR3="98.00";
			String expBinLoadR3="0.00";
			String expBinFreeSpaceR3="98.00";
			String expBinFreeQtyR3="98.00";
			String expBinToBeAllocatedR3="0.00";*/
			
		
			/*String expBinTotalQty="8.00";
			String expBinBaseUom="Pcs";
			String expBinBalanceQty="8.00";
			
			String expBinSum="0.00";*/
			
			
			/*String actBinGroupNameR1=binselect1stRow_2ndColumn.getText();
			
			String actBinNameR2=binselect2ndRow_2ndColumn.getText();
			String actBinStockR2=binselect2ndRow_3rdColumn.getText();
			String actBinCapacityR2=binselect2ndRow_4thColumn.getText();
			String actBinLoadR2=binselect2ndRow_5thColumn.getText();
			String actBinFreeSpaceR2=binselect2ndRow_6thColumn.getText();
			String actBinFreeQtyR2=binselect2ndRow_7thColumn.getText();
			String actBinToBeAllocatedR2=binselect2ndRow_8thColumn.getText();*/
				
			
			/*String actBinNameR3=binselect3rdRow_2ndColumn.getText();
			String actBinStockR3=binselect3rdRow_3rdColumn.getText();
			String actBinCapacityR3=binselect3rdRow_4thColumn.getText();
			String actBinLoadR3=binselect3rdRow_5thColumn.getText();
			String actBinFreeSpaceR3=binselect3rdRow_6thColumn.getText();
			String actBinFreeQtyR3=binselect3rdRow_7thColumn.getText();
			String actBinToBeAllocatedR3=binselect3rdRow_8thColumn.getText();*/
			
			String actBinTotalQty=binTotalQty.getAttribute("value");
			String actBinBaseUom=binBaseUOM.getText();
			String actBinBalanceQty=binBalanceTxt.getAttribute("value");
			String actBinSum=binSumInward.getText();
			System.out.println("actBinSum  : "+actBinSum);
			
			 String expBinTotalQty               = excelReader.getCellData(xlSheetName, 161, 7);
             String expBinBaseUom                = excelReader.getCellData(xlSheetName, 162, 7);
             String expBinBalanceQty             = excelReader.getCellData(xlSheetName, 163, 7);
             String expBinSum                    = excelReader.getCellData(xlSheetName, 164, 7);
             
             excelReader.setCellData(xlfile, xlSheetName, 161, 8, actBinTotalQty);
             excelReader.setCellData(xlfile, xlSheetName, 162, 8, actBinBaseUom);
             excelReader.setCellData(xlfile, xlSheetName, 163, 8, actBinBalanceQty);
             excelReader.setCellData(xlfile, xlSheetName, 164, 8, actBinSum);

			
			 int binInwardGridListCount = binInwardGridList.size();
             
             ArrayList<String> binInwardGridListArray = new ArrayList<String>();
             
             for(int i=0;i<binInwardGridListCount;i++)
             {
                     String data = binInwardGridList.get(i).getText();
                     binInwardGridListArray.add(data);
             }
             
             
             String actbinInwardGridList=binInwardGridListArray.toString();
             
             String expbinInwardGridList=excelReader.getCellData(xlSheetName, 160, 7);
             
             excelReader.setCellData(xlfile, xlSheetName, 160, 8, actbinInwardGridList);
             
             System.out.println("ActbinInwardGridList : " + actbinInwardGridList);
             System.out.println("ExpbinInwardGridList : " + expbinInwardGridList);
             
             
             boolean actMethod = actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn 
                                         /*&& actBinAlternateCategory==expBinAlternateCategory*/ 
                                         && actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn;
             
             String actResult = Boolean.toString(actMethod);
             
             excelReader.setCellData(xlfile, xlSheetName, 159, 8, actResult.toUpperCase());

			
			
			/*System.out.println("First Row Group Name        :  " + actBinGroupNameR1 +"   " + expBinGroupNameR1);
			
			System.out.println("Second Row Bin Name         :  " + actBinNameR2 +"   " + expBinNameR2);
			System.out.println("Second Row Stock            :  " + actBinStockR2 +"   " + expBinStockR2);
			System.out.println("Second Row Capacity         :  " + actBinCapacityR2 +"   " + expBinCapacityR2);
			System.out.println("Second Row Load             :  " + actBinLoadR2 +"   " + expBinLoadR2);
			System.out.println("Second Row Free Space       :  " + actBinFreeSpaceR2 +"   " + expBinFreeSpaceR2);
			System.out.println("Second Row Free Qty         :  " + actBinFreeQtyR2 +"   " + expBinFreeQtyR2);
			System.out.println("Second Row To Be Allocated  :  " + actBinToBeAllocatedR2 +"   " + expBinToBeAllocatedR2);*/
			
			/*
			System.out.println("Third Row Bin Name         :  " + actBinNameR3 +"   " + expBinNameR3);
			System.out.println("Third Row Stock            :  " + actBinStockR3 +"   " + expBinStockR3);
			System.out.println("Third Row Capacity         :  " + actBinCapacityR3 +"   " + expBinCapacityR3);
			System.out.println("Third Row Load             :  " + actBinLoadR3 +"   " + expBinLoadR3);
			System.out.println("Third Row Free Space       :  " + actBinFreeSpaceR3 +"   " + expBinFreeSpaceR3);
			System.out.println("Third Row Free Qty         :  " + actBinFreeQtyR3 +"   " + expBinFreeQtyR3);
			System.out.println("Third Row To Be Allocated  :  " + actBinToBeAllocatedR3 +"   " + expBinToBeAllocatedR3);*/
			
			System.out.println("Bin Total Qty              :  " +actBinTotalQty +"  "+expBinTotalQty);
			System.out.println("Bin Base Uom               :  " +actBinBaseUom +"  "+expBinBaseUom);
			System.out.println("Bin Balance Txt            :  " +actBinBalanceQty +"  "+expBinBalanceQty);
			
			System.out.println("Bin Total Sum :  " + actBinSum +"   " + expBinSum);
						
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
			binAutoAllocateBtn.click();	
			
			ArrayList<String> binInwardGridListArrayAA = new ArrayList<String>();
			
			for(int i=0;i<binInwardGridListCount;i++)
            {
                    String data = binInwardGridList.get(i).getText();
                    binInwardGridListArrayAA.add(data);
            }
            
            
            String actbinInwardGridListAA=binInwardGridListArrayAA.toString();
            
            String expbinInwardGridListAA=excelReader.getCellData(xlSheetName, 165, 7);
            
            excelReader.setCellData(xlfile, xlSheetName, 165, 8, actbinInwardGridListAA);
            
            System.out.println("ActbinInwardGridList AA : " + actbinInwardGridListAA);
            System.out.println("ExpbinInwardGridList : " + expbinInwardGridList);
			
			/*String actBinToBeAlloctionValueOnClickOnAutoAllocate2R = binselect2ndRow_8thColumn.getText();
			String actBinToBeAlloctionValueOnClickOnAutoAllocate3R = binselect3rdRow_8thColumn.getText();
				
			String expBinToBeAlloctionValueOnClickOnAutoAllocate2R = "8.00";
			String expBinToBeAlloctionValueOnClickOnAutoAllocate3R = "90.00";
			
			System.out.println("Row 2 To Be Allocated Value Actual :  " + actBinToBeAlloctionValueOnClickOnAutoAllocate2R + " Value Actual : " + expBinToBeAlloctionValueOnClickOnAutoAllocate2R);
			System.out.println("Row 3 To Be Allocated Value Actual  : " + actBinToBeAlloctionValueOnClickOnAutoAllocate3R + " Value Actual : " + expBinToBeAlloctionValueOnClickOnAutoAllocate3R);*/
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
			binOkBtn.click();	
			
			if(/*actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn && actBinAlternateCategory==expBinAlternateCategory 
					&& actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn
					&& actBinOkBtn==expBinOkBtn
					
					&& actBinGroupNameR1.equalsIgnoreCase(expBinGroupNameR1)
					
					&& actBinNameR2.equalsIgnoreCase(expBinNameR2) && actBinStockR2.equalsIgnoreCase(expBinStockR2) 
					&& actBinCapacityR2.equalsIgnoreCase(expBinCapacityR2) && actBinLoadR2.equalsIgnoreCase(expBinLoadR2)
					&& actBinFreeSpaceR2.equalsIgnoreCase(expBinFreeSpaceR2) && actBinFreeQtyR2.equalsIgnoreCase(expBinFreeQtyR2)
					&& actBinToBeAllocatedR2.equalsIgnoreCase(expBinToBeAllocatedR2)*/
					
					/*&& actBinNameR3.equalsIgnoreCase(expBinNameR3) && actBinStockR3.equalsIgnoreCase(expBinStockR3) 
					&& actBinCapacityR3.equalsIgnoreCase(expBinCapacityR3) && actBinLoadR3.equalsIgnoreCase(expBinLoadR3)
					&& actBinFreeSpaceR3.equalsIgnoreCase(expBinFreeSpaceR3) && actBinFreeQtyR3.equalsIgnoreCase(expBinFreeQtyR3)
					&& actBinToBeAllocatedR3.equalsIgnoreCase(expBinToBeAllocatedR3)*/
					
					actMethod==true && actbinInwardGridList.equalsIgnoreCase(expbinInwardGridList) && actbinInwardGridListAA.equalsIgnoreCase(expbinInwardGridListAA)
					
					&& actBinTotalQty.equalsIgnoreCase(expBinTotalQty) && actBinBaseUom.equalsIgnoreCase(expBinBaseUom) 
					&& actBinBalanceQty.equalsIgnoreCase(expBinBalanceQty)
					
					&& actBinSum.equalsIgnoreCase(expBinSum))
			{
				excelReader.setCellData(xlfile, xlSheetName, 159, 9, resPass);
				System.out.println("Manual Spilt Bin ");
				return true;
			}
			else
			{
				
				excelReader.setCellData(xlfile, xlSheetName, 159, 9, resFail);
				System.out.println("Manual Did not Spilt Bin ");
				return false;
			}
		}
		 catch (Exception e) 
		 {
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binCancelBtn));
			 binCancelBtn.click();	
				
			 String exception =e.getMessage().substring(0, 50);
			 excelReader.setExceptionInExcel(xlfile, xlSheetName, 151, 10, e.getMessage());
			 System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			 return false;
		 } 
  	}

  

  @FindBy(xpath="//*[@id='id_transaction_bins_grid_body']/tr")
  private static List<WebElement> binPopUpRowCount;

  public boolean checkOpeningStocksNewVoucherBinPopUpValuesAfterFullQtyConsumeinPreviousRows() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";		
	
		try
		{	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemcount=itemListCount.size();
			
			System.err.println(itemcount);
				
			for(int i=0 ; i < itemcount ;i++)
			{
				String data=itemListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 166, 6)))
				{
					itemListCount.get(i).click();
					
					break;
				}
			}
				
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.click();
			enter_UnitTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 167, 6));
			
			enter_Quantity.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 168, 6));
			
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchTxt));
			
			boolean actBinSearchTxt                = binSearchTxt.isDisplayed();
			boolean actBinSearchBtn                = binSearchBtn.isDisplayed();
			//boolean actBinAlternateCategory        = binAlternateCategoryCheckBtn.isDisplayed();
			boolean actBinAutoAllocateBtn          = binAutoAllocateBtn.isDisplayed();
			boolean actBinPickBtn                  = binPickBtn.isDisplayed();
			boolean actBinCancelBtn                = binCancelBtn.isDisplayed();
			boolean actBinOkBtn                    = binOkBtn.isEnabled();
					
			boolean expBinSearchTxt                = true;
			boolean expBinSearchBtn                = true;
			boolean expBinAlternateCategory        = true;
			boolean expBinAutoAllocateBtn          = true;
			boolean expBinPickBtn                  = true;
			boolean expBinCancelBtn                = true;
			boolean expBinOkBtn                    = true;
				
			System.out.println("Bin Search Value Actual                :  " + actBinSearchTxt +         " Value Expected : " + expBinSearchTxt);
			System.out.println("Bin Search Btn Value Actual            :  " + actBinSearchBtn +         " Value Expected : " + expBinSearchBtn);
			//System.out.println("Bin Alternate Category Value Actual    :  " + actBinAlternateCategory + " Value Expected : " + expBinAlternateCategory);
			System.out.println("Bin Auto Allocate Btn Value Actual     :  " + actBinAutoAllocateBtn +   " Value Expected : " + expBinAutoAllocateBtn);
			System.out.println("Bin Pick Btn Value Actual              :  " + actBinPickBtn +           " Value Expected : " + expBinPickBtn);
			System.out.println("Bin Cancel Btn Value Actual            :  " + actBinCancelBtn +         " Value Expected : " + expBinCancelBtn);
			System.out.println("Bin Ok Btn Value Actual                :  " + actBinOkBtn +             " Value Expected : " + expBinOkBtn);
			
			boolean actMethod = actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn /*&& actBinAlternateCategory==expBinAlternateCategory*/ 
								&& actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn
								&& actBinOkBtn==expBinOkBtn;
			
			String actResult = Boolean.toString(actMethod);
			
			excelReader.setCellData(xlfile, xlSheetName, 166, 8, actResult.toUpperCase());
			
			
			int count = binPopUpRowCount.size();
			
			String actbinPopUpRowCount = Integer.toString(count);
			
			String expbinPopUpRowCount = excelReader.getCellData(xlSheetName, 167, 7);
			
			System.out.println("binPopUpRowCount  Actual : "+actbinPopUpRowCount + " Value Expected : " + expbinPopUpRowCount);
			
			excelReader.setCellData(xlfile, xlSheetName, 167, 8, actbinPopUpRowCount);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binCancelBtn));
			binCancelBtn.click();	
			
			Thread.sleep(2000);
			
			for(int i=1;i<=4;i++)
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(thirdRowIndex));
				thirdRowIndex.click();	
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
				deleteRowBtn.click();	
			}
			
			if(actMethod==true && actbinPopUpRowCount.equalsIgnoreCase(expbinPopUpRowCount))
			{
				excelReader.setCellData(xlfile, xlSheetName, 166, 9, resPass);
				System.out.println("Manual Spilt Bin ");
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 166, 9, resFail);
				System.out.println("Manual Did not Spilt Bin ");
				return false;
			}
		}
		catch (Exception e) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binCancelBtn));
			binCancelBtn.click();	
			
			for(int i=1;i<=4;i++)
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(thirdRowIndex));
				thirdRowIndex.click();	
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
				deleteRowBtn.click();	
			}	
			
			String exception =e.getMessage().substring(0, 50);
			excelReader.setExceptionInExcel(xlfile, xlSheetName, 166, 10, e.getMessage());
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		} 
  }

  
	
  public boolean checkOpeningStocksNewVoucherWithRMAUnitsAndMandatoryMessageInThirdRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
		
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
	
	try
	{
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_9thColumn));
		select2ndRow_9thColumn.click();
			
		Thread.sleep(2000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount = itemListCount.size();
		
		System.err.println(itemcount);
			
		for(int i=0 ; i < itemcount ;i++)
		{
			String data = itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 169, 6)))
			{
				itemListCount.get(i).click();
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		String actUnitsColumnSelectingRMAProduct = select3rdRow_2ndColumn.getText();
		String expUnitsColumnSelectingRMAProduct = excelReader.getCellData(xlSheetName, 170, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 170, 8, actUnitsColumnSelectingRMAProduct);
		
		System.out.println("Units Column Value is display On Select       : " + actUnitsColumnSelectingRMAProduct +  "  Value Expected : " + expUnitsColumnSelectingRMAProduct);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		String expValidationMessage=excelReader.getCellData(xlSheetName, 171, 7);
		
		String actValidationMessage=checkValidationMessage(expValidationMessage);
		
		excelReader.setCellData(xlfile, xlSheetName, 171, 8, actValidationMessage);
		
		System.out.println("Units Column Value is display On Select       : " + actValidationMessage +  "  Value Expected : " + expValidationMessage);
		
		if(actUnitsColumnSelectingRMAProduct.equalsIgnoreCase(expUnitsColumnSelectingRMAProduct)
			 &&	actValidationMessage.equalsIgnoreCase(expValidationMessage))
		{
			System.out.println("Test Pass : error Message Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 169, 9, resPass);	
			return true;
		}
		else
		{
			System.out.println("Test Fail : error Message Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 169, 9, resFail);
			return false;
		}
	  }
	 catch (Exception e) 
	 {
		 String exception =e.getMessage().substring(0, 50);
		 excelReader.setExceptionInExcel(xlfile, xlSheetName, 169, 10, e.getMessage());
		 System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		 return false;
	 } 
	}
	
  
	
  
  
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[3]")
	private static WebElement  clickOnUnits;
  
  
 public boolean checkOpeningStocksNewVoucherRmaWithZeroQuantity() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
 {
		
	 try
	 {
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(clickOnUnits));
		clickOnUnits.click();
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.click();
		enter_Quantity.clear();
		enter_Quantity.sendKeys(Keys.TAB);
				
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
        enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		String expValidationMessage     = excelReader.getCellData(xlSheetName, 173, 7);
		
		String actValidationMessage     = checkValidationMessage(expValidationMessage);
		
		excelReader.setCellData(xlfile, xlSheetName, 173, 8, actValidationMessage);
		
		System.out.println("Message On Save Rma With Zero Qty     :  " + actValidationMessage +" Value Expected : " + expValidationMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaCancelBtn));
		rmaCancelBtn.click();
			
		if(actValidationMessage.equalsIgnoreCase(expValidationMessage))
		{
			System.out.println("Test Pass : error Message Displayed");		
			excelReader.setCellData(xlfile, xlSheetName, 172, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : error Message Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 172, 9, resFail);
			return false;
		}
	 }
	 catch (Exception e) 
	 {
		 String exception =e.getMessage().substring(0, 50);
		 excelReader.setExceptionInExcel(xlfile, xlSheetName, 172, 10, e.getMessage());
		 System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		 return false;
	 } 
	}

    public boolean checkRMAPopupScreen() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{	
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		try
		{
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_3rdColumn));
			select3rdRow_3rdColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.click();
			enter_Quantity.clear();
			enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 174, 6));
			enter_Quantity.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.click();
			enter_Rate.clear();
			enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 175, 6));
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaScreenTitle));
			
			boolean actRmaSerialNumberTxtField     = rmaSerialNumberTxtField.isDisplayed();
			boolean actRmaQuantityTxtField         = rmaQuantityTxtField.isDisplayed();
			boolean actRmaAddBtn                   = rmaAddBtn.isDisplayed();
			boolean actRmaNumberofItemsLabel       = rmaNumberofItemsLabel.isDisplayed();
			boolean actRmaTableHeadingRMA          = rmaTableHeadingRMA.isDisplayed();
			boolean actRmaTableHeadingDocumentNo   = rmaTableHeadingDocumentNo.isDisplayed();
			boolean actRmaTableHeadingDocumentDate = rmaTableHeadingDocumentDate.isDisplayed();
			boolean actRmaClearBtn                 = rmaClearBtn.isDisplayed();
			boolean actRmaOkBtn                    = rmaOkBtn.isDisplayed();
			boolean actRmaCancelBtn                = rmaCancelBtn.isDisplayed();
			boolean actRmaCloseBtn                 = rmaCloseBtn.isDisplayed();
			
			boolean exprmaSerialNumberTxtField     = true;
			boolean exprmaQuantityTxtField         = true;
			boolean exprmaAddBtn                   = true;
			boolean exprmaNumberofItemsLabel       = true;
			boolean exprmaTableHeadingRMA          = true;
			boolean exprmaTableHeadingDocumentNo   = true;
			boolean exprmaTableHeadingDocumentDate = true;
			boolean exprmaClearBtn                 = true;
			boolean exprmaOkBtn                    = true;
			boolean exprmaCancelBtn                = true;
			boolean exprmaCloseBtn                 = true;
			
			boolean actMethod = actRmaSerialNumberTxtField==exprmaSerialNumberTxtField && actRmaQuantityTxtField==exprmaQuantityTxtField  && actRmaAddBtn==exprmaAddBtn
								&& actRmaNumberofItemsLabel==exprmaNumberofItemsLabel && actRmaNumberofItemsLabel==exprmaTableHeadingRMA
								&& actRmaTableHeadingDocumentNo==exprmaTableHeadingDocumentNo && actRmaTableHeadingDocumentDate==exprmaTableHeadingDocumentDate
								&& actRmaClearBtn==exprmaClearBtn && actRmaOkBtn==exprmaOkBtn && actRmaCancelBtn==exprmaCancelBtn && actRmaCloseBtn==exprmaCloseBtn;
			
			String actResult = Boolean.toString(actMethod);
			
			excelReader.setCellData(xlfile, xlSheetName, 174, 8, actResult.toUpperCase());
				
			System.out.println("Rma Serial Number Text Field 	   : " + actRmaSerialNumberTxtField	    +   "  Value Expected : " + exprmaSerialNumberTxtField);
			System.out.println("Rma Qty Field              	 	   : " + actRmaQuantityTxtField		    +   "  Value Expected : " + exprmaQuantityTxtField);
			System.out.println("Rma Add Button 					   : " + actRmaAddBtn				    +   "  Value Expected : " + exprmaAddBtn);
			System.out.println("Rma Number Of Items 			   : " + actRmaNumberofItemsLabel	    +   "  Value Expected : " + exprmaNumberofItemsLabel);
			System.out.println("Rma Table heading Rma  			   : " + actRmaTableHeadingRMA		    +   "  Value Expected : " + exprmaTableHeadingRMA);
			System.out.println("Rma Table Heading Document Number  : " + actRmaTableHeadingDocumentNo   +   "  Value Expected : " + exprmaTableHeadingDocumentNo);
			System.out.println("Rma Table Heading Document Date    : " + actRmaTableHeadingDocumentDate +   "  Value Expected : " + exprmaTableHeadingDocumentDate);
			System.out.println("Rma Clear Button                   : " + actRmaClearBtn				    +   "  Value Expected : " + exprmaClearBtn);
			System.out.println("Rma Ok Button                      : " + actRmaOkBtn					+   "  Value Expected : " + exprmaOkBtn);
			System.out.println("Rma Cancel Button                  : " + actRmaCancelBtn				+   "  Value Expected : " + exprmaCancelBtn);
			System.out.println("Rma Close Button  				   : " + actRmaCloseBtn				    +   "  Value Expected : " + exprmaCloseBtn);
			
			if(actMethod==true)
			{
				System.out.println("***Test Pass: RMA Popup Screen Appeared with all the Options***");
				excelReader.setCellData(xlfile, xlSheetName, 174, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("***Test Fail: RMA Popup Screen NOT Appeared with all the Options***");
				excelReader.setCellData(xlfile, xlSheetName, 174, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage().substring(0, 50);
			excelReader.setExceptionInExcel(xlfile, xlSheetName, 174, 10, e.getMessage());
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		} 
	}
	
  
    public boolean checkAddButtonInRmaPageWithSelectingSerialNumbers() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaAddBtn));
			rmaAddBtn.click();
			
			getWaitForAlert();
			
			String actAlert=getAlert().getText();
			String expAlert=excelReader.getCellData(xlSheetName, 177, 7);
			
			excelReader.setCellData(xlfile, xlSheetName, 177, 8, actAlert);
			
			System.out.println("************************************* checkAddButtonInRmaWithEmptyInputs  *********************************");
			
			System.out.println("Alert On Clicking Add With Empty Inputs   : "+actAlert	   +"  Value Expected : "+expAlert);
			
			if(actAlert.equalsIgnoreCase(expAlert))
			{
				System.out.println("Test Pass : alert Dipalyed");
				excelReader.setCellData(xlfile, xlSheetName, 176, 9, resPass);
				getAlert().accept();
				return true;
			}
			else
			{
				System.out.println("Test Fail : Alert Not Displayed");
				excelReader.setCellData(xlfile, xlSheetName, 176, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage().substring(0, 50);
			excelReader.setExceptionInExcel(xlfile, xlSheetName, 176, 10, e.getMessage());
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		} 
	}
    
    
    public boolean checkOKButtonInRmaPageWithoutSelectingSerialNumbers() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaOkBtn));
			rmaOkBtn.click();
			
			getWaitForAlert();
			
			String actAlert=getAlert().getText();
			
			String expAlert=excelReader.getCellData(xlSheetName, 179, 7);
			
			excelReader.setCellData(xlfile, xlSheetName, 179, 8, actAlert);
		
	        System.out.println("Test Pass : alert Dipalyed");
			
			getAlert().accept();
				
			getWaitForAlert();
			
			String actAlert1=getAlert().getText();
			
			String expAlert1=excelReader.getCellData(xlSheetName, 180, 7);
			
			excelReader.setCellData(xlfile, xlSheetName, 180, 8, actAlert1);
			
			System.out.println("************************************* checkOKButtonInRmaWithEmptyInputs  *********************************");
			
			System.out.println("Alert On Clicking Ok With Empty Inputs   : "+actAlert	   +"  Value Expected : "+expAlert);
			
	        System.out.println("************************************* checkOKButtonInRmaWithEmptyInputs  *********************************");
			
			System.out.println("Alert On Clicking Ok With Empty Inputs   : "+actAlert1	   +"  Value Expected : "+expAlert1);
			
	
			if(actAlert.equalsIgnoreCase(expAlert) && actAlert1.equalsIgnoreCase(expAlert1))
			{
			
				System.out.println("Alert Displayed");
				excelReader.setCellData(xlfile, xlSheetName, 178, 9, resPass);
				getAlert().accept();
				
				return true;
			}
			else
			{
				System.out.println("Test Fail : Alert Not Displayed");
				excelReader.setCellData(xlfile, xlSheetName, 178, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage().substring(0, 50);
			excelReader.setExceptionInExcel(xlfile, xlSheetName, 178, 10, e.getMessage());
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		} 
		
	}
    
    
    public boolean checkCancelButtonInRmaPage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaCancelBtn));
		rmaCancelBtn.click();
		
		try
		{
			if(rmaSerialNumberTxtField.isDisplayed())
			{
				System.out.println("test Fail : rma Cancel Is not Working");
				excelReader.setCellData(xlfile, xlSheetName, 181, 9, resFail);
				return false;
			}
			else
			{
				System.out.println("test  Pass : rma Cancel Is Working");
				excelReader.setCellData(xlfile, xlSheetName, 181, 9, resPass);
				return true;
			}
		}
		catch(Exception e)
		{
			System.out.println("test  Pass : rma Cancel Is Working");
			excelReader.setCellData(xlfile, xlSheetName, 181, 9, resPass);
			return true;
		}
	}
    

    @FindBy (xpath="//input[@id='RM_RMANO']")
	private static WebElement rma_EnterRMA;

    @FindBy (xpath="//td[@id='RMA_Table_col_1-4']//i[@class='icon-clear icon-font']")
    private static WebElement rmaTableRow1ClearBtn;
    
    @FindBy(xpath="//*[@id='RMA_Table_body']/tr/td[2]")
    private static List<WebElement> rmapopupBodyGrid;
    
    public boolean checkRmaPageWithSelectingPartialSerialNumberLessThanInputedQtyInVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_5thColumn));
			select3rdRow_5thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.click();
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaSerialNumberTxtField));
			rmaSerialNumberTxtField.click();
			rmaSerialNumberTxtField.sendKeys(excelReader.getCellData(xlSheetName, 182, 6));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaAddBtn));
			rmaAddBtn.click();
			
			int rmapopupBodyGridCount = rmapopupBodyGrid.size();
			
			ArrayList<String> rmapopupBodyGridArray = new ArrayList<String>();
			
			for(int i=0;i<rmapopupBodyGridCount;i++)
			{
				String data = rmapopupBodyGrid.get(i).getText();
				rmapopupBodyGridArray.add(data);
			}
			
			
			System.err.println("rmapopupBodyGrid : "+ rmapopupBodyGridArray);
					
			// Actual
			String  actRmaRow1=rma_EnterRMA.getAttribute("value");
			String 	actRmaRow2=rmaTableRow2Column1.getText();
			String 	actRmaRow3=rmaTableRow3Column1.getText();
			
			// Expected
			String  expRmaRow1=excelReader.getCellData(xlSheetName, 183, 7);
			String 	expRmaRow2=excelReader.getCellData(xlSheetName, 184, 7);
			String 	expRmaRow3=excelReader.getCellData(xlSheetName, 185, 7);
			
			excelReader.setCellData(xlfile, xlSheetName, 183, 8, actRmaRow1);
			excelReader.setCellData(xlfile, xlSheetName, 184, 8, actRmaRow2);
			excelReader.setCellData(xlfile, xlSheetName, 185, 8, actRmaRow3);
			
			System.out.println("************************************* checkRmaWithSerialNumbersNotCompletely  *********************************");
			
			System.out.println("Rma Row 1 Serial Number   : "+actRmaRow1	   +"  Value Expected : "+expRmaRow1);
			System.out.println("Rma Row 2 Serial Number   : "+actRmaRow2	   +"  Value Expected : "+expRmaRow2);
			System.out.println("Rma Row 3 Serial Number   : "+actRmaRow3	   +"  Value Expected : "+expRmaRow3);
			
			if(actRmaRow1.equalsIgnoreCase(expRmaRow1) && actRmaRow2.equalsIgnoreCase(expRmaRow2)
					&& actRmaRow3.equalsIgnoreCase(expRmaRow3))
			{
				System.out.println("Test Pass : 3 Rows Displayed");
				excelReader.setCellData(xlfile, xlSheetName, 182, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : 3 Rows NOT Displayed");
				excelReader.setCellData(xlfile, xlSheetName, 182, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage().substring(0, 50);
			excelReader.setExceptionInExcel(xlfile, xlSheetName, 182, 10, e.getMessage());
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		} 
	}
    
    
    public boolean checkOkButtonInRmaPageWithSelectionOfPartialSerialNumbers() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaOkBtn));
			rmaOkBtn.click();
			
			getWaitForAlert();
			
			String actAlert=getAlert().getText();
			String expAlert=excelReader.getCellData(xlSheetName, 187, 7);
			
			excelReader.setCellData(xlfile, xlSheetName, 187, 8, actAlert);
			
			System.out.println("************************************* checkOkButtonRmaWithSerialNumbersNotCompletely  *********************************");
			
			System.out.println("Alert On Clicking Ok With Empty Inputs   : "+actAlert	   +"  Value Expected : "+expAlert);
			
			getAlert().accept();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_3rdColumn));
			String actVoucherQtyR3=select3rdRow_3rdColumn.getText();
			String expVoucherQtyR3=excelReader.getCellData(xlSheetName, 188, 7);
			
			excelReader.setCellData(xlfile, xlSheetName, 188, 8, actVoucherQtyR3);
					
			System.out.println("Third Row Voucher Qty On Ok Button In Alert   : "+actVoucherQtyR3	   +"  Value Expected : "+expVoucherQtyR3);
			
			if(actAlert.equalsIgnoreCase(expAlert) && actVoucherQtyR3.equalsIgnoreCase(expVoucherQtyR3))
			{
				System.out.println("Test Pass : Alert Dipaled And Clicked On Ok");
				excelReader.setCellData(xlfile, xlSheetName, 186, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Alert Not Displayed");
				excelReader.setCellData(xlfile, xlSheetName, 186, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage().substring(0, 50);
			excelReader.setExceptionInExcel(xlfile, xlSheetName, 186, 10, e.getMessage());
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		} 
	}
	
    
    public boolean checkClearButtonInRmaRowSerialNumberRmaPage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		try
		{
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_3rdColumn));
			select3rdRow_3rdColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("5");
			enter_Quantity.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_9thColumn));
			select3rdRow_9thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
			enter_RMA.sendKeys(Keys.SPACE);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaTableRow1ClearBtn));
			rmaTableRow1ClearBtn.click();
			
			//rmaTableRow1Column1.getText().equalsIgnoreCase("RmaR@#1")
			
			boolean actRmavalueR1=rmaTableRow1Column1.getText().isEmpty();
			
			boolean expRmavalueR1=true;
			
			String actResult = Boolean.toString(actRmavalueR1);
			
			excelReader.setCellData(xlfile, xlSheetName, 189, 8, actResult.toUpperCase());
			
			System.out.println("************************************* checkClearButtoninRmaGrid  *********************************");
			System.out.println("Rma value In Rma Pop Up on Row Clear Button : "+actRmavalueR1+"  Value Expected : "+expRmavalueR1);
			
			if(actRmavalueR1==expRmavalueR1)
			{
				System.out.println("Test Fail : Clear Button Not Working");
				excelReader.setCellData(xlfile, xlSheetName, 189, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Pass : Clear Button Working");
				excelReader.setCellData(xlfile, xlSheetName, 189, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage().substring(0, 50);
			excelReader.setExceptionInExcel(xlfile, xlSheetName, 189, 10, e.getMessage());
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		} 
	}
	
    
    public boolean checkClearButtonInRmaPage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaClearBtn));
			rmaClearBtn.click();
			
			boolean actRmavalueR2=rmaTableRow2Column1.getText().isEmpty();
			
			boolean expRmavalueR2=true;
			
			boolean actRmavalueR3=rmaTableRow3Column1.getText().isEmpty();
			
			boolean expRmavalueR3=true;
			
			boolean actMethod = actRmavalueR2==expRmavalueR2 && actRmavalueR3==expRmavalueR3;
			
			String actResult = Boolean.toString(actMethod);
			
			excelReader.setCellData(xlfile, xlSheetName, 190, 8, actResult.toUpperCase());
			
			System.out.println("************************************* checkClearButtoninRma  *********************************");
			System.out.println("Rma value Row 2 In Rma Pop Up on Clear Button : "+actRmavalueR2+"  Value Expected : "+expRmavalueR2);
			System.out.println("Rma value Row 3 In Rma Pop Up on Clear Button : "+actRmavalueR3+"  Value Expected : "+expRmavalueR3);
			
			if(actMethod==true)
			{
				System.out.println("Test Pass : Clear Button Working");
				excelReader.setCellData(xlfile, xlSheetName, 190, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Clear Button Not Working");
				excelReader.setCellData(xlfile, xlSheetName, 190, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage().substring(0, 50);
			excelReader.setExceptionInExcel(xlfile, xlSheetName, 190, 10, e.getMessage());
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		} 
		
	}
	
    
    public boolean checkInputTheDuplicateSerialNumbersIsAllowingInRmaPage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaSerialNumberTxtField));
			rmaSerialNumberTxtField.click();
			rmaSerialNumberTxtField.sendKeys(excelReader.getCellData(xlSheetName, 191, 6));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaAddBtn));
			rmaAddBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaTableRow1Column1));
			String actRmavalueR1=rma_EnterRMA.getAttribute("value");
			String expRmavalueR1=excelReader.getCellData(xlSheetName, 192, 7);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaTableRow2Column1));
			String actRmavalueR2=rmaTableRow2Column1.getText();
			String expRmavalueR2=excelReader.getCellData(xlSheetName, 193, 7);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaSerialNumberTxtField));
			rmaSerialNumberTxtField.click();
			rmaSerialNumberTxtField.sendKeys(excelReader.getCellData(xlSheetName, 192, 6));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaAddBtn));
			rmaAddBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaTableRow3Column1));
			String actRmavalueR3=rmaTableRow3Column1.getText();
			String expRmavalueR3=excelReader.getCellData(xlSheetName, 194, 7);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaTableRow4Column1));
			String actRmavalueR4=rmaTableRow4Column1.getText();
			String expRmavalueR4=excelReader.getCellData(xlSheetName, 195, 7);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaSerialNumberTxtField));
			rmaSerialNumberTxtField.click();
			rmaSerialNumberTxtField.sendKeys(excelReader.getCellData(xlSheetName, 193, 6));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaAddBtn));
			rmaAddBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaTableRow5Column1));
			String actRmavalueR5=rmaTableRow5Column1.getText();
			String expRmavalueR5=excelReader.getCellData(xlSheetName, 196, 7);
			
			excelReader.setCellData(xlfile, xlSheetName, 192, 8, actRmavalueR1);
			excelReader.setCellData(xlfile, xlSheetName, 193, 8, actRmavalueR2);
			excelReader.setCellData(xlfile, xlSheetName, 194, 8, actRmavalueR3);
			excelReader.setCellData(xlfile, xlSheetName, 195, 8, actRmavalueR4);
			excelReader.setCellData(xlfile, xlSheetName, 196, 8, actRmavalueR5);
			
			System.out.println("************************************* checkInputingDuplicateSerialNumbers  *********************************");
			System.out.println("Rma value Row 1 In Rma Pop Up Duplicate Serial No : "+actRmavalueR1+"  Value Expected : "+expRmavalueR1);
			System.out.println("Rma value Row 2 In Rma Pop Up Duplicate Serial No : "+actRmavalueR2+"  Value Expected : "+expRmavalueR2);
			System.out.println("Rma value Row 3 In Rma Pop Up Duplicate Serial No : "+actRmavalueR3+"  Value Expected : "+expRmavalueR3);
			System.out.println("Rma value Row 4 In Rma Pop Up Duplicate Serial No : "+actRmavalueR4+"  Value Expected : "+expRmavalueR4);
			System.out.println("Rma value Row 5 In Rma Pop Up Duplicate Serial No : "+actRmavalueR5+"  Value Expected : "+expRmavalueR5);
			
			if(actRmavalueR1.equalsIgnoreCase(expRmavalueR1) && actRmavalueR2.equalsIgnoreCase(expRmavalueR2)
					&& actRmavalueR3.equalsIgnoreCase(expRmavalueR3) && actRmavalueR4.equalsIgnoreCase(expRmavalueR4)
					&& actRmavalueR5.equalsIgnoreCase(expRmavalueR5))
			{
				System.out.println("Test Pass : Duplicate data  Not Allowing");
				excelReader.setCellData(xlfile, xlSheetName, 191, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Duplicate data  Allowing");
				excelReader.setCellData(xlfile, xlSheetName, 191, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage().substring(0, 50);
			excelReader.setExceptionInExcel(xlfile, xlSheetName, 191, 10, e.getMessage());
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		} 
	}
	
    
    public boolean checkInputSerialNumbersIsAllowingGreaterThanInputVoucherQuantity() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaSerialNumberTxtField));
			rmaSerialNumberTxtField.click();
			rmaSerialNumberTxtField.sendKeys(excelReader.getCellData(xlSheetName, 197, 6));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaAddBtn));
			rmaAddBtn.click();
			
			getWaitForAlert();
			
			String actAlert=getAlert().getText();
			String expAlert=excelReader.getCellData(xlSheetName, 198, 7);
			
			excelReader.setCellData(xlfile, xlSheetName, 198, 8, actAlert);
			
			System.out.println("************************************* checkInputingSerialNumbersGreaterthanQuantity  *********************************");
			
			System.out.println("Alert On Input Serial No Greater Than Qty   : "+actAlert	   +"  Value Expected : "+expAlert);
			
			getAlert().accept();
		
		
			if(actAlert.equalsIgnoreCase(expAlert))
			{
				System.out.println("Test Pass : Alert Displayed");
				excelReader.setCellData(xlfile, xlSheetName, 197, 9, resPass);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaClearBtn));
				rmaClearBtn.click();
				return true;
			}
			else
			{
				System.out.println("Test Fail : Alert NOT Displayed");
				excelReader.setCellData(xlfile, xlSheetName, 197, 9, resFail);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaClearBtn));
				rmaClearBtn.click();
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage().substring(0, 50);
			excelReader.setExceptionInExcel(xlfile, xlSheetName, 197, 10, e.getMessage());
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		} 
	}
	
    
    
    
    public boolean checkInputingDifferentSerialNumbers() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaSerialNumberTxtField));
			rmaSerialNumberTxtField.click();
			rmaSerialNumberTxtField.sendKeys(excelReader.getCellData(xlSheetName, 199, 6));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaAddBtn));
			rmaAddBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaSerialNumberTxtField));
			rmaSerialNumberTxtField.click();
			rmaSerialNumberTxtField.sendKeys(excelReader.getCellData(xlSheetName, 200, 6));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaAddBtn));
			rmaAddBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaSerialNumberTxtField));
			rmaSerialNumberTxtField.click();
			rmaSerialNumberTxtField.sendKeys(excelReader.getCellData(xlSheetName, 201, 6));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaAddBtn));
			rmaAddBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaTableRow1Column1));
			String actRmavalueR1=rma_EnterRMA.getAttribute("value");
			String expRmavalueR1=excelReader.getCellData(xlSheetName, 200, 7);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaTableRow2Column1));
			String actRmavalueR2=rmaTableRow2Column1.getText();
			String expRmavalueR2=excelReader.getCellData(xlSheetName, 201, 7);
			
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaTableRow3Column1));
			String actRmavalueR3=rmaTableRow3Column1.getText();
			String expRmavalueR3=excelReader.getCellData(xlSheetName, 202, 7);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaTableRow4Column1));
			String actRmavalueR4=rmaTableRow4Column1.getText();
			String expRmavalueR4=excelReader.getCellData(xlSheetName, 203, 7);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaTableRow5Column1));
			String actRmavalueR5=rmaTableRow5Column1.getText();
			String expRmavalueR5=excelReader.getCellData(xlSheetName, 204, 7);
			
			excelReader.setCellData(xlfile, xlSheetName, 200, 8, actRmavalueR1);
			excelReader.setCellData(xlfile, xlSheetName, 201, 8, actRmavalueR2);
			excelReader.setCellData(xlfile, xlSheetName, 202, 8, actRmavalueR3);
			excelReader.setCellData(xlfile, xlSheetName, 203, 8, actRmavalueR4);
			excelReader.setCellData(xlfile, xlSheetName, 204, 8, actRmavalueR5);
			
			System.out.println("************************************* checkInputingDifferentSerialNumbers  *********************************");
			System.out.println("Rma value Row 1 In Rma Pop Up Different Serial No : "+actRmavalueR1+"  Value Expected : "+expRmavalueR1);
			System.out.println("Rma value Row 2 In Rma Pop Up Different Serial No : "+actRmavalueR2+"  Value Expected : "+expRmavalueR2);
			System.out.println("Rma value Row 3 In Rma Pop Up Different Serial No : "+actRmavalueR3+"  Value Expected : "+expRmavalueR3);
			System.out.println("Rma value Row 4 In Rma Pop Up Different Serial No : "+actRmavalueR4+"  Value Expected : "+expRmavalueR4);
			System.out.println("Rma value Row 5 In Rma Pop Up Different Serial No : "+actRmavalueR5+"  Value Expected : "+expRmavalueR5);
			
			if(actRmavalueR1.equalsIgnoreCase(expRmavalueR1) && actRmavalueR2.equalsIgnoreCase(expRmavalueR2)
					&& actRmavalueR3.equalsIgnoreCase(expRmavalueR3) && actRmavalueR4.equalsIgnoreCase(expRmavalueR4)
					&& actRmavalueR5.equalsIgnoreCase(expRmavalueR5))
			{
				System.out.println("Test Pass : Allowing Different Serial numbers");
				excelReader.setCellData(xlfile, xlSheetName, 199, 9, resPass);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaOkBtn));
				rmaOkBtn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
				enter_RMA.sendKeys(Keys.TAB);
				
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Allowing Different Serial numbers");
				excelReader.setCellData(xlfile, xlSheetName, 199, 9, resFail);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaOkBtn));
				rmaOkBtn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
				enter_RMA.sendKeys(Keys.TAB);
				
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage().substring(0, 50);
			excelReader.setExceptionInExcel(xlfile, xlSheetName, 199, 10, e.getMessage());
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		} 
	}
	
    
    public boolean checkNewItemWithSameSerialNos()throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemcount=itemListCount.size();
			
			System.err.println(itemcount);
				
			for(int i=0 ; i < itemcount ;i++)
			{
				String data=itemListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 205, 6)))
				{
					itemListCount.get(i).click();
					
					break;
				}
			}
				
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_3rdColumn));
			select4thRow_3rdColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 206, 6));
			enter_Quantity.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 207, 6));
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_9thColumn));
			select4thRow_9thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaSerialNumberTxtField));
			rmaSerialNumberTxtField.sendKeys(excelReader.getCellData(xlSheetName, 208, 6));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaAddBtn));
			rmaAddBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaOkBtn));
			rmaOkBtn.click();
				
			getWaitForAlert();
			String actAlert=getAlert().getText();
			String expAlert=excelReader.getCellData(xlSheetName, 206, 7);
			
			excelReader.setCellData(xlfile, xlSheetName, 206, 8, actAlert);
			
			System.out.println("************************************* checkNewItemWithSameSerialNos  *********************************");
			System.out.println("Alert On Inputing Same Serial no : "+actAlert+"  Value Expected : "+expAlert);
			
			if (actAlert.equalsIgnoreCase(expAlert)) 
			{
				System.out.println("***Test Pass: NOT allowing Duplicates***");
				excelReader.setCellData(xlfile, xlSheetName, 205, 9, resPass);
				
				getAlert().accept();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaSerialNumberTxtField));
				rmaSerialNumberTxtField.sendKeys(excelReader.getCellData(xlSheetName, 209, 6));
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaAddBtn));
				rmaAddBtn.click();
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaOkBtn));
				rmaOkBtn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
				enter_RMA.sendKeys(Keys.TAB);
				
				Thread.sleep(2000);
					
			     return true;
			}
			else
			{
				System.out.println("***Test Fail: allowing Duplicates***");
				excelReader.setCellData(xlfile, xlSheetName, 205, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage().substring(0, 50);
			excelReader.setExceptionInExcel(xlfile, xlSheetName, 205, 10, e.getMessage());
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		} 
	}
    
    public boolean checkSavingVoucherByChangingVoucherQuantitySerialNumbersSame() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{	
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_3rdColumn));
			select4thRow_3rdColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 210, 6));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
		
			String expErrorMessage=excelReader.getCellData(xlSheetName, 211, 7);
			
			String validationMessage=checkValidationMessage(expErrorMessage);
			excelReader.setCellData(xlfile, xlSheetName, 211, 8, validationMessage);
			
			System.out.println("************************************* checkSavingVoucherByChangingQuantity  *********************************");
			
			System.out.println("Message On Saving Rma With Changing Qty     :  " + validationMessage +" Value Expected : " + "TRUE");
			
			
			if (validationMessage.equalsIgnoreCase(expErrorMessage)) 
			{
				System.out.println("***Test Pass: Error Message RMA numbers and quantity do not match is Displaying***");
				excelReader.setCellData(xlfile, xlSheetName, 210, 9, resPass);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fourthRowIndex));
				fourthRowIndex.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
				deleteRowBtn.click();
				
				return true;
			}
			else
			{
				System.out.println("***Test Fail: Error Message RMA numbers and quantity do not match is NOT Displaying***");
				excelReader.setCellData(xlfile, xlSheetName, 210, 9, resFail);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fourthRowIndex));
				fourthRowIndex.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
				deleteRowBtn.click();
				
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage().substring(0, 50);
			excelReader.setExceptionInExcel(xlfile, xlSheetName, 210, 10, e.getMessage());
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		} 
		
	}
    
    

    public boolean checkInputingSerialNumbers() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_9thColumn));
			select3rdRow_9thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
			enter_RMA.sendKeys(Keys.SPACE);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaClearBtn));
			rmaClearBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaSerialNumberTxtField));
			rmaSerialNumberTxtField.click();
			rmaSerialNumberTxtField.sendKeys(excelReader.getCellData(xlSheetName, 212, 6));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaAddBtn));
			rmaAddBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaTableRow1Column1));
			String actRmavalueR1=rma_EnterRMA.getAttribute("value");
			String expRmavalueR1=excelReader.getCellData(xlSheetName, 213, 7);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaTableRow2Column1));
			String actRmavalueR2=rmaTableRow2Column1.getText();
			String expRmavalueR2=excelReader.getCellData(xlSheetName, 214, 7);
						
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaTableRow3Column1));
			String actRmavalueR3=rmaTableRow3Column1.getText();
			String expRmavalueR3=excelReader.getCellData(xlSheetName, 215, 7);
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaTableRow4Column1));
			String actRmavalueR4=rmaTableRow4Column1.getText();
			String expRmavalueR4=excelReader.getCellData(xlSheetName, 216, 7);
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaTableRow5Column1));
			String actRmavalueR5=rmaTableRow5Column1.getText();
			String expRmavalueR5=excelReader.getCellData(xlSheetName, 217, 7);
			
			System.out.println("************************************* checkInputingSerialNumbers  *********************************");
			
			System.out.println("Rma value Row 1 In Rma Pop Up  : " + actRmavalueR1 + "  Value Expected : " + expRmavalueR1);
			System.out.println("Rma value Row 2 In Rma Pop Up  : " + actRmavalueR2 + "  Value Expected : " + expRmavalueR2);
			System.out.println("Rma value Row 3 In Rma Pop Up  : " + actRmavalueR3 + "  Value Expected : " + expRmavalueR3);
			System.out.println("Rma value Row 4 In Rma Pop Up  : " + actRmavalueR4 + "  Value Expected : " + expRmavalueR4);
			System.out.println("Rma value Row 5 In Rma Pop Up  : " + actRmavalueR5 + "  Value Expected : " + expRmavalueR5);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaOkBtn));
			rmaOkBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
			enter_RMA.sendKeys(Keys.TAB);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_9thColumn));
			String actRMATxt=select3rdRow_9thColumn.getText();
			
			String expRMATxt=excelReader.getCellData(xlSheetName, 218, 7);
			
			excelReader.setCellData(xlfile, xlSheetName, 213, 8, actRmavalueR1);
			excelReader.setCellData(xlfile, xlSheetName, 214, 8, actRmavalueR2);
			excelReader.setCellData(xlfile, xlSheetName, 215, 8, actRmavalueR3);
			excelReader.setCellData(xlfile, xlSheetName, 216, 8, actRmavalueR4);
			excelReader.setCellData(xlfile, xlSheetName, 217, 8, actRmavalueR5);
			excelReader.setCellData(xlfile, xlSheetName, 218, 8, actRMATxt);
			
			
			if(actRmavalueR1.equalsIgnoreCase(expRmavalueR1) && actRmavalueR2.equalsIgnoreCase(expRmavalueR2)
					&& actRmavalueR3.equalsIgnoreCase(expRmavalueR3) && actRmavalueR4.equalsIgnoreCase(expRmavalueR4)
					&& actRmavalueR5.equalsIgnoreCase(expRmavalueR5)
					
					&& actRMATxt.equalsIgnoreCase(expRMATxt))
			{
				System.out.println("Test Pass : Allowing Different Serial numbers");
				excelReader.setCellData(xlfile, xlSheetName, 212, 9, resPass);
			
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Allowing Different Serial numbers");
				excelReader.setCellData(xlfile, xlSheetName, 212, 9, resFail);
				
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage().substring(0, 50);
			excelReader.setExceptionInExcel(xlfile, xlSheetName, 212, 10, e.getMessage());
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		} 
	}
	
    
    
 
	@FindBy(xpath="//input[@id='id_body_38']")
	private static WebElement  enter_RMA;
	

	
	
  public boolean checkOpeningStocksNewAddingStockItemInFourthRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
		
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
		
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount=itemListCount.size();
		
		System.err.println(itemcount);
			
		for(int i=0 ; i < itemcount ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 219, 6)))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		String actdata            = select4thRow_2ndColumn.getText();
		String expdata            = excelReader.getCellData(xlSheetName, 220, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 220, 8, actdata);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.click();
		enter_Quantity.clear();
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 220, 6));
		enter_Quantity.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 221, 6));
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_3rdColumn));
		String act1            = select4thRow_3rdColumn.getText();
		String act2            = select4thRow_4thColumn.getText();
		String act3            = select4thRow_5thColumn.getText();
	
		String exp1,exp2,exp3,exp4;
		
		exp1                   = excelReader.getCellData(xlSheetName, 221, 7);
		exp2                   = excelReader.getCellData(xlSheetName, 222, 7);
		exp3                   = excelReader.getCellData(xlSheetName, 223, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 221, 8, act1);
		excelReader.setCellData(xlfile, xlSheetName, 222, 8, act2);
		excelReader.setCellData(xlfile, xlSheetName, 223, 8, act3);
	
		if(actdata.equalsIgnoreCase(expdata) && act1.equalsIgnoreCase(exp1) && act2.equalsIgnoreCase(exp2)
				&& act3.equalsIgnoreCase(exp3))
		{
			System.out.println("Test Pass : Data Entered in Fourth Row");
			excelReader.setCellData(xlfile, xlSheetName, 219, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Data NOT Entered in Fourth Row");
			excelReader.setCellData(xlfile, xlSheetName, 219, 9, resFail);
			return false;
		}		
	}
	catch (Exception e) 
	{
		String exception =e.getMessage().substring(0, 50);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 219, 10, e.getMessage());
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		return false;
	} 
  }
	
	
	@FindBy(xpath="//div[@id='dvHomeTransClose']//span[@class='icon-close icon-font6']")  
	private static WebElement  voucherhomeCloseBtn;
	
	public boolean checkOpeningStocksNewVoucherSave() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
	  excelReader=new ExcelReader(POJOUtility.getExcelPath());
	  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
		
	  try
	  {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
        String docno=documentNumberTxt.getAttribute("value");
		
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
		
		boolean actVoucherSaveMessageWithDocumentNo  = checkVoucherSavingMessage(docno);
		boolean expVoucherSaveMessageWithDocumentNo  = true;
		
		boolean actMethod = actVoucherSaveMessageWithDocumentNo==expVoucherSaveMessageWithDocumentNo; 
		
		String actResult = Boolean.toString(actMethod);
		
		excelReader.setCellData(xlfile, xlSheetName, 224, 8, actResult.toUpperCase());
		
		System.out.println("Voucher Saving Message With Document No :  " + actVoucherSaveMessageWithDocumentNo + " Value Expected : "+ expVoucherSaveMessageWithDocumentNo);
		
		if(actMethod==true)
		{
			System.out.println("Test Pass : Voucher Saved Successfully");
			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();*/
			
			excelReader.setCellData(xlfile, xlSheetName, 224, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Voucher NOT Saved Successfully");
		

			
			excelReader.setCellData(xlfile, xlSheetName, 224, 9, resFail);
			return false;
		}
	  }
	  catch (Exception e) 
	  {
		  String exception =e.getMessage().substring(0, 50);
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 224, 10, e.getMessage());
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  } 
	}
	
	
	//Editing the Opening Stocks New Voucher
	


/*	@FindBy(xpath="//label[@id='id_transactionentry_footer_panel_summary_value_26']")
	private static WebElement  QtyAmount;
	
	@FindBy(xpath="//label[@id='id_transactionentry_footer_panel_summary_value_28']")
	private static WebElement  GrossAmount;
	
	@FindBy(xpath="//span[@class='col-xs-6 icon-expand icon-font6 no_padding_left_right theme_color-inverse']")
	private static WebElement  new_footerExpandBtn;*/

	
	
	public boolean checkOpeningStocksNewSavedVoucherOnClickPreviousInEntryPage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
	
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
			previousBtn.click();
			
			boolean loading=checkLoadingMessage();
			
			System.out.println("VoucherLoadingMessage  : "+loading +" Value Expected : "+"TRUE");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			documentNumberTxt.click();
			
			String actdocNumber,expdocNumber;
			
			actdocNumber=documentNumberTxt.getAttribute("value");
			expdocNumber=excelReader.getCellData(xlSheetName, 226, 7);
			
			excelReader.setCellData(xlfile, xlSheetName, 226, 8, actdocNumber);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
	
			String actOsVoucherWarehouse=wareHouseTxt.getAttribute("value");
			String expOsVoucherWarehouse=excelReader.getCellData(xlSheetName, 227, 7);
			
			excelReader.setCellData(xlfile, xlSheetName, 227, 8, actOsVoucherWarehouse);
					
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_footerExpandBtn));
			new_footerExpandBtn.click();
			
			
			/*String actOsVoucherItemR1,actOsVoucherUnitsR1,actOsVoucherQtyR1,actOsVoucherRateR1,actOsVoucherGrossR1,actOsVoucherBatchR1;
			String actOsVoucherItemR2,actOsVoucherUnitsR2,actOsVoucherQtyR2,actOsVoucherRateR2,actOsVoucherGrossR2,actOsVoucherBinR2;
			String actOsVoucherItemR3,actOsVoucherUnitsR3,actOsVoucherQtyR3,actOsVoucherRateR3,actOsVoucherGrossR3,actOsVoucherRMAR3;
			String actOsVoucherItemR4,actOsVoucherUnitsR4,actOsVoucherQtyR4,actOsVoucherRateR4,actOsVoucherGrossR4,actOsVoucherBatchR4;*/
			
			String actOsVoucherFooterQty,actOsVoucherFooterGross,actOsVoucherFooterNet;
			
	
			/*String expOsVoucherItemR1,expOsVoucherUnitsR1,expOsVoucherQtyR1,expOsVoucherRateR1,expOsVoucherGrossR1,expOsVoucherBatchR1;
			String expOsVoucherItemR2,expOsVoucherUnitsR2,expOsVoucherQtyR2,expOsVoucherRateR2,expOsVoucherGrossR2,expOsVoucherBinR2;
			String expOsVoucherItemR3,expOsVoucherUnitsR3,expOsVoucherQtyR3,expOsVoucherRateR3,expOsVoucherGrossR3,expOsVoucherRMAR3;
			String expOsVoucherItemR4,expOsVoucherUnitsR4,expOsVoucherQtyR4,expOsVoucherRateR4,expOsVoucherGrossR4,expOsVoucherBatchR4;*/
			
			String expOsVoucherFooterQty,expOsVoucherFooterGross,expOsVoucherFooterNet;
	
		
			/*expOsVoucherItemR1="BATCH BR ITEM";
			expOsVoucherUnitsR1="Dozs";
			expOsVoucherQtyR1="5.00";
			expOsVoucherRateR1="9.00";
			expOsVoucherGrossR1="45.00";
			expOsVoucherBatchR1="OSHYDBR1";
			
			expOsVoucherItemR2="FIFO COGS ITEM";
			expOsVoucherUnitsR2="Dozs";
			expOsVoucherQtyR2="1.00";
			expOsVoucherRateR2="12.00";
			expOsVoucherGrossR2="12.00";
			expOsVoucherBinR2="Bin4";
			
			expOsVoucherItemR3="WA COGS ITEM";
			expOsVoucherUnitsR3="Pcs";
			expOsVoucherQtyR3="5.00";
			expOsVoucherRateR3="20.00";
			expOsVoucherGrossR3="100.00";
			expOsVoucherRMAR3="Hyd@OS1,Hyd@OS2,Hyd@OS3,Hyd@OS4,Hyd@OS5";
			
			expOsVoucherItemR4="STD RATE COGS ITEM";
			expOsVoucherUnitsR4="Dozs";
			expOsVoucherQtyR4="5.00";
			expOsVoucherRateR4="9.00";
			expOsVoucherGrossR4="45.00";
			//expOsVoucherBatchR4="OSHWA2";*/
			
			expOsVoucherFooterQty=excelReader.getCellData(xlSheetName, 229, 7);
			expOsVoucherFooterGross=excelReader.getCellData(xlSheetName, 230, 7);
			expOsVoucherFooterNet=excelReader.getCellData(xlSheetName, 231, 7);
			
			
			
			
			
			System.out.println(netAmount.getText());
			System.out.println(QtyAmount.getText());
			System.out.println(GrossAmount.getText());
			
			
			/*actOsVoucherItemR1=select1stRow_1stColumn.getText();
			actOsVoucherUnitsR1=select1stRow_2ndColumn.getText();
			actOsVoucherQtyR1=select1stRow_3rdColumn.getText();
			actOsVoucherRateR1=select1stRow_4thColumn.getText();
			actOsVoucherGrossR1=select1stRow_5thColumn.getText();
			actOsVoucherBatchR1=select1stRow_6thColumn.getText();
			
			actOsVoucherItemR2=select2ndRow_1stColumn.getText();
			actOsVoucherUnitsR2=select2ndRow_2ndColumn.getText();
			actOsVoucherQtyR2=select2ndRow_3rdColumn.getText();
			actOsVoucherRateR2=select2ndRow_4thColumn.getText();
			actOsVoucherGrossR2=select2ndRow_5thColumn.getText();
			actOsVoucherBinR2=select2ndRow_7thColumn.getText();
			
			actOsVoucherItemR3=select3rdRow_1stColumn.getText();
			actOsVoucherUnitsR3=select3rdRow_2ndColumn.getText();
			actOsVoucherQtyR3=select3rdRow_3rdColumn.getText();
			actOsVoucherRateR3=select3rdRow_4thColumn.getText();
			actOsVoucherGrossR3=select3rdRow_5thColumn.getText();
			actOsVoucherRMAR3=select3rdRow_9thColumn.getText();
			
			actOsVoucherItemR4=select4thRow_1stColumn.getText();
			actOsVoucherUnitsR4=select4thRow_2ndColumn.getText();
			actOsVoucherQtyR4=select4thRow_3rdColumn.getText();
			actOsVoucherRateR4=select4thRow_4thColumn.getText();
			actOsVoucherGrossR4=select4thRow_5thColumn.getText();
			actOsVoucherBatchR4=select4thRow_6thColumn.getText();*/
			
			actOsVoucherFooterQty=QtyAmount.getText();
			actOsVoucherFooterGross=GrossAmount.getText();
			actOsVoucherFooterNet=netAmount.getText();
			
			excelReader.setCellData(xlfile, xlSheetName, 229, 8, actOsVoucherFooterQty);
			excelReader.setCellData(xlfile, xlSheetName, 230, 8, actOsVoucherFooterGross);
			excelReader.setCellData(xlfile, xlSheetName, 231, 8, actOsVoucherFooterNet);
			
			int voucherGridBodyListCount = voucherGridBodyList.size();
			 
			 ArrayList<String> voucherGridBodyListArray = new ArrayList<String>();
			 
			 for(int i=0;i<voucherGridBodyListCount;i++)
			 {
				 if(i==8)
				 {
					 String data ="Expiry Date";
					 voucherGridBodyListArray.add(data);
				 }
				 else
				 {
					 String data = voucherGridBodyList.get(i).getText();
					 voucherGridBodyListArray.add(data);
				 }
			 }
			 
			 String actvoucherGridBodyList=voucherGridBodyListArray.toString();
			 
			 String expvoucherGridBodyList=excelReader.getCellData(xlSheetName, 228, 7);
			 
			 excelReader.setCellData(xlfile, xlSheetName, 228, 8, actvoucherGridBodyList);
			 
			 System.out.println("voucherGridBodyList Actual   : " + actvoucherGridBodyList);
			 System.out.println("voucherGridBodyList Expected : " + expvoucherGridBodyList);
		
			
			 System.out.println("osdocNumber                 :  " + actdocNumber  +"   " + expdocNumber);
	        
	         
	         System.out.println("osVoucherWarehouse          :  " + actOsVoucherWarehouse +"     " + expOsVoucherWarehouse);
	         System.out.println("osVoucherFooterQty          :  " + actOsVoucherFooterQty  +"   " + expOsVoucherFooterQty);
	         System.out.println("osVoucherFooterGross        :  " + actOsVoucherFooterGross +"   " + expOsVoucherFooterGross);
	         System.out.println("osVoucherFooterNet          :  " + actOsVoucherFooterNet +"   " + expOsVoucherFooterNet);
			
			
	         /*System.out.println("First Row Item Name         :  " + actOsVoucherItemR1  +"   " + expOsVoucherItemR1);
	         System.out.println("First Row Units Name        :  " + actOsVoucherUnitsR1 +"   " + expOsVoucherUnitsR1);
	         System.out.println("First Row Qty Name          :  " + actOsVoucherQtyR1 +"     " + expOsVoucherQtyR1);
	         System.out.println("First Row Rate Name         :  " + actOsVoucherRateR1  +"   " + expOsVoucherRateR1);
	         System.out.println("First Row Gross Name        :  " + actOsVoucherGrossR1 +"   " + expOsVoucherGrossR1);
	         System.out.println("First Row Batch Name        :  " + actOsVoucherBatchR1 +"   " + expOsVoucherBatchR1);
	         
	         System.out.println("Second Row Item Name         :  " + actOsVoucherItemR2  +"   " + expOsVoucherItemR2);
	         System.out.println("Second Row Units Name        :  " + actOsVoucherUnitsR2 +"   " + expOsVoucherUnitsR2);
	         System.out.println("Second Row Qty Name          :  " + actOsVoucherQtyR2 +"     " + expOsVoucherQtyR2);
	         System.out.println("Second Row Rate Name         :  " + actOsVoucherRateR2  +"   " + expOsVoucherRateR2);
	         System.out.println("Second Row Gross Name        :  " + actOsVoucherGrossR2 +"   " + expOsVoucherGrossR2);
	         System.out.println("Second Row Bin Name          :  " + actOsVoucherBinR2 +"       " + expOsVoucherBinR2);
	         
	         
	         System.out.println("Third Row Item Name         :  " + actOsVoucherItemR3  +"   " + expOsVoucherItemR3);
	         System.out.println("Third Row Units Name        :  " + actOsVoucherUnitsR3 +"   " + expOsVoucherUnitsR3);
	         System.out.println("Third Row Qty Name          :  " + actOsVoucherQtyR3 +"     " + expOsVoucherQtyR3);
	         System.out.println("Third Row Rate Name         :  " + actOsVoucherRateR3  +"   " + expOsVoucherRateR3);
	         System.out.println("Third Row Gross Name        :  " + actOsVoucherGrossR3 +"   " + expOsVoucherGrossR3);
	         System.out.println("Third Row RMA Name          :  " + actOsVoucherRMAR3 +"     " + expOsVoucherRMAR3);
	         
	         System.out.println("Fourth Row Item Name         :  " + actOsVoucherItemR4  +"   " + expOsVoucherItemR4);
	         System.out.println("Fourth Row Units Name        :  " + actOsVoucherUnitsR4 +"   " + expOsVoucherUnitsR4);
	         System.out.println("Fourth Row Qty Name          :  " + actOsVoucherQtyR4 +"     " + expOsVoucherQtyR4);
	         System.out.println("Fourth Row Rate Name         :  " + actOsVoucherRateR4  +"   " + expOsVoucherRateR4);
	         System.out.println("Fourth Row Gross Name        :  " + actOsVoucherGrossR4 +"   " + expOsVoucherGrossR4);*/
	     
			
			
			if(actdocNumber.equalsIgnoreCase(expdocNumber)
					&& actOsVoucherWarehouse.equalsIgnoreCase(expOsVoucherWarehouse)
					
					&& actOsVoucherFooterQty.equalsIgnoreCase(expOsVoucherFooterQty) && actOsVoucherFooterGross.equalsIgnoreCase(expOsVoucherFooterGross) 
					&& actOsVoucherFooterNet.equalsIgnoreCase(expOsVoucherFooterNet) && actvoucherGridBodyList.equalsIgnoreCase(expvoucherGridBodyList)
					
					/*&&   actOsVoucherItemR1.equalsIgnoreCase(expOsVoucherItemR1) && actOsVoucherUnitsR1.equalsIgnoreCase(expOsVoucherUnitsR1)
					&&   actOsVoucherQtyR1.equalsIgnoreCase(expOsVoucherQtyR1) && actOsVoucherRateR1.equalsIgnoreCase(expOsVoucherRateR1)
					&&   actOsVoucherGrossR1.equalsIgnoreCase(expOsVoucherGrossR1)  && actOsVoucherBatchR1.equalsIgnoreCase(expOsVoucherBatchR1)
					
					&&   actOsVoucherItemR2.equalsIgnoreCase(expOsVoucherItemR2) && actOsVoucherUnitsR2.equalsIgnoreCase(expOsVoucherUnitsR2)
					&&   actOsVoucherQtyR2.equalsIgnoreCase(expOsVoucherQtyR2) && actOsVoucherRateR2.equalsIgnoreCase(expOsVoucherRateR2)
					&&   actOsVoucherGrossR2.equalsIgnoreCase(expOsVoucherGrossR2)  && actOsVoucherBinR2.equalsIgnoreCase(expOsVoucherBinR2)
					
					&&   actOsVoucherItemR3.equalsIgnoreCase(expOsVoucherItemR3) && actOsVoucherUnitsR3.equalsIgnoreCase(expOsVoucherUnitsR3)
					&&   actOsVoucherQtyR3.equalsIgnoreCase(expOsVoucherQtyR3) && actOsVoucherRateR3.equalsIgnoreCase(expOsVoucherRateR3)
					&&   actOsVoucherGrossR3.equalsIgnoreCase(expOsVoucherGrossR3)  && actOsVoucherRMAR3.equalsIgnoreCase(expOsVoucherRMAR3)
					
					&&   actOsVoucherItemR4.equalsIgnoreCase(expOsVoucherItemR4) && actOsVoucherUnitsR4.equalsIgnoreCase(expOsVoucherUnitsR4)
					&&   actOsVoucherQtyR4.equalsIgnoreCase(expOsVoucherQtyR4) && actOsVoucherRateR4.equalsIgnoreCase(expOsVoucherRateR4)
					&&   actOsVoucherGrossR4.equalsIgnoreCase(expOsVoucherGrossR4) */)
			{
				System.out.println("Test Pass : Saved Data is As Expected");
			
				excelReader.setCellData(xlfile, xlSheetName, 225, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Saved Data is NOT As Expected");
				
				excelReader.setCellData(xlfile, xlSheetName, 225, 9, resFail);
				return false;
			
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage().substring(0, 50);
			excelReader.setExceptionInExcel(xlfile, xlSheetName, 225, 10, e.getMessage());
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		}
	}	
	

	

	  public boolean checkOpeningStocksNewVoucherOnClickCloseBtnInEntryPage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	  {
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		
			boolean actHomePageNewBtnIsDisplayed = newBtn.isDisplayed();
			boolean actHomePageEditBtn           = editBtn.isDisplayed();		
			boolean actHomePagePrintBtn          = printBtn.isDisplayed();
			boolean actHomePageDeleteBtn         = deleteBtn.isDisplayed();
			boolean actHomePageSuspendBtn        = suspendBtn.isDisplayed();
			boolean actHomePagePrintBarcodeBtn   = printBarCodeBtn.isDisplayed();
			boolean actHomePageExportXMLBtn      = exportToXMLBtn.isDisplayed();
			boolean actHomePageSettingsBtn       = settingsBtn.isDisplayed();
			boolean actHomePageCloseBtn          = homeCloseBtn.isDisplayed();
			boolean actHomePageGridCheckBox      = grid_HeaderChkBox.isDisplayed();
			boolean actHomePageSortingBtn        = sortingBtn.isDisplayed();
			boolean actHomePageCreateViewBn      = createViewBtn.isDisplayed();
			boolean actHomePageCustomizeBtn      = customizeBtn.isDisplayed();
			boolean actHomePageFilterBtn         = filterBtn.isDisplayed();
			boolean actHomePageRefreshBtn        = refreshBtn.isDisplayed();
			boolean actHomePageOptionsBtn        = optionsBtn.isDisplayed();
			boolean actHomePageExportBtn         = exportBtn.isDisplayed();
			
			boolean expHomePageNewBtnIsDisplayed = true;	
			boolean expHomePageEditBtn           = true;
			boolean expHomePagePrintBtn          = true;
			boolean expHomePageDeleteBtn         = true;
			boolean expHomePageSuspendBtn        = true;
			boolean expHomePagePrintBarcodeBtn   = true;
			boolean expHomePageExportXMLBtn      = true;
			boolean expHomePageSettingsBtn       = true;
			boolean expHomePageCloseBtn          = true;
			boolean expHomePageGridCheckBox      = true;
			boolean expHomePageSortingBtn        = true;
			boolean expHomePageCreateViewBn      = true;
			boolean expHomePageCustomizeBtn      = true;
			boolean expHomePageFilterBtn         = true;
			boolean expHomePageRefreshBtn        = true;
			boolean expHomePageOptionsBtn        = true;
			boolean expHomePageExportBtn         = true;
			
			System.out.println("Home Page New Btn Value Actual           : " + actHomePageNewBtnIsDisplayed+ "  Value Expected : " + expHomePageNewBtnIsDisplayed);
			System.out.println("Home Page Edit Btn Value Actual          : " + actHomePageEditBtn+           "  Value Expected : " + expHomePageEditBtn);
			System.out.println("Home Page Print Btn Value Actual         : " + actHomePagePrintBtn+          "	Value Expected : " + expHomePagePrintBtn);
			System.out.println("Home Page Delete Btn Value Actual        : " + actHomePageDeleteBtn+         "	Value Expected : " + expHomePageDeleteBtn);
			System.out.println("Home Page Suspend Btn Value Actual       : " + actHomePageSuspendBtn+        "	Value Expected : " + expHomePageSuspendBtn);
			System.out.println("Home Page Print Barcode Btn Value Actual : " + actHomePagePrintBarcodeBtn+   "	Value Expected : " + expHomePagePrintBarcodeBtn);
			System.out.println("Home Page Export XML Btn Value Actual    : " + actHomePageExportXMLBtn+      "	Value Expected : " + expHomePageExportXMLBtn);
			System.out.println("Home Page Settings Btn Value Actual      : " + actHomePageSettingsBtn+       "	Value Expected : " + expHomePageSettingsBtn);
			System.out.println("Home Page Close Btn Value Actual         : " + actHomePageCloseBtn+          "	Value Expected : " + expHomePageCloseBtn);
			System.out.println("Home Page Grid check Value Actual        : " + actHomePageGridCheckBox+      "	Value Expected : " + expHomePageGridCheckBox);
			System.out.println("Home Page Sorting Btn Value Actual       : " + actHomePageSortingBtn+        "	Value Expected : " + expHomePageSortingBtn);
			System.out.println("Home Page Create View Btn Value Actual   : " + actHomePageCreateViewBn+      "	Value Expected : " + expHomePageCreateViewBn);
			System.out.println("Home Page Customize Btn Value Actual     : " + actHomePageCustomizeBtn+      "	Value Expected : " + expHomePageCustomizeBtn);
			System.out.println("Home Page Filter check Value Actual      : " + actHomePageFilterBtn+         "	Value Expected : " + expHomePageFilterBtn);
			System.out.println("Home Page Refesh Btn Value Actual        : " + actHomePageRefreshBtn+        "	Value Expected : " + expHomePageRefreshBtn);
			System.out.println("Home Page Options Btn Value Actual       : " + actHomePageOptionsBtn+        "	Value Expected : " + expHomePageOptionsBtn);
			System.out.println("Home Page Export Btn Value Actual        : " + actHomePageExportBtn+         "  Value Expected : " + expHomePageExportBtn);
			
			int count				                 = openingStocksNewToolBarButtons.size();
			
			ArrayList<String> actbuttons             = new ArrayList<String>();
			
			for (int i = 0; i < count; i++) 
			{
				String data                          = openingStocksNewToolBarButtons.get(i).getText();
				actbuttons.add(data);
			}
			    
			String actopeningStocksNewToolBarButtons = actbuttons.toString();
			String expopeningStocksNewToolBarButtons = excelReader.getCellData(xlSheetName, 233, 7);
		
			System.out.println("actopeningStocksNewToolBarButtons  : " + actopeningStocksNewToolBarButtons);
			System.out.println("expopeningStocksNewToolBarButtons  : " + expopeningStocksNewToolBarButtons);
			
			excelReader.setCellData(xlfile, xlSheetName, 233, 8, actopeningStocksNewToolBarButtons);	
			
			String actsetAsDefaultView		=	setAsDefaultView.getText();
			String expsetAsDefaultView		=	excelReader.getCellData(xlSheetName, 234, 7);
			excelReader.setCellData(xlfile, xlSheetName, 234, 8, actsetAsDefaultView);
			
			
			//Ribbon Control Icons
	        int count1		= headingOptions.size();
			
			ArrayList<String> headingButtons = new ArrayList<String>();
			
			for (int i = 1; i < count1; i++) 
			{
				String data=headingOptions.get(i).getAttribute("title");
				
				headingButtons.add(data);
			}
			
			String actHeadingButtons = headingButtons.toString();
			String expHeadingButtons = excelReader.getCellData(xlSheetName, 235, 7);
			excelReader.setCellData(xlfile, xlSheetName, 235, 8, actHeadingButtons);
			
			
			System.out.println("actopeningStocksNewHeadingButtons  : " + actHeadingButtons);
			System.out.println("expopeningStocksNewHeadingButtons  : " + expHeadingButtons);
			
			//Home Page Column Headings
	        int headerTxtCount		= headerTxtList.size();
			
			ArrayList<String> headerTxt = new ArrayList<String>();
			
			for (int i = 2; i < headerTxtCount; i++) 
			{
				String data=headerTxtList.get(i).getText();
				headerTxt.add(data);
			}
			
			String actHeaderTxt = headerTxt.toString();
			String expHeaderTxt = excelReader.getCellData(xlSheetName, 236, 7);
			excelReader.setCellData(xlfile, xlSheetName, 236, 8, actHeaderTxt);
			
			
			System.out.println("actopeningStocksNewHomePageColumnsButtons  : " + actHeaderTxt);
			System.out.println("expopeningStocksNewHomePageColumnsButtons  : " + expHeaderTxt);
			
			if(actHomePageNewBtnIsDisplayed==expHomePageNewBtnIsDisplayed  && actHomePageEditBtn==expHomePageEditBtn && actHomePagePrintBtn==expHomePagePrintBtn
					&& actHomePageDeleteBtn==expHomePageDeleteBtn  && actHomePageSuspendBtn==expHomePageSuspendBtn 
				    && actHomePagePrintBarcodeBtn==expHomePagePrintBarcodeBtn && actHomePageExportXMLBtn==expHomePageExportXMLBtn
					&& actHomePageSettingsBtn==expHomePageSettingsBtn && actHomePageCloseBtn==expHomePageCloseBtn && actHomePageGridCheckBox==expHomePageGridCheckBox
					&& actHomePageSortingBtn==expHomePageSortingBtn && actHomePageCreateViewBn==expHomePageCreateViewBn && actHomePageCustomizeBtn==expHomePageCustomizeBtn
					&& actHomePageFilterBtn==expHomePageFilterBtn && actHomePageRefreshBtn==expHomePageRefreshBtn && actHomePageOptionsBtn==expHomePageOptionsBtn
					&& actHomePageExportBtn==expHomePageExportBtn  
					&& actopeningStocksNewToolBarButtons.equalsIgnoreCase(expopeningStocksNewToolBarButtons)
					&& actHeadingButtons.equalsIgnoreCase(expHeadingButtons)
					&& actHeaderTxt.equalsIgnoreCase(expHeaderTxt))
			{
				System.out.println("Test Pass : HomeScreen Options Are Displayed");
				excelReader.setCellData(xlfile, xlSheetName, 232, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : HomeScreen Options Are NOT Displayed");
				excelReader.setCellData(xlfile, xlSheetName, 232, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage().substring(0, 50);
			excelReader.setExceptionInExcel(xlfile, xlSheetName, 232, 10, e.getMessage());
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		}
	  }
		
	  
		@FindBy(xpath="//tbody[@id='RMA_Table_body']/tr/td[2]")
	    private static List<WebElement> rmaInwardPopRmaNoList;
		
		@FindBy(xpath="//*[@id='row_1']/td[2]")
		private static WebElement ItemFirstRowBalance;
	  
	  public boolean checkOpeningStocksNewVoucherOnClickEditButtonInHomePage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	  {
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
		try
		{
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
			grid_ChkBox1.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editBtn));
			editBtn.click();
			
			boolean loading=checkLoadingMessage();
			
			System.out.println("VoucherLoadingMessage  : "+loading +" Value Expected : "+"TRUE");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			documentNumberTxt.click();
			
			String actdocNumber,expdocNumber;
			
			actdocNumber=documentNumberTxt.getAttribute("value");
			expdocNumber=excelReader.getCellData(xlSheetName, 238, 7);
			
			excelReader.setCellData(xlfile, xlSheetName, 238, 8, actdocNumber);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
	
			String actOsVoucherWarehouse=wareHouseTxt.getAttribute("value");
			String expOsVoucherWarehouse=excelReader.getCellData(xlSheetName, 239, 7);
			
			excelReader.setCellData(xlfile, xlSheetName, 239, 8, actOsVoucherWarehouse);
					
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_footerExpandBtn));
			new_footerExpandBtn.click();
			
			
			/*String actOsVoucherItemR1,actOsVoucherUnitsR1,actOsVoucherQtyR1,actOsVoucherRateR1,actOsVoucherGrossR1,actOsVoucherBatchR1;
			String actOsVoucherItemR2,actOsVoucherUnitsR2,actOsVoucherQtyR2,actOsVoucherRateR2,actOsVoucherGrossR2,actOsVoucherBinR2;
			String actOsVoucherItemR3,actOsVoucherUnitsR3,actOsVoucherQtyR3,actOsVoucherRateR3,actOsVoucherGrossR3,actOsVoucherRMAR3;
			String actOsVoucherItemR4,actOsVoucherUnitsR4,actOsVoucherQtyR4,actOsVoucherRateR4,actOsVoucherGrossR4,actOsVoucherBatchR4;*/
			
			String actOsVoucherFooterQty,actOsVoucherFooterGross,actOsVoucherFooterNet;
			
	
			/*String expOsVoucherItemR1,expOsVoucherUnitsR1,expOsVoucherQtyR1,expOsVoucherRateR1,expOsVoucherGrossR1,expOsVoucherBatchR1;
			String expOsVoucherItemR2,expOsVoucherUnitsR2,expOsVoucherQtyR2,expOsVoucherRateR2,expOsVoucherGrossR2,expOsVoucherBinR2;
			String expOsVoucherItemR3,expOsVoucherUnitsR3,expOsVoucherQtyR3,expOsVoucherRateR3,expOsVoucherGrossR3,expOsVoucherRMAR3;
			String expOsVoucherItemR4,expOsVoucherUnitsR4,expOsVoucherQtyR4,expOsVoucherRateR4,expOsVoucherGrossR4,expOsVoucherBatchR4;*/
			
			String expOsVoucherFooterQty,expOsVoucherFooterGross,expOsVoucherFooterNet;
	
		
			/*expOsVoucherItemR1="BATCH BR ITEM";
			expOsVoucherUnitsR1="Dozs";
			expOsVoucherQtyR1="5.00";
			expOsVoucherRateR1="9.00";
			expOsVoucherGrossR1="45.00";
			expOsVoucherBatchR1="OSHYDBR1";
			
			expOsVoucherItemR2="FIFO COGS ITEM";
			expOsVoucherUnitsR2="Dozs";
			expOsVoucherQtyR2="1.00";
			expOsVoucherRateR2="12.00";
			expOsVoucherGrossR2="12.00";
			expOsVoucherBinR2="Bin4";
			
			expOsVoucherItemR3="WA COGS ITEM";
			expOsVoucherUnitsR3="Pcs";
			expOsVoucherQtyR3="5.00";
			expOsVoucherRateR3="20.00";
			expOsVoucherGrossR3="100.00";
			expOsVoucherRMAR3="Hyd@OS1,Hyd@OS2,Hyd@OS3,Hyd@OS4,Hyd@OS5";
			
			expOsVoucherItemR4="STD RATE COGS ITEM";
			expOsVoucherUnitsR4="Dozs";
			expOsVoucherQtyR4="5.00";
			expOsVoucherRateR4="9.00";
			expOsVoucherGrossR4="45.00";
			//expOsVoucherBatchR4="OSHWA2";*/
			
			expOsVoucherFooterQty=excelReader.getCellData(xlSheetName, 241, 7);
			expOsVoucherFooterGross=excelReader.getCellData(xlSheetName, 242, 7);
			expOsVoucherFooterNet=excelReader.getCellData(xlSheetName, 243, 7);
			
			
			
			
			
			System.out.println(netAmount.getText());
			System.out.println(QtyAmount.getText());
			System.out.println(GrossAmount.getText());
			
			
			/*actOsVoucherItemR1=select1stRow_1stColumn.getText();
			actOsVoucherUnitsR1=select1stRow_2ndColumn.getText();
			actOsVoucherQtyR1=select1stRow_3rdColumn.getText();
			actOsVoucherRateR1=select1stRow_4thColumn.getText();
			actOsVoucherGrossR1=select1stRow_5thColumn.getText();
			actOsVoucherBatchR1=select1stRow_6thColumn.getText();
			
			actOsVoucherItemR2=select2ndRow_1stColumn.getText();
			actOsVoucherUnitsR2=select2ndRow_2ndColumn.getText();
			actOsVoucherQtyR2=select2ndRow_3rdColumn.getText();
			actOsVoucherRateR2=select2ndRow_4thColumn.getText();
			actOsVoucherGrossR2=select2ndRow_5thColumn.getText();
			actOsVoucherBinR2=select2ndRow_7thColumn.getText();
			
			actOsVoucherItemR3=select3rdRow_1stColumn.getText();
			actOsVoucherUnitsR3=select3rdRow_2ndColumn.getText();
			actOsVoucherQtyR3=select3rdRow_3rdColumn.getText();
			actOsVoucherRateR3=select3rdRow_4thColumn.getText();
			actOsVoucherGrossR3=select3rdRow_5thColumn.getText();
			actOsVoucherRMAR3=select3rdRow_9thColumn.getText();
			
			actOsVoucherItemR4=select4thRow_1stColumn.getText();
			actOsVoucherUnitsR4=select4thRow_2ndColumn.getText();
			actOsVoucherQtyR4=select4thRow_3rdColumn.getText();
			actOsVoucherRateR4=select4thRow_4thColumn.getText();
			actOsVoucherGrossR4=select4thRow_5thColumn.getText();
			actOsVoucherBatchR4=select4thRow_6thColumn.getText();*/
			
			actOsVoucherFooterQty=QtyAmount.getText();
			actOsVoucherFooterGross=GrossAmount.getText();
			actOsVoucherFooterNet=netAmount.getText();
			
			excelReader.setCellData(xlfile, xlSheetName, 241, 8, actOsVoucherFooterQty);
			excelReader.setCellData(xlfile, xlSheetName, 242, 8, actOsVoucherFooterGross);
			excelReader.setCellData(xlfile, xlSheetName, 243, 8, actOsVoucherFooterNet);
			
			int voucherGridBodyListCount = voucherGridBodyList.size();
			 
			 ArrayList<String> voucherGridBodyListArray = new ArrayList<String>();
			 
			 for(int i=0;i<voucherGridBodyListCount;i++)
			 {
				 if(i==8)
				 {
					 String data ="Expiry Date";
					 voucherGridBodyListArray.add(data);
				 }
				 else
				 {
					 String data = voucherGridBodyList.get(i).getText();
					 voucherGridBodyListArray.add(data);
				 }
			 }
			 
			 String actvoucherGridBodyList=voucherGridBodyListArray.toString();
			 
			 String expvoucherGridBodyList=excelReader.getCellData(xlSheetName, 240, 7);
			 
			 excelReader.setCellData(xlfile, xlSheetName, 240, 8, actvoucherGridBodyList);
			 
			 System.out.println("voucherGridBodyList Actual   : " + actvoucherGridBodyList);
			 System.out.println("voucherGridBodyList Expected : " + expvoucherGridBodyList);
		
			
			 System.out.println("osdocNumber                 :  " + actdocNumber  +"   " + expdocNumber);
	        
	         
	         System.out.println("osVoucherWarehouse          :  " + actOsVoucherWarehouse +"     " + expOsVoucherWarehouse);
	         System.out.println("osVoucherFooterQty          :  " + actOsVoucherFooterQty  +"   " + expOsVoucherFooterQty);
	         System.out.println("osVoucherFooterGross        :  " + actOsVoucherFooterGross +"   " + expOsVoucherFooterGross);
	         System.out.println("osVoucherFooterNet          :  " + actOsVoucherFooterNet +"   " + expOsVoucherFooterNet);
			
			
	         /*System.out.println("First Row Item Name         :  " + actOsVoucherItemR1  +"   " + expOsVoucherItemR1);
	         System.out.println("First Row Units Name        :  " + actOsVoucherUnitsR1 +"   " + expOsVoucherUnitsR1);
	         System.out.println("First Row Qty Name          :  " + actOsVoucherQtyR1 +"     " + expOsVoucherQtyR1);
	         System.out.println("First Row Rate Name         :  " + actOsVoucherRateR1  +"   " + expOsVoucherRateR1);
	         System.out.println("First Row Gross Name        :  " + actOsVoucherGrossR1 +"   " + expOsVoucherGrossR1);
	         System.out.println("First Row Batch Name        :  " + actOsVoucherBatchR1 +"   " + expOsVoucherBatchR1);
	         
	         System.out.println("Second Row Item Name         :  " + actOsVoucherItemR2  +"   " + expOsVoucherItemR2);
	         System.out.println("Second Row Units Name        :  " + actOsVoucherUnitsR2 +"   " + expOsVoucherUnitsR2);
	         System.out.println("Second Row Qty Name          :  " + actOsVoucherQtyR2 +"     " + expOsVoucherQtyR2);
	         System.out.println("Second Row Rate Name         :  " + actOsVoucherRateR2  +"   " + expOsVoucherRateR2);
	         System.out.println("Second Row Gross Name        :  " + actOsVoucherGrossR2 +"   " + expOsVoucherGrossR2);
	         System.out.println("Second Row Bin Name          :  " + actOsVoucherBinR2 +"       " + expOsVoucherBinR2);
	         
	         
	         System.out.println("Third Row Item Name         :  " + actOsVoucherItemR3  +"   " + expOsVoucherItemR3);
	         System.out.println("Third Row Units Name        :  " + actOsVoucherUnitsR3 +"   " + expOsVoucherUnitsR3);
	         System.out.println("Third Row Qty Name          :  " + actOsVoucherQtyR3 +"     " + expOsVoucherQtyR3);
	         System.out.println("Third Row Rate Name         :  " + actOsVoucherRateR3  +"   " + expOsVoucherRateR3);
	         System.out.println("Third Row Gross Name        :  " + actOsVoucherGrossR3 +"   " + expOsVoucherGrossR3);
	         System.out.println("Third Row RMA Name          :  " + actOsVoucherRMAR3 +"     " + expOsVoucherRMAR3);
	         
	         System.out.println("Fourth Row Item Name         :  " + actOsVoucherItemR4  +"   " + expOsVoucherItemR4);
	         System.out.println("Fourth Row Units Name        :  " + actOsVoucherUnitsR4 +"   " + expOsVoucherUnitsR4);
	         System.out.println("Fourth Row Qty Name          :  " + actOsVoucherQtyR4 +"     " + expOsVoucherQtyR4);
	         System.out.println("Fourth Row Rate Name         :  " + actOsVoucherRateR4  +"   " + expOsVoucherRateR4);
	         System.out.println("Fourth Row Gross Name        :  " + actOsVoucherGrossR4 +"   " + expOsVoucherGrossR4);*/
	     
			
			
			if(actdocNumber.equalsIgnoreCase(expdocNumber)
					&& actOsVoucherWarehouse.equalsIgnoreCase(expOsVoucherWarehouse)
					
					&& actOsVoucherFooterQty.equalsIgnoreCase(expOsVoucherFooterQty) && actOsVoucherFooterGross.equalsIgnoreCase(expOsVoucherFooterGross) 
					&& actOsVoucherFooterNet.equalsIgnoreCase(expOsVoucherFooterNet) && actvoucherGridBodyList.equalsIgnoreCase(expvoucherGridBodyList)
					
					/*&&   actOsVoucherItemR1.equalsIgnoreCase(expOsVoucherItemR1) && actOsVoucherUnitsR1.equalsIgnoreCase(expOsVoucherUnitsR1)
					&&   actOsVoucherQtyR1.equalsIgnoreCase(expOsVoucherQtyR1) && actOsVoucherRateR1.equalsIgnoreCase(expOsVoucherRateR1)
					&&   actOsVoucherGrossR1.equalsIgnoreCase(expOsVoucherGrossR1)  && actOsVoucherBatchR1.equalsIgnoreCase(expOsVoucherBatchR1)
					
					&&   actOsVoucherItemR2.equalsIgnoreCase(expOsVoucherItemR2) && actOsVoucherUnitsR2.equalsIgnoreCase(expOsVoucherUnitsR2)
					&&   actOsVoucherQtyR2.equalsIgnoreCase(expOsVoucherQtyR2) && actOsVoucherRateR2.equalsIgnoreCase(expOsVoucherRateR2)
					&&   actOsVoucherGrossR2.equalsIgnoreCase(expOsVoucherGrossR2)  && actOsVoucherBinR2.equalsIgnoreCase(expOsVoucherBinR2)
					
					&&   actOsVoucherItemR3.equalsIgnoreCase(expOsVoucherItemR3) && actOsVoucherUnitsR3.equalsIgnoreCase(expOsVoucherUnitsR3)
					&&   actOsVoucherQtyR3.equalsIgnoreCase(expOsVoucherQtyR3) && actOsVoucherRateR3.equalsIgnoreCase(expOsVoucherRateR3)
					&&   actOsVoucherGrossR3.equalsIgnoreCase(expOsVoucherGrossR3)  && actOsVoucherRMAR3.equalsIgnoreCase(expOsVoucherRMAR3)
					
					&&   actOsVoucherItemR4.equalsIgnoreCase(expOsVoucherItemR4) && actOsVoucherUnitsR4.equalsIgnoreCase(expOsVoucherUnitsR4)
					&&   actOsVoucherQtyR4.equalsIgnoreCase(expOsVoucherQtyR4) && actOsVoucherRateR4.equalsIgnoreCase(expOsVoucherRateR4)
					&&   actOsVoucherGrossR4.equalsIgnoreCase(expOsVoucherGrossR4) */)
			{
				System.out.println("Test Pass : Saved Data is As Expected");
			
				excelReader.setCellData(xlfile, xlSheetName, 237, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Saved Data is NOT As Expected");
				
				excelReader.setCellData(xlfile, xlSheetName, 237, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage().substring(0, 50);
			excelReader.setExceptionInExcel(xlfile, xlSheetName, 237, 10, e.getMessage());
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		}
		
		}	
		
	  
	  
	  
	  
	  //----------------------------------------------------------  Test the Editing Voucher ------------------------------------------------------------------------
	  
	  
	  
	  public boolean checkEditOpeningStocksNewVoucherBinsFifoInputWithoutBinSecondRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	  {
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
	    try
	    {
	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
			select2ndRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.click();
			enter_ItemTxt.sendKeys(Keys.HOME);
			enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.END);
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemcount = itemListCount.size();
			
			System.err.println(itemcount);
				
			for(int i=0 ; i < itemcount ;i++)
			{
				String data = itemListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 244, 6)))
				{
					itemListCount.get(i).click();
					break;
				}
		    }
		
	        enter_ItemTxt.sendKeys(Keys.TAB);	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.sendKeys(Keys.TAB);
			
			String actUnitsColumnSelectingBinsProduct = select2ndRow_2ndColumn.getText();
			String expUnitsColumnSelectingBinsProduct = excelReader.getCellData(xlSheetName, 245, 7);
			
			excelReader.setCellData(xlfile, xlSheetName, 245, 8, actUnitsColumnSelectingBinsProduct);
			
			System.out.println("Units Column Value is display On Select       : " + actUnitsColumnSelectingBinsProduct +  "  Value Expected : " + expUnitsColumnSelectingBinsProduct);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.click();
			enter_Quantity.clear();
			enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 245, 6));
			enter_Quantity.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.click();
			enter_Rate.clear();
			enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 246, 6));
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			String expSaveMessageWithOutBatchExpiry=excelReader.getCellData(xlSheetName, 246, 7);
			
			String validationMessage=checkValidationMessage(expSaveMessageWithOutBatchExpiry);
			
			excelReader.setCellData(xlfile, xlSheetName, 246, 8, validationMessage);
					
			System.out.println("Entry Page Save With Input Of Batch Value Actual  : " + validationMessage + "  Value Expected   : " + "TRUE");
		
			if(actUnitsColumnSelectingBinsProduct.equalsIgnoreCase(expUnitsColumnSelectingBinsProduct) &&  expSaveMessageWithOutBatchExpiry.equalsIgnoreCase(validationMessage))
			{
				System.out.println("Test Pass : Bin Popup Displayed");
				excelReader.setCellData(xlfile, xlSheetName, 244, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Bin Popup NOT Displayed");
				excelReader.setCellData(xlfile, xlSheetName, 244, 9, resFail);
				return false;
			}
	    }
	    catch (Exception e) 
		{
			String exception =e.getMessage().substring(0, 50);
			excelReader.setExceptionInExcel(xlfile, xlSheetName, 244, 10, e.getMessage());
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		}
	 }
		
	  public boolean checkEditOpeningStocksNewVoucherInputBinFifoBinPopupOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	  {
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_3rdColumn));
			select2ndRow_3rdColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.click();
			enter_Quantity.clear();
			enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 247, 6));
			enter_Quantity.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.click();
			enter_Rate.clear();
			enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 248, 6));
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.click();
			enter_Gross.sendKeys(Keys.TAB);
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchTxt));
			
			boolean actBinSearch            = binSearchTxt.isDisplayed();
			boolean actBinSearchTxt         = binSearchTxt.isDisplayed();
			boolean actBinSearchBtn         = binSearchBtn.isDisplayed();
			//boolean actBinAlternateCategory = binAlternateCategoryCheckBtn.isDisplayed();
			boolean actBinAutoAllocateBtn   = binAutoAllocateBtn.isDisplayed();
			boolean actBinPickBtn           = binPickBtn.isDisplayed();
			boolean actBinCancelBtn         = binCancelBtn.isDisplayed();
			
			boolean expBinSearch            = true;
			boolean expBinSearchTxt         = true;
			boolean expBinSearchBtn         = true;
			boolean expBinAlternateCategory = true;
			boolean expBinAutoAllocateBtn   = true;
			boolean expBinPickBtn           = true;
			boolean expBinCancelBtn         = true;
			
			System.out.println("Entry Page Bin Search Value Actual  : " + actBinSearch + "    Value Expected   : " + expBinSearch);
			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchTxt));
				
			String actBinGroupNameR1        = binselect1stRow_2ndColumn.getText();
			
			String actBinNameR2             = binselect2ndRow_2ndColumn.getText();
			String actBinStockR2            = binselect2ndRow_3rdColumn.getText();
			String actBinCapacityR2         = binselect2ndRow_4thColumn.getText();
			String actBinLoadR2             = binselect2ndRow_5thColumn.getText();
			String actBinFreeSpaceR2        = binselect2ndRow_6thColumn.getText();
			String actBinFreeQtyR2          = binselect2ndRow_7thColumn.getText();
			String actBinToBeAllocatedR2    = binselect2ndRow_8thColumn.getText();				
			String actBinNameR3             = binselect3rdRow_2ndColumn.getText();
			String actBinStockR3            = binselect3rdRow_3rdColumn.getText();
			String actBinCapacityR3         = binselect3rdRow_4thColumn.getText();
			String actBinLoadR3             = binselect3rdRow_5thColumn.getText();
			String actBinFreeSpaceR3        = binselect3rdRow_6thColumn.getText();
			String actBinFreeQtyR3          = binselect3rdRow_7thColumn.getText();
			String actBinToBeAllocatedR3    = binselect3rdRow_8thColumn.getText();	*/
			String actBinTotalQty           = binTotalQty.getAttribute("value");
			String actBinBaseUom            = binBaseUOM.getText();
			String actBinBalanceQty         = binBalanceTxt.getAttribute("value");
			
			int binInwardGridListCount = binInwardGridList.size();
			
			ArrayList<String> binInwardGridListArray = new ArrayList<String>();
			
			for(int i=0;i<binInwardGridListCount;i++)
			{
				String data = binInwardGridList.get(i).getText();
				binInwardGridListArray.add(data);
			}
			
			
			String actbinInwardGridList=binInwardGridListArray.toString();
			
			String expbinInwardGridList=excelReader.getCellData(xlSheetName, 248, 7);
			
			excelReader.setCellData(xlfile, xlSheetName, 248, 8, actbinInwardGridList);
			
			System.out.println("ActbinInwardGridList : " + actbinInwardGridList);
			System.out.println("ExpbinInwardGridList : " + expbinInwardGridList);
			
			
			boolean actMethod = actBinSearch==expBinSearch && actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn 
					            /*&& actBinAlternateCategory==expBinAlternateCategory*/ 
					            && actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn;
			
			String actResult = Boolean.toString(actMethod);
			
			excelReader.setCellData(xlfile, xlSheetName, 247, 8, actResult.toUpperCase());
			
			
	      /*  String expBinGroupNameR1        = "BG1";
			String expBinNameR2             = "Bin4";
			String expBinStockR2            = "0.00";
			String expBinCapacityR2         = "90.00";
			String expBinLoadR2             = "0.00";
			String expBinFreeSpaceR2        = "90.00";
			String expBinFreeQtyR2          = "90.00";
			String expBinToBeAllocatedR2    = "0.00";
			String expBinNameR3             = "Bin5";
			String expBinStockR3            = "0.00";
			String expBinCapacityR3         = "98.00";
			String expBinLoadR3             = "0.00";
			String expBinFreeSpaceR3        = "98.00";
			String expBinFreeQtyR3          = "98.00";
			String expBinToBeAllocatedR3    = "0.00";*/
			String expBinTotalQty           = excelReader.getCellData(xlSheetName, 249, 7);
			String expBinBaseUom            = excelReader.getCellData(xlSheetName, 250, 7);
			String expBinBalanceQty         = excelReader.getCellData(xlSheetName, 251, 7);
			
			excelReader.setCellData(xlfile, xlSheetName, 249, 8, actBinTotalQty);
			excelReader.setCellData(xlfile, xlSheetName, 250, 8, actBinBaseUom);
			excelReader.setCellData(xlfile, xlSheetName, 251, 8, actBinBalanceQty);
					
	       /* System.out.println("First Row Group Name Value Actual       :  " + actBinGroupNameR1 +       " Value Expected : " + expBinGroupNameR1);		
			System.out.println("Second Row Bin Name Value Actual        :  " + actBinNameR2 +            " Value Expected : " + expBinNameR2);
			System.out.println("Second Row Stock Value Actual           :  " + actBinStockR2 +           " Value Expected : " + expBinStockR2);
			System.out.println("Second Row Capacity Value Actual        :  " + actBinCapacityR2 +        " Value Expected : " + expBinCapacityR2);
			System.out.println("Second Row Load Value Actual            :  " + actBinLoadR2 +            " Value Expected : " + expBinLoadR2);
			System.out.println("Second Row Free Space Value Actual      :  " + actBinFreeSpaceR2 +       " Value Expected : " + expBinFreeSpaceR2);
			System.out.println("Second Row Free Qty Value Actual        :  " + actBinFreeQtyR2 +         " Value Expected : " + expBinFreeQtyR2);
			System.out.println("Second Row To Be Allocated Value Actual :  " + actBinToBeAllocatedR2 +   " Value Expected : " + expBinToBeAllocatedR2);			
			System.out.println("Third Row Bin Name Value Actual         :  " + actBinNameR3 +            " Value Expected : " + expBinNameR3);
			System.out.println("Third Row Stock Value Actual            :  " + actBinStockR3 +           " Value Expected : " + expBinStockR3);
			System.out.println("Third Row Capacity Value Actual         :  " + actBinCapacityR3 +        " Value Expected : " + expBinCapacityR3);
			System.out.println("Third Row Load Value Actual             :  " + actBinLoadR3 +            " Value Expected : " + expBinLoadR3);
			System.out.println("Third Row Free Space Value Actual       :  " + actBinFreeSpaceR3 +       " Value Expected : " + expBinFreeSpaceR3);
			System.out.println("Third Row Free Qty Value Actual         :  " + actBinFreeQtyR3 +         " Value Expected : " + expBinFreeQtyR3);
			System.out.println("Third Row To Be Allocated Value Actual  :  " + actBinToBeAllocatedR3 +   " Value Expected : " + expBinToBeAllocatedR3);	*/	
			System.out.println("Bin Total Qty Value Actual              :  " +actBinTotalQty +           " Value Expected : " + expBinTotalQty);
			System.out.println("Bin Base Uom Value Actual               :  " +actBinBaseUom +            " Value Expected : " + expBinBaseUom);
			System.out.println("Bin Balance Txt Value Actual            :  " +actBinBalanceQty +         " Value Expected : " + expBinBalanceQty);
			
			
		
			System.out.println("Bin Search Value Actual                 :  " + actBinSearchTxt +         " Value Expected : " + expBinSearchTxt);
			System.out.println("Bin Search Btn Value Actual             :  " + actBinSearchBtn +         " Value Expected : " + expBinSearchBtn);
			//System.out.println("Bin Alternate Category Value Actual     :  " + actBinAlternateCategory + " Value Expected : " + expBinAlternateCategory);
			System.out.println("Bin Auto Allocate Btn Value Actual      :  " + actBinAutoAllocateBtn +   " Value Expected : " + expBinAutoAllocateBtn);
			System.out.println("Bin Pick Btn Value Actual               :  " + actBinPickBtn +           " Value Expected : " + expBinPickBtn);
			System.out.println("Bin Cancel Btn Value Actual             :  " + actBinCancelBtn +         " Value Expected : " + expBinCancelBtn);
								
			if(actMethod==true && actbinInwardGridList.equalsIgnoreCase(expbinInwardGridList) && actBinTotalQty.equalsIgnoreCase(expBinTotalQty)
					&& actBinBaseUom.endsWith(expBinBaseUom) && actBinBalanceQty.equalsIgnoreCase(expBinBalanceQty))
			{
				System.out.println("Test Pass : Bin Popup options Are As Expected");
				excelReader.setCellData(xlfile, xlSheetName, 247, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Bin Popup options Are NOT As Expected");
				excelReader.setCellData(xlfile, xlSheetName, 247, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage().substring(0, 50);
			excelReader.setExceptionInExcel(xlfile, xlSheetName, 247, 10, e.getMessage());
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		}
	  }
		
		
		
		
	  // Not Updating Total Sum
	  public boolean checkEditVoucherSelectingBinThroughDoubleClickAndCheckBinColumnInVoucherOnClickOnOk() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	  {
			
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binselect2ndRow_1stColumn));
			getAction().doubleClick(binselect2ndRow_1stColumn).build().perform();
			
			/*String actBinGroupNameR1        = binselect1stRow_2ndColumn.getText();	
			
			String actBinNameR2             = binselect2ndRow_2ndColumn.getText();
			String actBinStockR2            = binselect2ndRow_3rdColumn.getText();
			String actBinCapacityR2         = binselect2ndRow_4thColumn.getText();
			String actBinLoadR2             = binselect2ndRow_5thColumn.getText();
			String actBinFreeSpaceR2        = binselect2ndRow_6thColumn.getText();
			String actBinFreeQtyR2          = binselect2ndRow_7thColumn.getText();
			String actBinToBeAllocatedR2    = binselect2ndRow_8thColumn.getText();
				
			String actBinNameR3             = binselect3rdRow_2ndColumn.getText();
			String actBinStockR3            = binselect3rdRow_3rdColumn.getText();
			String actBinCapacityR3         = binselect3rdRow_4thColumn.getText();
			String actBinLoadR3             = binselect3rdRow_5thColumn.getText();
			String actBinFreeSpaceR3        = binselect3rdRow_6thColumn.getText();
			String actBinFreeQtyR3          = binselect3rdRow_7thColumn.getText();
			String actBinToBeAllocatedR3    = binselect3rdRow_8thColumn.getText();*/
			
			String actBinTotalQty           = binTotalQty.getAttribute("value");
			String actBinBaseUom            = binBaseUOM.getText();
			String actBinBalanceQty         = binBalanceTxt.getAttribute("value");
			
			String actBinSum                = binSumInward.getText();
			
			/*String expBinGroupNameR1        = "BG1";
		 	
			String expBinNameR2             = "Bin4";
			String expBinStockR2            = "0.00";
			String expBinCapacityR2         = "90.00";
			String expBinLoadR2             = "0.00";
			String expBinFreeSpaceR2        = "90.00";
			String expBinFreeQtyR2          = "90.00";
			String expBinToBeAllocatedR2    = "12.00";
			
			String expBinNameR3             = "Bin5";
			String expBinStockR3            = "0.00";
			String expBinCapacityR3         = "98.00";
			String expBinLoadR3             = "0.00";
			String expBinFreeSpaceR3        = "98.00";
			String expBinFreeQtyR3          = "98.00";
			String expBinToBeAllocatedR3    = "0.00";*/
			
			String expBinTotalQty           = excelReader.getCellData(xlSheetName, 254, 7);
			String expBinBaseUom            = excelReader.getCellData(xlSheetName, 255, 7);
			String expBinBalanceQty         = excelReader.getCellData(xlSheetName, 256, 7);
			String expBinSum                = excelReader.getCellData(xlSheetName, 257, 7);
			
			
			excelReader.setCellData(xlfile, xlSheetName, 254, 8, actBinTotalQty);
			excelReader.setCellData(xlfile, xlSheetName, 255, 8, actBinBaseUom);
			excelReader.setCellData(xlfile, xlSheetName, 256, 8, actBinBalanceQty);
			excelReader.setCellData(xlfile, xlSheetName, 257, 8, actBinSum);
			
				
			boolean actBinSearchTxt         = binSearchTxt.isDisplayed();
			boolean actBinSearchBtn         = binSearchBtn.isDisplayed();
			//boolean actBinAlternateCategory = binAlternateCategoryCheckBtn.isDisplayed();
			boolean actBinAutoAllocateBtn   = binAutoAllocateBtn.isDisplayed();
			boolean actBinPickBtn           = binPickBtn.isDisplayed();
			boolean actBinCancelBtn         = binCancelBtn.isDisplayed();
			boolean actBinOkBtn             = binOkBtn.isEnabled();
			
			boolean expBinSearchTxt         = true;
			boolean expBinSearchBtn         = true;
			boolean expBinAlternateCategory = true;
			boolean expBinAutoAllocateBtn   = true;
			boolean expBinPickBtn           = true;
			boolean expBinCancelBtn         = true;
			boolean expBinOkBtn             = true;
			
			int binInwardGridListCount = binInwardGridList.size();
			
			ArrayList<String> binInwardGridListArray = new ArrayList<String>();
			
			for(int i=0;i<binInwardGridListCount;i++)
			{
				String data = binInwardGridList.get(i).getText();
				binInwardGridListArray.add(data);
			}
			
			
			String actbinInwardGridList=binInwardGridListArray.toString();
			
			String expbinInwardGridList=excelReader.getCellData(xlSheetName, 253, 7);
			
			excelReader.setCellData(xlfile, xlSheetName, 253, 8, actbinInwardGridList);
			
			System.out.println("ActbinInwardGridList : " + actbinInwardGridList);
			System.out.println("ExpbinInwardGridList : " + expbinInwardGridList);
			
			
			boolean actMethod = actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn 
					            /*&& actBinAlternateCategory==expBinAlternateCategory*/ 
					            && actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn;
			
			String actResult = Boolean.toString(actMethod);
			
			excelReader.setCellData(xlfile, xlSheetName, 252, 8, actResult.toUpperCase());
		
			System.out.println("Bin Search Value Actual                    :  " + actBinSearchTxt +         " Value Expected : " + expBinSearchTxt);
			System.out.println("Bin Search Btn Value Actual                :  " + actBinSearchBtn +         " Value Expected : " + expBinSearchBtn);
			//System.out.println("Bin Alternate Category Value Actual        :  " + actBinAlternateCategory + " Value Expected : " + expBinAlternateCategory);
			System.out.println("Bin Auto Allocate Btn Value Actual         :  " + actBinAutoAllocateBtn +   " Value Expected : " + expBinAutoAllocateBtn);
			System.out.println("Bin Pick Btn Value Actual                  :  " + actBinPickBtn +           " Value Expected : " + expBinPickBtn);
			System.out.println("Bin Cancel Btn Value Actual                :  " + actBinCancelBtn +         " Value Expected : " + expBinCancelBtn);
			System.out.println("Bin Ok Button                              :  " + actBinOkBtn +             " Value Expected : " + expBinOkBtn);
			
			/*System.out.println("First Row Group Name Value Actual          :  " + actBinGroupNameR1 +       " Value Expected : " + expBinGroupNameR1);
			
			System.out.println("Second Row Bin Name Value Actual           :  " + actBinNameR2 +            " Value Expected : " + expBinNameR2);
			System.out.println("Second Row Stock Value Actual              :  " + actBinStockR2 +           " Value Expected : " + expBinStockR2);
			System.out.println("Second Row Capacity Value Actual       	   :  " + actBinCapacityR2 +        " Value Expected : " + expBinCapacityR2);
			System.out.println("Second Row Load Value Actual               :  " + actBinLoadR2 +            " Value Expected : " + expBinLoadR2);
			System.out.println("Second Row Free Space Value Actual         :  " + actBinFreeSpaceR2 +       " Value Expected : " + expBinFreeSpaceR2);
			System.out.println("Second Row Free Qty Value Actual      	   :  " + actBinFreeQtyR2 +         " Value Expected : " + expBinFreeQtyR2);
			System.out.println("Second Row To Be Allocated Value Actual	   :  " + actBinToBeAllocatedR2 +   " Value Expected : " + expBinToBeAllocatedR2);
				
			System.out.println("Third Row Bin Name Value Actual        		:  " + actBinNameR3 +           " Value Expected : " + expBinNameR3);
			System.out.println("Third Row Stock Value Actual            	:  " + actBinStockR3 +          " Value Expected : " + expBinStockR3);
			System.out.println("Third Row Capacity Value Actual       	    :  " + actBinCapacityR3 +       " Value Expected : " + expBinCapacityR3);
			System.out.println("Third Row Load Value Actual            		:  " + actBinLoadR3 +           " Value Expected : " + expBinLoadR3);
			System.out.println("Third Row Free Space Value Actual      		:  " + actBinFreeSpaceR3 +      " Value Expected : " + expBinFreeSpaceR3);
			System.out.println("Third Row Free Qty Value Actual     		:  " + actBinFreeQtyR3 +        " Value Expected : " + expBinFreeQtyR3);
			System.out.println("Third Row To Be Allocated Value Actual 		:  " + actBinToBeAllocatedR3 +  " Value Expected : " + expBinToBeAllocatedR3);*/
			
			System.out.println("Bin Total Qty Value Actual                  :  " + actBinTotalQty +         " Value Expected : " + expBinTotalQty);
			System.out.println("Bin Sum of To Be Allocated Qty Value Actual :  " + actBinSum       +        " Value Expected : " + expBinSum);
				
			System.out.println("Bin Base Uom Value Actual            	    :  " + actBinBaseUom +          " Value Expected : " + expBinBaseUom);
			System.out.println("Bin Balance Txt Value Actual          		:  " + actBinBalanceQty +       " Value Expected : " + expBinBalanceQty);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
			binOkBtn.click();
			
			String actBinName      = excelReader.getCellData(xlSheetName, 258, 7);
			String expBinName      = select2ndRow_7thColumn.getText();
			
			excelReader.setCellData(xlfile, xlSheetName, 258, 8, actBinName);
			
			System.out.println("Bin Column in Voucher Value Actual          : " + actBinName +              " Value Exepected  : " + expBinName);
			
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_7thColumn));
					
			if(/*actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn && actBinAlternateCategory==expBinAlternateCategory 
					&& actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn
					
					&& actBinGroupNameR1.equalsIgnoreCase(expBinGroupNameR1)
					
					&& actBinNameR2.equalsIgnoreCase(expBinNameR2) && actBinStockR2.equalsIgnoreCase(expBinStockR2) 
					&& actBinCapacityR2.equalsIgnoreCase(expBinCapacityR2) && actBinLoadR2.equalsIgnoreCase(expBinLoadR2)
					&& actBinFreeSpaceR2.equalsIgnoreCase(expBinFreeSpaceR2) && actBinFreeQtyR2.equalsIgnoreCase(expBinFreeQtyR2)
					&& actBinToBeAllocatedR2.equalsIgnoreCase(expBinToBeAllocatedR2)
					
					&& actBinNameR3.equalsIgnoreCase(expBinNameR3) && actBinStockR3.equalsIgnoreCase(expBinStockR3) 
					&& actBinCapacityR3.equalsIgnoreCase(expBinCapacityR3) && actBinLoadR3.equalsIgnoreCase(expBinLoadR3)
					&& actBinFreeSpaceR3.equalsIgnoreCase(expBinFreeSpaceR3) && actBinFreeQtyR3.equalsIgnoreCase(expBinFreeQtyR3)
					&& actBinToBeAllocatedR3.equalsIgnoreCase(expBinToBeAllocatedR3)*/
					
					actMethod==true && actbinInwardGridList.equalsIgnoreCase(expbinInwardGridList)
					
					&& actBinTotalQty.equalsIgnoreCase(expBinTotalQty) && actBinBaseUom.equalsIgnoreCase(expBinBaseUom) 
					&& actBinBalanceQty.equalsIgnoreCase(expBinBalanceQty)
					
					&& actBinSum.equalsIgnoreCase(expBinSum)
					
					&& select2ndRow_7thColumn.getText().equalsIgnoreCase(actBinName))
				
			{
				System.out.println("Selected Bin And Ok Btn Not Enabled");
				excelReader.setCellData(xlfile, xlSheetName, 252, 9, resPass);
				return true;
				
			}
			else
			{
				System.out.println("Not Selected Bin And Ok Btn Not Enabled");
				excelReader.setCellData(xlfile, xlSheetName, 252, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage().substring(0, 50);
			excelReader.setExceptionInExcel(xlfile, xlSheetName, 252, 10, e.getMessage());
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		}
	  }
		
		
		
		
	  public boolean checkEditOpeningStocksAddingDataInThirdRowForBinCheking() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	  {
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		try
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.click();
			enter_ItemTxt.sendKeys(Keys.HOME);
			enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.END);
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemcount=itemListCount.size();
			
			System.err.println(itemcount);
				
			for(int i=0 ; i < itemcount ;i++)
			{
				String data=itemListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 259, 6)))
				{
					itemListCount.get(i).click();
					
					break;
				}
			}
				
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.click();
			enter_UnitTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.click();
			enter_Quantity.clear();
			enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 260, 6));
			enter_Quantity.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.click();
			enter_Rate.clear();
			enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 261, 6));
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchTxt));
			
			boolean actBinSearchTxt             = binSearchTxt.isDisplayed();
			boolean actBinSearchBtn             = binSearchBtn.isDisplayed();
			//boolean actBinAlternateCategory     = binAlternateCategoryCheckBtn.isDisplayed();
			boolean actBinAutoAllocateBtn       = binAutoAllocateBtn.isDisplayed();
			boolean actBinPickBtn               = binPickBtn.isDisplayed();
			boolean actBinCancelBtn             = binCancelBtn.isDisplayed();
			boolean actBinOkBtn                 = binOkBtn.isEnabled();
			
			boolean expBinSearchTxt             = true;
			boolean expBinSearchBtn             = true;
			boolean expBinAlternateCategory     = true;
			boolean expBinAutoAllocateBtn       = true;
			boolean expBinPickBtn               = true;
			boolean expBinCancelBtn             = true;
			boolean expBinOkBtn                 = true;
			
			
	      /*  String actBinGroupNameR1            = binselect1stRow_2ndColumn.getText();
			
			String actBinNameR2                 = binselect2ndRow_2ndColumn.getText();
			String actBinStockR2                = binselect2ndRow_3rdColumn.getText();
			String actBinCapacityR2             = binselect2ndRow_4thColumn.getText();
			String actBinLoadR2                 = binselect2ndRow_5thColumn.getText();
			String actBinFreeSpaceR2            = binselect2ndRow_6thColumn.getText();
			String actBinFreeQtyR2              = binselect2ndRow_7thColumn.getText();
			String actBinToBeAllocatedR2        = binselect2ndRow_8thColumn.getText();
				
			
			String actBinNameR3                 = binselect3rdRow_2ndColumn.getText();
			String actBinStockR3                = binselect3rdRow_3rdColumn.getText();
			String actBinCapacityR3             = binselect3rdRow_4thColumn.getText();
			String actBinLoadR3                 = binselect3rdRow_5thColumn.getText();
			String actBinFreeSpaceR3            = binselect3rdRow_6thColumn.getText();
			String actBinFreeQtyR3              = binselect3rdRow_7thColumn.getText();
			String actBinToBeAllocatedR3        = binselect3rdRow_8thColumn.getText();*/
			
			String actBinTotalQty               = binTotalQty.getAttribute("value");
			String actBinBaseUom                = binBaseUOM.getText();
			String actBinBalanceQty             = binBalanceTxt.getAttribute("value");
	        String actBinSum                    = binSumInward.getText();
			
			
			/*String expBinGroupNameR1            = "BG1";
			
			String expBinNameR2                 = "Bin4";
			String expBinStockR2                = "0.00";
			String expBinCapacityR2             = "90.00";
			String expBinLoadR2                 = "12.00";
			String expBinFreeSpaceR2            = "78.00";
			String expBinFreeQtyR2              = "78.00";
			String expBinToBeAllocatedR2        = "0.00";
			
			String expBinNameR3                 = "Bin5";
			String expBinStockR3                = "0.00";
			String expBinCapacityR3             = "98.00";
			String expBinLoadR3                 = "0.00";
			String expBinFreeSpaceR3            = "98.00";
			String expBinFreeQtyR3              = "98.00";
			String expBinToBeAllocatedR3        = "0.00";*/

			String expBinTotalQty               = excelReader.getCellData(xlSheetName, 261, 7);
			String expBinBaseUom                = excelReader.getCellData(xlSheetName, 262, 7);
			String expBinBalanceQty             = excelReader.getCellData(xlSheetName, 263, 7);
			String expBinSum                    = excelReader.getCellData(xlSheetName, 264, 7);
			
			excelReader.setCellData(xlfile, xlSheetName, 261, 8, actBinTotalQty);
			excelReader.setCellData(xlfile, xlSheetName, 262, 8, actBinBaseUom);
			excelReader.setCellData(xlfile, xlSheetName, 263, 8, actBinBalanceQty);
			excelReader.setCellData(xlfile, xlSheetName, 264, 8, actBinSum);
			
		   /* System.out.println("First Row Group Name Value Actual          :  " + actBinGroupNameR1 +"          Value Expected : " + expBinGroupNameR1);
			
			System.out.println("Second Row Bin Name Value Actual           :  " + actBinNameR2 +"   			Value Expected :  " + expBinNameR2);
			System.out.println("Second Row Stock Value Actual              :  " + actBinStockR2 +"   			Value Expected : " + expBinStockR2);
			System.out.println("Second Row Capacity Value Actual           :  " + actBinCapacityR2 +"   		Value Expected : " + expBinCapacityR2);
			System.out.println("Second Row Load Value Actual               :  " + actBinLoadR2 +"   			Value Expected : " + expBinLoadR2);
			System.out.println("Second Row Free Space Value Actual         :  " + actBinFreeSpaceR2 +"   		Value Expected : " + expBinFreeSpaceR2);
			System.out.println("Second Row Free Qty Value Actual           :  " + actBinFreeQtyR2 +"   			Value Expected : " + expBinFreeQtyR2);
			System.out.println("Second Row To Be Allocated Value Actual    :  " + actBinToBeAllocatedR2 +"   	Value Expected : " + expBinToBeAllocatedR2);
			
			
			System.out.println("Third Row Bin Name Value Actual            :  " + actBinNameR3 +"   		    Value Expected : " + expBinNameR3);
			System.out.println("Third Row Stock Value Actual           	   :  " + actBinStockR3 +"   			Value Expected : " + expBinStockR3);
			System.out.println("Third Row Capacity Value Actual            :  " + actBinCapacityR3 +"   		Value Expected : " + expBinCapacityR3);
			System.out.println("Third Row Load Value Actual                :  " + actBinLoadR3 +"   			Value Expected : " + expBinLoadR3);
			System.out.println("Third Row Free Space Value Actual          :  " + actBinFreeSpaceR3 +"  		Value Expected :  " + expBinFreeSpaceR3);
			System.out.println("Third Row Free Qty Value Actual            :  " + actBinFreeQtyR3 +"   			Value Expected : " + expBinFreeQtyR3);
			System.out.println("Third Row To Be Allocated Value Actual     :  " + actBinToBeAllocatedR3 +"  	Value Expected :  " + expBinToBeAllocatedR3);*/
			
			

			
			
			int binInwardGridListCount = binInwardGridList.size();
			
			ArrayList<String> binInwardGridListArray = new ArrayList<String>();
			
			for(int i=0;i<binInwardGridListCount;i++)
			{
				String data = binInwardGridList.get(i).getText();
				binInwardGridListArray.add(data);
			}
			
			
			String actbinInwardGridList=binInwardGridListArray.toString();
			
			String expbinInwardGridList=excelReader.getCellData(xlSheetName, 260, 7);
			
			excelReader.setCellData(xlfile, xlSheetName, 260, 8, actbinInwardGridList);
			
			System.out.println("ActbinInwardGridList : " + actbinInwardGridList);
			System.out.println("ExpbinInwardGridList : " + expbinInwardGridList);
			
			
			boolean actMethod = actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn 
					            /*&& actBinAlternateCategory==expBinAlternateCategory*/ 
					            && actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn;
			
			String actResult = Boolean.toString(actMethod);
			
			excelReader.setCellData(xlfile, xlSheetName, 259, 8, actResult.toUpperCase());

		
			System.out.println("Bin Total Qty Value Actual                 :  " +actBinTotalQty +"  			Value Expected : "+expBinTotalQty);
			System.out.println("Bin Base Uom Value Actual                  :  " +actBinBaseUom +"  				Value Expected : "+expBinBaseUom);
			System.out.println("Bin Balance Txt Value Actual               :  " +actBinBalanceQty +"  		    Value Expected : "+expBinBalanceQty);
			System.out.println("Bin Total Sum Value Actual                 :  " + actBinSum +"                  Value Expected : " + expBinSum);
			
			System.out.println("Bin Search Value Actual                    :  " + actBinSearchTxt +"            Value Expected : " + expBinSearchTxt);
			System.out.println("Bin Search Btn Value Actual                :  " + actBinSearchBtn +"            Value Expected : " + expBinSearchBtn);
			//System.out.println("Bin Alternate Category Value Actual        :  " + actBinAlternateCategory +"    Value Expected : " + expBinAlternateCategory);
			System.out.println("Bin Auto Allocate Btn Value Actual         :  " + actBinAutoAllocateBtn +"      Value Expected : " + expBinAutoAllocateBtn);
			System.out.println("Bin Pick Btn Value Actual                  :  " + actBinPickBtn +"              Value Expected : " + expBinPickBtn);
			System.out.println("Bin Cancel Btn Value Actual                :  " + actBinCancelBtn +"            Value Expected : " + expBinCancelBtn);
			System.out.println("Bin Ok Btn Value Actual                    :  " + actBinOkBtn +"                Value Expected : " + expBinOkBtn);
			
						
			if(/*actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn && actBinAlternateCategory==expBinAlternateCategory 
					&& actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn
					
					&& actBinGroupNameR1.equalsIgnoreCase(expBinGroupNameR1)
					
					&& actBinNameR2.equalsIgnoreCase(expBinNameR2) && actBinStockR2.equalsIgnoreCase(expBinStockR2) 
					&& actBinCapacityR2.equalsIgnoreCase(expBinCapacityR2) && actBinLoadR2.equalsIgnoreCase(expBinLoadR2)
					&& actBinFreeSpaceR2.equalsIgnoreCase(expBinFreeSpaceR2) && actBinFreeQtyR2.equalsIgnoreCase(expBinFreeQtyR2)
					&& actBinToBeAllocatedR2.equalsIgnoreCase(expBinToBeAllocatedR2)
					
					&& actBinNameR3.equalsIgnoreCase(expBinNameR3) && actBinStockR3.equalsIgnoreCase(expBinStockR3) 
					&& actBinCapacityR3.equalsIgnoreCase(expBinCapacityR3) && actBinLoadR3.equalsIgnoreCase(expBinLoadR3)
					&& actBinFreeSpaceR3.equalsIgnoreCase(expBinFreeSpaceR3) && actBinFreeQtyR3.equalsIgnoreCase(expBinFreeQtyR3)
					&& actBinToBeAllocatedR3.equalsIgnoreCase(expBinToBeAllocatedR3)*/
					
					actMethod==true && actbinInwardGridList.equalsIgnoreCase(expbinInwardGridList)
					
					&& actBinTotalQty.equalsIgnoreCase(expBinTotalQty) && actBinBaseUom.equalsIgnoreCase(expBinBaseUom) 
					&& actBinBalanceQty.equalsIgnoreCase(expBinBalanceQty)
					
					&& actBinSum.equalsIgnoreCase(expBinSum))
			{
				
				System.out.println("Test Pass : Bin Popup options Are As Expected");
				excelReader.setCellData(xlfile, xlSheetName, 259, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Bin Popup options Are NOT As Expected");
				excelReader.setCellData(xlfile, xlSheetName, 259, 9, resFail);
				return false;
			}
		  }
		catch (Exception e) 
		{
			String exception =e.getMessage().substring(0, 50);
			excelReader.setExceptionInExcel(xlfile, xlSheetName, 259, 10, e.getMessage());
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		}
	  }
		
		
	  public boolean checkEditOpeningStocksAddingBinInThridRowAutoAllocateInBin() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	  {
			
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		try
		{	
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
			binAutoAllocateBtn.click();
				
			boolean actBinSearchTxt         = binSearchTxt.isDisplayed();
			boolean actBinSearchBtn         = binSearchBtn.isDisplayed();
			//boolean actBinAlternateCategory = binAlternateCategoryCheckBtn.isDisplayed();
			boolean actBinAutoAllocateBtn   = binAutoAllocateBtn.isDisplayed();
			boolean actBinPickBtn           = binPickBtn.isDisplayed();
			boolean actBinCancelBtn         = binCancelBtn.isDisplayed();
			boolean actBinOkBtn             = binOkBtn.isEnabled();
					
			boolean expBinSearchTxt         = true;
			boolean expBinSearchBtn         = true;
			boolean expBinAlternateCategory = true;
			boolean expBinAutoAllocateBtn   = true;
			boolean expBinPickBtn           = true;
			boolean expBinCancelBtn         = true;
			boolean expBinOkBtn             = true;
			
			boolean actMethod = actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn 
		            /*&& actBinAlternateCategory==expBinAlternateCategory*/ 
		            && actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn;

			String actResult = Boolean.toString(actMethod);

			excelReader.setCellData(xlfile, xlSheetName, 265, 8, actResult.toUpperCase());
				
			System.out.println("Bin Search Value Actual                :  " + actBinSearchTxt +         " Value Expected : " + expBinSearchTxt);
			System.out.println("Bin Search Btn Value Actual            :  " + actBinSearchBtn +         " Value Expected : " + expBinSearchBtn);
			//System.out.println("Bin Alternate Category Value Actual    :  " + actBinAlternateCategory + " Value Expected : " + expBinAlternateCategory);
			System.out.println("Bin Auto Allocate Btn Value Actual     :  " + actBinAutoAllocateBtn +   " Value Expected : " + expBinAutoAllocateBtn);
			System.out.println("Bin Pick Btn Value Actual              :  " + actBinPickBtn +           " Value Expected : " + expBinPickBtn);
			System.out.println("Bin Cancel Btn Value Actual            :  " + actBinCancelBtn +         " Value Expected : " + expBinCancelBtn);
			System.out.println("Bin Ok Btn Value Actual                :  " + actBinOkBtn +             " Value Expected : " + expBinOkBtn);
			
			int binInwardGridListCount = binInwardGridList.size();
			
			ArrayList<String> binInwardGridListArray = new ArrayList<String>();
			
			for(int i=0;i<binInwardGridListCount;i++)
			{
				String data = binInwardGridList.get(i).getText();
				binInwardGridListArray.add(data);
			}
			
			
			String actbinInwardGridList=binInwardGridListArray.toString();
			
			String expbinInwardGridList=excelReader.getCellData(xlSheetName, 266, 7);
			
			excelReader.setCellData(xlfile, xlSheetName, 266, 8, actbinInwardGridList);
			
			System.out.println("ActbinInwardGridList : " + actbinInwardGridList);
			System.out.println("ExpbinInwardGridList : " + expbinInwardGridList);
			
	       /* String actBinGroupNameR1        = binselect1stRow_2ndColumn.getText();
			
			String actBinNameR2             = binselect2ndRow_2ndColumn.getText();
			String actBinStockR2            = binselect2ndRow_3rdColumn.getText();
			String actBinCapacityR2         = binselect2ndRow_4thColumn.getText();
			String actBinLoadR2             = binselect2ndRow_5thColumn.getText();
			String actBinFreeSpaceR2        = binselect2ndRow_6thColumn.getText();
			String actBinFreeQtyR2          = binselect2ndRow_7thColumn.getText();
			String actBinToBeAllocatedR2    = binselect2ndRow_8thColumn.getText();
				
			String actBinNameR3             = binselect3rdRow_2ndColumn.getText();
			String actBinStockR3            = binselect3rdRow_3rdColumn.getText();
			String actBinCapacityR3         = binselect3rdRow_4thColumn.getText();
			String actBinLoadR3             = binselect3rdRow_5thColumn.getText();
			String actBinFreeSpaceR3        = binselect3rdRow_6thColumn.getText();
			String actBinFreeQtyR3          = binselect3rdRow_7thColumn.getText();
			String actBinToBeAllocatedR3    = binselect3rdRow_8thColumn.getText();*/
			
			String actBinTotalQty           = binTotalQty.getAttribute("value");
			String actBinBaseUom            = binBaseUOM.getText();
			String actBinBalanceQty         = binBalanceTxt.getAttribute("value");
			String actBinSum                = binSumInward.getText();
			
			
			
			/*String expBinGroupNameR1        = "BG1";
			
			String expBinNameR2             = "Bin4";
			String expBinStockR2            = "0.00";
			String expBinCapacityR2         = "90.00";
			String expBinLoadR2             = "12.00";
			String expBinFreeSpaceR2        = "78.00";
			String expBinFreeQtyR2          = "78.00";
			String expBinToBeAllocatedR2    = "12.00";
		 	
			String expBinNameR3             = "Bin5";
			String expBinStockR3            = "0.00";
			String expBinCapacityR3         = "98.00";
			String expBinLoadR3             = "0.00";
			String expBinFreeSpaceR3        = "98.00";
			String expBinFreeQtyR3          = "98.00";
			String expBinToBeAllocatedR3    = "0.00";*/
			
			String expBinTotalQty           = excelReader.getCellData(xlSheetName, 267, 7);
			String expBinBaseUom            = excelReader.getCellData(xlSheetName, 268, 7);
			String expBinBalanceQty         = excelReader.getCellData(xlSheetName, 269, 7);
			String expBinSum                = excelReader.getCellData(xlSheetName, 270, 7);
			
			excelReader.setCellData(xlfile, xlSheetName, 267, 8, actBinTotalQty);
			excelReader.setCellData(xlfile, xlSheetName, 268, 8, actBinBaseUom);
			excelReader.setCellData(xlfile, xlSheetName, 269, 8, actBinBalanceQty);
			excelReader.setCellData(xlfile, xlSheetName, 270, 8, actBinSum);
			
			
			/*System.out.println("First Row Group Name Value Actual          :  " + actBinGroupNameR1 +     "  Value Expected : " + expBinGroupNameR1);
			
			System.out.println("Second Row Bin Name Value Actual           :  " + actBinNameR2 +          "  Value Expected : " + expBinNameR2);
			System.out.println("Second Row Stock Value Actual              :  " + actBinStockR2 +         "  Value Expected : " + expBinStockR2);
			System.out.println("Second Row Capacity Value Actual           :  " + actBinCapacityR2 +      "  Value Expected : " + expBinCapacityR2);
			System.out.println("Second Row Load Value Actual               :  " + actBinLoadR2 +          "  Value Expected : " + expBinLoadR2);
			System.out.println("Second Row Free Space Value Actual         :  " + actBinFreeSpaceR2 +     "  Value Expected : " + expBinFreeSpaceR2);
			System.out.println("Second Row Free Qty Value Actual           :  " + actBinFreeQtyR2 +       "  Value Expected : " + expBinFreeQtyR2);
			System.out.println("Second Row To Be Allocated Value Actual    :  " + actBinToBeAllocatedR2 + "  Value Expected : " + expBinToBeAllocatedR2);
					
			System.out.println("Third Row Bin Name Value Actual            :  " + actBinNameR3 +          "  Value Expected : " + expBinNameR3);
			System.out.println("Third Row Stock Value Actual               :  " + actBinStockR3 +         "  Value Expected : " + expBinStockR3);
			System.out.println("Third Row Capacity Value Actual            :  " + actBinCapacityR3 +      "  Value Expected : " + expBinCapacityR3);
			System.out.println("Third Row Load Value Actual                :  " + actBinLoadR3 +          "  Value Expected : " + expBinLoadR3);
			System.out.println("Third Row Free Space Value Actual          :  " + actBinFreeSpaceR3 +     "  Value Expected : " + expBinFreeSpaceR3);
			System.out.println("Third Row Free Qty Value Actual            :  " + actBinFreeQtyR3 +       "  Value Expected : " + expBinFreeQtyR3);
			System.out.println("Third Row To Be Allocated Value Actual     :  " + actBinToBeAllocatedR3 + "  Value Expected : " + expBinToBeAllocatedR3);*/
			
			System.out.println("Bin Total Qty Value Actual                 :  " + actBinTotalQty +         "  Value Expected : " + expBinTotalQty);
			System.out.println("Bin Base Uom  Value Actual                 :  " + actBinBaseUom +          "  Value Expected : " + expBinBaseUom);
			System.out.println("Bin Balance Value Actual                   :  " + actBinBalanceQty +       "  Value Expected : " + expBinBalanceQty);
			System.out.println("Bin Total Sum Value Actual                 :  " + actBinSum +             "  Value Expected :  " + expBinSum);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
			binOkBtn.click();
			
			String actBinNameDisplayInVoucherBinColumn = select3rdRow_7thColumn.getText();
			String expBinNameDisplayInVoucherBinColumn = excelReader.getCellData(xlSheetName, 271, 7);
			
			excelReader.setCellData(xlfile, xlSheetName, 271, 8, actBinNameDisplayInVoucherBinColumn);
			
			System.out.println("Bin Column in Voucher Value Actual : " + actBinNameDisplayInVoucherBinColumn +  " Value Expected : " + expBinNameDisplayInVoucherBinColumn);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_7thColumn));
					
			if(/*actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn && actBinAlternateCategory==expBinAlternateCategory 
					&& actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn
					&& actBinOkBtn==expBinOkBtn
					
					&& actBinGroupNameR1.equalsIgnoreCase(expBinGroupNameR1)
					
					&& actBinNameR2.equalsIgnoreCase(expBinNameR2) && actBinStockR2.equalsIgnoreCase(expBinStockR2) 
					&& actBinCapacityR2.equalsIgnoreCase(expBinCapacityR2) && actBinLoadR2.equalsIgnoreCase(expBinLoadR2)
					&& actBinFreeSpaceR2.equalsIgnoreCase(expBinFreeSpaceR2) && actBinFreeQtyR2.equalsIgnoreCase(expBinFreeQtyR2)
					&& actBinToBeAllocatedR2.equalsIgnoreCase(expBinToBeAllocatedR2)
					
					&& actBinNameR3.equalsIgnoreCase(expBinNameR3) && actBinStockR3.equalsIgnoreCase(expBinStockR3) 
					&& actBinCapacityR3.equalsIgnoreCase(expBinCapacityR3) && actBinLoadR3.equalsIgnoreCase(expBinLoadR3)
					&& actBinFreeSpaceR3.equalsIgnoreCase(expBinFreeSpaceR3) && actBinFreeQtyR3.equalsIgnoreCase(expBinFreeQtyR3)
					&& actBinToBeAllocatedR3.equalsIgnoreCase(expBinToBeAllocatedR3)*/
					
					actMethod==true && actbinInwardGridList.equalsIgnoreCase(expbinInwardGridList)
					
					&& actBinTotalQty.equalsIgnoreCase(expBinTotalQty) && actBinBaseUom.equalsIgnoreCase(expBinBaseUom) 
					&& actBinBalanceQty.equalsIgnoreCase(expBinBalanceQty)
					
					&& actBinSum.equalsIgnoreCase(expBinSum)
					
					&& actBinNameDisplayInVoucherBinColumn.equalsIgnoreCase(expBinNameDisplayInVoucherBinColumn))
			{
				System.out.println("Selected Bin And Ok Btn Not Enabled");
				excelReader.setCellData(xlfile, xlSheetName, 265, 9, resPass);
				return true;
			
			}
			else
			{
				System.out.println("Not Selected Bin And Ok Btn Not Enabled");
				excelReader.setCellData(xlfile, xlSheetName, 265, 9, resFail);
				return false;
			}
		  }
		catch (Exception e) 
		{
			String exception =e.getMessage().substring(0, 50);
			excelReader.setExceptionInExcel(xlfile, xlSheetName, 265, 10, e.getMessage());
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		}
	  }
		
		
		
		
		
	  public boolean checkEditOpeningStocksNewAddingDataInFourthRowForBinCheking() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	  {		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		try
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.click();
			enter_ItemTxt.sendKeys(Keys.HOME);
			enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.END);
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemcount   =  itemListCount.size();
			
			System.err.println(itemcount);
				
			for(int i=0 ; i < itemcount ;i++)
			{
				String data = itemListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 272, 6)))
				{
					itemListCount.get(i).click();		
					break;
				}
			}
				
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.click();
			enter_UnitTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.click();
			enter_Quantity.clear();
			enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 273, 6));
			enter_Quantity.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.click();
			enter_Rate.clear();
			enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 274, 6));
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchTxt));
			
			boolean actBinSearchTxt                = binSearchTxt.isDisplayed();
			boolean actBinSearchBtn                = binSearchBtn.isDisplayed();
			//boolean actBinAlternateCategory        = binAlternateCategoryCheckBtn.isDisplayed();
			boolean actBinAutoAllocateBtn          = binAutoAllocateBtn.isDisplayed();
			boolean actBinPickBtn                  = binPickBtn.isDisplayed();
			boolean actBinCancelBtn                = binCancelBtn.isDisplayed();
			boolean actBinOkBtn                    = binOkBtn.isEnabled();
					
			boolean expBinSearchTxt                = true;
			boolean expBinSearchBtn                = true;
			boolean expBinAlternateCategory        = true;
			boolean expBinAutoAllocateBtn          = true;
			boolean expBinPickBtn                  = true;
			boolean expBinCancelBtn                = true;
			boolean expBinOkBtn                    = true;
				
			System.out.println("Bin Search Value Actual                :  " + actBinSearchTxt +         " Value Expected : " + expBinSearchTxt);
			System.out.println("Bin Search Btn Value Actual            :  " + actBinSearchBtn +         " Value Expected : " + expBinSearchBtn);
			//System.out.println("Bin Alternate Category Value Actual    :  " + actBinAlternateCategory + " Value Expected : " + expBinAlternateCategory);
			System.out.println("Bin Auto Allocate Btn Value Actual     :  " + actBinAutoAllocateBtn +   " Value Expected : " + expBinAutoAllocateBtn);
			System.out.println("Bin Pick Btn Value Actual              :  " + actBinPickBtn +           " Value Expected : " + expBinPickBtn);
			System.out.println("Bin Cancel Btn Value Actual            :  " + actBinCancelBtn +         " Value Expected : " + expBinCancelBtn);
			System.out.println("Bin Ok Btn Value Actual                :  " + actBinOkBtn +             " Value Expected : " + expBinOkBtn);
			

	       /* String actBinGroupNameR1      = binselect1stRow_2ndColumn.getText();
			
			String actBinNameR2           = binselect2ndRow_2ndColumn.getText();
			String actBinStockR2          = binselect2ndRow_3rdColumn.getText();
			String actBinCapacityR2       = binselect2ndRow_4thColumn.getText();
			String actBinLoadR2           = binselect2ndRow_5thColumn.getText();
			String actBinFreeSpaceR2      = binselect2ndRow_6thColumn.getText();
			String actBinFreeQtyR2        = binselect2ndRow_7thColumn.getText();
			String actBinToBeAllocatedR2  = binselect2ndRow_8thColumn.getText();
				
			String actBinNameR3           = binselect3rdRow_2ndColumn.getText();
			String actBinStockR3          = binselect3rdRow_3rdColumn.getText();
			String actBinCapacityR3       = binselect3rdRow_4thColumn.getText();
			String actBinLoadR3           = binselect3rdRow_5thColumn.getText();
			String actBinFreeSpaceR3      = binselect3rdRow_6thColumn.getText();
			String actBinFreeQtyR3        = binselect3rdRow_7thColumn.getText();
			String actBinToBeAllocatedR3  = binselect3rdRow_8thColumn.getText();*/
			
			 int binInwardGridListCount = binInwardGridList.size();
	         
	         ArrayList<String> binInwardGridListArray = new ArrayList<String>();
	         
	         for(int i=0;i<binInwardGridListCount;i++)
	         {
	                 String data = binInwardGridList.get(i).getText();
	                 binInwardGridListArray.add(data);
	         }
	         
	         
	         String actbinInwardGridList=binInwardGridListArray.toString();
	         
	         String expbinInwardGridList=excelReader.getCellData(xlSheetName, 273, 7);
	         
	         excelReader.setCellData(xlfile, xlSheetName, 273, 8, actbinInwardGridList);
	         
	         System.out.println("ActbinInwardGridList : " + actbinInwardGridList);
	         System.out.println("ExpbinInwardGridList : " + expbinInwardGridList);
	         
	         
	         boolean actMethod = actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn 
	                                     /*&& actBinAlternateCategory==expBinAlternateCategory*/ 
	                                     && actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn;
	         
	         String actResult = Boolean.toString(actMethod);
	         
	         excelReader.setCellData(xlfile, xlSheetName, 272, 8, actResult.toUpperCase());

			
			String actBinTotalQty         = binTotalQty.getAttribute("value");
			String actBinBaseUom          = binBaseUOM.getText();
			String actBinBalanceQty       = binBalanceTxt.getAttribute("value");
			String actBinSum              = binSumInward.getText();
				

			/*String expBinGroupNameR1      = "BG1";
			
			String expBinNameR2           = "Bin4";
			String expBinStockR2          = "0.00";
			String expBinCapacityR2       = "90.00";
			String expBinLoadR2           = "24.00";
			String expBinFreeSpaceR2      = "66.00";
			String expBinFreeQtyR2        = "66.00";
			String expBinToBeAllocatedR2  = "0.00";
			
			String expBinNameR3           = "Bin5";
			String expBinStockR3          = "0.00";
			String expBinCapacityR3       = "98.00";
			String expBinLoadR3           = "0.00";
			String expBinFreeSpaceR3      = "98.00";
			String expBinFreeQtyR3        = "98.00";
			String expBinToBeAllocatedR3  = "0.00";*/
		
			String expBinTotalQty         = excelReader.getCellData(xlSheetName, 274, 7);
			String expBinBaseUom          = excelReader.getCellData(xlSheetName, 275, 7);
			String expBinBalanceQty       = excelReader.getCellData(xlSheetName, 276, 7);
			String expBinSum              = excelReader.getCellData(xlSheetName, 277, 7);
			
			excelReader.setCellData(xlfile, xlSheetName, 274, 8, actBinTotalQty);
	        excelReader.setCellData(xlfile, xlSheetName, 275, 8, actBinBaseUom);
	        excelReader.setCellData(xlfile, xlSheetName, 276, 8, actBinBalanceQty);
	        excelReader.setCellData(xlfile, xlSheetName, 277, 8, actBinSum);

					
			/*System.out.println("First Row Group Name        :  " + actBinGroupNameR1 +        "  Value Expected : "  + expBinGroupNameR1);
			
			System.out.println("Second Row Bin Name         :  " + actBinNameR2 +             "  Value Expected : "  + expBinNameR2);
			System.out.println("Second Row Stock            :  " + actBinStockR2 +            "  Value Expected : "  + expBinStockR2);
			System.out.println("Second Row Capacity         :  " + actBinCapacityR2 +         "  Value Expected : "  + expBinCapacityR2);
			System.out.println("Second Row Load             :  " + actBinLoadR2 +             "  Value Expected : "  + expBinLoadR2);
			System.out.println("Second Row Free Space       :  " + actBinFreeSpaceR2 +        "  Value Expected : "  + expBinFreeSpaceR2);
			System.out.println("Second Row Free Qty         :  " + actBinFreeQtyR2 +          "  Value Expected : "  + expBinFreeQtyR2);
			System.out.println("Second Row To Be Allocated  :  " + actBinToBeAllocatedR2 +    "  Value Expected : "  + expBinToBeAllocatedR2);
			
			System.out.println("Third Row Bin Name          :  " + actBinNameR3 +             "  Value Expected : "  + expBinNameR3);
			System.out.println("Third Row Stock             :  " + actBinStockR3 +            "  Value Expected : "  + expBinStockR3);
			System.out.println("Third Row Capacity          :  " + actBinCapacityR3 +         "  Value Expected : "  + expBinCapacityR3);
			System.out.println("Third Row Load              :  " + actBinLoadR3 +             "  Value Expected : "  + expBinLoadR3);
			System.out.println("Third Row Free Space        :  " + actBinFreeSpaceR3 +        "  Value Expected : "  + expBinFreeSpaceR3);
			System.out.println("Third Row Free Qty          :  " + actBinFreeQtyR3 +          "  Value Expected : "  + expBinFreeQtyR3);
			System.out.println("Third Row To Be Allocated   :  " + actBinToBeAllocatedR3 +    "  Value Expected : "  + expBinToBeAllocatedR3);*/
			
			System.out.println("Bin Total Qty               :  " +actBinTotalQty +            "  Value Expected : "  + expBinTotalQty);
			System.out.println("Bin Base Uom                :  " +actBinBaseUom +             "  Value Expected : "  + expBinBaseUom);
			System.out.println("Bin Balance Txt             :  " +actBinBalanceQty +          "  Value Expected : "  + expBinBalanceQty);
			
			System.out.println("Bin Total To Be Adjusted    :  " + actBinSum +"   " + expBinSum);
					
			if(/*actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn && actBinAlternateCategory==expBinAlternateCategory 
					&& actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn
					&& actBinOkBtn==expBinOkBtn
			
					&& actBinGroupNameR1.equalsIgnoreCase(expBinGroupNameR1)
					
					&& actBinNameR2.equalsIgnoreCase(expBinNameR2) && actBinStockR2.equalsIgnoreCase(expBinStockR2) 
					&& actBinCapacityR2.equalsIgnoreCase(expBinCapacityR2) && actBinLoadR2.equalsIgnoreCase(expBinLoadR2)
					&& actBinFreeSpaceR2.equalsIgnoreCase(expBinFreeSpaceR2) && actBinFreeQtyR2.equalsIgnoreCase(expBinFreeQtyR2)
					&& actBinToBeAllocatedR2.equalsIgnoreCase(expBinToBeAllocatedR2)
					
					&& actBinNameR3.equalsIgnoreCase(expBinNameR3) && actBinStockR3.equalsIgnoreCase(expBinStockR3) 
					&& actBinCapacityR3.equalsIgnoreCase(expBinCapacityR3) && actBinLoadR3.equalsIgnoreCase(expBinLoadR3)
					&& actBinFreeSpaceR3.equalsIgnoreCase(expBinFreeSpaceR3) && actBinFreeQtyR3.equalsIgnoreCase(expBinFreeQtyR3)
					&& actBinToBeAllocatedR3.equalsIgnoreCase(expBinToBeAllocatedR3)*/
					
					actMethod==true && actbinInwardGridList.equalsIgnoreCase(expbinInwardGridList)
					
					&& actBinTotalQty.equalsIgnoreCase(expBinTotalQty) && actBinBaseUom.equalsIgnoreCase(expBinBaseUom) 
					&& actBinBalanceQty.equalsIgnoreCase(expBinBalanceQty)
					
					&& actBinSum.equalsIgnoreCase(expBinSum))
			{
				
				System.out.println("Test Pass : Bin Popup options Are As Expected");
				excelReader.setCellData(xlfile, xlSheetName, 272, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Bin Popup options Are NOT As Expected");
				excelReader.setCellData(xlfile, xlSheetName, 272, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage().substring(0, 50);
			excelReader.setExceptionInExcel(xlfile, xlSheetName, 272, 10, e.getMessage());
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		}
	  }
		
	 
	  
	  public boolean checkEditOpeningStocksNewVoucherByInputBinColumnManuallyInBinScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	  {
			
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binselect2ndRow_8thColumn));
			binselect2ndRow_8thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ToBeAllocateTxt));
			enter_ToBeAllocateTxt.sendKeys(excelReader.getCellData(xlSheetName, 278, 6));
			enter_ToBeAllocateTxt.sendKeys(Keys.TAB);
			
			boolean actBinSearchTxt                = binSearchTxt.isDisplayed();
			boolean actBinSearchBtn                = binSearchBtn.isDisplayed();
			//boolean actBinAlternateCategory        = binAlternateCategoryCheckBtn.isDisplayed();
			boolean actBinAutoAllocateBtn          = binAutoAllocateBtn.isDisplayed();
			boolean actBinPickBtn                  = binPickBtn.isDisplayed();
			boolean actBinCancelBtn                = binCancelBtn.isDisplayed();
			boolean actBinOkBtn                    = binOkBtn.isEnabled();
					
			boolean expBinSearchTxt                = true;
			boolean expBinSearchBtn                = true;
			boolean expBinAlternateCategory        = true;
			boolean expBinAutoAllocateBtn          = true;
			boolean expBinPickBtn                  = true;
			boolean expBinCancelBtn                = true;
			boolean expBinOkBtn                    = true;
				
			System.out.println("Bin Search Value Actual                :  " + actBinSearchTxt +         " Value Expected : " + expBinSearchTxt);
			System.out.println("Bin Search Btn Value Actual            :  " + actBinSearchBtn +         " Value Expected : " + expBinSearchBtn);
			//System.out.println("Bin Alternate Category Value Actual    :  " + actBinAlternateCategory + " Value Expected : " + expBinAlternateCategory);
			System.out.println("Bin Auto Allocate Btn Value Actual     :  " + actBinAutoAllocateBtn +   " Value Expected : " + expBinAutoAllocateBtn);
			System.out.println("Bin Pick Btn Value Actual              :  " + actBinPickBtn +           " Value Expected : " + expBinPickBtn);
			System.out.println("Bin Cancel Btn Value Actual            :  " + actBinCancelBtn +         " Value Expected : " + expBinCancelBtn);
			System.out.println("Bin Ok Btn Value Actual                :  " + actBinOkBtn +             " Value Expected : " + expBinOkBtn);
			
			

	        /*String actBinGroupNameR1                = binselect1stRow_2ndColumn.getText();
			
			String actBinNameR2                     = binselect2ndRow_2ndColumn.getText();
			String actBinStockR2                    = binselect2ndRow_3rdColumn.getText();
			String actBinCapacityR2                 = binselect2ndRow_4thColumn.getText();
			String actBinLoadR2                     = binselect2ndRow_5thColumn.getText();
			String actBinFreeSpaceR2                = binselect2ndRow_6thColumn.getText();
			String actBinFreeQtyR2                  = binselect2ndRow_7thColumn.getText();
			String actBinToBeAllocatedR2            = binselect2ndRow_8thColumn.getText();
				
			String actBinNameR3                     = binselect3rdRow_2ndColumn.getText();
			String actBinStockR3                    = binselect3rdRow_3rdColumn.getText();
			String actBinCapacityR3                 = binselect3rdRow_4thColumn.getText();
			String actBinLoadR3                     = binselect3rdRow_5thColumn.getText();
			String actBinFreeSpaceR3                = binselect3rdRow_6thColumn.getText();
			String actBinFreeQtyR3                  = binselect3rdRow_7thColumn.getText();
			String actBinToBeAllocatedR3            = binselect3rdRow_8thColumn.getText();*/
			
			String actBinTotalQty                   = binTotalQty.getAttribute("value");
			String actBinBaseUom                    = binBaseUOM.getText();
			String actBinBalanceQty                 = binBalanceTxt.getAttribute("value");
			String actBinSum                        = binSumInward.getText();
			
			
			
			/*String expBinGroupNameR1                = "BG1";
			
			String expBinNameR2                     = "Bin4";
			String expBinStockR2                    = "0.00";
			String expBinCapacityR2                 = "90.00";
			String expBinLoadR2                     = "24.00";
			String expBinFreeSpaceR2                = "66.00";
			String expBinFreeQtyR2                  = "66.00";
			String expBinToBeAllocatedR2            = "12.00";
			
			String expBinNameR3                     = "Bin5";
			String expBinStockR3                    = "0.00";
			String expBinCapacityR3                 = "98.00";
			String expBinLoadR3                     = "0.00";
			String expBinFreeSpaceR3                = "98.00";
			String expBinFreeQtyR3                  = "98.00";
			String expBinToBeAllocatedR3            = "0.00";*/
			
			 String expBinTotalQty               = excelReader.getCellData(xlSheetName, 280, 7);
	         String expBinBaseUom                = excelReader.getCellData(xlSheetName, 281, 7);
	         String expBinBalanceQty             = excelReader.getCellData(xlSheetName, 282, 7);
	         String expBinSum                    = excelReader.getCellData(xlSheetName, 283, 7);
	         
	         excelReader.setCellData(xlfile, xlSheetName, 280, 8, actBinTotalQty);
	         excelReader.setCellData(xlfile, xlSheetName, 281, 8, actBinBaseUom);
	         excelReader.setCellData(xlfile, xlSheetName, 282, 8, actBinBalanceQty);
	         excelReader.setCellData(xlfile, xlSheetName, 283, 8, actBinSum);
	         
	         int binInwardGridListCount = binInwardGridList.size();
	         
	         ArrayList<String> binInwardGridListArray = new ArrayList<String>();
	         
	         for(int i=0;i<binInwardGridListCount;i++)
	         {
	                 String data = binInwardGridList.get(i).getText();
	                 binInwardGridListArray.add(data);
	         }
	         
	         
	         String actbinInwardGridList=binInwardGridListArray.toString();
	         
	         String expbinInwardGridList=excelReader.getCellData(xlSheetName, 279, 7);
	         
	         excelReader.setCellData(xlfile, xlSheetName, 279, 8, actbinInwardGridList);
	         
	         System.out.println("ActbinInwardGridList : " + actbinInwardGridList);
	         System.out.println("ExpbinInwardGridList : " + expbinInwardGridList);
	         
	         
	         boolean actMethod = actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn 
	                                     /*&& actBinAlternateCategory==expBinAlternateCategory*/ 
	                                     && actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn;
	         
	         String actResult = Boolean.toString(actMethod);
	         
	         excelReader.setCellData(xlfile, xlSheetName, 278, 8, actResult.toUpperCase());

	         

				
	       /* System.out.println("First Row Group Name        :  " + actBinGroupNameR1 +        "  Value Expected : "  + expBinGroupNameR1);
			
			System.out.println("Second Row Bin Name         :  " + actBinNameR2 +             "  Value Expected : "  + expBinNameR2);
			System.out.println("Second Row Stock            :  " + actBinStockR2 +            "  Value Expected : "  + expBinStockR2);
			System.out.println("Second Row Capacity         :  " + actBinCapacityR2 +         "  Value Expected : "  + expBinCapacityR2);
			System.out.println("Second Row Load             :  " + actBinLoadR2 +             "  Value Expected : "  + expBinLoadR2);
			System.out.println("Second Row Free Space       :  " + actBinFreeSpaceR2 +        "  Value Expected : "  + expBinFreeSpaceR2);
			System.out.println("Second Row Free Qty         :  " + actBinFreeQtyR2 +          "  Value Expected : "  + expBinFreeQtyR2);
			System.out.println("Second Row To Be Allocated  :  " + actBinToBeAllocatedR2 +    "  Value Expected : "  + expBinToBeAllocatedR2);
			
			System.out.println("Third Row Bin Name          :  " + actBinNameR3 +             "  Value Expected : "  + expBinNameR3);
			System.out.println("Third Row Stock             :  " + actBinStockR3 +            "  Value Expected : "  + expBinStockR3);
			System.out.println("Third Row Capacity          :  " + actBinCapacityR3 +         "  Value Expected : "  + expBinCapacityR3);
			System.out.println("Third Row Load              :  " + actBinLoadR3 +             "  Value Expected : "  + expBinLoadR3);
			System.out.println("Third Row Free Space        :  " + actBinFreeSpaceR3 +        "  Value Expected : "  + expBinFreeSpaceR3);
			System.out.println("Third Row Free Qty          :  " + actBinFreeQtyR3 +          "  Value Expected : "  + expBinFreeQtyR3);
			System.out.println("Third Row To Be Allocated   :  " + actBinToBeAllocatedR3 +    "  Value Expected : "  + expBinToBeAllocatedR3);*/
			
			System.out.println("Bin Total Qty               :  " +actBinTotalQty +            "  Value Expected : "  + expBinTotalQty);
			System.out.println("Bin Base Uom                :  " +actBinBaseUom +             "  Value Expected : "  + expBinBaseUom);
			System.out.println("Bin Balance Txt             :  " +actBinBalanceQty +          "  Value Expected : "  + expBinBalanceQty);
			System.out.println("Bin Total To Be Adjusted    :  " + actBinSum +                "  Value Expected : " + expBinSum);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
			binOkBtn.click();
			
			String actBinName=excelReader.getCellData(xlSheetName, 284, 7);
			
			System.out.println("Bin Column in Voucher : "+ actBinName +  "    "+select3rdRow_7thColumn.getText());
			
			excelReader.setCellData(xlfile, xlSheetName, 284, 8, select3rdRow_7thColumn.getText());
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_7thColumn));
					
			if(/*actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn && actBinAlternateCategory==expBinAlternateCategory 
					&& actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn
					&& actBinOkBtn==expBinOkBtn
					
					&& actBinGroupNameR1.equalsIgnoreCase(expBinGroupNameR1)
					
					&& actBinNameR2.equalsIgnoreCase(expBinNameR2) && actBinStockR2.equalsIgnoreCase(expBinStockR2) 
					&& actBinCapacityR2.equalsIgnoreCase(expBinCapacityR2) && actBinLoadR2.equalsIgnoreCase(expBinLoadR2)
					&& actBinFreeSpaceR2.equalsIgnoreCase(expBinFreeSpaceR2) && actBinFreeQtyR2.equalsIgnoreCase(expBinFreeQtyR2)
					&& actBinToBeAllocatedR2.equalsIgnoreCase(expBinToBeAllocatedR2)
					
					&& actBinNameR3.equalsIgnoreCase(expBinNameR3) && actBinStockR3.equalsIgnoreCase(expBinStockR3) 
					&& actBinCapacityR3.equalsIgnoreCase(expBinCapacityR3) && actBinLoadR3.equalsIgnoreCase(expBinLoadR3)
					&& actBinFreeSpaceR3.equalsIgnoreCase(expBinFreeSpaceR3) && actBinFreeQtyR3.equalsIgnoreCase(expBinFreeQtyR3)*/
					
					actMethod==true && actbinInwardGridList.equalsIgnoreCase(expbinInwardGridList)
					
					&& actBinTotalQty.equalsIgnoreCase(expBinTotalQty) && actBinBaseUom.equalsIgnoreCase(expBinBaseUom) 
					&& actBinBalanceQty.equalsIgnoreCase(expBinBalanceQty)
					
					&& actBinSum.equalsIgnoreCase(expBinSum)
					
					&& select4thRow_7thColumn.getText().equalsIgnoreCase(actBinName))
				
			{
				System.out.println("Selected Bin And Ok Btn Not Enabled");
				excelReader.setCellData(xlfile, xlSheetName, 278, 9, resPass);
				return true;
			
			}
			else
			{
				System.out.println("Not Selected Bin And Ok Btn Not Enabled");
				excelReader.setCellData(xlfile, xlSheetName, 278, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage().substring(0, 50);
			excelReader.setExceptionInExcel(xlfile, xlSheetName, 278, 10, e.getMessage());
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		}
	  }
		
			
	  public boolean checkEditOpeningStocksNewBinValuesForPreviousRowBinAfterAllocatingCurrentBinRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	  {
			
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_7thColumn));
			select4thRow_7thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Bin));
			enter_Bin.sendKeys(Keys.SPACE);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchTxt));		
			
			boolean actBinSearchTxt                = binSearchTxt.isDisplayed();
			boolean actBinSearchBtn                = binSearchBtn.isDisplayed();
			//boolean actBinAlternateCategory        = binAlternateCategoryCheckBtn.isDisplayed();
			boolean actBinAutoAllocateBtn          = binAutoAllocateBtn.isDisplayed();
			boolean actBinPickBtn                  = binPickBtn.isDisplayed();
			boolean actBinCancelBtn                = binCancelBtn.isDisplayed();
			boolean actBinOkBtn                    = binOkBtn.isEnabled();
					
			boolean expBinSearchTxt                = true;
			boolean expBinSearchBtn                = true;
			boolean expBinAlternateCategory        = true;
			boolean expBinAutoAllocateBtn          = true;
			boolean expBinPickBtn                  = true;
			boolean expBinCancelBtn                = true;
			boolean expBinOkBtn                    = true;
				
			System.out.println("Bin Search Value Actual                :  " + actBinSearchTxt +         " Value Expected : " + expBinSearchTxt);
			System.out.println("Bin Search Btn Value Actual            :  " + actBinSearchBtn +         " Value Expected : " + expBinSearchBtn);
			//System.out.println("Bin Alternate Category Value Actual    :  " + actBinAlternateCategory + " Value Expected : " + expBinAlternateCategory);
			System.out.println("Bin Auto Allocate Btn Value Actual     :  " + actBinAutoAllocateBtn +   " Value Expected : " + expBinAutoAllocateBtn);
			System.out.println("Bin Pick Btn Value Actual              :  " + actBinPickBtn +           " Value Expected : " + expBinPickBtn);
			System.out.println("Bin Cancel Btn Value Actual            :  " + actBinCancelBtn +         " Value Expected : " + expBinCancelBtn);
			System.out.println("Bin Ok Btn Value Actual                :  " + actBinOkBtn +             " Value Expected : " + expBinOkBtn);
			
			
			/*String expBinGroupNameR1               = "BG1";
			
			String expBinNameR2                    = "Bin4";
			String expBinStockR2                   = "0.00";
			String expBinCapacityR2                = "90.00";
			String expBinLoadR2                    = "24.00";
			String expBinFreeSpaceR2               = "66.00";
			String expBinFreeQtyR2                 = "66.00";
			String expBinToBeAllocatedR2           = "12.00";
			
			String expBinNameR3                    = "Bin5";
			String expBinStockR3                   = "0.00";
			String expBinCapacityR3                = "98.00";
			String expBinLoadR3                    = "0.00";
			String expBinFreeSpaceR3               = "98.00";
			String expBinFreeQtyR3                 = "98.00";
			String expBinToBeAllocatedR3           = "0.00";*/
			
			String actBinTotalQty                  = binTotalQty.getAttribute("value");
			String actBinBaseUom                   = binBaseUOM.getText();
			String actBinBalanceQty                = binBalanceTxt.getAttribute("value");
			String actBinSum                       = binSumInward.getText();
			
			 String expBinTotalQty               = excelReader.getCellData(xlSheetName, 287, 7);
	         String expBinBaseUom                = excelReader.getCellData(xlSheetName, 288, 7);
	         String expBinBalanceQty             = excelReader.getCellData(xlSheetName, 289, 7);
	         String expBinSum                    = excelReader.getCellData(xlSheetName, 290, 7);
	         
	         excelReader.setCellData(xlfile, xlSheetName, 287, 8, actBinTotalQty);
	         excelReader.setCellData(xlfile, xlSheetName, 288, 8, actBinBaseUom);
	         excelReader.setCellData(xlfile, xlSheetName, 289, 8, actBinBalanceQty);
	         excelReader.setCellData(xlfile, xlSheetName, 290, 8, actBinSum);
	         
	         int binInwardGridListCount = binInwardGridList.size();
	         
	         ArrayList<String> binInwardGridListArray = new ArrayList<String>();
	         
	         for(int i=0;i<binInwardGridListCount;i++)
	         {
	                 String data = binInwardGridList.get(i).getText();
	                 binInwardGridListArray.add(data);
	         }
	         
	         
	         String actbinInwardGridList=binInwardGridListArray.toString();
	         
	         String expbinInwardGridList=excelReader.getCellData(xlSheetName, 286, 7);
	         
	         excelReader.setCellData(xlfile, xlSheetName, 286, 8, actbinInwardGridList);
	         
	         System.out.println("ActbinInwardGridList : " + actbinInwardGridList);
	         System.out.println("ExpbinInwardGridList : " + expbinInwardGridList);
	         
	         
	         boolean actMethod = actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn 
	                                     /*&& actBinAlternateCategory==expBinAlternateCategory*/ 
	                                     && actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn;
	         
	         String actResult = Boolean.toString(actMethod);
	         
	         excelReader.setCellData(xlfile, xlSheetName, 285, 8, actResult.toUpperCase());
			
			
			/*String actBinGroupNameR1               = binselect1stRow_2ndColumn.getText();
			
			String actBinNameR2                    = binselect2ndRow_2ndColumn.getText();
			String actBinStockR2                   = binselect2ndRow_3rdColumn.getText();
			String actBinCapacityR2                = binselect2ndRow_4thColumn.getText();
			String actBinLoadR2                    = binselect2ndRow_5thColumn.getText();
			String actBinFreeSpaceR2               = binselect2ndRow_6thColumn.getText();
			String actBinFreeQtyR2                 = binselect2ndRow_7thColumn.getText();
			String actBinToBeAllocatedR2           = binselect2ndRow_8thColumn.getText();
				
			String actBinNameR3                    = binselect3rdRow_2ndColumn.getText();
			String actBinStockR3                   = binselect3rdRow_3rdColumn.getText();
			String actBinCapacityR3                = binselect3rdRow_4thColumn.getText();
			String actBinLoadR3                    = binselect3rdRow_5thColumn.getText();
			String actBinFreeSpaceR3               = binselect3rdRow_6thColumn.getText();
			String actBinFreeQtyR3                 = binselect3rdRow_7thColumn.getText();
			String actBinToBeAllocatedR3           = binselect3rdRow_8thColumn.getText();*/
			
			
				
			
	        /*System.out.println("First Row Group Name        :  " + actBinGroupNameR1 +        "  Value Expected : "  + expBinGroupNameR1);
			
			System.out.println("Second Row Bin Name         :  " + actBinNameR2 +             "  Value Expected : "  + expBinNameR2);
			System.out.println("Second Row Stock            :  " + actBinStockR2 +            "  Value Expected : "  + expBinStockR2);
			System.out.println("Second Row Capacity         :  " + actBinCapacityR2 +         "  Value Expected : "  + expBinCapacityR2);
			System.out.println("Second Row Load             :  " + actBinLoadR2 +             "  Value Expected : "  + expBinLoadR2);
			System.out.println("Second Row Free Space       :  " + actBinFreeSpaceR2 +        "  Value Expected : "  + expBinFreeSpaceR2);
			System.out.println("Second Row Free Qty         :  " + actBinFreeQtyR2 +          "  Value Expected : "  + expBinFreeQtyR2);
			System.out.println("Second Row To Be Allocated  :  " + actBinToBeAllocatedR2 +    "  Value Expected : "  + expBinToBeAllocatedR2);
			
			System.out.println("Third Row Bin Name          :  " + actBinNameR3 +             "  Value Expected : "  + expBinNameR3);
			System.out.println("Third Row Stock             :  " + actBinStockR3 +            "  Value Expected : "  + expBinStockR3);
			System.out.println("Third Row Capacity          :  " + actBinCapacityR3 +         "  Value Expected : "  + expBinCapacityR3);
			System.out.println("Third Row Load              :  " + actBinLoadR3 +             "  Value Expected : "  + expBinLoadR3);
			System.out.println("Third Row Free Space        :  " + actBinFreeSpaceR3 +        "  Value Expected : "  + expBinFreeSpaceR3);
			System.out.println("Third Row Free Qty          :  " + actBinFreeQtyR3 +          "  Value Expected : "  + expBinFreeQtyR3);
			System.out.println("Third Row To Be Allocated   :  " + actBinToBeAllocatedR3 +    "  Value Expected : "  + expBinToBeAllocatedR3);*/
			
			System.out.println("Bin Total Qty               :  " + actBinTotalQty +            "  Value Expected : "  + expBinTotalQty);
			System.out.println("Bin Base Uom                :  " + actBinBaseUom +             "  Value Expected : "  + expBinBaseUom);
			System.out.println("Bin Balance Txt             :  " + actBinBalanceQty +          "  Value Expected : "  + expBinBalanceQty);
			
			System.out.println("Bin Total To Be Adjusted    :  " + actBinSum  +                "  Value Expected : "  + expBinSum);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binCancelBtn));
			binCancelBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_9thColumn));
			select4thRow_9thColumn.click();
			
			String actBinName                    = select4thRow_7thColumn.getText();
		    String expBinName                    = excelReader.getCellData(xlSheetName, 291, 7);
		    
		    excelReader.setCellData(xlfile, xlSheetName, 291, 8, actBinName); 
		    	
			System.out.println("Bin Column in Voucher       : " + actBinName +                "  Value Expected : " + expBinName);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_7thColumn));
					
			if(/*actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn && actBinAlternateCategory==expBinAlternateCategory 
					&& actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn
					&& actBinOkBtn==expBinOkBtn
					
					&& actBinGroupNameR1.equalsIgnoreCase(expBinGroupNameR1)
					
					&& actBinNameR2.equalsIgnoreCase(expBinNameR2) && actBinStockR2.equalsIgnoreCase(expBinStockR2) 
					&& actBinCapacityR2.equalsIgnoreCase(expBinCapacityR2) && actBinLoadR2.equalsIgnoreCase(expBinLoadR2)
					&& actBinFreeSpaceR2.equalsIgnoreCase(expBinFreeSpaceR2) && actBinFreeQtyR2.equalsIgnoreCase(expBinFreeQtyR2)
					&& actBinToBeAllocatedR2.equalsIgnoreCase(expBinToBeAllocatedR2)
					
					&& actBinNameR3.equalsIgnoreCase(expBinNameR3) && actBinStockR3.equalsIgnoreCase(expBinStockR3) 
					&& actBinCapacityR3.equalsIgnoreCase(expBinCapacityR3) && actBinLoadR3.equalsIgnoreCase(expBinLoadR3)
					&& actBinFreeSpaceR3.equalsIgnoreCase(expBinFreeSpaceR3) && actBinFreeQtyR3.equalsIgnoreCase(expBinFreeQtyR3)
					&& actBinToBeAllocatedR3.equalsIgnoreCase(expBinToBeAllocatedR3)*/
					
					actMethod==true && actbinInwardGridList.equalsIgnoreCase(expbinInwardGridList)
					
					&& actBinTotalQty.equalsIgnoreCase(expBinTotalQty) && actBinBaseUom.equalsIgnoreCase(expBinBaseUom) 
					&& actBinBalanceQty.equalsIgnoreCase(expBinBalanceQty)
					
					&& actBinSum.equalsIgnoreCase(expBinSum)
					
					&& actBinName.equalsIgnoreCase(expBinName))	
			{
				System.out.println("Selected Bin And Ok Btn Not Enabled");
				excelReader.setCellData(xlfile, xlSheetName, 285, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Not Selected Bin And Ok Btn Not Enabled");
				excelReader.setCellData(xlfile, xlSheetName, 285, 9, resFail);
				return false;
			}	
		}
		catch (Exception e) 
		{
			String exception =e.getMessage().substring(0, 50);
			excelReader.setExceptionInExcel(xlfile, xlSheetName, 285, 10, e.getMessage());
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		}
	  }
		

	   // Delete row For Bin Validation
	   public boolean checkEditOpeningStocksNewDeleteRowBin() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	   {
		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
		
		 try
		 {
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fourthRowIndex));
			 fourthRowIndex.click();
					
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
			 deleteRowBtn.click();
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(thirdRowIndex));
			 thirdRowIndex.click();
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
			 deleteRowBtn.click();
			 
			 String actBinColumnR3GetText=select3rdRow_7thColumn.getText();
			 System.out.println("actBinColumnR3GetText  :  "+actBinColumnR3GetText);
			 
			 boolean actBinColumnAfterDeleteRow=select3rdRow_7thColumn.getText().isEmpty();
			 boolean expBonColumnAfterDeleteRow=true;
			 
			 String actResult = Boolean.toString(actBinColumnAfterDeleteRow);
			 
			 excelReader.setCellData(xlfile, xlSheetName, 292, 8, actResult.toUpperCase());
			 
			 System.out.println("Bin Column after Delete Row Value Actual     :  " + actBinColumnAfterDeleteRow +   " Value Expected : " + expBonColumnAfterDeleteRow);
			 
			 if(actBinColumnAfterDeleteRow==expBonColumnAfterDeleteRow)
			 {	
				 System.out.println("Test Pass  deleted row Working  ");
				 excelReader.setCellData(xlfile, xlSheetName, 292, 9, resPass);
				 return true;
			 }
			 else
			 {
				 System.out.println("Test Fail Not Deleted Row");
				 excelReader.setCellData(xlfile, xlSheetName, 292, 9, resPass);
				 return false;
			 }
		 }
		 catch (Exception e) 
		 {
			 String exception =e.getMessage().substring(0, 50);
			 excelReader.setExceptionInExcel(xlfile, xlSheetName, 292, 10, e.getMessage());
			 System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			 return false;
		 }
	   }
		
	   
		public boolean checkEditOpeningStocksNewBinQuantityAfterAlocatingAndDeleting() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
		  excelReader=new ExcelReader(POJOUtility.getExcelPath());
		  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
			
		  try
		  {
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
			  select3rdRow_1stColumn.click();
				
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			  enter_ItemTxt.sendKeys(Keys.SPACE);
				
			  int itemcount=itemListCount.size();
				
			  System.err.println(itemcount);
					
			  for(int i=0 ; i < itemcount ;i++)
			  {
				  String data=itemListCount.get(i).getText();
					
				  if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 293, 6)))
				  {
					  itemListCount.get(i).click();
					  break;
				  }
			  }
					
			  enter_ItemTxt.sendKeys(Keys.TAB);	
				
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			  enter_UnitTxt.click();
			  enter_UnitTxt.sendKeys(Keys.TAB);
				
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			  enter_Quantity.click();
			  enter_Quantity.clear();
			  enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 294, 6));
			  enter_Quantity.sendKeys(Keys.TAB);
				
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			  enter_Rate.click();
			  enter_Rate.clear();
			  enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 295, 6));
			  enter_Rate.sendKeys(Keys.TAB);
				
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			  enter_Gross.sendKeys(Keys.TAB);
				
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchTxt));

			  boolean actBinSearchTxt                = binSearchTxt.isDisplayed();
			  boolean actBinSearchBtn                = binSearchBtn.isDisplayed();
			  //boolean actBinAlternateCategory        = binAlternateCategoryCheckBtn.isDisplayed();
			  boolean actBinAutoAllocateBtn          = binAutoAllocateBtn.isDisplayed();
			  boolean actBinPickBtn                  = binPickBtn.isDisplayed();
			  boolean actBinCancelBtn                = binCancelBtn.isDisplayed();
			  boolean actBinOkBtn                    = binOkBtn.isEnabled();
			  
			  boolean expBinSearchTxt                = true;
			  boolean expBinSearchBtn                = true;
			  boolean expBinAlternateCategory        = true;
			  boolean expBinAutoAllocateBtn          = true;
			  boolean expBinPickBtn                  = true;
			  boolean expBinCancelBtn                = true;
			  boolean expBinOkBtn                    = true;
			  
			  System.out.println("Bin Search Value Actual                :  " + actBinSearchTxt +         " Value Expected : " + expBinSearchTxt);
			  System.out.println("Bin Search Btn Value Actual            :  " + actBinSearchBtn +         " Value Expected : " + expBinSearchBtn);
			  //System.out.println("Bin Alternate Category Value Actual    :  " + actBinAlternateCategory + " Value Expected : " + expBinAlternateCategory);
			  System.out.println("Bin Auto Allocate Btn Value Actual     :  " + actBinAutoAllocateBtn +   " Value Expected : " + expBinAutoAllocateBtn);
			  System.out.println("Bin Pick Btn Value Actual              :  " + actBinPickBtn +           " Value Expected : " + expBinPickBtn);
			  System.out.println("Bin Cancel Btn Value Actual            :  " + actBinCancelBtn +         " Value Expected : " + expBinCancelBtn);
			  System.out.println("Bin Ok Btn Value Actual                :  " + actBinOkBtn +             " Value Expected : " + expBinOkBtn);
				
			
			  /*String actBinGroupNameR1          = binselect1stRow_2ndColumn.getText();
				
				String actBinNameR2               = binselect2ndRow_2ndColumn.getText();
				String actBinStockR2              = binselect2ndRow_3rdColumn.getText();
				String actBinCapacityR2           = binselect2ndRow_4thColumn.getText();
				String actBinLoadR2               = binselect2ndRow_5thColumn.getText();
				String actBinFreeSpaceR2          = binselect2ndRow_6thColumn.getText();
				String actBinFreeQtyR2            = binselect2ndRow_7thColumn.getText();
				String actBinToBeAllocatedR2      = binselect2ndRow_8thColumn.getText();
							
				String actBinNameR3               = binselect3rdRow_2ndColumn.getText();
				String actBinStockR3              = binselect3rdRow_3rdColumn.getText();
				String actBinCapacityR3           = binselect3rdRow_4thColumn.getText();
				String actBinLoadR3               = binselect3rdRow_5thColumn.getText();
				String actBinFreeSpaceR3          = binselect3rdRow_6thColumn.getText();
				String actBinFreeQtyR3            = binselect3rdRow_7thColumn.getText();
				String actBinToBeAllocatedR3      = binselect3rdRow_8thColumn.getText();*/
				
			  String actBinTotalQty             = binTotalQty.getAttribute("value");
			  String actBinBaseUom              = binBaseUOM.getText();
			  String actBinBalanceQty           = binBalanceTxt.getAttribute("value");
			  String actBinSum                  = binSumInward.getText();
			
				/*String expBinGroupNameR1          = "BG1";
				
				String expBinNameR2               = "Bin4";
				String expBinStockR2              = "0.00";
				String expBinCapacityR2           = "90.00";
				String expBinLoadR2               = "12.00";
				String expBinFreeSpaceR2          = "78.00";
				String expBinFreeQtyR2            = "78.00";
				String expBinToBeAllocatedR2      = "0.00";
				
				String expBinNameR3               = "Bin5";
				String expBinStockR3              = "0.00";
				String expBinCapacityR3           = "98.00";
				String expBinLoadR3               = "0.00";
				String expBinFreeSpaceR3          = "98.00";
				String expBinFreeQtyR3            = "98.00";
				String expBinToBeAllocatedR3      = "0.00";*/
				
				
			  String expBinTotalQty               = excelReader.getCellData(xlSheetName, 295, 7);
			  String expBinBaseUom                = excelReader.getCellData(xlSheetName, 296, 7);
			  String expBinBalanceQty             = excelReader.getCellData(xlSheetName, 297, 7);
			  String expBinSum                    = excelReader.getCellData(xlSheetName, 298, 7);
		        
			  excelReader.setCellData(xlfile, xlSheetName, 295, 8, actBinTotalQty);
			  excelReader.setCellData(xlfile, xlSheetName, 296, 8, actBinBaseUom);
			  excelReader.setCellData(xlfile, xlSheetName, 297, 8, actBinBalanceQty);
			  excelReader.setCellData(xlfile, xlSheetName, 298, 8, actBinSum);
			  
			  int binInwardGridListCount = binInwardGridList.size();
			  
			  ArrayList<String> binInwardGridListArray = new ArrayList<String>();
			  
			  for(int i=0;i<binInwardGridListCount;i++)
			  {
				  String data = binInwardGridList.get(i).getText();
				  binInwardGridListArray.add(data);
			  }	
		        	
		        
			  String actbinInwardGridList=binInwardGridListArray.toString();
			  
			  String expbinInwardGridList=excelReader.getCellData(xlSheetName, 294, 7);
			  
			  excelReader.setCellData(xlfile, xlSheetName, 294, 8, actbinInwardGridList);
			  
			  System.out.println("ActbinInwardGridList : " + actbinInwardGridList);
			  System.out.println("ExpbinInwardGridList : " + expbinInwardGridList);
			  
			  boolean actMethod = actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn 
					  /*&& actBinAlternateCategory==expBinAlternateCategory*/ 
					  && actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn;
		        	
			  String actResult = Boolean.toString(actMethod);
		        
			  excelReader.setCellData(xlfile, xlSheetName, 293, 8, actResult.toUpperCase());
			  
					
			  
			  	/*System.out.println("First Row Group Name        :  " + actBinGroupNameR1 +        "  Value Expected : "  + expBinGroupNameR1);
					
				System.out.println("Second Row Bin Name         :  " + actBinNameR2 +             "  Value Expected : "  + expBinNameR2);
				System.out.println("Second Row Stock            :  " + actBinStockR2 +            "  Value Expected : "  + expBinStockR2);
				System.out.println("Second Row Capacity         :  " + actBinCapacityR2 +         "  Value Expected : "  + expBinCapacityR2);
				System.out.println("Second Row Load             :  " + actBinLoadR2 +             "  Value Expected : "  + expBinLoadR2);
				System.out.println("Second Row Free Space       :  " + actBinFreeSpaceR2 +        "  Value Expected : "  + expBinFreeSpaceR2);
				System.out.println("Second Row Free Qty         :  " + actBinFreeQtyR2 +          "  Value Expected : "  + expBinFreeQtyR2);
				System.out.println("Second Row To Be Allocated  :  " + actBinToBeAllocatedR2 +    "  Value Expected : "  + expBinToBeAllocatedR2);
				
				System.out.println("Third Row Bin Name          :  " + actBinNameR3 +             "  Value Expected : "  + expBinNameR3);
				System.out.println("Third Row Stock             :  " + actBinStockR3 +            "  Value Expected : "  + expBinStockR3);
				System.out.println("Third Row Capacity          :  " + actBinCapacityR3 +         "  Value Expected : "  + expBinCapacityR3);
				System.out.println("Third Row Load              :  " + actBinLoadR3 +             "  Value Expected : "  + expBinLoadR3);
				System.out.println("Third Row Free Space        :  " + actBinFreeSpaceR3 +        "  Value Expected : "  + expBinFreeSpaceR3);
				System.out.println("Third Row Free Qty          :  " + actBinFreeQtyR3 +          "  Value Expected : "  + expBinFreeQtyR3);
				System.out.println("Third Row To Be Allocated   :  " + actBinToBeAllocatedR3 +    "  Value Expected : "  + expBinToBeAllocatedR3);*/
				
			  System.out.println("Bin Total Qty               :  " +actBinTotalQty +            "  Value Expected : "  + expBinTotalQty);
			  System.out.println("Bin Base Uom                :  " +actBinBaseUom +             "  Value Expected : "  + expBinBaseUom);
			  System.out.println("Bin Balance Txt             :  " +actBinBalanceQty +          "  Value Expected : "  + expBinBalanceQty);
				
			  System.out.println("Bin Total To Be Adjusted    :  " + actBinSum +                "  Value Expected : "  + expBinSum);
						
			  if(/*actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn && actBinAlternateCategory==expBinAlternateCategory 
						&& actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn
						&& actBinOkBtn==expBinOkBtn
						
						&& actBinGroupNameR1.equalsIgnoreCase(expBinGroupNameR1)
						
						&& actBinNameR2.equalsIgnoreCase(expBinNameR2) && actBinStockR2.equalsIgnoreCase(expBinStockR2) 
						&& actBinCapacityR2.equalsIgnoreCase(expBinCapacityR2) && actBinLoadR2.equalsIgnoreCase(expBinLoadR2)
						&& actBinFreeSpaceR2.equalsIgnoreCase(expBinFreeSpaceR2) && actBinFreeQtyR2.equalsIgnoreCase(expBinFreeQtyR2)
						&& actBinToBeAllocatedR2.equalsIgnoreCase(expBinToBeAllocatedR2)
						
						&& actBinNameR3.equalsIgnoreCase(expBinNameR3) && actBinStockR3.equalsIgnoreCase(expBinStockR3) 
						&& actBinCapacityR3.equalsIgnoreCase(expBinCapacityR3) && actBinLoadR3.equalsIgnoreCase(expBinLoadR3)
						&& actBinFreeSpaceR3.equalsIgnoreCase(expBinFreeSpaceR3) && actBinFreeQtyR3.equalsIgnoreCase(expBinFreeQtyR3)
						&& actBinToBeAllocatedR3.equalsIgnoreCase(expBinToBeAllocatedR3)*/

						actMethod==true && actbinInwardGridList.equalsIgnoreCase(expbinInwardGridList)
						
						&& actBinTotalQty.equalsIgnoreCase(expBinTotalQty) && actBinBaseUom.equalsIgnoreCase(expBinBaseUom) 
						&& actBinBalanceQty.equalsIgnoreCase(expBinBalanceQty)
						
						&& actBinSum.equalsIgnoreCase(expBinSum))
			{
				
				System.out.println("Test Pass : Bin Popup options Are As Expected");
				excelReader.setCellData(xlfile, xlSheetName, 293, 9, resPass);
				
				return true;
			}
			else
			{
				System.out.println("Test Fail : Bin Popup options Are NOT As Expected");
				excelReader.setCellData(xlfile, xlSheetName, 293, 9, resFail);
				
				return false;
			}
		  }
		  catch (Exception e) 
		  {
			  String exception =e.getMessage().substring(0, 50);
			  excelReader.setExceptionInExcel(xlfile, xlSheetName, 293, 10, e.getMessage());
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		  }
	  }
		
		  public boolean checkEditOpeningStocksNewVoucherWithInputingAllocateQtyMoreThanAvailableQty() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		  {
				
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
			
			 try
			 {
				 Thread.sleep(2000);
					
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binselect2ndRow_8thColumn));
				 binselect2ndRow_8thColumn.click();
				 
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ToBeAllocateTxt));
				 enter_ToBeAllocateTxt.sendKeys(excelReader.getCellData(xlSheetName, 299, 6));
				 enter_ToBeAllocateTxt.sendKeys(Keys.TAB);
				 
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binselect2ndRow_8thColumn));
				 String actbinselect2ndRow_8thColumn = binselect2ndRow_8thColumn.getText();
				 String expbinselect2ndRow_8thColumn = excelReader.getCellData(xlSheetName, 300, 7);
				 
				 excelReader.setCellData(xlfile, xlSheetName, 300, 8, actbinselect2ndRow_8thColumn);
				 
				 System.out.println("binselect2ndRow_8thColumn Value Actual   : " + actbinselect2ndRow_8thColumn + " Value Expected : " + expbinselect2ndRow_8thColumn);
						 
				 if(actbinselect2ndRow_8thColumn.equalsIgnoreCase(expbinselect2ndRow_8thColumn))
				 {
					 System.out.println("Test Pass : Bin Popup options Are As Expected");
					 excelReader.setCellData(xlfile, xlSheetName, 299, 9, resPass);
					 
					 return true;
				 }
				 else
				 {
					 System.out.println("Test Fail : Bin Popup options Are NOT As Expected");
					 excelReader.setCellData(xlfile, xlSheetName, 299, 9, resFail);
					
					 return false;
				 }
			 }
			 catch (Exception e) 
			 {
				 String exception =e.getMessage().substring(0, 50);
				 excelReader.setExceptionInExcel(xlfile, xlSheetName, 299, 10, e.getMessage());
				 System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				 return false;
			 }
		  }
		  
		  
		  
		  public boolean checkEditOpeningStocksNewVoucherWithInputingThroughAllocateQty() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		  {
				
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
			
			 try
			 {
				 Thread.sleep(2000);
					
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
				 binAutoAllocateBtn.click();
				 
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binselect2ndRow_8thColumn));
				 String actbinselect2ndRow_8thColumn2 = binselect2ndRow_8thColumn.getText();
				 String expbinselect2ndRow_8thColumn2 = excelReader.getCellData(xlSheetName, 302, 7);
				 
				 excelReader.setCellData(xlfile, xlSheetName, 302, 8, actbinselect2ndRow_8thColumn2);
				 
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binselect3rdRow_8thColumn));
				 String actbinselect3rdRow_8thColumn = binselect3rdRow_8thColumn.getText();
				 String expbinselect3rdRow_8thColumn = excelReader.getCellData(xlSheetName, 303, 7);
				 
				 excelReader.setCellData(xlfile, xlSheetName, 303, 8, actbinselect3rdRow_8thColumn);
				 
				 System.out.println("binselect2ndRow_8thColumn2 Value Actual   : " + actbinselect2ndRow_8thColumn2 + " Value Expected : " + expbinselect2ndRow_8thColumn2);
				 System.out.println("binselect3rdRow_8thColumn Value Actual    : " + actbinselect3rdRow_8thColumn  + " Value Expected : " + expbinselect3rdRow_8thColumn);
				 
				 
				 if(actbinselect2ndRow_8thColumn2.equalsIgnoreCase(expbinselect2ndRow_8thColumn2)
						 && actbinselect3rdRow_8thColumn.equalsIgnoreCase(expbinselect3rdRow_8thColumn))
				 {
					 System.out.println("Test Pass : Bin Popup options Are As Expected");
					 excelReader.setCellData(xlfile, xlSheetName, 301, 9, resPass);
					 
					 Status=true;
					 return true;
				 }
				 else
				 {
					 System.out.println("Test Fail : Bin Popup options Are NOT As Expected");
					 excelReader.setCellData(xlfile, xlSheetName, 301, 9, resFail);
					
					 Status=false;
					 return false;
				 }
			 }
			 catch (Exception e) 
			 {
				 String exception =e.getMessage().substring(0, 50);
				 excelReader.setExceptionInExcel(xlfile, xlSheetName, 301, 10, e.getMessage());
				 System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				 return false;
			 }
		  }
		  
		  
	  public boolean checkEditOpeningStocksNewVoucherBinAutoAllocationForBinSplittingInThirdRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	  {
			
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";		  
		
		
		try
		{
			System.err.println("STATUS : "+Status);
			if(Status==true)
			{
				System.err.println("STATUS : "+Status);
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
				 binOkBtn.click();
				 System.err.println("STATUS : "+Status);
				 Thread.sleep(2000);
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_9thColumn));
				 select4thRow_9thColumn.click();
				 
				 
				 
				/* 
					
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
				 
				 String actOsVoucherItemR3   =select3rdRow_1stColumn.getText();
				 String actOsVoucherUnitsR3  =select3rdRow_2ndColumn.getText();
				 String actOsVoucherQtyR3    =select3rdRow_3rdColumn.getText();
				 String actOsVoucherRateR3   =select3rdRow_4thColumn.getText();
				 String actOsVoucherGrossR3  =select3rdRow_5thColumn.getText();
				 String actOsVoucherBinR3    =select3rdRow_7thColumn.getText();
					
				 String actOsVoucherItemR4   =select4thRow_1stColumn.getText();
				 String actOsVoucherUnitsR4  =select4thRow_2ndColumn.getText();
				 String actOsVoucherQtyR4    =select4thRow_3rdColumn.getText();
				 String actOsVoucherRateR4   =select4thRow_4thColumn.getText();
				 String actOsVoucherGrossR4  =select4thRow_5thColumn.getText();
				 String actOsVoucherBinR4    =select4thRow_7thColumn.getText();
				 
				 String expOsVoucherItemR3   ="FIFO COGS ITEM";
				 String expOsVoucherUnitsR3  ="Dozs";
				 String expOsVoucherQtyR3    ="6.50";
				 String expOsVoucherRateR3   ="10.00";
				 String expOsVoucherGrossR3  ="65.00";
				 String expOsVoucherBinR3    ="Bin4";
					
				 String expOsVoucherItemR4   ="FIFO COGS ITEM";
				 String expOsVoucherUnitsR4  ="Dozs";
				 String expOsVoucherQtyR4    ="7.50";
				 String expOsVoucherRateR4   ="10.00";
				 String expOsVoucherGrossR4  ="75.00";
				 String expOsVoucherBinR4    ="Bin5";
				 
				 System.out.println("OsVoucherItemR3   : " +actOsVoucherItemR3   + " Value Expected : " + expOsVoucherItemR3);
				 System.out.println("OsVoucherUnitsR3  : " +actOsVoucherUnitsR3  + " Value Expected : " + expOsVoucherUnitsR3);
				 System.out.println("OsVoucherQtyR3    : " +actOsVoucherQtyR3    + " Value Expected : " + expOsVoucherQtyR3);
				 System.out.println("OsVoucherRateR3   : " +actOsVoucherRateR3   + " Value Expected : " + expOsVoucherRateR3);
				 System.out.println("OsVoucherGrossR3  : " +actOsVoucherGrossR3  + " Value Expected : " + expOsVoucherGrossR3);
				 System.out.println("OsVoucherBinR3    : " +actOsVoucherBinR3    + " Value Expected : " + expOsVoucherBinR3);
				 
				 System.out.println("OsVoucherItemR4   : " +actOsVoucherItemR4   + " Value Expected : " + expOsVoucherItemR4);
				 System.out.println("OsVoucherUnitsR4  : " +actOsVoucherUnitsR4  + " Value Expected : " + expOsVoucherUnitsR4);
				 System.out.println("OsVoucherQtyR4    : " +actOsVoucherQtyR4    + " Value Expected : " + expOsVoucherQtyR4);
				 System.out.println("OsVoucherRateR4   : " +actOsVoucherRateR4   + " Value Expected : " + expOsVoucherRateR4);
				 System.out.println("OsVoucherGrossR4  : " +actOsVoucherGrossR4  + " Value Expected : " + expOsVoucherGrossR4);
				 System.out.println("OsVoucherBinR4    : " +actOsVoucherBinR4    + " Value Expected : " + expOsVoucherBinR4);*/
				 
				 int voucherGridBodyListCount = voucherGridBodyList.size();
				 
				 ArrayList<String> voucherGridBodyListArray = new ArrayList<String>();
				 
				 for(int i=10;i<voucherGridBodyListCount;i++)
				 {
					 String data = voucherGridBodyList.get(i).getText();
					 voucherGridBodyListArray.add(data);
				 }
				 
				 String actvoucherGridBodyList=voucherGridBodyListArray.toString();
				 
				 String expvoucherGridBodyList=excelReader.getCellData(xlSheetName, 305, 7);
				 
				 excelReader.setCellData(xlfile, xlSheetName, 305, 8, actvoucherGridBodyList);
				 
				 System.out.println("voucherGridBodyList Actual   : " + actvoucherGridBodyList);
				 System.out.println("voucherGridBodyList Expected : " + expvoucherGridBodyList);
			 
				 if(/*actOsVoucherItemR3.equalsIgnoreCase(expOsVoucherItemR3) && actOsVoucherUnitsR3.equalsIgnoreCase(expOsVoucherUnitsR3)
						 && actOsVoucherQtyR3.equalsIgnoreCase(expOsVoucherQtyR3) && actOsVoucherRateR3.equalsIgnoreCase(expOsVoucherRateR3)
						 && actOsVoucherGrossR3.equalsIgnoreCase(expOsVoucherGrossR3) && actOsVoucherBinR3.equalsIgnoreCase(expOsVoucherBinR3)
						 
						 && actOsVoucherItemR4.equalsIgnoreCase(expOsVoucherItemR4) && actOsVoucherUnitsR4.equalsIgnoreCase(expOsVoucherUnitsR4)
						 && actOsVoucherQtyR4.equalsIgnoreCase(expOsVoucherQtyR4) && actOsVoucherRateR4.equalsIgnoreCase(expOsVoucherRateR4)
						 && actOsVoucherGrossR4.equalsIgnoreCase(expOsVoucherGrossR4) && actOsVoucherBinR4.equalsIgnoreCase(expOsVoucherBinR4)*/
						 actvoucherGridBodyList.equalsIgnoreCase(expvoucherGridBodyList))
				 {
					 System.out.println("Auto Allocate Spiltted Bin ");
					 
					 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fourthRowIndex));
					 fourthRowIndex.click();
						
					 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
					 deleteRowBtn.click();
						
					 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(thirdRowIndex));
					 thirdRowIndex.click();
						
					 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
					 deleteRowBtn.click();
					 excelReader.setCellData(xlfile, xlSheetName, 304, 9, resPass);
					 return true;
				 }
				 else
				 {
					 System.out.println("Auto Allocate Did not Spilt Bin ");
					 
					 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binCancelBtn));
					 binCancelBtn.click();
					 
					 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_9thColumn));
					 select3rdRow_9thColumn.click();
					 
					 Thread.sleep(2000);
					 
					 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fourthRowIndex));
					 fourthRowIndex.click();
						
					 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
					 deleteRowBtn.click();
						
					 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(thirdRowIndex));
					 thirdRowIndex.click();
						
					 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
					 deleteRowBtn.click();
					 
					 excelReader.setCellData(xlfile, xlSheetName, 304, 9, resFail);
					 
					 return false;
				 }
			}
			else
			{
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binCancelBtn));
				 binCancelBtn.click();
				 
				 Thread.sleep(2000);
				 
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_9thColumn));
				 select3rdRow_9thColumn.click();
					
				 Thread.sleep(2000);
				 
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fourthRowIndex));
				 fourthRowIndex.click();
					
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
				 deleteRowBtn.click();
					
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(thirdRowIndex));
				 thirdRowIndex.click();
					
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
				 deleteRowBtn.click();
				 
				System.out.println("Auto Allocate Did not Spilt Bin ");
				excelReader.setCellData(xlfile, xlSheetName, 304, 9, resFail);
				return false;
			}
		}
		catch (Exception e)
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binCancelBtn));
			binCancelBtn.click();
			

			Thread.sleep(2000);
			 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_9thColumn));
			select3rdRow_9thColumn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fourthRowIndex));
			fourthRowIndex.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
			deleteRowBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(thirdRowIndex));
			thirdRowIndex.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
			deleteRowBtn.click();
				
			String exception =e.getMessage().substring(0, 50);
			excelReader.setExceptionInExcel(xlfile, xlSheetName, 304, 10, e.getMessage());
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			
			return false;
		}
	  }
	  
	  
	  public boolean checkEditOpeningStocksNewVoucherBinWithManualInputQtyInBinPopForBinSplittingInThirdRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	  {
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";		
		
			try
			{	
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_9thColumn));
				select2ndRow_9thColumn.click();
				
				Thread.sleep(2000);
				
				/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
				select3rdRow_1stColumn.click();*/
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
				enter_ItemTxt.sendKeys(Keys.SPACE);
				
				int itemcount=itemListCount.size();
				
				System.err.println(itemcount);
					
				for(int i=0 ; i < itemcount ;i++)
				{
					String data=itemListCount.get(i).getText();
					
					if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 306, 6)))
					{
						itemListCount.get(i).click();
						
						break;
					}
				}
					
				enter_ItemTxt.sendKeys(Keys.TAB);	
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
				enter_UnitTxt.click();
				enter_UnitTxt.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
				enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 307, 6));
				
				enter_Quantity.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
				enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 308, 6));
				
				enter_Rate.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
				enter_Gross.sendKeys(Keys.TAB);
				
				try
				{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Bin));
					enter_Bin.sendKeys(Keys.SPACE);
				}
				catch(Exception ee)
				{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchTxt));
				}
						
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchTxt));
				
				boolean actBinSearchTxt                = binSearchTxt.isDisplayed();
				boolean actBinSearchBtn                = binSearchBtn.isDisplayed();
				//boolean actBinAlternateCategory        = binAlternateCategoryCheckBtn.isDisplayed();
				boolean actBinAutoAllocateBtn          = binAutoAllocateBtn.isDisplayed();
				boolean actBinPickBtn                  = binPickBtn.isDisplayed();
				boolean actBinCancelBtn                = binCancelBtn.isDisplayed();
				boolean actBinOkBtn                    = binOkBtn.isEnabled();
						
				boolean expBinSearchTxt                = true;
				boolean expBinSearchBtn                = true;
				boolean expBinAlternateCategory        = true;
				boolean expBinAutoAllocateBtn          = true;
				boolean expBinPickBtn                  = true;
				boolean expBinCancelBtn                = true;
				boolean expBinOkBtn                    = true;
					
				System.out.println("Bin Search Value Actual                :  " + actBinSearchTxt +         " Value Expected : " + expBinSearchTxt);
				System.out.println("Bin Search Btn Value Actual            :  " + actBinSearchBtn +         " Value Expected : " + expBinSearchBtn);
				//System.out.println("Bin Alternate Category Value Actual    :  " + actBinAlternateCategory + " Value Expected : " + expBinAlternateCategory);
				System.out.println("Bin Auto Allocate Btn Value Actual     :  " + actBinAutoAllocateBtn +   " Value Expected : " + expBinAutoAllocateBtn);
				System.out.println("Bin Pick Btn Value Actual              :  " + actBinPickBtn +           " Value Expected : " + expBinPickBtn);
				System.out.println("Bin Cancel Btn Value Actual            :  " + actBinCancelBtn +         " Value Expected : " + expBinCancelBtn);
				System.out.println("Bin Ok Btn Value Actual                :  " + actBinOkBtn +             " Value Expected : " + expBinOkBtn);
				
				
				/*String expBinGroupNameR1="BG1";
				
				String expBinNameR2="Bin4";
				String expBinStockR2="0.00";
				String expBinCapacityR2="90.00";
				String expBinLoadR2="12.00";
				String expBinFreeSpaceR2="78.00";
				String expBinFreeQtyR2="78.00";
				String expBinToBeAllocatedR2="0.00";
				
				String expBinNameR3="Bin5";
				String expBinStockR3="0.00";
				String expBinCapacityR3="98.00";
				String expBinLoadR3="0.00";
				String expBinFreeSpaceR3="98.00";
				String expBinFreeQtyR3="98.00";
				String expBinToBeAllocatedR3="0.00";*/
				
			
				
				
				/*String actBinGroupNameR1=binselect1stRow_2ndColumn.getText();
				
				String actBinNameR2=binselect2ndRow_2ndColumn.getText();
				String actBinStockR2=binselect2ndRow_3rdColumn.getText();
				String actBinCapacityR2=binselect2ndRow_4thColumn.getText();
				String actBinLoadR2=binselect2ndRow_5thColumn.getText();
				String actBinFreeSpaceR2=binselect2ndRow_6thColumn.getText();
				String actBinFreeQtyR2=binselect2ndRow_7thColumn.getText();
				String actBinToBeAllocatedR2=binselect2ndRow_8thColumn.getText();
					
				
				String actBinNameR3=binselect3rdRow_2ndColumn.getText();
				String actBinStockR3=binselect3rdRow_3rdColumn.getText();
				String actBinCapacityR3=binselect3rdRow_4thColumn.getText();
				String actBinLoadR3=binselect3rdRow_5thColumn.getText();
				String actBinFreeSpaceR3=binselect3rdRow_6thColumn.getText();
				String actBinFreeQtyR3=binselect3rdRow_7thColumn.getText();
				String actBinToBeAllocatedR3=binselect3rdRow_8thColumn.getText();*/
				
				String actBinTotalQty=binTotalQty.getAttribute("value");
				String actBinBaseUom=binBaseUOM.getText();
				String actBinBalanceQty=binBalanceTxt.getAttribute("value");
				
				
				String actBinSum=binSumInward.getText();
				
				System.out.println("actBinSum  : "+actBinSum);
				
				String expBinTotalQty               = excelReader.getCellData(xlSheetName, 308, 7);
	            String expBinBaseUom                = excelReader.getCellData(xlSheetName, 309, 7);
	            String expBinBalanceQty             = excelReader.getCellData(xlSheetName, 310, 7);
	            String expBinSum                    = excelReader.getCellData(xlSheetName, 311, 7);
	            
	            excelReader.setCellData(xlfile, xlSheetName, 308, 8, actBinTotalQty);
	            excelReader.setCellData(xlfile, xlSheetName, 309, 8, actBinBaseUom);
	            excelReader.setCellData(xlfile, xlSheetName, 310, 8, actBinBalanceQty);
	            excelReader.setCellData(xlfile, xlSheetName, 311, 8, actBinSum);
				
				
				int binInwardGridListCount = binInwardGridList.size();
	            
	            ArrayList<String> binInwardGridListArray = new ArrayList<String>();
	            
	            for(int i=0;i<binInwardGridListCount;i++)
	            {
	                    String data = binInwardGridList.get(i).getText();
	                    binInwardGridListArray.add(data);
	            }
	            
	            
	            String actbinInwardGridList=binInwardGridListArray.toString();
	            
	            String expbinInwardGridList=excelReader.getCellData(xlSheetName, 307, 7);
	            
	            excelReader.setCellData(xlfile, xlSheetName, 307, 8, actbinInwardGridList);
	            
	            System.out.println("ActbinInwardGridList : " + actbinInwardGridList);
	            System.out.println("ExpbinInwardGridList : " + expbinInwardGridList);
	            
	            
	            
	            boolean actMethod = actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn 
	                                        /*&& actBinAlternateCategory==expBinAlternateCategory*/ 
	                                        && actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn;
	            
	            String actResult = Boolean.toString(actMethod);
	            
	            excelReader.setCellData(xlfile, xlSheetName, 306, 8, actResult.toUpperCase());

				
				
				/*System.out.println("First Row Group Name        :  " + actBinGroupNameR1 +"   " + expBinGroupNameR1);
				
				System.out.println("Second Row Bin Name         :  " + actBinNameR2 +"   " + expBinNameR2);
				System.out.println("Second Row Stock            :  " + actBinStockR2 +"   " + expBinStockR2);
				System.out.println("Second Row Capacity         :  " + actBinCapacityR2 +"   " + expBinCapacityR2);
				System.out.println("Second Row Load             :  " + actBinLoadR2 +"   " + expBinLoadR2);
				System.out.println("Second Row Free Space       :  " + actBinFreeSpaceR2 +"   " + expBinFreeSpaceR2);
				System.out.println("Second Row Free Qty         :  " + actBinFreeQtyR2 +"   " + expBinFreeQtyR2);
				System.out.println("Second Row To Be Allocated  :  " + actBinToBeAllocatedR2 +"   " + expBinToBeAllocatedR2);
				
				
				System.out.println("Third Row Bin Name         :  " + actBinNameR3 +"   " + expBinNameR3);
				System.out.println("Third Row Stock            :  " + actBinStockR3 +"   " + expBinStockR3);
				System.out.println("Third Row Capacity         :  " + actBinCapacityR3 +"   " + expBinCapacityR3);
				System.out.println("Third Row Load             :  " + actBinLoadR3 +"   " + expBinLoadR3);
				System.out.println("Third Row Free Space       :  " + actBinFreeSpaceR3 +"   " + expBinFreeSpaceR3);
				System.out.println("Third Row Free Qty         :  " + actBinFreeQtyR3 +"   " + expBinFreeQtyR3);
				System.out.println("Third Row To Be Allocated  :  " + actBinToBeAllocatedR3 +"   " + expBinToBeAllocatedR3);*/
				
				System.out.println("Bin Total Qty              :  " +actBinTotalQty +"  "+expBinTotalQty);
				System.out.println("Bin Base Uom               :  " +actBinBaseUom +"  "+expBinBaseUom);
				System.out.println("Bin Balance Txt            :  " +actBinBalanceQty +"  "+expBinBalanceQty);
				
				System.out.println("Bin Total Sum :  " + actBinSum +"   " + expBinSum);
							
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
				binAutoAllocateBtn.click();	
				
				/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binselect2ndRow_8thColumn));
				binselect2ndRow_8thColumn.click();
				
				enter_ToBeAllocateTxt.sendKeys(excelReader.getCellData(xlSheetName, 311, 6));
				
			
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binselect3rdRow_8thColumn));
				binselect3rdRow_8thColumn.click();
				
				enter_ToBeAllocateTxt.sendKeys(excelReader.getCellData(xlSheetName, 312, 6));
				
				enter_ToBeAllocateTxt.sendKeys(Keys.TAB);*/
				
				
				
				
				
				String actBinToBeAlloctionValueOnClickOnAutoAllocate2R = binselect2ndRow_8thColumn.getText();
				String actBinToBeAlloctionValueOnClickOnAutoAllocate3R = binselect3rdRow_8thColumn.getText();
					
				String expBinToBeAlloctionValueOnClickOnAutoAllocate2R = excelReader.getCellData(xlSheetName, 312, 7);
				String expBinToBeAlloctionValueOnClickOnAutoAllocate3R = excelReader.getCellData(xlSheetName, 313, 7);
				
				excelReader.setCellData(xlfile, xlSheetName, 312, 8, actBinToBeAlloctionValueOnClickOnAutoAllocate2R);
				excelReader.setCellData(xlfile, xlSheetName, 313, 8, actBinToBeAlloctionValueOnClickOnAutoAllocate3R);
				
				System.out.println("Row 2 To Be Allocated Value Actual :  " + actBinToBeAlloctionValueOnClickOnAutoAllocate2R + " Value Actual : " + expBinToBeAlloctionValueOnClickOnAutoAllocate2R);
				System.out.println("Row 3 To Be Allocated Value Actual  : " + actBinToBeAlloctionValueOnClickOnAutoAllocate3R + " Value Actual : " + expBinToBeAlloctionValueOnClickOnAutoAllocate3R);
				
				
				
				if(/*actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn && actBinAlternateCategory==expBinAlternateCategory 
						&& actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn
						&& actBinOkBtn==expBinOkBtn
						
						&& actBinGroupNameR1.equalsIgnoreCase(expBinGroupNameR1)
						
						&& actBinNameR2.equalsIgnoreCase(expBinNameR2) && actBinStockR2.equalsIgnoreCase(expBinStockR2) 
						&& actBinCapacityR2.equalsIgnoreCase(expBinCapacityR2) && actBinLoadR2.equalsIgnoreCase(expBinLoadR2)
						&& actBinFreeSpaceR2.equalsIgnoreCase(expBinFreeSpaceR2) && actBinFreeQtyR2.equalsIgnoreCase(expBinFreeQtyR2)
						&& actBinToBeAllocatedR2.equalsIgnoreCase(expBinToBeAllocatedR2)
						
						&& actBinNameR3.equalsIgnoreCase(expBinNameR3) && actBinStockR3.equalsIgnoreCase(expBinStockR3) 
						&& actBinCapacityR3.equalsIgnoreCase(expBinCapacityR3) && actBinLoadR3.equalsIgnoreCase(expBinLoadR3)
						&& actBinFreeSpaceR3.equalsIgnoreCase(expBinFreeSpaceR3) && actBinFreeQtyR3.equalsIgnoreCase(expBinFreeQtyR3)
						&& actBinToBeAllocatedR3.equalsIgnoreCase(expBinToBeAllocatedR3)*/
						
						actMethod== true && actbinInwardGridList.equalsIgnoreCase(expbinInwardGridList)
						
						&& actBinTotalQty.equalsIgnoreCase(expBinTotalQty) && actBinBaseUom.equalsIgnoreCase(expBinBaseUom) 
						&& actBinBalanceQty.equalsIgnoreCase(expBinBalanceQty)
						
						&& actBinSum.equalsIgnoreCase(expBinSum))
				{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
					binOkBtn.click();	
					excelReader.setCellData(xlfile, xlSheetName, 306, 9, resPass);
					System.out.println("Manual Spilt Bin ");
					return true;
				}
				else
				{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binCancelBtn));
					binCancelBtn.click();
					excelReader.setCellData(xlfile, xlSheetName, 306, 9, resFail);
					System.out.println("Manual Did not Spilt Bin ");
					return false;
				}
			}
			catch (Exception e) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binCancelBtn));
				binCancelBtn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_9thColumn));
				select2ndRow_9thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_9thColumn));
				select3rdRow_9thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_9thColumn));
				select4thRow_9thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_9thColumn));
				select5thRow_9thColumn.click();
				
				String exception =e.getMessage().substring(0, 50);
				excelReader.setExceptionInExcel(xlfile, xlSheetName, 306, 10, e.getMessage());
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				return false;
			}
	  	}

	  

	  public boolean checkEditOpeningStocksNewVoucherConsumeFullCapacityInFifthRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	  {
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";		
		
			try
			{	
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_1stColumn));
				select5thRow_1stColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
				enter_ItemTxt.sendKeys(Keys.SPACE);
				
				int itemcount=itemListCount.size();
				
				System.err.println(itemcount);
					
				for(int i=0 ; i < itemcount ;i++)
				{
					String data=itemListCount.get(i).getText();
					
					if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 314, 6)))
					{
						itemListCount.get(i).click();
						
						break;
					}
				}
					
				enter_ItemTxt.sendKeys(Keys.TAB);	
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
				enter_UnitTxt.sendKeys(Keys.END);
				enter_UnitTxt.sendKeys(Keys.SHIFT,Keys.HOME);
				enter_UnitTxt.sendKeys(Keys.BACK_SPACE);
				Thread.sleep(2000);
				enter_UnitTxt.sendKeys(excelReader.getCellData(xlSheetName, 315, 6));
				Thread.sleep(2000);
				enter_UnitTxt.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
				enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 316, 6));
				
				enter_Quantity.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
				enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 317, 6));
				
				enter_Rate.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
				enter_Gross.sendKeys(Keys.TAB);
				
				try
				{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Bin));
					enter_Bin.sendKeys(Keys.SPACE);
				}
				catch(Exception ee)
				{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchTxt));
				}
						
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchTxt));
				
				boolean actBinSearchTxt                = binSearchTxt.isDisplayed();
				boolean actBinSearchBtn                = binSearchBtn.isDisplayed();
				//boolean actBinAlternateCategory        = binAlternateCategoryCheckBtn.isDisplayed();
				boolean actBinAutoAllocateBtn          = binAutoAllocateBtn.isDisplayed();
				boolean actBinPickBtn                  = binPickBtn.isDisplayed();
				boolean actBinCancelBtn                = binCancelBtn.isDisplayed();
				boolean actBinOkBtn                    = binOkBtn.isEnabled();
						
				boolean expBinSearchTxt                = true;
				boolean expBinSearchBtn                = true;
				boolean expBinAlternateCategory        = true;
				boolean expBinAutoAllocateBtn          = true;
				boolean expBinPickBtn                  = true;
				boolean expBinCancelBtn                = true;
				boolean expBinOkBtn                    = true;
					
				System.out.println("Bin Search Value Actual                :  " + actBinSearchTxt +         " Value Expected : " + expBinSearchTxt);
				System.out.println("Bin Search Btn Value Actual            :  " + actBinSearchBtn +         " Value Expected : " + expBinSearchBtn);
				//System.out.println("Bin Alternate Category Value Actual    :  " + actBinAlternateCategory + " Value Expected : " + expBinAlternateCategory);
				System.out.println("Bin Auto Allocate Btn Value Actual     :  " + actBinAutoAllocateBtn +   " Value Expected : " + expBinAutoAllocateBtn);
				System.out.println("Bin Pick Btn Value Actual              :  " + actBinPickBtn +           " Value Expected : " + expBinPickBtn);
				System.out.println("Bin Cancel Btn Value Actual            :  " + actBinCancelBtn +         " Value Expected : " + expBinCancelBtn);
				System.out.println("Bin Ok Btn Value Actual                :  " + actBinOkBtn +             " Value Expected : " + expBinOkBtn);
				
				
				String expBinGroupNameR1="BG1";
				
				String expBinNameR2="Bin5";
				String expBinStockR2="0.00";
				String expBinCapacityR2="98.00";
				String expBinLoadR2="90.00";
				String expBinFreeSpaceR2="8.00";
				String expBinFreeQtyR2="8.00";
				String expBinToBeAllocatedR2="0.00";
				
				/*String expBinNameR3="Bin5";
				String expBinStockR3="0.00";
				String expBinCapacityR3="98.00";
				String expBinLoadR3="0.00";
				String expBinFreeSpaceR3="98.00";
				String expBinFreeQtyR3="98.00";
				String expBinToBeAllocatedR3="0.00";*/
				
			
				/*String expBinTotalQty="8.00";
				String expBinBaseUom="Pcs";
				String expBinBalanceQty="8.00";
				
				String expBinSum="0.00";*/
				
				
				/*String actBinGroupNameR1=binselect1stRow_2ndColumn.getText();
				
				String actBinNameR2=binselect2ndRow_2ndColumn.getText();
				String actBinStockR2=binselect2ndRow_3rdColumn.getText();
				String actBinCapacityR2=binselect2ndRow_4thColumn.getText();
				String actBinLoadR2=binselect2ndRow_5thColumn.getText();
				String actBinFreeSpaceR2=binselect2ndRow_6thColumn.getText();
				String actBinFreeQtyR2=binselect2ndRow_7thColumn.getText();
				String actBinToBeAllocatedR2=binselect2ndRow_8thColumn.getText();*/
					
				
				/*String actBinNameR3=binselect3rdRow_2ndColumn.getText();
				String actBinStockR3=binselect3rdRow_3rdColumn.getText();
				String actBinCapacityR3=binselect3rdRow_4thColumn.getText();
				String actBinLoadR3=binselect3rdRow_5thColumn.getText();
				String actBinFreeSpaceR3=binselect3rdRow_6thColumn.getText();
				String actBinFreeQtyR3=binselect3rdRow_7thColumn.getText();
				String actBinToBeAllocatedR3=binselect3rdRow_8thColumn.getText();*/
				
				String actBinTotalQty=binTotalQty.getAttribute("value");
				String actBinBaseUom=binBaseUOM.getText();
				String actBinBalanceQty=binBalanceTxt.getAttribute("value");
				String actBinSum=binSumInward.getText();
				System.out.println("actBinSum  : "+actBinSum);
				
				 String expBinTotalQty               = excelReader.getCellData(xlSheetName, 316, 7);
	             String expBinBaseUom                = excelReader.getCellData(xlSheetName, 317, 7);
	             String expBinBalanceQty             = excelReader.getCellData(xlSheetName, 318, 7);
	             String expBinSum                    = excelReader.getCellData(xlSheetName, 319, 7);
	             
	             excelReader.setCellData(xlfile, xlSheetName, 316, 8, actBinTotalQty);
	             excelReader.setCellData(xlfile, xlSheetName, 317, 8, actBinBaseUom);
	             excelReader.setCellData(xlfile, xlSheetName, 318, 8, actBinBalanceQty);
	             excelReader.setCellData(xlfile, xlSheetName, 319, 8, actBinSum);

				
				 int binInwardGridListCount = binInwardGridList.size();
	             
	             ArrayList<String> binInwardGridListArray = new ArrayList<String>();
	             
	             for(int i=0;i<binInwardGridListCount;i++)
	             {
	                     String data = binInwardGridList.get(i).getText();
	                     binInwardGridListArray.add(data);
	             }
	             
	             
	             String actbinInwardGridList=binInwardGridListArray.toString();
	             
	             String expbinInwardGridList=excelReader.getCellData(xlSheetName, 315, 7);
	             
	             excelReader.setCellData(xlfile, xlSheetName, 315, 8, actbinInwardGridList);
	             
	             System.out.println("ActbinInwardGridList : " + actbinInwardGridList);
	             System.out.println("ExpbinInwardGridList : " + expbinInwardGridList);
	             
	             
	             boolean actMethod = actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn 
	                                         /*&& actBinAlternateCategory==expBinAlternateCategory*/ 
	                                         && actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn;
	             
	             String actResult = Boolean.toString(actMethod);
	             
	             excelReader.setCellData(xlfile, xlSheetName, 314, 8, actResult.toUpperCase());

				
				
				/*System.out.println("First Row Group Name        :  " + actBinGroupNameR1 +"   " + expBinGroupNameR1);
				
				System.out.println("Second Row Bin Name         :  " + actBinNameR2 +"   " + expBinNameR2);
				System.out.println("Second Row Stock            :  " + actBinStockR2 +"   " + expBinStockR2);
				System.out.println("Second Row Capacity         :  " + actBinCapacityR2 +"   " + expBinCapacityR2);
				System.out.println("Second Row Load             :  " + actBinLoadR2 +"   " + expBinLoadR2);
				System.out.println("Second Row Free Space       :  " + actBinFreeSpaceR2 +"   " + expBinFreeSpaceR2);
				System.out.println("Second Row Free Qty         :  " + actBinFreeQtyR2 +"   " + expBinFreeQtyR2);
				System.out.println("Second Row To Be Allocated  :  " + actBinToBeAllocatedR2 +"   " + expBinToBeAllocatedR2);*/
				
				/*
				System.out.println("Third Row Bin Name         :  " + actBinNameR3 +"   " + expBinNameR3);
				System.out.println("Third Row Stock            :  " + actBinStockR3 +"   " + expBinStockR3);
				System.out.println("Third Row Capacity         :  " + actBinCapacityR3 +"   " + expBinCapacityR3);
				System.out.println("Third Row Load             :  " + actBinLoadR3 +"   " + expBinLoadR3);
				System.out.println("Third Row Free Space       :  " + actBinFreeSpaceR3 +"   " + expBinFreeSpaceR3);
				System.out.println("Third Row Free Qty         :  " + actBinFreeQtyR3 +"   " + expBinFreeQtyR3);
				System.out.println("Third Row To Be Allocated  :  " + actBinToBeAllocatedR3 +"   " + expBinToBeAllocatedR3);*/
				
				System.out.println("Bin Total Qty              :  " +actBinTotalQty +"  "+expBinTotalQty);
				System.out.println("Bin Base Uom               :  " +actBinBaseUom +"  "+expBinBaseUom);
				System.out.println("Bin Balance Txt            :  " +actBinBalanceQty +"  "+expBinBalanceQty);
				
				System.out.println("Bin Total Sum :  " + actBinSum +"   " + expBinSum);
							
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
				binAutoAllocateBtn.click();	
				
				ArrayList<String> binInwardGridListArrayAA = new ArrayList<String>();
				
				for(int i=0;i<binInwardGridListCount;i++)
	            {
	                    String data = binInwardGridList.get(i).getText();
	                    binInwardGridListArrayAA.add(data);
	            }
	            
	            
	            String actbinInwardGridListAA=binInwardGridListArrayAA.toString();
	            
	            String expbinInwardGridListAA=excelReader.getCellData(xlSheetName, 320, 7);
	            
	            excelReader.setCellData(xlfile, xlSheetName, 320, 8, actbinInwardGridListAA);
	            
	            System.out.println("ActbinInwardGridList AA : " + actbinInwardGridListAA);
	            System.out.println("ExpbinInwardGridList : " + expbinInwardGridList);
				
				/*String actBinToBeAlloctionValueOnClickOnAutoAllocate2R = binselect2ndRow_8thColumn.getText();
				String actBinToBeAlloctionValueOnClickOnAutoAllocate3R = binselect3rdRow_8thColumn.getText();
					
				String expBinToBeAlloctionValueOnClickOnAutoAllocate2R = "8.00";
				String expBinToBeAlloctionValueOnClickOnAutoAllocate3R = "90.00";
				
				System.out.println("Row 2 To Be Allocated Value Actual :  " + actBinToBeAlloctionValueOnClickOnAutoAllocate2R + " Value Actual : " + expBinToBeAlloctionValueOnClickOnAutoAllocate2R);
				System.out.println("Row 3 To Be Allocated Value Actual  : " + actBinToBeAlloctionValueOnClickOnAutoAllocate3R + " Value Actual : " + expBinToBeAlloctionValueOnClickOnAutoAllocate3R);*/
				
				
				
				if(/*actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn && actBinAlternateCategory==expBinAlternateCategory 
						&& actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn
						&& actBinOkBtn==expBinOkBtn
						
						&& actBinGroupNameR1.equalsIgnoreCase(expBinGroupNameR1)
						
						&& actBinNameR2.equalsIgnoreCase(expBinNameR2) && actBinStockR2.equalsIgnoreCase(expBinStockR2) 
						&& actBinCapacityR2.equalsIgnoreCase(expBinCapacityR2) && actBinLoadR2.equalsIgnoreCase(expBinLoadR2)
						&& actBinFreeSpaceR2.equalsIgnoreCase(expBinFreeSpaceR2) && actBinFreeQtyR2.equalsIgnoreCase(expBinFreeQtyR2)
						&& actBinToBeAllocatedR2.equalsIgnoreCase(expBinToBeAllocatedR2)*/
						
						/*&& actBinNameR3.equalsIgnoreCase(expBinNameR3) && actBinStockR3.equalsIgnoreCase(expBinStockR3) 
						&& actBinCapacityR3.equalsIgnoreCase(expBinCapacityR3) && actBinLoadR3.equalsIgnoreCase(expBinLoadR3)
						&& actBinFreeSpaceR3.equalsIgnoreCase(expBinFreeSpaceR3) && actBinFreeQtyR3.equalsIgnoreCase(expBinFreeQtyR3)
						&& actBinToBeAllocatedR3.equalsIgnoreCase(expBinToBeAllocatedR3)*/
						
						actMethod==true && actbinInwardGridList.equalsIgnoreCase(expbinInwardGridList) && actbinInwardGridListAA.equalsIgnoreCase(expbinInwardGridListAA)
						
						&& actBinTotalQty.equalsIgnoreCase(expBinTotalQty) && actBinBaseUom.equalsIgnoreCase(expBinBaseUom) 
						&& actBinBalanceQty.equalsIgnoreCase(expBinBalanceQty)
						
						&& actBinSum.equalsIgnoreCase(expBinSum))
				{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
					binOkBtn.click();	
					
					excelReader.setCellData(xlfile, xlSheetName, 314, 9, resPass);
					System.out.println("Manual Spilt Bin ");
					return true;
				}
				else
				{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binCancelBtn));
					 binCancelBtn.click();	
					excelReader.setCellData(xlfile, xlSheetName, 314, 9, resFail);
					System.out.println("Manual Did not Spilt Bin ");
					return false;
				}
			}
			 catch (Exception e) 
			 {
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binCancelBtn));
				 binCancelBtn.click();	
					
				 String exception =e.getMessage().substring(0, 50);
				 excelReader.setExceptionInExcel(xlfile, xlSheetName, 314, 10, e.getMessage());
				 System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				 return false;
			 } 
	  	}


	  public boolean checkEditOpeningStocksNewVoucherBinPopUpValuesAfterFullQtyConsumeinPreviousRows() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	  {
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";		
		
			try
			{	
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
				enter_ItemTxt.sendKeys(Keys.SPACE);
				
				int itemcount=itemListCount.size();
				
				System.err.println(itemcount);
					
				for(int i=0 ; i < itemcount ;i++)
				{
					String data=itemListCount.get(i).getText();
					
					if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 321, 6)))
					{
						itemListCount.get(i).click();
						
						break;
					}
				}
					
				enter_ItemTxt.sendKeys(Keys.TAB);	
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
				enter_UnitTxt.click();
				enter_UnitTxt.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
				enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 322, 6));
				
				enter_Quantity.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
				enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 323, 6));
				
				enter_Rate.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
				enter_Gross.sendKeys(Keys.TAB);
				
				try
				{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Bin));
					enter_Bin.sendKeys(Keys.SPACE);
				}
				catch(Exception ee)
				{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchTxt));
				}
						
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchTxt));
				
				boolean actBinSearchTxt                = binSearchTxt.isDisplayed();
				boolean actBinSearchBtn                = binSearchBtn.isDisplayed();
				//boolean actBinAlternateCategory        = binAlternateCategoryCheckBtn.isDisplayed();
				boolean actBinAutoAllocateBtn          = binAutoAllocateBtn.isDisplayed();
				boolean actBinPickBtn                  = binPickBtn.isDisplayed();
				boolean actBinCancelBtn                = binCancelBtn.isDisplayed();
				boolean actBinOkBtn                    = binOkBtn.isEnabled();
						
				boolean expBinSearchTxt                = true;
				boolean expBinSearchBtn                = true;
				boolean expBinAlternateCategory        = true;
				boolean expBinAutoAllocateBtn          = true;
				boolean expBinPickBtn                  = true;
				boolean expBinCancelBtn                = true;
				boolean expBinOkBtn                    = true;
					
				System.out.println("Bin Search Value Actual                :  " + actBinSearchTxt +         " Value Expected : " + expBinSearchTxt);
				System.out.println("Bin Search Btn Value Actual            :  " + actBinSearchBtn +         " Value Expected : " + expBinSearchBtn);
				//System.out.println("Bin Alternate Category Value Actual    :  " + actBinAlternateCategory + " Value Expected : " + expBinAlternateCategory);
				System.out.println("Bin Auto Allocate Btn Value Actual     :  " + actBinAutoAllocateBtn +   " Value Expected : " + expBinAutoAllocateBtn);
				System.out.println("Bin Pick Btn Value Actual              :  " + actBinPickBtn +           " Value Expected : " + expBinPickBtn);
				System.out.println("Bin Cancel Btn Value Actual            :  " + actBinCancelBtn +         " Value Expected : " + expBinCancelBtn);
				System.out.println("Bin Ok Btn Value Actual                :  " + actBinOkBtn +             " Value Expected : " + expBinOkBtn);
				
				boolean actMethod = actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn /*&& actBinAlternateCategory==expBinAlternateCategory*/ 
									&& actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn
									&& actBinOkBtn==expBinOkBtn;
				
				String actResult = Boolean.toString(actMethod);
				
				excelReader.setCellData(xlfile, xlSheetName, 321, 8, actResult.toUpperCase());
				
				
				int count = binPopUpRowCount.size();
				
				String actbinPopUpRowCount = Integer.toString(count);
				
				String expbinPopUpRowCount = excelReader.getCellData(xlSheetName, 322, 7);
				
				System.out.println("binPopUpRowCount  Actual : "+actbinPopUpRowCount + " Value Expected : " + expbinPopUpRowCount);
				
				excelReader.setCellData(xlfile, xlSheetName, 322, 8, actbinPopUpRowCount);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binCancelBtn));
				binCancelBtn.click();	
				
				Thread.sleep(2000);
				
				for(int i=1;i<=4;i++)
				{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(thirdRowIndex));
					thirdRowIndex.click();	
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
					deleteRowBtn.click();	
				}
				
				if(actMethod==true && actbinPopUpRowCount.equalsIgnoreCase(expbinPopUpRowCount))
				{
					excelReader.setCellData(xlfile, xlSheetName, 321, 9, resPass);
					System.out.println("Manual Spilt Bin ");
					return true;
				}
				else
				{
					excelReader.setCellData(xlfile, xlSheetName, 321, 9, resFail);
					System.out.println("Manual Did not Spilt Bin ");
					return false;
				}
			}
			catch (Exception e) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binCancelBtn));
				binCancelBtn.click();	
				
				for(int i=1;i<=4;i++)
				{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(thirdRowIndex));
					thirdRowIndex.click();	
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
					deleteRowBtn.click();	
				}	
				
				String exception =e.getMessage().substring(0, 50);
				excelReader.setExceptionInExcel(xlfile, xlSheetName, 321, 10, e.getMessage());
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				return false;
			} 	
	  	}

	  
	  
	  
	  
	  
	  
	//-----------------------------------------------------------  Test the Editing Voucher ---------------------------------------------------------------------------
	  
	  
	  
	  
    //Revert Changes
    @FindBy(xpath="//label[contains(text(),'Revert changes')]")
	private static WebElement  revertChanges;

	  
	public boolean checkOpeningStocksNewVoucherAlertAndOKButtonInRevertChanges() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		try
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
			toggleBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(revertChanges));
			revertChanges.click();
		
			getWaitForAlert();
			
			String actAlert=getAlert().getText();
			String expAlert1=excelReader.getCellData(xlSheetName, 325, 7);
			String expAlert2=excelReader.getCellData(xlSheetName, 326, 7);
			
			System.out.println("Alert On Revert Changes :  "+actAlert +"  "+expAlert1+""+expAlert2);
			
			excelReader.setCellData(xlfile, xlSheetName, 325, 8, actAlert);
			
			System.out.println("Test Pass : Alert Displayed");
			
			getAlert().accept();
			
			boolean loading=checkLoadingMessage();
			
			System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
		
			/*Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(openingStocksNEW_NarrationTxt));
			openingStocksNEW_NarrationTxt.click();
			
			String actNarrationText=openingStocksNEW_NarrationTxt.getAttribute("value");
			String expNarrationText="Opening123!@#";
			*/
			//System.out.println("Narration Text After Revert Change :  "+actNarrationText +"  "+expNarrationText);
			
			
			if(actAlert.startsWith(expAlert1) && actAlert.endsWith(expAlert2))
			{
				excelReader.setCellData(xlfile, xlSheetName, 324, 9, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 324, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage().substring(0, 50);
			excelReader.setExceptionInExcel(xlfile, xlSheetName, 324, 10, e.getMessage());
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		} 	
	 }
	
	  
	
	  public boolean checkOpeningStocksNewVoucherOnClickOnRevertChanges() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	  {
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
		
			try
			{
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
			grid_ChkBox1.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editBtn));
			editBtn.click();
			
			boolean loading=checkLoadingMessage();
			
			System.out.println("VoucherLoadingMessage  : "+loading +" Value Expected : "+"TRUE");*/
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			documentNumberTxt.click();
			
			String actdocNumber,expdocNumber;
			
			actdocNumber=documentNumberTxt.getAttribute("value");
			expdocNumber=excelReader.getCellData(xlSheetName, 328, 7);
			
			excelReader.setCellData(xlfile, xlSheetName, 328, 8, actdocNumber);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
	
			String actOsVoucherWarehouse=wareHouseTxt.getAttribute("value");
			String expOsVoucherWarehouse=excelReader.getCellData(xlSheetName, 329, 7);
			
			excelReader.setCellData(xlfile, xlSheetName, 329, 8, actOsVoucherWarehouse);
					
			
			/*Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_footerExpandBtn));
			new_footerExpandBtn.click();*/
			
			
			/*String actOsVoucherItemR1,actOsVoucherUnitsR1,actOsVoucherQtyR1,actOsVoucherRateR1,actOsVoucherGrossR1,actOsVoucherBatchR1;
			String actOsVoucherItemR2,actOsVoucherUnitsR2,actOsVoucherQtyR2,actOsVoucherRateR2,actOsVoucherGrossR2,actOsVoucherBinR2;
			String actOsVoucherItemR3,actOsVoucherUnitsR3,actOsVoucherQtyR3,actOsVoucherRateR3,actOsVoucherGrossR3,actOsVoucherRMAR3;
			String actOsVoucherItemR4,actOsVoucherUnitsR4,actOsVoucherQtyR4,actOsVoucherRateR4,actOsVoucherGrossR4,actOsVoucherBatchR4;*/
			
			String actOsVoucherFooterQty,actOsVoucherFooterGross,actOsVoucherFooterNet;
			
	
			/*String expOsVoucherItemR1,expOsVoucherUnitsR1,expOsVoucherQtyR1,expOsVoucherRateR1,expOsVoucherGrossR1,expOsVoucherBatchR1;
			String expOsVoucherItemR2,expOsVoucherUnitsR2,expOsVoucherQtyR2,expOsVoucherRateR2,expOsVoucherGrossR2,expOsVoucherBinR2;
			String expOsVoucherItemR3,expOsVoucherUnitsR3,expOsVoucherQtyR3,expOsVoucherRateR3,expOsVoucherGrossR3,expOsVoucherRMAR3;
			String expOsVoucherItemR4,expOsVoucherUnitsR4,expOsVoucherQtyR4,expOsVoucherRateR4,expOsVoucherGrossR4,expOsVoucherBatchR4;*/
			
			String expOsVoucherFooterQty,expOsVoucherFooterGross,expOsVoucherFooterNet;
	
		
			/*expOsVoucherItemR1="BATCH BR ITEM";
			expOsVoucherUnitsR1="Dozs";
			expOsVoucherQtyR1="5.00";
			expOsVoucherRateR1="9.00";
			expOsVoucherGrossR1="45.00";
			expOsVoucherBatchR1="OSHYDBR1";
			
			expOsVoucherItemR2="FIFO COGS ITEM";
			expOsVoucherUnitsR2="Dozs";
			expOsVoucherQtyR2="1.00";
			expOsVoucherRateR2="12.00";
			expOsVoucherGrossR2="12.00";
			expOsVoucherBinR2="Bin4";
			
			expOsVoucherItemR3="WA COGS ITEM";
			expOsVoucherUnitsR3="Pcs";
			expOsVoucherQtyR3="5.00";
			expOsVoucherRateR3="20.00";
			expOsVoucherGrossR3="100.00";
			expOsVoucherRMAR3="Hyd@OS1,Hyd@OS2,Hyd@OS3,Hyd@OS4,Hyd@OS5";
			
			expOsVoucherItemR4="STD RATE COGS ITEM";
			expOsVoucherUnitsR4="Dozs";
			expOsVoucherQtyR4="5.00";
			expOsVoucherRateR4="9.00";
			expOsVoucherGrossR4="45.00";
			//expOsVoucherBatchR4="OSHWA2";*/
			
			expOsVoucherFooterQty=excelReader.getCellData(xlSheetName, 331, 7);
			expOsVoucherFooterGross=excelReader.getCellData(xlSheetName, 332, 7);
			expOsVoucherFooterNet=excelReader.getCellData(xlSheetName, 333, 7);
			
			
			
			
			
			System.out.println(netAmount.getText());
			System.out.println(QtyAmount.getText());
			System.out.println(GrossAmount.getText());
			
			
			/*actOsVoucherItemR1=select1stRow_1stColumn.getText();
			actOsVoucherUnitsR1=select1stRow_2ndColumn.getText();
			actOsVoucherQtyR1=select1stRow_3rdColumn.getText();
			actOsVoucherRateR1=select1stRow_4thColumn.getText();
			actOsVoucherGrossR1=select1stRow_5thColumn.getText();
			actOsVoucherBatchR1=select1stRow_6thColumn.getText();
			
			actOsVoucherItemR2=select2ndRow_1stColumn.getText();
			actOsVoucherUnitsR2=select2ndRow_2ndColumn.getText();
			actOsVoucherQtyR2=select2ndRow_3rdColumn.getText();
			actOsVoucherRateR2=select2ndRow_4thColumn.getText();
			actOsVoucherGrossR2=select2ndRow_5thColumn.getText();
			actOsVoucherBinR2=select2ndRow_7thColumn.getText();
			
			actOsVoucherItemR3=select3rdRow_1stColumn.getText();
			actOsVoucherUnitsR3=select3rdRow_2ndColumn.getText();
			actOsVoucherQtyR3=select3rdRow_3rdColumn.getText();
			actOsVoucherRateR3=select3rdRow_4thColumn.getText();
			actOsVoucherGrossR3=select3rdRow_5thColumn.getText();
			actOsVoucherRMAR3=select3rdRow_9thColumn.getText();
			
			actOsVoucherItemR4=select4thRow_1stColumn.getText();
			actOsVoucherUnitsR4=select4thRow_2ndColumn.getText();
			actOsVoucherQtyR4=select4thRow_3rdColumn.getText();
			actOsVoucherRateR4=select4thRow_4thColumn.getText();
			actOsVoucherGrossR4=select4thRow_5thColumn.getText();
			actOsVoucherBatchR4=select4thRow_6thColumn.getText();*/
			
			actOsVoucherFooterQty=QtyAmount.getText();
			actOsVoucherFooterGross=GrossAmount.getText();
			actOsVoucherFooterNet=netAmount.getText();
			
			excelReader.setCellData(xlfile, xlSheetName, 331, 8, actOsVoucherFooterQty);
			excelReader.setCellData(xlfile, xlSheetName, 332, 8, actOsVoucherFooterGross);
			excelReader.setCellData(xlfile, xlSheetName, 333, 8, actOsVoucherFooterNet);
			
			int voucherGridBodyListCount = voucherGridBodyList.size();
			 
			 ArrayList<String> voucherGridBodyListArray = new ArrayList<String>();
			 
			 for(int i=0;i<voucherGridBodyListCount;i++)
			 {
				 if(i==8)
				 {
					 String data ="Expiry Date";
					 voucherGridBodyListArray.add(data);
				 }
				 else
				 {
					 String data = voucherGridBodyList.get(i).getText();
					 voucherGridBodyListArray.add(data);
				 }
			 }
			 
			 String actvoucherGridBodyList=voucherGridBodyListArray.toString();
			 
			 String expvoucherGridBodyList=excelReader.getCellData(xlSheetName, 330, 7);
			 
			 excelReader.setCellData(xlfile, xlSheetName, 330, 8, actvoucherGridBodyList);
			 
			 System.out.println("voucherGridBodyList Actual   : " + actvoucherGridBodyList);
			 System.out.println("voucherGridBodyList Expected : " + expvoucherGridBodyList);
		
			
			 System.out.println("osdocNumber                 :  " + actdocNumber  +"   " + expdocNumber);
	        
	         
	         System.out.println("osVoucherWarehouse          :  " + actOsVoucherWarehouse +"     " + expOsVoucherWarehouse);
	         System.out.println("osVoucherFooterQty          :  " + actOsVoucherFooterQty  +"   " + expOsVoucherFooterQty);
	         System.out.println("osVoucherFooterGross        :  " + actOsVoucherFooterGross +"   " + expOsVoucherFooterGross);
	         System.out.println("osVoucherFooterNet          :  " + actOsVoucherFooterNet +"   " + expOsVoucherFooterNet);
			
			
	         /*System.out.println("First Row Item Name         :  " + actOsVoucherItemR1  +"   " + expOsVoucherItemR1);
	         System.out.println("First Row Units Name        :  " + actOsVoucherUnitsR1 +"   " + expOsVoucherUnitsR1);
	         System.out.println("First Row Qty Name          :  " + actOsVoucherQtyR1 +"     " + expOsVoucherQtyR1);
	         System.out.println("First Row Rate Name         :  " + actOsVoucherRateR1  +"   " + expOsVoucherRateR1);
	         System.out.println("First Row Gross Name        :  " + actOsVoucherGrossR1 +"   " + expOsVoucherGrossR1);
	         System.out.println("First Row Batch Name        :  " + actOsVoucherBatchR1 +"   " + expOsVoucherBatchR1);
	         
	         System.out.println("Second Row Item Name         :  " + actOsVoucherItemR2  +"   " + expOsVoucherItemR2);
	         System.out.println("Second Row Units Name        :  " + actOsVoucherUnitsR2 +"   " + expOsVoucherUnitsR2);
	         System.out.println("Second Row Qty Name          :  " + actOsVoucherQtyR2 +"     " + expOsVoucherQtyR2);
	         System.out.println("Second Row Rate Name         :  " + actOsVoucherRateR2  +"   " + expOsVoucherRateR2);
	         System.out.println("Second Row Gross Name        :  " + actOsVoucherGrossR2 +"   " + expOsVoucherGrossR2);
	         System.out.println("Second Row Bin Name          :  " + actOsVoucherBinR2 +"       " + expOsVoucherBinR2);
	         
	         
	         System.out.println("Third Row Item Name         :  " + actOsVoucherItemR3  +"   " + expOsVoucherItemR3);
	         System.out.println("Third Row Units Name        :  " + actOsVoucherUnitsR3 +"   " + expOsVoucherUnitsR3);
	         System.out.println("Third Row Qty Name          :  " + actOsVoucherQtyR3 +"     " + expOsVoucherQtyR3);
	         System.out.println("Third Row Rate Name         :  " + actOsVoucherRateR3  +"   " + expOsVoucherRateR3);
	         System.out.println("Third Row Gross Name        :  " + actOsVoucherGrossR3 +"   " + expOsVoucherGrossR3);
	         System.out.println("Third Row RMA Name          :  " + actOsVoucherRMAR3 +"     " + expOsVoucherRMAR3);
	         
	         System.out.println("Fourth Row Item Name         :  " + actOsVoucherItemR4  +"   " + expOsVoucherItemR4);
	         System.out.println("Fourth Row Units Name        :  " + actOsVoucherUnitsR4 +"   " + expOsVoucherUnitsR4);
	         System.out.println("Fourth Row Qty Name          :  " + actOsVoucherQtyR4 +"     " + expOsVoucherQtyR4);
	         System.out.println("Fourth Row Rate Name         :  " + actOsVoucherRateR4  +"   " + expOsVoucherRateR4);
	         System.out.println("Fourth Row Gross Name        :  " + actOsVoucherGrossR4 +"   " + expOsVoucherGrossR4);*/
	     
			
			
			if(actdocNumber.equalsIgnoreCase(expdocNumber)
					&& actOsVoucherWarehouse.equalsIgnoreCase(expOsVoucherWarehouse)
					
					&& actOsVoucherFooterQty.equalsIgnoreCase(expOsVoucherFooterQty) && actOsVoucherFooterGross.equalsIgnoreCase(expOsVoucherFooterGross) 
					&& actOsVoucherFooterNet.equalsIgnoreCase(expOsVoucherFooterNet) && actvoucherGridBodyList.equalsIgnoreCase(expvoucherGridBodyList)
					
					/*&&   actOsVoucherItemR1.equalsIgnoreCase(expOsVoucherItemR1) && actOsVoucherUnitsR1.equalsIgnoreCase(expOsVoucherUnitsR1)
					&&   actOsVoucherQtyR1.equalsIgnoreCase(expOsVoucherQtyR1) && actOsVoucherRateR1.equalsIgnoreCase(expOsVoucherRateR1)
					&&   actOsVoucherGrossR1.equalsIgnoreCase(expOsVoucherGrossR1)  && actOsVoucherBatchR1.equalsIgnoreCase(expOsVoucherBatchR1)
					
					&&   actOsVoucherItemR2.equalsIgnoreCase(expOsVoucherItemR2) && actOsVoucherUnitsR2.equalsIgnoreCase(expOsVoucherUnitsR2)
					&&   actOsVoucherQtyR2.equalsIgnoreCase(expOsVoucherQtyR2) && actOsVoucherRateR2.equalsIgnoreCase(expOsVoucherRateR2)
					&&   actOsVoucherGrossR2.equalsIgnoreCase(expOsVoucherGrossR2)  && actOsVoucherBinR2.equalsIgnoreCase(expOsVoucherBinR2)
					
					&&   actOsVoucherItemR3.equalsIgnoreCase(expOsVoucherItemR3) && actOsVoucherUnitsR3.equalsIgnoreCase(expOsVoucherUnitsR3)
					&&   actOsVoucherQtyR3.equalsIgnoreCase(expOsVoucherQtyR3) && actOsVoucherRateR3.equalsIgnoreCase(expOsVoucherRateR3)
					&&   actOsVoucherGrossR3.equalsIgnoreCase(expOsVoucherGrossR3)  && actOsVoucherRMAR3.equalsIgnoreCase(expOsVoucherRMAR3)
					
					&&   actOsVoucherItemR4.equalsIgnoreCase(expOsVoucherItemR4) && actOsVoucherUnitsR4.equalsIgnoreCase(expOsVoucherUnitsR4)
					&&   actOsVoucherQtyR4.equalsIgnoreCase(expOsVoucherQtyR4) && actOsVoucherRateR4.equalsIgnoreCase(expOsVoucherRateR4)
					&&   actOsVoucherGrossR4.equalsIgnoreCase(expOsVoucherGrossR4) */)
			{
				System.out.println("Test Pass : Saved Data is As Expected");
			
				excelReader.setCellData(xlfile, xlSheetName, 327, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Saved Data is NOT As Expected");
				
				excelReader.setCellData(xlfile, xlSheetName, 327, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage().substring(0, 50);
			excelReader.setExceptionInExcel(xlfile, xlSheetName, 327, 10, e.getMessage());
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		}
	  }	
		
	 
	  
	  public boolean checkOpeningStocksNewVoucherEditByUpdatingBRCOGSAndNoBatchInFirstRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	  {
			
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
		try
		{		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.END);
			enter_ItemTxt.sendKeys(Keys.LEFT_SHIFT,Keys.HOME);
			enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemcount=itemListCount.size();
			
			System.err.println(itemcount);
				
			for(int i=0 ; i < itemcount ;i++)
			{
				String data=itemListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 334, 6)))
				{
					itemListCount.get(i).click();
					
					break;
				}
			}
				
			enter_ItemTxt.sendKeys(Keys.TAB);	
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 335, 6));
			enter_Quantity.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 336, 6));
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
				
		    String expSaveMessageWithOutBatch=excelReader.getCellData(xlSheetName, 335, 7);
			
			String validationMessage=checkValidationMessage(expSaveMessageWithOutBatch);
			
			excelReader.setCellData(xlfile, xlSheetName, 335, 8, validationMessage);

			System.out.println("Click On Save Without Input Of Batch Value Actual  : " + validationMessage + "  Value Expected   : " + "TRUE");

			if(validationMessage.equalsIgnoreCase(expSaveMessageWithOutBatch))
			{
				
				System.out.println("Test Pass : Error Message Is As Expected");
				
				excelReader.setCellData(xlfile, xlSheetName, 334, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Error Message Is NOT As Expected");
				
				excelReader.setCellData(xlfile, xlSheetName, 334, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage().substring(0, 50);
			excelReader.setExceptionInExcel(xlfile, xlSheetName, 334, 10, e.getMessage());
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		}	
	  }
		
		
		
	  public boolean checkOpeningStocksNewEditAndUpdateBatchNoWithoutExpiryDate() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	  {
			
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_6thColumn));
			select1stRow_6thColumn.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.click();
			enter_Batch.clear();
			enter_Batch.sendKeys(excelReader.getCellData(xlSheetName, 337, 6));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
			select2ndRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			String expSaveMessageWithOutBatchExpiry=excelReader.getCellData(xlSheetName, 338, 7);
			
			String validationMessage=checkValidationMessage(expSaveMessageWithOutBatchExpiry);
			
			excelReader.setCellData(xlfile, xlSheetName, 338, 8, validationMessage);
					
			System.out.println("Entry Page Save With Input Of Batch Value Actual  : " + validationMessage + "  Value Expected   : " + "TRUE");
		
		
			if(validationMessage.equalsIgnoreCase(expSaveMessageWithOutBatchExpiry))
			{
				System.out.println("Test Pass : Error Message Displayed");
				excelReader.setCellData(xlfile, xlSheetName, 337, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test fail : Error Message NOT Displayed");
				excelReader.setCellData(xlfile, xlSheetName, 337, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage().substring(0, 50);
			excelReader.setExceptionInExcel(xlfile, xlSheetName, 337, 10, e.getMessage());
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		}
	  }

	 
	  public boolean checkOpeningStocksNewVoucherEditByUpdateExpiryDateInFirstRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	  {
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
	    try
	    {
	    	
	    	
	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			select1stRow_8thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
			enter_Expirydate.click();
			enter_Expirydate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_3rdColumn));
			String actQtyR1         = select1stRow_3rdColumn.getText();
			String actRateR1        = select1stRow_4thColumn.getText();
			String actGrossR1       = select1stRow_5thColumn.getText();
			String actBatchR1       = select1stRow_6thColumn.getText();
			
			String expQtyR1         = excelReader.getCellData(xlSheetName, 340, 7);
			String expRateR1        = excelReader.getCellData(xlSheetName, 341, 7);
			String expGrossR1       = excelReader.getCellData(xlSheetName, 342, 7);
			String expBatchR1       = excelReader.getCellData(xlSheetName, 343, 7);
			
			excelReader.setCellData(xlfile, xlSheetName, 340, 8, actQtyR1);
			excelReader.setCellData(xlfile, xlSheetName, 341, 8, actRateR1);
			excelReader.setCellData(xlfile, xlSheetName, 342, 8, actGrossR1);
			excelReader.setCellData(xlfile, xlSheetName, 343, 8, actBatchR1);

			System.out.println("Qty Row 1 Value Actual    : " + actQtyR1     +       " Value Expected   : " + expQtyR1);
			System.out.println("Rate Row 1 Value Actual   : " + actRateR1    +       " Value Expected   : " + expRateR1);
			System.out.println("Gross Row 1 Value Actual  : " + actGrossR1   +       " Value Expected   : " + expGrossR1);
			System.out.println("Batch Row 1 Value Actual  : " + actBatchR1   +       " Value Expected   : " + expBatchR1);
			
			
			if(actQtyR1.equalsIgnoreCase(expQtyR1) && actRateR1.equalsIgnoreCase(expRateR1) && actGrossR1.equalsIgnoreCase(expGrossR1)
					&& actBatchR1.equalsIgnoreCase(expBatchR1))
			{
				System.out.println("Test Pass : Data Entered in First Row");
				excelReader.setCellData(xlfile, xlSheetName, 339, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Data NOT Entered in First Row");
				excelReader.setCellData(xlfile, xlSheetName, 339, 9, resFail);
				return false;
			}
	    }
	    catch (Exception e) 
		{
			String exception =e.getMessage().substring(0, 50);
			excelReader.setExceptionInExcel(xlfile, xlSheetName, 339, 10, e.getMessage());
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		}		
	  }
	  
	  
	  
	  public boolean checkEditAndUpdateBinBySelectingOtherBinThroughDoubleClickAndCheckBinColumnInVoucherOnClickOnOk() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	  {
			
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		try
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_4thColumn));
	    	select2ndRow_4thColumn.click();
					
	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.click();
			enter_Rate.clear();
			enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 344, 6));
			enter_Rate.sendKeys(Keys.TAB);
	    	    	
	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.click();
			enter_Gross.sendKeys(Keys.TAB);
					
			enter_Bin.sendKeys(Keys.SPACE);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchTxt));
			
			boolean actBinSearch = binSearchTxt.isDisplayed();
			boolean expBinSearch = true;
			
			System.out.println("Entry Page Bin Search Value Actual  : " + actBinSearch + "    Value Expected   : " + expBinSearch);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binselect2ndRow_8thColumn));
			binselect2ndRow_8thColumn.click();
			enter_ToBeAllocateTxt.sendKeys(Keys.HOME);
			enter_ToBeAllocateTxt.sendKeys(Keys.SHIFT,Keys.END);
			enter_ToBeAllocateTxt.sendKeys(Keys.SPACE);
		
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binselect3rdRow_1stColumn));
			getAction().doubleClick(binselect3rdRow_1stColumn).build().perform();
			
			/*String actBinGroupNameR1        = binselect1stRow_2ndColumn.getText();	
			
			String actBinNameR2             = binselect2ndRow_2ndColumn.getText();
			String actBinStockR2            = binselect2ndRow_3rdColumn.getText();
			String actBinCapacityR2         = binselect2ndRow_4thColumn.getText();
			String actBinLoadR2             = binselect2ndRow_5thColumn.getText();
			String actBinFreeSpaceR2        = binselect2ndRow_6thColumn.getText();
			String actBinFreeQtyR2          = binselect2ndRow_7thColumn.getText();
			String actBinToBeAllocatedR2    = binselect2ndRow_8thColumn.getText();
				
			String actBinNameR3             = binselect3rdRow_2ndColumn.getText();
			String actBinStockR3            = binselect3rdRow_3rdColumn.getText();
			String actBinCapacityR3         = binselect3rdRow_4thColumn.getText();
			String actBinLoadR3             = binselect3rdRow_5thColumn.getText();
			String actBinFreeSpaceR3        = binselect3rdRow_6thColumn.getText();
			String actBinFreeQtyR3          = binselect3rdRow_7thColumn.getText();
			String actBinToBeAllocatedR3    = binselect3rdRow_8thColumn.getText();*/
			
			String actBinTotalQty           = binTotalQty.getAttribute("value");
			String actBinBaseUom            = binBaseUOM.getText();
			String actBinBalanceQty         = binBalanceTxt.getAttribute("value");
			
			String actBinSum                = binSumInward.getText();
			
			/*String expBinGroupNameR1        = "BG1";
		 	
			String expBinNameR2             = "Bin4";
			String expBinStockR2            = "12.00";
			String expBinCapacityR2         = "90.00";
			String expBinLoadR2             = "12.00";
			String expBinFreeSpaceR2        = "90.00";
			String expBinFreeQtyR2          = "12.00";
			String expBinToBeAllocatedR2    = "0.00";
			
			String expBinNameR3             = "Bin5";
			String expBinStockR3            = "0.00";
			String expBinCapacityR3         = "98.00";
			String expBinLoadR3             = "0.00";
			String expBinFreeSpaceR3        = "98.00";
			String expBinFreeQtyR3          = "98.00";
			String expBinToBeAllocatedR3    = "12.00";
			
			String expBinTotalQty           = "12.00";
			String expBinBaseUom            = "Pcs";
			String expBinBalanceQty         = "0.00";
			
			String expBinSum                = "12.00";*/
				
			boolean actBinSearchTxt         = binSearchTxt.isDisplayed();
			boolean actBinSearchBtn         = binSearchBtn.isDisplayed();
			//boolean actBinAlternateCategory = binAlternateCategoryCheckBtn.isDisplayed();
			boolean actBinAutoAllocateBtn   = binAutoAllocateBtn.isDisplayed();
			boolean actBinPickBtn           = binPickBtn.isDisplayed();
			boolean actBinCancelBtn         = binCancelBtn.isDisplayed();
			boolean actBinOkBtn             = binOkBtn.isEnabled();
			
			boolean expBinSearchTxt         = true;
			boolean expBinSearchBtn         = true;
			boolean expBinAlternateCategory = true;
			boolean expBinAutoAllocateBtn   = true;
			boolean expBinPickBtn           = true;
			boolean expBinCancelBtn         = true;
			boolean expBinOkBtn             = true;
			
			 String expBinTotalQty               = excelReader.getCellData(xlSheetName, 346, 7);
             String expBinBaseUom                = excelReader.getCellData(xlSheetName, 347, 7);
             String expBinBalanceQty             = excelReader.getCellData(xlSheetName, 348, 7);
             String expBinSum                    = excelReader.getCellData(xlSheetName, 349, 7);
             
             excelReader.setCellData(xlfile, xlSheetName, 346, 8, actBinTotalQty);
             excelReader.setCellData(xlfile, xlSheetName, 347, 8, actBinBaseUom);
             excelReader.setCellData(xlfile, xlSheetName, 348, 8, actBinBalanceQty);
             excelReader.setCellData(xlfile, xlSheetName, 349, 8, actBinSum);

			
			 int binInwardGridListCount = binInwardGridList.size();
             
             ArrayList<String> binInwardGridListArray = new ArrayList<String>();
             
             for(int i=0;i<binInwardGridListCount;i++)
             {
                     String data = binInwardGridList.get(i).getText();
                     binInwardGridListArray.add(data);
             }
             
             
             String actbinInwardGridList=binInwardGridListArray.toString();
             
             String expbinInwardGridList=excelReader.getCellData(xlSheetName, 345, 7);
             
             excelReader.setCellData(xlfile, xlSheetName, 345, 8, actbinInwardGridList);
             
             System.out.println("ActbinInwardGridList : " + actbinInwardGridList);
             System.out.println("ExpbinInwardGridList : " + expbinInwardGridList);
             
             
             boolean actMethod = actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn 
                                         /*&& actBinAlternateCategory==expBinAlternateCategory*/ 
                                         && actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn;
             
             String actResult = Boolean.toString(actMethod);
             
             excelReader.setCellData(xlfile, xlSheetName, 344, 8, actResult.toUpperCase());
		
			System.out.println("Bin Search Value Actual                    :  " + actBinSearchTxt +         " Value Expected : " + expBinSearchTxt);
			System.out.println("Bin Search Btn Value Actual                :  " + actBinSearchBtn +         " Value Expected : " + expBinSearchBtn);
			//System.out.println("Bin Alternate Category Value Actual        :  " + actBinAlternateCategory + " Value Expected : " + expBinAlternateCategory);
			System.out.println("Bin Auto Allocate Btn Value Actual         :  " + actBinAutoAllocateBtn +   " Value Expected : " + expBinAutoAllocateBtn);
			System.out.println("Bin Pick Btn Value Actual                  :  " + actBinPickBtn +           " Value Expected : " + expBinPickBtn);
			System.out.println("Bin Cancel Btn Value Actual                :  " + actBinCancelBtn +         " Value Expected : " + expBinCancelBtn);
			System.out.println("Bin Ok Button                              :  " + actBinOkBtn +             " Value Expected : " + expBinOkBtn);
			
			/*System.out.println("First Row Group Name Value Actual          :  " + actBinGroupNameR1 +       " Value Expected : " + expBinGroupNameR1);
			
			System.out.println("Second Row Bin Name Value Actual           :  " + actBinNameR2 +            " Value Expected : " + expBinNameR2);
			System.out.println("Second Row Stock Value Actual              :  " + actBinStockR2 +           " Value Expected : " + expBinStockR2);
			System.out.println("Second Row Capacity Value Actual       	   :  " + actBinCapacityR2 +        " Value Expected : " + expBinCapacityR2);
			System.out.println("Second Row Load Value Actual               :  " + actBinLoadR2 +            " Value Expected : " + expBinLoadR2);
			System.out.println("Second Row Free Space Value Actual         :  " + actBinFreeSpaceR2 +       " Value Expected : " + expBinFreeSpaceR2);
			System.out.println("Second Row Free Qty Value Actual      	   :  " + actBinFreeQtyR2 +         " Value Expected : " + expBinFreeQtyR2);
			System.out.println("Second Row To Be Allocated Value Actual	   :  " + actBinToBeAllocatedR2 +   " Value Expected : " + expBinToBeAllocatedR2);
				
			System.out.println("Third Row Bin Name Value Actual        		:  " + actBinNameR3 +           " Value Expected : " + expBinNameR3);
			System.out.println("Third Row Stock Value Actual            	:  " + actBinStockR3 +          " Value Expected : " + expBinStockR3);
			System.out.println("Third Row Capacity Value Actual       	    :  " + actBinCapacityR3 +       " Value Expected : " + expBinCapacityR3);
			System.out.println("Third Row Load Value Actual            		:  " + actBinLoadR3 +           " Value Expected : " + expBinLoadR3);
			System.out.println("Third Row Free Space Value Actual      		:  " + actBinFreeSpaceR3 +      " Value Expected : " + expBinFreeSpaceR3);
			System.out.println("Third Row Free Qty Value Actual     		:  " + actBinFreeQtyR3 +        " Value Expected : " + expBinFreeQtyR3);
			System.out.println("Third Row To Be Allocated Value Actual 		:  " + actBinToBeAllocatedR3 +  " Value Expected : " + expBinToBeAllocatedR3);*/
			
			System.out.println("Bin Total Qty Value Actual                  :  " + actBinTotalQty +         " Value Expected : " + expBinTotalQty);
			System.out.println("Bin Sum of To Be Allocated Qty Value Actual :  " + actBinSum       +        " Value Expected : " + expBinSum);
				
			System.out.println("Bin Base Uom Value Actual            	    :  " + actBinBaseUom +          " Value Expected : " + expBinBaseUom);
			System.out.println("Bin Balance Txt Value Actual          		:  " + actBinBalanceQty +       " Value Expected : " + expBinBalanceQty);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
			binOkBtn.click();
			
			String actBinName      = excelReader.getCellData(xlSheetName, 350, 7);
			String expBinName      = select2ndRow_7thColumn.getText();
			
			excelReader.setCellData(xlfile, xlSheetName, 350, 8, actBinName);
			
			System.out.println("Bin Column in Voucher Value Actual          : " + actBinName +              " Value Exepected  : " + expBinName);
			
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_7thColumn));
					
			if(actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn /*&& actBinAlternateCategory==expBinAlternateCategory */
					&& actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn
					
					/*&& actBinGroupNameR1.equalsIgnoreCase(expBinGroupNameR1)
					
					&& actBinNameR2.equalsIgnoreCase(expBinNameR2) && actBinStockR2.equalsIgnoreCase(expBinStockR2) 
					&& actBinCapacityR2.equalsIgnoreCase(expBinCapacityR2) && actBinLoadR2.equalsIgnoreCase(expBinLoadR2)
					&& actBinFreeSpaceR2.equalsIgnoreCase(expBinFreeSpaceR2) && actBinFreeQtyR2.equalsIgnoreCase(expBinFreeQtyR2)
					&& actBinToBeAllocatedR2.equalsIgnoreCase(expBinToBeAllocatedR2)
					
					&& actBinNameR3.equalsIgnoreCase(expBinNameR3) && actBinStockR3.equalsIgnoreCase(expBinStockR3) 
					&& actBinCapacityR3.equalsIgnoreCase(expBinCapacityR3) && actBinLoadR3.equalsIgnoreCase(expBinLoadR3)
					&& actBinFreeSpaceR3.equalsIgnoreCase(expBinFreeSpaceR3) && actBinFreeQtyR3.equalsIgnoreCase(expBinFreeQtyR3)
					&& actBinToBeAllocatedR3.equalsIgnoreCase(expBinToBeAllocatedR3)*/
					
					&& actbinInwardGridList.equalsIgnoreCase(expbinInwardGridList)
					
					&& actBinTotalQty.equalsIgnoreCase(expBinTotalQty) && actBinBaseUom.equalsIgnoreCase(expBinBaseUom) 
					&& actBinBalanceQty.equalsIgnoreCase(expBinBalanceQty)
					
					&& actBinSum.equalsIgnoreCase(expBinSum)
					
					&& select2ndRow_7thColumn.getText().equalsIgnoreCase(actBinName))
				
			{
				System.out.println("Selected Bin And Ok Btn Not Enabled");
				excelReader.setCellData(xlfile, xlSheetName, 344, 9, resPass);
				return true;
				
			}
			else
			{
				System.out.println("Not Selected Bin And Ok Btn Not Enabled");
				excelReader.setCellData(xlfile, xlSheetName, 344, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage().substring(0, 50);
			excelReader.setExceptionInExcel(xlfile, xlSheetName, 344, 10, e.getMessage());
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		}
	  }
	  
	  
	

	  //RMA Checking in voucher 
	  
	  public boolean checkEditOpeningStocksNewVoucherRMAItemQtyUpdate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	  {	
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_3rdColumn));
				select3rdRow_3rdColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
				enter_Quantity.click();
				enter_Quantity.clear();
				enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 351, 6));
				enter_Quantity.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
				enter_Rate.click();
				enter_Rate.clear();
				enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 352, 6));
				enter_Rate.sendKeys(Keys.TAB);
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
				saveBtn.click();
				
				String expValidationMessage=excelReader.getCellData(xlSheetName, 352,7);
	
				String actValidationMessage=checkValidationMessage(expValidationMessage);
				
				excelReader.setCellData(xlfile, xlSheetName, 352, 8, actValidationMessage);
				
				System.out.println("Units Column Value is display On Select       : " + actValidationMessage +  "  Value Expected : " + expValidationMessage);
				
				if(actValidationMessage.equalsIgnoreCase(expValidationMessage))
				{
					System.out.println("***Test Pass: RMA Popup Screen Appeared with all the Options***");
					excelReader.setCellData(xlfile, xlSheetName, 351, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("***Test Fail: RMA Popup Screen NOT Appeared with all the Options***");
					excelReader.setCellData(xlfile, xlSheetName, 351, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage().substring(0, 50);
				excelReader.setExceptionInExcel(xlfile, xlSheetName, 351, 10, e.getMessage());
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				return false;
			}
		}
	  
	  
	  
	  public boolean checkEditOpeningStocksNewVoucherRMAPopUpOnRmaItemQtyUpdate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	  {	
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
			try
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_5thColumn));
				select3rdRow_5thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
				enter_Gross.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
				enter_RMA.sendKeys(Keys.SPACE);
				
				int rmaInwardPopRmaNoListCount = rmaInwardPopRmaNoList.size();
				
				System.err.println("rmaInwardPopRmaNoList  : "+rmaInwardPopRmaNoListCount);
				
				ArrayList<String> rmaInwardPopRmaNoListArray = new ArrayList<String>();
				
				for(int i=0;i<rmaInwardPopRmaNoListCount;i++)
				{
					String data=rmaInwardPopRmaNoList.get(i).getAttribute("data-value");
					rmaInwardPopRmaNoListArray.add(data);
				}
				
				System.err.println("rmaInwardPopRmaNoListArray : "+rmaInwardPopRmaNoListArray);
				
				String actrmaInwardPopRmaNoList = rmaInwardPopRmaNoListArray.toString();
				String exprmaInwardPopRmaNoList = excelReader.getCellData(xlSheetName, 354, 7);
				
				excelReader.setCellData(xlfile, xlSheetName, 354, 8, actrmaInwardPopRmaNoList);
				
				
	            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaScreenTitle));
				
				boolean actRmaSerialNumberTxtField     = rmaSerialNumberTxtField.isDisplayed();
				boolean actRmaQuantityTxtField         = rmaQuantityTxtField.isDisplayed();
				boolean actRmaAddBtn                   = rmaAddBtn.isDisplayed();
				boolean actRmaNumberofItemsLabel       = rmaNumberofItemsLabel.isDisplayed();
				boolean actRmaTableHeadingRMA          = rmaTableHeadingRMA.isDisplayed();
				boolean actRmaTableHeadingDocumentNo   = rmaTableHeadingDocumentNo.isDisplayed();
				boolean actRmaTableHeadingDocumentDate = rmaTableHeadingDocumentDate.isDisplayed();
				boolean actRmaClearBtn                 = rmaClearBtn.isDisplayed();
				boolean actRmaOkBtn                    = rmaOkBtn.isDisplayed();
				boolean actRmaCancelBtn                = rmaCancelBtn.isDisplayed();
				boolean actRmaCloseBtn                 = rmaCloseBtn.isDisplayed();
				
				boolean exprmaSerialNumberTxtField     = true;
				boolean exprmaQuantityTxtField         = true;
				boolean exprmaAddBtn                   = true;
				boolean exprmaNumberofItemsLabel       = true;
				boolean exprmaTableHeadingRMA          = true;
				boolean exprmaTableHeadingDocumentNo   = true;
				boolean exprmaTableHeadingDocumentDate = true;
				boolean exprmaClearBtn                 = true;
				boolean exprmaOkBtn                    = true;
				boolean exprmaCancelBtn                = true;
				boolean exprmaCloseBtn                 = true;
				
				boolean actMethod = actRmaSerialNumberTxtField==exprmaSerialNumberTxtField && actRmaQuantityTxtField==exprmaQuantityTxtField  && actRmaAddBtn==exprmaAddBtn
									 && actRmaNumberofItemsLabel==exprmaNumberofItemsLabel && actRmaNumberofItemsLabel==exprmaTableHeadingRMA
									 && actRmaTableHeadingDocumentNo==exprmaTableHeadingDocumentNo && actRmaTableHeadingDocumentDate==exprmaTableHeadingDocumentDate
									 && actRmaClearBtn==exprmaClearBtn && actRmaOkBtn==exprmaOkBtn && actRmaCancelBtn==exprmaCancelBtn && actRmaCloseBtn==exprmaCloseBtn;
				
				String actResult = Boolean.toString(actMethod);
				
				excelReader.setCellData(xlfile, xlSheetName, 353, 8, actResult.toUpperCase());
					
				System.out.println("Rma Serial Number Text Field 	   : " + actRmaSerialNumberTxtField	    +   "  Value Expected : " + exprmaSerialNumberTxtField);
				System.out.println("Rma Qty Field              	 	   : " + actRmaQuantityTxtField		    +   "  Value Expected : " + exprmaQuantityTxtField);
				System.out.println("Rma Add Button 					   : " + actRmaAddBtn				    +   "  Value Expected : " + exprmaAddBtn);
				System.out.println("Rma Number Of Items 			   : " + actRmaNumberofItemsLabel	    +   "  Value Expected : " + exprmaNumberofItemsLabel);
				System.out.println("Rma Table heading Rma  			   : " + actRmaTableHeadingRMA		    +   "  Value Expected : " + exprmaTableHeadingRMA);
				System.out.println("Rma Table Heading Document Number  : " + actRmaTableHeadingDocumentNo   +   "  Value Expected : " + exprmaTableHeadingDocumentNo);
				System.out.println("Rma Table Heading Document Date    : " + actRmaTableHeadingDocumentDate +   "  Value Expected : " + exprmaTableHeadingDocumentDate);
				System.out.println("Rma Clear Button                   : " + actRmaClearBtn				    +   "  Value Expected : " + exprmaClearBtn);
				System.out.println("Rma Ok Button                      : " + actRmaOkBtn					+   "  Value Expected : " + exprmaOkBtn);
				System.out.println("Rma Cancel Button                  : " + actRmaCancelBtn				+   "  Value Expected : " + exprmaCancelBtn);
				System.out.println("Rma Close Button  				   : " + actRmaCloseBtn				    +   "  Value Expected : " + exprmaCloseBtn);
							
				if(actMethod==true  && actrmaInwardPopRmaNoList.equalsIgnoreCase(exprmaInwardPopRmaNoList))
				{
					System.out.println("***Test Pass: RMA Popup Screen Appeared with all the Options***");
					excelReader.setCellData(xlfile, xlSheetName, 353, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("***Test Fail: RMA Popup Screen NOT Appeared with all the Options***");
					excelReader.setCellData(xlfile, xlSheetName, 353, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage().substring(0, 50);
				excelReader.setExceptionInExcel(xlfile, xlSheetName, 353, 10, e.getMessage());
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				return false;
			}
		}
	  
	  
	  
	  public boolean checkEditOpeningStocksNewVoucherRMAAddButtonOnRmaItemQtyUpdate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	  {	
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaAddBtn));
				rmaAddBtn.click();
				
				getWaitForAlert();
				
				String actAlert=getAlert().getText();
				String expAlert=excelReader.getCellData(xlSheetName, 356, 7);
				
				excelReader.setCellData(xlfile, xlSheetName, 356, 8, actAlert);
				
				System.out.println("Alert On Clicking Add With Empty Inputs   : "+actAlert	   +"  Value Expected : "+expAlert);
				
				getAlert().accept();
				
				if(actAlert.equalsIgnoreCase(expAlert))
				{
					System.out.println("***Test Pass: RMA Popup Screen Appeared with all the Options***");
					excelReader.setCellData(xlfile, xlSheetName, 355, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("***Test Fail: RMA Popup Screen NOT Appeared with all the Options***");
					excelReader.setCellData(xlfile, xlSheetName, 355, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage().substring(0, 50);
				excelReader.setExceptionInExcel(xlfile, xlSheetName, 355, 10, e.getMessage());
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				return false;
			}
		}
	  
	  

	  public boolean checkEditOpeningStocksNewVoucherRMAOkButtonOnRmaItemQtyUpdate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	  {	
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaOkBtn));
				rmaOkBtn.click();
				
				getWaitForAlert();
				
				String actAlertOnOK=getAlert().getText();
				
				String expAlertOnOK=excelReader.getCellData(xlSheetName, 358, 7);
				
				excelReader.setCellData(xlfile, xlSheetName, 358, 8, actAlertOnOK);
			
		        System.out.println("Test Pass : alert Dipalyed : " + actAlertOnOK               + " Value Expected : " + expAlertOnOK);
				
				getAlert().dismiss();
				
				if(actAlertOnOK.equalsIgnoreCase(expAlertOnOK))
				{
					System.out.println("***Test Pass: RMA Popup Screen Appeared with all the Options***");
					excelReader.setCellData(xlfile, xlSheetName, 357, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("***Test Fail: RMA Popup Screen NOT Appeared with all the Options***");
					excelReader.setCellData(xlfile, xlSheetName, 357, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage().substring(0, 50);
				excelReader.setExceptionInExcel(xlfile, xlSheetName, 357, 10, e.getMessage());
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				return false;
			}
		}
	  

	  public boolean checkEditOpeningStocksNewVoucherRMAClearButtonOnRmaItemQtyUpdate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	  {	
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaTableRow1ClearBtn));
				rmaTableRow1ClearBtn.click();
				
				//rmaTableRow1Column1.getText().equalsIgnoreCase("RmaR@#1")
				
				boolean actRmavalueR1=rmaTableRow1Column1.getText().isEmpty();
				
				boolean expRmavalueR1=true;
	
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaClearBtn));
				rmaClearBtn.click();
				
				boolean actRmavalueR2=rmaTableRow2Column1.getText().isEmpty();
				
				boolean expRmavalueR2=true;
				
				boolean actRmavalueR3=rmaTableRow3Column1.getText().isEmpty();
				
				boolean expRmavalueR3=true;
				
				boolean actRmavalueR4=rmaTableRow4Column1.getText().isEmpty();
				
				boolean expRmavalueR4=true;
				
				boolean actRmavalueR5=rmaTableRow5Column1.getText().isEmpty();
				
				boolean expRmavalueR5=true;
				
				boolean actMethod = actRmavalueR1==expRmavalueR1 && actRmavalueR2==expRmavalueR2 && actRmavalueR3==expRmavalueR3
									&& actRmavalueR4==expRmavalueR4 && actRmavalueR5==expRmavalueR5;
				
				String actResult = Boolean.toString(actMethod);
				
				excelReader.setCellData(xlfile, xlSheetName, 359, 8, actResult.toUpperCase());
				
				System.out.println("RmavalueR1 Value Actual : " +actRmavalueR1 + " Value Expected : " + expRmavalueR1 );
				System.out.println("RmavalueR2 Value Actual : " +actRmavalueR2 + " Value Expected : " + expRmavalueR2 );
				System.out.println("RmavalueR3 Value Actual : " +actRmavalueR3 + " Value Expected : " + expRmavalueR3 );
				System.out.println("RmavalueR4 Value Actual : " +actRmavalueR4 + " Value Expected : " + expRmavalueR4 );
				System.out.println("RmavalueR5 Value Actual : " +actRmavalueR5 + " Value Expected : " + expRmavalueR5 );
				
				if(actMethod==true)
				{
					System.out.println("***Test Pass: RMA Popup Screen Appeared with all the Options***");
					excelReader.setCellData(xlfile, xlSheetName, 359, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("***Test Fail: RMA Popup Screen NOT Appeared with all the Options***");
					excelReader.setCellData(xlfile, xlSheetName, 359, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage().substring(0, 50);
				excelReader.setExceptionInExcel(xlfile, xlSheetName, 359, 10, e.getMessage());
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				return false;
			}
		}
	  
	  
	  
	  public boolean checkEditOpeningStocksNewVoucherAddingNewSerialNumbersOnRmaItemQtyUpdate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	  {	
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaSerialNumberTxtField));
				rmaSerialNumberTxtField.sendKeys(excelReader.getCellData(xlSheetName, 360, 6));
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaAddBtn));
				rmaAddBtn.click();
						
				String  actRmaRow1=rma_EnterRMA.getAttribute("value");
				String  expRmaRow1=excelReader.getCellData(xlSheetName, 361, 7);
				
				excelReader.setCellData(xlfile, xlSheetName, 361, 8, actRmaRow1);
				
				
				int rmaInwardPopRmaNoListCount = rmaInwardPopRmaNoList.size();
				
				System.err.println("rmaInwardPopRmaNoList  : "+rmaInwardPopRmaNoListCount);
				
				ArrayList<String> rmaInwardPopRmaNoListArray = new ArrayList<String>();
				
				for(int i=1;i<rmaInwardPopRmaNoListCount;i++)
				{
					String data=rmaInwardPopRmaNoList.get(i).getAttribute("data-value");
					rmaInwardPopRmaNoListArray.add(data);
				}
				
				System.err.println("rmaInwardPopRmaNoListArray : "+rmaInwardPopRmaNoListArray);
				
				String actrmaInwardPopRmaNoList = rmaInwardPopRmaNoListArray.toString();
				String exprmaInwardPopRmaNoList = excelReader.getCellData(xlSheetName, 362, 7);
				
				excelReader.setCellData(xlfile, xlSheetName, 362, 8, actrmaInwardPopRmaNoList);
				
				System.out.println("rmaInwardPopRmaNoList  Value Actual  : " + actrmaInwardPopRmaNoList + " Value Expected : " + exprmaInwardPopRmaNoList);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaOkBtn));
				rmaOkBtn.click();
				
				
				if(actRmaRow1.equalsIgnoreCase(expRmaRow1) && actrmaInwardPopRmaNoList.equalsIgnoreCase(exprmaInwardPopRmaNoList))
				{
					System.out.println("***Test Pass: RMA Popup Screen Appeared with all the Options***");
					excelReader.setCellData(xlfile, xlSheetName, 360, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("***Test Fail: RMA Popup Screen NOT Appeared with all the Options***");
					excelReader.setCellData(xlfile, xlSheetName, 360, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage().substring(0, 50);
				excelReader.setExceptionInExcel(xlfile, xlSheetName, 360, 10, e.getMessage());
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				return false;
			}
		}
	  

		
	  public boolean checkEditOpeningStocksNewStockItemInFourthRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	  {
			
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
			
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_3rdColumn));
			select4thRow_3rdColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 363, 6));
			enter_Quantity.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.click();
			enter_Rate.clear();
			enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 364, 6));
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_3rdColumn));
			String act1            = select4thRow_3rdColumn.getText();
			String act2            = select4thRow_4thColumn.getText();
			String act3            = select4thRow_5thColumn.getText();
		
			String exp1,exp2,exp3,exp4;
			
			exp1                   = excelReader.getCellData(xlSheetName, 364, 7);
			exp2                   = excelReader.getCellData(xlSheetName, 365, 7);
			exp3                   = excelReader.getCellData(xlSheetName, 366, 7);
			
			excelReader.setCellData(xlfile, xlSheetName, 364, 8, act1);
			excelReader.setCellData(xlfile, xlSheetName, 365, 8, act1);
			excelReader.setCellData(xlfile, xlSheetName, 366, 8, act1);
		
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	        String docno=documentNumberTxt.getAttribute("value");
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			boolean actVoucherSaveMessageWithDocumentNo  = checkVoucherSavingMessage(docno);
			boolean expVoucherSaveMessageWithDocumentNo  = true;
			
			String actResult = Boolean.toString(actVoucherSaveMessageWithDocumentNo);
			
			excelReader.setCellData(xlfile, xlSheetName, 363, 8, actResult.toUpperCase());
			
			System.out.println("Voucher Saving Message With Document No :  " + actVoucherSaveMessageWithDocumentNo + " Value Expected : "+ expVoucherSaveMessageWithDocumentNo);
			
			if(act1.equalsIgnoreCase(exp1) && act2.equalsIgnoreCase(exp2)
					&& act3.equalsIgnoreCase(exp3) && actVoucherSaveMessageWithDocumentNo==expVoucherSaveMessageWithDocumentNo)
			{
				System.out.println("Test Pass : Voucher Saved Successfully");
								
				excelReader.setCellData(xlfile, xlSheetName, 363, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Voucher NOT Saved Successfully");
							
				excelReader.setCellData(xlfile, xlSheetName, 363, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage().substring(0, 50);
			excelReader.setExceptionInExcel(xlfile, xlSheetName, 363, 10, e.getMessage());
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		}
			                         
	  }
	  
	  
	  
	  
	  
	  
	  
	  public boolean checkOpeningStocksNewUpdateVoucherOnClickPreviousInEntryPage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	  {
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
		
			try
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
				previousBtn.click();
				
				boolean loading=checkLoadingMessage();
				
				System.out.println("VoucherLoadingMessage  : "+loading +" Value Expected : "+"TRUE");
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
				documentNumberTxt.click();
				
				String actdocNumber,expdocNumber;
				
				actdocNumber=documentNumberTxt.getAttribute("value");
				expdocNumber=excelReader.getCellData(xlSheetName, 368, 7);
				
				excelReader.setCellData(xlfile, xlSheetName, 368, 8, actdocNumber);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
				wareHouseTxt.click();
		
				String actOsVoucherWarehouse=wareHouseTxt.getAttribute("value");
				String expOsVoucherWarehouse=excelReader.getCellData(xlSheetName, 369, 7);
				
				excelReader.setCellData(xlfile, xlSheetName, 369, 8, actOsVoucherWarehouse);
						
				
				/*Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_footerExpandBtn));
				new_footerExpandBtn.click();*/
				
				
				/*String actOsVoucherItemR1,actOsVoucherUnitsR1,actOsVoucherQtyR1,actOsVoucherRateR1,actOsVoucherGrossR1,actOsVoucherBatchR1;
				String actOsVoucherItemR2,actOsVoucherUnitsR2,actOsVoucherQtyR2,actOsVoucherRateR2,actOsVoucherGrossR2,actOsVoucherBinR2;
				String actOsVoucherItemR3,actOsVoucherUnitsR3,actOsVoucherQtyR3,actOsVoucherRateR3,actOsVoucherGrossR3,actOsVoucherRMAR3;
				String actOsVoucherItemR4,actOsVoucherUnitsR4,actOsVoucherQtyR4,actOsVoucherRateR4,actOsVoucherGrossR4,actOsVoucherBatchR4;*/
				
				String actOsVoucherFooterQty,actOsVoucherFooterGross,actOsVoucherFooterNet;
				
		
				/*String expOsVoucherItemR1,expOsVoucherUnitsR1,expOsVoucherQtyR1,expOsVoucherRateR1,expOsVoucherGrossR1,expOsVoucherBatchR1;
				String expOsVoucherItemR2,expOsVoucherUnitsR2,expOsVoucherQtyR2,expOsVoucherRateR2,expOsVoucherGrossR2,expOsVoucherBinR2;
				String expOsVoucherItemR3,expOsVoucherUnitsR3,expOsVoucherQtyR3,expOsVoucherRateR3,expOsVoucherGrossR3,expOsVoucherRMAR3;
				String expOsVoucherItemR4,expOsVoucherUnitsR4,expOsVoucherQtyR4,expOsVoucherRateR4,expOsVoucherGrossR4,expOsVoucherBatchR4;*/
				
				String expOsVoucherFooterQty,expOsVoucherFooterGross,expOsVoucherFooterNet;
		
			
				/*expOsVoucherItemR1="BATCH BR ITEM";
				expOsVoucherUnitsR1="Dozs";
				expOsVoucherQtyR1="5.00";
				expOsVoucherRateR1="9.00";
				expOsVoucherGrossR1="45.00";
				expOsVoucherBatchR1="OSHYDBR1";
				
				expOsVoucherItemR2="FIFO COGS ITEM";
				expOsVoucherUnitsR2="Dozs";
				expOsVoucherQtyR2="1.00";
				expOsVoucherRateR2="12.00";
				expOsVoucherGrossR2="12.00";
				expOsVoucherBinR2="Bin4";
				
				expOsVoucherItemR3="WA COGS ITEM";
				expOsVoucherUnitsR3="Pcs";
				expOsVoucherQtyR3="5.00";
				expOsVoucherRateR3="20.00";
				expOsVoucherGrossR3="100.00";
				expOsVoucherRMAR3="Hyd@OS1,Hyd@OS2,Hyd@OS3,Hyd@OS4,Hyd@OS5";
				
				expOsVoucherItemR4="STD RATE COGS ITEM";
				expOsVoucherUnitsR4="Dozs";
				expOsVoucherQtyR4="5.00";
				expOsVoucherRateR4="9.00";
				expOsVoucherGrossR4="45.00";
				//expOsVoucherBatchR4="OSHWA2";*/
				
				expOsVoucherFooterQty=excelReader.getCellData(xlSheetName, 371, 7);
				expOsVoucherFooterGross=excelReader.getCellData(xlSheetName, 372, 7);
				expOsVoucherFooterNet=excelReader.getCellData(xlSheetName, 373, 7);
				
				
				
				
				
				System.out.println(netAmount.getText());
				System.out.println(QtyAmount.getText());
				System.out.println(GrossAmount.getText());
				
				
				/*actOsVoucherItemR1=select1stRow_1stColumn.getText();
				actOsVoucherUnitsR1=select1stRow_2ndColumn.getText();
				actOsVoucherQtyR1=select1stRow_3rdColumn.getText();
				actOsVoucherRateR1=select1stRow_4thColumn.getText();
				actOsVoucherGrossR1=select1stRow_5thColumn.getText();
				actOsVoucherBatchR1=select1stRow_6thColumn.getText();
				
				actOsVoucherItemR2=select2ndRow_1stColumn.getText();
				actOsVoucherUnitsR2=select2ndRow_2ndColumn.getText();
				actOsVoucherQtyR2=select2ndRow_3rdColumn.getText();
				actOsVoucherRateR2=select2ndRow_4thColumn.getText();
				actOsVoucherGrossR2=select2ndRow_5thColumn.getText();
				actOsVoucherBinR2=select2ndRow_7thColumn.getText();
				
				actOsVoucherItemR3=select3rdRow_1stColumn.getText();
				actOsVoucherUnitsR3=select3rdRow_2ndColumn.getText();
				actOsVoucherQtyR3=select3rdRow_3rdColumn.getText();
				actOsVoucherRateR3=select3rdRow_4thColumn.getText();
				actOsVoucherGrossR3=select3rdRow_5thColumn.getText();
				actOsVoucherRMAR3=select3rdRow_9thColumn.getText();
				
				actOsVoucherItemR4=select4thRow_1stColumn.getText();
				actOsVoucherUnitsR4=select4thRow_2ndColumn.getText();
				actOsVoucherQtyR4=select4thRow_3rdColumn.getText();
				actOsVoucherRateR4=select4thRow_4thColumn.getText();
				actOsVoucherGrossR4=select4thRow_5thColumn.getText();
				actOsVoucherBatchR4=select4thRow_6thColumn.getText();*/
				
				actOsVoucherFooterQty=QtyAmount.getText();
				actOsVoucherFooterGross=GrossAmount.getText();
				actOsVoucherFooterNet=netAmount.getText();
				
				excelReader.setCellData(xlfile, xlSheetName, 371, 8, actOsVoucherFooterQty);
				excelReader.setCellData(xlfile, xlSheetName, 372, 8, actOsVoucherFooterGross);
				excelReader.setCellData(xlfile, xlSheetName, 373, 8, actOsVoucherFooterNet);
				
				int voucherGridBodyListCount = voucherGridBodyList.size();
				 
				 ArrayList<String> voucherGridBodyListArray = new ArrayList<String>();
				 
				 for(int i=0;i<voucherGridBodyListCount;i++)
				 {
					 if(i==8)
					 {
						 String data ="Expiry Date";
						 voucherGridBodyListArray.add(data);
					 }
					 else
					 {
						 String data = voucherGridBodyList.get(i).getText();
						 voucherGridBodyListArray.add(data);
					 }
				 }
				 
				 String actvoucherGridBodyList=voucherGridBodyListArray.toString();
				 
				 String expvoucherGridBodyList=excelReader.getCellData(xlSheetName, 370, 7);
				 
				 excelReader.setCellData(xlfile, xlSheetName, 370, 8, actvoucherGridBodyList);
				 
				 System.out.println("voucherGridBodyList Actual   : " + actvoucherGridBodyList);
				 System.out.println("voucherGridBodyList Expected : " + expvoucherGridBodyList);
			
				
				 System.out.println("osdocNumber                 :  " + actdocNumber  +"   " + expdocNumber);
		        
		         
		         System.out.println("osVoucherWarehouse          :  " + actOsVoucherWarehouse +"     " + expOsVoucherWarehouse);
		         System.out.println("osVoucherFooterQty          :  " + actOsVoucherFooterQty  +"   " + expOsVoucherFooterQty);
		         System.out.println("osVoucherFooterGross        :  " + actOsVoucherFooterGross +"   " + expOsVoucherFooterGross);
		         System.out.println("osVoucherFooterNet          :  " + actOsVoucherFooterNet +"   " + expOsVoucherFooterNet);
				
				
		         /*System.out.println("First Row Item Name         :  " + actOsVoucherItemR1  +"   " + expOsVoucherItemR1);
		         System.out.println("First Row Units Name        :  " + actOsVoucherUnitsR1 +"   " + expOsVoucherUnitsR1);
		         System.out.println("First Row Qty Name          :  " + actOsVoucherQtyR1 +"     " + expOsVoucherQtyR1);
		         System.out.println("First Row Rate Name         :  " + actOsVoucherRateR1  +"   " + expOsVoucherRateR1);
		         System.out.println("First Row Gross Name        :  " + actOsVoucherGrossR1 +"   " + expOsVoucherGrossR1);
		         System.out.println("First Row Batch Name        :  " + actOsVoucherBatchR1 +"   " + expOsVoucherBatchR1);
		         
		         System.out.println("Second Row Item Name         :  " + actOsVoucherItemR2  +"   " + expOsVoucherItemR2);
		         System.out.println("Second Row Units Name        :  " + actOsVoucherUnitsR2 +"   " + expOsVoucherUnitsR2);
		         System.out.println("Second Row Qty Name          :  " + actOsVoucherQtyR2 +"     " + expOsVoucherQtyR2);
		         System.out.println("Second Row Rate Name         :  " + actOsVoucherRateR2  +"   " + expOsVoucherRateR2);
		         System.out.println("Second Row Gross Name        :  " + actOsVoucherGrossR2 +"   " + expOsVoucherGrossR2);
		         System.out.println("Second Row Bin Name          :  " + actOsVoucherBinR2 +"       " + expOsVoucherBinR2);
		         
		         
		         System.out.println("Third Row Item Name         :  " + actOsVoucherItemR3  +"   " + expOsVoucherItemR3);
		         System.out.println("Third Row Units Name        :  " + actOsVoucherUnitsR3 +"   " + expOsVoucherUnitsR3);
		         System.out.println("Third Row Qty Name          :  " + actOsVoucherQtyR3 +"     " + expOsVoucherQtyR3);
		         System.out.println("Third Row Rate Name         :  " + actOsVoucherRateR3  +"   " + expOsVoucherRateR3);
		         System.out.println("Third Row Gross Name        :  " + actOsVoucherGrossR3 +"   " + expOsVoucherGrossR3);
		         System.out.println("Third Row RMA Name          :  " + actOsVoucherRMAR3 +"     " + expOsVoucherRMAR3);
		         
		         System.out.println("Fourth Row Item Name         :  " + actOsVoucherItemR4  +"   " + expOsVoucherItemR4);
		         System.out.println("Fourth Row Units Name        :  " + actOsVoucherUnitsR4 +"   " + expOsVoucherUnitsR4);
		         System.out.println("Fourth Row Qty Name          :  " + actOsVoucherQtyR4 +"     " + expOsVoucherQtyR4);
		         System.out.println("Fourth Row Rate Name         :  " + actOsVoucherRateR4  +"   " + expOsVoucherRateR4);
		         System.out.println("Fourth Row Gross Name        :  " + actOsVoucherGrossR4 +"   " + expOsVoucherGrossR4);*/
		     
				
				
				if(actdocNumber.equalsIgnoreCase(expdocNumber)
						&& actOsVoucherWarehouse.equalsIgnoreCase(expOsVoucherWarehouse)
						
						&& actOsVoucherFooterQty.equalsIgnoreCase(expOsVoucherFooterQty) && actOsVoucherFooterGross.equalsIgnoreCase(expOsVoucherFooterGross) 
						&& actOsVoucherFooterNet.equalsIgnoreCase(expOsVoucherFooterNet) && actvoucherGridBodyList.equalsIgnoreCase(expvoucherGridBodyList)
						
						/*&&   actOsVoucherItemR1.equalsIgnoreCase(expOsVoucherItemR1) && actOsVoucherUnitsR1.equalsIgnoreCase(expOsVoucherUnitsR1)
						&&   actOsVoucherQtyR1.equalsIgnoreCase(expOsVoucherQtyR1) && actOsVoucherRateR1.equalsIgnoreCase(expOsVoucherRateR1)
						&&   actOsVoucherGrossR1.equalsIgnoreCase(expOsVoucherGrossR1)  && actOsVoucherBatchR1.equalsIgnoreCase(expOsVoucherBatchR1)
						
						&&   actOsVoucherItemR2.equalsIgnoreCase(expOsVoucherItemR2) && actOsVoucherUnitsR2.equalsIgnoreCase(expOsVoucherUnitsR2)
						&&   actOsVoucherQtyR2.equalsIgnoreCase(expOsVoucherQtyR2) && actOsVoucherRateR2.equalsIgnoreCase(expOsVoucherRateR2)
						&&   actOsVoucherGrossR2.equalsIgnoreCase(expOsVoucherGrossR2)  && actOsVoucherBinR2.equalsIgnoreCase(expOsVoucherBinR2)
						
						&&   actOsVoucherItemR3.equalsIgnoreCase(expOsVoucherItemR3) && actOsVoucherUnitsR3.equalsIgnoreCase(expOsVoucherUnitsR3)
						&&   actOsVoucherQtyR3.equalsIgnoreCase(expOsVoucherQtyR3) && actOsVoucherRateR3.equalsIgnoreCase(expOsVoucherRateR3)
						&&   actOsVoucherGrossR3.equalsIgnoreCase(expOsVoucherGrossR3)  && actOsVoucherRMAR3.equalsIgnoreCase(expOsVoucherRMAR3)
						
						&&   actOsVoucherItemR4.equalsIgnoreCase(expOsVoucherItemR4) && actOsVoucherUnitsR4.equalsIgnoreCase(expOsVoucherUnitsR4)
						&&   actOsVoucherQtyR4.equalsIgnoreCase(expOsVoucherQtyR4) && actOsVoucherRateR4.equalsIgnoreCase(expOsVoucherRateR4)
						&&   actOsVoucherGrossR4.equalsIgnoreCase(expOsVoucherGrossR4) */)
				{
					System.out.println("Test Pass : Saved Data is As Expected");
				
					excelReader.setCellData(xlfile, xlSheetName, 367, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Saved Data is NOT As Expected");
					
					excelReader.setCellData(xlfile, xlSheetName, 367, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage().substring(0, 50);
				excelReader.setExceptionInExcel(xlfile, xlSheetName, 367, 10, e.getMessage());
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				return false;
			}
		}	
	  
	  
	  
	  public boolean checkOpeningStocksNewVoucherCopyAndPasteFromClipBoardOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	  {
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
				toggleBtn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(copyToClipBoardOption));
				copyToClipBoardOption.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_newBtn));
				new_newBtn.click();
			
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
				toggleBtn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pasteFromClipBoardOption));
				pasteFromClipBoardOption.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
				documentNumberTxt.click();
				
				String actdocNumber,expdocNumber;
				
				actdocNumber=documentNumberTxt.getAttribute("value");
				expdocNumber=excelReader.getCellData(xlSheetName, 375, 7);
				
				excelReader.setCellData(xlfile, xlSheetName, 375, 8, actdocNumber);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
				wareHouseTxt.click();
		
				String actOsVoucherWarehouse=wareHouseTxt.getAttribute("value");
				String expOsVoucherWarehouse=excelReader.getCellData(xlSheetName, 376, 7);
				
				excelReader.setCellData(xlfile, xlSheetName, 376, 8, actOsVoucherWarehouse);
						
				
				/*Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_footerExpandBtn));
				new_footerExpandBtn.click();*/
				
				
				/*String actOsVoucherItemR1,actOsVoucherUnitsR1,actOsVoucherQtyR1,actOsVoucherRateR1,actOsVoucherGrossR1,actOsVoucherBatchR1;
				String actOsVoucherItemR2,actOsVoucherUnitsR2,actOsVoucherQtyR2,actOsVoucherRateR2,actOsVoucherGrossR2,actOsVoucherBinR2;
				String actOsVoucherItemR3,actOsVoucherUnitsR3,actOsVoucherQtyR3,actOsVoucherRateR3,actOsVoucherGrossR3,actOsVoucherRMAR3;
				String actOsVoucherItemR4,actOsVoucherUnitsR4,actOsVoucherQtyR4,actOsVoucherRateR4,actOsVoucherGrossR4,actOsVoucherBatchR4;*/
				
				String actOsVoucherFooterQty,actOsVoucherFooterGross,actOsVoucherFooterNet;
				
		
				/*String expOsVoucherItemR1,expOsVoucherUnitsR1,expOsVoucherQtyR1,expOsVoucherRateR1,expOsVoucherGrossR1,expOsVoucherBatchR1;
				String expOsVoucherItemR2,expOsVoucherUnitsR2,expOsVoucherQtyR2,expOsVoucherRateR2,expOsVoucherGrossR2,expOsVoucherBinR2;
				String expOsVoucherItemR3,expOsVoucherUnitsR3,expOsVoucherQtyR3,expOsVoucherRateR3,expOsVoucherGrossR3,expOsVoucherRMAR3;
				String expOsVoucherItemR4,expOsVoucherUnitsR4,expOsVoucherQtyR4,expOsVoucherRateR4,expOsVoucherGrossR4,expOsVoucherBatchR4;*/
				
				String expOsVoucherFooterQty,expOsVoucherFooterGross,expOsVoucherFooterNet;
		
			
				/*expOsVoucherItemR1="BATCH BR ITEM";
				expOsVoucherUnitsR1="Dozs";
				expOsVoucherQtyR1="5.00";
				expOsVoucherRateR1="9.00";
				expOsVoucherGrossR1="45.00";
				expOsVoucherBatchR1="OSHYDBR1";
				
				expOsVoucherItemR2="FIFO COGS ITEM";
				expOsVoucherUnitsR2="Dozs";
				expOsVoucherQtyR2="1.00";
				expOsVoucherRateR2="12.00";
				expOsVoucherGrossR2="12.00";
				expOsVoucherBinR2="Bin4";
				
				expOsVoucherItemR3="WA COGS ITEM";
				expOsVoucherUnitsR3="Pcs";
				expOsVoucherQtyR3="5.00";
				expOsVoucherRateR3="20.00";
				expOsVoucherGrossR3="100.00";
				expOsVoucherRMAR3="Hyd@OS1,Hyd@OS2,Hyd@OS3,Hyd@OS4,Hyd@OS5";
				
				expOsVoucherItemR4="STD RATE COGS ITEM";
				expOsVoucherUnitsR4="Dozs";
				expOsVoucherQtyR4="5.00";
				expOsVoucherRateR4="9.00";
				expOsVoucherGrossR4="45.00";
				//expOsVoucherBatchR4="OSHWA2";*/
				
				expOsVoucherFooterQty=excelReader.getCellData(xlSheetName, 378, 7);
				expOsVoucherFooterGross=excelReader.getCellData(xlSheetName, 379, 7);
				expOsVoucherFooterNet=excelReader.getCellData(xlSheetName, 380, 7);
				
				
				
				
				
				System.out.println(netAmount.getText());
				System.out.println(QtyAmount.getText());
				System.out.println(GrossAmount.getText());
				
				
				/*actOsVoucherItemR1=select1stRow_1stColumn.getText();
				actOsVoucherUnitsR1=select1stRow_2ndColumn.getText();
				actOsVoucherQtyR1=select1stRow_3rdColumn.getText();
				actOsVoucherRateR1=select1stRow_4thColumn.getText();
				actOsVoucherGrossR1=select1stRow_5thColumn.getText();
				actOsVoucherBatchR1=select1stRow_6thColumn.getText();
				
				actOsVoucherItemR2=select2ndRow_1stColumn.getText();
				actOsVoucherUnitsR2=select2ndRow_2ndColumn.getText();
				actOsVoucherQtyR2=select2ndRow_3rdColumn.getText();
				actOsVoucherRateR2=select2ndRow_4thColumn.getText();
				actOsVoucherGrossR2=select2ndRow_5thColumn.getText();
				actOsVoucherBinR2=select2ndRow_7thColumn.getText();
				
				actOsVoucherItemR3=select3rdRow_1stColumn.getText();
				actOsVoucherUnitsR3=select3rdRow_2ndColumn.getText();
				actOsVoucherQtyR3=select3rdRow_3rdColumn.getText();
				actOsVoucherRateR3=select3rdRow_4thColumn.getText();
				actOsVoucherGrossR3=select3rdRow_5thColumn.getText();
				actOsVoucherRMAR3=select3rdRow_9thColumn.getText();
				
				actOsVoucherItemR4=select4thRow_1stColumn.getText();
				actOsVoucherUnitsR4=select4thRow_2ndColumn.getText();
				actOsVoucherQtyR4=select4thRow_3rdColumn.getText();
				actOsVoucherRateR4=select4thRow_4thColumn.getText();
				actOsVoucherGrossR4=select4thRow_5thColumn.getText();
				actOsVoucherBatchR4=select4thRow_6thColumn.getText();*/
				
				actOsVoucherFooterQty=QtyAmount.getText();
				actOsVoucherFooterGross=GrossAmount.getText();
				actOsVoucherFooterNet=netAmount.getText();
				
				excelReader.setCellData(xlfile, xlSheetName, 378, 8, actOsVoucherFooterQty);
				excelReader.setCellData(xlfile, xlSheetName, 379, 8, actOsVoucherFooterGross);
				excelReader.setCellData(xlfile, xlSheetName, 380, 8, actOsVoucherFooterNet);
				
				int voucherGridBodyListCount = voucherGridBodyList.size();
				 
				 ArrayList<String> voucherGridBodyListArray = new ArrayList<String>();
				 
				 for(int i=0;i<voucherGridBodyListCount;i++)
				 {
					 if(i==8)
					 {
						 String data ="Expiry Date";
						 voucherGridBodyListArray.add(data);
					 }
					 else
					 {
						 String data = voucherGridBodyList.get(i).getText();
						 voucherGridBodyListArray.add(data);
					 }
				 }
				 
				 String actvoucherGridBodyList=voucherGridBodyListArray.toString();
				 
				 String expvoucherGridBodyList=excelReader.getCellData(xlSheetName, 377, 7);
				 
				 excelReader.setCellData(xlfile, xlSheetName, 377, 8, actvoucherGridBodyList);
				 
				 System.out.println("voucherGridBodyList Actual   : " + actvoucherGridBodyList);
				 System.out.println("voucherGridBodyList Expected : " + expvoucherGridBodyList);
			
				
				 System.out.println("osdocNumber                 :  " + actdocNumber  +"   " + expdocNumber);
		        
		         
		         System.out.println("osVoucherWarehouse          :  " + actOsVoucherWarehouse +"     " + expOsVoucherWarehouse);
		         System.out.println("osVoucherFooterQty          :  " + actOsVoucherFooterQty  +"   " + expOsVoucherFooterQty);
		         System.out.println("osVoucherFooterGross        :  " + actOsVoucherFooterGross +"   " + expOsVoucherFooterGross);
		         System.out.println("osVoucherFooterNet          :  " + actOsVoucherFooterNet +"   " + expOsVoucherFooterNet);
				
				
		         /*System.out.println("First Row Item Name         :  " + actOsVoucherItemR1  +"   " + expOsVoucherItemR1);
		         System.out.println("First Row Units Name        :  " + actOsVoucherUnitsR1 +"   " + expOsVoucherUnitsR1);
		         System.out.println("First Row Qty Name          :  " + actOsVoucherQtyR1 +"     " + expOsVoucherQtyR1);
		         System.out.println("First Row Rate Name         :  " + actOsVoucherRateR1  +"   " + expOsVoucherRateR1);
		         System.out.println("First Row Gross Name        :  " + actOsVoucherGrossR1 +"   " + expOsVoucherGrossR1);
		         System.out.println("First Row Batch Name        :  " + actOsVoucherBatchR1 +"   " + expOsVoucherBatchR1);
		         
		         System.out.println("Second Row Item Name         :  " + actOsVoucherItemR2  +"   " + expOsVoucherItemR2);
		         System.out.println("Second Row Units Name        :  " + actOsVoucherUnitsR2 +"   " + expOsVoucherUnitsR2);
		         System.out.println("Second Row Qty Name          :  " + actOsVoucherQtyR2 +"     " + expOsVoucherQtyR2);
		         System.out.println("Second Row Rate Name         :  " + actOsVoucherRateR2  +"   " + expOsVoucherRateR2);
		         System.out.println("Second Row Gross Name        :  " + actOsVoucherGrossR2 +"   " + expOsVoucherGrossR2);
		         System.out.println("Second Row Bin Name          :  " + actOsVoucherBinR2 +"       " + expOsVoucherBinR2);
		         
		         
		         System.out.println("Third Row Item Name         :  " + actOsVoucherItemR3  +"   " + expOsVoucherItemR3);
		         System.out.println("Third Row Units Name        :  " + actOsVoucherUnitsR3 +"   " + expOsVoucherUnitsR3);
		         System.out.println("Third Row Qty Name          :  " + actOsVoucherQtyR3 +"     " + expOsVoucherQtyR3);
		         System.out.println("Third Row Rate Name         :  " + actOsVoucherRateR3  +"   " + expOsVoucherRateR3);
		         System.out.println("Third Row Gross Name        :  " + actOsVoucherGrossR3 +"   " + expOsVoucherGrossR3);
		         System.out.println("Third Row RMA Name          :  " + actOsVoucherRMAR3 +"     " + expOsVoucherRMAR3);
		         
		         System.out.println("Fourth Row Item Name         :  " + actOsVoucherItemR4  +"   " + expOsVoucherItemR4);
		         System.out.println("Fourth Row Units Name        :  " + actOsVoucherUnitsR4 +"   " + expOsVoucherUnitsR4);
		         System.out.println("Fourth Row Qty Name          :  " + actOsVoucherQtyR4 +"     " + expOsVoucherQtyR4);
		         System.out.println("Fourth Row Rate Name         :  " + actOsVoucherRateR4  +"   " + expOsVoucherRateR4);
		         System.out.println("Fourth Row Gross Name        :  " + actOsVoucherGrossR4 +"   " + expOsVoucherGrossR4);*/
		     
				
				
				if(actdocNumber.equalsIgnoreCase(expdocNumber)
						&& actOsVoucherWarehouse.equalsIgnoreCase(expOsVoucherWarehouse)
						
						&& actOsVoucherFooterQty.equalsIgnoreCase(expOsVoucherFooterQty) && actOsVoucherFooterGross.equalsIgnoreCase(expOsVoucherFooterGross) 
						&& actOsVoucherFooterNet.equalsIgnoreCase(expOsVoucherFooterNet) && actvoucherGridBodyList.equalsIgnoreCase(expvoucherGridBodyList)
						
						/*&&   actOsVoucherItemR1.equalsIgnoreCase(expOsVoucherItemR1) && actOsVoucherUnitsR1.equalsIgnoreCase(expOsVoucherUnitsR1)
						&&   actOsVoucherQtyR1.equalsIgnoreCase(expOsVoucherQtyR1) && actOsVoucherRateR1.equalsIgnoreCase(expOsVoucherRateR1)
						&&   actOsVoucherGrossR1.equalsIgnoreCase(expOsVoucherGrossR1)  && actOsVoucherBatchR1.equalsIgnoreCase(expOsVoucherBatchR1)
						
						&&   actOsVoucherItemR2.equalsIgnoreCase(expOsVoucherItemR2) && actOsVoucherUnitsR2.equalsIgnoreCase(expOsVoucherUnitsR2)
						&&   actOsVoucherQtyR2.equalsIgnoreCase(expOsVoucherQtyR2) && actOsVoucherRateR2.equalsIgnoreCase(expOsVoucherRateR2)
						&&   actOsVoucherGrossR2.equalsIgnoreCase(expOsVoucherGrossR2)  && actOsVoucherBinR2.equalsIgnoreCase(expOsVoucherBinR2)
						
						&&   actOsVoucherItemR3.equalsIgnoreCase(expOsVoucherItemR3) && actOsVoucherUnitsR3.equalsIgnoreCase(expOsVoucherUnitsR3)
						&&   actOsVoucherQtyR3.equalsIgnoreCase(expOsVoucherQtyR3) && actOsVoucherRateR3.equalsIgnoreCase(expOsVoucherRateR3)
						&&   actOsVoucherGrossR3.equalsIgnoreCase(expOsVoucherGrossR3)  && actOsVoucherRMAR3.equalsIgnoreCase(expOsVoucherRMAR3)
						
						&&   actOsVoucherItemR4.equalsIgnoreCase(expOsVoucherItemR4) && actOsVoucherUnitsR4.equalsIgnoreCase(expOsVoucherUnitsR4)
						&&   actOsVoucherQtyR4.equalsIgnoreCase(expOsVoucherQtyR4) && actOsVoucherRateR4.equalsIgnoreCase(expOsVoucherRateR4)
						&&   actOsVoucherGrossR4.equalsIgnoreCase(expOsVoucherGrossR4) */)
				{
					System.out.println("Test Pass : Copy And Paste From ClipBoard Working");
					excelReader.setCellData(xlfile, xlSheetName, 374, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Copy And Paste From ClipBoard NOT Working");
					excelReader.setCellData(xlfile, xlSheetName, 374, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage().substring(0, 50);
				excelReader.setExceptionInExcel(xlfile, xlSheetName, 374, 10, e.getMessage());
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				return false;
			}
		}
	  
	  
	  
	  public boolean checkOpeningStocksNewVoucherInputBatchAndBinPopupOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	  {
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_6thColumn));
			select1stRow_6thColumn.click();
			
            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.click();
			enter_Batch.clear();
			enter_Batch.sendKeys(excelReader.getCellData(xlSheetName, 381, 6));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			select1stRow_8thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
			enter_Expirydate.click();
			enter_Expirydate.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_5thColumn));
			select2ndRow_5thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.click();
			enter_Gross.sendKeys(Keys.TAB);
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchTxt));

			  boolean actBinSearchTxt                = binSearchTxt.isDisplayed();
			  boolean actBinSearchBtn                = binSearchBtn.isDisplayed();
			  //boolean actBinAlternateCategory        = binAlternateCategoryCheckBtn.isDisplayed();
			  boolean actBinAutoAllocateBtn          = binAutoAllocateBtn.isDisplayed();
			  boolean actBinPickBtn                  = binPickBtn.isDisplayed();
			  boolean actBinCancelBtn                = binCancelBtn.isDisplayed();
			  boolean actBinOkBtn                    = binOkBtn.isEnabled();
			  
			  boolean expBinSearchTxt                = true;
			  boolean expBinSearchBtn                = true;
			  boolean expBinAlternateCategory        = true;
			  boolean expBinAutoAllocateBtn          = true;
			  boolean expBinPickBtn                  = true;
			  boolean expBinCancelBtn                = true;
			  boolean expBinOkBtn                    = true;
			  
			  System.out.println("Bin Search Value Actual                :  " + actBinSearchTxt +         " Value Expected : " + expBinSearchTxt);
			  System.out.println("Bin Search Btn Value Actual            :  " + actBinSearchBtn +         " Value Expected : " + expBinSearchBtn);
			  //System.out.println("Bin Alternate Category Value Actual    :  " + actBinAlternateCategory + " Value Expected : " + expBinAlternateCategory);
			  System.out.println("Bin Auto Allocate Btn Value Actual     :  " + actBinAutoAllocateBtn +   " Value Expected : " + expBinAutoAllocateBtn);
			  System.out.println("Bin Pick Btn Value Actual              :  " + actBinPickBtn +           " Value Expected : " + expBinPickBtn);
			  System.out.println("Bin Cancel Btn Value Actual            :  " + actBinCancelBtn +         " Value Expected : " + expBinCancelBtn);
			  System.out.println("Bin Ok Btn Value Actual                :  " + actBinOkBtn +             " Value Expected : " + expBinOkBtn);
				
			
			  /*String actBinGroupNameR1          = binselect1stRow_2ndColumn.getText();
				
				String actBinNameR2               = binselect2ndRow_2ndColumn.getText();
				String actBinStockR2              = binselect2ndRow_3rdColumn.getText();
				String actBinCapacityR2           = binselect2ndRow_4thColumn.getText();
				String actBinLoadR2               = binselect2ndRow_5thColumn.getText();
				String actBinFreeSpaceR2          = binselect2ndRow_6thColumn.getText();
				String actBinFreeQtyR2            = binselect2ndRow_7thColumn.getText();
				String actBinToBeAllocatedR2      = binselect2ndRow_8thColumn.getText();
							
				String actBinNameR3               = binselect3rdRow_2ndColumn.getText();
				String actBinStockR3              = binselect3rdRow_3rdColumn.getText();
				String actBinCapacityR3           = binselect3rdRow_4thColumn.getText();
				String actBinLoadR3               = binselect3rdRow_5thColumn.getText();
				String actBinFreeSpaceR3          = binselect3rdRow_6thColumn.getText();
				String actBinFreeQtyR3            = binselect3rdRow_7thColumn.getText();
				String actBinToBeAllocatedR3      = binselect3rdRow_8thColumn.getText();*/
				
			  String actBinTotalQty             = binTotalQty.getAttribute("value");
			  String actBinBaseUom              = binBaseUOM.getText();
			  String actBinBalanceQty           = binBalanceTxt.getAttribute("value");
			  String actBinSum                  = binSumInward.getText();
			
				/*String expBinGroupNameR1          = "BG1";
				
				String expBinNameR2               = "Bin4";
				String expBinStockR2              = "0.00";
				String expBinCapacityR2           = "90.00";
				String expBinLoadR2               = "12.00";
				String expBinFreeSpaceR2          = "78.00";
				String expBinFreeQtyR2            = "78.00";
				String expBinToBeAllocatedR2      = "0.00";
				
				String expBinNameR3               = "Bin5";
				String expBinStockR3              = "0.00";
				String expBinCapacityR3           = "98.00";
				String expBinLoadR3               = "0.00";
				String expBinFreeSpaceR3          = "98.00";
				String expBinFreeQtyR3            = "98.00";
				String expBinToBeAllocatedR3      = "0.00";*/
				
				
			  String expBinTotalQty               = excelReader.getCellData(xlSheetName, 383, 7);
			  String expBinBaseUom                = excelReader.getCellData(xlSheetName, 384, 7);
			  String expBinBalanceQty             = excelReader.getCellData(xlSheetName, 385, 7);
			  String expBinSum                    = excelReader.getCellData(xlSheetName, 386, 7);
		        
			  excelReader.setCellData(xlfile, xlSheetName, 383, 8, actBinTotalQty);
			  excelReader.setCellData(xlfile, xlSheetName, 384, 8, actBinBaseUom);
			  excelReader.setCellData(xlfile, xlSheetName, 385, 8, actBinBalanceQty);
			  excelReader.setCellData(xlfile, xlSheetName, 386, 8, actBinSum);
			  
			  int binInwardGridListCount = binInwardGridList.size();
			  
			  ArrayList<String> binInwardGridListArray = new ArrayList<String>();
			  
			  for(int i=0;i<binInwardGridListCount;i++)
			  {
				  String data = binInwardGridList.get(i).getText();
				  binInwardGridListArray.add(data);
			  }	
		        	
		        
			  String actbinInwardGridList=binInwardGridListArray.toString();
			  
			  String expbinInwardGridList=excelReader.getCellData(xlSheetName, 382, 7);
			  
			  excelReader.setCellData(xlfile, xlSheetName, 382, 8, actbinInwardGridList);
			  
			  System.out.println("ActbinInwardGridList : " + actbinInwardGridList);
			  System.out.println("ExpbinInwardGridList : " + expbinInwardGridList);
			  
			  boolean actMethod = actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn 
					  /*&& actBinAlternateCategory==expBinAlternateCategory*/ 
					  && actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn;
		        	
			  String actResult = Boolean.toString(actMethod);
		        
			  excelReader.setCellData(xlfile, xlSheetName, 381, 8, actResult.toUpperCase());
			  
					
			  
			  	/*System.out.println("First Row Group Name        :  " + actBinGroupNameR1 +        "  Value Expected : "  + expBinGroupNameR1);
					
				System.out.println("Second Row Bin Name         :  " + actBinNameR2 +             "  Value Expected : "  + expBinNameR2);
				System.out.println("Second Row Stock            :  " + actBinStockR2 +            "  Value Expected : "  + expBinStockR2);
				System.out.println("Second Row Capacity         :  " + actBinCapacityR2 +         "  Value Expected : "  + expBinCapacityR2);
				System.out.println("Second Row Load             :  " + actBinLoadR2 +             "  Value Expected : "  + expBinLoadR2);
				System.out.println("Second Row Free Space       :  " + actBinFreeSpaceR2 +        "  Value Expected : "  + expBinFreeSpaceR2);
				System.out.println("Second Row Free Qty         :  " + actBinFreeQtyR2 +          "  Value Expected : "  + expBinFreeQtyR2);
				System.out.println("Second Row To Be Allocated  :  " + actBinToBeAllocatedR2 +    "  Value Expected : "  + expBinToBeAllocatedR2);
				
				System.out.println("Third Row Bin Name          :  " + actBinNameR3 +             "  Value Expected : "  + expBinNameR3);
				System.out.println("Third Row Stock             :  " + actBinStockR3 +            "  Value Expected : "  + expBinStockR3);
				System.out.println("Third Row Capacity          :  " + actBinCapacityR3 +         "  Value Expected : "  + expBinCapacityR3);
				System.out.println("Third Row Load              :  " + actBinLoadR3 +             "  Value Expected : "  + expBinLoadR3);
				System.out.println("Third Row Free Space        :  " + actBinFreeSpaceR3 +        "  Value Expected : "  + expBinFreeSpaceR3);
				System.out.println("Third Row Free Qty          :  " + actBinFreeQtyR3 +          "  Value Expected : "  + expBinFreeQtyR3);
				System.out.println("Third Row To Be Allocated   :  " + actBinToBeAllocatedR3 +    "  Value Expected : "  + expBinToBeAllocatedR3);*/
				
			  System.out.println("Bin Total Qty               :  " +actBinTotalQty +            "  Value Expected : "  + expBinTotalQty);
			  System.out.println("Bin Base Uom                :  " +actBinBaseUom +             "  Value Expected : "  + expBinBaseUom);
			  System.out.println("Bin Balance Txt             :  " +actBinBalanceQty +          "  Value Expected : "  + expBinBalanceQty);
				
			  System.out.println("Bin Total To Be Adjusted    :  " + actBinSum +                "  Value Expected : "  + expBinSum);
						
			  if(/*actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn && actBinAlternateCategory==expBinAlternateCategory 
						&& actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn
						&& actBinOkBtn==expBinOkBtn
						
						&& actBinGroupNameR1.equalsIgnoreCase(expBinGroupNameR1)
						
						&& actBinNameR2.equalsIgnoreCase(expBinNameR2) && actBinStockR2.equalsIgnoreCase(expBinStockR2) 
						&& actBinCapacityR2.equalsIgnoreCase(expBinCapacityR2) && actBinLoadR2.equalsIgnoreCase(expBinLoadR2)
						&& actBinFreeSpaceR2.equalsIgnoreCase(expBinFreeSpaceR2) && actBinFreeQtyR2.equalsIgnoreCase(expBinFreeQtyR2)
						&& actBinToBeAllocatedR2.equalsIgnoreCase(expBinToBeAllocatedR2)
						
						&& actBinNameR3.equalsIgnoreCase(expBinNameR3) && actBinStockR3.equalsIgnoreCase(expBinStockR3) 
						&& actBinCapacityR3.equalsIgnoreCase(expBinCapacityR3) && actBinLoadR3.equalsIgnoreCase(expBinLoadR3)
						&& actBinFreeSpaceR3.equalsIgnoreCase(expBinFreeSpaceR3) && actBinFreeQtyR3.equalsIgnoreCase(expBinFreeQtyR3)
						&& actBinToBeAllocatedR3.equalsIgnoreCase(expBinToBeAllocatedR3)*/

						actMethod==true && actbinInwardGridList.equalsIgnoreCase(expbinInwardGridList)
						
						&& actBinTotalQty.equalsIgnoreCase(expBinTotalQty) && actBinBaseUom.equalsIgnoreCase(expBinBaseUom) 
						&& actBinBalanceQty.equalsIgnoreCase(expBinBalanceQty)
						
						&& actBinSum.equalsIgnoreCase(expBinSum))
			{
				System.out.println("Test Pass : Bin Popup options Are As Expected");
				excelReader.setCellData(xlfile, xlSheetName, 381, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Bin Popup options Are NOT As Expected");
				excelReader.setCellData(xlfile, xlSheetName, 381, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage().substring(0, 50);
			excelReader.setExceptionInExcel(xlfile, xlSheetName, 381, 10, e.getMessage());
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		}
	  }
		
		
	  public boolean checkOpeningStocksNewVoucherCopyAndPasteThroughAllocateQtyInBinPage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	  {
			
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
		
		 try
		 {
			 
				
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
			 binAutoAllocateBtn.click();
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binselect2ndRow_8thColumn));
			 String actbinselect2ndRow_8thColumn = binselect2ndRow_8thColumn.getText();
			 String expbinselect2ndRow_8thColumn = excelReader.getCellData(xlSheetName, 388, 7);
			 
			 excelReader.setCellData(xlfile, xlSheetName, 388, 8, actbinselect2ndRow_8thColumn);
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binselect3rdRow_8thColumn));
			 String actbinselect3rdRow_8thColumn = binselect3rdRow_8thColumn.getText();
			 String expbinselect3rdRow_8thColumn = excelReader.getCellData(xlSheetName, 389, 7);
			 
			 excelReader.setCellData(xlfile, xlSheetName, 389, 8, actbinselect3rdRow_8thColumn);
			 
			 System.out.println("binselect2ndRow_8thColumn Value Actual   : " + actbinselect2ndRow_8thColumn  + " Value Expected : " + expbinselect2ndRow_8thColumn);
			 System.out.println("binselect3rdRow_8thColumn Value Actual   : " + actbinselect3rdRow_8thColumn  + " Value Expected : " + expbinselect3rdRow_8thColumn);
			  
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
			 binOkBtn.click();
				
			String actBinName      = select2ndRow_7thColumn.getText();
			String expBinName      = excelReader.getCellData(xlSheetName, 390, 7);
			
			excelReader.setCellData(xlfile, xlSheetName, 390, 8, actBinName);
			
			System.out.println("Bin Column in Voucher Value Actual          : " + actBinName +              " Value Exepected  : " + expBinName);
			 
			 
			 if(actbinselect2ndRow_8thColumn.equalsIgnoreCase(expbinselect2ndRow_8thColumn)
					 && actbinselect3rdRow_8thColumn.equalsIgnoreCase(expbinselect3rdRow_8thColumn))
			 {
				 System.out.println("Test Pass : Bin Popup options Are As Expected");
				 excelReader.setCellData(xlfile, xlSheetName, 387, 9, resPass);
				 
				
				 return true;
			 }
			 else
			 {
				 System.out.println("Test Fail : Bin Popup options Are NOT As Expected");
				 excelReader.setCellData(xlfile, xlSheetName, 387, 9, resFail);
				
				
				 return false;
			 }
		 }
		 catch (Exception e) 
		 {
			 String exception =e.getMessage().substring(0, 50);
			 excelReader.setExceptionInExcel(xlfile, xlSheetName, 387, 10, e.getMessage());
			 System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			 return false;
		 }
	  }
	  
	  
	  
	  public boolean checkOpeningStocksNewSaveInputRMAPopupScreen() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{	
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_5thColumn));
				select3rdRow_5thColumn.click();
		
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
				enter_Gross.click();
				enter_Gross.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaScreenTitle));
				
				boolean actRmaSerialNumberTxtField     = rmaSerialNumberTxtField.isDisplayed();
				boolean actRmaQuantityTxtField         = rmaQuantityTxtField.isDisplayed();
				boolean actRmaAddBtn                   = rmaAddBtn.isDisplayed();
				boolean actRmaNumberofItemsLabel       = rmaNumberofItemsLabel.isDisplayed();
				boolean actRmaTableHeadingRMA          = rmaTableHeadingRMA.isDisplayed();
				boolean actRmaTableHeadingDocumentNo   = rmaTableHeadingDocumentNo.isDisplayed();
				boolean actRmaTableHeadingDocumentDate = rmaTableHeadingDocumentDate.isDisplayed();
				boolean actRmaClearBtn                 = rmaClearBtn.isDisplayed();
				boolean actRmaOkBtn                    = rmaOkBtn.isDisplayed();
				boolean actRmaCancelBtn                = rmaCancelBtn.isDisplayed();
				boolean actRmaCloseBtn                 = rmaCloseBtn.isDisplayed();
				
				boolean exprmaSerialNumberTxtField     = true;
				boolean exprmaQuantityTxtField         = true;
				boolean exprmaAddBtn                   = true;
				boolean exprmaNumberofItemsLabel       = true;
				boolean exprmaTableHeadingRMA          = true;
				boolean exprmaTableHeadingDocumentNo   = true;
				boolean exprmaTableHeadingDocumentDate = true;
				boolean exprmaClearBtn                 = true;
				boolean exprmaOkBtn                    = true;
				boolean exprmaCancelBtn                = true;
				boolean exprmaCloseBtn                 = true;
					
				System.out.println("Rma Serial Number Text Field 	   : " + actRmaSerialNumberTxtField	    +   "  Value Expected : " + exprmaSerialNumberTxtField);
				System.out.println("Rma Qty Field              	 	   : " + actRmaQuantityTxtField		    +   "  Value Expected : " + exprmaQuantityTxtField);
				System.out.println("Rma Add Button 					   : " + actRmaAddBtn				    +   "  Value Expected : " + exprmaAddBtn);
				System.out.println("Rma Number Of Items 			   : " + actRmaNumberofItemsLabel	    +   "  Value Expected : " + exprmaNumberofItemsLabel);
				System.out.println("Rma Table heading Rma  			   : " + actRmaTableHeadingRMA		    +   "  Value Expected : " + exprmaTableHeadingRMA);
				System.out.println("Rma Table Heading Document Number  : " + actRmaTableHeadingDocumentNo   +   "  Value Expected : " + exprmaTableHeadingDocumentNo);
				System.out.println("Rma Table Heading Document Date    : " + actRmaTableHeadingDocumentDate +   "  Value Expected : " + exprmaTableHeadingDocumentDate);
				System.out.println("Rma Clear Button                   : " + actRmaClearBtn				    +   "  Value Expected : " + exprmaClearBtn);
				System.out.println("Rma Ok Button                      : " + actRmaOkBtn					+   "  Value Expected : " + exprmaOkBtn);
				System.out.println("Rma Cancel Button                  : " + actRmaCancelBtn				+   "  Value Expected : " + exprmaCancelBtn);
				System.out.println("Rma Close Button  				   : " + actRmaCloseBtn				    +   "  Value Expected : " + exprmaCloseBtn);
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaSerialNumberTxtField));
				rmaSerialNumberTxtField.click();
				rmaSerialNumberTxtField.sendKeys(excelReader.getCellData(xlSheetName, 391, 6));
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaAddBtn));
				rmaAddBtn.click();
						
				// Actual
				String  actRmaRow1=rma_EnterRMA.getAttribute("value");
				String 	actRmaRow2=rmaTableRow2Column1.getText();
				String 	actRmaRow3=rmaTableRow3Column1.getText();
				
				// Expected
				String  expRmaRow1=excelReader.getCellData(xlSheetName, 392, 7);
				String 	expRmaRow2=excelReader.getCellData(xlSheetName, 393, 7);
				String 	expRmaRow3=excelReader.getCellData(xlSheetName, 394, 7);
				
				excelReader.setCellData(xlfile, xlSheetName, 392, 8, actRmaRow1);
				excelReader.setCellData(xlfile, xlSheetName, 393, 8, actRmaRow2);
				excelReader.setCellData(xlfile, xlSheetName, 394, 8, actRmaRow3);
				
				System.out.println("************************************* checkRmaWithSerialNumbersNotCompletely *********************************");
				
				System.out.println("Rma Row 1 Serial Number   : "+actRmaRow1	   +"  Value Expected : "+expRmaRow1);
				System.out.println("Rma Row 2 Serial Number   : "+actRmaRow2	   +"  Value Expected : "+expRmaRow2);
				System.out.println("Rma Row 3 Serial Number   : "+actRmaRow3	   +"  Value Expected : "+expRmaRow3);
				
				if(actRmaSerialNumberTxtField==exprmaSerialNumberTxtField && actRmaQuantityTxtField==exprmaQuantityTxtField  && actRmaAddBtn==exprmaAddBtn
						&& actRmaNumberofItemsLabel==exprmaNumberofItemsLabel && actRmaNumberofItemsLabel==exprmaTableHeadingRMA
						&& actRmaTableHeadingDocumentNo==exprmaTableHeadingDocumentNo && actRmaTableHeadingDocumentDate==exprmaTableHeadingDocumentDate
						&& actRmaClearBtn==exprmaClearBtn && actRmaOkBtn==exprmaOkBtn && actRmaCancelBtn==exprmaCancelBtn && actRmaCloseBtn==exprmaCloseBtn)
				{
					System.out.println("***Test Pass: RMA Popup Screen Appeared with all the Options***");
					excelReader.setCellData(xlfile, xlSheetName, 391, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("***Test Fail: RMA Popup Screen NOT Appeared with all the Options***");
					excelReader.setCellData(xlfile, xlSheetName, 391, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage().substring(0, 50);
				excelReader.setExceptionInExcel(xlfile, xlSheetName, 391, 10, e.getMessage());
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				return false;
			}
		}

	  
	  public boolean checkOpeningStocksNewOkButtonRMAPopupScreenBatchBinAndRmaColumn() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{	
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaOkBtn));
				rmaOkBtn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
				enter_RMA.sendKeys(Keys.TAB);
				
				String actOsVoucherBatchR1=select1stRow_6thColumn.getText();
				String expOsVoucherBatchR1=excelReader.getCellData(xlSheetName, 396, 7);
	
				String actOsVoucherBinR2=select2ndRow_7thColumn.getText();
				String expOsVoucherBinR2=excelReader.getCellData(xlSheetName, 397, 7);
	
				String actOsVoucherRMAR3=select3rdRow_9thColumn.getText();
				String expOsVoucherRMAR3=excelReader.getCellData(xlSheetName, 398, 7);	
					
				System.out.println("Rma Serial Number Text Field 	   : " + actOsVoucherBatchR1	    +   "  Value Expected : " + expOsVoucherBatchR1);
				System.out.println("Rma Qty Field              	 	   : " + actOsVoucherBinR2		    +   "  Value Expected : " + expOsVoucherBinR2);
				System.out.println("Rma Add Button 					   : " + actOsVoucherRMAR3		    +   "  Value Expected : " + expOsVoucherRMAR3);
	
				excelReader.setCellData(xlfile, xlSheetName, 396, 8, actOsVoucherBatchR1);
				excelReader.setCellData(xlfile, xlSheetName, 397, 8, actOsVoucherBinR2);
				excelReader.setCellData(xlfile, xlSheetName, 398, 8, actOsVoucherRMAR3);
				
		
				
				if(actOsVoucherBatchR1.equalsIgnoreCase(expOsVoucherBatchR1) && actOsVoucherBinR2.equalsIgnoreCase(expOsVoucherBinR2)
						&& actOsVoucherRMAR3.equalsIgnoreCase(expOsVoucherRMAR3))
				{
					System.out.println("***Test Pass: RMA Popup Screen Appeared with all the Options***");
					excelReader.setCellData(xlfile, xlSheetName, 395, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("***Test Fail: RMA Popup Screen NOT Appeared with all the Options***");
					excelReader.setCellData(xlfile, xlSheetName, 395, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage().substring(0, 50);
				excelReader.setExceptionInExcel(xlfile, xlSheetName, 395, 10, e.getMessage());
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				return false;
			}
		}
	  
	  
	  
	  
	  
	  public boolean checkOpeningStocksNewVoucherSaveThroughCopyDocument() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
		  excelReader=new ExcelReader(POJOUtility.getExcelPath());
		  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
			
		  try
		  {
			
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	        String docno=documentNumberTxt.getAttribute("value");
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			boolean actVoucherSaveMessageWithDocumentNo  = checkVoucherSavingMessage(docno);
			boolean expVoucherSaveMessageWithDocumentNo  = true;
			
			String actResult = Boolean.toString(actVoucherSaveMessageWithDocumentNo);
			
			excelReader.setCellData(xlfile, xlSheetName, 399, 8, actResult.toUpperCase());
			
			System.out.println("Voucher Saving Message With Document No :  " + actVoucherSaveMessageWithDocumentNo + " Value Expected : "+ expVoucherSaveMessageWithDocumentNo);
			
			if(actVoucherSaveMessageWithDocumentNo==expVoucherSaveMessageWithDocumentNo)
			{
				System.out.println("Test Pass : Voucher Saved Successfully");

				
				excelReader.setCellData(xlfile, xlSheetName, 399, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Voucher NOT Saved Successfully");
			

				
				excelReader.setCellData(xlfile, xlSheetName, 399, 9, resFail);
				return false;
			}
		  }
		  catch (Exception e) 
		  {
			  String exception =e.getMessage().substring(0, 50);
			  excelReader.setExceptionInExcel(xlfile, xlSheetName, 399, 10, e.getMessage());
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		  }                        
		}
	  
	  
	  public boolean checkOpeningStocksNewSaveVoucherThroughCopyAndPasteFromVClipboardOnClickPreviousInEntryPage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	  {
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
		
			try
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
				previousBtn.click();
				
				boolean loading=checkLoadingMessage();
				
				System.out.println("VoucherLoadingMessage  : "+loading +" Value Expected : "+"TRUE");
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
				documentNumberTxt.click();
				
				String actdocNumber,expdocNumber;
				
				actdocNumber=documentNumberTxt.getAttribute("value");
				expdocNumber=excelReader.getCellData(xlSheetName, 401, 7);
				
				excelReader.setCellData(xlfile, xlSheetName, 401, 8, actdocNumber);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
				wareHouseTxt.click();
		
				String actOsVoucherWarehouse=wareHouseTxt.getAttribute("value");
				String expOsVoucherWarehouse=excelReader.getCellData(xlSheetName, 402, 7);
				
				excelReader.setCellData(xlfile, xlSheetName, 402, 8, actOsVoucherWarehouse);
						
				
				/*Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_footerExpandBtn));
				new_footerExpandBtn.click();*/
				
				
				/*String actOsVoucherItemR1,actOsVoucherUnitsR1,actOsVoucherQtyR1,actOsVoucherRateR1,actOsVoucherGrossR1,actOsVoucherBatchR1;
				String actOsVoucherItemR2,actOsVoucherUnitsR2,actOsVoucherQtyR2,actOsVoucherRateR2,actOsVoucherGrossR2,actOsVoucherBinR2;
				String actOsVoucherItemR3,actOsVoucherUnitsR3,actOsVoucherQtyR3,actOsVoucherRateR3,actOsVoucherGrossR3,actOsVoucherRMAR3;
				String actOsVoucherItemR4,actOsVoucherUnitsR4,actOsVoucherQtyR4,actOsVoucherRateR4,actOsVoucherGrossR4,actOsVoucherBatchR4;*/
				
				String actOsVoucherFooterQty,actOsVoucherFooterGross,actOsVoucherFooterNet;
				
		
				/*String expOsVoucherItemR1,expOsVoucherUnitsR1,expOsVoucherQtyR1,expOsVoucherRateR1,expOsVoucherGrossR1,expOsVoucherBatchR1;
				String expOsVoucherItemR2,expOsVoucherUnitsR2,expOsVoucherQtyR2,expOsVoucherRateR2,expOsVoucherGrossR2,expOsVoucherBinR2;
				String expOsVoucherItemR3,expOsVoucherUnitsR3,expOsVoucherQtyR3,expOsVoucherRateR3,expOsVoucherGrossR3,expOsVoucherRMAR3;
				String expOsVoucherItemR4,expOsVoucherUnitsR4,expOsVoucherQtyR4,expOsVoucherRateR4,expOsVoucherGrossR4,expOsVoucherBatchR4;*/
				
				String expOsVoucherFooterQty,expOsVoucherFooterGross,expOsVoucherFooterNet;
		
			
				/*expOsVoucherItemR1="BATCH BR ITEM";
				expOsVoucherUnitsR1="Dozs";
				expOsVoucherQtyR1="5.00";
				expOsVoucherRateR1="9.00";
				expOsVoucherGrossR1="45.00";
				expOsVoucherBatchR1="OSHYDBR1";
				
				expOsVoucherItemR2="FIFO COGS ITEM";
				expOsVoucherUnitsR2="Dozs";
				expOsVoucherQtyR2="1.00";
				expOsVoucherRateR2="12.00";
				expOsVoucherGrossR2="12.00";
				expOsVoucherBinR2="Bin4";
				
				expOsVoucherItemR3="WA COGS ITEM";
				expOsVoucherUnitsR3="Pcs";
				expOsVoucherQtyR3="5.00";
				expOsVoucherRateR3="20.00";
				expOsVoucherGrossR3="100.00";
				expOsVoucherRMAR3="Hyd@OS1,Hyd@OS2,Hyd@OS3,Hyd@OS4,Hyd@OS5";
				
				expOsVoucherItemR4="STD RATE COGS ITEM";
				expOsVoucherUnitsR4="Dozs";
				expOsVoucherQtyR4="5.00";
				expOsVoucherRateR4="9.00";
				expOsVoucherGrossR4="45.00";
				//expOsVoucherBatchR4="OSHWA2";*/
				
				expOsVoucherFooterQty=excelReader.getCellData(xlSheetName, 404, 7);
				expOsVoucherFooterGross=excelReader.getCellData(xlSheetName, 405, 7);
				expOsVoucherFooterNet=excelReader.getCellData(xlSheetName, 406, 7);
				
				
				
				
				
				System.out.println(netAmount.getText());
				System.out.println(QtyAmount.getText());
				System.out.println(GrossAmount.getText());
				
				
				/*actOsVoucherItemR1=select1stRow_1stColumn.getText();
				actOsVoucherUnitsR1=select1stRow_2ndColumn.getText();
				actOsVoucherQtyR1=select1stRow_3rdColumn.getText();
				actOsVoucherRateR1=select1stRow_4thColumn.getText();
				actOsVoucherGrossR1=select1stRow_5thColumn.getText();
				actOsVoucherBatchR1=select1stRow_6thColumn.getText();
				
				actOsVoucherItemR2=select2ndRow_1stColumn.getText();
				actOsVoucherUnitsR2=select2ndRow_2ndColumn.getText();
				actOsVoucherQtyR2=select2ndRow_3rdColumn.getText();
				actOsVoucherRateR2=select2ndRow_4thColumn.getText();
				actOsVoucherGrossR2=select2ndRow_5thColumn.getText();
				actOsVoucherBinR2=select2ndRow_7thColumn.getText();
				
				actOsVoucherItemR3=select3rdRow_1stColumn.getText();
				actOsVoucherUnitsR3=select3rdRow_2ndColumn.getText();
				actOsVoucherQtyR3=select3rdRow_3rdColumn.getText();
				actOsVoucherRateR3=select3rdRow_4thColumn.getText();
				actOsVoucherGrossR3=select3rdRow_5thColumn.getText();
				actOsVoucherRMAR3=select3rdRow_9thColumn.getText();
				
				actOsVoucherItemR4=select4thRow_1stColumn.getText();
				actOsVoucherUnitsR4=select4thRow_2ndColumn.getText();
				actOsVoucherQtyR4=select4thRow_3rdColumn.getText();
				actOsVoucherRateR4=select4thRow_4thColumn.getText();
				actOsVoucherGrossR4=select4thRow_5thColumn.getText();
				actOsVoucherBatchR4=select4thRow_6thColumn.getText();*/
				
				actOsVoucherFooterQty=QtyAmount.getText();
				actOsVoucherFooterGross=GrossAmount.getText();
				actOsVoucherFooterNet=netAmount.getText();
				
				excelReader.setCellData(xlfile, xlSheetName, 404, 8, actOsVoucherFooterQty);
				excelReader.setCellData(xlfile, xlSheetName, 405, 8, actOsVoucherFooterGross);
				excelReader.setCellData(xlfile, xlSheetName, 406, 8, actOsVoucherFooterNet);
				
				int voucherGridBodyListCount = voucherGridBodyList.size();
				 
				 ArrayList<String> voucherGridBodyListArray = new ArrayList<String>();
				 
				 for(int i=0;i<voucherGridBodyListCount;i++)
				 {
					 if(i==8)
					 {
						 String data ="Expiry Date";
						 voucherGridBodyListArray.add(data);
					 }
					 else
					 {
						 String data = voucherGridBodyList.get(i).getText();
						 voucherGridBodyListArray.add(data);
					 }
				 }
				 
				 String actvoucherGridBodyList=voucherGridBodyListArray.toString();
				 
				 String expvoucherGridBodyList=excelReader.getCellData(xlSheetName, 403, 7);
				 
				 excelReader.setCellData(xlfile, xlSheetName, 403, 8, actvoucherGridBodyList);
				 
				 System.out.println("voucherGridBodyList Actual   : " + actvoucherGridBodyList);
				 System.out.println("voucherGridBodyList Expected : " + expvoucherGridBodyList);
			
				
				 System.out.println("osdocNumber                 :  " + actdocNumber  +"   " + expdocNumber);
		        
		         
		         System.out.println("osVoucherWarehouse          :  " + actOsVoucherWarehouse +"     " + expOsVoucherWarehouse);
		         System.out.println("osVoucherFooterQty          :  " + actOsVoucherFooterQty  +"   " + expOsVoucherFooterQty);
		         System.out.println("osVoucherFooterGross        :  " + actOsVoucherFooterGross +"   " + expOsVoucherFooterGross);
		         System.out.println("osVoucherFooterNet          :  " + actOsVoucherFooterNet +"   " + expOsVoucherFooterNet);
				
				
		         /*System.out.println("First Row Item Name         :  " + actOsVoucherItemR1  +"   " + expOsVoucherItemR1);
		         System.out.println("First Row Units Name        :  " + actOsVoucherUnitsR1 +"   " + expOsVoucherUnitsR1);
		         System.out.println("First Row Qty Name          :  " + actOsVoucherQtyR1 +"     " + expOsVoucherQtyR1);
		         System.out.println("First Row Rate Name         :  " + actOsVoucherRateR1  +"   " + expOsVoucherRateR1);
		         System.out.println("First Row Gross Name        :  " + actOsVoucherGrossR1 +"   " + expOsVoucherGrossR1);
		         System.out.println("First Row Batch Name        :  " + actOsVoucherBatchR1 +"   " + expOsVoucherBatchR1);
		         
		         System.out.println("Second Row Item Name         :  " + actOsVoucherItemR2  +"   " + expOsVoucherItemR2);
		         System.out.println("Second Row Units Name        :  " + actOsVoucherUnitsR2 +"   " + expOsVoucherUnitsR2);
		         System.out.println("Second Row Qty Name          :  " + actOsVoucherQtyR2 +"     " + expOsVoucherQtyR2);
		         System.out.println("Second Row Rate Name         :  " + actOsVoucherRateR2  +"   " + expOsVoucherRateR2);
		         System.out.println("Second Row Gross Name        :  " + actOsVoucherGrossR2 +"   " + expOsVoucherGrossR2);
		         System.out.println("Second Row Bin Name          :  " + actOsVoucherBinR2 +"       " + expOsVoucherBinR2);
		         
		         
		         System.out.println("Third Row Item Name         :  " + actOsVoucherItemR3  +"   " + expOsVoucherItemR3);
		         System.out.println("Third Row Units Name        :  " + actOsVoucherUnitsR3 +"   " + expOsVoucherUnitsR3);
		         System.out.println("Third Row Qty Name          :  " + actOsVoucherQtyR3 +"     " + expOsVoucherQtyR3);
		         System.out.println("Third Row Rate Name         :  " + actOsVoucherRateR3  +"   " + expOsVoucherRateR3);
		         System.out.println("Third Row Gross Name        :  " + actOsVoucherGrossR3 +"   " + expOsVoucherGrossR3);
		         System.out.println("Third Row RMA Name          :  " + actOsVoucherRMAR3 +"     " + expOsVoucherRMAR3);
		         
		         System.out.println("Fourth Row Item Name         :  " + actOsVoucherItemR4  +"   " + expOsVoucherItemR4);
		         System.out.println("Fourth Row Units Name        :  " + actOsVoucherUnitsR4 +"   " + expOsVoucherUnitsR4);
		         System.out.println("Fourth Row Qty Name          :  " + actOsVoucherQtyR4 +"     " + expOsVoucherQtyR4);
		         System.out.println("Fourth Row Rate Name         :  " + actOsVoucherRateR4  +"   " + expOsVoucherRateR4);
		         System.out.println("Fourth Row Gross Name        :  " + actOsVoucherGrossR4 +"   " + expOsVoucherGrossR4);*/
		     
				
				
				if(actdocNumber.equalsIgnoreCase(expdocNumber)
						&& actOsVoucherWarehouse.equalsIgnoreCase(expOsVoucherWarehouse)
						
						&& actOsVoucherFooterQty.equalsIgnoreCase(expOsVoucherFooterQty) && actOsVoucherFooterGross.equalsIgnoreCase(expOsVoucherFooterGross) 
						&& actOsVoucherFooterNet.equalsIgnoreCase(expOsVoucherFooterNet) && actvoucherGridBodyList.equalsIgnoreCase(expvoucherGridBodyList)
						
						/*&&   actOsVoucherItemR1.equalsIgnoreCase(expOsVoucherItemR1) && actOsVoucherUnitsR1.equalsIgnoreCase(expOsVoucherUnitsR1)
						&&   actOsVoucherQtyR1.equalsIgnoreCase(expOsVoucherQtyR1) && actOsVoucherRateR1.equalsIgnoreCase(expOsVoucherRateR1)
						&&   actOsVoucherGrossR1.equalsIgnoreCase(expOsVoucherGrossR1)  && actOsVoucherBatchR1.equalsIgnoreCase(expOsVoucherBatchR1)
						
						&&   actOsVoucherItemR2.equalsIgnoreCase(expOsVoucherItemR2) && actOsVoucherUnitsR2.equalsIgnoreCase(expOsVoucherUnitsR2)
						&&   actOsVoucherQtyR2.equalsIgnoreCase(expOsVoucherQtyR2) && actOsVoucherRateR2.equalsIgnoreCase(expOsVoucherRateR2)
						&&   actOsVoucherGrossR2.equalsIgnoreCase(expOsVoucherGrossR2)  && actOsVoucherBinR2.equalsIgnoreCase(expOsVoucherBinR2)
						
						&&   actOsVoucherItemR3.equalsIgnoreCase(expOsVoucherItemR3) && actOsVoucherUnitsR3.equalsIgnoreCase(expOsVoucherUnitsR3)
						&&   actOsVoucherQtyR3.equalsIgnoreCase(expOsVoucherQtyR3) && actOsVoucherRateR3.equalsIgnoreCase(expOsVoucherRateR3)
						&&   actOsVoucherGrossR3.equalsIgnoreCase(expOsVoucherGrossR3)  && actOsVoucherRMAR3.equalsIgnoreCase(expOsVoucherRMAR3)
						
						&&   actOsVoucherItemR4.equalsIgnoreCase(expOsVoucherItemR4) && actOsVoucherUnitsR4.equalsIgnoreCase(expOsVoucherUnitsR4)
						&&   actOsVoucherQtyR4.equalsIgnoreCase(expOsVoucherQtyR4) && actOsVoucherRateR4.equalsIgnoreCase(expOsVoucherRateR4)
						&&   actOsVoucherGrossR4.equalsIgnoreCase(expOsVoucherGrossR4) */)
				{
					System.out.println("Test Pass : Saved Data is As Expected");
				
					excelReader.setCellData(xlfile, xlSheetName, 400, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Saved Data is NOT As Expected");
					
					excelReader.setCellData(xlfile, xlSheetName, 400, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage().substring(0, 50);
				excelReader.setExceptionInExcel(xlfile, xlSheetName, 400, 10, e.getMessage());
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				return false;
			}  
		}	
	  
	  
	  
	  public boolean checkOpeningStocksNewVoucherToDeleteOnClickOkButtonInAlertMessage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));
				new_DeleteBtn.click();
				
				getWaitForAlert();
				
				String actAlertMessage=getAlert().getText();
				
				String expAlertMessage=excelReader.getCellData(xlSheetName, 408, 7);
				
				excelReader.setCellData(xlfile, xlSheetName, 408, 8, actAlertMessage);
			
				System.out.println("Alert Message on Deleteing the Voucher :  "+actAlertMessage +"  "+expAlertMessage);
				
				getAlert().accept();
				
				boolean deleteMessage=checkEntryPageDeleteMessage();
				
				System.out.println("DeleteMesssage  : "+deleteMessage+" Value Expected : "+"TRUE");
				
				/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();*/
			
				if(actAlertMessage.contains(expAlertMessage) && deleteMessage==true)
				{
					System.out.println("Test Pass : Deleted Voucher");
					
					excelReader.setCellData(xlfile, xlSheetName, 407, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : NOT Deleted Voucher");
					
					excelReader.setCellData(xlfile, xlSheetName, 407, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage().substring(0, 50);
				excelReader.setExceptionInExcel(xlfile, xlSheetName, 407, 10, e.getMessage());
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				return false;
			}
		}
		
		
		
		// Copy document Screen Elements
		
		@FindBy(xpath="//input[@id='optCopyDocType']")
		private static WebElement cd_vouchertypeTxt;
		
		@FindBy(xpath="//select[@id='id_searchoncolumns']")
		private static WebElement cd_searchOnDropdown1;
		
		@FindBy(xpath="//div[@id='id_transaction_entry_container_others']//div[5]//select[1]")
		private static WebElement cd_searchOnDropdown2;
		
		@FindBy(xpath="//input[@id='srch_doc']")
		private static WebElement cd_searchTxt;
		
		@FindBy(xpath="//input[@id='id_transaction_entry_copydocument_refresh']")
		private static WebElement cd_refreshBtn;
		
		@FindBy(xpath="//input[@id='id_transaction_entry_copydocument_filter_togglebutton']")
		private static WebElement cd_filterBtn;
		
		@FindBy(xpath="//input[@id='copydoc_HeaderChkBox']")
		private static WebElement cd_HeaderChkBox;
		
		@FindBy(xpath="//tr[@id='tr_copydoc_voucher_1']//td//input")
		private static WebElement cd_FirstChkBox;
		
		@FindBy(xpath="//input[@id='id_chkclubsimilartxn']")
		private static WebElement cd_clubsimilarTransChkBox;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid1_buttonsrow']/div[3]/input")
		private static WebElement cd_SelectallBtn;
		
		@FindBy(xpath="//button[@id='btn_firstPage']")
		private static WebElement cd_firstBtn;
		
		@FindBy(xpath="//button[@id='btn_previousPage']")
		private static WebElement cd_PreviousBtn;
		
		@FindBy(xpath="//button[@id='input_pagenumber']")
		private static WebElement cd_PageNo;
		
		@FindBy(xpath="//button[@id='btn_nextPage']")
		private static WebElement cd_nextBtn; 
		
		@FindBy(xpath="//button[@id='btn_lastPage']")
		private static WebElement cd_LastBtn;
		
		@FindBy(xpath="//input[@id='id_transaction_copydoc_ok']")
		private static WebElement cd_OkBtn;
		
		@FindBy(xpath="//input[@id='id_transaction_copydoc_cancel']")
		private static WebElement cd_CancelBtn;
		
		
		// Gird 
		// row 1
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[1]")
		private static WebElement cd_IndexRow1;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[2]")
		private static WebElement cd_R1C2;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[3]")
		private static WebElement cd_R1C3;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[4]")
		private static WebElement cd_R1C4;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[5]")
		private static WebElement cd_R1C5;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[6]")
		private static WebElement cd_R1C6;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[7]")
		private static WebElement cd_R1C7;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[8]")
		private static WebElement cd_R1C8;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[9]")
		private static WebElement cd_R1C9;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[10]")
		private static WebElement cd_R1C10;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[11]")
		private static WebElement cd_R1C11;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[12]")
		private static WebElement cd_R1C12;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[13]")
		private static WebElement cd_R1C13;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[14]")
		private static WebElement cd_R1C14;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[15]")
		private static WebElement cd_R1C15;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[16]")
		private static WebElement cd_R1C16;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[17]")
		private static WebElement cd_R1C17;
		
		
		// row 2
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[1]")
		private static WebElement cd_IndexRow2;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[2]")
		private static WebElement cd_R2C2;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[3]")
		private static WebElement cd_R2C3;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[4]")
		private static WebElement cd_R2C4;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[5]")
		private static WebElement cd_R2C5;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[6]")
		private static WebElement cd_R2C6;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[7]")
		private static WebElement cd_R2C7;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[8]")
		private static WebElement cd_R2C8;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[9]")
		private static WebElement cd_R2C9;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[10]")
		private static WebElement cd_R2C10;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[11]")
		private static WebElement cd_R2C11;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[12]")
		private static WebElement cd_R2C12;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[13]")
		private static WebElement cd_R2C13;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[14]")
		private static WebElement cd_R2C14;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[15]")
		private static WebElement cd_R2C15;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[16]")
		private static WebElement cd_R2C16;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[17]")
		private static WebElement cd_R2C17;

		// row 3
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[1]")
		private static WebElement cd_IndexRow3;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[2]")
		private static WebElement cd_R3C2;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[3]")
		private static WebElement cd_R3C3;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[4]")
		private static WebElement cd_R3C4;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[5]")
		private static WebElement cd_R3C5;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[6]")
		private static WebElement cd_R3C6;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[7]")
		private static WebElement cd_R3C7;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[8]")
		private static WebElement cd_R3C8;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[9]")
		private static WebElement cd_R3C9;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[10]")
		private static WebElement cd_R3C10;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[11]")
		private static WebElement cd_R3C11;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[12]")
		private static WebElement cd_R3C12;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[13]")
		private static WebElement cd_R3C13;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[14]")
		private static WebElement cd_R3C14;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[15]")
		private static WebElement cd_R3C15;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[16]")
		private static WebElement cd_R3C16;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[17]")
		private static WebElement cd_R3C17;
		
		
		// row 4		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[1]")
		private static WebElement cd_IndexRow4;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[2]")
		private static WebElement cd_R4C2;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[3]")
		private static WebElement cd_R4C3;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[4]")
		private static WebElement cd_R4C4;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[5]")
		private static WebElement cd_R4C5;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[6]")
		private static WebElement cd_R4C6;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[7]")
		private static WebElement cd_R4C7;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[8]")
		private static WebElement cd_R4C8;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[9]")
		private static WebElement cd_R4C9;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[10]")
		private static WebElement cd_R4C10;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[11]")
		private static WebElement cd_R4C11;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[12]")
		private static WebElement cd_R4C12;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[13]")
		private static WebElement cd_R4C13;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[14]")
		private static WebElement cd_R4C14;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[15]")
		private static WebElement cd_R4C15;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[16]")
		private static WebElement cd_R4C16;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[17]")
		private static WebElement cd_R4C17;
		
		
		// row 5
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[1]")
		private static WebElement cd_IndexRow5;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[2]")
		private static WebElement cd_R5C2;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[3]")
		private static WebElement cd_R5C3;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[4]")
		private static WebElement cd_R5C4;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[5]")
		private static WebElement cd_R5C5;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[6]")
		private static WebElement cd_R5C6;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[7]")
		private static WebElement cd_R5C7;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[8]")
		private static WebElement cd_R5C8;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[9]")
		private static WebElement cd_R5C9;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[10]")
		private static WebElement cd_R5C10;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[11]")
		private static WebElement cd_R5C11;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[12]")
		private static WebElement cd_R5C12;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[13]")
		private static WebElement cd_R5C13;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[14]")
		private static WebElement cd_R5C14;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[15]")
		private static WebElement cd_R5C15;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[16]")
		private static WebElement cd_R5C16;
		
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[17]")
		private static WebElement cd_R5C17;
		

		public boolean checkOpeningStocksNewCopyDocumentOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
				String actdocNumber=documentNumberTxt.getAttribute("value");
				String expdocNumber=excelReader.getCellData(xlSheetName, 410, 7);
				
				excelReader.setCellData(xlfile, xlSheetName, 410, 8, actdocNumber);
				
				System.out.println("documnet Number : "+actdocNumber+""+expdocNumber);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
				toggleBtn.click();
				
				boolean actCopydocument=copyDocumentOption.isDisplayed();
				
				boolean expCopydocument=true;
				
				String actResult = Boolean.toString(actCopydocument);
				
				excelReader.setCellData(xlfile, xlSheetName, 409, 8, actResult.toUpperCase());
				
				System.out.println("Copy Document Option : "+actCopydocument+""+expCopydocument);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(copyDocumentOption));
				
				if(actdocNumber.equalsIgnoreCase(expdocNumber) && actCopydocument==expCopydocument)
				{
					System.out.println("Test Pass : Copy Document Option Displayed");
					
					excelReader.setCellData(xlfile, xlSheetName, 409, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Copy Document Option NOT Displayed");
					
					excelReader.setCellData(xlfile, xlSheetName, 409, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage().substring(0, 50);
				excelReader.setExceptionInExcel(xlfile, xlSheetName, 409, 10, e.getMessage());
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				return false;
			}
		}
			


		public boolean checkOpeningStocksNewCopyDocumentScreenOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(copyDocumentOption));
				copyDocumentOption.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cd_vouchertypeTxt));
				
				boolean actcd_vouchertypeTxt=cd_vouchertypeTxt.isDisplayed();
				boolean actcd_searchOnDropdown1=cd_searchOnDropdown1.isDisplayed();
				boolean actcd_searchOnDropdown2=cd_searchOnDropdown2.isDisplayed();
				boolean actcd_searchTxt=cd_searchTxt.isDisplayed();
				boolean actcd_refreshBtn=cd_refreshBtn.isDisplayed();
				boolean actcd_filterBtn=cd_filterBtn.isDisplayed();
				boolean actcd_HeaderChkBox=cd_HeaderChkBox.isDisplayed();
				boolean actcd_FirstChkBox=cd_FirstChkBox.isDisplayed();
				boolean actcd_clubsimilarTransChkBox=cd_clubsimilarTransChkBox.isDisplayed();
				boolean actcd_SelectallBtn=cd_SelectallBtn.isDisplayed();
				boolean actcd_firstBtn=cd_firstBtn.isDisplayed();
				boolean actcd_PreviousBtn=cd_PreviousBtn.isDisplayed();
				boolean actcd_PageNo=cd_PageNo.isDisplayed();
				boolean actcd_nextBtn=cd_nextBtn.isDisplayed();
				boolean actcd_LastBtn=cd_LastBtn.isDisplayed();
				boolean actcd_OkBtn=cd_OkBtn.isDisplayed();
				boolean actcd_CancelBtn=cd_CancelBtn.isDisplayed();
				
				
				boolean expcd_vouchertypeTxt=true;
				boolean expcd_searchOnDropdown1=true;
				boolean expcd_searchOnDropdown2=true;
				boolean expcd_searchTxt=true;
				boolean expcd_refreshBtn=true;
				boolean expcd_filterBtn=true;
				boolean expcd_HeaderChkBox=true;
				boolean expcd_FirstChkBox=true;
				boolean expcd_clubsimilarTransChkBox=true;
				boolean expcd_SelectallBtn=true;
				boolean expcd_firstBtn=true;
				boolean expcd_PreviousBtn=true;
				boolean expcd_PageNo=true;
				boolean expcd_nextBtn=true;
				boolean expcd_LastBtn=true;
				boolean expcd_OkBtn=true;
				boolean expcd_CancelBtn=true;
				
				System.out.println("Copy Document Voucher type Value Actual               : " + actcd_vouchertypeTxt+         " Value Expected  : " + expcd_vouchertypeTxt);
				System.out.println("Copy Document Search dropdown 1 Value Actual          : " + actcd_searchOnDropdown1+      " Value Expected  : " + expcd_searchOnDropdown1);
				System.out.println("Copy Document Search dropdown 2 Value Actual          : " + actcd_searchOnDropdown2+      " Value Expected  : " + expcd_searchOnDropdown2);
				System.out.println("Copy Document Search text Value Actual                : " + actcd_searchTxt+              " Value Expected  : " + expcd_searchTxt);
				System.out.println("Copy Document Refresh Value Actual                    : " + actcd_refreshBtn+             " Value Expected  : " + expcd_refreshBtn);
				System.out.println("Copy Document Filter Value Actual                     : " + actcd_filterBtn+              " Value Expected  : " + expcd_filterBtn);
				System.out.println("Copy Document Header Chk box Value Actual             : " + actcd_HeaderChkBox+           " Value Expected  : " + expcd_HeaderChkBox);
				System.out.println("Copy Document First Chk Box Value Actual              : " + actcd_FirstChkBox+            " Value Expected  : " + expcd_FirstChkBox);
				System.out.println("Copy Document Club Similar Trans Chk Box Value Actual : " + actcd_clubsimilarTransChkBox+ " Value Expected  : " + expcd_clubsimilarTransChkBox);
				System.out.println("Copy Document Select All Value Actual                 : " + actcd_SelectallBtn+           " Value Expected  : " + expcd_SelectallBtn);
				System.out.println("Copy Document first Button Value Actual               : " + actcd_firstBtn+               " Value Expected  : " + expcd_firstBtn);
				System.out.println("Copy Document Previous Button Value Actual            : " + actcd_PreviousBtn+            " Value Expected  : " + expcd_PreviousBtn);
				System.out.println("Copy Document Page No Value Actual                    : " + actcd_PageNo+                 " Value Expected  : " + expcd_PageNo);
				System.out.println("Copy Document Next Button Value Actual                : " + actcd_nextBtn+                " Value Expected  : " + expcd_nextBtn);
				System.out.println("Copy Document last Button Value Actual                : " + actcd_LastBtn+                " Value Expected  : " + expcd_LastBtn);
				System.out.println("Copy Document Ok Button Value Actual                  : " + actcd_OkBtn+                  " Value Expected  : " + expcd_OkBtn);
				System.out.println("Copy Document cancel Button Value Actual              : " + actcd_CancelBtn+              " Value Expected  : " + expcd_CancelBtn);
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cd_vouchertypeTxt));
				
				boolean actMethod = actcd_vouchertypeTxt==expcd_vouchertypeTxt && actcd_searchOnDropdown1==expcd_searchOnDropdown1
									&& actcd_searchOnDropdown2==expcd_searchOnDropdown2 && actcd_searchTxt==expcd_searchTxt
									&& actcd_refreshBtn==expcd_refreshBtn && actcd_filterBtn==expcd_filterBtn
									&& actcd_HeaderChkBox==expcd_HeaderChkBox && actcd_FirstChkBox==expcd_FirstChkBox
									&& actcd_clubsimilarTransChkBox==expcd_clubsimilarTransChkBox && actcd_SelectallBtn==expcd_SelectallBtn
									&& actcd_firstBtn==expcd_firstBtn && actcd_PreviousBtn==expcd_PreviousBtn
									&& actcd_PageNo==expcd_PageNo && actcd_nextBtn==expcd_nextBtn
									&& actcd_LastBtn==expcd_LastBtn && actcd_OkBtn==expcd_OkBtn && actcd_CancelBtn==expcd_CancelBtn;
				
				String actResult = Boolean.toString(actMethod);
				
				excelReader.setCellData(xlfile, xlSheetName, 411, 8, actResult.toUpperCase());
				
				if(actMethod==true)
				{
					System.out.println("Test Pass : Copy Document Options Are As Expected");
					excelReader.setCellData(xlfile, xlSheetName, 411, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Copy Document Options Are NOT As Expected");
					excelReader.setCellData(xlfile, xlSheetName, 411, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage().substring(0, 50);
				excelReader.setExceptionInExcel(xlfile, xlSheetName, 411, 10, e.getMessage());
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				return false;
			}
		}

			
		@FindBy(xpath="//*[@id='id_copydoc_grid2_tbody']/tr/td")
		private static List<WebElement> cd_tableList;
		
		public boolean checkOpeningStocksNewFirstRowCheckboxInCopyDocument() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			try
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cd_FirstChkBox));
				cd_FirstChkBox.click();
				
				/*String actCopyDocItemR1=cd_R1C2.getText();
				String actCopyDocUnitR1=cd_R1C3.getText();
				String actCopyDocQtyR1=cd_R1C4.getText();
				String actCopyDocRateR1=cd_R1C5.getText();
				String actCopyDocGrossR1=cd_R1C6.getText();
				String actCopyDocBatchR1=cd_R1C7.getText();
				
				String actCopyDocItemR2=cd_R2C2.getText();
				String actCopyDocUnitR2=cd_R2C3.getText();
				String actCopyDocQtyR2=cd_R2C4.getText();
				String actCopyDocRateR2=cd_R2C5.getText();
				String actCopyDocGrossR2=cd_R2C6.getText();
				String actCopyDocBinR2=cd_R1C8.getText();
				
				String actCopyDocItemR3=cd_R3C2.getText();
				String actCopyDocUnitR3=cd_R3C3.getText();
				String actCopyDocQtyR3=cd_R3C4.getText();
				String actCopyDocRateR3=cd_R3C5.getText();
				String actCopyDocGrossR3=cd_R3C6.getText();
				String actCopyDocRMAR3=cd_R3C10.getText();
				
				String actCopyDocItemR4=cd_R4C2.getText();
				String actCopyDocUnitR4=cd_R4C3.getText();
				String actCopyDocQtyR4=cd_R4C4.getText();
				String actCopyDocRateR4=cd_R4C5.getText();
				String actCopyDocGrossR4=cd_R4C6.getText();
				String actCopyDocBatchR4=cd_R4C7.getText();
				
				// expected values
				String expCopyDocItemR1="BR COGS ITEM";
				String expCopyDocUnitR1="Dozs";
				String expCopyDocQtyR1="10.00";
				String expCopyDocRateR1="10.00";
				String expCopyDocGrossR1="100.00";
				String expCopyDocBatchR1="OSH_COGS1";
				
				String expCopyDocItemR2="FIFO COGS ITEM";
				String expCopyDocUnitR2="Dozs";
				String expCopyDocQtyR2="1.00";
				String expCopyDocRateR2="100.00";
				String expCopyDocGrossR2="100.00";
				String expCopyDocBinR2="Bin5";
				
				String expCopyDocItemR3="WA COGS ITEM";
				String expCopyDocUnitR3="Pcs";
				String expCopyDocQtyR3="10.00";
				String expCopyDocRateR3="10.00";
				String expCopyDocGrossR3="100.00";
				String expCopyDocRMAR3="HYD_OS@Rma1,HYD_OS@Rma2,HYD_OS@Rma3,HYD_OS@Rma4,HYD_OS@Rma5,HYD_OS@Rma6,HYD_OS@Rma7,HYD_OS@Rma8,HYD_OS@Rma9,HYD_OS@Rma10";
				
				String expCopyDocItemR4="STD RATE COGS ITEM";
				String expCopyDocUnitR4="Dozs";
				String expCopyDocQtyR4="10.00";
				String expCopyDocRateR4="10.00";
				String expCopyDocGrossR4="100.00";
			
				
				System.out.println("Copy Doc Item Row 1 Value Actual      : " + actCopyDocItemR1 +  " Value Expected : " + expCopyDocItemR1);
				System.out.println("Copy Doc Unit Row 1  Value Actual     : " + actCopyDocUnitR1 +  " Value Expected : " + expCopyDocUnitR1);
				System.out.println("Copy Doc Qty Row 1  Value Actual      : " + actCopyDocQtyR1 +   " Value Expected : " + expCopyDocQtyR1);
				System.out.println("Copy Doc Rate Row 1 Value Actual      : " + actCopyDocRateR1 +  " Value Expected : " + expCopyDocRateR1);
				System.out.println("Copy Doc Gross Row 1 Value Actual     : " + actCopyDocGrossR1 + " Value Expected : " + expCopyDocGrossR1);
				System.out.println("Copy Doc Batch Row 1 Value Actual     : " + actCopyDocBatchR1 + " Value Expected : " + expCopyDocBatchR1);
			 	
				System.out.println("Copy Doc Item Row 2 Value Actual      : " + actCopyDocItemR2 +  " Value Expected : " + expCopyDocItemR2);
				System.out.println("Copy Doc Unit Row 2 Value Actual      : " + actCopyDocUnitR2 +  " Value Expected : " + expCopyDocUnitR2);
				System.out.println("Copy Doc Qty Row 2 Value Actual       : " + actCopyDocQtyR2 +   " Value Expected : " + expCopyDocQtyR2);
				System.out.println("Copy Doc Rate Row 2 Value Actual      : " + actCopyDocRateR2 +  " Value Expected : " + expCopyDocRateR2);
				System.out.println("Copy Doc Gross Row 2 Value Actual     : " + actCopyDocGrossR2 + " Value Expected : " + expCopyDocGrossR2);
				System.out.println("Copy Doc Bin Row 2 Value Actual       : " + actCopyDocBinR2 +   " Value Expected : " + expCopyDocBinR2);
				
				System.out.println("Copy Doc Item Row 3 Value Actual      : " + actCopyDocItemR3 +  " Value Expected : " + expCopyDocItemR3);
				System.out.println("Copy Doc Unit Row 3 Value Actual      : " + actCopyDocUnitR3 +  " Value Expected : " + expCopyDocUnitR3);
				System.out.println("Copy Doc Qty Row 3 Value Actual       : " + actCopyDocQtyR3 +   " Value Expected : " + expCopyDocQtyR3);
				System.out.println("Copy Doc Rate Row 3 Value Actual      : " + actCopyDocRateR3 +  " Value Expected : " + expCopyDocRateR3);
				System.out.println("Copy Doc Gross Row 3 Value Actual     : " + actCopyDocGrossR3 + " Value Expected : " + expCopyDocGrossR3);
				System.out.println("Copy Doc RMA Row 3 Value Actual       : " + actCopyDocRMAR3 +   " Value Expected : " + expCopyDocRMAR3);
				
				System.out.println("Copy Doc Item Row 4 Value Actual      : " + actCopyDocItemR4 +  " Value Expected : " + expCopyDocItemR4);
				System.out.println("Copy Doc Unit Row 4 Value Actual      : " + actCopyDocUnitR4 +  " Value Expected : " + expCopyDocUnitR4);
				System.out.println("Copy Doc Qty Row 4 Value Actual       : " + actCopyDocQtyR4 +   " Value Expected : " + expCopyDocQtyR4);
				System.out.println("Copy Doc Rate Row 4 Value Actual      : " + actCopyDocRateR4 +  " Value Expected : " + expCopyDocRateR4);
				System.out.println("Copy Doc Gross Row 4  Value Actual    : " + actCopyDocGrossR4 + " Value Expected : " + expCopyDocGrossR4);*/
				
				int cd_tableListCount = cd_tableList.size();
				
				ArrayList<String> cd_tableListArray = new ArrayList<String>();
				
				for(int i=0;i<cd_tableListCount;i++)
				{
					if(i==8)
					{
						String data ="Expiry Date";
						cd_tableListArray.add(data);
					}
					else
					{
						String data = cd_tableList.get(i).getText();
						cd_tableListArray.add(data);
					}
				}
				
				String actcd_tableList = cd_tableListArray.toString();
				
				String expcd_tableList = excelReader.getCellData(xlSheetName, 413, 7);
				
				excelReader.setCellData(xlfile, xlSheetName, 413, 8, actcd_tableList);
				
				System.out.println("actcd_tableList : " + actcd_tableList);
				System.out.println("expcd_tableList : " + expcd_tableList);
				
				
				if(actcd_tableList.equalsIgnoreCase(expcd_tableList))
				{
					
				
					excelReader.setCellData(xlfile, xlSheetName, 412, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Copy Document Options Are NOT As Expected");
					excelReader.setCellData(xlfile, xlSheetName, 412, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage().substring(0, 50);
				excelReader.setExceptionInExcel(xlfile, xlSheetName, 412, 10, e.getMessage());
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				return false;
			}
		}

		
		
		public boolean checkLoadingVoucherInformationFromCopyDocumentOnClickOnOk() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cd_OkBtn));
				cd_OkBtn.click();
				
	            Thread.sleep(2000);
				
	            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
				documentNumberTxt.click();
				
				String actdocNumber,expdocNumber;
				
				actdocNumber=documentNumberTxt.getAttribute("value");
				expdocNumber=excelReader.getCellData(xlSheetName, 415, 7);
				
				excelReader.setCellData(xlfile, xlSheetName, 415, 8, actdocNumber);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
				wareHouseTxt.click();
		
				String actOsVoucherWarehouse=wareHouseTxt.getAttribute("value");
				String expOsVoucherWarehouse=excelReader.getCellData(xlSheetName, 416, 7);
				
				excelReader.setCellData(xlfile, xlSheetName, 416, 8, actOsVoucherWarehouse);
						
				
				/*Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_footerExpandBtn));
				new_footerExpandBtn.click();*/
				
				
				/*String actOsVoucherItemR1,actOsVoucherUnitsR1,actOsVoucherQtyR1,actOsVoucherRateR1,actOsVoucherGrossR1,actOsVoucherBatchR1;
				String actOsVoucherItemR2,actOsVoucherUnitsR2,actOsVoucherQtyR2,actOsVoucherRateR2,actOsVoucherGrossR2,actOsVoucherBinR2;
				String actOsVoucherItemR3,actOsVoucherUnitsR3,actOsVoucherQtyR3,actOsVoucherRateR3,actOsVoucherGrossR3,actOsVoucherRMAR3;
				String actOsVoucherItemR4,actOsVoucherUnitsR4,actOsVoucherQtyR4,actOsVoucherRateR4,actOsVoucherGrossR4,actOsVoucherBatchR4;*/
				
				String actOsVoucherFooterQty,actOsVoucherFooterGross,actOsVoucherFooterNet;
				
		
				/*String expOsVoucherItemR1,expOsVoucherUnitsR1,expOsVoucherQtyR1,expOsVoucherRateR1,expOsVoucherGrossR1,expOsVoucherBatchR1;
				String expOsVoucherItemR2,expOsVoucherUnitsR2,expOsVoucherQtyR2,expOsVoucherRateR2,expOsVoucherGrossR2,expOsVoucherBinR2;
				String expOsVoucherItemR3,expOsVoucherUnitsR3,expOsVoucherQtyR3,expOsVoucherRateR3,expOsVoucherGrossR3,expOsVoucherRMAR3;
				String expOsVoucherItemR4,expOsVoucherUnitsR4,expOsVoucherQtyR4,expOsVoucherRateR4,expOsVoucherGrossR4,expOsVoucherBatchR4;*/
				
				String expOsVoucherFooterQty,expOsVoucherFooterGross,expOsVoucherFooterNet;
		
			
				/*expOsVoucherItemR1="BATCH BR ITEM";
				expOsVoucherUnitsR1="Dozs";
				expOsVoucherQtyR1="5.00";
				expOsVoucherRateR1="9.00";
				expOsVoucherGrossR1="45.00";
				expOsVoucherBatchR1="OSHYDBR1";
				
				expOsVoucherItemR2="FIFO COGS ITEM";
				expOsVoucherUnitsR2="Dozs";
				expOsVoucherQtyR2="1.00";
				expOsVoucherRateR2="12.00";
				expOsVoucherGrossR2="12.00";
				expOsVoucherBinR2="Bin4";
				
				expOsVoucherItemR3="WA COGS ITEM";
				expOsVoucherUnitsR3="Pcs";
				expOsVoucherQtyR3="5.00";
				expOsVoucherRateR3="20.00";
				expOsVoucherGrossR3="100.00";
				expOsVoucherRMAR3="Hyd@OS1,Hyd@OS2,Hyd@OS3,Hyd@OS4,Hyd@OS5";
				
				expOsVoucherItemR4="STD RATE COGS ITEM";
				expOsVoucherUnitsR4="Dozs";
				expOsVoucherQtyR4="5.00";
				expOsVoucherRateR4="9.00";
				expOsVoucherGrossR4="45.00";
				//expOsVoucherBatchR4="OSHWA2";*/
				
				expOsVoucherFooterQty=excelReader.getCellData(xlSheetName, 418, 7);
				expOsVoucherFooterGross=excelReader.getCellData(xlSheetName, 419, 7);
				expOsVoucherFooterNet=excelReader.getCellData(xlSheetName, 420, 7);
				
				
				
				
				
				System.out.println(netAmount.getText());
				System.out.println(QtyAmount.getText());
				System.out.println(GrossAmount.getText());
				
				
				/*actOsVoucherItemR1=select1stRow_1stColumn.getText();
				actOsVoucherUnitsR1=select1stRow_2ndColumn.getText();
				actOsVoucherQtyR1=select1stRow_3rdColumn.getText();
				actOsVoucherRateR1=select1stRow_4thColumn.getText();
				actOsVoucherGrossR1=select1stRow_5thColumn.getText();
				actOsVoucherBatchR1=select1stRow_6thColumn.getText();
				
				actOsVoucherItemR2=select2ndRow_1stColumn.getText();
				actOsVoucherUnitsR2=select2ndRow_2ndColumn.getText();
				actOsVoucherQtyR2=select2ndRow_3rdColumn.getText();
				actOsVoucherRateR2=select2ndRow_4thColumn.getText();
				actOsVoucherGrossR2=select2ndRow_5thColumn.getText();
				actOsVoucherBinR2=select2ndRow_7thColumn.getText();
				
				actOsVoucherItemR3=select3rdRow_1stColumn.getText();
				actOsVoucherUnitsR3=select3rdRow_2ndColumn.getText();
				actOsVoucherQtyR3=select3rdRow_3rdColumn.getText();
				actOsVoucherRateR3=select3rdRow_4thColumn.getText();
				actOsVoucherGrossR3=select3rdRow_5thColumn.getText();
				actOsVoucherRMAR3=select3rdRow_9thColumn.getText();
				
				actOsVoucherItemR4=select4thRow_1stColumn.getText();
				actOsVoucherUnitsR4=select4thRow_2ndColumn.getText();
				actOsVoucherQtyR4=select4thRow_3rdColumn.getText();
				actOsVoucherRateR4=select4thRow_4thColumn.getText();
				actOsVoucherGrossR4=select4thRow_5thColumn.getText();
				actOsVoucherBatchR4=select4thRow_6thColumn.getText();*/
				
				actOsVoucherFooterQty=QtyAmount.getText();
				actOsVoucherFooterGross=GrossAmount.getText();
				actOsVoucherFooterNet=netAmount.getText();
				
				excelReader.setCellData(xlfile, xlSheetName, 418, 8, actOsVoucherFooterQty);
				excelReader.setCellData(xlfile, xlSheetName, 419, 8, actOsVoucherFooterGross);
				excelReader.setCellData(xlfile, xlSheetName, 420, 8, actOsVoucherFooterNet);
				
				int voucherGridBodyListCount = voucherGridBodyList.size();
				 
				 ArrayList<String> voucherGridBodyListArray = new ArrayList<String>();
				 
				 for(int i=0;i<voucherGridBodyListCount;i++)
				 {
					 if(i==8)
					 {
						 String data ="Expiry Date";
						 voucherGridBodyListArray.add(data);
					 }
					 else
					 {
						 String data = voucherGridBodyList.get(i).getText();
						 voucherGridBodyListArray.add(data);
					 }
				 }
				 
				 String actvoucherGridBodyList=voucherGridBodyListArray.toString();
				 
				 String expvoucherGridBodyList=excelReader.getCellData(xlSheetName, 417, 7);
				 
				 excelReader.setCellData(xlfile, xlSheetName, 417, 8, actvoucherGridBodyList);
				 
				 System.out.println("voucherGridBodyList Actual   : " + actvoucherGridBodyList);
				 System.out.println("voucherGridBodyList Expected : " + expvoucherGridBodyList);
			
				
				 System.out.println("osdocNumber                 :  " + actdocNumber  +"   " + expdocNumber);
		        
		         
		         System.out.println("osVoucherWarehouse          :  " + actOsVoucherWarehouse +"     " + expOsVoucherWarehouse);
		         System.out.println("osVoucherFooterQty          :  " + actOsVoucherFooterQty  +"   " + expOsVoucherFooterQty);
		         System.out.println("osVoucherFooterGross        :  " + actOsVoucherFooterGross +"   " + expOsVoucherFooterGross);
		         System.out.println("osVoucherFooterNet          :  " + actOsVoucherFooterNet +"   " + expOsVoucherFooterNet);
				
				
		         /*System.out.println("First Row Item Name         :  " + actOsVoucherItemR1  +"   " + expOsVoucherItemR1);
		         System.out.println("First Row Units Name        :  " + actOsVoucherUnitsR1 +"   " + expOsVoucherUnitsR1);
		         System.out.println("First Row Qty Name          :  " + actOsVoucherQtyR1 +"     " + expOsVoucherQtyR1);
		         System.out.println("First Row Rate Name         :  " + actOsVoucherRateR1  +"   " + expOsVoucherRateR1);
		         System.out.println("First Row Gross Name        :  " + actOsVoucherGrossR1 +"   " + expOsVoucherGrossR1);
		         System.out.println("First Row Batch Name        :  " + actOsVoucherBatchR1 +"   " + expOsVoucherBatchR1);
		         
		         System.out.println("Second Row Item Name         :  " + actOsVoucherItemR2  +"   " + expOsVoucherItemR2);
		         System.out.println("Second Row Units Name        :  " + actOsVoucherUnitsR2 +"   " + expOsVoucherUnitsR2);
		         System.out.println("Second Row Qty Name          :  " + actOsVoucherQtyR2 +"     " + expOsVoucherQtyR2);
		         System.out.println("Second Row Rate Name         :  " + actOsVoucherRateR2  +"   " + expOsVoucherRateR2);
		         System.out.println("Second Row Gross Name        :  " + actOsVoucherGrossR2 +"   " + expOsVoucherGrossR2);
		         System.out.println("Second Row Bin Name          :  " + actOsVoucherBinR2 +"       " + expOsVoucherBinR2);
		         
		         
		         System.out.println("Third Row Item Name         :  " + actOsVoucherItemR3  +"   " + expOsVoucherItemR3);
		         System.out.println("Third Row Units Name        :  " + actOsVoucherUnitsR3 +"   " + expOsVoucherUnitsR3);
		         System.out.println("Third Row Qty Name          :  " + actOsVoucherQtyR3 +"     " + expOsVoucherQtyR3);
		         System.out.println("Third Row Rate Name         :  " + actOsVoucherRateR3  +"   " + expOsVoucherRateR3);
		         System.out.println("Third Row Gross Name        :  " + actOsVoucherGrossR3 +"   " + expOsVoucherGrossR3);
		         System.out.println("Third Row RMA Name          :  " + actOsVoucherRMAR3 +"     " + expOsVoucherRMAR3);
		         
		         System.out.println("Fourth Row Item Name         :  " + actOsVoucherItemR4  +"   " + expOsVoucherItemR4);
		         System.out.println("Fourth Row Units Name        :  " + actOsVoucherUnitsR4 +"   " + expOsVoucherUnitsR4);
		         System.out.println("Fourth Row Qty Name          :  " + actOsVoucherQtyR4 +"     " + expOsVoucherQtyR4);
		         System.out.println("Fourth Row Rate Name         :  " + actOsVoucherRateR4  +"   " + expOsVoucherRateR4);
		         System.out.println("Fourth Row Gross Name        :  " + actOsVoucherGrossR4 +"   " + expOsVoucherGrossR4);*/
		     
				
				
				if(actdocNumber.equalsIgnoreCase(expdocNumber)
						&& actOsVoucherWarehouse.equalsIgnoreCase(expOsVoucherWarehouse)
						
						&& actOsVoucherFooterQty.equalsIgnoreCase(expOsVoucherFooterQty) && actOsVoucherFooterGross.equalsIgnoreCase(expOsVoucherFooterGross) 
						&& actOsVoucherFooterNet.equalsIgnoreCase(expOsVoucherFooterNet) && actvoucherGridBodyList.equalsIgnoreCase(expvoucherGridBodyList)
						
						/*&&   actOsVoucherItemR1.equalsIgnoreCase(expOsVoucherItemR1) && actOsVoucherUnitsR1.equalsIgnoreCase(expOsVoucherUnitsR1)
						&&   actOsVoucherQtyR1.equalsIgnoreCase(expOsVoucherQtyR1) && actOsVoucherRateR1.equalsIgnoreCase(expOsVoucherRateR1)
						&&   actOsVoucherGrossR1.equalsIgnoreCase(expOsVoucherGrossR1)  && actOsVoucherBatchR1.equalsIgnoreCase(expOsVoucherBatchR1)
						
						&&   actOsVoucherItemR2.equalsIgnoreCase(expOsVoucherItemR2) && actOsVoucherUnitsR2.equalsIgnoreCase(expOsVoucherUnitsR2)
						&&   actOsVoucherQtyR2.equalsIgnoreCase(expOsVoucherQtyR2) && actOsVoucherRateR2.equalsIgnoreCase(expOsVoucherRateR2)
						&&   actOsVoucherGrossR2.equalsIgnoreCase(expOsVoucherGrossR2)  && actOsVoucherBinR2.equalsIgnoreCase(expOsVoucherBinR2)
						
						&&   actOsVoucherItemR3.equalsIgnoreCase(expOsVoucherItemR3) && actOsVoucherUnitsR3.equalsIgnoreCase(expOsVoucherUnitsR3)
						&&   actOsVoucherQtyR3.equalsIgnoreCase(expOsVoucherQtyR3) && actOsVoucherRateR3.equalsIgnoreCase(expOsVoucherRateR3)
						&&   actOsVoucherGrossR3.equalsIgnoreCase(expOsVoucherGrossR3)  && actOsVoucherRMAR3.equalsIgnoreCase(expOsVoucherRMAR3)
						
						&&   actOsVoucherItemR4.equalsIgnoreCase(expOsVoucherItemR4) && actOsVoucherUnitsR4.equalsIgnoreCase(expOsVoucherUnitsR4)
						&&   actOsVoucherQtyR4.equalsIgnoreCase(expOsVoucherQtyR4) && actOsVoucherRateR4.equalsIgnoreCase(expOsVoucherRateR4)
						&&   actOsVoucherGrossR4.equalsIgnoreCase(expOsVoucherGrossR4) */)
				{
					System.out.println("Test Pass : Saved Data is As Expected");
					
					excelReader.setCellData(xlfile, xlSheetName, 414, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Saved Data is NOT As Expected");
					
					excelReader.setCellData(xlfile, xlSheetName, 414, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage().substring(0, 50);
				excelReader.setExceptionInExcel(xlfile, xlSheetName, 414, 10, e.getMessage());
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				return false;
			}
		}
		
		// create a method of copy document after issue resolves 

		public boolean checkSavingVoucherByCopyDocumentWithMandatoryCheck() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
				saveBtn.click();
				
				String expBATCHErrorMessage=excelReader.getCellData(xlSheetName, 422, 7);
				
				String validationMessageBatch=checkValidationMessage(expBATCHErrorMessage);
				
				excelReader.setCellData(xlfile, xlSheetName, 422, 8, validationMessageBatch);
	
				System.out.println("Message On Saving Voucher Copy Document without Input Of Batch :  "+validationMessageBatch +"  "+"TRUE");
	
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_6thColumn));
				select1stRow_6thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
				enter_Batch.click();
				enter_Batch.sendKeys(excelReader.getCellData(xlSheetName, 421, 6));
				enter_Batch.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
				saveBtn.click();
	
				String expBINErrorMessage=excelReader.getCellData(xlSheetName, 423, 7);
				
				String validationMessageBin=checkValidationMessage(expBINErrorMessage);
				
				excelReader.setCellData(xlfile, xlSheetName, 423, 8, validationMessageBin);
	
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
				select2ndRow_5thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
				enter_Gross.sendKeys(Keys.TAB);
	
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binselect2ndRow_1stColumn));
				getAction().doubleClick(binselect2ndRow_1stColumn).build().perform();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
				binOkBtn.click();
				
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
				saveBtn.click();
				
				String expRMAErrorMessage=excelReader.getCellData(xlSheetName, 424, 7);
				
				String validationMesssageRma=checkValidationMessage(expRMAErrorMessage);
				
				excelReader.setCellData(xlfile, xlSheetName, 424, 8, validationMesssageRma);
	
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
				select3rdRow_5thColumn.click();;
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
				enter_Gross.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaSerialNumberTxtField));
				rmaSerialNumberTxtField.click();
				rmaSerialNumberTxtField.sendKeys(excelReader.getCellData(xlSheetName, 422, 6));
				rmaSerialNumberTxtField.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaAddBtn));
				rmaAddBtn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaOkBtn));
				rmaOkBtn.click();
				
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
				enter_RMA.click();
				enter_RMA.sendKeys(Keys.TAB);
				
				/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_6thColumn));
				select4thRow_6thColumn.click();;
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
				enter_Batch.click();
				enter_Batch.sendKeys("OSHBR");
				enter_Batch.sendKeys(Keys.TAB);*/
	
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		        String docno=documentNumberTxt.getAttribute("value");
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
				saveBtn.click();
				
				boolean savingMessage=checkVoucherSavingMessage(docno);
				
				String actResult = Boolean.toString(savingMessage);
				
				excelReader.setCellData(xlfile, xlSheetName, 421, 8, actResult.toUpperCase());
				
				System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
							
				if(validationMessageBatch.equalsIgnoreCase(expBATCHErrorMessage) && validationMessageBin.equalsIgnoreCase(expBINErrorMessage) && 
					validationMesssageRma.equalsIgnoreCase(expRMAErrorMessage) && savingMessage==true)
				{
					System.out.println("Test Pass : Error Message Is As Expected");
	
					excelReader.setCellData(xlfile, xlSheetName, 421, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Error Message Is NOT As Expected");
	
					excelReader.setCellData(xlfile, xlSheetName, 421, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage().substring(0, 50);
				excelReader.setExceptionInExcel(xlfile, xlSheetName, 421, 10, e.getMessage());
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				return false;
			}
		
			
		}
		
		
		
		
		public boolean checkOpeningStocksNewVoucherRevertChangeOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
			try
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
				previousBtn.click();
			
				
				boolean loading=checkLoadingMessage();
				
				System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(openingStocksNEW_NarrationTxt));
				openingStocksNEW_NarrationTxt.click();
				
				openingStocksNEW_NarrationTxt.sendKeys(excelReader.getCellData(xlSheetName, 425, 6));
				openingStocksNEW_NarrationTxt.sendKeys(Keys.TAB);
				
				String actNarrationText=openingStocksNEW_NarrationTxt.getAttribute("value");
				String expNarrationText=excelReader.getCellData(xlSheetName, 426, 7);
				
				excelReader.setCellData(xlfile, xlSheetName, 426, 8, actNarrationText);
				
				System.out.println("Narration Text  :  "+actNarrationText +"  "+expNarrationText);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
				toggleBtn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(revertChanges));
				revertChanges.click();
				
				getWaitForAlert();
				
				String actAlert=getAlert().getText();
				String expAlert1=excelReader.getCellData(xlSheetName, 427, 7);
				String expAlert2=excelReader.getCellData(xlSheetName, 428, 7);
				
				excelReader.setCellData(xlfile, xlSheetName, 427, 8, actAlert);
				
				System.out.println("Alert On Revert Changes  :  "+actAlert +"  "+expAlert1+""+expAlert2);
				
				if(actNarrationText.equalsIgnoreCase(expNarrationText) && actAlert.startsWith(expAlert1)
						&& actAlert.endsWith(expAlert2))
				
				{
					System.out.println("Test Pass : Alert Displayed");
					excelReader.setCellData(xlfile, xlSheetName, 425, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test fail : Alert NOT Displayed");
					excelReader.setCellData(xlfile, xlSheetName, 425, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage().substring(0, 50);
				excelReader.setExceptionInExcel(xlfile, xlSheetName, 425, 10, e.getMessage());
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				return false;
			}
		}
		
		
		
		/*public boolean checkCancelButtonOnRevertChanges() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			getAlert().dismiss();
			
			if(getIsAlertPresent()==false)
			{
				System.out.println("Pass : Alert Not Displayed");
				return true;
			}
			else
			{
				System.out.println("Fail : Alert Displayed");
				return false;
			}
		}*/
		
		
		
		
		public boolean checkOKButtonOnRevertChanges() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
				/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
				toggleBtn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(revertChanges));
				revertChanges.click();
				
				getWaitForAlert();
				
				String actAlert=getAlert().getText();
				String expAlert1="The contents of the voucher are changed.";
				String expAlert2="Are you sure that you want to ignore the changes?";
				
				System.out.println("Alert On Revert Changes :  "+actAlert +"  "+expAlert1+""+expAlert2);
				
				if(actAlert.startsWith(expAlert1) && actAlert.endsWith(expAlert2))
				
				{*/
				System.out.println("Test Pass : Alert Displayed");
				
				getAlert().accept();
				
				boolean loading=checkLoadingMessage();
				
				System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
			
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(openingStocksNEW_NarrationTxt));
				openingStocksNEW_NarrationTxt.click();
				
				String actNarrationText=openingStocksNEW_NarrationTxt.getAttribute("value");
				String expNarrationText=excelReader.getCellData(xlSheetName, 430, 7);
				
				System.out.println("Narration Text After Revert Change :  "+actNarrationText +"  "+expNarrationText);
				
				if(actNarrationText.equalsIgnoreCase(expNarrationText))
				{
					System.out.println("Test Fail : revert Changes NOT Working As expected");
					excelReader.setCellData(xlfile, xlSheetName, 429, 9, resFail);
					return false;
				}
				else
				{
					System.out.println("Test pass : revert Changes Working As expected");
					excelReader.setCellData(xlfile, xlSheetName, 429, 9, resPass);
					return true;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage().substring(0, 50);
				excelReader.setExceptionInExcel(xlfile, xlSheetName, 429, 10, e.getMessage());
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				return false;
			}
			
			/*}
			else
			{
				System.out.println("Test Fail : revert Changes NOT Working As expected");
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				excelReader.setCellData(xlfile, xlSheetName, 70, 9, resFail);
				return false;
			}*/
		}
		
		
		
		@FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr[1]/td[4]")
		 private static WebElement openingStocksNewHomeRow1VoucherNo;
		 
		 @FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr[1]/td[5]")
		 private static WebElement openingStocksNewHomeRow1CreatedBy;
		 
		 @FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr[1]/td[6]")
		 private static WebElement openingStocksNewHomeRow1ModifiedBy;
		 
		 @FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr[1]/td[11]")
		 private static WebElement openingStocksNewHomeRow1SuspendStatus;
		 
		 @FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr[1]/td[12]")
		 private static WebElement openingStocksNewHomeRow1AuthorizationStatus;
		
		 @FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr")
		 private static List<WebElement> openingStocksNewHomePageTableRowsCount;
		
		public boolean checkSuspendOptionInOpeningStocks() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
			try
			{
				
		
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		        String docno=documentNumberTxt.getAttribute("value");
				
		        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
				new_SuspendBtn.click();
				
				boolean savingMessage=checkVoucherSavingMessage(docno);
				
				System.out.println("SavingMessage  :  " + savingMessage + " Value Expected : " + " TRUE ");
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(suspendStatusRow1));
				String actSuspendStatusR1=suspendStatusRow1.getText();
				
				String expSuspendStatusR1=excelReader.getCellData(xlSheetName, 432, 7);
				
				excelReader.setCellData(xlfile, xlSheetName, 432, 8, actSuspendStatusR1);

				System.out.println("Suspend Status in Home Page Value Actual  :  " + actSuspendStatusR1 + " Value Expected : " + expSuspendStatusR1);
				
				
				
				//Home Page Column Headings
		        int headerTxtCount		= headerTxtList.size();
				
				ArrayList<String> headerTxt = new ArrayList<String>();
				
				for (int i = 2; i < headerTxtCount; i++) 
				{
					String data=headerTxtList.get(i).getText();
					headerTxt.add(data);
				}
				
				String actHeaderTxt = headerTxt.toString();
				String expHeaderTxt = excelReader.getCellData(xlSheetName, 433, 7);
				excelReader.setCellData(xlfile, xlSheetName, 433, 8, actHeaderTxt);
				
				System.out.println("actopeningStocksNewHomePageColumnsButtons  : " + actHeaderTxt);
				System.out.println("expopeningStocksNewHomePageColumnsButtons  : " + expHeaderTxt);
				
				System.out.println("Count Of Header Columns in Home Page Value Actual    :  " + actHeaderTxt );
				System.out.println("Count Of Header Columns in Home Page Value Expected  :  " + expHeaderTxt );
						
				String actHomePageVoucherNo     = openingStocksNewHomeRow1VoucherNo.getText();
				String actHomePageCreatedBy     = openingStocksNewHomeRow1CreatedBy.getText();
				String actHomePageModifiedBy    = openingStocksNewHomeRow1ModifiedBy.getText();
				String actHomePageSuspendBy     = openingStocksNewHomeRow1SuspendStatus.getText();
				String actHomePageAuthorizedBy  = openingStocksNewHomeRow1AuthorizationStatus.getText();
				
				String expHomePageVoucherNo     = excelReader.getCellData(xlSheetName, 434, 7);
				String expHomePageCreatedBy     = excelReader.getCellData(xlSheetName, 435, 7);
				String expHomePageModifiedBy    = excelReader.getCellData(xlSheetName, 436, 7);
				String expHomePageSuspendBy     = excelReader.getCellData(xlSheetName, 437, 7);
				String expHomePageAuthorizeBy   = excelReader.getCellData(xlSheetName, 438, 7);
				
				excelReader.setCellData(xlfile, xlSheetName, 434, 8, actHomePageVoucherNo);
				excelReader.setCellData(xlfile, xlSheetName, 435, 8, actHomePageCreatedBy);
				excelReader.setCellData(xlfile, xlSheetName, 436, 8, actHomePageModifiedBy);
				excelReader.setCellData(xlfile, xlSheetName, 437, 8, actHomePageSuspendBy);
				excelReader.setCellData(xlfile, xlSheetName, 438, 8, actHomePageAuthorizedBy);
				
				System.out.println("Voucher No in Home Page Value Actual   :  " + actHomePageVoucherNo+    " Value Expected : " + expHomePageVoucherNo);
				System.out.println("Created By in Home Page Value Actual   :  " + actHomePageCreatedBy+    " Value Expected : " + expHomePageCreatedBy);
				System.out.println("Modified By in Home Page Value Actual  :  " + actHomePageModifiedBy+   " Value Expected : " + expHomePageModifiedBy);
				System.out.println("Suspend By in Home Page Value Actual   :  " + actHomePageSuspendBy+    " Value Expected : " + expHomePageSuspendBy);
				System.out.println("Authorize By in Home Page Value Actual :  " + actHomePageAuthorizedBy+ " Value Expected : " + expHomePageAuthorizeBy);
				
				int actopeningStocksNewHomePageTableRowsCount = openingStocksNewHomePageTableRowsCount.size();
				
				String actRowCountInHomePage = Integer.toString(actopeningStocksNewHomePageTableRowsCount);
				String expRowCountInHomePage = excelReader.getCellData(xlSheetName, 439, 7);
				
				excelReader.setCellData(xlfile, xlSheetName, 439, 8, actRowCountInHomePage);
				
				System.out.println("Row Count in Home Page Value Actual  :  " + actRowCountInHomePage + " Value Expected : " + expRowCountInHomePage);
							
			
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createViewNameDisplayInHomePage));
				 
				 String actcreateViewNameDisplayInHomePage = createViewNameToEditInHomePage.getText();
				 String expcreateViewNameDisplayInHomePage = excelReader.getCellData(xlSheetName, 440, 7);
					
				excelReader.setCellData(xlfile, xlSheetName, 440, 8, actcreateViewNameDisplayInHomePage);
				 
				 System.out.println("View Display In Home page Value Actual    : " + actcreateViewNameDisplayInHomePage   +     "	 Value Expected : " + expcreateViewNameDisplayInHomePage);
				 
				
				if(actSuspendStatusR1.equalsIgnoreCase(expSuspendStatusR1) && actHeaderTxt.equalsIgnoreCase(expHeaderTxt)
						&& actRowCountInHomePage.equalsIgnoreCase(expRowCountInHomePage)&& actcreateViewNameDisplayInHomePage.equalsIgnoreCase(expcreateViewNameDisplayInHomePage))
				{
					System.out.println("Test Pass : Suspended Succesfully");
								
					excelReader.setCellData(xlfile, xlSheetName, 431, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : NOT Suspended Succesfully");
	
					excelReader.setCellData(xlfile, xlSheetName, 431, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage().substring(0, 50);
				excelReader.setExceptionInExcel(xlfile, xlSheetName, 431, 10, e.getMessage());
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				return false;
			}
		}
		
	  
		
		public boolean checkOpeningStocksNewVoucherClickOnSuspendView() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
			try
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createViewNameToEditInHomePage));
				createViewNameToEditInHomePage.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			
				boolean actHomePageNewBtnIsDisplayed = newBtn.isDisplayed();
				boolean actHomePageEditBtn           = editBtn.isDisplayed();		
				boolean actHomePagePrintBtn          = printBtn.isDisplayed();
				boolean actHomePageDeleteBtn         = deleteBtn.isDisplayed();
				boolean actHomePageSuspendBtn        = suspendBtn.isDisplayed();
				boolean actHomePagePrintBarcodeBtn   = printBarCodeBtn.isDisplayed();
				boolean actHomePageExportXMLBtn      = exportToXMLBtn.isDisplayed();
				boolean actHomePageSettingsBtn       = settingsBtn.isDisplayed();
				boolean actHomePageCloseBtn          = homeCloseBtn.isDisplayed();
				boolean actHomePageGridCheckBox      = grid_HeaderChkBox.isDisplayed();
				boolean actHomePageSortingBtn        = sortingBtn.isDisplayed();
				boolean actHomePageCreateViewBn      = createViewBtn.isDisplayed();
				boolean actHomePageCustomizeBtn      = customizeBtn.isDisplayed();
				boolean actHomePageFilterBtn         = filterBtn.isDisplayed();
				boolean actHomePageRefreshBtn        = refreshBtn.isDisplayed();
				boolean actHomePageOptionsBtn        = optionsBtn.isDisplayed();
				boolean actHomePageExportBtn         = exportBtn.isDisplayed();
				
				boolean expHomePageNewBtnIsDisplayed = true;	
				boolean expHomePageEditBtn           = true;
				boolean expHomePagePrintBtn          = true;
				boolean expHomePageDeleteBtn         = true;
				boolean expHomePageSuspendBtn        = true;
				boolean expHomePagePrintBarcodeBtn   = true;
				boolean expHomePageExportXMLBtn      = true;
				boolean expHomePageSettingsBtn       = true;
				boolean expHomePageCloseBtn          = true;
				boolean expHomePageGridCheckBox      = true;
				boolean expHomePageSortingBtn        = true;
				boolean expHomePageCreateViewBn      = true;
				boolean expHomePageCustomizeBtn      = true;
				boolean expHomePageFilterBtn         = true;
				boolean expHomePageRefreshBtn        = false;
				boolean expHomePageOptionsBtn        = true;
				boolean expHomePageExportBtn         = true;
				
				boolean actMethod = actHomePageNewBtnIsDisplayed==expHomePageNewBtnIsDisplayed  && actHomePageEditBtn==expHomePageEditBtn && actHomePagePrintBtn==expHomePagePrintBtn
									&& actHomePageDeleteBtn==expHomePageDeleteBtn  && actHomePageSuspendBtn==expHomePageSuspendBtn 
									&& actHomePagePrintBarcodeBtn==expHomePagePrintBarcodeBtn && actHomePageExportXMLBtn==expHomePageExportXMLBtn
									&& actHomePageSettingsBtn==expHomePageSettingsBtn && actHomePageCloseBtn==expHomePageCloseBtn && actHomePageGridCheckBox==expHomePageGridCheckBox
									&& actHomePageSortingBtn==expHomePageSortingBtn && actHomePageCreateViewBn==expHomePageCreateViewBn && actHomePageCustomizeBtn==expHomePageCustomizeBtn
									&& actHomePageFilterBtn==expHomePageFilterBtn && actHomePageRefreshBtn==expHomePageRefreshBtn && actHomePageOptionsBtn==expHomePageOptionsBtn
									&& actHomePageExportBtn==expHomePageExportBtn  ;
				
				String actResult = Boolean.toString(actMethod);
				
				excelReader.setCellData(xlfile, xlSheetName, 441, 8, actResult.toUpperCase());
				
				System.out.println("Home Page New Btn Value Actual           : " + actHomePageNewBtnIsDisplayed+ "  Value Expected : " + expHomePageNewBtnIsDisplayed);
				System.out.println("Home Page Edit Btn Value Actual          : " + actHomePageEditBtn+           "  Value Expected : " + expHomePageEditBtn);
				System.out.println("Home Page Print Btn Value Actual         : " + actHomePagePrintBtn+          "	Value Expected : " + expHomePagePrintBtn);
				System.out.println("Home Page Delete Btn Value Actual        : " + actHomePageDeleteBtn+         "	Value Expected : " + expHomePageDeleteBtn);
				System.out.println("Home Page Suspend Btn Value Actual       : " + actHomePageSuspendBtn+        "	Value Expected : " + expHomePageSuspendBtn);
				System.out.println("Home Page Print Barcode Btn Value Actual : " + actHomePagePrintBarcodeBtn+   "	Value Expected : " + expHomePagePrintBarcodeBtn);
				System.out.println("Home Page Export XML Btn Value Actual    : " + actHomePageExportXMLBtn+      "	Value Expected : " + expHomePageExportXMLBtn);
				System.out.println("Home Page Settings Btn Value Actual      : " + actHomePageSettingsBtn+       "	Value Expected : " + expHomePageSettingsBtn);
				System.out.println("Home Page Close Btn Value Actual         : " + actHomePageCloseBtn+          "	Value Expected : " + expHomePageCloseBtn);
				System.out.println("Home Page Grid check Value Actual        : " + actHomePageGridCheckBox+      "	Value Expected : " + expHomePageGridCheckBox);
				System.out.println("Home Page Sorting Btn Value Actual       : " + actHomePageSortingBtn+        "	Value Expected : " + expHomePageSortingBtn);
				System.out.println("Home Page Create View Btn Value Actual   : " + actHomePageCreateViewBn+      "	Value Expected : " + expHomePageCreateViewBn);
				System.out.println("Home Page Customize Btn Value Actual     : " + actHomePageCustomizeBtn+      "	Value Expected : " + expHomePageCustomizeBtn);
				System.out.println("Home Page Filter check Value Actual      : " + actHomePageFilterBtn+         "	Value Expected : " + expHomePageFilterBtn);
				System.out.println("Home Page Refesh Btn Value Actual        : " + actHomePageRefreshBtn+        "	Value Expected : " + expHomePageRefreshBtn);
				System.out.println("Home Page Options Btn Value Actual       : " + actHomePageOptionsBtn+        "	Value Expected : " + expHomePageOptionsBtn);
				System.out.println("Home Page Export Btn Value Actual        : " + actHomePageExportBtn+         "  Value Expected : " + expHomePageExportBtn);
				
				int count				                 = openingStocksNewToolBarButtons.size();
				
				ArrayList<String> actbuttons             = new ArrayList<String>();
				
				for (int i = 0; i < count; i++) 
				{
					String data                          = openingStocksNewToolBarButtons.get(i).getText();
					actbuttons.add(data);
				}
				    
				String actopeningStocksNewToolBarButtons = actbuttons.toString();
				String expopeningStocksNewToolBarButtons = excelReader.getCellData(xlSheetName, 442, 7);
			
				System.out.println("actopeningStocksNewToolBarButtons  : " + actopeningStocksNewToolBarButtons);
				System.out.println("expopeningStocksNewToolBarButtons  : " + expopeningStocksNewToolBarButtons);
				
				excelReader.setCellData(xlfile, xlSheetName, 442, 8, actopeningStocksNewToolBarButtons);	
				
				String actsetAsDefaultView		=	setAsDefaultView.getText();
				String expsetAsDefaultView		=	excelReader.getCellData(xlSheetName, 443, 7);
				excelReader.setCellData(xlfile, xlSheetName, 443, 8, actsetAsDefaultView);
				
				
				//Ribbon Control Icons
		        int count1		= headingOptions.size();
				
				ArrayList<String> headingButtons = new ArrayList<String>();
				
				for (int i = 1; i < count1; i++) 
				{
					String data=headingOptions.get(i).getAttribute("title");
					
					headingButtons.add(data);
				}
				
				String actHeadingButtons = headingButtons.toString();
				String expHeadingButtons = excelReader.getCellData(xlSheetName, 444, 7);
				excelReader.setCellData(xlfile, xlSheetName, 444, 8, actHeadingButtons);
				
				
				System.out.println("actopeningStocksNewHeadingButtons  : " + actHeadingButtons);
				System.out.println("expopeningStocksNewHeadingButtons  : " + expHeadingButtons);
				
				//Home Page Column Headings
		        int headerTxtCount		= headerTxtList.size();
				
				ArrayList<String> headerTxt = new ArrayList<String>();
				
				for (int i = 2; i < headerTxtCount; i++) 
				{
					String data=headerTxtList.get(i).getText();
					headerTxt.add(data);
				}
				
				String actHeaderTxt = headerTxt.toString();
				String expHeaderTxt = excelReader.getCellData(xlSheetName, 445, 7);
				excelReader.setCellData(xlfile, xlSheetName, 445, 8, actHeaderTxt);
				
				
				System.out.println("actopeningStocksNewHomePageColumnsButtons  : " + actHeaderTxt);
				System.out.println("expopeningStocksNewHomePageColumnsButtons  : " + expHeaderTxt);
				
				
				System.out.println("Count Of Header Columns in Suspend View Home Page Value Actual  :  " + actHeaderTxt + " Value Expected : " + expHeaderTxt);
				
				String actHomePageVoucherNo     = openingStocksNewHomeRow1VoucherNo.getText();
				String actHomePageCreatedBy     = openingStocksNewHomeRow1CreatedBy.getText();
				String actHomePageModifiedBy    = openingStocksNewHomeRow1ModifiedBy.getText();
				String actHomePageSuspendBy     = openingStocksNewHomeRow1SuspendStatus.getText();
				String actHomePageAuthorizedBy  = openingStocksNewHomeRow1AuthorizationStatus.getText();
				
				String expHomePageVoucherNo     = excelReader.getCellData(xlSheetName, 446, 7);
				String expHomePageCreatedBy     = excelReader.getCellData(xlSheetName, 447, 7);
				String expHomePageModifiedBy    = excelReader.getCellData(xlSheetName, 448, 7);
				String expHomePageSuspendBy     = excelReader.getCellData(xlSheetName, 449, 7);
				String expHomePageAuthorizeBy   = excelReader.getCellData(xlSheetName, 450, 7);
				
				excelReader.setCellData(xlfile, xlSheetName, 446, 8, actHomePageVoucherNo);
				excelReader.setCellData(xlfile, xlSheetName, 447, 8, actHomePageCreatedBy);
				excelReader.setCellData(xlfile, xlSheetName, 448, 8, actHomePageModifiedBy);
				excelReader.setCellData(xlfile, xlSheetName, 449, 8, actHomePageSuspendBy);
				excelReader.setCellData(xlfile, xlSheetName, 450, 8, actHomePageAuthorizedBy);
				
				System.out.println("Voucher No in Home Page Value Actual   :  " + actHomePageVoucherNo+    " Value Expected : " + expHomePageVoucherNo);
				System.out.println("Created By in Home Page Value Actual   :  " + actHomePageCreatedBy+    " Value Expected : " + expHomePageCreatedBy);
				System.out.println("Modified By in Home Page Value Actual  :  " + actHomePageModifiedBy+   " Value Expected : " + expHomePageModifiedBy);
				System.out.println("Suspend By in Home Page Value Actual   :  " + actHomePageSuspendBy+    " Value Expected : " + expHomePageSuspendBy);
				System.out.println("Authorize By in Home Page Value Actual :  " + actHomePageAuthorizedBy+ " Value Expected : " + expHomePageAuthorizeBy);
				
				int actopeningStocksNewHomePageTableRowsCount = openingStocksNewHomePageTableRowsCount.size();
				
				String actRowCountInHomePage = Integer.toString(actopeningStocksNewHomePageTableRowsCount);
				String expRowCountInHomePage = excelReader.getCellData(xlSheetName, 451, 7);
				
				excelReader.setCellData(xlfile, xlSheetName, 451, 8, actRowCountInHomePage);	
				
				
				System.out.println("Row Count in Suspend View Home Page Value Actual  :  " + actRowCountInHomePage + " Value Expected : " + expRowCountInHomePage);
										
				if(actMethod==true && actopeningStocksNewToolBarButtons.equalsIgnoreCase(expopeningStocksNewToolBarButtons)
						&& actHeadingButtons.equalsIgnoreCase(expHeadingButtons)
						&& actHeaderTxt.equalsIgnoreCase(expHeaderTxt))
				{
					System.out.println("Test Pass : HomeScreen Options Are Displayed");
					excelReader.setCellData(xlfile, xlSheetName, 441, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : HomeScreen Options Are NOT Displayed");
					excelReader.setCellData(xlfile, xlSheetName, 441, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage().substring(0, 50);
				excelReader.setExceptionInExcel(xlfile, xlSheetName, 441, 10, e.getMessage());
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				return false;
			}
		  }
			

		
		public boolean checkOpeningStocksNewVoucherCloseButtonInHomePage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException 
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
				String actUserInfo = userNameDisplay.getText();
				String expUserInfo = excelReader.getCellData(xlSheetName, 453, 7);
				
				excelReader.setCellData(xlfile, xlSheetName, 453, 8, actUserInfo);
				
				System.out.println("User Name Display Value Actual                   : " + actUserInfo +             " Value Expected : " + expUserInfo);
	
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
				companyLogo.click();
				
		        //Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyName));
				String actGetLoginCompanyNameInformation = companyName.getText();
				String actGetLoginCompanyName            = actGetLoginCompanyNameInformation.substring(0, 19);
				String expGetLoginCompanyName            = excelReader.getCellData(xlSheetName, 454, 7);
				companyLogo.click();
				
				excelReader.setCellData(xlfile, xlSheetName, 454, 8, actGetLoginCompanyName);
				
				System.out.println("Company Name Display Value Actual                : " + actGetLoginCompanyName +  " Value Expected : " + expGetLoginCompanyName);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
				
				boolean actlabelDashboard=labelDashboard.isDisplayed();
				boolean actselectDashboard=selectDashboard.isDisplayed();
				boolean actnewAddDashBoard=newAddDashBoard.isDisplayed();
				boolean actdashboardCustomizationSettings=dashboardCustomizationSettings.isDisplayed();
				
				boolean explabelDashboard=true;
				boolean expselectDashboard=true;
				boolean expnewAddDashBoard=true;
				boolean expdashboardCustomizationSettings=true;
				
				System.out.println("labelDashboard  : "+actlabelDashboard+" "+explabelDashboard);
				System.out.println("selectDashboard  : "+actselectDashboard+" "+expselectDashboard);
				System.out.println("newAddDashBoard  : "+actnewAddDashBoard+" "+expnewAddDashBoard);
				System.out.println("dashboardCustomizationSettings  : "+actdashboardCustomizationSettings+" "+expdashboardCustomizationSettings);
				
				boolean actMethod = actlabelDashboard==explabelDashboard && actselectDashboard==expselectDashboard && actnewAddDashBoard==expnewAddDashBoard
									&& actdashboardCustomizationSettings==expdashboardCustomizationSettings;
				
				String actResult = Boolean.toString(actMethod);
				
				excelReader.setCellData(xlfile, xlSheetName, 452, 8, actResult.toUpperCase());
				
				if(actUserInfo.equalsIgnoreCase(expUserInfo) && actGetLoginCompanyName.equalsIgnoreCase(expGetLoginCompanyName) && actMethod==true)
				{
					System.out.println("test pass : Document History Pop Displayed");
					excelReader.setCellData(xlfile, xlSheetName, 452, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("test Fail : Document History Pop NOT Displayed");
					excelReader.setCellData(xlfile, xlSheetName, 452, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage().substring(0, 50);
				excelReader.setExceptionInExcel(xlfile, xlSheetName, 452, 10, e.getMessage());
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				return false;
			}
		}
		
		
	
	   //Financials Menu // Opening Balance Voucher Page
		
		@FindBy(xpath="//*[@id='60']/div")
		private static WebElement  financialsMenu; 
		
			@FindBy(xpath="//*[@id='61']/span")
			private static WebElement  financialsTransactionMenu; 		

				@FindBy(xpath="//*[@id='2001']/span")
				private static WebElement  cashAndBankMenu; 
				
		     		@FindBy(xpath="//*[@id='2002']/span")
					private static WebElement  receiptsVoucher;
					
					@FindBy(xpath="//*[@id='2003']/span")
					private static WebElement  paymentsVoucher;
					
					@FindBy(xpath="//*[@id='2004']/span")
					private static WebElement  pettyVoucher;
					
					@FindBy(xpath="//*[@id='2005']/span")
					private static WebElement  postDatedReceiptsVoucher;
								
					@FindBy(xpath="//*[@id='2006']/span")
					private static WebElement  postDatedPaymentsVoucher;
					
					@FindBy(xpath="//*[@id='108']/span")
					private static WebElement  defineChequeSeries;
					
					@FindBy(xpath="//*[@id='109']/span")
					private static WebElement  cancelCheque;				
	
				@FindBy(xpath="//*[@id='2007']/span")
				private static WebElement  financialsTransactionsPurchaseMenu; 
				
					@FindBy(xpath="//*[@id='2008']/span")
					private static WebElement  purchaseVoucher;
					
					@FindBy(xpath="//*[@id='2009']/span")
					private static WebElement  purchaseReturnsVoucher;
											
				@FindBy(xpath="//*[@id='2014']/span")
				private static WebElement  financialsTransactionsSalesMenu;
					
					@FindBy(xpath="//*[@id='2015']/span")
					private static WebElement  salesInvoicesVoucher;
					
					@FindBy(xpath="//*[@id='2016']/span")
					private static WebElement  salesReturnsVoucher;
					
					@FindBy(xpath="//*[@id='2020']/span")
					private static WebElement  cashSales;
							
					@FindBy(xpath="//*[@id='2021']/span")
					private static WebElement  hirePurchaseSales;
				
				@FindBy(xpath="//*[@id='2023']/span")
				private static WebElement  financialsTransactionsJournalsMenu;
				
				    @FindBy(xpath="//*[@id='2032']/span")
					private static WebElement  journalsEntriesVoucher;
					
					@FindBy(xpath="//*[@id='2025']/span")
					private static WebElement  forexJVVoucher;
					
					@FindBy(xpath="//*[@id='2029']/span")
					private static WebElement  interdepartmentaljvVoucher;
					
					@FindBy(xpath="//*[@id='2024']/span")
					private static WebElement  oldJouranlEntriesVoucher;
					
					@FindBy(xpath="//*[@id='2026']/span")
					private static WebElement  debitNotesVoucher;
					
					@FindBy(xpath="//*[@id='2030']/span")
					private static WebElement  debitNotesLinewiseVoucher;
					
					@FindBy(xpath="//*[@id='2027']/span")
					private static WebElement  creditNotesVoucher;
					
					@FindBy(xpath="//*[@id='2031']/span")
					private static WebElement  creditNotesLinewiseVoucher;
					
					@FindBy(xpath="//*[@id='2028']/span")
					private static WebElement  openingBalancesVoucher;
					
					@FindBy(xpath="//*[@id='2046']/span")
					private static WebElement  fixedAssetsDepreciationVoucher;
				
				@FindBy(xpath="//*[@id='219']/span")
				private static WebElement  financialsTransactionsAutoPostingsMenu;
				
					@FindBy(xpath="//*[@id='77']/span")
					private static WebElement  recurringJournalVoucher;
					
					@FindBy(xpath="//*[@id='79']/span")
					private static WebElement  postRecurringJournal;
					
					@FindBy(xpath="//*[@id='92']/span")
					private static WebElement  recurringJournalTemplate;
					
					@FindBy(xpath="//*[@id='91']/span")
					private static WebElement  postInterest;
					
					@FindBy(xpath="//*[@id='90']/span")
					private static WebElement  convertMaturedPDCs;
					
					@FindBy(xpath="//*[@id='161']/span")
					private static WebElement assignPDCLimit;
					
					@FindBy(xpath="//*[@id='166']/span")
					private static WebElement  stockReplenishment;

			@FindBy(xpath="//*[@id='62']/span")
			private static WebElement  financialsCreditManagementMenu; 
			
				@FindBy(xpath="//*[@id='63']/span")
				private static WebElement  paymentTerms;
				
				@FindBy(xpath="//*[@id='64']/span")
				private static WebElement  financeTerms;
				
				@FindBy(xpath="//*[@id='65']/span")
				private static WebElement  reminderTerms;		
				
				@FindBy(xpath="//*[@id='89']/span")
				private static WebElement  sendReminder;
				
				@FindBy(xpath="//*[@id='217']/span")
				private static WebElement  delinquency;
				
					@FindBy(xpath="//*[@id='73']/span")
					private static WebElement  questionnarie;
					
					@FindBy(xpath="//*[@id='218']/span")
					private static WebElement  delinquencyMgmt;
					
				@FindBy(xpath="//*[@id='35']/span")
				private static WebElement  creidtApproval;
				
		    @FindBy(xpath="//*[@id='81']/span")
		    private static WebElement  financialsReportsMenu; 
		    
			    @FindBy(xpath="//*[@id='500']/span")
				private static WebElement  ledger;
	
				@FindBy(xpath="//*[@id='658']/span")
				private static WebElement  ledgerDetail;
	
				@FindBy(xpath="//*[@id='501']/span")
				private static WebElement  subLedger;
				
				@FindBy(xpath="//*[@id='82']/span")
				private static WebElement  cashAndBankBooksMenu;
				
					@FindBy(xpath="//*[@id='510']/span")
					private static WebElement  cashBookReport;
					
					@FindBy(xpath="//*[@id='511']/span")
					private static WebElement  bankBookReport;
					
					@FindBy(xpath="//*[@id='512']/span")
					private static WebElement  pettyCashBokReport;
					
					@FindBy(xpath="//*[@id='513']/span")
					private static WebElement  dayBookReport;
					
					@FindBy(xpath="//*[@id='83']/span")
					private static WebElement  bankReconciliationReport;
					
					@FindBy(xpath="//*[@id='84']/span")
					private static WebElement  bankReconciliationImport;
					
					@FindBy(xpath="//*[@id='85']/span")
					private static WebElement  customerVendorReconciliation;
				
					@FindBy(xpath="//*[@id='537']/span")
					private static WebElement  bankReconciliationStatement;
						
					@FindBy(xpath="//*[@id='162']/span")
					private static WebElement chequeDiscountingMenu;
				
				@FindBy(xpath="//*[@id='502']/span")
				private static WebElement  salesReportsMenu;
				
					@FindBy(xpath="//*[@id='503']/span")
					private static WebElement  salesRegisterReport;
	
					@FindBy(xpath="//*[@id='504']/span")
					private static WebElement  salesReturnRegisterReport;
					
					@FindBy(xpath="//*[@id='505']/span")
					private static WebElement summarySalesBookReport;
					
					@FindBy(xpath="//*[@id='628']/span")
					private static WebElement monthlySalesBookReport;
					
					@FindBy(xpath="//*[@id='629']/span")
					private static WebElement  topCustomersListReport;
				
				@FindBy(xpath="//*[@id='506']/span")
				private static WebElement  purchaseReportsMenu;
				
					@FindBy(xpath="//*[@id='507']/span")
					private static WebElement  purchaseRegisterReport;
					
					@FindBy(xpath="//*[@id='508']/span")
					private static WebElement  purchaseReturnRegisteReport;
					
					@FindBy(xpath="//*[@id='509']/span")
					private static WebElement  summaryPurchaseBookReport;
							
				@FindBy(xpath="//*[@id='514']/span")
				private static WebElement  registersReportMenu;
				
					@FindBy(xpath="//*[@id='516']/span")
					private static WebElement  openingBalanceRegisterReport;
					
					@FindBy(xpath="//*[@id='515']/span")
					private static WebElement journalEntriesRegisterReport;
					
					@FindBy(xpath="//span[contains(text(),'Credit Note Register')]")
					private static WebElement creditNoteRegisterReport;
					
					@FindBy(xpath="//*[@id='610']/span")
					private static WebElement  debitNoteRegisterReport;
					
					@FindBy(xpath="//*[@id='598']/span")
					private static WebElement  receiptsRegisterReport;
					
					@FindBy(xpath="//*[@id='599']/span")
					private static WebElement  paymentRegisterReport;
					
					@FindBy(xpath="//*[@id='518']/span")
					private static WebElement  pdcReceiptsRegisterReport;
					
					@FindBy(xpath="//*[@id='519']/span")
					private static WebElement pdcPaymentsRegisterReport;
					
					@FindBy(xpath="//*[@id='517']/span")
					private static WebElement  entryJournalRegisterMenu;
							
				@FindBy(xpath="//*[@id='523']/span")
				private static WebElement  salesAndPurchasesReportMenu;
				
					@FindBy(xpath="//*[@id='524']/span")
					private static WebElement  salesGroupedByCustomerReport;
					
					@FindBy(xpath="//*[@id='525']/span")
					private static WebElement  salesGroupedByProductReport;
					
					@FindBy(xpath="//*[@id='526']/span")
					private static WebElement  salesGroupedByDepartmentReport;
					
					@FindBy(xpath="//*[@id='527']/span")
					private static WebElement  purchasesGroupedByVendorReport;
					
					@FindBy(xpath="//*[@id='528']/span")
					private static WebElement  purchasesGroupedByProductReport;
					
					@FindBy(xpath="//*[@id='529']/span")
					private static WebElement  purchasesGroupedByDepartmentReport;		
				
				@FindBy(xpath="//*[@id='568']/span")
				private static WebElement  MiscellaneousAnalysisReportMenu;
				
					@FindBy(xpath="//*[@id='569']/span")
					private static WebElement  peakAndLowBalancesReport;
					
					@FindBy(xpath="//*[@id='570']/span")
					private static WebElement  comprativeAnalysisReport;
					
					@FindBy(xpath="//*[@id='571']/span")
					private static WebElement  transactionsTypeAnalysisReport;
					
					@FindBy(xpath="//*[@id='572']/span")
					private static WebElement  abcAnalysisReport;
					
					@FindBy(xpath="//*[@id='597']/span")
					private static WebElement  interestCalculationReport;
	
				@FindBy(xpath="//*[@id='536']/span")
				private static WebElement  mastersInformationMenu;
				
			     	@FindBy(xpath="//*[@id='538']/span")
					private static WebElement  masterInfoMenu;
					
					@FindBy(xpath="//*[@id='144']/span")
					private static WebElement  productLabelMenu;
					
					@FindBy(xpath="//*[@id='573']/span")
					private static WebElement  unitConversionMenu;
						
					@FindBy(xpath="//*[@id='147']/span")
					private static WebElement  skidDefinitionMenu;
									
				@FindBy(xpath="//*[@id='520']/span")
				private static WebElement  auditTrailMenu;
				
					@FindBy(xpath="//*[@id='521']/span")
					private static WebElement  auditTrailtransactionsReport;
					
					@FindBy(xpath="//*[@id='522']/span")
					private static WebElement  aAuditTrailloginsReport;
				
				@FindBy(xpath="//*[@id='204']/span")
				private static WebElement  accountQuery;
				
		    @FindBy(xpath="//*[@id='530']/span")
		    private static WebElement  financialsFinalAccountsMenu; 
		    
			    @FindBy(xpath="//*[@id='531']/span")
				private static WebElement trialBalanceReport;
						
				@FindBy(xpath="//*[@id='532']/span")
				private static WebElement profitandLossReport;
				
				@FindBy(xpath="//*[@id='533']/span")
				private static WebElement  tradingAccountReport;
				
				@FindBy(xpath="//*[@id='534']/span")
				private static WebElement  tradingandProfitAndLossReport;
				
				@FindBy(xpath="//*[@id='535']/span")
				private static WebElement  balanceSheetReport;				
				
				@FindBy(xpath="//*[@id='592']/span")
				private static WebElement  finalAccountSchedulesReport;
				
				@FindBy(xpath="//*[@id='593']/span")
				private static WebElement  fundFlowReport;
				
				@FindBy(xpath="//*[@id='594']/span")
				private static WebElement  cashFlowReport;
				
				@FindBy(xpath="//*[@id='252']/span")
				private static WebElement  cashFlowCalendarReport;
				
				@FindBy(xpath="//*[@id='595']/span")
				private static WebElement  cashFlowAnalysisReport;
				
				@FindBy(xpath="//*[@id='632']/span")
				private static WebElement  advanceCashFlowReport;
				
				@FindBy(xpath="//*[@id='630']/span")
				private static WebElement  incomeExpenseTrendsReport;
				
				@FindBy(xpath="//*[@id='655']/span")
				private static WebElement  receivablePayableReport;
			
			@FindBy(xpath="//*[@id='558']/span")
			private static WebElement  financialsReceivableAndPayableAnalysisMenu; 
			
				@FindBy(xpath="//*[@id='605']/span")
				private static WebElement customerDetailMenu;
				
					@FindBy(xpath="//*[@id='559']/span")
					private static WebElement  customerListingOfOutstandingBillsReport;
					
					@FindBy(xpath="//*[@id='560']/span")
					private static WebElement  customerStatementsReport;
					
					@FindBy(xpath="//*[@id='560']/span")
					private static WebElement  customerDueDateAnalysisReport;
					
					@FindBy(xpath="//*[@id='563']/span")
					private static WebElement  customerAgeingDetailsReport;
					
					@FindBy(xpath="//*[@id='564']/span")
					private static WebElement  customerDetailAgeingbyDueDateReport;
					
					@FindBy(xpath="//*[@id='566']/span")
					private static WebElement  customerOverdueAnalysisReport;
				
				@FindBy(xpath="//*[@id='607']/span")
				private static WebElement  customerSummaryMenu;
						
					@FindBy(xpath="//*[@id='562']/span")
					private static WebElement  customerAgeingSummaryMenu;
					
					@FindBy(xpath="//*[@id='565']/span")
					private static WebElement  customerSummaryAgeingByDueDateMenu;
					
					@FindBy(xpath="//*[@id='567']/span")
					private static WebElement  customerOverdueSummaryMenu;
					
					@FindBy(xpath="//*[@id='539']/span")
					private static WebElement  customerbillwiseSummaryMenu;	
				
				@FindBy(xpath="//*[@id='606']/span")
				private static WebElement  vendorDetailMenu;
				
					@FindBy(xpath="//*[@id='541']/span")
					private static WebElement  vendorListingoFOutstandingBillsReport;
						
					@FindBy(xpath="//*[@id='542']/span")
					private static WebElement  vendorStatementsReport;
					
					@FindBy(xpath="//*[@id='543']/span")
					private static WebElement  vendorDueDateAnalysisReport;
					
					@FindBy(xpath="//*[@id='545']/span")
					private static WebElement  vendorAgeingDetailsReport;
						
					@FindBy(xpath="//*[@id='546']/span")
					private static WebElement  vendorDetailVendorDetailAgeingByDueDateMenu;
				
					@FindBy(xpath="//*[@id='548']/span")
					private static WebElement  vendorOverdueAnalysisMenu;
					
				@FindBy(xpath="//*[@id='608']/span")
				private static WebElement  vendorSummaryMenu;
				
					@FindBy(xpath="//*[@id='544']/span")
					private static WebElement  vendorAgeingSummaryReport;
					
					@FindBy(xpath="//*[@id='547']/span")
					private static WebElement  vendorSummaryAgeingByDueDateReport;
					
					@FindBy(xpath="//*[@id='549']/span")
					private static WebElement  vendorOverdueSummaryReport;
					
					@FindBy(xpath="//*[@id='634']/span")
					private static WebElement  vendorbillWiseSummaryReport;
				
				@FindBy(xpath="//*[@id='75']/span")
				private static WebElement  letterofCredit;
				
				@FindBy(xpath="//*[@id='165']/span")
				private static WebElement  releaseLetterofCredit;
		
			@FindBy(xpath="//*[@id='3301']/span")
			private static WebElement  financialsBudgetMenu; 
			
				@FindBy(xpath="//*[@id='3302']/span")
				private static WebElement  defineBudgetReport;
				
				@FindBy(xpath="//*[@id='3303']/span")
				private static WebElement  confirmBudgetReport;
				
				@FindBy(xpath="//*[@id='3304']/span")
				private static WebElement  reviseBudgetMenu;
				
					@FindBy(xpath="//*[@id='3305']/span")
					private static WebElement  appendBudget;
					
					@FindBy(xpath="//*[@id='3306']/span")
					private static WebElement  addORReduceBudget;
					
					@FindBy(xpath="//*[@id='3307']/span")
					private static WebElement  transferBudget;
				
				@FindBy(xpath="//*[@id='3309']/span")
				private static WebElement  approveBudgetReport;
				
				@FindBy(xpath="//*[@id='3310']/span")
				private static WebElement  rejectedBudgetReport;
				
				@FindBy(xpath="//*[@id='3321']/span")
				private static WebElement  budgetReportsMenu;
				
					@FindBy(xpath="//*[@id='666']/span")
					private static WebElement  advancedBudgetReportMenu;
					
					@FindBy(xpath="//*[@id='669']/span")
					private static WebElement  revisedBudgetReportMenu;
			
					
			@FindBy(xpath="//*[@id='3311']/span")
			private static WebElement  financialsOnlinePaymentsMenu;   
			
				@FindBy(xpath="//*[@id='3312']/span")
				private static WebElement  onlineBankRegistrationMenu;
				
				@FindBy(xpath="/html/body/section/div[2]/aside/section/ul/li[2]/ul/li[7]/ul/li[2]/a/span")
				private static WebElement  issuePaymentToBankMenu;
				
				@FindBy(xpath="/html/body/section/div[2]/aside/section/ul/li[2]/ul/li[7]/ul/li[3]/a/span")
				private static WebElement  reconcilePaymentsMenu;
				
				@FindBy(xpath="//*[@id='3315']/span")
				private static WebElement  onlineBankReconcilationMenu;
				
				@FindBy(xpath="//*[@id='3317']/span")
				private static WebElement  bankStatementMenu;	
			    
				@FindBy(xpath="//*[@id='dashName']")
				private static WebElement dashboard;

				
				
				@FindBy(xpath = "//ul[@id='navigation_menu']/li[2]/ul/li/a/span")
				private static List<WebElement> financialsMenusList;

		
		public static boolean checkFinancialsMenu() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
				
				System.err.println(" Entered   ************************");
				
				Thread.sleep(10000);
		
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
				financialsMenu.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
				
				boolean actFinancialsTransactionsMenuIsDisplay      = financialsTransactionMenu.isDisplayed();
		    	boolean actFinancialsCreditManagementMenuIsDisplay  = financialsCreditManagementMenu.isDisplayed(); 	
		    	boolean actFinancialsReportsMenuIsDisplay           = financialsReportsMenu.isDisplayed();
		    	boolean actFinancialsFinalAccountsMenuIsDisplay     = financialsFinalAccountsMenu.isDisplayed();
		    	boolean actFinancialsReceivablePayableMenuIsDisplay = financialsReceivableAndPayableAnalysisMenu.isDisplayed();
		    	boolean actFinancialsBudgetMenuIsDisplay            = financialsBudgetMenu.isDisplayed();
		    	boolean actFinancialsOnlinePaymentMenuIsDisplay     = financialsOnlinePaymentsMenu.isDisplayed();
		    		    	
				boolean expFinancialsTransactionsMenuIsDisplay      = true;
		    	boolean expFinancialsCreditManagementMenuIsDisplay  = true; 	
		    	boolean expFinancialsReportsMenuIsDisplay           = true;
		    	boolean expFinancialsFinalAccountsMenuIsDisplay     = true;
		    	boolean expFinancialsReceivablePayableMenuIsDisplay = true;
		    	boolean expFinancialsBudgetMenuIsDisplay            = true;
		    	boolean expFinancialsOnlinePaymentMenuIsDisplay     = true;
		    	    	
		    	System.out.println("FinancialsTransactionsMenuDisplay     : " + actFinancialsTransactionsMenuIsDisplay   +    "  Value Expected  " + expFinancialsTransactionsMenuIsDisplay);	
		    	System.out.println("FinancialsCreditManagementMenuDisplay : " + actFinancialsCreditManagementMenuIsDisplay  + "  Value Expected  " + expFinancialsCreditManagementMenuIsDisplay); 	
		    	System.out.println("FinancialsReportsMenuDisplay          : " + actFinancialsReportsMenuIsDisplay   +         "  Value Expected  " + expFinancialsReportsMenuIsDisplay);	   
		     	System.out.println("FinancialsFinalAccountsMenuDisplay    : " + actFinancialsReportsMenuIsDisplay  +          "  Value Expected  " + expFinancialsFinalAccountsMenuIsDisplay); 	
		    	System.out.println("FinancialsReportsMenuDisplay          : " + actFinancialsReceivablePayableMenuIsDisplay + "  Value Expected  " + expFinancialsReceivablePayableMenuIsDisplay);
		      	System.out.println("FinancialsCreditManagementMenuDisplay : " + actFinancialsBudgetMenuIsDisplay  +           "  Value Expected  " + expFinancialsBudgetMenuIsDisplay); 	
		    	System.out.println("FinancialsReportsMenuDisplay          : " + actFinancialsOnlinePaymentMenuIsDisplay   +   "  Value Expected  " + expFinancialsOnlinePaymentMenuIsDisplay);
		   		     	
		   
		    	int count										  = financialsMenusList.size();
		    	
		    	ArrayList<String> actList  = new ArrayList<String>();
		    	
		    	for (int i = 0; i < count; i++) 
		    	{
		    		String data		                              = financialsMenusList.get(i).getText();
		    		actList.add(data);
				}
		    	
		    	String actFinancialsMenusList					  = actList.toString();
		    	String expFinancialsMenusList					  = excelReader.getCellData(xlSheetName, 1000, 7);
	    			    	
		    	System.out.println("Financials Menu Names Display Text Actual Values      :  " + actFinancialsMenusList);
		    	System.out.println("Financials Menu Names Display Text Expected Values    :  " + expFinancialsMenusList);
		    	
		    	excelReader.setCellData(xlfile, xlSheetName, 1000, 8, actFinancialsMenusList);
		    	
				if(actFinancialsTransactionsMenuIsDisplay==expFinancialsTransactionsMenuIsDisplay  
						&& actFinancialsCreditManagementMenuIsDisplay==expFinancialsCreditManagementMenuIsDisplay
						&& actFinancialsReportsMenuIsDisplay==expFinancialsReportsMenuIsDisplay 
						&& actFinancialsFinalAccountsMenuIsDisplay==expFinancialsFinalAccountsMenuIsDisplay
						&& actFinancialsReceivablePayableMenuIsDisplay==expFinancialsReceivablePayableMenuIsDisplay
						&& actFinancialsBudgetMenuIsDisplay==expFinancialsBudgetMenuIsDisplay
						&& actFinancialsOnlinePaymentMenuIsDisplay==expFinancialsOnlinePaymentMenuIsDisplay
						&& actFinancialsMenusList.equalsIgnoreCase(expFinancialsMenusList))
				{
					excelReader.setCellData(xlfile, xlSheetName, 999, 9, resPass);
					return true;
				}
				else
				{
					excelReader.setCellData(xlfile, xlSheetName, 999, 9, resFail);
					return false;
				}
			}	
			catch (Exception e) 
			  {
				  String exception =e.getMessage();
				  excelReader.setExceptionInExcel(xlfile, xlSheetName, 999, 10, exception);
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				  return false;
			  }
				
		 }
		
		
		
		
		
		
		 @FindBy(xpath="//ul[@id='navigation_menu']/li[2]/ul/li[1]/ul/li/a/span")
		 private static List<WebElement> financialsTransactionsMenus;

		 
		 
		 
		 public static boolean checkTransactionsMenuInFinanceMenu() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{	
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
				financialsTransactionMenu.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankMenu));
				
				boolean actFinancialsCashAndBankMenuIsDisplay   = cashAndBankMenu.isDisplayed();
		    	boolean actFinancialsPurchaseMenuIsDisplay      = financialsTransactionsPurchaseMenu.isDisplayed(); 	
		    	boolean actFinancialsSalesIsDisplay             = financialsTransactionsSalesMenu.isDisplayed();
		    	boolean actFinancialsJournalsMenuIsDisplay      = financialsTransactionsJournalsMenu.isDisplayed();
		    	boolean actFinancialsAutoPostingMenuIsDisplay   = financialsTransactionsAutoPostingsMenu.isDisplayed();
		   
		    		    	
				boolean expFinancialsCashAndBankMenuIsDisplay   = true;
		    	boolean expFinancialsPurchaseMenuIsDisplay      = true; 	
		    	boolean expFinancialsSalesIsDisplay             = true;
		    	boolean expFinancialsJournalsMenuIsDisplay      = true;
		    	boolean expFinancialsAutoPostingMenuIsDisplay   = true;
		    	    	    	
		    	System.out.println("FinancialsCashAndBankMenuDisplay  : " + actFinancialsCashAndBankMenuIsDisplay   +  "  Value Expected  " + expFinancialsCashAndBankMenuIsDisplay);	
		    	System.out.println("FinancialsPurchaseMenuDisplay     : " + actFinancialsPurchaseMenuIsDisplay  +      "  Value Expected  " + expFinancialsPurchaseMenuIsDisplay); 	
		    	System.out.println("FinancialsSalesMenuDisplay        : " + actFinancialsSalesIsDisplay   +            "  Value Expected  " + expFinancialsSalesIsDisplay);	   
		     	System.out.println("FinancialsJournalsMenuDisplay     : " + actFinancialsJournalsMenuIsDisplay  +      "  Value Expected  " + expFinancialsJournalsMenuIsDisplay); 	
		    	System.out.println("FinancialsAutoPostingMenuDisplay  : " + actFinancialsAutoPostingMenuIsDisplay +    "  Value Expected  " + expFinancialsAutoPostingMenuIsDisplay);
		     	     		   
		    	
		    	int actTransactionsMenusCount			=financialsTransactionsMenus.size();
				int expTransactionsMenusCount			=5;
				
				System.out.println("FinanceTransactionsMenusCount Value Actual  : "+actTransactionsMenusCount+"  Value Expected  "+expTransactionsMenusCount); 	
		    	
		    	int count							   = financialsMenusList.size();
		    	
		    	ArrayList financialTransactionsList = new ArrayList<String>();
				
				for (int i = 0; i < actTransactionsMenusCount; i++) 
				{
					String data = financialsTransactionsMenus.get(i).getText();
					
					financialTransactionsList.add(data);
				}
				
				String actFinancialTransactionsList = financialTransactionsList.toString();
				String expFinancialTransactionsList = excelReader.getCellData(xlSheetName, 1002, 7);;
				
				excelReader.setCellData(xlfile, xlSheetName, 1002, 8, actFinancialTransactionsList);
				
				
				System.out.println(actFinancialTransactionsList);
				System.out.println(expFinancialTransactionsList);
				
				if(actFinancialsCashAndBankMenuIsDisplay==expFinancialsCashAndBankMenuIsDisplay  
						&& actFinancialsPurchaseMenuIsDisplay==expFinancialsPurchaseMenuIsDisplay
						&& actFinancialsSalesIsDisplay==expFinancialsSalesIsDisplay 
						&& actFinancialsJournalsMenuIsDisplay==expFinancialsJournalsMenuIsDisplay
						&& actFinancialsAutoPostingMenuIsDisplay==expFinancialsAutoPostingMenuIsDisplay
						&& actTransactionsMenusCount==expTransactionsMenusCount && actFinancialTransactionsList.equalsIgnoreCase(expFinancialTransactionsList))
				{
					excelReader.setCellData(xlfile, xlSheetName, 1001, 9, resPass);
					return true;
				}
				else
				{
					excelReader.setCellData(xlfile, xlSheetName, 1001, 9, resFail);
					return false;
				}
			}	
			catch (Exception e) 
			  {
				  String exception =e.getMessage();
				  excelReader.setExceptionInExcel(xlfile, xlSheetName, 1001, 10, exception);
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				  return false;
			  }
		 }
		


			/*@FindBy(xpath="//*[@id='2066']/span")
			private static WebElement  jvVatVoucher;*/

			@FindBy(xpath="//*[@id='2067']/span")
			private static WebElement  nonjvVatVoucher;
			
			/*@FindBy(xpath="//*[@id='2068']/span")
			private static WebElement  debitNotesVatVoucher;
			*/
			@FindBy(xpath="//span[contains(text(),'Debit Notes VAT')]")
			private static WebElement  debitNotesVatVoucher;
			
			@FindBy(xpath="//span[contains(text(),'Credit Notes VAT')]")
			private static WebElement  creditNotesVatVoucher;
			
			
			
			/*@FindBy(xpath="//*[@id='2069']/span")
			private static WebElement  creditNotesVatVoucher;*/
		 
			@FindBy(xpath="//ul[@id='navigation_menu']/li[2]/ul/li[1]/ul/li[4]/ul/li/a/span")
			private static List<WebElement> financialsTransactionsJournalsMenus;
		 
		 
		 public static boolean checkFinancialsMenuTransactionsMenuJournalsMenu() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsJournalsMenu));
				financialsTransactionsJournalsMenu.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(openingBalancesVoucher));
					
				boolean actJournalsEntriesVoucherIsDisplay         = journalsEntriesVoucher.isDisplayed();
		    	boolean actForexJVVoucherIsDisplay                 = forexJVVoucher.isDisplayed(); 	
		    	boolean actInterdepartmentalJVVoucherIsDisplay     = interdepartmentaljvVoucher.isDisplayed();
		    	boolean actOldJournalEntriesVoucherIsDisplay       = oldJouranlEntriesVoucher.isDisplayed();
		    	boolean actDebitNotesVoucherIsDisplay              = debitNotesVoucher.isDisplayed();
		    	boolean actDebitNotesLineWiseVoucherIsDisplay      = debitNotesLinewiseVoucher.isDisplayed();
		    	boolean actCreditNotesLineWiseVoucherIsDisplay     = creditNotesLinewiseVoucher.isDisplayed();
		    	
		    	//boolean actJVVatVoucherIsDisplay                   = jvVatVoucher.isDisplayed();
		    	//boolean actNonJvVatVoucherIsDisplay                = nonjvVatVoucher.isDisplayed();
		    	boolean actDebitNotesVatVoucherIsDisplay           = debitNotesVatVoucher.isDisplayed();
		    	boolean actCreditNotesVatVoucherIsDisplay          = creditNotesVatVoucher.isDisplayed();
		    	
		    	boolean actOpeningBalanceVoucherIsDisplay          = openingBalancesVoucher.isDisplayed();
		    	boolean actFixedAssetsDepreciationVoucherIsDisplay = fixedAssetsDepreciationVoucher.isDisplayed();
		    	
		    		
				boolean expJournalsEntriesVoucherIsDisplay         = true;
		    	boolean expForexJVVoucherIsDisplay                 = true; 	
		    	boolean expInterdepartmentalJVVoucherIsDisplay     = true;
		    	boolean expOldJournalEntriesVoucherIsDisplay       = true;
		    	boolean expDebitNotesVoucherIsDisplay              = true;
		    	boolean expDebitNotesLineWiseVoucherIsDisplay      = true;
		    	boolean expCreditNotesLineWiseVoucherIsDisplay     = true;
		    	
		    	boolean expJVVatVoucherIsDisplay                   = true;
		    	boolean expNonJvVatVoucherIsDisplay                = true;
		    	boolean expDebitNotesVatVoucherIsDisplay           = true;
		    	boolean expCreditNotesVatVoucherIsDisplay          = true;
		    	
		    	boolean expOpeningBalanceVoucherIsDisplay          = true;
		    	boolean expFixedAssetsDepreciationVoucherIsDisplay = true;
		    	    	
		    	System.out.println("JournalsEntriesVoucherIsDisplay         : " + actJournalsEntriesVoucherIsDisplay   +           "  Value Expected  " + expJournalsEntriesVoucherIsDisplay);	
		    	System.out.println("ForexJVVoucherIsDisplay                 : " + actForexJVVoucherIsDisplay  +                    "  Value Expected  " + expForexJVVoucherIsDisplay); 	
		    	System.out.println("InterdepartmentalJVVoucherIsDisplay     : " + actInterdepartmentalJVVoucherIsDisplay   +       "  Value Expected  " + expInterdepartmentalJVVoucherIsDisplay);	   
		     	System.out.println("OldJournalEntriesVoucherIsDisplay       : " + actOldJournalEntriesVoucherIsDisplay  +          "  Value Expected  " + expOldJournalEntriesVoucherIsDisplay); 	
		    	System.out.println("DebitNotesVoucherIsDisplay              : " + actDebitNotesVoucherIsDisplay +                  "  Value Expected  " + expDebitNotesVoucherIsDisplay);
		      	System.out.println("DebitNotesLineWiseVoucherIsDisplay      : " + actDebitNotesLineWiseVoucherIsDisplay  +         "  Value Expected  " + expDebitNotesLineWiseVoucherIsDisplay); 	
		    	System.out.println("CreditNotesLineWiseVoucherIsDisplay     : " + actCreditNotesLineWiseVoucherIsDisplay   +       "  Value Expected  " + expCreditNotesLineWiseVoucherIsDisplay);
		    	//System.out.println("JVVatVouchersIsDisplay                  : " + actJVVatVoucherIsDisplay   +                     "  Value Expected  " + expJVVatVoucherIsDisplay);
		    	//System.out.println("NonJVVatVoucherIsDisplay                : " + actNonJvVatVoucherIsDisplay   +                  "  Value Expected  " + expNonJvVatVoucherIsDisplay);
		    	System.out.println("DebitNotesVatVoucherIsDisplay           : " + actDebitNotesVatVoucherIsDisplay   +             "  Value Expected  " + expDebitNotesVatVoucherIsDisplay);
		    	System.out.println("CreditNotesVatVoucherIsDisplay          : " + actCreditNotesVatVoucherIsDisplay   +            "  Value Expected  " + expCreditNotesVatVoucherIsDisplay);
		    	System.out.println("OpeningBalanceVoucherIsDisplay          : " + actOpeningBalanceVoucherIsDisplay   +            "  Value Expected  " + expOpeningBalanceVoucherIsDisplay);		   		
		    	System.out.println("FixedAssetsDepreciationVoucherIsDisplay : " + actFixedAssetsDepreciationVoucherIsDisplay +     "  Value Expected  " + actFixedAssetsDepreciationVoucherIsDisplay);
		   	
				
				int actJournalsMenusCount				= financialsTransactionsJournalsMenus.size();
				int expJournalsMenusCount				= 14;
				
				System.out.println("JournalsMenusCount  : " + actJournalsMenusCount + "  value expected  " + expJournalsMenusCount);
				
				ArrayList financialTransactionsJournalsList = new ArrayList<String>();
				
				for (int j = 0; j < actJournalsMenusCount; j++) 
				{
					String data = financialsTransactionsJournalsMenus.get(j).getText();
					financialTransactionsJournalsList.add(data);
				}
				
				String actFinancialTransactionsJournalsList = financialTransactionsJournalsList.toString();
				String expFinancialTransactionsJournalsList = excelReader.getCellData(xlSheetName, 1004, 7);
				
				excelReader.setCellData(xlfile, xlSheetName, 1004, 8, actFinancialTransactionsJournalsList);
				
				System.out.println(actFinancialTransactionsJournalsList);
				System.out.println(expFinancialTransactionsJournalsList);
				
				if (actJournalsMenusCount==expJournalsMenusCount && actFinancialTransactionsJournalsList.equalsIgnoreCase(expFinancialTransactionsJournalsList)) 
				{
					excelReader.setCellData(xlfile, xlSheetName, 1003, 9, resPass);
					return true;
				}
				else 
				{
					excelReader.setCellData(xlfile, xlSheetName, 1003, 9, resFail);
					return false;
				}
			}	
			catch (Exception e) 
			  {
				  String exception =e.getMessage();
				  excelReader.setExceptionInExcel(xlfile, xlSheetName, 1003, 10, exception);
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				  return false;
			  }
		 }
		
		 
		
		  public boolean checkOpeningBalanceVoucherDisplayHomePage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		  {
				
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
					
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(openingBalancesVoucher));
				openingBalancesVoucher.click();
				
				Thread.sleep(3200);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
				
				boolean actHomePageNewBtnIsDisplayed = newBtn.isDisplayed();
				boolean actHomePageEditBtn           = editBtn.isDisplayed();		
				boolean actHomePagePrintBtn          = printBtn.isDisplayed();
				boolean actHomePageDeleteBtn         = deleteBtn.isDisplayed();
				boolean actHomePageSuspendBtn        = suspendBtn.isDisplayed();
				boolean actHomePageExportXMLBtn      = exportToXMLBtn.isDisplayed();
				boolean actHomePageSettingsBtn       = settingsBtn.isDisplayed();
				boolean actHomePageCloseBtn          = homeCloseBtn.isDisplayed();
				boolean actHomePageGridCheckBox      = grid_HeaderChkBox.isDisplayed();
				boolean actHomePageSortingBtn        = sortingBtn.isDisplayed();
				boolean actHomePageCreateViewBn      = createViewBtn.isDisplayed();
				boolean actHomePageCustomizeBtn      = customizeBtn.isDisplayed();
				boolean actHomePageFilterBtn         = filterBtn.isDisplayed();
				boolean actHomePageRefreshBtn        = refreshBtn.isDisplayed();
				boolean actHomePageOptionsBtn        = optionsBtn.isDisplayed();
				boolean actHomePageExportBtn         = exportBtn.isDisplayed();
				
				boolean expHomePageNewBtnIsDisplayed = true;	
				boolean expHomePageEditBtn           = true;
				boolean expHomePagePrintBtn          = true;
				boolean expHomePageDeleteBtn         = true;
				boolean expHomePageSuspendBtn        = true;
				boolean expHomePageExportXMLBtn      = true;
				boolean expHomePageSettingsBtn       = true;
				boolean expHomePageCloseBtn          = true;
				boolean expHomePageGridCheckBox      = true;
				boolean expHomePageSortingBtn        = true;
				boolean expHomePageCreateViewBn      = true;
				boolean expHomePageCustomizeBtn      = true;
				boolean expHomePageFilterBtn         = true;
				boolean expHomePageRefreshBtn        = true;
				boolean expHomePageOptionsBtn        = true;
				boolean expHomePageExportBtn         = true;
				
				System.out.println("Home Page New Btn Value Actual           : " + actHomePageNewBtnIsDisplayed+ "  Value Expected : " + expHomePageNewBtnIsDisplayed);
				System.out.println("Home Page Edit Btn Value Actual          : " + actHomePageEditBtn+           "  Value Expected : " + expHomePageEditBtn);
				System.out.println("Home Page Print Btn Value Actual         : " + actHomePagePrintBtn+          "	Value Expected : " + expHomePagePrintBtn);
				System.out.println("Home Page Delete Btn Value Actual        : " + actHomePageDeleteBtn+         "	Value Expected : " + expHomePageDeleteBtn);
				System.out.println("Home Page Suspend Btn Value Actual       : " + actHomePageSuspendBtn+        "	Value Expected : " + expHomePageSuspendBtn);
				
				System.out.println("Home Page Export XML Btn Value Actual    : " + actHomePageExportXMLBtn+      "	Value Expected : " + expHomePageExportXMLBtn);
				System.out.println("Home Page Settings Btn Value Actual      : " + actHomePageSettingsBtn+       "	Value Expected : " + expHomePageSettingsBtn);
				System.out.println("Home Page Close Btn Value Actual         : " + actHomePageCloseBtn+          "	Value Expected : " + expHomePageCloseBtn);
				System.out.println("Home Page Grid check Value Actual        : " + actHomePageGridCheckBox+      "	Value Expected : " + expHomePageGridCheckBox);
				System.out.println("Home Page Sorting Btn Value Actual       : " + actHomePageSortingBtn+        "	Value Expected : " + expHomePageSortingBtn);
				System.out.println("Home Page Create View Btn Value Actual   : " + actHomePageCreateViewBn+      "	Value Expected : " + expHomePageCreateViewBn);
				System.out.println("Home Page Customize Btn Value Actual     : " + actHomePageCustomizeBtn+      "	Value Expected : " + expHomePageCustomizeBtn);
				System.out.println("Home Page Filter check Value Actual      : " + actHomePageFilterBtn+         "	Value Expected : " + expHomePageFilterBtn);
				System.out.println("Home Page Refesh Btn Value Actual        : " + actHomePageRefreshBtn+        "	Value Expected : " + expHomePageRefreshBtn);
				System.out.println("Home Page Options Btn Value Actual       : " + actHomePageOptionsBtn+        "	Value Expected : " + expHomePageOptionsBtn);
				System.out.println("Home Page Export Btn Value Actual        : " + actHomePageExportBtn+         "  Value Expected : " + expHomePageExportBtn);
				
				int count				                 = openingStocksNewToolBarButtons.size();
				
				ArrayList<String> actbuttons             = new ArrayList<String>();
				
				for (int i = 0; i < count; i++) 
				{
					String data                          = openingStocksNewToolBarButtons.get(i).getText();
					actbuttons.add(data);
				}
				    	
				String actopeningStocksNewToolBarButtons = actbuttons.toString();
				String expopeningStocksNewToolBarButtons =  excelReader.getCellData(xlSheetName, 1006, 7);
			
				excelReader.setCellData(xlfile, xlSheetName, 1006, 8, actopeningStocksNewToolBarButtons);
				
				System.out.println("actopeningStocksNewToolBarButtons  : " + actopeningStocksNewToolBarButtons);
				System.out.println("expopeningStocksNewToolBarButtons  : " + expopeningStocksNewToolBarButtons);
				
				String actsetAsDefaultView		=	setAsDefaultView.getText();
				String expsetAsDefaultView		=	excelReader.getCellData(xlSheetName, 1007, 7);
				excelReader.setCellData(xlfile, xlSheetName, 1007, 8, actsetAsDefaultView);
				
				
				//Ribbon Control Icons
		        int count1		= headingOptions.size();
				
				ArrayList<String> headingButtons = new ArrayList<String>();
				
				for (int i = 1; i < count1; i++) 
				{
					String data=headingOptions.get(i).getAttribute("title");
					
					headingButtons.add(data);
				}
				
				String actHeadingButtons = headingButtons.toString();
				String expHeadingButtons = excelReader.getCellData(xlSheetName, 1008, 7);
				excelReader.setCellData(xlfile, xlSheetName, 1008, 8, actHeadingButtons);
				
				
				System.out.println("actopeningStocksNewHeadingButtons  : " + actHeadingButtons);
				System.out.println("expopeningStocksNewHeadingButtons  : " + expHeadingButtons);
				
				//Home Page Column Headings
		        int headerTxtCount		= headerTxtList.size();
				
				ArrayList<String> headerTxt = new ArrayList<String>();
				
				for (int i = 2; i < headerTxtCount; i++) 
				{
					String data=headerTxtList.get(i).getText();
					headerTxt.add(data);
				}
				
				String actHeaderTxt = headerTxt.toString();
				String expHeaderTxt = excelReader.getCellData(xlSheetName, 1009, 7);
				excelReader.setCellData(xlfile, xlSheetName, 1009, 8, actHeaderTxt);
				
				
				System.out.println("actopeningStocksNewHomePageColumnsButtons  : " + actHeaderTxt);
				System.out.println("expopeningStocksNewHomePageColumnsButtons  : " + expHeaderTxt);
				
				if(actHomePageNewBtnIsDisplayed==expHomePageNewBtnIsDisplayed  && actHomePageEditBtn==expHomePageEditBtn && actHomePagePrintBtn==expHomePagePrintBtn
						&& actHomePageDeleteBtn==expHomePageDeleteBtn  && actHomePageSuspendBtn==expHomePageSuspendBtn 
					    && actHomePageExportXMLBtn==expHomePageExportXMLBtn
						&& actHomePageSettingsBtn==expHomePageSettingsBtn && actHomePageCloseBtn==expHomePageCloseBtn && actHomePageGridCheckBox==expHomePageGridCheckBox
						&& actHomePageSortingBtn==expHomePageSortingBtn && actHomePageCreateViewBn==expHomePageCreateViewBn && actHomePageCustomizeBtn==expHomePageCustomizeBtn
						&& actHomePageFilterBtn==expHomePageFilterBtn && actHomePageRefreshBtn==expHomePageRefreshBtn && actHomePageOptionsBtn==expHomePageOptionsBtn
						&& actHomePageExportBtn==expHomePageExportBtn  
						&& actopeningStocksNewToolBarButtons.equalsIgnoreCase(expopeningStocksNewToolBarButtons)
						&& actHeadingButtons.equalsIgnoreCase(expHeadingButtons)
						&& actHeaderTxt.equalsIgnoreCase(expHeaderTxt))
				{
					System.out.println("Test Pass : HomeScreen Options Are Displayed");
					excelReader.setCellData(xlfile, xlSheetName, 1005, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : HomeScreen Options Are NOT Displayed");
					excelReader.setCellData(xlfile, xlSheetName, 1005, 9, resFail);
					return false;
				}
				}

             catch (Exception e) 
			  {
				  String exception =e.getMessage();
				  excelReader.setExceptionInExcel(xlfile, xlSheetName, 1005, 10, exception);
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				  return false;
			  }
			}

		 
		  public boolean checkSaveInCreateViewOfHomePageOfOpeningBalance() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		  {
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		    try
		    {	
		    	
	    	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createViewBtn));
		   	 createViewBtn.click();
		    	
		     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(viewNameTxtInCreateView));
		     viewNameTxtInCreateView.click();
		     
		     viewNameTxtInCreateView.sendKeys(excelReader.getCellData(xlSheetName, 1011, 6));
		     
		     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveOptionInCreateView));
		     saveOptionInCreateView.click();
		     
		     String expSaveViewMessage = excelReader.getCellData(xlSheetName, 1012, 7);
				
			 String actSaveViewMessage = checkValidationMessage(expSaveViewMessage);
			 
			 excelReader.setCellData(xlfile, xlSheetName, 1012, 8, actSaveViewMessage);
				
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createViewNameDisplayInHomePage));
			 
			 String actcreateViewNameDisplayInHomePage = createViewNameDisplayInHomePage.getText();
			 String expcreateViewNameDisplayInHomePage = excelReader.getCellData(xlSheetName, 1013, 7);
			 
			 
			 excelReader.setCellData(xlfile, xlSheetName, 1013, 8, actcreateViewNameDisplayInHomePage);
			 
			 System.out.println("View Display In Home page Value Actual    : " + actcreateViewNameDisplayInHomePage   +     "	 Value Expected : " + expcreateViewNameDisplayInHomePage);
			
			 if(actSaveViewMessage.equalsIgnoreCase(expSaveViewMessage) && actcreateViewNameDisplayInHomePage.equalsIgnoreCase(expcreateViewNameDisplayInHomePage) )
			 {
				System.out.println("Test Pass : View Saved Successfully");
				
				excelReader.setCellData(xlfile, xlSheetName, 1010, 9, resPass);
				return true;
			 }
			 else
			 {
				System.out.println("Test Fail : View NOT Saved Successfully");
				
				excelReader.setCellData(xlfile, xlSheetName, 1010, 9, resFail);
				return false;
			 } 
		   }

          catch (Exception e) 
			  {
				  String exception =e.getMessage();
				  excelReader.setExceptionInExcel(xlfile, xlSheetName, 1010, 10, exception);
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				  return false;
			  }
		 }
		  
	    
		  
  
		  
		  public boolean checkDeleteCreateViewOfHomePageOfOpeningBalance() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		  {
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		    try
		    {
		    	
		     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createViewBtn));
		   	 createViewBtn.click();
		   			
		     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(viewNameTxtInCreateView));
		     viewNameTxtInCreateView.click();
		     
		     viewNameTxtInCreateView.sendKeys(excelReader.getCellData(xlSheetName, 1015, 6));
		     
		     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveOptionInCreateView));
		     saveOptionInCreateView.click();
		     
		     String expSaveViewMessage =excelReader.getCellData(xlSheetName, 1016, 7);
				
			 String actSaveViewMessage = checkValidationMessage(expSaveViewMessage);
			 
			 excelReader.setCellData(xlfile, xlSheetName, 1016, 8, actSaveViewMessage);
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createViewNameDisplayInHomePage));
			 
			 String actcreateViewNameDisplayInHomePage = createViewNameToDeleteDisplayInHomePage.getText();
			 String expcreateViewNameDisplayInHomePage = excelReader.getCellData(xlSheetName, 1017, 7);
			 excelReader.setCellData(xlfile, xlSheetName, 1017, 8, actcreateViewNameDisplayInHomePage);
			 
			 
			 System.out.println("View Display In Home page Value Actual    : " + actcreateViewNameDisplayInHomePage   +     "	 Value Expected : " + expcreateViewNameDisplayInHomePage);
			 
			 Thread.sleep(2000);
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createViewNameToDeleteDisplayInHomePage));
			 createViewNameToDeleteDisplayInHomePage.click();
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteViewButton));
			 deleteViewButton.click();
			 
			 getWaitForAlert();
			 
			 String actAlertMessageOnDeleteView = getAlert().getText();
			 String expAlertMessageOnDeleteView = excelReader.getCellData(xlSheetName, 1018, 7);
			 excelReader.setCellData(xlfile, xlSheetName, 1018, 8, actAlertMessageOnDeleteView);
			 
			 System.out.println("View Display In Home page Value Actual    : " + actAlertMessageOnDeleteView   +     "	 Value Expected : " + expAlertMessageOnDeleteView);
			 
			 getAlert().accept();
			 
			 String expDeleteViewMessage =excelReader.getCellData(xlSheetName, 1019, 7);
				
			 String actDeleteViewMessage = checkValidationMessage(expDeleteViewMessage);
			
			 excelReader.setCellData(xlfile, xlSheetName, 1019, 8, actDeleteViewMessage);
			 
			 int actCount=countOfCreateView.size();
			 int expCount=2;
			 
			 System.out.println("Count In Home page Value Actual    : " + actCount   +     "	 Value Expected : " + expCount);
			 
			 if(actSaveViewMessage.equalsIgnoreCase(expSaveViewMessage) && actcreateViewNameDisplayInHomePage.equalsIgnoreCase(expcreateViewNameDisplayInHomePage)
					 && actAlertMessageOnDeleteView.equalsIgnoreCase(expAlertMessageOnDeleteView) && actCount==expCount)
			 {
				System.out.println("Test Pass : View Saved Successfully");
				
				excelReader.setCellData(xlfile, xlSheetName, 1014, 9, resPass);
				return true;
			 }
			 else
			 {
				System.out.println("Test Fail : View NOT Saved Successfully");
				
				excelReader.setCellData(xlfile, xlSheetName, 1014, 9, resFail);
				return false;
			 } 
		   }
		    catch (Exception e) 
			  {
				  String exception =e.getMessage();
				  excelReader.setExceptionInExcel(xlfile, xlSheetName, 1014, 10, exception);
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				  return false;
			  }
		 }
		  

		 
		  
		  public boolean checkEditCreateViewOfHomePageOfOpeningBalance() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		  {
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		    try
		    {
		      	
		    	
		    	Thread.sleep(2000);
		    	
		        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createViewNameToEditInHomePage));
		        createViewNameToEditInHomePage.click();
		   		
		        //Home Page Column Headings
		        
		        int headerTxtCount		= headerTxtList.size();
				
				ArrayList<String> headerTxt = new ArrayList<String>();
				
				for (int i = 2; i < headerTxtCount; i++) 
				{
					String data=headerTxtList.get(i).getText();
					headerTxt.add(data);
				}
				
				String actHeaderTxt = headerTxt.toString();
				String expHeaderTxt = excelReader.getCellData(xlSheetName, 1021, 7);
                 excelReader.setCellData(xlfile, xlSheetName, 1021, 8, actHeaderTxt);
			
				System.out.println("actopeningStocksNewHomePageColumnsButtons  : " + actHeaderTxt);
				System.out.println("expopeningStocksNewHomePageColumnsButtons  : " + expHeaderTxt);
			
				//Click on Edit option

				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editViewOptionInHomePage));
				 editViewOptionInHomePage.click();
				 
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(viewTypeInCreateView));
			
			     boolean actViewTxt              = viewNameTxtInCreateView.isDisplayed();
				 boolean actDataSet              = dataSetInCreateView.isDisplayed();
				 boolean actViewType             = viewTypeInCreateView.isDisplayed();
				 boolean actAuthorization        = authorizationInCreateView.isDisplayed();
				 boolean actCheckStatus          = checkSatusInCreateView.isDisplayed();
				 boolean actQC                   = qcInCreateView.isDisplayed();
				 boolean actSuspendStatus        = suspendStatusInCreateView.isDisplayed();
				 boolean actFilterOption         = filterOptionInCreateView.isDisplayed();
				 boolean actAdvanceFilter        = advanvefilterOptionInCreateView.isDisplayed();
				 boolean actSaveOption           = saveOptionInCreateView.isDisplayed();
				 boolean actCloseOption          = closeOptionInCreateView.isDisplayed();
				
				 boolean expViewTxt              = true;
				 boolean expDataSet              = true;
				 boolean expViewType             = true;
				 boolean expAuthorization        = true;
				 boolean expCheckStatus          = true;
				 boolean expQC                   = true;
				 boolean expSuspendStatus        = true;
				 boolean expFilterOption         = true;
				 boolean expAdvanceFilter        = true;
				 boolean expSaveOption           = true;
				 boolean expCloseOption          = true;
				 
				 System.out.println("View Text Box Value Actual       : " + actViewTxt       +     "  Value Expected : " + expViewTxt);
				 System.out.println("Data Set Value Actual            : " + actDataSet       +     "  Value Expected : " + expDataSet);
				 System.out.println("View Type Value Actual           : " + actViewType      +     "  Value Expected : " + expViewType);
				 System.out.println("Authorization Value Actual       : " + actAuthorization +     "  Value Expected : " + expAuthorization);
				 System.out.println("Check Status Value Actual        : " + actCheckStatus   +     "  Value Expected : " + expCheckStatus);
				 System.out.println("QC Value Actual                  : " + actQC            +     "  Value Expected : " + expQC);
				 System.out.println("Suspend Value Actual             : " + actSuspendStatus +     "  Value Expected : " + expSuspendStatus);
				 System.out.println("Filter Value Actual              : " + actFilterOption  +     "  Value Expected : " + expFilterOption);
				 System.out.println("Advance Filter Value Actual      : " + actAdvanceFilter +     "  Value Expected : " + expAdvanceFilter);
				 System.out.println("Save Option Value Actual         : " + actSaveOption    +     "  Value Expected : " + expSaveOption);
				 System.out.println("Close Option Value Actual        : " + actCloseOption   +     "  Value Expected : " + expCloseOption);
				
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(datasetGetText));
				 String actdatasetGetText       = datasetGetText.getText();
				 String actviewTypeGetText      = viewTypeGetText.getText();
				 String actcheckStatusGetText   = checkStatusGetText.getText();
				 String actsuspendTypeGetText   = suspendStatusGetText.getText();
				 String actauthorizationGetText = authorizationGetText.getText();
				 String actqcGetText            = qcGetText.getText();
				 
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(viewNameGetText));
				 String actGetViewName          = viewNameGetText.getAttribute("value");
				
				 excelReader.setCellData(xlfile, xlSheetName, 1022, 8, actdatasetGetText);
				 excelReader.setCellData(xlfile, xlSheetName, 1023, 8, actviewTypeGetText);
				 excelReader.setCellData(xlfile, xlSheetName, 1024, 8, actcheckStatusGetText);
				 excelReader.setCellData(xlfile, xlSheetName, 1025, 8, actsuspendTypeGetText);
				 excelReader.setCellData(xlfile, xlSheetName, 1026, 8, actauthorizationGetText);
				 excelReader.setCellData(xlfile, xlSheetName, 1027, 8, actqcGetText);
				 excelReader.setCellData(xlfile, xlSheetName, 1028, 8, actGetViewName);
				 
				 String expdatasetGetText       = excelReader.getCellData(xlSheetName, 1022, 7);
				 String expviewTypeGetText      = excelReader.getCellData(xlSheetName, 1023, 7);
				 String expcheckStatusGetText   = excelReader.getCellData(xlSheetName, 1024, 7);
				 String expsuspendTypeGetText   = excelReader.getCellData(xlSheetName, 1025, 7);
				 String expauthorizationGetText = excelReader.getCellData(xlSheetName, 1026, 7);
				 String expqcGetText            = excelReader.getCellData(xlSheetName, 1027, 7);
				 String expGetViewName          = excelReader.getCellData(xlSheetName, 1028, 7);
				 
				 System.out.println("Data Set Value Actual        : " + actdatasetGetText  +      "  Value Expected : " + expdatasetGetText);
				 System.out.println("View Type Value Actual       : " + actviewTypeGetText  +     "  Value Expected : " + expviewTypeGetText);
				 System.out.println("Check Status Value Actual    : " + actcheckStatusGetText +   "  Value Expected : " + expcheckStatusGetText);
				 System.out.println("Suspend Value Actual         : " + actsuspendTypeGetText +   "  Value Expected : " + expsuspendTypeGetText);
				 System.out.println("Authorization Value Actual   : " + actauthorizationGetText + "  Value Expected : " + expauthorizationGetText);
				 System.out.println("QC Value Actual              : " + actqcGetText            + "  Value Expected : " + expqcGetText);
				 System.out.println("View Name Value Actual       : " + actGetViewName +          "  Value Expected : " + expGetViewName);

			
				
			     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(viewNameTxtInCreateView));
			     viewNameTxtInCreateView.click();
			     viewNameTxtInCreateView.sendKeys(Keys.END);
			     viewNameTxtInCreateView.sendKeys(Keys.SHIFT,Keys.HOME);
			     viewNameTxtInCreateView.sendKeys(excelReader.getCellData(xlSheetName, 1029, 6));
			     
			     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(suspendStatusInCreateView));
			     suspendStatusInCreateView.sendKeys(excelReader.getCellData(xlSheetName, 1030, 6));
			     
			     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveOptionInCreateView));
			     saveOptionInCreateView.click();
			     
			     String expSaveViewMessage =excelReader.getCellData(xlSheetName, 1031, 7);
					
				 String actSaveViewMessage = checkValidationMessage(expSaveViewMessage);
				 
				 excelReader.setCellData(xlfile, xlSheetName, 1031, 8, actSaveViewMessage);
				 
				 System.out.println("Save View In Home page Value Actual    : " + actSaveViewMessage   +     "	 Value Expected : " + expSaveViewMessage);
				 
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createViewNameDisplayInHomePage));
				 
				 String actcreateViewNameDisplayInHomePage = createViewNameToEditInHomePage.getText();
				 String expcreateViewNameDisplayInHomePage = excelReader.getCellData(xlSheetName, 1032, 7);
				 
				 excelReader.setCellData(xlfile, xlSheetName, 1032, 8, actcreateViewNameDisplayInHomePage);
				 
				 
				 System.out.println("View Display In Home page Value Actual    : " + actcreateViewNameDisplayInHomePage   +     "	 Value Expected : " + expcreateViewNameDisplayInHomePage);
				 
					
				 if(actHeaderTxt.equalsIgnoreCase(expHeaderTxt) && actViewTxt==expViewTxt &&    actDataSet==expDataSet && actViewType==expViewType && actAuthorization==expAuthorization
						&& actCheckStatus==expCheckStatus && actQC==expQC && actSuspendStatus==expSuspendStatus 
						&& actFilterOption==expFilterOption && actAdvanceFilter==expAdvanceFilter && actSaveOption==expSaveOption && actCloseOption==expCloseOption
						
						&& actdatasetGetText.equalsIgnoreCase(expdatasetGetText) && actviewTypeGetText.equalsIgnoreCase(expviewTypeGetText)
						&& actcheckStatusGetText.equalsIgnoreCase(expcheckStatusGetText) && actsuspendTypeGetText.equalsIgnoreCase(expsuspendTypeGetText)
						&& actauthorizationGetText.equalsIgnoreCase(expauthorizationGetText) && actqcGetText.equalsIgnoreCase(expqcGetText)
						&& actGetViewName.equalsIgnoreCase(expGetViewName)
						
						&& actSaveViewMessage.equalsIgnoreCase(expSaveViewMessage) && actcreateViewNameDisplayInHomePage.equalsIgnoreCase(expcreateViewNameDisplayInHomePage))
				  {
					System.out.println("Test Pass : View Saved Successfully");
					
					excelReader.setCellData(xlfile, xlSheetName, 1020, 9, resPass);
					return true;
				  }
				  else
				  {
					System.out.println("Test Fail : View NOT Saved Successfully");
					
					excelReader.setCellData(xlfile, xlSheetName, 1020, 9, resFail);
					return false;
				  } 
			    }
		    catch (Exception e) 
			  {
				  String exception =e.getMessage();
				  excelReader.setExceptionInExcel(xlfile, xlSheetName, 1020, 10, exception);
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				  return false;
			  }
		   }
		  
		  
		  
		  public boolean checkOpeningBalanceVoucherHomePageNewOptionOnClickDisplayEntryPage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		  {
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		    try
		    {
		     
		     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			 newBtn.click();
			
			 checkUserFriendlyMessage();
			
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(freeFlowBtn));
			 
			 boolean   OpeningStocksNewVouherFreeFlowBtn=freeFlowBtn.isDisplayed();
			 
			 String actOpeningStocksNewVouherFreeFlowBtn=Boolean.toString(OpeningStocksNewVouherFreeFlowBtn);
			 String  expOpeningStocksNewVouherFreeFlowBtn=excelReader.getCellData(xlSheetName, 1034, 7);
					
			 excelReader.setCellData(xlfile, xlSheetName, 1034, 8, actOpeningStocksNewVouherFreeFlowBtn.toUpperCase());
			 
			 System.out.println("Opening Stocks Voucher Free Flow Option Value Actual : " + actOpeningStocksNewVouherFreeFlowBtn+ "  Value Expected : " + expOpeningStocksNewVouherFreeFlowBtn);
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoSideBarMinimizeExpandBtn));
			 infoSideBarMinimizeExpandBtn.click();
			  
			 if(actOpeningStocksNewVouherFreeFlowBtn.equalsIgnoreCase(expOpeningStocksNewVouherFreeFlowBtn) )
			 {
				System.out.println("Test Pass : entry Page  Displayed");
				excelReader.setCellData(xlfile, xlSheetName, 1033, 9, resPass);
				return true;
			 } 
			 else
			 {
				System.out.println("Test Fail : entry Page NOT Displayed");
				excelReader.setCellData(xlfile, xlSheetName, 1033, 9, resFail);
				return false;
			 } 
		   }


            catch (Exception e) 
			  {
				  String exception =e.getMessage();
				  excelReader.setExceptionInExcel(xlfile, xlSheetName, 1033, 10, exception);
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				  return false;
			  }
		 }

		

		  public boolean checkOpeningBalanceVoucherEntryPageRibbonControl() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		  {
		 	excelReader=new ExcelReader(POJOUtility.getExcelPath());
		 	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		 	
		 	try
		 	{
		 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(freeFlowBtn));
		 		
		 		boolean actEntryPageJumpToHeaderSectionBtn = jumpToHeaderSectionBtn.isDisplayed();
		 		boolean actEntryPageJumpToBodySectionBtn   = jumpToBodySectionBtn.isDisplayed();
		 		boolean actEntryPageJumpToFooterBtn        = jumpToFooterBtn.isDisplayed();
		 		boolean actEntryPageNewBtn                 = new_newBtn.isDisplayed();
		 		boolean actEntryPageSaveBtn                = saveBtn.isDisplayed();
		 		boolean actEntryPagePreviousBtn            = previousBtn.isDisplayed();
		 		boolean actEntryPageNextBtn                = nextBtn.isDisplayed();
		 		boolean actEntryPagePrintBtn               = new_PrintBtn.isDisplayed();
		 		boolean actEntryPageSuspendBtn             = new_SuspendBtn.isDisplayed();
		 		boolean actEntryPageCloseBtn               = new_CloseBtn.isDisplayed();
		 		boolean actEntryPageToggleBtn              = toggleBtn.isDisplayed();

		 		boolean expEntryPageJumpToHeaderSectionBtn = true;
		 		boolean expEntryPageJumpToBodySectionBtn   = true;
		 		boolean expEntryPageJumpToFooterBtn        = true;
		 		boolean expEntryPageNewBtn	               = true;
		 		boolean expEntryPageSaveBtn                = true;
		 		boolean expEntryPagePreviousBtn            = true;
		 		boolean expEntryPageNextBtn                = true;
		 		boolean expEntryPagePrintBtn               = true;
		 		boolean expEntryPageSuspendBtn             = true;
		 		boolean expEntryPageCloseBtn               = true;
		 		boolean expEntryPageToggleBtn              = true;
		 		
		 		System.out.println("************************************* Opening Balance New Entry Page Ribbon Control Options  ********************************************");
		 		
		 		System.out.println("Jump to Header Value Actual : " + actEntryPageJumpToHeaderSectionBtn+ " Value Expected : " + expEntryPageJumpToHeaderSectionBtn);
		 		System.out.println("Jump To Body Value Actual   : " + actEntryPageJumpToBodySectionBtn+   " Value Expected : " + expEntryPageJumpToBodySectionBtn);
		 		System.out.println("Jump To Footer Value Actual : " + actEntryPageJumpToFooterBtn+        " Value Expected : " + expEntryPageJumpToFooterBtn);
		 		System.out.println("New Btn Value Actual        : " + actEntryPageNewBtn+                 " Value Expected : " + expEntryPageNewBtn);
		 		System.out.println("Save Btn Value Actual       : " + actEntryPageSaveBtn+                " Value Expected : " + expEntryPageSaveBtn);
		 		System.out.println("Previous Btn Value Actual   : " + actEntryPagePreviousBtn+            " Value Expected : " + expEntryPagePreviousBtn);
		 		System.out.println("Next Btn Value Actual       : " + actEntryPageNextBtn+                " Value Expected : " + expEntryPageNextBtn);
		 		System.out.println("Print Btn Value Actual      : " + actEntryPagePrintBtn+               " Value Expected : " + expEntryPagePrintBtn);
		 		System.out.println("Suspend Btn Value Actual    : " + actEntryPageSuspendBtn+             " Value Expected : " + expEntryPageSuspendBtn);
		 		System.out.println("Close Btn Value Actual      : " + actEntryPageCloseBtn+               " Value Expected : " + expEntryPageCloseBtn);
		 		System.out.println("Toggle Btn Value Actual     : " + actEntryPageToggleBtn+              " Value Expected : " + expEntryPageToggleBtn);
		 	
		 		
		 		boolean actMethod=actEntryPageJumpToHeaderSectionBtn==expEntryPageJumpToHeaderSectionBtn && actEntryPageJumpToBodySectionBtn==expEntryPageJumpToBodySectionBtn 
		 				&& actEntryPageJumpToFooterBtn==expEntryPageJumpToFooterBtn && actEntryPageJumpToFooterBtn==expEntryPageJumpToFooterBtn
		 				&& actEntryPageNewBtn==expEntryPageNewBtn && actEntryPageSaveBtn==expEntryPageSaveBtn && actEntryPagePreviousBtn==expEntryPagePreviousBtn
		 				&& actEntryPageNextBtn==expEntryPageNextBtn && actEntryPagePrintBtn==expEntryPagePrintBtn &&actEntryPageSuspendBtn==expEntryPageSuspendBtn 
		 				&& actEntryPageCloseBtn==expEntryPageCloseBtn && actEntryPageToggleBtn==expEntryPageToggleBtn ;
		 		
		 		
		 		
		 		String actResult=Boolean.toString(actMethod);
		 		String expResult=excelReader.getCellData(xlSheetName, 1036, 7);
		 		
		 		excelReader.setCellData(xlfile, xlSheetName, 1036, 8, actResult.toUpperCase());
		 		
		 		
		 		
		 		if(actMethod==true)
		 		{
		 			System.out.println("Test Pass : Entry Page Options Are Displayed");
		 			excelReader.setCellData(xlfile, xlSheetName, 1035, 9, resPass);
		 			return true;
		 		}
		 		else
		 		{
		 			System.out.println("Test Fail : Entry Page NOT Displayed");
		 			excelReader.setCellData(xlfile, xlSheetName, 1035, 9, resFail);
		 			return false;
		 		}
		 	}
		 	
		 	catch (Exception e) 
			  {
				  String exception =e.getMessage();
				  excelReader.setExceptionInExcel(xlfile, xlSheetName, 1035, 10, exception);
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				  return false;
			  }
		  }
		 	

          @FindBy(xpath="//label[contains(text(),'Copy Document')]")
          private static WebElement CopyDocumentBtn;
 
		  @FindBy(xpath="//label[contains(text(),'Copy to Clipboard')]")
		  private static WebElement copytoClipboardBtn;
		 
		  @FindBy(xpath="//label[contains(text(),'Paste from Clipboard')]")
		  private static WebElement pastefromClipboardBtn;
		
		 
		 
		  @FindBy(xpath="//label[contains(text(),'Posting details')]")
		  private static WebElement postingDetailsBtn;
		
		 
		  @FindBy(xpath="//label[contains(text(),'Export to XML')]")
		  private static WebElement exporttoXMLBtn;
		 
		  @FindBy(xpath="//label[contains(text(),'Setting')]")
		  private static WebElement settingBtn;
		 
		  @FindBy(xpath="//label[contains(text(),'Calculator')]")
		  private static WebElement calculatorBtn;
		 
		  @FindBy(xpath="//label[contains(text(),'Auto Load')]")
		  private static WebElement autoLoadBtn;
		  
		  public boolean checkOpeningBalanceEntryPageOptionsUnderToggleBtn() throws EncryptedDocumentException, InvalidFormatException, IOException
		  {
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
		    	toggleBtn.click();
		    	
		        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(autoLoadBtn));
				
				boolean actCopyDocumentBtn                =CopyDocumentBtn.isDisplayed();
				boolean actcopytoClipboardBtn             =copytoClipboardBtn.isDisplayed();
				boolean actpastefromClipboardBtn          =pastefromClipboardBtn.isDisplayed();
				boolean actpostingDetailsBtn              =postingDetailsBtn.isDisplayed();
				boolean actexporttoXMLBtn                 =exporttoXMLBtn.isDisplayed();
				boolean actsettingBtn                     =settingBtn.isDisplayed();
				boolean actcalculatorBtn                  =calculatorBtn.isDisplayed();
				boolean actautoLoadBtn                    =autoLoadBtn.isDisplayed();

				
				boolean expCopyDocumentBtn            =true;
				boolean expcopytoClipboardBtn         =true;
				boolean exppastefromClipboardBtn      =true;
				boolean exppostingDetailsBtn          =true;
				boolean expreversEntryBtn             =true;
				boolean expexporttoXMLBtn             =true;
				boolean expsettingBtn                 =true;
				boolean expcalculatorBtn              =true;
				boolean expautoLoadBtn                =true;

				
				System.out.println("*************************************checkOpeningBalanceEntryPageOptionsUnderToggleBtn ********************************************");
				System.out.println("Entry Page RC Copy Document Value Actual:     "+actCopyDocumentBtn+"         Value Expected : "+expCopyDocumentBtn);
				System.out.println("Entry Page RC copy to ClipboardValue Actual    :"+actcopytoClipboardBtn+"    Value Expected : "+expcopytoClipboardBtn);
				System.out.println("Entry Page RC pastefromClipboard Value Actual  :"+actpastefromClipboardBtn+" Value Expected : "+exppastefromClipboardBtn);
				System.out.println("Entry Page RC postingDetails Value Actual      :"+actpostingDetailsBtn+"     Value Expected : "+actpostingDetailsBtn);
				System.out.println("Entry Page RC export to XML Value Actual       :"+actexporttoXMLBtn+"        Value Expected : "+expexporttoXMLBtn);
				System.out.println("Entry Page RC  setting  Value Actual           :"+actsettingBtn+"            Value Expected : "+expsettingBtn);
				System.out.println("Entry Page RC calculator  Value Actual         :"+actcalculatorBtn+"         Value Expected : "+expcalculatorBtn);
				System.out.println("Entry Page RC auto Load Value Actual           :"+actautoLoadBtn+"           Value Expected : "+expautoLoadBtn);
				
				
				boolean actMethod=actCopyDocumentBtn==expCopyDocumentBtn && actcopytoClipboardBtn==expcopytoClipboardBtn 
						&& actpastefromClipboardBtn==exppastefromClipboardBtn && actpostingDetailsBtn==exppostingDetailsBtn 
						&& actexporttoXMLBtn==expexporttoXMLBtn && actsettingBtn==expsettingBtn &&actcalculatorBtn==expcalculatorBtn 
						&& actautoLoadBtn==expautoLoadBtn;
				
				String actResult=Boolean.toString(actMethod);
				String expResult=excelReader.getCellData(xlSheetName, 1038, 7);
		 		
		 		excelReader.setCellData(xlfile, xlSheetName, 1038, 8, actResult.toUpperCase());
				
				
				if( actMethod==true )
				{
					System.out.println("Test Pass : Entry Page toggle  Options Are Displayed");
					excelReader.setCellData(xlfile, xlSheetName, 1037, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Entry Page  toggle  NOT Displayed");
					excelReader.setCellData(xlfile, xlSheetName, 1037, 9, resFail);
					return false;
				}
				}
				catch (Exception e) 
				  {
					  String exception =e.getMessage();
					  excelReader.setExceptionInExcel(xlfile, xlSheetName, 1037, 10, exception);
					  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
					  return false;
				  }
				
			}

		 	
		  
		  
		  
		  
		  
		  
		    
		    @FindBy(xpath="//li[@id='navigationtab2']//span[contains(text(),'Miscellaneous')]")
		    private static WebElement settingMiscellaneousTab;
		                   
		    @FindBy(xpath="//select[@id='misc_CurrencyAddCurrencyIn']")
		    private static WebElement miscAddCurrencyDropdown;

		    @FindBy(xpath="//input[@id='misc_currencyInputExchangeRate']")
		    private static WebElement miscInputExchangeRateChkbox;

		    @FindBy(xpath="//input[@id='misc_currencyInputLocalExchangeRate']")
		    private static WebElement miscInputLocalExchangeRateChkbox;

		    @FindBy(xpath="//select[@id='misc_arapDueDate']")
		    private static WebElement miscDueDateDropdown;

		    @FindBy(xpath="//i[@class='icon-update icon-font6']")
		    private static WebElement settingUpdateIcon;

		    @FindBy(xpath="//i[@class='icon-close icon-font6']")
		    private static WebElement settingCloseIcon;
		  
		  
		  
		  
		
		  
		  
		  
		  public boolean  checkCustomizationOptionInOpeningBalance() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		  {
		    	
		    	excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		    	
				try
				{
		    	
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingBtn));
				settingBtn.click();

				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingMiscellaneousTab));
				settingMiscellaneousTab.click();
				
				Thread.sleep(5000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscAddCurrencyDropdown));
				miscAddCurrencyDropdown.click();
			    Select Currency=new Select(miscAddCurrencyDropdown);
			    Currency.selectByVisibleText(excelReader.getCellData(xlSheetName, 1040, 6));
			    
			    if(miscInputExchangeRateChkbox.isSelected()==false && miscInputLocalExchangeRateChkbox.isSelected()==false)
			    {
				    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscInputExchangeRateChkbox));
			        miscInputExchangeRateChkbox.click();
			        
				    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscInputLocalExchangeRateChkbox));
				    miscInputLocalExchangeRateChkbox.click();
			    }
			    
			    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingUpdateIcon));
			    settingUpdateIcon.click();
			    
			    
			    String expValidationMessage=excelReader.getCellData(xlSheetName, 1041, 7);
				
				String validationMessage=checkValidationMessage(expValidationMessage);

				
				 excelReader.setCellData(xlfile, xlSheetName, 1041, 8, validationMessage.toUpperCase());
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingCloseIcon));
				settingCloseIcon.click();
				
				if(validationMessage.startsWith(expValidationMessage))
				{
					System.out.println("****Test Pass : Data Updated Successfully*********");
					
					excelReader.setCellData(xlfile, xlSheetName, 1039, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("****Test Fail : Data  Not Updated Successfully*********");
					excelReader.setCellData(xlfile, xlSheetName, 1039, 9, resFail);
					
					return false;
				}
		  }
		  catch (Exception e) 
		  {
			  String exception =e.getMessage();
			  excelReader.setExceptionInExcel(xlfile, xlSheetName, 1039, 10, exception);
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		  }
			}

		
			
			@FindBy(xpath="//*[@id='id_transactionentry_footer_panel_summary_value_16']")
			private static WebElement vocJEFooterAmount;
			
			  
			public boolean checkOpeningBalanceVoucherEntryPageHeaderFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			  {
			 		
			   excelReader=new ExcelReader(POJOUtility.getExcelPath());
			   xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			 	
			   try
			   {
				    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
					newBtn.click();
					
					checkUserFriendlyMessage();
							   
				    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
					
					boolean actEntryPageHeaderFieldsDocNumber     = documentNumberTxt.isDisplayed();
					boolean actEntryPageHeaderFieldsDate          = dateTxt.isDisplayed();
					boolean actEntryPageHeaderFieldsCurrency      = voucherHeaderCurrency.isDisplayed();
					boolean actEntryPageHeaderFieldsExchangeRate  = voucherHeaderExchangeRate.isDisplayed();
					boolean actEntryPageHeaderFieldsdepartment    = departmentTxt.isDisplayed();
					boolean actEntryPageHeaderFieldsLocalExeRate  = voucherHeaderLocalExchangeRate.isDisplayed();
					boolean actEntryPageHeaderFieldsNarration     = openingBalance_NarrationTxt.isDisplayed();
					
					
					boolean expEntryPageHeaderFieldsDocNumber    = true;
					boolean expEntryPageHeaderFieldsDate         = true;
					boolean expEntryPageHeaderFieldsCurrency     = true;
					boolean expEntryPageHeaderFieldsdepartment   = true;
					boolean expEntryPageHeaderFieldsLocalExeRate = true;
					boolean expEntryPageHeaderFieldsNarration    = true;
					
					
					System.out.println("Entry Page DocNumber Actual:                      "+actEntryPageHeaderFieldsDocNumber+"      Value Expected : "+expEntryPageHeaderFieldsDocNumber);
					System.out.println("Entry Page EntryPageHeaderFieldsDate Actual        :"+actEntryPageHeaderFieldsDate+"         Value Expected : "+expEntryPageHeaderFieldsDate);
					System.out.println("Entry Page EntryPageHeaderFieldsCurrency Actual    :"+actEntryPageHeaderFieldsCurrency+"     Value Expected : "+expEntryPageHeaderFieldsCurrency);
					System.out.println("Entry Page EntryPageHeaderFieldsdepartment Actual  :"+actEntryPageHeaderFieldsdepartment+"   Value Expected : "+expEntryPageHeaderFieldsdepartment);
					System.out.println("Entry Page EntryPageHeaderFieldsLocalExeRate Actual:"+actEntryPageHeaderFieldsLocalExeRate+" Value Expected : "+expEntryPageHeaderFieldsLocalExeRate);
					System.out.println("Entry Page RC Jump To Footer Value Actual:          "+actEntryPageHeaderFieldsNarration+"    Value Expected : "+expEntryPageHeaderFieldsNarration);

					
					boolean actMethod=actEntryPageHeaderFieldsDocNumber==expEntryPageHeaderFieldsDocNumber && actEntryPageHeaderFieldsDate==expEntryPageHeaderFieldsDate 
							&& actEntryPageHeaderFieldsNarration==expEntryPageHeaderFieldsNarration && 
							actEntryPageHeaderFieldsCurrency==expEntryPageHeaderFieldsCurrency && actEntryPageHeaderFieldsdepartment==expEntryPageHeaderFieldsdepartment &&
							actEntryPageHeaderFieldsLocalExeRate==expEntryPageHeaderFieldsLocalExeRate;
					
					String actResult=Boolean.toString(actMethod);
					String expResult=excelReader.getCellData(xlSheetName, 1043, 7);
					
					excelReader.setCellData(xlfile, xlSheetName, 1043, 8, actResult.toUpperCase());

					
					if(actMethod==true)
					{
						System.out.println("Test Pass : entry Page Header Options Are Displayed");
						excelReader.setCellData(xlfile, xlSheetName, 1042, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail : entry Page NOT Displayed");
						excelReader.setCellData(xlfile, xlSheetName, 1042, 9, resFail);
						return false;
					}
				  } 	
			    catch (Exception e) 
				  {
					  String exception =e.getMessage();
					  excelReader.setExceptionInExcel(xlfile, xlSheetName, 1042, 10, exception);
					  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
					  return false;
				  }
				 }
				 		 	
				 	
			   public boolean checkOpeningBalanceVoucherEntryPageBodyFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			   {
			 	excelReader=new ExcelReader(POJOUtility.getExcelPath());
			 	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			 	
			 	try
			 	{
			 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));		
				
					boolean actEntryPageBodyAccTxt            = vocBodyAccTxt.isDisplayed();
					boolean actEntryPageBodyDebitTxt          = vocBodyDebitTxt.isDisplayed();
					boolean actEntryPageBodyCreditTxt         = vocBodyCreditTxt.isDisplayed();
					boolean actEntryPageBodyReferenceTxt      = vocBodyReferenceTxt.isDisplayed();
					boolean actEntryPageBodyFieldsAccount     = select1stRow_1stColumn.isDisplayed();
					boolean actEntryPageBodyFieldsDebit       = select1stRow_2ndColumn.isDisplayed();
					boolean actEntryPageBodyFieldscredit      = select1stRow_3rdColumn.isDisplayed();
					boolean actEntryPageBodyFieldsReference   = select1stRow_4thColumn.isDisplayed();
								
					boolean expEntryPageBodyAccTxt            = true;
					boolean expEntryPageBodyDebitTxt          = true;
					boolean expEntryPageBodyCreditTxt         = true;
					boolean expEntryPageBodyReferenceTxt      = true;
					boolean expEntryPageBodyFieldsAccount     = true;
					boolean expEntryPageBodyFieldsDebit       = true;
					boolean expEntryPageBodyFieldscredit      = true;
					boolean expEntryPageBodyFieldsReference   = true;

					System.out.println("************************************* checkOpeningBalanceNewEntryPageBodyFields  ********************************************");
					
					System.out.println("Entry Page Body Fields Account Txt Actual  : " + actEntryPageBodyAccTxt+          " Value Expected : " + expEntryPageBodyAccTxt);
					System.out.println("Entry Page Body Fields Debit Txt Actual    : " + actEntryPageBodyDebitTxt+        " Value Expected : " + expEntryPageBodyDebitTxt);
					System.out.println("Entry Page Body Fields Credit Txt Actual   : " + actEntryPageBodyCreditTxt+       " Value Expected : " + expEntryPageBodyCreditTxt);
					System.out.println("Entry Page Body Fields Ref Txt Actual      : " + actEntryPageBodyReferenceTxt+    " Value Expected : " + expEntryPageBodyReferenceTxt);	
					System.out.println("Entry Page Body Fields Account  Actual     : " + actEntryPageBodyFieldsAccount+   " Value Expected : " + expEntryPageBodyFieldsAccount);
					System.out.println("Entry Page Body Fields Debit   Actual      : " + actEntryPageBodyFieldsDebit+     " Value Expected : " + expEntryPageBodyFieldsDebit);
					System.out.println("Entry Page Body Fields Credit   Actual     : " + actEntryPageBodyFieldscredit+    " Value Expected : " + expEntryPageBodyFieldscredit);
					System.out.println("Entry Page Body Fields Ref  Actual         : " + actEntryPageBodyFieldsReference+ " Value Expected : " + expEntryPageBodyFieldsReference);
					
					
					
					boolean actMethod=actEntryPageBodyAccTxt==expEntryPageBodyAccTxt && actEntryPageBodyDebitTxt==expEntryPageBodyDebitTxt 
							&& actEntryPageBodyCreditTxt==expEntryPageBodyCreditTxt && actEntryPageBodyReferenceTxt==expEntryPageBodyReferenceTxt 
							&& actEntryPageBodyFieldsAccount==expEntryPageBodyFieldsAccount &&actEntryPageBodyFieldsDebit==expEntryPageBodyFieldsDebit  && 
							actEntryPageBodyFieldscredit==expEntryPageBodyFieldscredit && actEntryPageBodyFieldsReference==expEntryPageBodyFieldsReference;
					
					String actResult=Boolean.toString(actMethod);
					String expResult=excelReader.getCellData(xlSheetName, 1045, 7);
					
					excelReader.setCellData(xlfile, xlSheetName, 1045, 8, actResult.toUpperCase());
					
					
					
					if(actMethod==true)
					{
						excelReader.setCellData(xlfile, xlSheetName, 1044, 9, resPass);
						return true;
					}
					else
					{
						excelReader.setCellData(xlfile, xlSheetName, 1044, 9, resFail);
						return false;
					}
				  } 	
			    catch (Exception e) 
				  {
					  String exception =e.getMessage();
					  excelReader.setExceptionInExcel(xlfile, xlSheetName, 1044, 10, exception);
					  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
					  return false;
				  }
				 }
				 	
				 	
				 	
				 	
			 	public boolean checkOpeningBalanceVoucherEntryPageFooterFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			 	{
			 		
			 	  excelReader=new ExcelReader(POJOUtility.getExcelPath());
			 	  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			 		
			 	  try
			 	  {
			 		excelReader=new ExcelReader(POJOUtility.getExcelPath());
			 		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			 		
			 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vocFooterdebitAmount));
			 		
			 		boolean EntryPagevocFooterdebitAmount  =vocFooterdebitAmount.isDisplayed();
			 		String actEntryPagevocFooterdebitAmount=Boolean.toString(EntryPagevocFooterdebitAmount);
			 		
			 		excelReader.setCellData(xlfile, xlSheetName, 1047, 8, actEntryPagevocFooterdebitAmount.toUpperCase());
			 		
			 		boolean EntryPageFooterCreditAmount    =vocFooterCreditAmount.isDisplayed();
		            String actEntryPageFooterCreditAmount=Boolean.toString(EntryPageFooterCreditAmount);
			 		
		            excelReader.setCellData(xlfile, xlSheetName, 1048, 8, actEntryPageFooterCreditAmount.toUpperCase());
			 		
			 		String  expEntryPagevocFooterdebitAmount  =excelReader.getCellData(xlSheetName, 1047, 7);
			 		String  expEntryPageFooterCreditAmount    = excelReader.getCellData(xlSheetName, 1048, 7);

			 		System.out.println("*********************************** checkOpeningBalanceNewEntryPageFooterFields  ***************************************************");
			 		System.out.println("Entry Page Footer Fields Debit Amt Value Actual   : " + actEntryPagevocFooterdebitAmount + "   Value Expected : " + expEntryPagevocFooterdebitAmount);
			 		System.out.println("Entry Page Footer Fields Credit Amt  Value Actual : " + actEntryPageFooterCreditAmount   + "  Value Expected  : " + expEntryPageFooterCreditAmount);

			 		
			 		
			 		if(actEntryPagevocFooterdebitAmount.equalsIgnoreCase(expEntryPagevocFooterdebitAmount) && 
			 				actEntryPageFooterCreditAmount.equalsIgnoreCase(expEntryPageFooterCreditAmount))
			 		{
						excelReader.setCellData(xlfile, xlSheetName, 1046, 9, resPass);
						return true;
					}
					else
					{
						excelReader.setCellData(xlfile, xlSheetName, 1046, 9, resFail);
						return false;
					}
				  } 	
			    catch (Exception e) 
				  {
					  String exception =e.getMessage();
					  excelReader.setExceptionInExcel(xlfile, xlSheetName, 1046, 10, exception);
					  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
					  return false;
				  }
				 }
				 	
			 	

			    public boolean checkOpeningBalanceVoucherDocumentNumber() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			    {
			 	  excelReader=new ExcelReader(POJOUtility.getExcelPath());
			 	  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			 		
			 	  try
			 	  {
			 		
				 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
				 		documentNumberTxt.click();
				 		
				 		String  actEntryPageGetDocumentNumberValue   = documentNumberTxt.getAttribute("value");
						String actCurrency                           = voucherHeaderCurrency.getAttribute("value");
						boolean  Department                          = departmentTxt.getText().isEmpty();
						String actDepartment                        =  Boolean.toString(Department);
						String actExchangeRate                       = voucherHeaderExchangeRate.getAttribute("value");
						String actLocalExchangeRate                  = voucherHeaderLocalExchangeRate.getAttribute("value");
						
						
						excelReader.setCellData(xlfile, xlSheetName, 1050, 8, actEntryPageGetDocumentNumberValue);
						excelReader.setCellData(xlfile, xlSheetName, 1051, 8, actCurrency);
						excelReader.setCellData(xlfile, xlSheetName, 1052, 8, actDepartment.toUpperCase());
						excelReader.setCellData(xlfile, xlSheetName, 1053, 8, actExchangeRate);
						excelReader.setCellData(xlfile, xlSheetName, 1054, 8, actLocalExchangeRate);
						
						
						String expEntryPageGetDocumentNumberValue    = excelReader.getCellData(xlSheetName, 1050, 7);
						String expCurrency                           = excelReader.getCellData(xlSheetName, 1051, 7);
						String  expDepartment                        = excelReader.getCellData(xlSheetName, 1052, 7);
						String expExchangeRate                       = excelReader.getCellData(xlSheetName, 1053, 7);
						String expLocalExchangeRate                  = excelReader.getCellData(xlSheetName, 1054, 7);
						
						
						System.out.println("EntryPage DocumentNumberValue             : "+actEntryPageGetDocumentNumberValue +" Value Expected : "+expEntryPageGetDocumentNumberValue);
						System.out.println("EntryPage voucherHeaderCurrency           : "+actCurrency                        +" Value Expected : "+expCurrency);
						System.out.println("EntryPage departmentTxt                   : "+actDepartment                      +" Value Expected : "+expDepartment);
						System.out.println("EntryPage voucherHeaderExchangeRate       : "+actExchangeRate                    +" Value Expected : "+expExchangeRate);
						System.out.println("EntryPage voucherHeaderLocalExchangeRate  : "+actLocalExchangeRate               +" Value Expected : "+expLocalExchangeRate);
						
						
						
						if (actEntryPageGetDocumentNumberValue.equalsIgnoreCase(expEntryPageGetDocumentNumberValue) && 
								actCurrency.equalsIgnoreCase(expCurrency) && actDepartment.equalsIgnoreCase(expDepartment) && actExchangeRate.equalsIgnoreCase(expExchangeRate) && 
								actLocalExchangeRate.equalsIgnoreCase(expLocalExchangeRate))
						{
							excelReader.setCellData(xlfile, xlSheetName, 1049, 9, resPass);
							return true;
						}
						else
						{
							excelReader.setCellData(xlfile, xlSheetName, 1049, 9, resFail);
							return false;
						}
					  } 	
				    catch (Exception e) 
					  {
						  String exception =e.getMessage();
						  excelReader.setExceptionInExcel(xlfile, xlSheetName, 1049, 10, exception);
						  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
						  return false;
					  }
					 }
				 	
				 	
				   public boolean checkOpeningBalanceVoucherDateIsDisable() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
				   { 
				 		
				 	excelReader=new ExcelReader(POJOUtility.getExcelPath());
				 	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				 		
				 	try
				 	{
				 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt_CalenderBtn));
				 		dateTxt_CalenderBtn.click();
				 			
				 		boolean EntryPageGetDatePickerValue  = calender_TodayBtn.isDisplayed();

				 		String actEntryPageGetDatePickerValue=Boolean.toString(EntryPageGetDatePickerValue);
				 		
				 		String  expEntryPageGetDatePickerValue  = excelReader.getCellData(xlSheetName, 1056, 7);

				 		excelReader.setCellData(xlfile, xlSheetName, 1056, 8, actEntryPageGetDatePickerValue.toUpperCase());
				 		
				 		System.out.println("Entry Page Date Calender Value Actual  : " + actEntryPageGetDatePickerValue + "  Value Expected : " + expEntryPageGetDatePickerValue);
				 			
				 		Thread.sleep(3000);
				 		
				 		if(actEntryPageGetDatePickerValue.equalsIgnoreCase(expEntryPageGetDatePickerValue))
				 		{
				 			System.out.println("Test Pass : Calender Opened");
				 			excelReader.setCellData(xlfile, xlSheetName, 1055, 9, resPass);
				 			return true;
				 		}
				 		else
				 		{
				 			System.out.println("Test Fail : Calender Not Opened");
				 			excelReader.setCellData(xlfile, xlSheetName, 1055, 9, resFail);
				 			return false;
				 		}
				 	
				 	 }
				 	  catch (Exception e) 
					  {
						  String exception =e.getMessage();
						  excelReader.setExceptionInExcel(xlfile, xlSheetName, 1055, 10, exception);
						  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
						  return false;
					  }
				   }
				 	
				 	
			 	
			   public boolean checkOpeningBalanceVoucherSaveWithoutMandatoryFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			   {
			 		
			 	excelReader=new ExcelReader(POJOUtility.getExcelPath());
			 	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			 	
			      try
			      {	
				     	 
				     	/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
				  		wareHouseTxt.click();*/
				     	 
				 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
				 		saveBtn.click();
				 			
				 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessage));
				 		
				 		String actGetWarehouseValidationMessage    = errorMessage.getText();
				 		
				 		String GetWarehouseValidationMessageOne = "Controls marked with arrow mark, require Values";
				 		String GetWarehouseValidationMessageTwo = "Main -> Department";
				 		
				 		
				 		String actValidationMessage=GetWarehouseValidationMessageOne+GetWarehouseValidationMessageTwo;
				 		String expValidationMessage=excelReader.getCellData(xlSheetName, 1058, 7);
				 		
				 		
				 		 excelReader.setCellData(xlfile, xlSheetName, 1058, 8, actValidationMessage);
				 		
				 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
				 		errorMessageCloseBtn.click();
				 		
				 		System.out.println("Entry Page voucher Mandatory Validation Value Actual  : " + actGetWarehouseValidationMessage + "  Value Expected : " + GetWarehouseValidationMessageOne+GetWarehouseValidationMessageTwo);
				 		
				 		if(actGetWarehouseValidationMessage.startsWith(GetWarehouseValidationMessageOne) && 
				 				actGetWarehouseValidationMessage.endsWith(GetWarehouseValidationMessageTwo))
				 		{
				 			excelReader.setCellData(xlfile, xlSheetName, 1057, 9, resPass);
				 			
				 			return true;
				 		}
				 		else
				 		{	
				 			excelReader.setCellData(xlfile, xlSheetName, 1057, 9, resFail);
				 			
				 			return false;
				 		}
				      }
			      catch (Exception e) 
				  {
					  String exception =e.getMessage();
					  excelReader.setExceptionInExcel(xlfile, xlSheetName, 1057, 10, exception);
					  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
					  return false;
				  }
				   }
				   
				  
				 
			   @FindBy(xpath="//tbody[@id='id_header_10_table_body']/tr/td[2]")
			   private static List<WebElement> currencyListCount;	  
				  
			   public boolean checkCurrencyInOpeningBalanceVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			   {
					
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
					try
					{
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
					voucherHeaderCurrency.click();
					
					voucherHeaderCurrency.sendKeys(Keys.SHIFT,Keys.HOME);
					
					voucherHeaderCurrency.sendKeys(Keys.SPACE);
					
					int currencycount=currencyListCount.size();
					
					System.err.println(currencycount);
						
					for(int i=0 ; i < currencycount ;i++)
					{
						
						String data=currencyListCount.get(i).getText();
						
						System.out.println("DATA  :"+data);
						
						if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1059, 6)))
						{
							currencyListCount.get(i).click();
							
							break;
						}
					}
						
					voucherHeaderCurrency.sendKeys(Keys.TAB);

					
					//Need to modifying 
					
					
					Thread.sleep(2000);
					
					
			        voucherHeaderCurrency.sendKeys(Keys.TAB);
			             
			        voucherHeaderExchangeRate.click();
			             
			        String actExchangeRate=voucherHeaderExchangeRate.getAttribute("value");
			        String expExchangeRate=excelReader.getCellData(xlSheetName, 1060, 7);               
			             
			        excelReader.setCellData(xlfile, xlSheetName, 1060, 8, actExchangeRate);
			             
			        System.out.println("voucherHeaderExchangeRate : "+actExchangeRate+" Value Expected : "+expExchangeRate);
			             
			             
			        if (actExchangeRate.equalsIgnoreCase(expExchangeRate) )
			          {
		                         System.out.println("Test Pass : Exchange Rate Is Updated ");
		                         excelReader.setCellData(xlfile, xlSheetName, 1059, 9, resPass);
		                         return true;
		                 	}
		                     else
		                     {
		                    	 System.out.println("Test Fail :  Exchange Rate Is  NOt Updated ");
		                    	 excelReader.setCellData(xlfile, xlSheetName, 1059, 9, resFail);
			                             return false;
		                     }        

				}
				    catch (Exception e) 
					  {
						  String exception =e.getMessage();
						  excelReader.setExceptionInExcel(xlfile, xlSheetName, 1059, 10, exception);
						  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
						  return false;
					  }
					   }
				  
				@FindBy(xpath="//*[@id='id_header_10_table_body']/tr")
				private static List<WebElement> openingBalCurrencyList;
				  
				  
				  
			   public boolean checkExchangeRateWithCurrencyAEDInOpeningBalance() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			     {
			             
			             excelReader=new ExcelReader(POJOUtility.getExcelPath());
			             xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			             
			             
			             try
			             {
			             
			             getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
			             voucherHeaderCurrency.click();
			             voucherHeaderCurrency.sendKeys(Keys.SHIFT,Keys.HOME);
			             voucherHeaderCurrency.sendKeys(Keys.SPACE);
					
					     int openingBalCurrencyListCount=openingBalCurrencyList.size();
						
						 for (int i = 0; i < openingBalCurrencyListCount; i++) 
					 	 {
							String data=openingBalCurrencyList.get(i).getText();
							
							if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1061, 6)))
							{
								openingBalCurrencyList.get(i).click();
								break;
							}
					 	 }
			             
			             voucherHeaderCurrency.sendKeys(Keys.TAB);
			             
			             voucherHeaderExchangeRate.click();
			             
			             String actExchangeRate=voucherHeaderExchangeRate.getAttribute("value");
			             String expExchangeRate=excelReader.getCellData(xlSheetName, 1062, 7);               
			             
			             excelReader.setCellData(xlfile, xlSheetName, 1062, 8, actExchangeRate);
			             
			             System.out.println("voucherHeaderExchangeRate : "+actExchangeRate+" Value Expected : "+expExchangeRate);
			                          
			             if (actExchangeRate.equalsIgnoreCase(expExchangeRate) )
			                {
			                             System.out.println("Test Pass : Exchange Rate Is Updated ");
			                             excelReader.setCellData(xlfile, xlSheetName, 1061, 9, resPass);
			                             return true;
			                     }
			                     else
			                     {
			                             System.out.println("Test Fail :  Exchange Rate Is  NOt Updated ");
			                             excelReader.setCellData(xlfile, xlSheetName, 1061, 9, resFail);
			                             return false;
			                     }   
			             
			             }
			             catch (Exception e) 
			   		  {
			   			  String exception =e.getMessage();
			   			  excelReader.setExceptionInExcel(xlfile, xlSheetName, 1061, 10, exception);
			   			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			   			  return false;
			   		  }
			   		   }
				  
				  
				  
			   @FindBy(xpath="//*[@id='id_header_268435459_table_body']/tr/td[2]")
				private static List<WebElement> openingBalDepartmentList;
			 
			 public boolean checkExchangeRateAndLocalExchangeReateWithCurrencyAEDInOpeningBalance() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		     {
		            
		            excelReader=new ExcelReader(POJOUtility.getExcelPath());
		            xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		            
		            try
		            {
		            
		            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		            departmentTxt.click();
		            departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		            departmentTxt.sendKeys(Keys.SPACE);
				
		               
		            WebElement options=departmentTxt;
		    		
		            int OpeningBalDepartmentListCount=openingBalDepartmentList.size();
		            
		            
		            String actOpeningBalDepartmentListCount=Integer.toString(OpeningBalDepartmentListCount);
		            
		            String  expOpeningBalDepartmentListCount=excelReader.getCellData(xlSheetName, 1066, 7);
		            
		            excelReader.setCellData(xlfile, xlSheetName, 1066, 8, actOpeningBalDepartmentListCount);
		            
		            
		    		ArrayList<String> actDepartmentList= new ArrayList<String>(); 
		    	
		    		actDepartmentList.add("AMERICA");
		    	    
		    		actDepartmentList.add("DepartmentST");
		    	    
		    		actDepartmentList.add("DUBAI");
		    		
		    		actDepartmentList.add("INDIA");
		    	   
		    		actDepartmentList.add("SINGPORE"); 
		    		
		    		actDepartmentList.add("WALES");
		    	    
		    		ArrayList<String> expDepartmentList = new ArrayList<String>(); 

		    		int count=openingBalDepartmentList.size();
		    		
		    		System.err.println(count);
		    		
		    		for(int i=0 ; i < count ;i++)
		    		{
		    			String data=openingBalDepartmentList.get(i).getText();
		    			System.err.println("IN FOR LOOP : "+data);
		    			expDepartmentList.add(data);
		    			
		    		}
		    		
		    		System.err.println(expDepartmentList);
		    		
		    		
		    		System.out.println("actDepartmentList"+actDepartmentList);
		    		
		    		System.out.println("expDepartmentList"+expDepartmentList);
		    		
		    		boolean DepartmentValue=actDepartmentList.equals(expDepartmentList);
		    		
		    		
		    		String actDepartmentValue=Boolean.toString(DepartmentValue);
		    		
		    		String  expDepartmentValue=excelReader.getCellData(xlSheetName, 1067, 7);
		            
		    		
		    		excelReader.setCellData(xlfile, xlSheetName, 1067, 8, actDepartmentValue);
		    		
		    		
				    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		            departmentTxt.click();
		            departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		            departmentTxt.sendKeys(Keys.SPACE);
		  		
					
					 for (int i = 0; i < OpeningBalDepartmentListCount; i++) 
				 	 {
						String data=openingBalDepartmentList.get(i).getText();
						
						if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1068, 6)))
						{
							openingBalDepartmentList.get(i).click();
							break;
						}
				 	 }
		            
					 Thread.sleep(2000);
					 
					 departmentTxt.sendKeys(Keys.TAB);
		       
					 Thread.sleep(2000);
		            
		            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		            voucherHeaderCurrency.click();
		            voucherHeaderCurrency.sendKeys(Keys.SHIFT,Keys.HOME);
		            voucherHeaderCurrency.sendKeys(Keys.SPACE);
				
				     int openingBalCurrencyListCount=openingBalCurrencyList.size();
					
					 for (int i = 0; i < openingBalCurrencyListCount; i++) 
				 	 {
						String data=openingBalCurrencyList.get(i).getText();
						
						if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1069, 6)))
						{
							openingBalCurrencyList.get(i).click();
							break;
						}
				 	 }
		            
		            voucherHeaderCurrency.sendKeys(Keys.TAB);
		                 
		            String actExchangeRate=voucherHeaderExchangeRate.getAttribute("value");
		            String expExchangeRate=excelReader.getCellData(xlSheetName, 1070, 7);
			 		
		            excelReader.setCellData(xlfile, xlSheetName, 1070, 8, actExchangeRate);
		            
		            String actLocExchangeRate=voucherHeaderLocalExchangeRate.getAttribute("value");
		            String expLocExchangeRate=excelReader.getCellData(xlSheetName, 1071, 7);
			 		
		            excelReader.setCellData(xlfile, xlSheetName, 1071, 8, expLocExchangeRate);
		            
		            
		            System.out.println("voucherHeaderExchangeRate      : "+actExchangeRate    +" Value Expected : "+expExchangeRate);
		            System.out.println("voucherHeaderLocalExchangeRate : "+actLocExchangeRate +" Value Expected : "+expLocExchangeRate);
		            
		            if (actExchangeRate.equalsIgnoreCase(expExchangeRate) && actLocExchangeRate.equalsIgnoreCase(expLocExchangeRate))
		               {
		                            System.out.println("Test Pass : Exchange Rate Is Updated ");
		                            excelReader.setCellData(xlfile, xlSheetName, 1065, 9, resPass);
		                            return true;
		                    }
		                    else
		                    {
		                            System.out.println("Test Fail :  Exchange Rate Is  NOt Updated ");
		                            excelReader.setCellData(xlfile, xlSheetName, 1065, 9, resFail);
		                            return false;
		                    } 
		            }
		            catch (Exception e) 
		  		  {
		  			  String exception =e.getMessage();
		  			  excelReader.setExceptionInExcel(xlfile, xlSheetName, 1065, 10, exception);
		  			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  			  return false;
		  		  }
		  		   }

			 public boolean checkExchangeRateAndLocalExchangeReateWithCurrencyUSDInOpeningBalance() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		     {
		            excelReader=new ExcelReader(POJOUtility.getExcelPath());
		            xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		            
		            try 
		            {
		            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		            voucherHeaderCurrency.click();
		            voucherHeaderCurrency.sendKeys(Keys.SHIFT,Keys.HOME);
		            voucherHeaderCurrency.sendKeys(Keys.SPACE);
				
				     int openingBalCurrencyListCount=openingBalCurrencyList.size();
					
					 for (int i = 0; i < openingBalCurrencyListCount; i++) 
				 	 {
						String data=openingBalCurrencyList.get(i).getText();
						
						if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1073, 6)))
						{
							openingBalCurrencyList.get(i).click();
							break;
						}
				 	 }
		            
		            voucherHeaderCurrency.sendKeys(Keys.TAB);
		            
		            String actExchangeRate=voucherHeaderExchangeRate.getAttribute("value");
		            String expExchangeRate=excelReader.getCellData(xlSheetName, 1074, 7);
		            
		            excelReader.setCellData(xlfile, xlSheetName, 1074, 8, actExchangeRate);
		            
		            String actLocExchangeRate=voucherHeaderLocalExchangeRate.getAttribute("value");
		            String expLocExchangeRate=excelReader.getCellData(xlSheetName, 1075, 7);
		           
		            excelReader.setCellData(xlfile, xlSheetName, 1075, 8, actLocExchangeRate);
		            
		            System.out.println("voucherHeaderExchangeRate      : "+actExchangeRate+" Value Expected : "+expExchangeRate);
		            System.out.println("voucherHeaderLocalExchangeRate : "+actLocExchangeRate+" Value Expected : "+expLocExchangeRate);
		            
		            if (actExchangeRate.equalsIgnoreCase(expExchangeRate) && actLocExchangeRate.equalsIgnoreCase(expLocExchangeRate) )
		               {
		                            System.out.println("Test Pass : Exchange Rate Is Updated ");
		                            excelReader.setCellData(xlfile, xlSheetName, 1072, 9, resPass);
		                            return true;
		                    }
		                    else
		                    {
		                            System.out.println("Test Fail :  Exchange Rate Is  NOt Updated ");
		                            excelReader.setCellData(xlfile, xlSheetName, 1072, 9, resFail);
		                            return false;
		                    }  
		            
		            }
		            catch (Exception e) 
		  		  {
		  			  String exception =e.getMessage();
		  			  excelReader.setExceptionInExcel(xlfile, xlSheetName, 1072, 10, exception);
		  			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  			  return false;
		  		  }
		  		   }
		            
		    

			 public boolean checkExchangeRateAndLocalExchangeRateWithCurrencyINRInOpeningBalance() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		     {
		            excelReader=new ExcelReader(POJOUtility.getExcelPath());
		            xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		            
		            try
		            {
		            	
		            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		            voucherHeaderCurrency.click();
		            voucherHeaderCurrency.sendKeys(Keys.SHIFT,Keys.HOME);
		            voucherHeaderCurrency.sendKeys(Keys.SPACE);
				
				     int openingBalCurrencyListCount=openingBalCurrencyList.size();
					
					 for (int i = 0; i < openingBalCurrencyListCount; i++) 
				 	 {
						String data=openingBalCurrencyList.get(i).getText();
						
						if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1077, 6)))
						{
							openingBalCurrencyList.get(i).click();
							break;
						}
				 	 }
		            
		            voucherHeaderCurrency.sendKeys(Keys.TAB);
		            
		            String actExchangeRate=voucherHeaderExchangeRate.getAttribute("value");
		            String expExchangeRate=excelReader.getCellData(xlSheetName, 1078, 7);
		            
		            excelReader.setCellData(xlfile, xlSheetName, 1078, 8, actExchangeRate);
		            

		            String actLocExchangeRate=voucherHeaderLocalExchangeRate.getAttribute("value");
		            String expLocExchangeRate=excelReader.getCellData(xlSheetName, 1079, 7);
		           
		            excelReader.setCellData(xlfile, xlSheetName, 1079, 8, actLocExchangeRate);
		            
		            System.out.println("voucherHeaderExchangeRate      : "+actExchangeRate+" Value Expected : "+expExchangeRate);
		            System.out.println("voucherHeaderLocalExchangeRate : "+actLocExchangeRate+" Value Expected : "+expLocExchangeRate);   
		            
		            if (actExchangeRate.equalsIgnoreCase(expExchangeRate) && actLocExchangeRate.equalsIgnoreCase(expLocExchangeRate) )
		            {
		                    System.out.println("Test Pass : Exchange Rate Is Updated ");
		                    excelReader.setCellData(xlfile, xlSheetName, 1076, 9, resPass);
		                    return true;
		             }
		             else
		             {
		                    System.out.println("Test Fail :  Exchange Rate Is  NOt Updated ");
		                    excelReader.setCellData(xlfile, xlSheetName, 1076, 9, resFail);
		                    return false;
		             }  
		            }
		            
		            catch (Exception e) 
		  		  {
		  			  String exception =e.getMessage();
		  			  excelReader.setExceptionInExcel(xlfile, xlSheetName, 1076, 10, exception);
		  			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  			  return false;
		  		  }
		  		   
		    }
			  
				  
				 
			        //Bill Reference Screen 	
				

					@FindBy(xpath="//input[@id='txtNewReference']")
					private static WebElement  billRefNewReferenceTxt;
					
					@FindBy(xpath="//input[@id='txtOnAccount']")
					private static WebElement  billRefTxtOnAccount;		
						
					@FindBy(xpath="//input[@id='Searchtxt']")
					private static WebElement  billRefSearchTxt;		
					
					@FindBy(xpath="//select[@id='cbmShowBillForAdjustment']")
					private static WebElement  billRefNewReferenceDropdown;		
					
					@FindBy(xpath="//select[@id='cbmShowBills']")
					private static WebElement  billRefShowBillsDropdown;		
					
					@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_11']//div[contains(text(),'Due Date')]")
					private static WebElement  billRefGridHeaderDueDate;		
					
					@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_16']//div[contains(text(),'Currency')]")
					private static WebElement  billRefGridHeaderCurrency;		
					
					@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_21']//div[contains(text(),'Original Amt')]")
					private static WebElement  billRefGridHeaderOrginalAmt;		
					
					@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_23']//div[contains(text(),'Balance Amount')]")
					private static WebElement  billRefGridHeaderBalanceAmt;		
					
					@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_33']//div[contains(text(),'Adjustment Amount')]")
					private static WebElement  billRefGridHeaderAdjustmentAmt;		
					
					@FindBy(xpath="//div[contains(text(),'Native Currency')]")
					private static WebElement  billRefGridHeaderNativeCurrency;		
					
					@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_41']//div[contains(text(),'Narration')]")
					private static WebElement  billRefGridHeaderNarration;		
					
					@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_50']//div[contains(text(),'Previous Adjustment Amount')]")
					private static WebElement  billRefGridHeaderPreviosAdjustmentAmt;		
					
					@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_1-0']")
					private static WebElement  billRefGridFirstRow;	
					
					@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_1-1']//input")
					private static WebElement  billRefGridFirstRowChkbox;		
					
					@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_2-1']//input")
					private static WebElement  billRefGridSecondRowChkbox;		
					
					@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_3-1']//input")
					private static WebElement  billRefGridThirdRowChkbox;		
					
					@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_1-33']")
					private static WebElement  billRefGridFirstRowAdjustmentAmtTxt;		
					
					@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_2-33']")
					private static WebElement  billRefGridSecondRowAdjustmentAmtTxt;		
					
					@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_3-33']")
					private static WebElement  billRefGridThirdRowAdjustmentAmtTxt;		
					
					@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_1-41']")
					private static WebElement  billRefGridFirstNarrationTxt;		
					
					@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_2-41']")
					private static WebElement  billRefGridSecondNarrationTxt;		
					
					@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_3-41']")
					private static WebElement  billRefGridThirdNarrationTxt;		
					
					@FindBy(xpath="//input[@id='id_Narration']")
					private static WebElement  narrationToWrite;		
					
					@FindBy(xpath="//input[@id='id_limit']")
					private static WebElement  adjustAmtToWrite;		
					
					@FindBy(xpath="//div[@class='col-xs-6 navbar-header']//div[@class='navText']")
					private static WebElement  billRefPaymentsBillReferenceLabel;		
					
					@FindBy(xpath="//div[@class='col-sm-12 col-md-3']//input[@class='Fbutton']")
					private static WebElement  billRefAdjustOnFIFOBtn;		
					
					@FindBy(xpath="//span[@id='btnPick']")
					private static WebElement  billRefPickIcon;		
					
					@FindBy(xpath="//span[@id='btnOk']")
					private static WebElement  billRefOkBtn;		
					
					@FindBy(xpath="//span[@id='btnCancel']")
					private static WebElement  billRefcancel;		
					
					@FindBy(xpath="//label[@id='id_transactionentry_footer_panel_summary_value_net']")
					private static WebElement  billRefSummatyValueNet;		
					
					@FindBy(xpath="//td[@id='AccountAmount_col_1-1']")
					private static WebElement  billRefGridVendorRow1;	
					
					@FindBy(xpath="//td[@id='AccountAmount_col_1-2']")
					private static WebElement  billRefGridVendorAmtRow1;	
					
					@FindBy(xpath="//td[@id='AccountAmount_col_2-1']")
					private static WebElement  billRefGridVendorRow2;	
					
					@FindBy(xpath="//td[@id='AccountAmount_col_2-2']")
					private static WebElement  billRefGridVendorAmtRow2;	
					
					@FindBy(xpath="//td[@id='AccountAmount_col_3-1']")
					private static WebElement  billRefGridVendorRow3;
					
					@FindBy(xpath="//label[@id='tbNewRefAmountAdjValue']")
					private static WebElement amtAdjustedAgainstNewREfinOtherVouchers;
							
					@FindBy(xpath="//label[@id='tbAmountToAdjustInTransCurrencyValue']")
					private static WebElement transactionCurency;
					
					@FindBy(xpath="//label[@id='tbAmountToAdjustInBaseCurrencyValue']")
					private static WebElement baseCurrency;
					
					@FindBy(xpath="//label[@id='tbAmountToAdjustInLocalCurrencyValue']")
					private static WebElement localCurrencyDhs;
					
					@FindBy(xpath="//label[@id='tbNewRefBalAmountValue']")
					private static WebElement balanceNewReferenceAmt;
					
					@FindBy(xpath="//li[@id='id_li_Adjustment_Tab_BreakUpByTag']//span[@class='font-5'][contains(text(),'Break Up by Tag')]")
					private static WebElement breakUpByTagTab;
					
					@FindBy(xpath="//span[@class='font-5'][contains(text(),'Adjustment')]")
					private static WebElement adjustmentTab;
					
					@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-9']")
					private static WebElement breakUpByTagDueDate;
					
					@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-10']")
					private static WebElement breakUpByTagDepartment;
					
					@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-18']")
					private static WebElement breakUpByTagBaseCurrency;
					
					@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-17']")
					private static WebElement breakUpByTagBillCurrency;
					
					@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-20']")
					private static WebElement breakUpByTagBaseConversionRate;
						
					@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-21']")
					private static WebElement breakUpByTagBaseLocalCurrency;
					
					@FindBy(xpath="//label[@id='txtblkAmountadjusted']")
					private static WebElement  billRefAdjustAmountInTransCurency;
					
					@FindBy(xpath="//label[@id='txtblkAmounttobeadjust']")
					private static WebElement  billRefBalanceAmountAdjustInTrnasCurrency;
					
					@FindBy(xpath="//label[@id='id_BillWise_IP_LocalConversionRateValue']")
					private static WebElement  billRefInfoBarLocalCurrencyRate;
					
					
					@FindBy(xpath="//label[@id='tbAmountToAdjustInTransCurrencyValue']")
					private static WebElement billRefTransactionCurency;
					
					@FindBy(xpath="//label[@id='tbAmountToAdjustInBaseCurrencyValue']")
					private static WebElement billRefBaseCurrency;
					

					@FindBy(xpath="//label[@id='id_BillWise_IP_AccountName']")
					private static WebElement breakUpDetailsAccount;
					
					@FindBy(xpath="//label[@id='id_BillWise_IP_ProductName']")
					private static WebElement breakUpDetailsItem;
					
					@FindBy(xpath="//label[@id='id_BillWise_IP_TagName']")
					private static WebElement breakUpDetailsDepartment;
					
					@FindBy(xpath="//label[@id='id_BillWise_IP_BaseCurrencyValue']")
					private static WebElement conversationRateBaseCurrencyRate;
					
					@FindBy(xpath="//label[@id='id_BillWise_IP_LocalConversionRateValue']")
					private static WebElement conversationRateLocalCurrencyRate;
					
					@FindBy(xpath="//label[@id='id_infoPanel_lblAEDTranAmountValue']")
					private static WebElement asOnEntryDateTransAmt;
					
					@FindBy(xpath="//label[@id='id_infoPanel_lblAEDBaseConversionValue']")
					private static WebElement asOnEntryDateBaseConcersationRate;
					
					@FindBy(xpath="//label[@id='id_infoPanel_lblAEDBaseAmountValue']")
					private static WebElement asOnEntryDateBaseAmount;
					
					@FindBy(xpath="//label[@id='id_infoPanel_lblAEDLocalConversionValue']")
					private static WebElement asOnEntryDateLocConversationRate;
					
					@FindBy(xpath="//label[@id='id_infoPanel_lblAEDLocalAmountValue']")
					private static WebElement asOnEntryDateAmt;
					
					@FindBy(xpath="//label[@id='id_infoPanel_lblAADTranAmountValue']")
					private static WebElement balOnAdjstDateTransAmt;
					
					@FindBy(xpath="//label[@id='id_infoPanel_lblAADBaseConversionValue']")
					private static WebElement  balOnAdjstDateBasrConversionRate;
					
					@FindBy(xpath="//label[@id='id_infoPanel_lblAADBaseAmountValue']")
					private static WebElement  balOnAdjstDateBaseAmount;
					
					@FindBy(xpath="//label[@id='id_infoPanel_lblAADLocalConversionValue']")
					private static WebElement  balOnAdjstDateLocalConversionRate;
					
					@FindBy(xpath="//label[@id='id_infoPanel_lblAADLocalAmountValue']")
					private static WebElement  balOnAdjstDateAmt;
					
					@FindBy(xpath="//label[@id='id_infoPanel_lblAdjTranAmountValue']")
					private static WebElement adjustmentsAmount1;
					
					@FindBy(xpath="//label[@id='id_infoPanel_lblAdjBaseAmountValue']")
					private static WebElement adjustmentsAmount2;
					
					@FindBy(xpath="//label[@id='id_infoPanel_lblAdjLocalAmountValue']")
					private static WebElement adjustmentsAmount3;
					
					@FindBy(xpath="//label[@id='id_infoPanel_lblNativeCurrencyValue']")
					private static WebElement adjustmentsAmount4;
					
					@FindBy(xpath="//label[@id='id_infoPanel_lblExDiffTranAmountValue']")
					private static WebElement exchangeGainLossForBaseCurrency;
					
					@FindBy(xpath="//label[@id='id_infoPanel_lblExDiffLocalAmountValue']")
					private static WebElement exchangeGainLossForLocalCurrency;
					
					
					
					@FindBy(xpath="//input[@id='id_limit']")
					private static WebElement gridEnterAdjustAmtRow1;
					
					//Billreference Body Grid Elements
					
		            
					
					@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[1]/td[8]")
					private static WebElement gridOrginalAmtRow1;
					
					@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[2]/td[8]")
					private static WebElement gridOrginalAmtRow2;
					
					@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[3]/td[8]")
					private static WebElement gridOrginalAmtRow3;
					
					@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[4]/td[8]")
					private static WebElement gridOrginalAmtRow4;
					
					@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[5]/td[8]")
					private static WebElement gridOrginalAmtRow5;
					
					
					
					
					@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[1]/td[10]")
					private static WebElement gridBalanceAmtRow1;
					
					@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[2]/td[10]")
					private static WebElement gridBalanceAmtRow2;
					
					@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[3]/td[10]")
					private static WebElement gridBalanceAmtRow3;
					
					@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[4]/td[10]")
					private static WebElement gridBalanceAmtRow4;
					
					@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[5]/td[10]")
					private static WebElement gridBalanceAmtRow5;
					
					
					
					@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[1]/td[13]")
					private static WebElement gridAdjustmentAmtRow1;
					
					@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[2]/td[13]")
					private static WebElement gridAdjustmentAmtRow2;
					
					@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[3]/td[13]")
					private static WebElement gridAdjustmentAmtRow3;
					
					@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[4]/td[13]")
					private static WebElement gridAdjustmentAmtRow4;

					@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[5]/td[13]")
					private static WebElement gridAdjustmentAmtRow5;
					
					
					
					@FindBy(xpath="//table[@id='id_Adjustment_Grid']")
					private static WebElement billRefAdjustBillsGrid;
						
					@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[1]/td[3]")
					private static WebElement billRefAdjustBillsRow1DocNo;
					
					@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[2]/td[3]")
					private static WebElement billRefAdjustBillsRow2DocNo;
					
					@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[3]/td[3]")
					private static WebElement billRefAdjustBillsRow3DocNo;
					
					@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[4]/td[3]")
					private static WebElement billRefAdjustBillsRow4DocNo;
					
					@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[5]/td[3]")
					private static WebElement billRefAdjustBillsRow5DocNo;
					
					
						
					@FindBy(xpath="//*[@id='InfPnlAdjGrd_body']/tr/td[2]")
					private static WebElement InfoSideBarDocRow1;

					@FindBy(xpath="//*[@id='InfPnlAdjGrd_body']/tr/td[3]")
					private static WebElement InfoSideBarAmtRow1;

					@FindBy(xpath="//tbody[@id='InfPnlAdjGrd_body']//td[4]")
					private static WebElement InfoSideBarBaseAmtRow1;

					// Row 2
					
					@FindBy(xpath="//*[@id='InfPnlAdjGrd_body']/tr[2]/td[2]")
					private static WebElement InfoSideBarDocRow2;

					@FindBy(xpath="//*[@id='InfPnlAdjGrd_body']/tr[2]/td[3]")
					private static WebElement InfoSideBarAmtRow2;

					@FindBy(xpath="//tbody[@id='InfPnlAdjGrd_body']//tr[2]//td[4]")
					private static WebElement InfoSideBarBaseAmtRow2;

					// Row 3
					
					@FindBy(xpath="//*[@id='InfPnlAdjGrd_body']/tr[3]/td[2]")
					private static WebElement InfoSideBarDocRow3;

					@FindBy(xpath="//*[@id='InfPnlAdjGrd_body']/tr[3]/td[3]")
					private static WebElement InfoSideBarAmtRow3;

					@FindBy(xpath="//tbody[@id='InfPnlAdjGrd_body']//tr[3]//td[4]")
					private static WebElement InfoSideBarBaseAmtRow3;
					  
					
					// Row 4 
					
					@FindBy(xpath="//*[@id='InfPnlAdjGrd_body']/tr[4]/td[2]")
					private static WebElement InfoSideBarDocRow4;

					@FindBy(xpath="//*[@id='InfPnlAdjGrd_body']/tr[4]/td[3]")
					private static WebElement InfoSideBarAmtRow4;

					@FindBy(xpath="//tbody[@id='InfPnlAdjGrd_body']//tr[4]//td[4]")
					private static WebElement InfoSideBarBaseAmtRow4;
					
					// row 5
					
					@FindBy(xpath="//*[@id='InfPnlAdjGrd_body']/tr[5]/td[2]")
					private static WebElement InfoSideBarDocRow5;

					@FindBy(xpath="//*[@id='InfPnlAdjGrd_body']/tr[5]/td[3]")
					private static WebElement InfoSideBarAmtRow5;

					@FindBy(xpath="//tbody[@id='InfPnlAdjGrd_body']//tr[5]//td[4]")
					private static WebElement InfoSideBarBaseAmtRow5;
					
					

				
					  
					@FindBy(xpath="//*[@id='id_body_12_table_body']/tr")
					private static List<WebElement> openingBalAccountListInGrid;
					
					@FindBy(xpath="//input[@id='id_body_19']")
					private static WebElement  enter_OBCreditACTxt;

					@FindBy(xpath="//*[@id='lblAccount']")
					private static WebElement  billRefPartyName;
					
				  
			 public boolean checkSavingVoucherWithCustomerACurrencyINRDepartmentINDIALessThanAccountinDate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
			 {
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
				    xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
						
				    try
				    {
				    
				    
				    
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
					voucherHeaderCurrency.sendKeys(Keys.BACK_SPACE);
					
					int currencycount=currencyListCount.size();
					
					System.err.println(currencycount);
						
					for(int i=0 ; i < currencycount ;i++)
					{
						String data=currencyListCount.get(i).getText();
						
						System.err.println(data);
						
						if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1081, 6)))
						{
							currencyListCount.get(i).click();
							
							break;
						}
					}
						
					voucherHeaderCurrency.sendKeys(Keys.TAB);
						
			    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
					departmentTxt.click();
					departmentTxt.sendKeys(Keys.END);
					departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME);
					departmentTxt.sendKeys(Keys.SPACE);
						
					int departmentcount=openingBalDepartmentList.size();
					
					System.err.println(departmentcount);
						
					for(int i=0 ; i < departmentcount ;i++)
					{
						String data=openingBalDepartmentList.get(i).getText();
						
						if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1082, 6)))
						{
							openingBalDepartmentList.get(i).click();
							
							break;
						}
					}
						
					departmentTxt.sendKeys(Keys.TAB);
				
					
					//First Row
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
					select1stRow_1stColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
					enter_AccountTxt.click();
					enter_AccountTxt.sendKeys("W");
					
					
					getFluentWebDriverWait().until(ExpectedConditions.visibilityOfAllElements(openingBalAccountListInGrid));
					int accountCount=openingBalAccountListInGrid.size();
					
					System.err.println(accountCount);
						
					for(int i=0 ; i < accountCount ;i++)
					{
						String data=openingBalAccountListInGrid.get(i).getText();
						Thread.sleep(2000);
						
						if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1083, 6)))
						{
							getFluentWebDriverWait().until(ExpectedConditions.visibilityOfAllElements(openingBalAccountListInGrid));
							openingBalAccountListInGrid.get(i).click();
							
							break;
						}
					}
					
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));	
					enter_AccountTxt.sendKeys(Keys.TAB);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_DebitTxt));
					enter_DebitTxt.sendKeys(excelReader.getCellData(xlSheetName, 1084, 6));
					enter_DebitTxt.sendKeys(Keys.TAB);
					
					enter_OBCreditACTxt.sendKeys(Keys.TAB);
					
					
					
					//Second Row
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
					select2ndRow_1stColumn.click();
					Thread.sleep(2000);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
					enter_AccountTxt.click();
					enter_AccountTxt.sendKeys("F");
					
					//int accountCount=openingBalAccountListInGrid.size();
					
					System.err.println(accountCount);
						
					for(int i=0 ; i < accountCount ;i++)
					{
						String data=openingBalAccountListInGrid.get(i).getText();
						
						if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1085, 6)))
						{
							openingBalAccountListInGrid.get(i).click();
							
							break;
						}
					}
					
						
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
					enter_AccountTxt.sendKeys(Keys.TAB);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_DebitTxt));
					enter_DebitTxt.sendKeys(excelReader.getCellData(xlSheetName, 1086, 6));
				    enter_DebitTxt.sendKeys(Keys.TAB);
					
				    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_OBCreditACTxt));
					enter_OBCreditACTxt.sendKeys(Keys.TAB);
					
					
					
					//Third Row
				
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
					select3rdRow_1stColumn.click();
					
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
					enter_AccountTxt.click();
					enter_AccountTxt.sendKeys("BR");
					
					System.err.println(accountCount);
						
					for(int i=0 ; i < accountCount ;i++)
					{
						String data=openingBalAccountListInGrid.get(i).getText();
						
						if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1087, 6)))
						{
							openingBalAccountListInGrid.get(i).click();
							
							break;
						}
					}
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));	
					enter_AccountTxt.sendKeys(Keys.TAB);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_DebitTxt));
					enter_DebitTxt.sendKeys(excelReader.getCellData(xlSheetName, 1088, 6));

					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_DebitTxt));			
					enter_DebitTxt.sendKeys(Keys.TAB);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_OBCreditACTxt));
					enter_OBCreditACTxt.sendKeys(Keys.TAB);
					
					
					
					
					//Fourth Row
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_1stColumn));
					select4thRow_1stColumn.click();
					
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));	
					enter_AccountTxt.click();
					enter_AccountTxt.sendKeys("ST");
					
					System.err.println(accountCount);
						
					for(int i=0 ; i < accountCount ;i++)
					{
					
						String data=openingBalAccountListInGrid.get(i).getText();
						
						if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1089, 6)))
						{
							openingBalAccountListInGrid.get(i).click();
							
							break;
						}
					}
					
						
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));	
					enter_AccountTxt.sendKeys(Keys.TAB);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_DebitTxt));	
					enter_DebitTxt.sendKeys(excelReader.getCellData(xlSheetName, 1090, 6));
					enter_DebitTxt.sendKeys(Keys.TAB);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_OBCreditACTxt));
					enter_OBCreditACTxt.sendKeys(Keys.TAB);
				
					
			        //Fifth Row
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_1stColumn));
					select5thRow_1stColumn.click();
					Thread.sleep(2000);
					
					
					enter_AccountTxt.click();
					enter_AccountTxt.sendKeys("Customer B");
					
					System.err.println(accountCount);
						
					for(int i=0 ; i < accountCount ;i++)
					{
					
						String data=openingBalAccountListInGrid.get(i).getText();
						
						if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1091, 6)))
						{
							openingBalAccountListInGrid.get(i).click();
							
							break;
						}
					}
					
						
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));	
					enter_AccountTxt.sendKeys(Keys.TAB);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_DebitTxt));	
					enter_DebitTxt.sendKeys(Keys.TAB);
							
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_OBCreditACTxt));
					enter_OBCreditACTxt.sendKeys(excelReader.getCellData(xlSheetName, 1092, 6));
							
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_OBCreditACTxt));
					enter_OBCreditACTxt.sendKeys(Keys.TAB);
					
						
					//Information Before Save
					
				    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
					 
					String docno=documentNumberTxt.getAttribute("value");
					
					String actFooterCreditAmt=vocFooterCreditAmount.getText();
					String expFooterCreditAmt=excelReader.getCellData(xlSheetName, 1093, 7);
						
					excelReader.setCellData(xlfile, xlSheetName, 1093, 8, actFooterCreditAmt);
					
					 
					String actFooterDebitAmt=vocFooterdebitAmount.getText();
					String expFooterDebitAmt=excelReader.getCellData(xlSheetName, 1094, 7);
						
					excelReader.setCellData(xlfile, xlSheetName, 1094, 8, actFooterDebitAmt);
					 
					
					System.out.println("Entry PAge Footer Credit Amount "  +actFooterCreditAmt +"  Value Expected  "+expFooterCreditAmt);
					
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
					saveBtn.click();
					
					
					String actPartyName = billRefPartyName.getText();
					String expPartyName = excelReader.getCellData(xlSheetName, 1095, 7);
					
					 excelReader.setCellData(xlfile, xlSheetName, 1095, 8, actPartyName);
					
					System.out.println("Bill wise Screen Cutomer Name "  + actPartyName + "  Value Expected  " + expPartyName);
					
					
				    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefAdjustBillsGrid));
						
					String actAdjustbills=billRefAdjustBillsGrid.getAttribute("data-totalrows");
					String expAdjustbills="0";
					
					String expBillNewReference                      =excelReader.getCellData(xlSheetName, 1096, 7);
					String expBillTransactionCurrency               =excelReader.getCellData(xlSheetName, 1097, 7);
					String expBillBaseCurrency                      =excelReader.getCellData(xlSheetName, 1098, 7);
					String expBillLocalCurrency                     =excelReader.getCellData(xlSheetName, 1099, 7);
					String expBillBalanceNewRefAmount               =excelReader.getCellData(xlSheetName, 1100, 7);
					
			        String expbillRefAdjustAmountInTransCurency         =excelReader.getCellData(xlSheetName, 1101, 7);
			        String expbillRefBalanceAmountAdjustInTrnasCurrency =excelReader.getCellData(xlSheetName, 1102, 7);
			        

			        
			        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
			        String actBillNewReference                           = billRefNewReferenceTxt.getAttribute("value");
					String actBillTransactionCurrency                    = billRefTransactionCurency.getText();
					String actBillBaseCurrency                           = billRefBaseCurrency.getText();
					String actBillLocalCurrency                          = localCurrencyDhs.getText();
					String actBillBalanceNewRefAmount                    = balanceNewReferenceAmt.getText();
			        String actbillRefAdjustAmountInTransCurency          = billRefAdjustAmountInTransCurency.getText();
			        String actbillRefBalanceAmountAdjustInTrnasCurrency  = billRefBalanceAmountAdjustInTrnasCurrency.getText();
			        
			        
			        excelReader.setCellData(xlfile, xlSheetName, 1096, 8, actBillNewReference);
			        excelReader.setCellData(xlfile, xlSheetName, 1097, 8, actBillTransactionCurrency);
			        excelReader.setCellData(xlfile, xlSheetName, 1098, 8, actBillBaseCurrency);
			        excelReader.setCellData(xlfile, xlSheetName, 1099, 8, actBillLocalCurrency);
			        excelReader.setCellData(xlfile, xlSheetName, 1100, 8, actBillBalanceNewRefAmount);
			        excelReader.setCellData(xlfile, xlSheetName, 1101, 8, actbillRefAdjustAmountInTransCurency);
			        excelReader.setCellData(xlfile, xlSheetName, 1102, 8, actbillRefBalanceAmountAdjustInTrnasCurrency);
			        
			 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
			 		billRefNewReferenceTxt.click();
			 		
			 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			 		billRefPickIcon.click();
			    	
			        String expBillNewReferencePick                          = excelReader.getCellData(xlSheetName, 1104, 7);
			 		String expBillTransactionCurrencyPick                   = excelReader.getCellData(xlSheetName, 1105, 7);
			 		String expBillBaseCurrencyPick                          = excelReader.getCellData(xlSheetName, 1106, 7);
			 		String expBillLocalCurrencyPick                         = excelReader.getCellData(xlSheetName, 1107, 7);
			 		String expBillBalanceNewRefAmountPick                   = excelReader.getCellData(xlSheetName, 1108, 7);
			 	   String expbillRefAdjustAmountInTransCurencyPick          = excelReader.getCellData(xlSheetName, 1109, 7);
			        String expbillRefBalanceAmountAdjustInTrnasCurrencyPick = excelReader.getCellData(xlSheetName, 1110, 7);
			 
			        String expconversationRateBaseCurrencyRatePick = excelReader.getCellData(xlSheetName, 1111, 7);
			        String expconversationRateLocalCurrencyRatePick = excelReader.getCellData(xlSheetName, 1112, 7);
			 		
			 
			        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
			      
			        String actBillNewReferencePick                           = billRefNewReferenceTxt.getAttribute("value");
			 		String actBillTransactionCurrencyPick                    = billRefTransactionCurency.getText();
			 		String actBillBaseCurrencyPick                           = billRefBaseCurrency.getText();
			 		String actBillLocalCurrencyPick                          = localCurrencyDhs.getText();
			 		String actBillBalanceNewRefAmountPick                    = balanceNewReferenceAmt.getText();
			 		String actbillRefAdjustAmountInTransCurencyPick          = billRefAdjustAmountInTransCurency.getText();
				    String actbillRefBalanceAmountAdjustInTrnasCurrencyPick  = billRefBalanceAmountAdjustInTrnasCurrency.getText();
			 		
			 	    String actconversationRateBaseCurrencyRatePick   = conversationRateBaseCurrencyRate.getText();
			        String actconversationRateLocalCurrencyRatePick  = conversationRateLocalCurrencyRate.getText();
			 		
			    	
			        excelReader.setCellData(xlfile, xlSheetName, 1104, 8, actBillNewReferencePick);
			        excelReader.setCellData(xlfile, xlSheetName, 1105, 8, actBillTransactionCurrencyPick);
			        excelReader.setCellData(xlfile, xlSheetName, 1106, 8, actBillBaseCurrencyPick);
			        excelReader.setCellData(xlfile, xlSheetName, 1107, 8, actBillLocalCurrencyPick);
			        excelReader.setCellData(xlfile, xlSheetName, 1108, 8, actBillBalanceNewRefAmountPick);
			        excelReader.setCellData(xlfile, xlSheetName, 1109, 8, actbillRefAdjustAmountInTransCurencyPick);
			        excelReader.setCellData(xlfile, xlSheetName, 1110, 8, actbillRefBalanceAmountAdjustInTrnasCurrencyPick);
			        excelReader.setCellData(xlfile, xlSheetName, 1111, 8, actconversationRateBaseCurrencyRatePick); 
			        excelReader.setCellData(xlfile, xlSheetName, 1112, 8, actconversationRateLocalCurrencyRatePick);
			      
			       
			        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			        billRefOkBtn.click();
			        
			        
			        boolean savingVoucher=checkVoucherSavingMessage(docno);
			        
			        System.out.println("Bill reference Adjustment Bills  :"+ actAdjustbills+"                          "+ "expDate :"+expAdjustbills);
			        System.out.println("actBillNewReference :             "+ actBillNewReference +"                    "+ "expBillNewReference :"+expBillNewReference);
			        System.out.println("actBillTransactionCurrency       :"+ actBillTransactionCurrency + "            " + "expBillTransactionCurrency :"+expBillTransactionCurrency);
			        System.out.println("actBillBaseCurrency :             "+ actBillBaseCurrency + "                   " +"expBillBaseCurrency :"+expBillBaseCurrency);
			        System.out.println("actBillLocalCurrency :            "+ actBillLocalCurrency+ "                   " +"expBillLocalCurrency :"+expBillLocalCurrency);
			        System.out.println("actBillBalanceNewRefAmount :      "+ actBillBalanceNewRefAmount + "            " + "expBillBalanceNewRefAmount :"+expBillBalanceNewRefAmount);
			        System.out.println("actbillRefAdjustAmountInTransCurency :"+ actbillRefAdjustAmountInTransCurency+ "       " +"expbillRefAdjustAmountInTransCurency :"+expbillRefAdjustAmountInTransCurency);
			        System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrency :"+ actbillRefBalanceAmountAdjustInTrnasCurrency + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrency :"+expbillRefBalanceAmountAdjustInTrnasCurrency);

			       //////Pick
			        
			        System.out.println("actBillNewReferencePick :              "+ actBillNewReferencePick +"                "+ "expBillNewReferencePick :"+expBillNewReferencePick);
			        System.out.println("actBillTransactionCurrencyPick :       "+ actBillTransactionCurrencyPick + "        " + "expBillTransactionCurrencyPick :"+expBillTransactionCurrencyPick);
			        System.out.println("actBillBaseCurrencyPick :              "+ actBillBaseCurrencyPick + "               " + "expBillBaseCurrencyPick :"+expBillBaseCurrencyPick);
			        System.out.println("actBillLocalCurrencyPick :             "+ actBillLocalCurrency+ "                   " +"expBillLocalCurrencyPick :"+expBillLocalCurrency);
			        System.out.println("actBillBalanceNewRefAmountPick :       "+ actBillBalanceNewRefAmountPick +          " " + "expBillBalanceNewRefAmountPick :"+expBillBalanceNewRefAmountPick);
			        System.out.println("actconversationRateBaseCurrRatePick:   "+ actconversationRateBaseCurrencyRatePick+  "  " +"expconversationRateBaseCurrencyRatePick :"+expconversationRateBaseCurrencyRatePick);
			        System.out.println("actconversationRateLocalCurRatePick :  "+ actconversationRateLocalCurrencyRatePick+ " " + "expconversationRateLocalCurrencyRatePick :"+expconversationRateLocalCurrencyRatePick);
			        System.out.println(" Voucher Saving Status                  "+savingVoucher +"                     "+"True");
			        
			        
			        
			        if (actPartyName.equalsIgnoreCase(expPartyName) && actAdjustbills.equalsIgnoreCase(expAdjustbills) && savingVoucher==true && actBillNewReference.equalsIgnoreCase(expBillNewReference) && actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 
			 				actBillBaseCurrency.equalsIgnoreCase(expBillBaseCurrency) && actBillLocalCurrency.equalsIgnoreCase(expBillLocalCurrency) && 
			 				actBillBalanceNewRefAmount.equalsIgnoreCase(expBillBalanceNewRefAmount) && 
			 			     actbillRefAdjustAmountInTransCurency.equalsIgnoreCase(expbillRefAdjustAmountInTransCurency) &&
			 				actbillRefBalanceAmountAdjustInTrnasCurrency.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrency) && 
			 		        
			        		
			 		        actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) && actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) && 
							actBillBaseCurrencyPick.equalsIgnoreCase(expBillBaseCurrencyPick) && actBillLocalCurrencyPick.equalsIgnoreCase(expBillLocalCurrencyPick) && 
							actBillBalanceNewRefAmountPick.equalsIgnoreCase(expBillBalanceNewRefAmountPick) &&
							actconversationRateBaseCurrencyRatePick.equalsIgnoreCase(expconversationRateBaseCurrencyRatePick) && actconversationRateLocalCurrencyRatePick.equalsIgnoreCase(expconversationRateLocalCurrencyRatePick) && 
							actFooterCreditAmt.equalsIgnoreCase(expFooterCreditAmt))
			        {
			        	
			        	System.out.println("*********Opening Balance INR Adjusting Sales invoice of INR Entry partial*********************");
				        System.out.println(" Test Pass: Voucher SAved Successfully and Unsuspended Voucher is Dispalying in Billwise Screen ");
				        excelReader.setCellData(xlfile, xlSheetName, 1080, 9, resPass);
				        return true;
			        }
			        else
			 		{	
			 			excelReader.setCellData(xlfile, xlSheetName, 1080, 9, resFail);
			 			
			 			return false;
			 		}
			      }
		      catch (Exception e) 
			  {
				  String exception =e.getMessage();
				  excelReader.setExceptionInExcel(xlfile, xlSheetName, 1080, 10, exception);
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				  return false;
			  }
			   }
				  
				  
		    
			public boolean checkPreviousButtonInOpeningBalanceSavedVoucher() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					

				try
				{
				    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
				    previousBtn.click();
				    
			        boolean loading=checkLoadingMessage();
			  		
			  		System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
			    	
			  		String actDocno               = documentNumberTxt.getAttribute("value");
			        String actCurrency            = voucherHeaderCurrency.getAttribute("value");
					String actDepartment          = departmentTxt.getAttribute("value");
			        String actExchangeRate        = voucherHeaderExchangeRate.getAttribute("value");
			        String actLocExchangeRate     = voucherHeaderLocalExchangeRate.getAttribute("value");
					
					String actR1Account           = select1stRow_1stColumn.getText();
					String actR2Account           = select2ndRow_1stColumn.getText();
					String actR3Account           = select3rdRow_1stColumn.getText();
					String actR4Account           = select4thRow_1stColumn.getText();
					String actR5Account           = select5thRow_1stColumn.getText();
					
					String actR1Debit             = select1stRow_2ndColumn.getText();
					String actR2Debit             = select2ndRow_2ndColumn.getText();
					String actR3Debit             = select3rdRow_2ndColumn.getText();
					String actR4Debit             = select4thRow_2ndColumn.getText();
					String actR5Credit            = select5thRow_3rdColumn.getText();
			        String actR5Ref               = select5thRow_4thColumn.getText();
			        
			    	String actFooterCreditAmt    =vocFooterCreditAmount.getText();
			    	String actVoucherDebitAmt   = vocFooterdebitAmount.getText();
			    	
			    	 excelReader.setCellData(xlfile, xlSheetName, 1114, 8, actDocno);
			    	 excelReader.setCellData(xlfile, xlSheetName, 1115, 8, actCurrency);
			    	 excelReader.setCellData(xlfile, xlSheetName, 1116, 8, actDepartment);
			    	 excelReader.setCellData(xlfile, xlSheetName, 1117, 8, actExchangeRate);
			    	 excelReader.setCellData(xlfile, xlSheetName, 1118, 8, actLocExchangeRate);
			    	 excelReader.setCellData(xlfile, xlSheetName, 1119, 8, actR1Account);
			    	 excelReader.setCellData(xlfile, xlSheetName, 1120, 8, actR1Debit);
			    	 excelReader.setCellData(xlfile, xlSheetName, 1121, 8, actR2Account);
			    	 excelReader.setCellData(xlfile, xlSheetName, 1122, 8, actR2Debit);
			    	 excelReader.setCellData(xlfile, xlSheetName, 1123, 8, actR3Account);
			    	 excelReader.setCellData(xlfile, xlSheetName, 1124, 8, actR3Debit);
			    	 excelReader.setCellData(xlfile, xlSheetName, 1125, 8, actR4Account);
			    	 excelReader.setCellData(xlfile, xlSheetName, 1126, 8, actR4Debit); 
			    	 excelReader.setCellData(xlfile, xlSheetName, 1127, 8, actR5Account);
			    	 excelReader.setCellData(xlfile, xlSheetName, 1128, 8, actR5Credit);
			    	 excelReader.setCellData(xlfile, xlSheetName, 1129, 8, actR5Ref);
			    	 excelReader.setCellData(xlfile, xlSheetName, 1130, 8, actFooterCreditAmt);
			    	 excelReader.setCellData(xlfile, xlSheetName, 1131, 8, actVoucherDebitAmt);
			    	 
					
					String expDocno               = excelReader.getCellData(xlSheetName, 1114, 7);
				    String expCurrency            = excelReader.getCellData(xlSheetName, 1115, 7);
					String expDepartment          = excelReader.getCellData(xlSheetName, 1116, 7);
			        String expExchangeRate        = excelReader.getCellData(xlSheetName, 1117, 7);
			        String expLocExchangeRate     = excelReader.getCellData(xlSheetName, 1118, 7);

					String expR1Account           = excelReader.getCellData(xlSheetName, 1119, 7);
					String expR1Debit             = excelReader.getCellData(xlSheetName, 1120, 7);
					
					String expR2Account           = excelReader.getCellData(xlSheetName, 1121, 7);
					String expR2Debit             = excelReader.getCellData(xlSheetName, 1122, 7);
					
					String expR3Account           = excelReader.getCellData(xlSheetName, 1123, 7);
					String expR3Debit             = excelReader.getCellData(xlSheetName, 1124, 7);
					
					String expR4Account           = excelReader.getCellData(xlSheetName, 1125, 7);
					String expR4Debit             = excelReader.getCellData(xlSheetName, 1126, 7);
					
					String expR5Account           = excelReader.getCellData(xlSheetName, 1127, 7);
					String expR5Credit            = excelReader.getCellData(xlSheetName, 1128, 7);
					String expR5Ref               = excelReader.getCellData(xlSheetName, 1129, 7);
					
					String expFooterCreditAmt     = excelReader.getCellData(xlSheetName, 1130, 7);
			        String expVoucherDebitAmt     = excelReader.getCellData(xlSheetName, 1131, 7);

			        System.out.println("*******************************checkPreviousButtonInOpeningBalanceSavedVoucher**************************");

					System.out.println("Entry Page Document Number    "+actDocno           +"  value Expected  "+expDocno);
					System.out.println("Entry Page Currency           "+actCurrency        +"  value Expected  "+expCurrency);
					System.out.println("Entry Page Department         "+actDepartment      +"  value Expected  "+expDepartment);
					System.out.println("Entry Page Exchange Rate      "+actExchangeRate    +"  value Expected  "+expExchangeRate);
					System.out.println("Entry Page Department         "+actLocExchangeRate +"  value Expected  "+expLocExchangeRate);

					System.out.println("Entry Page R1Account          "+actR1Account       +"  value Expected  "+expR1Account);
					System.out.println("Entry Page R2Account          "+actR2Account       +"  value Expected  "+expR2Account);
					System.out.println("Entry Page R3Account          "+actR3Account       +"  value Expected  "+expR3Account);
					System.out.println("Entry Page R4Account          "+actR4Account       +"  value Expected  "+expR4Account);
					System.out.println("Entry Page R5Account          "+actR5Account       +"  value Expected  "+expR5Account);
					System.out.println("Entry Page R1Debit            "+actR1Debit         +"  value Expected  "+expR1Debit);
					System.out.println("Entry Page R2Debit            "+actR2Debit         +"  value Expected  "+expR2Debit);
					System.out.println("Entry Page R3Debit            "+actR3Debit         +"  value Expected  "+expR3Debit);
					System.out.println("Entry Page R4Debit            "+actR4Debit         +"  value Expected  "+expR4Debit);
					System.out.println("Entry Page R5Credit           "+actR5Credit        +"  value Expected  "+expR5Credit);
					System.out.println("Entry Page R5Ref              "+actR5Ref           +"  value Expected  "+expR5Ref);
					
					System.out.println("Entry Page Debit Amount       "+actVoucherDebitAmt +"  value Expected  "+expVoucherDebitAmt);
					System.out.println("Entry Page Credit Amount      "+actFooterCreditAmt +"  value Expected  "+expFooterCreditAmt);
					
					
					
					if (loading==true && actDocno.equalsIgnoreCase(expDocno) && actCurrency.equalsIgnoreCase(expCurrency) &&actDepartment.equalsIgnoreCase(expDepartment) && 
							
							actExchangeRate.equalsIgnoreCase(expExchangeRate) && actLocExchangeRate.equalsIgnoreCase(expLocExchangeRate) && 
							
							actR1Account.equalsIgnoreCase(expR1Account) && actR1Debit.equalsIgnoreCase(expR1Debit) && 
							
							actR2Account.equalsIgnoreCase(expR2Account) && actR2Debit.equalsIgnoreCase(expR2Debit) && 
							actR3Account.equalsIgnoreCase(expR3Account) && actR3Debit.equalsIgnoreCase(expR3Debit) && 
							actR4Account.equalsIgnoreCase(expR4Account) && actR4Debit.equalsIgnoreCase(expR4Debit) && 
							
							actR5Account.equalsIgnoreCase(expR5Account) && actR5Credit.equalsIgnoreCase(expR5Credit) && 
							actR5Ref.equalsIgnoreCase(expR5Ref))
					{
						
						System.out.println(" Test Pass: Data Saved Successfully ");
						excelReader.setCellData(xlfile, xlSheetName, 1113, 9, resPass);
						return true;
					}
					else 
					{
						System.out.println(" Test Fail: Data  not Saved Successfully ");
						excelReader.setCellData(xlfile, xlSheetName, 1113, 9, resFail);
						return false;
					}
				}
				 catch (Exception e) 
				  {
					  String exception =e.getMessage();
					  excelReader.setExceptionInExcel(xlfile, xlSheetName, 1113, 10, exception);
					  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
					  return false;
				  }
				   }
				
				  
				  
				  
				  
			  // Delete Row In Billwise Row entry
			 
			   public boolean checkOpeningBalanceVoucherEditPreviousToDeleteRowBin() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			   {
				 excelReader=new ExcelReader(POJOUtility.getExcelPath());
				 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
				
				 try
				 {
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fifthRowIndex));
					fifthRowIndex.click();
						
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
					deleteRowBtn.click();
					
					
					boolean actColumnR5C1GetText=select5thRow_1stColumn.getText().isEmpty();
					System.out.println("actColumnR5C1GetText  :  "+actColumnR5C1GetText);
					boolean expColumnR5C1GetText  = true;
					
					boolean actColumnR5C2GetText=select5thRow_2ndColumn.getText().isEmpty();
					System.out.println("actColumnR5C2GetText  :  "+actColumnR5C2GetText);
					boolean expColumnR5C2GetText  = true;
					
					boolean actColumnR5C3GetText=select5thRow_3rdColumn.getText().isEmpty();
					System.out.println("actColumnR5C3GetText  :  "+actColumnR5C3GetText);
					boolean expColumnR5C3GetText  = true;
					
					System.out.println("Bin Column after Delete Row Value Actual     :  " + actColumnR5C1GetText +   " Value Expected : " + expColumnR5C1GetText);
					System.out.println("Bin Column after Delete Row Value Actual     :  " + actColumnR5C2GetText +   " Value Expected : " + expColumnR5C2GetText);
					System.out.println("Bin Column after Delete Row Value Actual     :  " + actColumnR5C3GetText +   " Value Expected : " + expColumnR5C3GetText);
					
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fourthRowIndex));
					fourthRowIndex.click();
						
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
					deleteRowBtn.click();
					
					
					boolean actColumnR4C1GetText=select4thRow_1stColumn.getText().isEmpty();
					System.out.println("actColumnR4C1GetText  :  "+actColumnR4C1GetText);
					boolean expColumnR4C1GetText  = true;
					
					boolean actColumnR4C2GetText=select4thRow_2ndColumn.getText().isEmpty();
					System.out.println("actColumnR5C2GetText  :  "+actColumnR4C2GetText);
					boolean expColumnR4C2GetText  = true;
					
					boolean actColumnR4C3GetText=select4thRow_3rdColumn.getText().isEmpty();
					System.out.println("actColumnR4C3GetText  :  "+actColumnR4C3GetText);
					boolean expColumnR4C3GetText  = true;
					
					System.out.println("Bin Column after Delete Row Value Actual     :  " + actColumnR4C1GetText +   " Value Expected : " + expColumnR4C1GetText);
					System.out.println("Bin Column after Delete Row Value Actual     :  " + actColumnR4C2GetText +   " Value Expected : " + expColumnR4C2GetText);
					System.out.println("Bin Column after Delete Row Value Actual     :  " + actColumnR4C3GetText +   " Value Expected : " + expColumnR4C3GetText);
					
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fourthRowIndex));
					fourthRowIndex.click();
						
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(insertRowBtn));
					insertRowBtn.click();
					
					boolean actColumnR1GetText=select4thRow_1stColumn.getText().isEmpty();
					System.out.println("actColumnR1GetText  :  "+actColumnR1GetText);
					boolean expColumnR1GetText = true; 
					
					boolean actColumnR2GetText=select4thRow_2ndColumn.getText().isEmpty();
					System.out.println("actColumnR2GetText  :  "+actColumnR2GetText);
					boolean expColumnR2GetText = true;
					
					boolean actColumnR3GetText=select4thRow_3rdColumn.getText().isEmpty();
					System.out.println("actColumnR3GetText  :  "+actColumnR3GetText);
					boolean expColumnR3GetText = true;
					
					System.out.println("Bin Column after Delete Row Value Actual     :  " + actColumnR1GetText +   " Value Expected : " + expColumnR1GetText);
					System.out.println("Bin Column after Delete Row Value Actual     :  " + actColumnR2GetText +   " Value Expected : " + expColumnR2GetText);
					System.out.println("Bin Column after Delete Row Value Actual     :  " + actColumnR3GetText +   " Value Expected : " + expColumnR3GetText);
					
					
					boolean actMethod=actColumnR5C1GetText==expColumnR5C1GetText && actColumnR5C2GetText==expColumnR5C2GetText && actColumnR5C3GetText==expColumnR5C3GetText
							 && actColumnR4C1GetText==expColumnR4C1GetText && actColumnR4C2GetText==expColumnR4C2GetText && actColumnR4C3GetText==expColumnR4C3GetText
							&& actColumnR1GetText==expColumnR1GetText && actColumnR2GetText==expColumnR2GetText && actColumnR3GetText==expColumnR3GetText;
					
					String actResult=Boolean.toString(actMethod);
					String expResult=excelReader.getCellData(xlSheetName, 1133, 7);
					
					 excelReader.setCellData(xlfile, xlSheetName, 1133, 8, actResult.toUpperCase());
					
					
					if(actMethod==true)
					{
						System.out.println("Test Pass  deleted row Working  ");
						excelReader.setCellData(xlfile, xlSheetName, 1132, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail Not Deleted Row");
						excelReader.setCellData(xlfile, xlSheetName, 1132, 9, resFail);
						return false;
					}
				  }
				 catch (Exception e) 
				  {
					  String exception =e.getMessage();
					  excelReader.setExceptionInExcel(xlfile, xlSheetName, 1132, 10, exception);
					  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
					  return false;
				  }
				   }
				  
			   
			   @FindBy(xpath = "//div[@id='idGlobalError']//div[1]//table[1]//tbody[1]//tr[1]//td[3]//span[1]")
			   public static WebElement errorMessage2CloseBtn;
				
				  
			   public boolean checkOpeningBalanceVoucherEditPreviousUpdateRowAndSave() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			   {
				 excelReader=new ExcelReader(POJOUtility.getExcelPath());
				 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
				
				 try
				 {
					 
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_1stColumn));
						select4thRow_1stColumn.click();
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));	
										
						enter_AccountTxt.click();
						enter_AccountTxt.sendKeys(Keys.SPACE);
						
						//Fourth Row
					    int accountCount=openingBalAccountListInGrid.size();
						System.err.println(accountCount);	
						
						for(int i=0 ; i < accountCount ;i++)
						{
						
							String data=openingBalAccountListInGrid.get(i).getText();
							
							if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1135, 6)))
							{
								openingBalAccountListInGrid.get(i).click();
								
								break;
							}
						}
						
							
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));	
						enter_AccountTxt.sendKeys(Keys.TAB);
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_DebitTxt));	
						enter_DebitTxt.sendKeys(Keys.TAB);
								
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_OBCreditACTxt));
						enter_OBCreditACTxt.sendKeys(excelReader.getCellData(xlSheetName, 1136, 6));
						
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_1stColumn));
						select5thRow_1stColumn.click();
						
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));	
						enter_AccountTxt.click();
						enter_AccountTxt.sendKeys("ST");
						
						System.err.println(accountCount);
							
						for(int i=0 ; i < accountCount ;i++)
						{
						
							String data=openingBalAccountListInGrid.get(i).getText();
							
							if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1137, 6)))
							{
								openingBalAccountListInGrid.get(i).click();
								
								break;
							}
						}
						
							
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));	
						enter_AccountTxt.sendKeys(Keys.TAB);
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_DebitTxt));	
						enter_DebitTxt.sendKeys(excelReader.getCellData(xlSheetName, 1138, 6));
						enter_DebitTxt.sendKeys(Keys.TAB);
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_OBCreditACTxt));
						enter_OBCreditACTxt.sendKeys(Keys.TAB);
						
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select6thRow_1stColumn));
						select6thRow_1stColumn.click();
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));	
										
						enter_AccountTxt.click();
						enter_AccountTxt.sendKeys(Keys.SPACE);
						
						//Sixth Row
					    int accountCount2=openingBalAccountListInGrid.size();
						System.err.println(accountCount2);	
						
						for(int i=0 ; i < accountCount2 ;i++)
						{
						
							String data=openingBalAccountListInGrid.get(i).getText();
							
							if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1139, 6)))
							{
								openingBalAccountListInGrid.get(i).click();
								
								break;
							}
						}
							
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));	
						enter_AccountTxt.sendKeys(Keys.TAB);
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_DebitTxt));	
						enter_DebitTxt.sendKeys(Keys.TAB);
								
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_OBCreditACTxt));
						enter_OBCreditACTxt.sendKeys(excelReader.getCellData(xlSheetName, 1140, 6));
						
						
					    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
						 
						String docno=documentNumberTxt.getAttribute("value");
						
						System.err.println("docno :  "+docno);
						
						String actFooterCreditAmt=vocFooterCreditAmount.getText();
						String expFooterCreditAmt=excelReader.getCellData(xlSheetName, 1141, 7);
							
						 excelReader.setCellData(xlfile, xlSheetName, 1141, 8, actFooterCreditAmt);
						
						System.out.println("Entry PAge Footer Credit Amount "  +actFooterCreditAmt +"  Value Expected  "+expFooterCreditAmt);
						
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
						saveBtn.click();
						
						
						String actPartyName = billRefPartyName.getText();
						String expPartyName = excelReader.getCellData(xlSheetName, 1142, 7);
						
						excelReader.setCellData(xlfile, xlSheetName, 1142, 8, actPartyName);
						
						System.out.println("Bill wise Screen Cutomer Name "  + actPartyName + "  Value Expected  " + expPartyName);
						
						
					    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefAdjustBillsGrid));
							
						String actAdjustbills=billRefAdjustBillsGrid.getAttribute("data-totalrows");
						String expAdjustbills="0";
						
						String expBillNewReference                      =excelReader.getCellData(xlSheetName, 1143, 7);
						String expBillTransactionCurrency               =excelReader.getCellData(xlSheetName, 1144, 7);
						String expBillBaseCurrency                      =excelReader.getCellData(xlSheetName, 1145, 7);
						String expBillLocalCurrency                     =excelReader.getCellData(xlSheetName, 1146, 7);
						String expBillBalanceNewRefAmount               =excelReader.getCellData(xlSheetName, 1147, 7);
						
				        String expbillRefAdjustAmountInTransCurency         =excelReader.getCellData(xlSheetName, 1148, 7);
				        String expbillRefBalanceAmountAdjustInTrnasCurrency =excelReader.getCellData(xlSheetName, 1149, 7);
				        

				        
				        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
				        String actBillNewReference                           = billRefNewReferenceTxt.getAttribute("value");
						String actBillTransactionCurrency                    = billRefTransactionCurency.getText();
						String actBillBaseCurrency                           = billRefBaseCurrency.getText();
						String actBillLocalCurrency                          = localCurrencyDhs.getText();
						String actBillBalanceNewRefAmount                    = balanceNewReferenceAmt.getText();
				        String actbillRefAdjustAmountInTransCurency          = billRefAdjustAmountInTransCurency.getText();
				        String actbillRefBalanceAmountAdjustInTrnasCurrency  = billRefBalanceAmountAdjustInTrnasCurrency.getText();
				        
				        
				        excelReader.setCellData(xlfile, xlSheetName, 1143, 8, actBillNewReference);
				        excelReader.setCellData(xlfile, xlSheetName, 1144, 8, actBillTransactionCurrency);
				        excelReader.setCellData(xlfile, xlSheetName, 1145, 8, actBillBaseCurrency);
				        excelReader.setCellData(xlfile, xlSheetName, 1146, 8, actBillLocalCurrency);
				        excelReader.setCellData(xlfile, xlSheetName, 1147, 8, actBillBalanceNewRefAmount);
				        excelReader.setCellData(xlfile, xlSheetName, 1148, 8, actbillRefAdjustAmountInTransCurency);
				        excelReader.setCellData(xlfile, xlSheetName, 1149, 8, actbillRefBalanceAmountAdjustInTrnasCurrency);
				        
				 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
				 		billRefNewReferenceTxt.click();
				 		
				 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
				 		billRefPickIcon.click();
				    	
				        String expBillNewReferencePick                          = excelReader.getCellData(xlSheetName, 1151, 7);
				 		String expBillTransactionCurrencyPick                   = excelReader.getCellData(xlSheetName, 1152, 7);
				 		String expBillBaseCurrencyPick                          = excelReader.getCellData(xlSheetName, 1153, 7);
				 		String expBillLocalCurrencyPick                         = excelReader.getCellData(xlSheetName, 1154, 7);
				 		String expBillBalanceNewRefAmountPick                   = excelReader.getCellData(xlSheetName, 1155, 7);
				 	    String expbillRefAdjustAmountInTransCurencyPick          = excelReader.getCellData(xlSheetName,1156, 7);
				        String expbillRefBalanceAmountAdjustInTrnasCurrencyPick = excelReader.getCellData(xlSheetName, 1157, 7);
				 
				        String expconversationRateBaseCurrencyRatePick = excelReader.getCellData(xlSheetName, 1158, 7);
				        String expconversationRateLocalCurrencyRatePick = excelReader.getCellData(xlSheetName, 1159, 7);
				 		
				 
				        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
				      
				        String actBillNewReferencePick                           = billRefNewReferenceTxt.getAttribute("value");
				 		String actBillTransactionCurrencyPick                    = billRefTransactionCurency.getText();
				 		String actBillBaseCurrencyPick                           = billRefBaseCurrency.getText();
				 		String actBillLocalCurrencyPick                          = localCurrencyDhs.getText();
				 		String actBillBalanceNewRefAmountPick                    = balanceNewReferenceAmt.getText();
				 		String actbillRefAdjustAmountInTransCurencyPick          = billRefAdjustAmountInTransCurency.getText();
					    String actbillRefBalanceAmountAdjustInTrnasCurrencyPick  = billRefBalanceAmountAdjustInTrnasCurrency.getText();
				 		
				 	    String actconversationRateBaseCurrencyRatePick   = conversationRateBaseCurrencyRate.getText();
				        String actconversationRateLocalCurrencyRatePick  = conversationRateLocalCurrencyRate.getText();
				 		
				    	
				        excelReader.setCellData(xlfile, xlSheetName, 1151, 8, actBillNewReferencePick);
				        excelReader.setCellData(xlfile, xlSheetName, 1152, 8, actBillTransactionCurrencyPick);
				        excelReader.setCellData(xlfile, xlSheetName, 1153, 8, actBillBaseCurrencyPick);
				        excelReader.setCellData(xlfile, xlSheetName, 1154, 8, actBillLocalCurrencyPick);
				        excelReader.setCellData(xlfile, xlSheetName, 1155, 8, actBillBalanceNewRefAmountPick);
				        excelReader.setCellData(xlfile, xlSheetName, 1156, 8, actbillRefAdjustAmountInTransCurencyPick);
				        excelReader.setCellData(xlfile, xlSheetName, 1157, 8, actbillRefBalanceAmountAdjustInTrnasCurrencyPick);
				        excelReader.setCellData(xlfile, xlSheetName, 1158, 8, actconversationRateBaseCurrencyRatePick); 
				        excelReader.setCellData(xlfile, xlSheetName, 1159, 8, actconversationRateLocalCurrencyRatePick);
						
						
				        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
				        billRefOkBtn.click();
				        
				        
				        Thread.sleep(2000);
				        //To Validate Cash Negative Message 
					    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessage));
						String actErrrorMessage = errorMessage.getText();
						String expErrorMessage =excelReader.getCellData(xlSheetName, 1160, 7);
				 		
		                excelReader.setCellData(xlfile, xlSheetName, 1160, 8, actErrrorMessage);
						
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessage2CloseBtn));
						errorMessage2CloseBtn.click();
				        
				        boolean savingVoucher=checkVoucherSavingMessage(docno);
				        
				        System.out.println("Bill reference Adjustment Bills  :"+ actAdjustbills+"                          "+ "expDate :"+expAdjustbills);
				        System.out.println("actBillNewReference :             "+ actBillNewReference +"                    "+ "expBillNewReference :"+expBillNewReference);
				        System.out.println("actBillTransactionCurrency       :"+ actBillTransactionCurrency + "            " + "expBillTransactionCurrency :"+expBillTransactionCurrency);
				        System.out.println("actBillBaseCurrency :             "+ actBillBaseCurrency + "                   " +"expBillBaseCurrency :"+expBillBaseCurrency);
				        System.out.println("actBillLocalCurrency :            "+ actBillLocalCurrency+ "                   " +"expBillLocalCurrency :"+expBillLocalCurrency);
				        System.out.println("actBillBalanceNewRefAmount :      "+ actBillBalanceNewRefAmount + "            " + "expBillBalanceNewRefAmount :"+expBillBalanceNewRefAmount);
				       
				        System.out.println("actbillRefAdjustAmountInTransCurency :"+ actbillRefAdjustAmountInTransCurency+ "       " +"expbillRefAdjustAmountInTransCurency :"+expbillRefAdjustAmountInTransCurency);
				        System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrency :"+ actbillRefBalanceAmountAdjustInTrnasCurrency + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrency :"+expbillRefBalanceAmountAdjustInTrnasCurrency);

				         
				       //////Pick
				        
				        System.out.println("actBillNewReferencePick :              "+ actBillNewReferencePick +"              "+ "expBillNewReferencePick :"+expBillNewReferencePick);
				        System.out.println("actBillTransactionCurrencyPick :       "+ actBillTransactionCurrencyPick + "     " + "expBillTransactionCurrencyPick :"+expBillTransactionCurrencyPick);
				        System.out.println("actBillBaseCurrencyPick :              "+ actBillBaseCurrencyPick + "            " + "expBillBaseCurrencyPick :"+expBillBaseCurrencyPick);
				        System.out.println("actBillLocalCurrencyPick :             "+ actBillLocalCurrency+ "                " +"expBillLocalCurrencyPick :"+expBillLocalCurrency);
				        System.out.println("actBillBalanceNewRefAmountPick :       "+ actBillBalanceNewRefAmountPick +        " " + "expBillBalanceNewRefAmountPick :"+expBillBalanceNewRefAmountPick);
				        System.out.println("actconversationRateBaseCurrRatePick:   "+ actconversationRateBaseCurrencyRatePick+ "  " +"expconversationRateBaseCurrencyRatePick :"+expconversationRateBaseCurrencyRatePick);
				        System.out.println("actconversationRateLocalCurRatePick :  "+ actconversationRateLocalCurrencyRatePick+ " " + "expconversationRateLocalCurrencyRatePick :"+expconversationRateLocalCurrencyRatePick);
				       	      
				        
				        System.out.println(" Voucher Saving Status             "+savingVoucher +"                     "+"True");
				        System.out.println(" Voucher Saving Message :          "+actErrrorMessage+"                    "+expErrorMessage);
				        
				        
				        if (actPartyName.equalsIgnoreCase(expPartyName) && actAdjustbills.equalsIgnoreCase(expAdjustbills) && savingVoucher==true && actBillNewReference.equalsIgnoreCase(expBillNewReference) && actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 
				 				actBillBaseCurrency.equalsIgnoreCase(expBillBaseCurrency) && actBillLocalCurrency.equalsIgnoreCase(expBillLocalCurrency) && 
				 				actBillBalanceNewRefAmount.equalsIgnoreCase(expBillBalanceNewRefAmount) && 
				 			     actbillRefAdjustAmountInTransCurency.equalsIgnoreCase(expbillRefAdjustAmountInTransCurency) &&
				 				actbillRefBalanceAmountAdjustInTrnasCurrency.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrency) && 
				 		        
				        		
				 		        actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) && actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) && 
								actBillBaseCurrencyPick.equalsIgnoreCase(expBillBaseCurrencyPick) && actBillLocalCurrencyPick.equalsIgnoreCase(expBillLocalCurrencyPick) && 
								actBillBalanceNewRefAmountPick.equalsIgnoreCase(expBillBalanceNewRefAmountPick) &&
								actconversationRateBaseCurrencyRatePick.equalsIgnoreCase(expconversationRateBaseCurrencyRatePick) && actconversationRateLocalCurrencyRatePick.equalsIgnoreCase(expconversationRateLocalCurrencyRatePick) && 
								actFooterCreditAmt.equalsIgnoreCase(expFooterCreditAmt)&& actErrrorMessage.equalsIgnoreCase(expErrorMessage))
				     
					{
						System.out.println("Test Pass  deleted row Working  ");
						excelReader.setCellData(xlfile, xlSheetName, 1134, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail Not Deleted Row");
						excelReader.setCellData(xlfile, xlSheetName, 1134, 9, resFail);
						return false;
					}
				  }
				 catch (Exception e) 
				  {
					  String exception =e.getMessage();
					  excelReader.setExceptionInExcel(xlfile, xlSheetName, 1134, 10, exception);
					  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
					  return false;
				  }
				   }
				  
				  
				 
			   
			   public boolean checkCopyandPasteToClipboardInOpeningBalance() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
			   {
				   
				    excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
				try 
				{

				    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
				    previousBtn.click();
				    
			        boolean loading=checkLoadingMessage();
			  		
			  		System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
				   
			  		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
			  		toggleBtn.click();
			  		
			  		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(copytoClipboardBtn));
			  		copytoClipboardBtn.click();
			  		
			  		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nextBtn));
			  		nextBtn.click();
			  		
			  		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
			  		toggleBtn.click();
			  		
			  		
			  		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pastefromClipboardBtn));
			  		pastefromClipboardBtn.click();
			  		
			  		
			  		String expValidationMessage=excelReader.getCellData(xlSheetName, 1162, 7);
			  		
			  		String actValidationMessage=checkValidationMessage(expValidationMessage);
			  		 excelReader.setCellData(xlfile, xlSheetName, 1162, 8, actValidationMessage);
			  		
			  		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sixthRowIndex));
					sixthRowIndex.click();
						
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
					deleteRowBtn.click();
			  		
			  		
					boolean actColumnR6C1GetText=select6thRow_1stColumn.getText().isEmpty();
					System.out.println("actColumnR6C1GetText  :  "+actColumnR6C1GetText);
					boolean expColumnR6C1GetText  = true;

					
					String actDocno               = documentNumberTxt.getAttribute("value");
			        String actCurrency            = voucherHeaderCurrency.getAttribute("value");
					String actDepartment          = departmentTxt.getAttribute("value");
			        String actExchangeRate        = voucherHeaderExchangeRate.getAttribute("value");
			        String actLocExchangeRate     = voucherHeaderLocalExchangeRate.getAttribute("value");
					
					String actR1Account           = select1stRow_1stColumn.getText();
					String actR2Account           = select2ndRow_1stColumn.getText();
					String actR3Account           = select3rdRow_1stColumn.getText();
					String actR4Account           = select4thRow_1stColumn.getText();
					String actR5Account           = select5thRow_1stColumn.getText();
					
					String actR1Debit             = select1stRow_2ndColumn.getText();
					String actR2Debit             = select2ndRow_2ndColumn.getText();
					String actR3Debit             = select3rdRow_2ndColumn.getText();
					String actR4Credit            = select4thRow_3rdColumn.getText();
					String actR5Debit             = select5thRow_2ndColumn.getText();
			       
			        
			    	String actFooterCreditAmt    =vocFooterCreditAmount.getText();
			    	String actVoucherDebitAmt   = vocFooterdebitAmount.getText();
			    	
			    	 excelReader.setCellData(xlfile, xlSheetName, 1163, 8, actDocno);
			    	 excelReader.setCellData(xlfile, xlSheetName, 1164, 8, actCurrency);
			    	 excelReader.setCellData(xlfile, xlSheetName, 1165, 8, actDepartment);
			    	 excelReader.setCellData(xlfile, xlSheetName, 1166, 8, actExchangeRate);
			    	 excelReader.setCellData(xlfile, xlSheetName, 1167, 8, actLocExchangeRate);
			    	 excelReader.setCellData(xlfile, xlSheetName, 1168, 8, actR1Account);
			    	 excelReader.setCellData(xlfile, xlSheetName, 1169, 8, actR1Debit);
			    	 excelReader.setCellData(xlfile, xlSheetName, 1170, 8, actR2Account);
			    	 excelReader.setCellData(xlfile, xlSheetName, 1171, 8, actR2Debit);
			    	 excelReader.setCellData(xlfile, xlSheetName, 1172, 8, actR3Account);
			    	 excelReader.setCellData(xlfile, xlSheetName, 1173, 8, actR3Debit);
			    	 excelReader.setCellData(xlfile, xlSheetName, 1174, 8, actR4Account);
			    	 excelReader.setCellData(xlfile, xlSheetName, 1175, 8, actR4Credit); 
			    	 excelReader.setCellData(xlfile, xlSheetName, 1176, 8, actR5Account);
			    	 excelReader.setCellData(xlfile, xlSheetName, 1177, 8, actR5Debit);
			    	 
			    	 excelReader.setCellData(xlfile, xlSheetName, 1178, 8, actFooterCreditAmt);
			    	 excelReader.setCellData(xlfile, xlSheetName, 1179, 8, actVoucherDebitAmt);
			    	 
					
					String expDocno               = excelReader.getCellData(xlSheetName, 1163, 7);
				    String expCurrency            = excelReader.getCellData(xlSheetName, 1164, 7);
					String expDepartment          = excelReader.getCellData(xlSheetName, 1165, 7);
			        String expExchangeRate        = excelReader.getCellData(xlSheetName, 1166, 7);
			        String expLocExchangeRate     = excelReader.getCellData(xlSheetName, 1167, 7);

					String expR1Account           = excelReader.getCellData(xlSheetName, 1168, 7);
					String expR1Debit             = excelReader.getCellData(xlSheetName, 1169, 7);
					
					String expR2Account           = excelReader.getCellData(xlSheetName, 1170, 7);
					String expR2Debit             = excelReader.getCellData(xlSheetName, 1171, 7);
					
					String expR3Account           = excelReader.getCellData(xlSheetName, 1172, 7);
					String expR3Debit             = excelReader.getCellData(xlSheetName, 1173, 7);
					
					String expR4Account           = excelReader.getCellData(xlSheetName, 1174, 7);
					String expR4Credit             = excelReader.getCellData(xlSheetName, 1175, 7);
					
					String expR5Account           = excelReader.getCellData(xlSheetName, 1176, 7);
					String expR5Debit             = excelReader.getCellData(xlSheetName, 1177, 7);
					
					String expFooterCreditAmt     = excelReader.getCellData(xlSheetName, 1178, 7);
			        String expVoucherDebitAmt     = excelReader.getCellData(xlSheetName, 1179, 7);
				


					System.out.println("Entry Page Document Number    "+actDocno           +"  value Expected  "+expDocno);
					System.out.println("Entry Page Currency           "+actCurrency        +"  value Expected  "+expCurrency);
					System.out.println("Entry Page Department         "+actDepartment      +"  value Expected  "+expDepartment);
					System.out.println("Entry Page Exchange Rate      "+actExchangeRate    +"  value Expected  "+expExchangeRate);
					System.out.println("Entry Page Department         "+actLocExchangeRate +"  value Expected  "+expLocExchangeRate);

					System.out.println("Entry Page R1Account          "+actR1Account       +"  value Expected  "+expR1Account);
					System.out.println("Entry Page R2Account          "+actR2Account       +"  value Expected  "+expR2Account);
					System.out.println("Entry Page R3Account          "+actR3Account       +"  value Expected  "+expR3Account);
					System.out.println("Entry Page R4Account          "+actR4Account       +"  value Expected  "+expR4Account);
					System.out.println("Entry Page R5Account          "+actR5Account       +"  value Expected  "+expR5Account);
					
					System.out.println("Entry Page R1Debit            "+actR1Debit         +"  value Expected  "+expR1Debit);
					System.out.println("Entry Page R2Debit            "+actR2Debit         +"  value Expected  "+expR2Debit);
					System.out.println("Entry Page R3Debit            "+actR3Debit         +"  value Expected  "+expR3Debit);
					System.out.println("Entry Page R4Debit            "+actR4Credit         +"  value Expected  "+expR4Credit);
					System.out.println("Entry Page R5Credit           "+actR5Debit        +"  value Expected  "+expR5Debit);
					
					System.out.println("Entry Page Debit Amount       "+actVoucherDebitAmt +"  value Expected  "+expVoucherDebitAmt);
					System.out.println("Entry Page Credit Amount      "+actFooterCreditAmt +"  value Expected  "+expFooterCreditAmt);
					System.out.println("Delete Row  After Copy From Clipboard : "+actColumnR6C1GetText+"  value Expected  "+expColumnR6C1GetText);
					System.out.println("ValidationMessage                     : "+actValidationMessage +"  value Expected  "+expValidationMessage);
					
					
					if (loading==true && actDocno.equalsIgnoreCase(expDocno) && actCurrency.equalsIgnoreCase(expCurrency) &&actDepartment.equalsIgnoreCase(expDepartment) && 
							
							actExchangeRate.equalsIgnoreCase(expExchangeRate) && actLocExchangeRate.equalsIgnoreCase(expLocExchangeRate) && 
							
							actR1Account.equalsIgnoreCase(expR1Account) && actR1Debit.equalsIgnoreCase(expR1Debit) && 
							
							actR2Account.equalsIgnoreCase(expR2Account) && actR2Debit.equalsIgnoreCase(expR2Debit) && 
							actR3Account.equalsIgnoreCase(expR3Account) && actR3Debit.equalsIgnoreCase(expR3Debit) && 
							actR4Account.equalsIgnoreCase(expR4Account) && actR4Credit.equalsIgnoreCase(expR4Credit) && 
							
							actR5Account.equalsIgnoreCase(expR5Account) && actR5Debit.equalsIgnoreCase(expR5Debit) && 
							
							actFooterCreditAmt.equalsIgnoreCase(expFooterCreditAmt) && 
							
							actVoucherDebitAmt.equalsIgnoreCase(expVoucherDebitAmt) && actColumnR6C1GetText==expColumnR6C1GetText)
					{
						
						System.out.println(" Test Pass: Data Saved Successfully ");
						excelReader.setCellData(xlfile, xlSheetName, 1161, 9, resPass);
						return true;
					}
					else 
					{
						System.out.println(" Test Pass: Data Saved Successfully ");
						excelReader.setCellData(xlfile, xlSheetName, 1161, 9, resFail);
						return false;
					}
			   }
					 catch (Exception e) 
					  {
						  String exception =e.getMessage();
						  excelReader.setExceptionInExcel(xlfile, xlSheetName, 1057, 10, exception);
						  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
						  return false;
					  }
					   }
			   
			   
			   
			   
			   public boolean checkSavingOpeningBalanceVoucherAfterCopyToClipBoard() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
			   {
				   
				   excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
				   
				   try
				   {
				   
					String docno=documentNumberTxt.getAttribute("value");
					
					System.err.println("docno :  "+docno);
				   
				    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
				    saveBtn.click();
				   
				    
				    String actPartyName = billRefPartyName.getText();
					String expPartyName = excelReader.getCellData(xlSheetName, 1181, 7);
					
					excelReader.setCellData(xlfile, xlSheetName, 1181, 8, actPartyName);
					
					System.out.println("Bill wise Screen Cutomer Name "  + actPartyName + "  Value Expected  " + expPartyName);
					
					
				    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefAdjustBillsGrid));
						
					String actAdjustbills=billRefAdjustBillsGrid.getAttribute("data-totalrows");
					String expAdjustbills="0";
					
					String expBillNewReference                      =excelReader.getCellData(xlSheetName, 1182, 7);
					String expBillTransactionCurrency               =excelReader.getCellData(xlSheetName, 1183, 7);
					String expBillBaseCurrency                      =excelReader.getCellData(xlSheetName, 1184, 7);
					String expBillLocalCurrency                     =excelReader.getCellData(xlSheetName, 1185, 7);
					String expBillBalanceNewRefAmount               =excelReader.getCellData(xlSheetName, 1186, 7);
					
			        String expbillRefAdjustAmountInTransCurency         =excelReader.getCellData(xlSheetName, 1187, 7);
			        String expbillRefBalanceAmountAdjustInTrnasCurrency =excelReader.getCellData(xlSheetName, 1188, 7);
			        

			        
			        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
			        String actBillNewReference                           = billRefNewReferenceTxt.getAttribute("value");
					String actBillTransactionCurrency                    = billRefTransactionCurency.getText();
					String actBillBaseCurrency                           = billRefBaseCurrency.getText();
					String actBillLocalCurrency                          = localCurrencyDhs.getText();
					String actBillBalanceNewRefAmount                    = balanceNewReferenceAmt.getText();
			        String actbillRefAdjustAmountInTransCurency          = billRefAdjustAmountInTransCurency.getText();
			        String actbillRefBalanceAmountAdjustInTrnasCurrency  = billRefBalanceAmountAdjustInTrnasCurrency.getText();
			        
			        
			        excelReader.setCellData(xlfile, xlSheetName, 1182, 8, actBillNewReference);
			        excelReader.setCellData(xlfile, xlSheetName, 1183, 8, actBillTransactionCurrency);
			        excelReader.setCellData(xlfile, xlSheetName, 1184, 8, actBillBaseCurrency);
			        excelReader.setCellData(xlfile, xlSheetName, 1185, 8, actBillLocalCurrency);
			        excelReader.setCellData(xlfile, xlSheetName, 1186, 8, actBillBalanceNewRefAmount);
			        excelReader.setCellData(xlfile, xlSheetName, 1187, 8, actbillRefAdjustAmountInTransCurency);
			        excelReader.setCellData(xlfile, xlSheetName, 1188, 8, actbillRefBalanceAmountAdjustInTrnasCurrency);
			        
			 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
			 		billRefNewReferenceTxt.click();
			 		
			 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			 		billRefPickIcon.click();
			    	
			        String expBillNewReferencePick                          = excelReader.getCellData(xlSheetName, 1151, 7);
			 		String expBillTransactionCurrencyPick                   = excelReader.getCellData(xlSheetName, 1152, 7);
			 		String expBillBaseCurrencyPick                          = excelReader.getCellData(xlSheetName, 1153, 7);
			 		String expBillLocalCurrencyPick                         = excelReader.getCellData(xlSheetName, 1154, 7);
			 		String expBillBalanceNewRefAmountPick                   = excelReader.getCellData(xlSheetName, 1155, 7);
			 	    String expbillRefAdjustAmountInTransCurencyPick          = excelReader.getCellData(xlSheetName,1156, 7);
			        String expbillRefBalanceAmountAdjustInTrnasCurrencyPick = excelReader.getCellData(xlSheetName, 1157, 7);
			 
			        String expconversationRateBaseCurrencyRatePick = excelReader.getCellData(xlSheetName, 1158, 7);
			        String expconversationRateLocalCurrencyRatePick = excelReader.getCellData(xlSheetName, 1159, 7);
			 		
			 
			        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
			      
			        String actBillNewReferencePick                           = billRefNewReferenceTxt.getAttribute("value");
			 		String actBillTransactionCurrencyPick                    = billRefTransactionCurency.getText();
			 		String actBillBaseCurrencyPick                           = billRefBaseCurrency.getText();
			 		String actBillLocalCurrencyPick                          = localCurrencyDhs.getText();
			 		String actBillBalanceNewRefAmountPick                    = balanceNewReferenceAmt.getText();
			 		String actbillRefAdjustAmountInTransCurencyPick          = billRefAdjustAmountInTransCurency.getText();
				    String actbillRefBalanceAmountAdjustInTrnasCurrencyPick  = billRefBalanceAmountAdjustInTrnasCurrency.getText();
			 		
			 	    String actconversationRateBaseCurrencyRatePick   = conversationRateBaseCurrencyRate.getText();
			        String actconversationRateLocalCurrencyRatePick  = conversationRateLocalCurrencyRate.getText();
			 		
			    	
			        excelReader.setCellData(xlfile, xlSheetName, 1190, 8, actBillNewReferencePick);
			        excelReader.setCellData(xlfile, xlSheetName, 1191, 8, actBillTransactionCurrencyPick);
			        excelReader.setCellData(xlfile, xlSheetName, 1192, 8, actBillBaseCurrencyPick);
			        excelReader.setCellData(xlfile, xlSheetName, 1193, 8, actBillLocalCurrencyPick);
			        excelReader.setCellData(xlfile, xlSheetName, 1194, 8, actBillBalanceNewRefAmountPick);
			        excelReader.setCellData(xlfile, xlSheetName, 1195, 8, actbillRefAdjustAmountInTransCurencyPick);
			        excelReader.setCellData(xlfile, xlSheetName, 1196, 8, actbillRefBalanceAmountAdjustInTrnasCurrencyPick);
			        excelReader.setCellData(xlfile, xlSheetName, 1197, 8, actconversationRateBaseCurrencyRatePick); 
			        excelReader.setCellData(xlfile, xlSheetName, 1198, 8, actconversationRateLocalCurrencyRatePick);
				    
				    
				    
				  /* String actPartyName = billRefPartyName.getText();
					String expPartyName = "Customer B (122-002)";
					
					System.out.println("Bill wise Screen Cutomer Name "  + actPartyName + "  Value Expected  " + expPartyName);
					
					
				    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefAdjustBillsGrid));
						
					String actAdjustbills=billRefAdjustBillsGrid.getAttribute("data-totalrows");
					String expAdjustbills="0";
					
					String expBillNewReference                      ="0.00";
					String expBillTransactionCurrency               ="400.00";
					String expBillBaseCurrency                      ="400.00";
					String expBillLocalCurrency                     ="28.00";
					String expBillBalanceNewRefAmount               ="0.00";
					
			        String expbillRefAdjustAmountInTransCurency         ="0.00";
			        String expbillRefBalanceAmountAdjustInTrnasCurrency ="400.00";
			        

			        
			        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
			        String actBillNewReference                           = billRefNewReferenceTxt.getAttribute("value");
					String actBillTransactionCurrency                    = billRefTransactionCurency.getText();
					String actBillBaseCurrency                           = billRefBaseCurrency.getText();
					String actBillLocalCurrency                          = localCurrencyDhs.getText();
					String actBillBalanceNewRefAmount                    = balanceNewReferenceAmt.getText();
					
			        String actbillRefAdjustAmountInTransCurency         = billRefAdjustAmountInTransCurency.getText();
			        String actbillRefBalanceAmountAdjustInTrnasCurrency = billRefBalanceAmountAdjustInTrnasCurrency.getText();
			        
			        
			 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
			 		billRefNewReferenceTxt.click();
			         
			 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			 		billRefPickIcon.click();
			        
			        String expBillNewReferencePick                 ="400.00";
			 		String expBillTransactionCurrencyPick          ="400.00";
			 		String expBillBaseCurrencyPick                 ="400.00";
			 		String expBillLocalCurrencyPick                ="28.00";
			 		String expBillBalanceNewRefAmountPick          ="400.00";
			 		
			 
			        String expconversationRateBaseCurrencyRatePick  ="1";
			        String expconversationRateLocalCurrencyRatePick ="0.07";
			 		
			 
			        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
			      
			        String actBillNewReferencePick                   = billRefNewReferenceTxt.getAttribute("value");
			 		String actBillTransactionCurrencyPick            = billRefTransactionCurency.getText();
			 		String actBillBaseCurrencyPick                   = billRefBaseCurrency.getText();
			 		String actBillLocalCurrencyPick                  = localCurrencyDhs.getText();
			 		String actBillBalanceNewRefAmountPick            = balanceNewReferenceAmt.getText();
			 		
			 	    String actconversationRateBaseCurrencyRatePick   = conversationRateBaseCurrencyRate.getText();
			        String actconversationRateLocalCurrencyRatePick  = conversationRateLocalCurrencyRate.getText();
			 		
			    	
			        String actbillRefAdjustAmountInTransCurencyPick          = billRefAdjustAmountInTransCurency.getText();
			        String actbillRefBalanceAmountAdjustInTrnasCurrencyPick  = billRefBalanceAmountAdjustInTrnasCurrency.getText();*/
			      
			       
			        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			        billRefOkBtn.click();
			        
			        boolean savingVoucher=checkVoucherSavingMessage(docno);
			        
			        System.out.println("Bill reference Adjustment Bills  :"+ actAdjustbills+"                          "+ "expDate :"+expAdjustbills);
			        System.out.println("actBillNewReference :             "+ actBillNewReference +"                    "+ "expBillNewReference :"+expBillNewReference);
			        System.out.println("actBillTransactionCurrency       :"+ actBillTransactionCurrency + "            " + "expBillTransactionCurrency :"+expBillTransactionCurrency);
			        System.out.println("actBillBaseCurrency :             "+ actBillBaseCurrency + "                   " +"expBillBaseCurrency :"+expBillBaseCurrency);
			        System.out.println("actBillLocalCurrency :            "+ actBillLocalCurrency+ "                   " +"expBillLocalCurrency :"+expBillLocalCurrency);
			        System.out.println("actBillBalanceNewRefAmount :      "+ actBillBalanceNewRefAmount + "            " + "expBillBalanceNewRefAmount :"+expBillBalanceNewRefAmount);
			       
			        System.out.println("actbillRefAdjustAmountInTransCurency :"+ actbillRefAdjustAmountInTransCurency+ "       " +"expbillRefAdjustAmountInTransCurency :"+expbillRefAdjustAmountInTransCurency);
			        System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrency :"+ actbillRefBalanceAmountAdjustInTrnasCurrency + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrency :"+expbillRefBalanceAmountAdjustInTrnasCurrency);

			         
			       //////Pick
			        
			        System.out.println("actBillNewReferencePick :              "+ actBillNewReferencePick +"              "+ "expBillNewReferencePick :"+expBillNewReferencePick);
			        System.out.println("actBillTransactionCurrencyPick :       "+ actBillTransactionCurrencyPick + "     " + "expBillTransactionCurrencyPick :"+expBillTransactionCurrencyPick);
			        System.out.println("actBillBaseCurrencyPick :              "+ actBillBaseCurrencyPick + "            " + "expBillBaseCurrencyPick :"+expBillBaseCurrencyPick);
			        System.out.println("actBillLocalCurrencyPick :             "+ actBillLocalCurrency+ "                " +"expBillLocalCurrencyPick :"+expBillLocalCurrency);
			        System.out.println("actBillBalanceNewRefAmountPick :       "+ actBillBalanceNewRefAmountPick +        " " + "expBillBalanceNewRefAmountPick :"+expBillBalanceNewRefAmountPick);
			        System.out.println("actconversationRateBaseCurrRatePick:   "+ actconversationRateBaseCurrencyRatePick+ "  " +"expconversationRateBaseCurrencyRatePick :"+expconversationRateBaseCurrencyRatePick);
			        System.out.println("actconversationRateLocalCurRatePick :  "+ actconversationRateLocalCurrencyRatePick+ " " + "expconversationRateLocalCurrencyRatePick :"+expconversationRateLocalCurrencyRatePick);
			       	      
			        
			        System.out.println(" Voucher Saving Status             "+savingVoucher +"                     "+"True");
			     
			        
			        
			        if (actPartyName.equalsIgnoreCase(expPartyName) && actAdjustbills.equalsIgnoreCase(expAdjustbills) && savingVoucher==true && actBillNewReference.equalsIgnoreCase(expBillNewReference) && actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 
			 				actBillBaseCurrency.equalsIgnoreCase(expBillBaseCurrency) && actBillLocalCurrency.equalsIgnoreCase(expBillLocalCurrency) && 
			 				actBillBalanceNewRefAmount.equalsIgnoreCase(expBillBalanceNewRefAmount) && 
			 			     actbillRefAdjustAmountInTransCurency.equalsIgnoreCase(expbillRefAdjustAmountInTransCurency) &&
			 				actbillRefBalanceAmountAdjustInTrnasCurrency.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrency) && 
			 		        
			        		
			 		        actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) && actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) && 
							actBillBaseCurrencyPick.equalsIgnoreCase(expBillBaseCurrencyPick) && actBillLocalCurrencyPick.equalsIgnoreCase(expBillLocalCurrencyPick) && 
							actBillBalanceNewRefAmountPick.equalsIgnoreCase(expBillBalanceNewRefAmountPick) &&
							actconversationRateBaseCurrencyRatePick.equalsIgnoreCase(expconversationRateBaseCurrencyRatePick) && actconversationRateLocalCurrencyRatePick.equalsIgnoreCase(expconversationRateLocalCurrencyRatePick))
			     
				     {
					
			        	excelReader.setCellData(xlfile, xlSheetName, 1180, 9, resPass);
					    return true;
				     }
				    else
			    	{
					
				    	excelReader.setCellData(xlfile, xlSheetName, 1180, 9, resFail);
					    return false;
				    }
			       }
				   catch (Exception e) 
					  {
						  String exception =e.getMessage();
						  excelReader.setExceptionInExcel(xlfile, xlSheetName, 1180, 10, exception);
						  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
						  return false;
					  }
			   }
				   
			   public boolean checkDeleteOptionFromEntryPageinOpeningBalance() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
			   {
				   excelReader=new ExcelReader(POJOUtility.getExcelPath());
				   xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
				  
				   try
				   {
				   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
				   previousBtn.click();
				   
				   boolean loading=checkLoadingMessage();
				   
				   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));
				   new_DeleteBtn.click();
				   
				   getWaitForAlert();
					
				   String actAlertMessage=getAlert().getText();
					
				   String expAlertMessage=excelReader.getCellData(xlSheetName, 1200, 7);
			 		
		           excelReader.setCellData(xlfile, xlSheetName, 1200, 8, actAlertMessage);
				   
				   
					System.out.println("Alert Message on Deleteing the Voucher :  "+actAlertMessage +"  "+expAlertMessage);
					
					getAlert().accept();
					
					boolean deleteMessage=checkEntryPageDeleteMessage();
					
					System.out.println("DeleteMesssage  : "+deleteMessage+" Value Expected : "+"TRUE");
				
					String actDisplayDeleteMesssage=Boolean.toString(deleteMessage);
					String expDisplayDeleteMesssage=excelReader.getCellData(xlSheetName, 1201, 7);
			 		
		             excelReader.setCellData(xlfile, xlSheetName, 1201, 8, actDisplayDeleteMesssage.toUpperCase());
					
					
					if(actAlertMessage.contains(expAlertMessage) && deleteMessage==true)
					{
						System.out.println("Test Pass : Deleted Voucher");
						
						excelReader.setCellData(xlfile, xlSheetName, 1199, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail : NOT Deleted Voucher");
						
						excelReader.setCellData(xlfile, xlSheetName, 1199, 9, resFail);
						return false;
					}
				   }
				   catch (Exception e) 
					  {
						  String exception =e.getMessage();
						  excelReader.setExceptionInExcel(xlfile, xlSheetName, 1199, 10, exception);
						  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
						  return false;
					  }
					   
			   }
			   
			   

				public boolean checkOpeningBalanceNewCopyDocumentOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
				{
					
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
					try
					{
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
					String actdocNumber=documentNumberTxt.getAttribute("value");
					String expdocNumber="2";
					
					System.out.println("documnet Number : "+actdocNumber+""+expdocNumber);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
					toggleBtn.click();
					
					boolean Copydocument=copyDocumentOption.isDisplayed();
					
					String actCopydocument=Boolean.toString(Copydocument);
					String expCopydocument=excelReader.getCellData(xlSheetName, 1203, 7);
			 		
		            excelReader.setCellData(xlfile, xlSheetName, 1203, 8, actCopydocument.toUpperCase());
					
					System.out.println("Copy Document Option : "+actCopydocument+""+expCopydocument);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(copyDocumentOption));
					
					if(actdocNumber.equalsIgnoreCase(expdocNumber) && actCopydocument.equalsIgnoreCase(expCopydocument))
					{
						System.out.println("Test Pass : Copy Document Option Displayed");
						
						excelReader.setCellData(xlfile, xlSheetName, 1202, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail : Copy Document Option NOT Displayed");
						
						excelReader.setCellData(xlfile, xlSheetName, 1202, 9, resFail);
						return false;
					}
					}
					catch (Exception e) 
					  {
						  String exception =e.getMessage();
						  excelReader.setExceptionInExcel(xlfile, xlSheetName, 1202, 10, exception);
						  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
						  return false;
					  }
			}
					

				public boolean checkOpeningBalanceNewCopyDocumentScreenOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
				{
					
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
					try
					{
						
					
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(copyDocumentOption));
					copyDocumentOption.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cd_vouchertypeTxt));
					
					boolean actcd_vouchertypeTxt=cd_vouchertypeTxt.isDisplayed();
					boolean actcd_searchOnDropdown1=cd_searchOnDropdown1.isDisplayed();
					boolean actcd_searchOnDropdown2=cd_searchOnDropdown2.isDisplayed();
					boolean actcd_searchTxt=cd_searchTxt.isDisplayed();
					boolean actcd_refreshBtn=cd_refreshBtn.isDisplayed();
					boolean actcd_filterBtn=cd_filterBtn.isDisplayed();
					boolean actcd_HeaderChkBox=cd_HeaderChkBox.isDisplayed();
					boolean actcd_FirstChkBox=cd_FirstChkBox.isDisplayed();
					boolean actcd_clubsimilarTransChkBox=cd_clubsimilarTransChkBox.isDisplayed();
					boolean actcd_SelectallBtn=cd_SelectallBtn.isDisplayed();
					boolean actcd_firstBtn=cd_firstBtn.isDisplayed();
					boolean actcd_PreviousBtn=cd_PreviousBtn.isDisplayed();
					boolean actcd_PageNo=cd_PageNo.isDisplayed();
					boolean actcd_nextBtn=cd_nextBtn.isDisplayed();
					boolean actcd_LastBtn=cd_LastBtn.isDisplayed();
					boolean actcd_OkBtn=cd_OkBtn.isDisplayed();
					boolean actcd_CancelBtn=cd_CancelBtn.isDisplayed();
					
					
					boolean expcd_vouchertypeTxt=true;
					boolean expcd_searchOnDropdown1=true;
					boolean expcd_searchOnDropdown2=true;
					boolean expcd_searchTxt=true;
					boolean expcd_refreshBtn=true;
					boolean expcd_filterBtn=true;
					boolean expcd_HeaderChkBox=true;
					boolean expcd_FirstChkBox=true;
					boolean expcd_clubsimilarTransChkBox=true;
					boolean expcd_SelectallBtn=true;
					boolean expcd_firstBtn=true;
					boolean expcd_PreviousBtn=true;
					boolean expcd_PageNo=true;
					boolean expcd_nextBtn=true;
					boolean expcd_LastBtn=true;
					boolean expcd_OkBtn=true;
					boolean expcd_CancelBtn=true;
					
					System.out.println("Copy Document Voucher type Value Actual               : " + actcd_vouchertypeTxt+         " Value Expected  : " + expcd_vouchertypeTxt);
					System.out.println("Copy Document Search dropdown 1 Value Actual          : " + actcd_searchOnDropdown1+      " Value Expected  : " + expcd_searchOnDropdown1);
					System.out.println("Copy Document Search dropdown 2 Value Actual          : " + actcd_searchOnDropdown2+      " Value Expected  : " + expcd_searchOnDropdown2);
					System.out.println("Copy Document Search text Value Actual                : " + actcd_searchTxt+              " Value Expected  : " + expcd_searchTxt);
					System.out.println("Copy Document Refresh Value Actual                    : " + actcd_refreshBtn+             " Value Expected  : " + expcd_refreshBtn);
					System.out.println("Copy Document Filter Value Actual                     : " + actcd_filterBtn+              " Value Expected  : " + expcd_filterBtn);
					System.out.println("Copy Document Header Chk box Value Actual             : " + actcd_HeaderChkBox+           " Value Expected  : " + expcd_HeaderChkBox);
					System.out.println("Copy Document First Chk Box Value Actual              : " + actcd_FirstChkBox+            " Value Expected  : " + expcd_FirstChkBox);
					System.out.println("Copy Document Club Similar Trans Chk Box Value Actual : " + actcd_clubsimilarTransChkBox+ " Value Expected  : " + expcd_clubsimilarTransChkBox);
					System.out.println("Copy Document Select All Value Actual                 : " + actcd_SelectallBtn+           " Value Expected  : " + expcd_SelectallBtn);
					System.out.println("Copy Document first Button Value Actual               : " + actcd_firstBtn+               " Value Expected  : " + expcd_firstBtn);
					System.out.println("Copy Document Previous Button Value Actual            : " + actcd_PreviousBtn+            " Value Expected  : " + expcd_PreviousBtn);
					System.out.println("Copy Document Page No Value Actual                    : " + actcd_PageNo+                 " Value Expected  : " + expcd_PageNo);
					System.out.println("Copy Document Next Button Value Actual                : " + actcd_nextBtn+                " Value Expected  : " + expcd_nextBtn);
					System.out.println("Copy Document last Button Value Actual                : " + actcd_LastBtn+                " Value Expected  : " + expcd_LastBtn);
					System.out.println("Copy Document Ok Button Value Actual                  : " + actcd_OkBtn+                  " Value Expected  : " + expcd_OkBtn);
					System.out.println("Copy Document cancel Button Value Actual              : " + actcd_CancelBtn+              " Value Expected  : " + expcd_CancelBtn);
					
					
					
					boolean actMethod=actcd_vouchertypeTxt==expcd_vouchertypeTxt && actcd_searchOnDropdown1==expcd_searchOnDropdown1
							&& actcd_searchOnDropdown2==expcd_searchOnDropdown2 && actcd_searchTxt==expcd_searchTxt
							&& actcd_refreshBtn==expcd_refreshBtn && actcd_filterBtn==expcd_filterBtn
							&& actcd_HeaderChkBox==expcd_HeaderChkBox && actcd_FirstChkBox==expcd_FirstChkBox
							&& actcd_clubsimilarTransChkBox==expcd_clubsimilarTransChkBox && actcd_SelectallBtn==expcd_SelectallBtn
							&& actcd_firstBtn==expcd_firstBtn && actcd_PreviousBtn==expcd_PreviousBtn
							&& actcd_PageNo==expcd_PageNo && actcd_nextBtn==expcd_nextBtn
							&& actcd_LastBtn==expcd_LastBtn && actcd_OkBtn==expcd_OkBtn && actcd_CancelBtn==expcd_CancelBtn;
					
					
					
					String actResult=Boolean.toString(actMethod);
					String expResult=excelReader.getCellData(xlSheetName, 1205, 7);
			 		
		            excelReader.setCellData(xlfile, xlSheetName, 1205, 8, actResult.toUpperCase());
					
					if(actMethod==true)
					{
						System.out.println("Test Pass : Copy Document Options Are As Expected");
						excelReader.setCellData(xlfile, xlSheetName, 1204, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail : Copy Document Options Are NOT As Expected");
						excelReader.setCellData(xlfile, xlSheetName, 1204, 9, resFail);
						return false;
					}
					}
					catch (Exception e) 
					  {
						  String exception =e.getMessage();
						  excelReader.setExceptionInExcel(xlfile, xlSheetName, 1204, 10, exception);
						  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
						  return false;
					  }
					   }

					
			   
			   
			   
			   
				public boolean checkOpeningBalanceFirstRowCheckboxInCopyDocumentInOpeningBalance() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
				{
					
					try 
					{
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cd_FirstChkBox));
					cd_FirstChkBox.click();
					
					String actCopyDocAccR1=cd_R1C2.getText();
					String actCopyDocDebitR1=cd_R1C3.getText();
					
					
					String actCopyDocAccR2=cd_R2C2.getText();
					String actCopyDocDebitR2=cd_R2C3.getText();
					
					
					String actCopyDocAccR3=cd_R3C2.getText();
					String actCopyDocDebitR3=cd_R3C3.getText();
					
					
					String actCopyDocAccR4=cd_R4C2.getText();
					boolean actCopyDocDebitR4=cd_R4C3.getText().isEmpty();
					String actCopyDocCreditR4=cd_R4C4.getText();
					
					
					String actCopyDocAccR5=cd_R5C2.getText();
					String actCopyDocDebitR5=cd_R5C3.getText();
					
					
					excelReader.setCellData(xlfile, xlSheetName, 1207, 8, actCopyDocAccR1);
					excelReader.setCellData(xlfile, xlSheetName, 1208, 8, actCopyDocDebitR1);
					excelReader.setCellData(xlfile, xlSheetName, 1209, 8, actCopyDocAccR2);
					excelReader.setCellData(xlfile, xlSheetName, 1210, 8, actCopyDocDebitR2);
					excelReader.setCellData(xlfile, xlSheetName, 1211, 8, actCopyDocAccR3);
					excelReader.setCellData(xlfile, xlSheetName, 1212, 8, actCopyDocDebitR3);
					excelReader.setCellData(xlfile, xlSheetName, 1213, 8, actCopyDocAccR4);
					excelReader.setCellData(xlfile, xlSheetName, 1214, 8, actCopyDocCreditR4);
					excelReader.setCellData(xlfile, xlSheetName, 1215, 8, actCopyDocAccR5);
					excelReader.setCellData(xlfile, xlSheetName, 1216, 8, actCopyDocDebitR5);
			
					
					// expected values
					String expCopyDocAccR1    =excelReader.getCellData(xlSheetName, 1207, 7);
					String expCopyDocDebitR1=excelReader.getCellData(xlSheetName, 1208, 7);
					
					
					String expCopyDocAccR2=excelReader.getCellData(xlSheetName, 1209, 7);
					String expCopyDocDebitR2=excelReader.getCellData(xlSheetName, 1210, 7);
					
					
					String expCopyDocAccR3=excelReader.getCellData(xlSheetName, 1211, 7);
					String expCopyDocDebitR3=excelReader.getCellData(xlSheetName, 1212, 7);
					
					String expCopyDocAccR4=excelReader.getCellData(xlSheetName, 1213, 7);
					boolean expCopyDocDebitR4=true;
					String expCopyDocCreditR4=excelReader.getCellData(xlSheetName, 1214, 7);
			
					
					String expCopyDocAccR5=excelReader.getCellData(xlSheetName, 1215, 7);
					String expCopyDocDebitR5=excelReader.getCellData(xlSheetName, 1216, 7);
					
					
					System.out.println("Copy Doc ACC Row 1 Value Actual      : " + actCopyDocAccR1   +  " Value Expected : " + expCopyDocAccR1);
					System.out.println("Copy Doc Debit Row 1  Value Actual   : " + actCopyDocDebitR1 +  " Value Expected : " + expCopyDocDebitR1);
					
					System.out.println("Copy Doc ACC Row 2 Value Actual      : " + actCopyDocAccR2   +  " Value Expected : " + expCopyDocAccR2);
					System.out.println("Copy Doc Debit Row 2 Value Actual    : " + actCopyDocDebitR2 +  " Value Expected : " + expCopyDocDebitR2);
					
					System.out.println("Copy Doc ACC Row 3 Value Actual      : " + actCopyDocAccR3   +  " Value Expected : " + expCopyDocAccR3);
					System.out.println("Copy Doc Debit Row 3 Value Actual    : " + actCopyDocDebitR3 +  " Value Expected : " + expCopyDocDebitR3);
					
					System.out.println("Copy Doc ACC Row 4 Value Actual      : " + actCopyDocAccR4   +  " Value Expected : " + expCopyDocAccR4);
					System.out.println("Copy Doc Debit Row 4 Value Actual    : " + actCopyDocDebitR4 +  " Value Expected : " + expCopyDocDebitR4);
					System.out.println("Copy Doc Credit Row 4 Value Actual   : " + actCopyDocCreditR4+  " Value Expected : " + expCopyDocCreditR4);
					
					System.out.println("Copy Doc Item Row 5 Value Actual     : " + actCopyDocAccR5   +  " Value Expected : " + expCopyDocAccR5);
					System.out.println("Copy Doc Debit Row 5 Value Actual    : " + actCopyDocDebitR5 +  " Value Expected : " + expCopyDocDebitR5);
					
					
					
					if(actCopyDocAccR1.equalsIgnoreCase(expCopyDocAccR1) && actCopyDocDebitR1.equalsIgnoreCase(expCopyDocDebitR1)
							
							&& actCopyDocAccR2.equalsIgnoreCase(expCopyDocAccR2) && actCopyDocDebitR2.equalsIgnoreCase(expCopyDocDebitR2)
							
							&& actCopyDocAccR3.equalsIgnoreCase(expCopyDocAccR3) && actCopyDocDebitR3.equalsIgnoreCase(expCopyDocDebitR3)
							
							&& actCopyDocAccR4.equalsIgnoreCase(expCopyDocAccR4) && actCopyDocDebitR4==expCopyDocDebitR4
							
							&& actCopyDocCreditR4.equalsIgnoreCase(expCopyDocCreditR4)
							
							&& actCopyDocAccR5.equalsIgnoreCase(expCopyDocAccR5) && actCopyDocDebitR5.equalsIgnoreCase(expCopyDocDebitR5))
					{
					
						excelReader.setCellData(xlfile, xlSheetName, 1206, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail : Copy Document Options Are NOT As Expected");
						excelReader.setCellData(xlfile, xlSheetName, 1206, 9, resFail);
						return false;
					}
					}
					
					  catch (Exception e) 
					  {
						  String exception =e.getMessage();
						  excelReader.setExceptionInExcel(xlfile, xlSheetName, 1206, 10, exception);
						  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
						  return false;
					  }
					   }

				
				
				public boolean checkLoadingVoucherInformationFromCopyDocumentOnClickOnOkInOpeningBalance() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
				{
					
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
					try
					{
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cd_OkBtn));
					cd_OkBtn.click();
					
		            Thread.sleep(2000);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
					documentNumberTxt.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sixthRowIndex));
					sixthRowIndex.click();
						
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
					deleteRowBtn.click();
					
					String actDocno               = documentNumberTxt.getAttribute("value");
			        String actCurrency            = voucherHeaderCurrency.getAttribute("value");
					String actDepartment          = departmentTxt.getAttribute("value");
			        String actExchangeRate        = voucherHeaderExchangeRate.getAttribute("value");
			        String actLocExchangeRate     = voucherHeaderLocalExchangeRate.getAttribute("value");
					
					String actR1Account           = select1stRow_1stColumn.getText();
					String actR2Account           = select2ndRow_1stColumn.getText();
					String actR3Account           = select3rdRow_1stColumn.getText();
					String actR4Account           = select4thRow_1stColumn.getText();
					String actR5Account           = select5thRow_1stColumn.getText();
					
					String actR1Debit             = select1stRow_2ndColumn.getText();
					String actR2Debit             = select2ndRow_2ndColumn.getText();
					String actR3Debit             = select3rdRow_2ndColumn.getText();
					String actR4Credit            = select4thRow_3rdColumn.getText();
					String actR5Debit             = select5thRow_2ndColumn.getText();
			       
			        
			    	String actFooterCreditAmt    =vocFooterCreditAmount.getText();
			    	String actVoucherDebitAmt   = vocFooterdebitAmount.getText();
			    	
			    	 excelReader.setCellData(xlfile, xlSheetName, 1218, 8, actDocno);
			    	 excelReader.setCellData(xlfile, xlSheetName, 1219, 8, actCurrency);
			    	 excelReader.setCellData(xlfile, xlSheetName, 1220, 8, actDepartment);
			    	 excelReader.setCellData(xlfile, xlSheetName, 1221, 8, actExchangeRate);
			    	 excelReader.setCellData(xlfile, xlSheetName, 1222, 8, actLocExchangeRate);
			    	 excelReader.setCellData(xlfile, xlSheetName, 1223, 8, actR1Account);
			    	 excelReader.setCellData(xlfile, xlSheetName, 1224, 8, actR1Debit);
			    	 excelReader.setCellData(xlfile, xlSheetName, 1225, 8, actR2Account);
			    	 excelReader.setCellData(xlfile, xlSheetName, 1226, 8, actR2Debit);
			    	 excelReader.setCellData(xlfile, xlSheetName, 1227, 8, actR3Account);
			    	 excelReader.setCellData(xlfile, xlSheetName, 1228, 8, actR3Debit);
			    	 excelReader.setCellData(xlfile, xlSheetName, 1229, 8, actR4Account);
			    	 excelReader.setCellData(xlfile, xlSheetName, 1230, 8, actR4Credit); 
			    	 excelReader.setCellData(xlfile, xlSheetName, 1231, 8, actR5Account);
			    	 excelReader.setCellData(xlfile, xlSheetName, 1232, 8, actR5Debit);
			    	 
			    	 excelReader.setCellData(xlfile, xlSheetName, 1233, 8, actFooterCreditAmt);
			    	 excelReader.setCellData(xlfile, xlSheetName, 1234, 8, actVoucherDebitAmt);
			    	 
					
					String expDocno               = excelReader.getCellData(xlSheetName, 1218, 7);
				    String expCurrency            = excelReader.getCellData(xlSheetName, 1219, 7);
					String expDepartment          = excelReader.getCellData(xlSheetName, 1220, 7);
			        String expExchangeRate        = excelReader.getCellData(xlSheetName, 1221, 7);
			        String expLocExchangeRate     = excelReader.getCellData(xlSheetName, 1222, 7);

					String expR1Account           = excelReader.getCellData(xlSheetName, 1223, 7);
					String expR1Debit             = excelReader.getCellData(xlSheetName, 1224, 7);
					
					String expR2Account           = excelReader.getCellData(xlSheetName, 1225, 7);
					String expR2Debit             = excelReader.getCellData(xlSheetName, 1226, 7);
					
					String expR3Account           = excelReader.getCellData(xlSheetName, 1227, 7);
					String expR3Debit             = excelReader.getCellData(xlSheetName, 1228, 7);
					
					String expR4Account           = excelReader.getCellData(xlSheetName, 1229, 7);
					String expR4Credit             = excelReader.getCellData(xlSheetName, 1230, 7);
					
					String expR5Account           = excelReader.getCellData(xlSheetName, 1231, 7);
					String expR5Debit             = excelReader.getCellData(xlSheetName, 1232, 7);
					
					String expFooterCreditAmt     = excelReader.getCellData(xlSheetName, 1233, 7);
			        String expVoucherDebitAmt     = excelReader.getCellData(xlSheetName, 1234, 7);
				
					
					System.out.println("Entry Page Document Number    "+actDocno           +"  value Expected  "+expDocno);
					System.out.println("Entry Page Currency           "+actCurrency        +"  value Expected  "+expCurrency);
					System.out.println("Entry Page Department         "+actDepartment      +"  value Expected  "+expDepartment);
					System.out.println("Entry Page Exchange Rate      "+actExchangeRate    +"  value Expected  "+expExchangeRate);
					System.out.println("Entry Page Department         "+actLocExchangeRate +"  value Expected  "+expLocExchangeRate);
					System.out.println("Entry Page R1Account          "+actR1Account       +"  value Expected  "+expR1Account);
					System.out.println("Entry Page R2Account          "+actR2Account       +"  value Expected  "+expR2Account);
					System.out.println("Entry Page R3Account          "+actR3Account       +"  value Expected  "+expR3Account);
					System.out.println("Entry Page R4Account          "+actR4Account       +"  value Expected  "+expR4Account);
					System.out.println("Entry Page R5Account          "+actR5Account       +"  value Expected  "+expR5Account);
					System.out.println("Entry Page R1Debit            "+actR1Debit         +"  value Expected  "+expR1Debit);
					System.out.println("Entry Page R2Debit            "+actR2Debit         +"  value Expected  "+expR2Debit);
					System.out.println("Entry Page R3Debit            "+actR3Debit         +"  value Expected  "+expR3Debit);
					System.out.println("Entry Page R4Debit            "+actR4Credit        +"  value Expected  "+expR4Credit);
					System.out.println("Entry Page R5Credit           "+actR5Debit         +"  value Expected  "+expR5Debit);
					System.out.println("Entry Page Debit Amount       "+actVoucherDebitAmt +"  value Expected  "+expVoucherDebitAmt);
					System.out.println("Entry Page Credit Amount      "+actFooterCreditAmt +"  value Expected  "+expFooterCreditAmt);
					
					
					if ( actDocno.equalsIgnoreCase(expDocno) && actCurrency.equalsIgnoreCase(expCurrency) &&actDepartment.equalsIgnoreCase(expDepartment) && 
							
							actExchangeRate.equalsIgnoreCase(expExchangeRate) && actLocExchangeRate.equalsIgnoreCase(expLocExchangeRate) && 
							
							actR1Account.equalsIgnoreCase(expR1Account) && actR1Debit.equalsIgnoreCase(expR1Debit) && 
							
							actR2Account.equalsIgnoreCase(expR2Account) && actR2Debit.equalsIgnoreCase(expR2Debit) && 
							actR3Account.equalsIgnoreCase(expR3Account) && actR3Debit.equalsIgnoreCase(expR3Debit) && 
							actR4Account.equalsIgnoreCase(expR4Account) && actR4Credit.equalsIgnoreCase(expR4Credit) && 
							
							actR5Account.equalsIgnoreCase(expR5Account) && actR5Debit.equalsIgnoreCase(expR5Debit) && 
							
							actFooterCreditAmt.equalsIgnoreCase(expFooterCreditAmt) && 
							
							actVoucherDebitAmt.equalsIgnoreCase(expVoucherDebitAmt))
					{
						
						System.out.println(" Test Pass: Data Saved Successfully ");
						excelReader.setCellData(xlfile, xlSheetName, 1217, 9, resPass);
						return true;
					}
					else 
					{
						System.out.println(" Test Fail: Data  Not Saved Successfully ");
						excelReader.setCellData(xlfile, xlSheetName, 1217, 9, resFail);
						return false;
					}
					
					}
					  catch (Exception e) 
					  {
						  String exception =e.getMessage();
						  excelReader.setExceptionInExcel(xlfile, xlSheetName, 1217, 10, exception);
						  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
						  return false;
					  }
					   

				}
				
				
				
				 public boolean checkSavingOpeningBalanceVoucherAfterCopyDocument() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
				   {
					   
					   excelReader=new ExcelReader(POJOUtility.getExcelPath());
					   xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
						
					   
					   try
					   {
					   
						String docno=documentNumberTxt.getAttribute("value");
						
						System.err.println("docno :  "+docno);
					   
					    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
					    saveBtn.click();
					   
					    
					    
					    String actPartyName = billRefPartyName.getText();
						String expPartyName = excelReader.getCellData(xlSheetName, 1236, 7);
						
						excelReader.setCellData(xlfile, xlSheetName, 1236, 8, actPartyName);
						
						System.out.println("Bill wise Screen Cutomer Name "  + actPartyName + "  Value Expected  " + expPartyName);
						
						
					    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefAdjustBillsGrid));
							
						String actAdjustbills=billRefAdjustBillsGrid.getAttribute("data-totalrows");
						String expAdjustbills="0";
						
						String expBillNewReference                      =excelReader.getCellData(xlSheetName, 1237, 7);
						String expBillTransactionCurrency               =excelReader.getCellData(xlSheetName, 1238, 7);
						String expBillBaseCurrency                      =excelReader.getCellData(xlSheetName, 1239, 7);
						String expBillLocalCurrency                     =excelReader.getCellData(xlSheetName, 1240, 7);
						String expBillBalanceNewRefAmount               =excelReader.getCellData(xlSheetName, 1241, 7);
						
				        String expbillRefAdjustAmountInTransCurency         =excelReader.getCellData(xlSheetName, 1242, 7);
				        String expbillRefBalanceAmountAdjustInTrnasCurrency =excelReader.getCellData(xlSheetName, 1243, 7);
				        

				        
				        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
				        String actBillNewReference                           = billRefNewReferenceTxt.getAttribute("value");
						String actBillTransactionCurrency                    = billRefTransactionCurency.getText();
						String actBillBaseCurrency                           = billRefBaseCurrency.getText();
						String actBillLocalCurrency                          = localCurrencyDhs.getText();
						String actBillBalanceNewRefAmount                    = balanceNewReferenceAmt.getText();
				        String actbillRefAdjustAmountInTransCurency          = billRefAdjustAmountInTransCurency.getText();
				        String actbillRefBalanceAmountAdjustInTrnasCurrency  = billRefBalanceAmountAdjustInTrnasCurrency.getText();
				        
				        
				        excelReader.setCellData(xlfile, xlSheetName, 1237, 8, actBillNewReference);
				        excelReader.setCellData(xlfile, xlSheetName, 1238, 8, actBillTransactionCurrency);
				        excelReader.setCellData(xlfile, xlSheetName, 1239, 8, actBillBaseCurrency);
				        excelReader.setCellData(xlfile, xlSheetName, 1240, 8, actBillLocalCurrency);
				        excelReader.setCellData(xlfile, xlSheetName, 1241, 8, actBillBalanceNewRefAmount);
				        excelReader.setCellData(xlfile, xlSheetName, 1242, 8, actbillRefAdjustAmountInTransCurency);
				        excelReader.setCellData(xlfile, xlSheetName, 1243, 8, actbillRefBalanceAmountAdjustInTrnasCurrency);
				        
				 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
				 		billRefNewReferenceTxt.click();
				 		
				 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
				 		billRefPickIcon.click();
				    	
				        String expBillNewReferencePick                          = excelReader.getCellData(xlSheetName, 1245, 7);
				 		String expBillTransactionCurrencyPick                   = excelReader.getCellData(xlSheetName, 1246, 7);
				 		String expBillBaseCurrencyPick                          = excelReader.getCellData(xlSheetName, 1247, 7);
				 		String expBillLocalCurrencyPick                         = excelReader.getCellData(xlSheetName, 1248, 7);
				 		String expBillBalanceNewRefAmountPick                   = excelReader.getCellData(xlSheetName, 1249, 7);
				 	    String expbillRefAdjustAmountInTransCurencyPick          = excelReader.getCellData(xlSheetName,1250, 7);
				        String expbillRefBalanceAmountAdjustInTrnasCurrencyPick = excelReader.getCellData(xlSheetName, 1251, 7);
				 
				        String expconversationRateBaseCurrencyRatePick = excelReader.getCellData(xlSheetName, 1252, 7);
				        String expconversationRateLocalCurrencyRatePick = excelReader.getCellData(xlSheetName, 1253, 7);
				 		
				 
				        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
				      
				        String actBillNewReferencePick                           = billRefNewReferenceTxt.getAttribute("value");
				 		String actBillTransactionCurrencyPick                    = billRefTransactionCurency.getText();
				 		String actBillBaseCurrencyPick                           = billRefBaseCurrency.getText();
				 		String actBillLocalCurrencyPick                          = localCurrencyDhs.getText();
				 		String actBillBalanceNewRefAmountPick                    = balanceNewReferenceAmt.getText();
				 		String actbillRefAdjustAmountInTransCurencyPick          = billRefAdjustAmountInTransCurency.getText();
					    String actbillRefBalanceAmountAdjustInTrnasCurrencyPick  = billRefBalanceAmountAdjustInTrnasCurrency.getText();
				 		
				 	    String actconversationRateBaseCurrencyRatePick   = conversationRateBaseCurrencyRate.getText();
				        String actconversationRateLocalCurrencyRatePick  = conversationRateLocalCurrencyRate.getText();
				 		
				    	
				        excelReader.setCellData(xlfile, xlSheetName, 1245, 8, actBillNewReferencePick);
				        excelReader.setCellData(xlfile, xlSheetName, 1246, 8, actBillTransactionCurrencyPick);
				        excelReader.setCellData(xlfile, xlSheetName, 1247, 8, actBillBaseCurrencyPick);
				        excelReader.setCellData(xlfile, xlSheetName, 1248, 8, actBillLocalCurrencyPick);
				        excelReader.setCellData(xlfile, xlSheetName, 1249, 8, actBillBalanceNewRefAmountPick);
				        excelReader.setCellData(xlfile, xlSheetName, 1250, 8, actbillRefAdjustAmountInTransCurencyPick);
				        excelReader.setCellData(xlfile, xlSheetName, 1251, 8, actbillRefBalanceAmountAdjustInTrnasCurrencyPick);
				        excelReader.setCellData(xlfile, xlSheetName, 1252, 8, actconversationRateBaseCurrencyRatePick); 
				        excelReader.setCellData(xlfile, xlSheetName, 1253, 8, actconversationRateLocalCurrencyRatePick);
					    
					    
					   /* ssds
					    
					    String actPartyName = billRefPartyName.getText();
						String expPartyName = "Customer B (122-002)";
						
						System.out.println("Bill wise Screen Cutomer Name "  + actPartyName + "  Value Expected  " + expPartyName);
						
						
					    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefAdjustBillsGrid));
							
						String actAdjustbills=billRefAdjustBillsGrid.getAttribute("data-totalrows");
						String expAdjustbills="0";
						
						String expBillNewReference                          = "0.00";
						String expBillTransactionCurrency                   = "400.00";
						String expBillBaseCurrency                          = "400.00";
						String expBillLocalCurrency                         = "28.00";
						String expBillBalanceNewRefAmount                   = "0.00";
				        String expbillRefAdjustAmountInTransCurency         = "0.00";
				        String expbillRefBalanceAmountAdjustInTrnasCurrency = "400.00";
				        

				        
				        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
				        String actBillNewReference                           = billRefNewReferenceTxt.getAttribute("value");
						String actBillTransactionCurrency                    = billRefTransactionCurency.getText();
						String actBillBaseCurrency                           = billRefBaseCurrency.getText();
						String actBillLocalCurrency                          = localCurrencyDhs.getText();
						String actBillBalanceNewRefAmount                    = balanceNewReferenceAmt.getText();
				        String actbillRefAdjustAmountInTransCurency          = billRefAdjustAmountInTransCurency.getText();
				        String actbillRefBalanceAmountAdjustInTrnasCurrency  = billRefBalanceAmountAdjustInTrnasCurrency.getText();
				        
				        
				 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
				 		billRefNewReferenceTxt.click();
				         
				 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
				 		billRefPickIcon.click();
				        
				        String expBillNewReferencePick                  = "400.00";
				 		String expBillTransactionCurrencyPick           = "400.00";
				 		String expBillBaseCurrencyPick                  = "400.00";
				 		String expBillLocalCurrencyPick                 = "28.00";
				 		String expBillBalanceNewRefAmountPick           = "400.00";
				        String expconversationRateBaseCurrencyRatePick  = "1";
				        String expconversationRateLocalCurrencyRatePick = "0.07";
				 		
				 
				        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
				      
				        String actBillNewReferencePick                           = billRefNewReferenceTxt.getAttribute("value");
				 		String actBillTransactionCurrencyPick                    = billRefTransactionCurency.getText();
				 		String actBillBaseCurrencyPick                           = billRefBaseCurrency.getText();
				 		String actBillLocalCurrencyPick                          = localCurrencyDhs.getText();
				 		String actBillBalanceNewRefAmountPick                    = balanceNewReferenceAmt.getText();
				 	    String actconversationRateBaseCurrencyRatePick           = conversationRateBaseCurrencyRate.getText();
				        String actconversationRateLocalCurrencyRatePick          = conversationRateLocalCurrencyRate.getText();
				        String actbillRefAdjustAmountInTransCurencyPick          = billRefAdjustAmountInTransCurency.getText();
				        String actbillRefBalanceAmountAdjustInTrnasCurrencyPick  = billRefBalanceAmountAdjustInTrnasCurrency.getText();*/
				      
				       
				        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
				        billRefOkBtn.click();
				        
				        boolean savingVoucher=checkVoucherSavingMessage(docno);
				        
				        System.out.println("Bill reference Adjustment Bills  :"+ actAdjustbills+"                          "+ "expDate :"+expAdjustbills);
				        System.out.println("actBillNewReference :             "+ actBillNewReference +"                    "+ "expBillNewReference :"+expBillNewReference);
				        System.out.println("actBillTransactionCurrency       :"+ actBillTransactionCurrency + "            " + "expBillTransactionCurrency :"+expBillTransactionCurrency);
				        System.out.println("actBillBaseCurrency :             "+ actBillBaseCurrency + "                   " +"expBillBaseCurrency :"+expBillBaseCurrency);
				        System.out.println("actBillLocalCurrency :            "+ actBillLocalCurrency+ "                   " +"expBillLocalCurrency :"+expBillLocalCurrency);
				        System.out.println("actBillBalanceNewRefAmount :      "+ actBillBalanceNewRefAmount + "            " + "expBillBalanceNewRefAmount :"+expBillBalanceNewRefAmount);
				       
				        System.out.println("actbillRefAdjustAmountInTransCurency         :"+ actbillRefAdjustAmountInTransCurency+ "       " +"expbillRefAdjustAmountInTransCurency :"+expbillRefAdjustAmountInTransCurency);
				        System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrency :"+ actbillRefBalanceAmountAdjustInTrnasCurrency + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrency :"+expbillRefBalanceAmountAdjustInTrnasCurrency);

				         
				       //////Pick
				        
				        System.out.println("actBillNewReferencePick :              "+ actBillNewReferencePick +"              "+ "expBillNewReferencePick :"+expBillNewReferencePick);
				        System.out.println("actBillTransactionCurrencyPick :       "+ actBillTransactionCurrencyPick + "     " + "expBillTransactionCurrencyPick :"+expBillTransactionCurrencyPick);
				        System.out.println("actBillBaseCurrencyPick :              "+ actBillBaseCurrencyPick + "            " + "expBillBaseCurrencyPick :"+expBillBaseCurrencyPick);
				        System.out.println("actBillLocalCurrencyPick :             "+ actBillLocalCurrency+ "                " +"expBillLocalCurrencyPick :"+expBillLocalCurrency);
				        System.out.println("actBillBalanceNewRefAmountPick :       "+ actBillBalanceNewRefAmountPick +        " " + "expBillBalanceNewRefAmountPick :"+expBillBalanceNewRefAmountPick);
				        System.out.println("actconversationRateBaseCurrRatePick:   "+ actconversationRateBaseCurrencyRatePick+ "  " +"expconversationRateBaseCurrencyRatePick :"+expconversationRateBaseCurrencyRatePick);
				        System.out.println("actconversationRateLocalCurRatePick :  "+ actconversationRateLocalCurrencyRatePick+ " " + "expconversationRateLocalCurrencyRatePick :"+expconversationRateLocalCurrencyRatePick);
				        System.out.println(" Voucher Saving Status                 "+savingVoucher +"                     "+"True");
				     
				        
				        
				        if (actPartyName.equalsIgnoreCase(expPartyName) && actAdjustbills.equalsIgnoreCase(expAdjustbills) && savingVoucher==true && actBillNewReference.equalsIgnoreCase(expBillNewReference) && actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 
				 				actBillBaseCurrency.equalsIgnoreCase(expBillBaseCurrency) && actBillLocalCurrency.equalsIgnoreCase(expBillLocalCurrency) && 
				 				actBillBalanceNewRefAmount.equalsIgnoreCase(expBillBalanceNewRefAmount) && 
				 			     actbillRefAdjustAmountInTransCurency.equalsIgnoreCase(expbillRefAdjustAmountInTransCurency) &&
				 				actbillRefBalanceAmountAdjustInTrnasCurrency.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrency) && 
				 		        
				        		
				 		        actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) && actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) && 
								actBillBaseCurrencyPick.equalsIgnoreCase(expBillBaseCurrencyPick) && actBillLocalCurrencyPick.equalsIgnoreCase(expBillLocalCurrencyPick) && 
								actBillBalanceNewRefAmountPick.equalsIgnoreCase(expBillBalanceNewRefAmountPick) &&
								actconversationRateBaseCurrencyRatePick.equalsIgnoreCase(expconversationRateBaseCurrencyRatePick) && actconversationRateLocalCurrencyRatePick.equalsIgnoreCase(expconversationRateLocalCurrencyRatePick))
				     
					{
						
				        	excelReader.setCellData(xlfile, xlSheetName, 1235, 9, resPass);
						    return true;
					}
					else
					{
						
						excelReader.setCellData(xlfile, xlSheetName, 1235, 9, resFail);
						return false;
					}
				  }
					   catch (Exception e) 
						  {
							  String exception =e.getMessage();
							  excelReader.setExceptionInExcel(xlfile, xlSheetName, 1235, 10, exception);
							  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
							  return false;
						  }
						   }
				  
				
				public boolean checksuspendedOptionInOpeningBalance() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
				{
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					   xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
						
					   
					   try
					   {
						   
						   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
						   previousBtn.click(); 
						   
						   
						   boolean loading=checkLoadingMessage();
						   
						   Thread.sleep(1000);
						   
						   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
						   
						   String docno=documentNumberTxt.getAttribute("value");
						   
						   String actdocno=documentNumberTxt.getAttribute("value");
						   String expDocno=excelReader.getCellData(xlSheetName, 1255, 7);
					 		
						   excelReader.setCellData(xlfile, xlSheetName, 1255, 8, actdocno);
						   
						   
						   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
						   new_SuspendBtn.click();
							
							boolean savingMessage=checkVoucherSavingMessage(docno);
							
							String actSuspendingStatus=Boolean.toString(savingMessage);
							String expSavingStatus =excelReader.getCellData(xlSheetName, 1256, 7);
					 		
							excelReader.setCellData(xlfile, xlSheetName, 1256, 8, actSuspendingStatus.toUpperCase());
									
							
							System.out.println("SavingMessage  :  " + savingMessage + " Value Expected : " + " TRUE ");
							
							
							getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
							new_CloseBtn.click();
							
							getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(suspendStatusRow1));
							String actSuspendStatusR1=suspendStatusRow1.getText();
							
							String expSuspendStatusR1=excelReader.getCellData(xlSheetName, 1257, 7);
					 		
							excelReader.setCellData(xlfile, xlSheetName, 1257, 8, expSuspendStatusR1.toUpperCase());
							
							System.out.println("Suspend Status in Home Page Value Actual  :  " + actSuspendStatusR1 + " Value Expected : " + expSuspendStatusR1);
							
							
						   if (savingMessage==true && actSuspendStatusR1.equalsIgnoreCase(expSuspendStatusR1) && loading==true)
						   {
							   excelReader.setCellData(xlfile, xlSheetName, 1254, 9, resPass);
					 			
					 			return true;
					 		}
					 		else
					 		{	
					 			excelReader.setCellData(xlfile, xlSheetName, 1254, 9, resFail);
					 			
					 			return false;
					 		}
					      }
				      catch (Exception e) 
					  {
						  String exception =e.getMessage();
						  excelReader.setExceptionInExcel(xlfile, xlSheetName, 1254, 10, exception);
						  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
						  return false;
					  }
					   }
				
				
				
				public boolean checkOpeningBalanceNewVoucherClickOnSuspendView() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
				{
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
						
					try
					{
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createViewNameToEditInHomePage));
						createViewNameToEditInHomePage.click();
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
					
						boolean actHomePageNewBtnIsDisplayed = newBtn.isDisplayed();
						boolean actHomePageEditBtn           = editBtn.isDisplayed();		
						boolean actHomePagePrintBtn          = printBtn.isDisplayed();
						boolean actHomePageDeleteBtn         = deleteBtn.isDisplayed();
						boolean actHomePageSuspendBtn        = suspendBtn.isDisplayed();
						boolean actHomePagePrintBarcodeBtn   = printBarCodeBtn.isDisplayed();
						boolean actHomePageExportXMLBtn      = exportToXMLBtn.isDisplayed();
						boolean actHomePageSettingsBtn       = settingsBtn.isDisplayed();
						boolean actHomePageCloseBtn          = homeCloseBtn.isDisplayed();
						boolean actHomePageGridCheckBox      = grid_HeaderChkBox.isDisplayed();
						boolean actHomePageSortingBtn        = sortingBtn.isDisplayed();
						boolean actHomePageCreateViewBn      = createViewBtn.isDisplayed();
						boolean actHomePageCustomizeBtn      = customizeBtn.isDisplayed();
						boolean actHomePageFilterBtn         = filterBtn.isDisplayed();
						boolean actHomePageRefreshBtn        = refreshBtn.isDisplayed();
						boolean actHomePageOptionsBtn        = optionsBtn.isDisplayed();
						boolean actHomePageExportBtn         = exportBtn.isDisplayed();
						
						boolean expHomePageNewBtnIsDisplayed = true;	
						boolean expHomePageEditBtn           = true;
						boolean expHomePagePrintBtn          = true;
						boolean expHomePageDeleteBtn         = true;
						boolean expHomePageSuspendBtn        = true;
						boolean expHomePagePrintBarcodeBtn   = true;
						boolean expHomePageExportXMLBtn      = true;
						boolean expHomePageSettingsBtn       = true;
						boolean expHomePageCloseBtn          = true;
						boolean expHomePageGridCheckBox      = true;
						boolean expHomePageSortingBtn        = true;
						boolean expHomePageCreateViewBn      = true;
						boolean expHomePageCustomizeBtn      = true;
						boolean expHomePageFilterBtn         = true;
						boolean expHomePageRefreshBtn        = false;
						boolean expHomePageOptionsBtn        = true;
						boolean expHomePageExportBtn         = true;
						
						System.out.println("Home Page New Btn Value Actual           : " + actHomePageNewBtnIsDisplayed+ "  Value Expected : " + expHomePageNewBtnIsDisplayed);
						System.out.println("Home Page Edit Btn Value Actual          : " + actHomePageEditBtn+           "  Value Expected : " + expHomePageEditBtn);
						System.out.println("Home Page Print Btn Value Actual         : " + actHomePagePrintBtn+          "	Value Expected : " + expHomePagePrintBtn);
						System.out.println("Home Page Delete Btn Value Actual        : " + actHomePageDeleteBtn+         "	Value Expected : " + expHomePageDeleteBtn);
						System.out.println("Home Page Suspend Btn Value Actual       : " + actHomePageSuspendBtn+        "	Value Expected : " + expHomePageSuspendBtn);
						System.out.println("Home Page Print Barcode Btn Value Actual : " + actHomePagePrintBarcodeBtn+   "	Value Expected : " + expHomePagePrintBarcodeBtn);
						System.out.println("Home Page Export XML Btn Value Actual    : " + actHomePageExportXMLBtn+      "	Value Expected : " + expHomePageExportXMLBtn);
						System.out.println("Home Page Settings Btn Value Actual      : " + actHomePageSettingsBtn+       "	Value Expected : " + expHomePageSettingsBtn);
						System.out.println("Home Page Close Btn Value Actual         : " + actHomePageCloseBtn+          "	Value Expected : " + expHomePageCloseBtn);
						System.out.println("Home Page Grid check Value Actual        : " + actHomePageGridCheckBox+      "	Value Expected : " + expHomePageGridCheckBox);
						System.out.println("Home Page Sorting Btn Value Actual       : " + actHomePageSortingBtn+        "	Value Expected : " + expHomePageSortingBtn);
						System.out.println("Home Page Create View Btn Value Actual   : " + actHomePageCreateViewBn+      "	Value Expected : " + expHomePageCreateViewBn);
						System.out.println("Home Page Customize Btn Value Actual     : " + actHomePageCustomizeBtn+      "	Value Expected : " + expHomePageCustomizeBtn);
						System.out.println("Home Page Filter check Value Actual      : " + actHomePageFilterBtn+         "	Value Expected : " + expHomePageFilterBtn);
						System.out.println("Home Page Refesh Btn Value Actual        : " + actHomePageRefreshBtn+        "	Value Expected : " + expHomePageRefreshBtn);
						System.out.println("Home Page Options Btn Value Actual       : " + actHomePageOptionsBtn+        "	Value Expected : " + expHomePageOptionsBtn);
						System.out.println("Home Page Export Btn Value Actual        : " + actHomePageExportBtn+         "  Value Expected : " + expHomePageExportBtn);
						
						int count				                 = openingStocksNewToolBarButtons.size();
						
						ArrayList<String> actbuttons             = new ArrayList<String>();
						
						for (int i = 0; i < count; i++) 
						{
							String data                          = openingStocksNewToolBarButtons.get(i).getText();
							actbuttons.add(data);
						}
						    
						String actopeningStocksNewToolBarButtons = actbuttons.toString();
						String expopeningStocksNewToolBarButtons = excelReader.getCellData(xlSheetName, 1259, 7);
				 		
		                excelReader.setCellData(xlfile, xlSheetName, 1259, 8, actopeningStocksNewToolBarButtons); 
					
						System.out.println("actopeningStocksNewToolBarButtons  : " + actopeningStocksNewToolBarButtons);
						System.out.println("expopeningStocksNewToolBarButtons  : " + expopeningStocksNewToolBarButtons);
						
						excelReader.setCellData(xlfile, "Sheet7", 17, 8, actopeningStocksNewToolBarButtons);	
						
						String actsetAsDefaultView		=	setAsDefaultView.getText();
						String expsetAsDefaultView		=	excelReader.getCellData(xlSheetName, 1260, 7);
				 		
		                excelReader.setCellData(xlfile, xlSheetName, 1260, 8, actsetAsDefaultView); 
						
						
						//Ribbon Control Icons
				        int count1		= headingOptions.size();
						
						ArrayList<String> headingButtons = new ArrayList<String>();
						
						for (int i = 1; i < count1; i++) 
						{
							String data=headingOptions.get(i).getAttribute("title");
							
							headingButtons.add(data);
						}
						
						String actHeadingButtons = headingButtons.toString();
						String expHeadingButtons = excelReader.getCellData(xlSheetName, 1261, 7);
				 		
		                excelReader.setCellData(xlfile, xlSheetName, 1261, 8, actHeadingButtons); 
						
						
						System.out.println("actopeningStocksNewHeadingButtons  : " + actHeadingButtons);
						System.out.println("expopeningStocksNewHeadingButtons  : " + expHeadingButtons);
						
						//Home Page Column Headings
				        int headerTxtCount		= headerTxtList.size();
						
						ArrayList<String> headerTxt = new ArrayList<String>();
						
						for (int i = 2; i < headerTxtCount; i++) 
						{
							String data=headerTxtList.get(i).getText();
							headerTxt.add(data);
						}
						
						String actHeaderTxt = headerTxt.toString();
						String expHeaderTxt = excelReader.getCellData(xlSheetName, 1262, 7);
				 		
		                excelReader.setCellData(xlfile, xlSheetName, 1262, 8, actHeaderTxt);
						
						
						System.out.println("actopeningStocksNewHomePageColumnsButtons  : " + actHeaderTxt);
						System.out.println("expopeningStocksNewHomePageColumnsButtons  : " + expHeaderTxt);
						
						
						System.out.println("Count Of Header Columns in Suspend View Home Page Value Actual  :  " + actHeaderTxt + " Value Expected : " + expHeaderTxt);
						
						String actHomePageVoucherNo     = openingStocksNewHomeRow1VoucherNo.getText();
						String actHomePageCreatedBy     = openingStocksNewHomeRow1CreatedBy.getText();
						String actHomePageModifiedBy    = openingStocksNewHomeRow1ModifiedBy.getText();
						String actHomePageSuspendBy     = openingStocksNewHomeRow1SuspendStatus.getText();
						String actHomePageAuthorizedBy  = openingStocksNewHomeRow1AuthorizationStatus.getText();
						
						String expHomePageVoucherNo     = "2";
						String expHomePageCreatedBy     = "SU";
						String expHomePageModifiedBy    = "SU";
						String expHomePageSuspendBy     = "True";
						String expHomePageAuthorizeBy   = "Authorized";
						
						System.out.println("Voucher No in Home Page Value Actual   :  " + actHomePageVoucherNo+    " Value Expected : " + expHomePageVoucherNo);
						System.out.println("Created By in Home Page Value Actual   :  " + actHomePageCreatedBy+    " Value Expected : " + expHomePageCreatedBy);
						System.out.println("Modified By in Home Page Value Actual  :  " + actHomePageModifiedBy+   " Value Expected : " + expHomePageModifiedBy);
						System.out.println("Suspend By in Home Page Value Actual   :  " + actHomePageSuspendBy+    " Value Expected : " + expHomePageSuspendBy);
						System.out.println("Authorize By in Home Page Value Actual :  " + actHomePageAuthorizedBy+ " Value Expected : " + expHomePageAuthorizeBy);
						
						int actRowCountInHomePage = openingStocksNewHomePageTableRowsCount.size();
						int expRowCountInHomePage = 1;
						
						System.out.println("Row Count in Suspend View Home Page Value Actual  :  " + actRowCountInHomePage + " Value Expected : " + expRowCountInHomePage);
												
						if(actHomePageNewBtnIsDisplayed==expHomePageNewBtnIsDisplayed  && actHomePageEditBtn==expHomePageEditBtn && actHomePagePrintBtn==expHomePagePrintBtn
								&& actHomePageDeleteBtn==expHomePageDeleteBtn  && actHomePageSuspendBtn==expHomePageSuspendBtn 
							    && actHomePagePrintBarcodeBtn==expHomePagePrintBarcodeBtn && actHomePageExportXMLBtn==expHomePageExportXMLBtn
								&& actHomePageSettingsBtn==expHomePageSettingsBtn && actHomePageCloseBtn==expHomePageCloseBtn && actHomePageGridCheckBox==expHomePageGridCheckBox
								&& actHomePageSortingBtn==expHomePageSortingBtn && actHomePageCreateViewBn==expHomePageCreateViewBn && actHomePageCustomizeBtn==expHomePageCustomizeBtn
								&& actHomePageFilterBtn==expHomePageFilterBtn && actHomePageRefreshBtn==expHomePageRefreshBtn && actHomePageOptionsBtn==expHomePageOptionsBtn
								&& actHomePageExportBtn==expHomePageExportBtn  
								&& actopeningStocksNewToolBarButtons.equalsIgnoreCase(expopeningStocksNewToolBarButtons)
								&& actHeadingButtons.equalsIgnoreCase(expHeadingButtons)
								&& actHeaderTxt.equalsIgnoreCase(expHeaderTxt))
						{
							System.out.println("Test Pass :Suspended Vouchers  Are Displayed");
							excelReader.setCellData(xlfile, xlSheetName, 1258, 9, resPass);
							return true;
						}
						else
						{
							System.out.println("Test Fail : Suspended Vouchers Are NOT Displayed");
							excelReader.setCellData(xlfile, xlSheetName, 1258, 9, resFail);
							return false;
						}
					}
					 catch (Exception e) 
					  {
						  String exception =e.getMessage();
						  excelReader.setExceptionInExcel(xlfile, xlSheetName, 1258, 10, exception);
						  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
						  return false;
					  }
					   }
				
				
				@FindBy(xpath="//*[@id='id_rc_columnheadertable']/thead/tr/th")
				private static List<WebElement>  custBodyHeaderList;
				
				@FindBy(xpath="//*[@id='fields_tab']/input")
				private static WebElement  custFieldTab;
				
				@FindBy(xpath="//*[@id='id_rc_search_inputbox']")
				private static WebElement  custSearchTxt;
				
				@FindBy(xpath="//*[@id='id_rc_searchnumeric']/i")
				private static WebElement  custSearchNumericButton;
				
				@FindBy(xpath="//*[@id='id_rc_searchtext']/input")
				private static WebElement  custSearchStringItems;
				
				@FindBy(xpath="//div[contains(text(),'Formatting by Row')]")
				private static WebElement  custFormattingbyRowBtn;
				
				@FindBy(xpath="//div[contains(text(),'Delete layout')]")
				private static WebElement  custDeleteLayoutBtn;
				
				@FindBy(xpath="//div[contains(text(),'Import')]")
				private static WebElement  custImportBtn;
				
				@FindBy(xpath="//div[@class='col-sm-12 toolbar_button_text font-6'][contains(text(),'Export')]")
				private static WebElement  custExportBtn;
				
				@FindBy(xpath="//div[@class='col-sm-12 toolbar_button_text font-6'][contains(text(),'Save')]")
				private static WebElement  custSaveBtn;
				
				@FindBy(xpath="//*[@id='btnCustomizeClose']/div[1]/span")
				private static WebElement  custCancelBtn;
				
				@FindBy(xpath="//input[@id='layoutName']")
				private static WebElement  custLayoutNameTxt;
				
				@FindBy(xpath="//input[@id='chkDefault']")
				private static WebElement  custDefaultChkBox;
				
				@FindBy(xpath="//input[@id='totalWidth']")
				private static WebElement  custTotalWidthTxt;
				
				@FindBy(xpath="//input[@id='chkLandscape']")
				private static WebElement  custLandscapeChkBox;
				
				
				  @FindBy(xpath="//*[@id='id_transaction_viewcontainer']/li[1]/a")
				  private static WebElement allVouchersInHomePage;
				
				public boolean checkOpeningBalanceVoucherCustomizationOption() throws EncryptedDocumentException, InvalidFormatException, IOException
				{
					
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
						
					try
					{
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(allVouchersInHomePage));
						allVouchersInHomePage.click();
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeBtn));
						customizeBtn.click();
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(custFieldTab));
						 boolean actcustFieldTab                   = custFieldTab.isDisplayed();
						 boolean actcustSearchTxt                  = custSearchTxt.isDisplayed();
						 boolean actcustSearchNumericButton        = custSearchNumericButton.isDisplayed();
						 boolean actcustSearchStringItems           = custSearchStringItems.isDisplayed();
						 boolean actcustDeleteLayoutBtn            = custDeleteLayoutBtn.isDisplayed();
						 boolean actcustImportBtn                  = custImportBtn.isDisplayed();
						 boolean actcustSaveBtn                    = custSaveBtn.isDisplayed();
						 boolean actcustCancelBtn                  = custCancelBtn.isDisplayed();
						 boolean actcustLayoutNameTxt              = custLayoutNameTxt.isDisplayed();
						 boolean actcustDefaultChkBox              = custDefaultChkBox.isDisplayed();
						 boolean actcustTotalWidthTxt              = custTotalWidthTxt.isDisplayed();
						 boolean actcustLandscapeChkBox            = custLandscapeChkBox.isDisplayed();
						 
						 boolean  expcustFieldTab                  = true;
						 boolean expcustSearchTxt                  = true;
						 boolean expcustSearchNumericButton        = true;
						 boolean expcustSearchStringItems		   = true;
						 boolean expcustDeleteLayoutBtn            = true;
						 boolean expcustImportBtn				   = true;
						 boolean expcustSaveBtn 				   = true;
						 boolean expcustCancelBtn				   = true;
						 boolean expcustLayoutNameTxt			   = true;
						 boolean expcustDefaultChkBox			   = true;
						 boolean expcustTotalWidthTxt			   = true;
						 boolean expcustLandscapeChkBox			   = true;
						 
						 System.out.println("*************************checkNavigateToOpenigBalanceCustomizeOption*****");
						 
						 System.out.println("custFieldTab              : "+actcustFieldTab            +" "+expcustFieldTab);
						 System.out.println("custSearchTxt             : "+actcustSearchTxt           +" "+expcustSearchTxt);
						 System.out.println("custSearchNumericButton   : "+actcustSearchNumericButton +" "+expcustSearchNumericButton);
						 System.out.println("custSearchStringItems      : "+actcustSearchStringItems    +" "+expcustSearchStringItems);
						 System.out.println("custDeleteLayoutBtn       : "+actcustDeleteLayoutBtn     +" "+expcustDeleteLayoutBtn);
						 System.out.println("custImportBtn             : "+actcustImportBtn           +" "+expcustImportBtn);
						 System.out.println("custSaveBtn               : "+actcustSaveBtn             +" "+expcustSaveBtn);
						 System.out.println("custCancelBtn             : "+actcustCancelBtn           +" "+expcustCancelBtn);
						 System.out.println("custLayoutNameTxt         : "+actcustLayoutNameTxt       +" "+expcustLayoutNameTxt);
						 System.out.println("custDefaultChkBox         : "+actcustDefaultChkBox       +" "+expcustDefaultChkBox);
						 System.out.println("custTotalWidthTxt         : "+actcustTotalWidthTxt       +" "+expcustTotalWidthTxt);
						 System.out.println("custLandscapeChkBox       : "+actcustLandscapeChkBox     +" "+expcustLandscapeChkBox);
						 
						 
					    ArrayList<String>actcustBodyHeaderList=new ArrayList<String>();
							
						int custBodyHeaderListCount=custBodyHeaderList.size();
						
						String actcustBodyHeaderListCount=Integer.toString(custBodyHeaderListCount);
						String expCustBodyHeaderListCount=excelReader.getCellData(xlSheetName, 1264, 7);
				 		
		                excelReader.setCellData(xlfile, xlSheetName, 1264, 8, actcustBodyHeaderListCount); 
						
						
					
							
						System.out.println(" custBodyHeaderListCount  :  "+actcustBodyHeaderListCount);
							
						for (int i = 0; i < custBodyHeaderListCount; i++)
						{
							String data=custBodyHeaderList.get(i).getText();
							actcustBodyHeaderList.add(data);
						}
							
						String actcustBodyHeader=actcustBodyHeaderList.toString();
						String expcustBodyHeader=excelReader.getCellData(xlSheetName, 1265, 7);
				 		
		                excelReader.setCellData(xlfile, xlSheetName, 1265, 8, actcustBodyHeader); 
							
						System.err.println("  Actual custBodyHeaderList : "+actcustBodyHeader);
						System.err.println("  Expected  custBodyHeaderList : "+expcustBodyHeader);
							
						 
						if (actcustFieldTab==expcustFieldTab && actcustSearchTxt==expcustSearchTxt && 
								 actcustSearchNumericButton==expcustSearchNumericButton && actcustSearchStringItems==expcustSearchStringItems && 
								 actcustDeleteLayoutBtn==expcustDeleteLayoutBtn && 
								 actcustImportBtn==expcustImportBtn && actcustSaveBtn==expcustSaveBtn && actcustCancelBtn==expcustCancelBtn&& 
								 actcustLayoutNameTxt==expcustLayoutNameTxt && actcustDefaultChkBox==expcustDefaultChkBox && 
								 actcustTotalWidthTxt==expcustTotalWidthTxt &&actcustLandscapeChkBox==expcustLandscapeChkBox && 
								 actcustBodyHeader.equalsIgnoreCase(expcustBodyHeader)&& actcustBodyHeaderListCount.equalsIgnoreCase(expCustBodyHeaderListCount)) 
						 {
							excelReader.setCellData(xlfile, xlSheetName, 1263, 9, resPass);
							 return true;
						 }
						else
				 		{	
				 			excelReader.setCellData(xlfile, xlSheetName, 1263, 9, resFail);
				 			
				 			return false;
				 		}
				      }
			      catch (Exception e) 
				  {
					  String exception =e.getMessage();
					  excelReader.setExceptionInExcel(xlfile, xlSheetName, 1263, 10, exception);
					  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
					  return false;
				  }
				   }
				
				 @FindBy(xpath="//*[@id='id_rc_complete_tree_container']/div/ul/li")
				 private static List<WebElement>  custLeftPannelList;
				
				
				 public boolean checkOpeningBalanceCustomizeLeftPannelElementsDisplayed() throws EncryptedDocumentException, InvalidFormatException, IOException
					{
					 
					 excelReader=new ExcelReader(POJOUtility.getExcelPath());
					 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
						
					 
					 try
					 {
					 
					 
			            ArrayList<String>actcustLeftPannelList=new ArrayList<String>();
						
						int CustLeftPannelListCount=custLeftPannelList.size();
						
						String actCustLeftPannelListCount=Integer.toString(CustLeftPannelListCount);
						String expCustBodyHeaderListCount=excelReader.getCellData(xlSheetName, 1267, 7);
				 		
		                excelReader.setCellData(xlfile, xlSheetName, 1267, 8, actCustLeftPannelListCount); 
						
						System.out.println(" custLeftPannelListCount  :  "+actCustLeftPannelListCount);
						
						for (int i = 0; i < CustLeftPannelListCount; i++)
						{
							String data=custLeftPannelList.get(i).getText();
							actcustLeftPannelList.add(data);
						}
						
						String actcustLeftPannel =  actcustLeftPannelList.toString();
						String expcustLeftPannel = excelReader.getCellData(xlSheetName, 1268, 7);
				 		
		                excelReader.setCellData(xlfile, xlSheetName, 1268, 8, actcustLeftPannel); 
						
						System.out.println("*******************checkOpeningBalanceCustomizeLeftPannelElementsDisplayed****************************");
						
						System.err.println("  Actual custLeftPannelList    : "+actcustLeftPannel);
						System.err.println("  Expected  custLeftPannelList : "+expcustLeftPannel);
						
						
						if (actcustLeftPannel.equalsIgnoreCase(expcustLeftPannel) && 
								actCustLeftPannelListCount.equalsIgnoreCase(expCustBodyHeaderListCount))
						{
		                    excelReader.setCellData(xlfile, xlSheetName, 1266, 9, resPass);
				 			
				 			return true;
				 		}
				 		else
				 		{	
				 			excelReader.setCellData(xlfile, xlSheetName, 1266, 9, resFail);
				 			
				 			return false;
				 		}
				      }
			      catch (Exception e) 
				  {
					  String exception =e.getMessage();
					  excelReader.setExceptionInExcel(xlfile, xlSheetName, 1266, 10, exception);
					  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
					  return false;
				  }
				   }
					
				
				
					
				 @FindBy(xpath="//*[@id='id_Default_spanPlus']")
				 private static WebElement  custLeftPannelDefaultExpandBtn;
				 
				 @FindBy(xpath="//*[@id='id_prog_spanPlus']")
				 private static WebElement  custLeftPannelProgExpandBtn;
					
				 @FindBy(xpath="//*[@id='id_Trans_spanPlus']")
				 private static WebElement  custLeftPannelTransExpandBtn;
					
				 @FindBy(xpath="//*[@id='id_rc_complete_tree_container']/div[1]/ul/li/ul/li/ul/li/span")
				 private static List<WebElement>  custLeftPannelInnerFieldList;
				
				 @FindBy(xpath="//*[@id='ReportSpecific']/li")
				 private static List<WebElement>  custLeftPannelDefaultFieldInnerFieldList;	
				 
				
				 @FindBy(xpath="//*[@id='ProgFileds']/li")
				 private static List<WebElement>  custLeftPannelProgFiledsInnerFieldList;	
				 
				
				 
				 
				 
				public boolean checkCustomizeLeftPannelInnerFieldsInOpeningBalance() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
				{
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
					try
					{
					
						ArrayList<String>custLeftPannelTransInnerFieldList=new ArrayList<String>();
						
						ArrayList<String>custLeftPannelDefaultInnerFieldList=new ArrayList<String>();
						
						ArrayList<String>custLeftPannelProgInnerFieldList=new ArrayList<String>();
						
							
						int actCustLeftPannelListCount=custLeftPannelList.size();
						int expCustLeftPannelListCount=3;
							
						System.out.println("********************************checkCustomizeLeftPannelInnerFieldsInOpeningBalance*****************************");
						
						System.out.println(" custLeftPannelListCount  :  "+actCustLeftPannelListCount);
						
							
						for (int i = 0; i < actCustLeftPannelListCount; i++)
						{
							String data=custLeftPannelList.get(i).getText();
								
							System.err.println("Left Pannel Fileds : "+data);
								
							if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1270, 6))) 
							{
								custLeftPannelTransExpandBtn.click();
									
								int actcustLeftPannelInnerFieldListCount=custLeftPannelInnerFieldList.size();
								int expcustLeftPannelInnerFieldListCount=2;
								
									
								System.out.println("Transactions Inner Fields Count :  "+actcustLeftPannelInnerFieldListCount+" "+expcustLeftPannelInnerFieldListCount);
									
								for (int j = 0; j < actcustLeftPannelInnerFieldListCount; j++) 
								{
									String InnerFields=custLeftPannelInnerFieldList.get(j).getText();
										
									System.out.println("Transaction InnerFields "+InnerFields);
										
									custLeftPannelTransInnerFieldList.add(InnerFields);
								}
							}
								
							if (data.contains("Default Fields")) 
							{
								custLeftPannelDefaultExpandBtn.click();
								
								int actcustLeftPannelDefaultFieldInnerFieldList=custLeftPannelDefaultFieldInnerFieldList.size();
								int expcustLeftPannelDefaultFieldInnerFieldList=11;
									
								System.out.println("DefaultFields Inner Fields Count :  "+actcustLeftPannelDefaultFieldInnerFieldList+" "+expcustLeftPannelDefaultFieldInnerFieldList);
								
								for (int k = 0; k < actcustLeftPannelDefaultFieldInnerFieldList; k++) 
								{
									String InnerFields=custLeftPannelDefaultFieldInnerFieldList.get(k).getText();
										
									System.out.println("DefaultFields InnerFields "+InnerFields);
										
									custLeftPannelDefaultInnerFieldList.add(InnerFields);
								}
							}
								
							if (data.contains("Programmable Field")) 
							{
								custLeftPannelProgExpandBtn.click();
									
								int actcustLeftPannelProgFiledsInnerFieldList=custLeftPannelProgFiledsInnerFieldList.size();
								int expcustLeftPannelProgFiledsInnerFieldList=1;
											
								System.out.println("Programmable Field Inner Fields Count :  "+actcustLeftPannelProgFiledsInnerFieldList+" "+expcustLeftPannelProgFiledsInnerFieldList);
									
								for (int m = 0; m < actcustLeftPannelProgFiledsInnerFieldList; m++) 
								{
									String InnerFields=custLeftPannelProgFiledsInnerFieldList.get(m).getText();
										
									System.out.println("Programmable Field InnerFields "+InnerFields);
										
									custLeftPannelProgInnerFieldList.add(InnerFields);
										
								}
								
							}
						}
							
						System.err.println("custLeftPannelTransInnerFieldList :"+custLeftPannelTransInnerFieldList);
						System.err.println("custLeftPannelDefaultInnerFieldList :"+custLeftPannelDefaultInnerFieldList);
						System.err.println("custLeftPannelProgInnerFieldList :"+custLeftPannelProgInnerFieldList);
							
						String actcustLeftPannelTransInnerFieldList=custLeftPannelTransInnerFieldList.toString();
						String actcustLeftPannelDefaultInnerFieldList=custLeftPannelDefaultInnerFieldList.toString();
						String actcustLeftPannelProgInnerFieldList=custLeftPannelProgInnerFieldList.toString();
							
						excelReader.setCellData(xlfile, xlSheetName, 1270, 8, actcustLeftPannelTransInnerFieldList);
						excelReader.setCellData(xlfile, xlSheetName, 1271, 8, actcustLeftPannelDefaultInnerFieldList);
						excelReader.setCellData(xlfile, xlSheetName, 1272, 8, actcustLeftPannelProgInnerFieldList);
						
						
						String expcustLeftPannelTransInnerFieldList=excelReader.getCellData(xlSheetName, 1270, 7);
						String expcustLeftPannelDefaultInnerFieldList=excelReader.getCellData(xlSheetName, 1271, 7);
						String expcustLeftPannelProgInnerFieldList=excelReader.getCellData(xlSheetName, 1272, 7);
							
						if (actcustLeftPannelTransInnerFieldList.equalsIgnoreCase(expcustLeftPannelTransInnerFieldList) && 
								actcustLeftPannelDefaultInnerFieldList.equalsIgnoreCase(expcustLeftPannelDefaultInnerFieldList) && 
								actcustLeftPannelProgInnerFieldList.equalsIgnoreCase(expcustLeftPannelProgInnerFieldList) && 
								actCustLeftPannelListCount==expCustLeftPannelListCount ) 
						{
							
		                    excelReader.setCellData(xlfile, xlSheetName, 1269, 9, resPass);
				 			
				 			return true;
				 		}
				 		else
				 		{	
				 			excelReader.setCellData(xlfile, xlSheetName, 1269, 9, resFail);
				 			
				 			return false;
				 		}
				      }
			      catch (Exception e) 
				  {
					  String exception =e.getMessage();
					  excelReader.setExceptionInExcel(xlfile, xlSheetName, 1269, 10, exception);
					  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
					  return false;
				  }
				   }
					
					
				
				 @FindBy(xpath="//*[@id='id_rc_columnheadertable']/thead/tr/th[4]")
				 private static WebElement  modifiedHeaderTab;
				
				 @FindBy(xpath="//*[@id='id_rc_columnheadertable']/thead/tr/th[13]")
				 private static WebElement  warehouseCodeHeaderTxt;
				 
				 
				 @FindBy(xpath="//input[@id='HidethisColumn']")
				 private static WebElement  hideThisColumnChkbox;	
				 
				 @FindBy(xpath="//*[@id='tblHeadTransRender']/tr/th")
				 private static List<WebElement>  homePageBodyHeaderList;	
				 
				
				
			 public boolean checkHidingFieldCustomization() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
				{
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
						
					  
				  try
					  {
					
						Thread.sleep(2000);
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(custCancelBtn));
						custCancelBtn.click();
						
						
						Thread.sleep(2000);
						
						int homePageBodyHeaderListCountBeforeHide=homePageBodyHeaderList.size();
						
						String acthomePageBodyHeaderListCountBeforeHide=Integer.toString(homePageBodyHeaderListCountBeforeHide);
						String exphomePageBodyHeaderListCountBeforeHide=excelReader.getCellData(xlSheetName, 1274, 7);
				 		
		                excelReader.setCellData(xlfile, xlSheetName, 1274, 8, acthomePageBodyHeaderListCountBeforeHide);
						
						Thread.sleep(2000);
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeBtn));
						customizeBtn.click();
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(modifiedHeaderTab));
						modifiedHeaderTab.click();
								
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(hideThisColumnChkbox));
						hideThisColumnChkbox.click();
								
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(hideThisColumnChkbox));
						boolean  actHideThisColumnChkbox=hideThisColumnChkbox.isSelected();
						boolean  expHideThisColumnChkbox=true;
						
						String actClickOnChkbox=Boolean.toString(actHideThisColumnChkbox);
						String expClickOnChkbox=excelReader.getCellData(xlSheetName, 1275, 7);
				 		
		                excelReader.setCellData(xlfile, xlSheetName, 1275, 8, actClickOnChkbox.toUpperCase());
						
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(custSaveBtn));
						custSaveBtn.click();
						
						String expMessage  = excelReader.getCellData(xlSheetName, 1276, 7);
						String actSaveMessage = checkValidationMessage(expMessage);
						
						excelReader.setCellData(xlfile, xlSheetName, 1276, 8, actSaveMessage);
						
						
						Thread.sleep(2000);
						
						int homePageBodyHeaderListCountAfterHiding=homePageBodyHeaderList.size();
						
						String acthomePageBodyHeaderListCountAfterHiding=Integer.toString(homePageBodyHeaderListCountAfterHiding);
						String exphomePageBodyHeaderListCountAfterHiding=excelReader.getCellData(xlSheetName, 1277, 7);
				 		
		                excelReader.setCellData(xlfile, xlSheetName, 1277, 8, acthomePageBodyHeaderListCountAfterHiding);
						
						System.out.println("*****************************************checkHidingFieldCustomization************************************");
						
						System.out.println(" homePageBodyHeaderListCountBeforeHide :  "+acthomePageBodyHeaderListCountBeforeHide+" Value Expected : "+exphomePageBodyHeaderListCountBeforeHide);
						System.out.println(" homePageBodyHeaderListCountAfterHide  :  "+acthomePageBodyHeaderListCountAfterHiding+" Value Expected : "+exphomePageBodyHeaderListCountAfterHiding);
						System.out.println(" Save Message                          :  "+actSaveMessage                           +" Value Expected : "+expMessage);
						
						if (acthomePageBodyHeaderListCountBeforeHide.equalsIgnoreCase(exphomePageBodyHeaderListCountBeforeHide) && 
								acthomePageBodyHeaderListCountAfterHiding.equalsIgnoreCase(exphomePageBodyHeaderListCountAfterHiding) && 
								actSaveMessage.equalsIgnoreCase(expMessage))
						{
							
							System.out.println(" Test Pass :  Hiding column " );
							excelReader.setCellData(xlfile, xlSheetName, 1273, 9, resPass);
							return true;
						}
						else
						{
							excelReader.setCellData(xlfile, xlSheetName, 1273, 9, resFail);
			                return false;
						}
					  }
			      
				      catch (Exception e) 
					  {
						  String exception =e.getMessage();
						  excelReader.setExceptionInExcel(xlfile, xlSheetName, 1273, 10, exception);
						  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
						  return false;
					  }
				   }
					
					
					 @FindBy(xpath="//span[contains(text(),'Extra Fields')]")
					 private static WebElement  custTransExtraFieldExpandBtn;
					
					 @FindBy(xpath="//li[@id='rd_customization_tree3258']//span[contains(text(),'Warehouse')]")
					 private static WebElement  warehouseExpandBtn;
					
				
					 
					 @FindBy(xpath="//*[@id='rd_customization_tree3259']")
					 private static WebElement  warehouseName;
					
					 @FindBy(xpath="//li[@id='rd_customization_tree3260']")
					 private static WebElement  warehouseCode;
					
					 @FindBy(xpath="//input[@id='ColumnHeading']")
					 private static WebElement  columnHeadingTxt;
					
					 
					 @FindBy(xpath="//li[@id='rd_customization_tree113']//span[contains(text(),'Department')]")
					 private static WebElement  cusDepartmentExpandBtn;
					 
					  @FindBy(xpath="//li[@id='rd_customization_tree114']")
					 private static WebElement  cusDepName;
					 
					 @FindBy(xpath="//li[@id='rd_customization_tree115']")
					 private static WebElement  cusDepCode;
					 
					/* @FindBy(xpath="//li[@id='rd_customization_tree104']//span[contains(text(),'Department')]")
					 private static WebElement  cusDepartmentExpandBtn;
					
					 
					 @FindBy(xpath="//li[@id='rd_customization_tree105']")
					 private static WebElement  cusDepName;
					 
					 @FindBy(xpath="//li[@id='rd_customization_tree106']")
					 private static WebElement  cusDepCode;*/
					 
					 @FindBy(xpath="//*[@id='id_rc_columnheadertable']/thead/tr[1]/th/div/p")
					 private static List<WebElement> cusGridHeaderList;
					 
					
					public boolean checkAddingExtraFieldInCustomization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
					{
						
						
						excelReader=new ExcelReader(POJOUtility.getExcelPath());
						xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
						
				        try
				        {
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeBtn));
						customizeBtn.click();
						
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(custLeftPannelTransExpandBtn));
						custLeftPannelTransExpandBtn.click();

						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(custTransExtraFieldExpandBtn));
						custTransExtraFieldExpandBtn.click();
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cusDepartmentExpandBtn));
						cusDepartmentExpandBtn.click();
						
						Thread.sleep(2000);
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cusDepName));
						
						getAction().doubleClick(cusDepName).build().perform();
						
						int cusGridHeaderListCount = cusGridHeaderList.size();
						
						for(int i=1;i<cusGridHeaderListCount;i++)
						{
							String data = cusGridHeaderList.get(i).getText();
							
							if(data.equalsIgnoreCase("Department Name"))
							{
								cusGridHeaderList.get(i).click();
							}
						}
						
						Thread.sleep(2000);
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(columnHeadingTxt));
						String actcolumnHeadingNameTxt=columnHeadingTxt.getAttribute("value");
						String expcolumnHeadingNameTxt=excelReader.getCellData(xlSheetName, 1279, 7);
				 		
		               excelReader.setCellData(xlfile, xlSheetName, 1279, 8, actcolumnHeadingNameTxt);
							
						getAction().doubleClick(cusDepCode).build().perform();
						
						int cusGridHeaderListCount2 = cusGridHeaderList.size();
						
						for(int i=1;i<cusGridHeaderListCount2;i++)
						{
							String data = cusGridHeaderList.get(i).getText();
							
							if(data.equalsIgnoreCase("Department Code"))
							{
								cusGridHeaderList.get(i).click();
							}
						}
						
						Thread.sleep(2000);
							
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(columnHeadingTxt));
						String actcolumnHeadingCodeTxt=columnHeadingTxt.getAttribute("value");
						String expcolumnHeadingCodeTxt=excelReader.getCellData(xlSheetName, 1280, 7);
				 		
			            excelReader.setCellData(xlfile, xlSheetName, 1280, 8, actcolumnHeadingCodeTxt);
							
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(custSaveBtn));
						custSaveBtn.click();
						
						String expMessage = excelReader.getCellData(xlSheetName, 1281, 7);
						String actSaveMessage = checkValidationMessage(expMessage);
						
						excelReader.setCellData(xlfile, xlSheetName, 1281, 8, actSaveMessage);
						Thread.sleep(2000);
						
						int homePageBodyHeaderListCount=homePageBodyHeaderList.size();
						
						String acthomePageBodyHeaderListCount=Integer.toString(homePageBodyHeaderListCount);
						String exphomePageBodyHeaderListCount=excelReader.getCellData(xlSheetName, 1282, 7);
				 		
			            excelReader.setCellData(xlfile, xlSheetName, 1282, 8, acthomePageBodyHeaderListCount);
						
						
						System.out.println("***********************************checkAddingExtraFieldInCustomization********************************");
						
						System.out.println(" homePageBodyHeaderListCountAfterHide  :  "+acthomePageBodyHeaderListCount+" Value Expected : "+exphomePageBodyHeaderListCount);
						System.out.println(" ColumnHeadingTxt                      :  "+actcolumnHeadingNameTxt       +" Value Expected : "+expcolumnHeadingNameTxt);
						System.out.println(" ColumnHeadingTxt                      :  "+actcolumnHeadingCodeTxt       +" Value Expected : "+expcolumnHeadingCodeTxt);
						System.out.println(" Save Message                          :  "+actSaveMessage                +" Value Expected : "+expMessage);
						
						if (actcolumnHeadingNameTxt.equalsIgnoreCase(expcolumnHeadingNameTxt) && actcolumnHeadingCodeTxt.equalsIgnoreCase(expcolumnHeadingCodeTxt) && 
								actSaveMessage.equalsIgnoreCase(expMessage) && acthomePageBodyHeaderListCount.equalsIgnoreCase(exphomePageBodyHeaderListCount)) 
						{
							System.out.println(" Test Pass:  Extra Filed Added Successfully ");
						    excelReader.setCellData(xlfile, xlSheetName, 1278, 9, resPass);
							return true;
							
						}
						else 
						{
							System.out.println(" Test Pass:  Extra Filed Not Added Successfully ");
							excelReader.setCellData(xlfile, xlSheetName, 1278, 9, resFail);
			                 return false;
						}
				        }
				        catch (Exception e)
				        {
				        	String exception=e.getMessage();
				        	excelReader.setExceptionInExcel(xlfile, xlSheetName, 1278, 10, exception);
				        	System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				        	return false;
				        }
						
					}
					
					 @FindBy(xpath="//a[contains(text(),'Remove Column')]")
					 private static WebElement  custExtraFieldRemoveBtn;
					
					
					
					public boolean checkDeleteExtraFieldFromHomePageBodyHeader() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
					{
						
						
						
						excelReader=new ExcelReader(POJOUtility.getExcelPath());
						xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
						
						
			            try
			            {
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeBtn));
						customizeBtn.click();
						
				        ArrayList<String>actcustBodyHeaderList=new ArrayList<String>();
						
						int actcustBodyHeaderListCount=custBodyHeaderList.size();
						
						
						for (int i = 0; i < actcustBodyHeaderListCount; i++)
						{
							String data=custBodyHeaderList.get(i).getText();
							
							if (data.contains(excelReader.getCellData(xlSheetName, 1284, 6))) 
							{
								custBodyHeaderList.get(i).click();
								
							}
						}
					
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(custExtraFieldRemoveBtn));
						custExtraFieldRemoveBtn.click();
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(custSaveBtn));
						custSaveBtn.click();
						
						String expMessage = excelReader.getCellData(xlSheetName, 1285, 7);
						String  actSaveMessage = checkValidationMessage(expMessage);
						
						excelReader.setCellData(xlfile, xlSheetName, 1285, 8, actSaveMessage);
						
						
						Thread.sleep(2000);
						
						int homePageBodyHeaderListCount=homePageBodyHeaderList.size();
						
						String acthomePageBodyHeaderListCount=Integer.toString(homePageBodyHeaderListCount);
						String exphomePageBodyHeaderListCount=excelReader.getCellData(xlSheetName, 1286, 7);
						
						excelReader.setCellData(xlfile, xlSheetName, 1286, 8, acthomePageBodyHeaderListCount);
						
						
				        System.out.println("*********************************checkDeleteExtraFieldFromHomePageBodyHeader***********************");
						System.out.println(" HomePageBodyHeaderList       :  "+acthomePageBodyHeaderListCount +" Value Expected : "+exphomePageBodyHeaderListCount);
						System.out.println(" Save Message                 :  "+actSaveMessage                 +" Value Expected : "+expMessage);
						
						if (actSaveMessage.equalsIgnoreCase(expMessage) && acthomePageBodyHeaderListCount.equalsIgnoreCase(exphomePageBodyHeaderListCount)) 
						{
							
							System.out.println(" Test Pass:    Extra Field Removed Successfully" );
							excelReader.setCellData(xlfile, xlSheetName, 1283, 9, resPass);
							return true;
						}
						else 
						{
							System.out.println(" Test Fail:    Extra Field Removed Successfully");
							excelReader.setCellData(xlfile, xlSheetName, 1283, 9, resFail);
							return false;
						}
			            }
			            catch (Exception e) 
			  		   {
			  			  String exception =e.getMessage();
			  			  excelReader.setExceptionInExcel(xlfile, xlSheetName, 1283, 10, exception);
			  			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  			  return false;
			  		   }
			  		   
					}
					

				
				
				
				
				
				
				
				
/*				AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
				
		
		 public static boolean checkFinancialsMenu() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
				financialsMenu.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
				
				boolean actFinancialsTransactionsMenuIsDisplay      = financialsTransactionMenu.isDisplayed();
		    	boolean actFinancialsCreditManagementMenuIsDisplay  = financialsCreditManagementMenu.isDisplayed(); 	
		    	boolean actFinancialsReportsMenuIsDisplay           = financialsReportsMenu.isDisplayed();
		    	boolean actFinancialsFinalAccountsMenuIsDisplay     = financialsFinalAccountsMenu.isDisplayed();
		    	boolean actFinancialsReceivablePayableMenuIsDisplay = financialsReceivableAndPayableAnalysisMenu.isDisplayed();
		    	boolean actFinancialsBudgetMenuIsDisplay            = financialsBudgetMenu.isDisplayed();
		    	boolean actFinancialsOnlinePaymentMenuIsDisplay     = financialsOnlinePaymentsMenu.isDisplayed();
		    		    	
				boolean expFinancialsTransactionsMenuIsDisplay      = true;
		    	boolean expFinancialsCreditManagementMenuIsDisplay  = true; 	
		    	boolean expFinancialsReportsMenuIsDisplay           = true;
		    	boolean expFinancialsFinalAccountsMenuIsDisplay     = true;
		    	boolean expFinancialsReceivablePayableMenuIsDisplay = true;
		    	boolean expFinancialsBudgetMenuIsDisplay            = true;
		    	boolean expFinancialsOnlinePaymentMenuIsDisplay     = true;
		    	    	
		    	System.out.println("FinancialsTransactionsMenuDisplay     : " + actFinancialsTransactionsMenuIsDisplay   +    "  Value Expected  " + expFinancialsTransactionsMenuIsDisplay);	
		    	System.out.println("FinancialsCreditManagementMenuDisplay : " + actFinancialsCreditManagementMenuIsDisplay  + "  Value Expected  " + expFinancialsCreditManagementMenuIsDisplay); 	
		    	System.out.println("FinancialsReportsMenuDisplay          : " + actFinancialsReportsMenuIsDisplay   +         "  Value Expected  " + expFinancialsReportsMenuIsDisplay);	   
		     	System.out.println("FinancialsFinalAccountsMenuDisplay    : " + actFinancialsReportsMenuIsDisplay  +          "  Value Expected  " + expFinancialsFinalAccountsMenuIsDisplay); 	
		    	System.out.println("FinancialsReportsMenuDisplay          : " + actFinancialsReceivablePayableMenuIsDisplay + "  Value Expected  " + expFinancialsReceivablePayableMenuIsDisplay);
		      	System.out.println("FinancialsCreditManagementMenuDisplay : " + actFinancialsBudgetMenuIsDisplay  +           "  Value Expected  " + expFinancialsBudgetMenuIsDisplay); 	
		    	System.out.println("FinancialsReportsMenuDisplay          : " + actFinancialsOnlinePaymentMenuIsDisplay   +   "  Value Expected  " + expFinancialsOnlinePaymentMenuIsDisplay);
		   		     	
		   
		    	int count										  = financialsMenusList.size();
		    	
		    	ArrayList<String> actList  = new ArrayList<String>();
		    	
		    	for (int i = 0; i < count; i++) 
		    	{
		    		String data		                              = financialsMenusList.get(i).getText();
		    		actList.add(data);
				}
		    	
		    	String actFinancialsMenusList					  = actList.toString();
		    	String expFinancialsMenusList					  = excelReader.getCellData(xlSheetName, 20, 7);
	    			    	
		    	System.out.println("Financials Menu Names Display Text Actual Values      :  " + actFinancialsMenusList);
		    	System.out.println("Financials Menu Names Display Text Expected Values    :  " + expFinancialsMenusList);
		    	
		    	excelReader.setCellData(xlfile, xlSheetName, 20, 8, actFinancialsMenusList);
		    	
				if(actFinancialsTransactionsMenuIsDisplay==expFinancialsTransactionsMenuIsDisplay  
						&& actFinancialsCreditManagementMenuIsDisplay==expFinancialsCreditManagementMenuIsDisplay
						&& actFinancialsReportsMenuIsDisplay==expFinancialsReportsMenuIsDisplay 
						&& actFinancialsFinalAccountsMenuIsDisplay==expFinancialsFinalAccountsMenuIsDisplay
						&& actFinancialsReceivablePayableMenuIsDisplay==expFinancialsReceivablePayableMenuIsDisplay
						&& actFinancialsBudgetMenuIsDisplay==expFinancialsBudgetMenuIsDisplay
						&& actFinancialsOnlinePaymentMenuIsDisplay==expFinancialsOnlinePaymentMenuIsDisplay
						&& actFinancialsMenusList.equalsIgnoreCase(expFinancialsMenusList))
				{
					excelReader.setCellData(xlfile, "sheet5", 10, 9, resPass);
					return true;
				}
				else
				{
					excelReader.setCellData(xlfile, "sheet5", 10, 9, resFail);
					return false;
				}
			}	
			catch (NoSuchElementException nse)
			{
				System.err.println("CATCH BLOCK : NO SUCH ELEMENT MESSAGE IS DISPLAY : "+ nse.getMessage());
				return false;
			}
			catch(TimeoutException te)
			{
				System.err.println("CATCH BLOCK : TIME OUT EXECPTION MESSAGE IS DISPLAY :  "+ te.getMessage());
				return false;
			}
		 }
		
		
		
		
		
		
		 @FindBy(xpath="//ul[@id='navigation_menu']/li[2]/ul/li[1]/ul/li/a/span")
		 private static List<WebElement> financialsTransactionsMenus;

		 
		 
		 
		 public static boolean checkTransactionsMenuInFinanceMenu() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{	
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
				financialsTransactionMenu.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankMenu));
				
				boolean actFinancialsCashAndBankMenuIsDisplay   = cashAndBankMenu.isDisplayed();
		    	boolean actFinancialsPurchaseMenuIsDisplay      = financialsTransactionsPurchaseMenu.isDisplayed(); 	
		    	boolean actFinancialsSalesIsDisplay             = financialsTransactionsSalesMenu.isDisplayed();
		    	boolean actFinancialsJournalsMenuIsDisplay      = financialsTransactionsJournalsMenu.isDisplayed();
		    	boolean actFinancialsAutoPostingMenuIsDisplay   = financialsTransactionsAutoPostingsMenu.isDisplayed();
		   
		    		    	
				boolean expFinancialsCashAndBankMenuIsDisplay   = true;
		    	boolean expFinancialsPurchaseMenuIsDisplay      = true; 	
		    	boolean expFinancialsSalesIsDisplay             = true;
		    	boolean expFinancialsJournalsMenuIsDisplay      = true;
		    	boolean expFinancialsAutoPostingMenuIsDisplay   = true;
		    	    	    	
		    	System.out.println("FinancialsCashAndBankMenuDisplay  : " + actFinancialsCashAndBankMenuIsDisplay   +  "  Value Expected  " + expFinancialsCashAndBankMenuIsDisplay);	
		    	System.out.println("FinancialsPurchaseMenuDisplay     : " + actFinancialsPurchaseMenuIsDisplay  +      "  Value Expected  " + expFinancialsPurchaseMenuIsDisplay); 	
		    	System.out.println("FinancialsSalesMenuDisplay        : " + actFinancialsSalesIsDisplay   +            "  Value Expected  " + expFinancialsSalesIsDisplay);	   
		     	System.out.println("FinancialsJournalsMenuDisplay     : " + actFinancialsJournalsMenuIsDisplay  +      "  Value Expected  " + expFinancialsJournalsMenuIsDisplay); 	
		    	System.out.println("FinancialsAutoPostingMenuDisplay  : " + actFinancialsAutoPostingMenuIsDisplay +    "  Value Expected  " + expFinancialsAutoPostingMenuIsDisplay);
		     	     		   
		    	
		    	int actTransactionsMenusCount			=financialsTransactionsMenus.size();
				int expTransactionsMenusCount			=5;
				
				System.out.println("FinanceTransactionsMenusCount Value Actual  : "+actTransactionsMenusCount+"  Value Expected  "+expTransactionsMenusCount); 	
		    	
		    	int count							   = financialsMenusList.size();
		    	
		    	ArrayList financialTransactionsList = new ArrayList<String>();
				
				for (int i = 0; i < actTransactionsMenusCount; i++) 
				{
					String data = financialsTransactionsMenus.get(i).getText();
					
					financialTransactionsList.add(data);
				}
				
				String actFinancialTransactionsList = financialTransactionsList.toString();
				String expFinancialTransactionsList = "[Cash and Bank, Purchases, Sales, Journals, Auto Postings]";
				
				System.out.println(actFinancialTransactionsList);
				System.out.println(expFinancialTransactionsList);
				
		   
		    	
				if(actFinancialsCashAndBankMenuIsDisplay==expFinancialsCashAndBankMenuIsDisplay  
						&& actFinancialsPurchaseMenuIsDisplay==expFinancialsPurchaseMenuIsDisplay
						&& actFinancialsSalesIsDisplay==expFinancialsSalesIsDisplay 
						&& actFinancialsJournalsMenuIsDisplay==expFinancialsJournalsMenuIsDisplay
						&& actFinancialsAutoPostingMenuIsDisplay==expFinancialsAutoPostingMenuIsDisplay
						&& actTransactionsMenusCount==expTransactionsMenusCount && actFinancialTransactionsList.equalsIgnoreCase(expFinancialTransactionsList))
				{
					return true;
				}
				else
				{
					return false;
				}
			}	
			catch (NoSuchElementException nse)
			{
				System.err.println("CATCH BLOCK : NO SUCH ELEMENT MESSAGE IS DISPLAY : "+ nse.getMessage());
				return false;
			}
			catch(TimeoutException te)
			{
				System.err.println("CATCH BLOCK : TIME OUT EXECPTION MESSAGE IS DISPLAY :  "+ te.getMessage());
				return false;
			}
		 }
		
			@FindBy(xpath="//*[@id='2066']/span")
			private static WebElement  jvVatVoucher;

			@FindBy(xpath="//*[@id='2067']/span")
			private static WebElement  nonjvVatVoucher;
			
			@FindBy(xpath="//*[@id='2068']/span")
			private static WebElement  debitNotesVatVoucher;
			
			@FindBy(xpath="//*[@id='2069']/span")
			private static WebElement  creditNotesVatVoucher;
		 
			@FindBy(xpath="//ul[@id='navigation_menu']/li[2]/ul/li[1]/ul/li[4]/ul/li/a/span")
			private static List<WebElement> financialsTransactionsJournalsMenus;
		 
		 
		 public static boolean checkFinancialsMenuTransactionsMenuJournalsMenu() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsJournalsMenu));
				financialsTransactionsJournalsMenu.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jvVatVoucher));
					
				boolean actJournalsEntriesVoucherIsDisplay         = journalsEntriesVoucher.isDisplayed();
		    	boolean actForexJVVoucherIsDisplay                 = forexJVVoucher.isDisplayed(); 	
		    	boolean actInterdepartmentalJVVoucherIsDisplay     = interdepartmentaljvVoucher.isDisplayed();
		    	boolean actOldJournalEntriesVoucherIsDisplay       = oldJouranlEntriesVoucher.isDisplayed();
		    	boolean actDebitNotesVoucherIsDisplay              = debitNotesVoucher.isDisplayed();
		    	boolean actDebitNotesLineWiseVoucherIsDisplay      = debitNotesLinewiseVoucher.isDisplayed();
		    	boolean actCreditNotesLineWiseVoucherIsDisplay     = creditNotesLinewiseVoucher.isDisplayed();
		    	
		    	boolean actJVVatVoucherIsDisplay                   = jvVatVoucher.isDisplayed();
		    	boolean actNonJvVatVoucherIsDisplay                = nonjvVatVoucher.isDisplayed();
		    	boolean actDebitNotesVatVoucherIsDisplay           = debitNotesVatVoucher.isDisplayed();
		    	boolean actCreditNotesVatVoucherIsDisplay          = creditNotesVatVoucher.isDisplayed();
		    	
		    	boolean actOpeningBalanceVoucherIsDisplay          = openingBalancesVoucher.isDisplayed();
		    	boolean actFixedAssetsDepreciationVoucherIsDisplay = fixedAssetsDepreciationVoucher.isDisplayed();
		    	
		    		
				boolean expJournalsEntriesVoucherIsDisplay         = true;
		    	boolean expForexJVVoucherIsDisplay                 = true; 	
		    	boolean expInterdepartmentalJVVoucherIsDisplay     = true;
		    	boolean expOldJournalEntriesVoucherIsDisplay       = true;
		    	boolean expDebitNotesVoucherIsDisplay              = true;
		    	boolean expDebitNotesLineWiseVoucherIsDisplay      = true;
		    	boolean expCreditNotesLineWiseVoucherIsDisplay     = true;
		    	
		    	boolean expJVVatVoucherIsDisplay                   = true;
		    	boolean expNonJvVatVoucherIsDisplay                = true;
		    	boolean expDebitNotesVatVoucherIsDisplay           = true;
		    	boolean expCreditNotesVatVoucherIsDisplay          = true;
		    	
		    	boolean expOpeningBalanceVoucherIsDisplay          = true;
		    	boolean expFixedAssetsDepreciationVoucherIsDisplay = true;
		    	    	
		    	System.out.println("JournalsEntriesVoucherIsDisplay         : " + actJournalsEntriesVoucherIsDisplay   +           "  Value Expected  " + expJournalsEntriesVoucherIsDisplay);	
		    	System.out.println("ForexJVVoucherIsDisplay                 : " + actForexJVVoucherIsDisplay  +                    "  Value Expected  " + expForexJVVoucherIsDisplay); 	
		    	System.out.println("InterdepartmentalJVVoucherIsDisplay     : " + actInterdepartmentalJVVoucherIsDisplay   +       "  Value Expected  " + expInterdepartmentalJVVoucherIsDisplay);	   
		     	System.out.println("OldJournalEntriesVoucherIsDisplay       : " + actOldJournalEntriesVoucherIsDisplay  +          "  Value Expected  " + expOldJournalEntriesVoucherIsDisplay); 	
		    	System.out.println("DebitNotesVoucherIsDisplay              : " + actDebitNotesVoucherIsDisplay +                  "  Value Expected  " + expDebitNotesVoucherIsDisplay);
		      	System.out.println("DebitNotesLineWiseVoucherIsDisplay      : " + actDebitNotesLineWiseVoucherIsDisplay  +         "  Value Expected  " + expDebitNotesLineWiseVoucherIsDisplay); 	
		    	System.out.println("CreditNotesLineWiseVoucherIsDisplay     : " + actCreditNotesLineWiseVoucherIsDisplay   +       "  Value Expected  " + expCreditNotesLineWiseVoucherIsDisplay);
		    	System.out.println("JVVatVouchersIsDisplay                  : " + actJVVatVoucherIsDisplay   +                     "  Value Expected  " + expJVVatVoucherIsDisplay);
		    	System.out.println("NonJVVatVoucherIsDisplay                : " + actNonJvVatVoucherIsDisplay   +                  "  Value Expected  " + expNonJvVatVoucherIsDisplay);
		    	System.out.println("DebitNotesVatVoucherIsDisplay           : " + actDebitNotesVatVoucherIsDisplay   +             "  Value Expected  " + expDebitNotesVatVoucherIsDisplay);
		    	System.out.println("CreditNotesVatVoucherIsDisplay          : " + actCreditNotesVatVoucherIsDisplay   +            "  Value Expected  " + expCreditNotesVatVoucherIsDisplay);
		    	System.out.println("OpeningBalanceVoucherIsDisplay          : " + actOpeningBalanceVoucherIsDisplay   +            "  Value Expected  " + expOpeningBalanceVoucherIsDisplay);		   		
		    	System.out.println("FixedAssetsDepreciationVoucherIsDisplay : " + actFixedAssetsDepreciationVoucherIsDisplay +     "  Value Expected  " + actFixedAssetsDepreciationVoucherIsDisplay);
		   	
				
				int actJournalsMenusCount				= financialsTransactionsJournalsMenus.size();
				int expJournalsMenusCount				= 14;
				
				System.out.println("JournalsMenusCount  : " + actJournalsMenusCount + "  value expected  " + expJournalsMenusCount);
				
				ArrayList financialTransactionsJournalsList = new ArrayList<String>();
				
				for (int j = 0; j < actJournalsMenusCount; j++) 
				{
					String data = financialsTransactionsJournalsMenus.get(j).getText();
					financialTransactionsJournalsList.add(data);
				}
				
				String actFinancialTransactionsJournalsList = financialTransactionsJournalsList.toString();
				String expFinancialTransactionsJournalsList = "[Journal Entries, Forex JV, Inter-Departmental JV, Non-Standard Journal Entries, Debit Notes, Debit Notes (Linewise), Credit Notes, JV VAT, Non JV VAT, Debit Notes VAT, Credit Notes VAT, Credit Notes (Linewise)/Payroll, Opening Balances, Fixed Asset Depreciation Voucher]";
				
				System.out.println(actFinancialTransactionsJournalsList);
				System.out.println(expFinancialTransactionsJournalsList);
				
				if (actJournalsMenusCount==expJournalsMenusCount && actFinancialTransactionsJournalsList.equalsIgnoreCase(expFinancialTransactionsJournalsList)) 
				{
					return true;
				}
				else 
				{
					return false;
				}
			}	
			catch (NoSuchElementException nse)
			{
				System.err.println("CATCH BLOCK : NO SUCH ELEMENT MESSAGE IS DISPLAY : "+ nse.getMessage());
				return false;
			}
			catch(TimeoutException te)
			{
				System.err.println("CATCH BLOCK : TIME OUT EXECPTION MESSAGE IS DISPLAY :  "+ te.getMessage());
				return false;
			}
		 }
		
		 
		
		  public boolean checkOpeningBalanceVoucherDisplayHomePage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		  {
				
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(openingBalancesVoucher));
				openingBalancesVoucher.click();
				
				Thread.sleep(3200);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
				
				boolean actHomePageNewBtnIsDisplayed = newBtn.isDisplayed();
				boolean actHomePageEditBtn           = editBtn.isDisplayed();		
				boolean actHomePagePrintBtn          = printBtn.isDisplayed();
				boolean actHomePageDeleteBtn         = deleteBtn.isDisplayed();
				boolean actHomePageSuspendBtn        = suspendBtn.isDisplayed();
				boolean actHomePageExportXMLBtn      = exportToXMLBtn.isDisplayed();
				boolean actHomePageSettingsBtn       = settingsBtn.isDisplayed();
				boolean actHomePageCloseBtn          = homeCloseBtn.isDisplayed();
				boolean actHomePageGridCheckBox      = grid_HeaderChkBox.isDisplayed();
				boolean actHomePageSortingBtn        = sortingBtn.isDisplayed();
				boolean actHomePageCreateViewBn      = createViewBtn.isDisplayed();
				boolean actHomePageCustomizeBtn      = customizeBtn.isDisplayed();
				boolean actHomePageFilterBtn         = filterBtn.isDisplayed();
				boolean actHomePageRefreshBtn        = refreshBtn.isDisplayed();
				boolean actHomePageOptionsBtn        = optionsBtn.isDisplayed();
				boolean actHomePageExportBtn         = exportBtn.isDisplayed();
				
				boolean expHomePageNewBtnIsDisplayed = true;	
				boolean expHomePageEditBtn           = true;
				boolean expHomePagePrintBtn          = true;
				boolean expHomePageDeleteBtn         = true;
				boolean expHomePageSuspendBtn        = true;
				boolean expHomePageExportXMLBtn      = true;
				boolean expHomePageSettingsBtn       = true;
				boolean expHomePageCloseBtn          = true;
				boolean expHomePageGridCheckBox      = true;
				boolean expHomePageSortingBtn        = true;
				boolean expHomePageCreateViewBn      = true;
				boolean expHomePageCustomizeBtn      = true;
				boolean expHomePageFilterBtn         = true;
				boolean expHomePageRefreshBtn        = true;
				boolean expHomePageOptionsBtn        = true;
				boolean expHomePageExportBtn         = true;
				
				System.out.println("Home Page New Btn Value Actual           : " + actHomePageNewBtnIsDisplayed+ "  Value Expected : " + expHomePageNewBtnIsDisplayed);
				System.out.println("Home Page Edit Btn Value Actual          : " + actHomePageEditBtn+           "  Value Expected : " + expHomePageEditBtn);
				System.out.println("Home Page Print Btn Value Actual         : " + actHomePagePrintBtn+          "	Value Expected : " + expHomePagePrintBtn);
				System.out.println("Home Page Delete Btn Value Actual        : " + actHomePageDeleteBtn+         "	Value Expected : " + expHomePageDeleteBtn);
				System.out.println("Home Page Suspend Btn Value Actual       : " + actHomePageSuspendBtn+        "	Value Expected : " + expHomePageSuspendBtn);
				
				System.out.println("Home Page Export XML Btn Value Actual    : " + actHomePageExportXMLBtn+      "	Value Expected : " + expHomePageExportXMLBtn);
				System.out.println("Home Page Settings Btn Value Actual      : " + actHomePageSettingsBtn+       "	Value Expected : " + expHomePageSettingsBtn);
				System.out.println("Home Page Close Btn Value Actual         : " + actHomePageCloseBtn+          "	Value Expected : " + expHomePageCloseBtn);
				System.out.println("Home Page Grid check Value Actual        : " + actHomePageGridCheckBox+      "	Value Expected : " + expHomePageGridCheckBox);
				System.out.println("Home Page Sorting Btn Value Actual       : " + actHomePageSortingBtn+        "	Value Expected : " + expHomePageSortingBtn);
				System.out.println("Home Page Create View Btn Value Actual   : " + actHomePageCreateViewBn+      "	Value Expected : " + expHomePageCreateViewBn);
				System.out.println("Home Page Customize Btn Value Actual     : " + actHomePageCustomizeBtn+      "	Value Expected : " + expHomePageCustomizeBtn);
				System.out.println("Home Page Filter check Value Actual      : " + actHomePageFilterBtn+         "	Value Expected : " + expHomePageFilterBtn);
				System.out.println("Home Page Refesh Btn Value Actual        : " + actHomePageRefreshBtn+        "	Value Expected : " + expHomePageRefreshBtn);
				System.out.println("Home Page Options Btn Value Actual       : " + actHomePageOptionsBtn+        "	Value Expected : " + expHomePageOptionsBtn);
				System.out.println("Home Page Export Btn Value Actual        : " + actHomePageExportBtn+         "  Value Expected : " + expHomePageExportBtn);
				
				int count				                 = openingStocksNewToolBarButtons.size();
				
				ArrayList<String> actbuttons             = new ArrayList<String>();
				
				for (int i = 0; i < count; i++) 
				{
					String data                          = openingStocksNewToolBarButtons.get(i).getText();
					actbuttons.add(data);
				}
				    	
				String actopeningStocksNewToolBarButtons = actbuttons.toString();
				String expopeningStocksNewToolBarButtons =  "[New,   Edit  , Print, Delete, Suspend, , Export to XML, Setting, Close]";
			
				System.out.println("actopeningStocksNewToolBarButtons  : " + actopeningStocksNewToolBarButtons);
				System.out.println("expopeningStocksNewToolBarButtons  : " + expopeningStocksNewToolBarButtons);
				
				excelReader.setCellData(xlfile, xlSheetName, 17, 8, actopeningStocksNewToolBarButtons);	
				
				String actsetAsDefaultView		=	setAsDefaultView.getText();
				String expsetAsDefaultView		=	excelReader.getCellData(xlSheetName, 18, 7);
				excelReader.setCellData(xlfile, xlSheetName, 18, 8, actsetAsDefaultView);
				
				
				//Ribbon Control Icons
		        int count1		= headingOptions.size();
				
				ArrayList<String> headingButtons = new ArrayList<String>();
				
				for (int i = 1; i < count1; i++) 
				{
					String data=headingOptions.get(i).getAttribute("title");
					
					headingButtons.add(data);
				}
				
				String actHeadingButtons = headingButtons.toString();
				String expHeadingButtons = excelReader.getCellData(xlSheetName, 18, 7);
				excelReader.setCellData(xlfile, xlSheetName, 18, 8, actHeadingButtons);
				
				
				System.out.println("actopeningStocksNewHeadingButtons  : " + actHeadingButtons);
				System.out.println("expopeningStocksNewHeadingButtons  : " + expHeadingButtons);
				
				//Home Page Column Headings
		        int headerTxtCount		= headerTxtList.size();
				
				ArrayList<String> headerTxt = new ArrayList<String>();
				
				for (int i = 2; i < headerTxtCount; i++) 
				{
					String data=headerTxtList.get(i).getText();
					headerTxt.add(data);
				}
				
				String actHeaderTxt = headerTxt.toString();
				String expHeaderTxt = excelReader.getCellData(xlSheetName, 19, 7);
				excelReader.setCellData(xlfile, xlSheetName, 19, 8, actHeaderTxt);
				
				
				System.out.println("actopeningStocksNewHomePageColumnsButtons  : " + actHeaderTxt);
				System.out.println("expopeningStocksNewHomePageColumnsButtons  : " + expHeaderTxt);
				
				if(actHomePageNewBtnIsDisplayed==expHomePageNewBtnIsDisplayed  && actHomePageEditBtn==expHomePageEditBtn && actHomePagePrintBtn==expHomePagePrintBtn
						&& actHomePageDeleteBtn==expHomePageDeleteBtn  && actHomePageSuspendBtn==expHomePageSuspendBtn 
					    && actHomePageExportXMLBtn==expHomePageExportXMLBtn
						&& actHomePageSettingsBtn==expHomePageSettingsBtn && actHomePageCloseBtn==expHomePageCloseBtn && actHomePageGridCheckBox==expHomePageGridCheckBox
						&& actHomePageSortingBtn==expHomePageSortingBtn && actHomePageCreateViewBn==expHomePageCreateViewBn && actHomePageCustomizeBtn==expHomePageCustomizeBtn
						&& actHomePageFilterBtn==expHomePageFilterBtn && actHomePageRefreshBtn==expHomePageRefreshBtn && actHomePageOptionsBtn==expHomePageOptionsBtn
						&& actHomePageExportBtn==expHomePageExportBtn  
						&& actopeningStocksNewToolBarButtons.equalsIgnoreCase(expopeningStocksNewToolBarButtons)
						&& actHeadingButtons.equalsIgnoreCase(expHeadingButtons)
						&& actHeaderTxt.equalsIgnoreCase(expHeaderTxt))
				{
					System.out.println("Test Pass : HomeScreen Options Are Displayed");
				  //excelReader.setCellData(xlfile, xlSheetName, 9, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : HomeScreen Options Are NOT Displayed");
					//excelReader.setCellData(xlfile, xlSheetName, 9, 9, resFail);
					return false;
				}
			}

		 
		  public boolean checkSaveInCreateViewOfHomePageOfOpeningBalance() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		  {
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		    try
		    {	
		    	
	    	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createViewBtn));
		   	 createViewBtn.click();
		    	
		     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(viewNameTxtInCreateView));
		     viewNameTxtInCreateView.click();
		     
		     
		     
		     viewNameTxtInCreateView.sendKeys("OSNCV");
		     
		     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveOptionInCreateView));
		     saveOptionInCreateView.click();
		     
		     System.out.println("***");
		     
		     String expSaveViewMessage = "View saved successfully";
				
			 String actSaveViewMessage = checkValidationMessage(expSaveViewMessage);
				
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createViewNameDisplayInHomePage));
			 
			 String actcreateViewNameDisplayInHomePage = createViewNameDisplayInHomePage.getText();
			 String expcreateViewNameDisplayInHomePage = "OSNCV";
			 
			 System.out.println("View Display In Home page Value Actual    : " + actcreateViewNameDisplayInHomePage   +     "	 Value Expected : " + expcreateViewNameDisplayInHomePage);
			
			 if(actSaveViewMessage.equalsIgnoreCase(expSaveViewMessage) && actcreateViewNameDisplayInHomePage.equalsIgnoreCase(expcreateViewNameDisplayInHomePage) )
			 {
				System.out.println("Test Pass : View Saved Successfully");
				
				return true;
			 }
			 else
			 {
				System.out.println("Test Fail : View NOT Saved Successfully");
				
				return false;
			 } 
		   }
		   catch (NoSuchElementException nse)
		   {
				System.err.println("CATCH BLOCK : NO SUCH ELEMENT MESSAGE IS DISPLAY : "+ nse.getMessage());
				return false;
		   }
		   catch(TimeoutException te)
		   {
				System.err.println("CATCH BLOCK : TIME OUT EXECPTION MESSAGE IS DISPLAY :  "+ te.getMessage());
				return false;
		   }
		 }
		  
	    
		  
  
		  
		  public boolean checkDeleteCreateViewOfHomePageOfOpeningBalance() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		  {
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		    try
		    {
		    	
		     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createViewBtn));
		   	 createViewBtn.click();
		   			
		     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(viewNameTxtInCreateView));
		     viewNameTxtInCreateView.click();
		     
		     viewNameTxtInCreateView.sendKeys("OSNCVTODELETE");
		     
		     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveOptionInCreateView));
		     saveOptionInCreateView.click();
		     
		     String expSaveViewMessage ="View saved successfully";
				
			 String actSaveViewMessage = checkValidationMessage(expSaveViewMessage);
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createViewNameDisplayInHomePage));
			 
			 String actcreateViewNameDisplayInHomePage = createViewNameToDeleteDisplayInHomePage.getText();
			 String expcreateViewNameDisplayInHomePage = "OSNCVTODELETE";
			 
			 System.out.println("View Display In Home page Value Actual    : " + actcreateViewNameDisplayInHomePage   +     "	 Value Expected : " + expcreateViewNameDisplayInHomePage);
			 
			 Thread.sleep(2000);
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createViewNameToDeleteDisplayInHomePage));
			 createViewNameToDeleteDisplayInHomePage.click();
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteViewButton));
			 deleteViewButton.click();
			 
			 getWaitForAlert();
			 
			 String actAlertMessageOnDeleteView = getAlert().getText();
			 String expAlertMessageOnDeleteView = "Äre you sure to delete view.";
			 
			 System.out.println("View Display In Home page Value Actual    : " + actAlertMessageOnDeleteView   +     "	 Value Expected : " + expAlertMessageOnDeleteView);
			 
			 getAlert().accept();
			 
			 String expDeleteViewMessage ="View deleted successfully.";
				
			 String actDeleteViewMessage = checkValidationMessage(expDeleteViewMessage);
			
			 int actCount=countOfCreateView.size();
			 int expCount=2;
			 
			 System.out.println("Count In Home page Value Actual    : " + actCount   +     "	 Value Expected : " + expCount);
			 
			 if(actSaveViewMessage.equalsIgnoreCase(expSaveViewMessage) && actcreateViewNameDisplayInHomePage.equalsIgnoreCase(expcreateViewNameDisplayInHomePage)
					 && actAlertMessageOnDeleteView.equalsIgnoreCase(expAlertMessageOnDeleteView) && actCount==expCount)
			 {
				System.out.println("Test Pass : View Saved Successfully");
				
				return true;
			 }
			 else
			 {
				System.out.println("Test Fail : View NOT Saved Successfully");
				
				return false;
			 } 
		   }
		   catch (NoSuchElementException nse)
		   {
				System.err.println("CATCH BLOCK : NO SUCH ELEMENT MESSAGE IS DISPLAY    :  " + nse.getMessage());
				return false;
		   }
		   catch(TimeoutException te)
		   {
				System.err.println("CATCH BLOCK : TIME OUT EXECPTION MESSAGE IS DISPLAY :  " + te.getMessage());
				return false;
		   }
		 }
		  

		 
		  
		  public boolean checkEditCreateViewOfHomePageOfOpeningBalance() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		  {
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		    try
		    {
		      	
		        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createViewNameToEditInHomePage));
		        createViewNameToEditInHomePage.click();
		   		
		        //Home Page Column Headings
		        
		        int headerTxtCount		= headerTxtList.size();
				
				ArrayList<String> headerTxt = new ArrayList<String>();
				
				for (int i = 2; i < headerTxtCount; i++) 
				{
					String data=headerTxtList.get(i).getText();
					headerTxt.add(data);
				}
				
				String actHeaderTxt = headerTxt.toString();
				String expHeaderTxt = excelReader.getCellData(xlSheetName, 19, 7);
				excelReader.setCellData(xlfile, xlSheetName, 19, 8, actHeaderTxt);
			
				System.out.println("actopeningStocksNewHomePageColumnsButtons  : " + actHeaderTxt);
				System.out.println("expopeningStocksNewHomePageColumnsButtons  : " + expHeaderTxt);
			
				//Click on Edit option

				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editViewOptionInHomePage));
				 editViewOptionInHomePage.click();
				 
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(viewTypeInCreateView));
			
			     boolean actViewTxt              = viewNameTxtInCreateView.isDisplayed();
				 boolean actDataSet              = dataSetInCreateView.isDisplayed();
				 boolean actViewType             = viewTypeInCreateView.isDisplayed();
				 boolean actAuthorization        = authorizationInCreateView.isDisplayed();
				 boolean actCheckStatus          = checkSatusInCreateView.isDisplayed();
				 boolean actQC                   = qcInCreateView.isDisplayed();
				 boolean actSuspendStatus        = suspendStatusInCreateView.isDisplayed();
				 boolean actFilterOption         = filterOptionInCreateView.isDisplayed();
				 boolean actAdvanceFilter        = advanvefilterOptionInCreateView.isDisplayed();
				 boolean actSaveOption           = saveOptionInCreateView.isDisplayed();
				 boolean actCloseOption          = closeOptionInCreateView.isDisplayed();
				
				 boolean expViewTxt              = true;
				 boolean expDataSet              = true;
				 boolean expViewType             = true;
				 boolean expAuthorization        = true;
				 boolean expCheckStatus          = true;
				 boolean expQC                   = true;
				 boolean expSuspendStatus        = true;
				 boolean expFilterOption         = true;
				 boolean expAdvanceFilter        = true;
				 boolean expSaveOption           = true;
				 boolean expCloseOption          = true;
				 
				 System.out.println("View Text Box Value Actual       : " + actViewTxt       +     "  Value Expected : " + expViewTxt);
				 System.out.println("Data Set Value Actual            : " + actDataSet       +     "  Value Expected : " + expDataSet);
				 System.out.println("View Type Value Actual           : " + actViewType      +     "  Value Expected : " + expViewType);
				 System.out.println("Authorization Value Actual       : " + actAuthorization +     "  Value Expected : " + expAuthorization);
				 System.out.println("Check Status Value Actual        : " + actCheckStatus   +     "  Value Expected : " + expCheckStatus);
				 System.out.println("QC Value Actual                  : " + actQC            +     "  Value Expected : " + expQC);
				 System.out.println("Suspend Value Actual             : " + actSuspendStatus +     "  Value Expected : " + expSuspendStatus);
				 System.out.println("Filter Value Actual              : " + actFilterOption  +     "  Value Expected : " + expFilterOption);
				 System.out.println("Advance Filter Value Actual      : " + actAdvanceFilter +     "  Value Expected : " + expAdvanceFilter);
				 System.out.println("Save Option Value Actual         : " + actSaveOption    +     "  Value Expected : " + expSaveOption);
				 System.out.println("Close Option Value Actual        : " + actCloseOption   +     "  Value Expected : " + expCloseOption);
				
				 String actdatasetGetText       = datasetGetText.getText();
				 String actviewTypeGetText      = viewTypeGetText.getText();
				 String actcheckStatusGetText   = checkStatusGetText.getText();
				 String actsuspendTypeGetText   = suspendStatusGetText.getText();
				 String actauthorizationGetText = authorizationGetText.getText();
				 String actqcGetText            = qcGetText.getText();
				 String actGetViewName          = viewNameGetText.getAttribute("value");
				
				 String expdatasetGetText       = "Voucher";
				 String expviewTypeGetText      = "Detailed";
				 String expcheckStatusGetText   = "Checked";
				 String expsuspendTypeGetText   = "Suspend";
				 String expauthorizationGetText = "Authorized";
				 String expqcGetText            = "QC Done";
				 String expGetViewName          = "OSNCV";
				 
				 
				 System.out.println("Data Set Value Actual        : " + actdatasetGetText  +      "  Value Expected : " + expdatasetGetText);
				 System.out.println("View Type Value Actual       : " + actviewTypeGetText  +     "  Value Expected : " + expviewTypeGetText);
				 System.out.println("Check Status Value Actual    : " + actcheckStatusGetText +   "  Value Expected : " + expcheckStatusGetText);
				 System.out.println("Suspend Value Actual         : " + actsuspendTypeGetText +   "  Value Expected : " + expsuspendTypeGetText);
				 System.out.println("Authorization Value Actual   : " + actauthorizationGetText + "  Value Expected : " + expauthorizationGetText);
				 System.out.println("QC Value Actual              : " + actqcGetText            + "  Value Expected : " + expqcGetText);
				 System.out.println("View Name Value Actual       : " + actGetViewName +          "  Value Expected : " + expGetViewName);

				 
				 Thread.sleep(2000);
				
			     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(viewNameTxtInCreateView));
			     viewNameTxtInCreateView.click();
			     viewNameTxtInCreateView.sendKeys(Keys.END);
			     viewNameTxtInCreateView.sendKeys(Keys.SHIFT,Keys.HOME);
			     viewNameTxtInCreateView.sendKeys("OSNCSUSPEND");
			     
			     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(suspendStatusInCreateView));
			     suspendStatusInCreateView.sendKeys("Suspend");
			     
			     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveOptionInCreateView));
			     saveOptionInCreateView.click();
			     
			     String expSaveViewMessage ="View updated successfully";
					
				 String actSaveViewMessage = checkValidationMessage(expSaveViewMessage);
				 
				 System.out.println("Save View In Home page Value Actual    : " + actSaveViewMessage   +     "	 Value Expected : " + expSaveViewMessage);
				 
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createViewNameDisplayInHomePage));
				 
				 String actcreateViewNameDisplayInHomePage = createViewNameToEditInHomePage.getText();
				 String expcreateViewNameDisplayInHomePage = "OSNCSUSPEND";
				 
				 System.out.println("View Display In Home page Value Actual    : " + actcreateViewNameDisplayInHomePage   +     "	 Value Expected : " + expcreateViewNameDisplayInHomePage);
				 
					
				 if(actHeaderTxt.equalsIgnoreCase(expHeaderTxt) && actViewTxt==expViewTxt &&    actDataSet==expDataSet && actViewType==expViewType && actAuthorization==expAuthorization
						&& actCheckStatus==expCheckStatus && actQC==expQC && actSuspendStatus==expSuspendStatus 
						&& actFilterOption==expFilterOption && actAdvanceFilter==expAdvanceFilter && actSaveOption==expSaveOption && actCloseOption==expCloseOption
						
						&& actdatasetGetText.equalsIgnoreCase(expdatasetGetText) && actviewTypeGetText.equalsIgnoreCase(expviewTypeGetText)
						&& actcheckStatusGetText.equalsIgnoreCase(expcheckStatusGetText) && actsuspendTypeGetText.equalsIgnoreCase(expsuspendTypeGetText)
						&& actauthorizationGetText.equalsIgnoreCase(expauthorizationGetText) && actqcGetText.equalsIgnoreCase(expqcGetText)
						&& actGetViewName.equalsIgnoreCase(expGetViewName)
						
						&& actSaveViewMessage.equalsIgnoreCase(expSaveViewMessage) && actcreateViewNameDisplayInHomePage.equalsIgnoreCase(expcreateViewNameDisplayInHomePage))
				  {
					System.out.println("Test Pass : View Saved Successfully");
					
					return true;
				  }
				  else
				  {
					System.out.println("Test Fail : View NOT Saved Successfully");
					
					return false;
				  } 
			    }
			    catch (NoSuchElementException nse)
			    {
					System.err.println("CATCH BLOCK : NO SUCH ELEMENT MESSAGE IS DISPLAY    :  " + nse.getMessage());
					return false;
			    }
			    catch(TimeoutException te)
			    {
					System.err.println("CATCH BLOCK : TIME OUT EXECPTION MESSAGE IS DISPLAY :  " + te.getMessage());
					return false;
			    }
		   }
		  
		  
		  
		  public boolean checkOpeningBalanceVoucherHomePageNewOptionOnClickDisplayEntryPage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		  {
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		    try
		    {
		     
		     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			 newBtn.click();
			
			 checkUserFriendlyMessage();
			
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(freeFlowBtn));
			 
			 boolean actOpeningStocksNewVouherFreeFlowBtn=freeFlowBtn.isDisplayed();
			 boolean expOpeningStocksNewVouherFreeFlowBtn=true;
					
			 System.out.println("Opening Stocks Voucher Free Flow Option Value Actual : " + actOpeningStocksNewVouherFreeFlowBtn+ "  Value Expected : " + expOpeningStocksNewVouherFreeFlowBtn);
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoSideBarMinimizeExpandBtn));
			 infoSideBarMinimizeExpandBtn.click();
			  
			 if(actOpeningStocksNewVouherFreeFlowBtn==expOpeningStocksNewVouherFreeFlowBtn )
			 {
				System.out.println("Test Pass : entry Page  Displayed");
				return true;
			 } 
			 else
			 {
				System.out.println("Test Fail : entry Page NOT Displayed");
				return false;
			 } 
		   }
		   catch (NoSuchElementException nse)
		   {
				System.err.println("CATCH BLOCK : NO SUCH ELEMENT MESSAGE IS DISPLAY : "+ nse.getMessage());
				return false;
		   }
		   catch(TimeoutException te)
		   {
				System.err.println("CATCH BLOCK : TIME OUT EXECPTION MESSAGE IS DISPLAY :  "+ te.getMessage());
				return false;
		   }
		 }
			
		  
		  
		  public boolean checkOpeningBalanceVoucherEntryPageRibbonControl() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		  {
		 	excelReader=new ExcelReader(POJOUtility.getExcelPath());
		 	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		 	
		 	try
		 	{
		 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(freeFlowBtn));
		 		
		 		boolean actEntryPageJumpToHeaderSectionBtn = jumpToHeaderSectionBtn.isDisplayed();
		 		boolean actEntryPageJumpToBodySectionBtn   = jumpToBodySectionBtn.isDisplayed();
		 		boolean actEntryPageJumpToFooterBtn        = jumpToFooterBtn.isDisplayed();
		 		boolean actEntryPageNewBtn                 = new_newBtn.isDisplayed();
		 		boolean actEntryPageSaveBtn                = saveBtn.isDisplayed();
		 		boolean actEntryPagePreviousBtn            = previousBtn.isDisplayed();
		 		boolean actEntryPageNextBtn                = nextBtn.isDisplayed();
		 		boolean actEntryPagePrintBtn               = new_PrintBtn.isDisplayed();
		 		boolean actEntryPageSuspendBtn             = new_SuspendBtn.isDisplayed();
		 		boolean actEntryPageCloseBtn               = new_CloseBtn.isDisplayed();
		 		boolean actEntryPageToggleBtn              = toggleBtn.isDisplayed();

		 		boolean expEntryPageJumpToHeaderSectionBtn = true;
		 		boolean expEntryPageJumpToBodySectionBtn   = true;
		 		boolean expEntryPageJumpToFooterBtn        = true;
		 		boolean expEntryPageNewBtn	               = true;
		 		boolean expEntryPageSaveBtn                = true;
		 		boolean expEntryPagePreviousBtn            = true;
		 		boolean expEntryPageNextBtn                = true;
		 		boolean expEntryPagePrintBtn               = true;
		 		boolean expEntryPageSuspendBtn             = true;
		 		boolean expEntryPageCloseBtn               = true;
		 		boolean expEntryPageToggleBtn              = true;
		 		
		 		//System.out.println("************************************* Opening Stocks New Entry Page Ribbon Control Options  ********************************************");
		 		
		 		System.out.println("Jump to Header Value Actual : " + actEntryPageJumpToHeaderSectionBtn+ " Value Expected : " + expEntryPageJumpToHeaderSectionBtn);
		 		System.out.println("Jump To Body Value Actual   : " + actEntryPageJumpToBodySectionBtn+   " Value Expected : " + expEntryPageJumpToBodySectionBtn);
		 		System.out.println("Jump To Footer Value Actual : " + actEntryPageJumpToFooterBtn+        " Value Expected : " + expEntryPageJumpToFooterBtn);
		 		System.out.println("New Btn Value Actual        : " + actEntryPageNewBtn+                 " Value Expected : " + expEntryPageNewBtn);
		 		System.out.println("Save Btn Value Actual       : " + actEntryPageSaveBtn+                " Value Expected : " + expEntryPageSaveBtn);
		 		System.out.println("Previous Btn Value Actual   : " + actEntryPagePreviousBtn+            " Value Expected : " + expEntryPagePreviousBtn);
		 		System.out.println("Next Btn Value Actual       : " + actEntryPageNextBtn+                " Value Expected : " + expEntryPageNextBtn);
		 		System.out.println("Print Btn Value Actual      : " + actEntryPagePrintBtn+               " Value Expected : " + expEntryPagePrintBtn);
		 		System.out.println("Suspend Btn Value Actual    : " + actEntryPageSuspendBtn+             " Value Expected : " + expEntryPageSuspendBtn);
		 		System.out.println("Close Btn Value Actual      : " + actEntryPageCloseBtn+               " Value Expected : " + expEntryPageCloseBtn);
		 		System.out.println("Toggle Btn Value Actual     : " + actEntryPageToggleBtn+              " Value Expected : " + expEntryPageToggleBtn);
		 	
		 		if(actEntryPageJumpToHeaderSectionBtn==expEntryPageJumpToHeaderSectionBtn && actEntryPageJumpToBodySectionBtn==expEntryPageJumpToBodySectionBtn 
		 				&& actEntryPageJumpToFooterBtn==expEntryPageJumpToFooterBtn && actEntryPageJumpToFooterBtn==expEntryPageJumpToFooterBtn
		 				&& actEntryPageNewBtn==expEntryPageNewBtn && actEntryPageSaveBtn==expEntryPageSaveBtn && actEntryPagePreviousBtn==expEntryPagePreviousBtn
		 				&& actEntryPageNextBtn==expEntryPageNextBtn && actEntryPagePrintBtn==expEntryPagePrintBtn &&actEntryPageSuspendBtn==expEntryPageSuspendBtn 
		 				&& actEntryPageCloseBtn==expEntryPageCloseBtn && actEntryPageToggleBtn==expEntryPageToggleBtn )
		 		{
		 			System.out.println("Test Pass : Entry Page Options Are Displayed");
		 			return true;
		 		}
		 		else
		 		{
		 			System.out.println("Test Fail : Entry Page NOT Displayed");
		 			return false;
		 		}
		 	}
		 	catch (NoSuchElementException nse)
		     {
		 		System.err.println("CATCH BLOCK : NO SUCH ELEMENT MESSAGE IS DISPLAY : "+ nse.getMessage());
		 		return false;
		     }
		     catch(TimeoutException te)
		     {
		 		System.err.println("CATCH BLOCK : TIME OUT EXECPTION MESSAGE IS DISPLAY :  "+ te.getMessage());
		 		return false;
		     }
		  }
		 	

          @FindBy(xpath="//label[contains(text(),'Copy Document')]")
          private static WebElement CopyDocumentBtn;
 
		  @FindBy(xpath="//label[contains(text(),'Copy to Clipboard')]")
		  private static WebElement copytoClipboardBtn;
		 
		  @FindBy(xpath="//label[contains(text(),'Paste from Clipboard')]")
		  private static WebElement pastefromClipboardBtn;
		
		 
		 
		  @FindBy(xpath="//label[contains(text(),'Posting details')]")
		  private static WebElement postingDetailsBtn;
		
		 
		  @FindBy(xpath="//label[contains(text(),'Export to XML')]")
		  private static WebElement exporttoXMLBtn;
		 
		  @FindBy(xpath="//label[contains(text(),'Setting')]")
		  private static WebElement settingBtn;
		 
		  @FindBy(xpath="//label[contains(text(),'Calculator')]")
		  private static WebElement calculatorBtn;
		 
		  @FindBy(xpath="//label[contains(text(),'Auto Load')]")
		  private static WebElement autoLoadBtn;
		  
		  public boolean checkOpeningBalanceEntryPageOptionsUnderToggleBtn() throws EncryptedDocumentException, InvalidFormatException, IOException
		  {
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
		    	toggleBtn.click();
		    	
		        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(autoLoadBtn));
				
				
				boolean actCopyDocumentBtn                =CopyDocumentBtn.isDisplayed();
				boolean actcopytoClipboardBtn             =copytoClipboardBtn.isDisplayed();
				boolean actpastefromClipboardBtn          =pastefromClipboardBtn.isDisplayed();
				boolean actpostingDetailsBtn              =postingDetailsBtn.isDisplayed();
				boolean actexporttoXMLBtn                 =exporttoXMLBtn.isDisplayed();
				boolean actsettingBtn                     =settingBtn.isDisplayed();
				boolean actcalculatorBtn                  =calculatorBtn.isDisplayed();
				boolean actautoLoadBtn                    =autoLoadBtn.isDisplayed();

				
				boolean expCopyDocumentBtn            =true;
				boolean expcopytoClipboardBtn         =true;
				boolean exppastefromClipboardBtn      =true;
				boolean exppostingDetailsBtn          =true;
				boolean expreversEntryBtn             =true;
				boolean expexporttoXMLBtn             =true;
				boolean expsettingBtn                 =true;
				boolean expcalculatorBtn              =true;
				boolean expautoLoadBtn                =true;

				
				System.out.println("*************************************JournalEntries  check Options Under toggle Btn  ********************************************");
				System.out.println("Entry Page RC Copy Document Value Actual:     "+actCopyDocumentBtn+"         Value Expected : "+expCopyDocumentBtn);
				System.out.println("Entry Page RC copy to ClipboardValue Actual    :"+actcopytoClipboardBtn+"    Value Expected : "+expcopytoClipboardBtn);
				System.out.println("Entry Page RC pastefromClipboard Value Actual  :"+actpastefromClipboardBtn+" Value Expected : "+exppastefromClipboardBtn);
				System.out.println("Entry Page RC postingDetails Value Actual      :"+actpostingDetailsBtn+"     Value Expected : "+actpostingDetailsBtn);
				System.out.println("Entry Page RC export to XML Value Actual       :"+actexporttoXMLBtn+"        Value Expected : "+expexporttoXMLBtn);
				System.out.println("Entry Page RC  setting  Value Actual           :"+actsettingBtn+"            Value Expected : "+expsettingBtn);
				System.out.println("Entry Page RC calculator  Value Actual         :"+actcalculatorBtn+"         Value Expected : "+expcalculatorBtn);
				System.out.println("Entry Page RC auto Load Value Actual           :"+actautoLoadBtn+"           Value Expected : "+expautoLoadBtn);
				
				
				if(actCopyDocumentBtn==expCopyDocumentBtn && actcopytoClipboardBtn==expcopytoClipboardBtn 
						&& actpastefromClipboardBtn==exppastefromClipboardBtn && actpostingDetailsBtn==exppostingDetailsBtn 
						&& actexporttoXMLBtn==expexporttoXMLBtn && actsettingBtn==expsettingBtn &&actcalculatorBtn==expcalculatorBtn 
						&& actautoLoadBtn==expautoLoadBtn  )
				{
					System.out.println("Test Pass : Entry Page toggle  Options Are Displayed");
					//excelReader.setCellData(xlfile, xlSheetName, 11, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Entry Page  toggle  NOT Displayed");
					//excelReader.setCellData(xlfile, xlSheetName, 11, 9, resFail);
					return false;
				}
			}

		 	
		  
		  
		  
		  
		  
		  
		    
		    @FindBy(xpath="//li[@id='navigationtab2']//span[contains(text(),'Miscellaneous')]")
		    private static WebElement settingMiscellaneousTab;
		                   
		    @FindBy(xpath="//select[@id='misc_CurrencyAddCurrencyIn']")
		    private static WebElement miscAddCurrencyDropdown;

		    @FindBy(xpath="//input[@id='misc_currencyInputExchangeRate']")
		    private static WebElement miscInputExchangeRateChkbox;

		    @FindBy(xpath="//input[@id='misc_currencyInputLocalExchangeRate']")
		    private static WebElement miscInputLocalExchangeRateChkbox;

		    @FindBy(xpath="//select[@id='misc_arapDueDate']")
		    private static WebElement miscDueDateDropdown;

		    @FindBy(xpath="//i[@class='icon-update icon-font6']")
		    private static WebElement settingUpdateIcon;

		    @FindBy(xpath="//i[@class='icon-close icon-font6']")
		    private static WebElement settingCloseIcon;
		  
		  
		  
		  
		
		  
		  
		  
		  public boolean  checkCustomizationOptionInOpeningBalance() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		  {
		    	
		    	excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		    	
		    	
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingBtn));
				settingBtn.click();

				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingMiscellaneousTab));
				settingMiscellaneousTab.click();
				
				Thread.sleep(5000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscAddCurrencyDropdown));
				miscAddCurrencyDropdown.click();
			    Select Currency=new Select(miscAddCurrencyDropdown);
			    Currency.selectByVisibleText("Header");
			    
			    if(miscInputExchangeRateChkbox.isSelected()==false && miscInputLocalExchangeRateChkbox.isSelected()==false)
			    {
				    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscInputExchangeRateChkbox));
			        miscInputExchangeRateChkbox.click();
			        
				    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscInputLocalExchangeRateChkbox));
				    miscInputLocalExchangeRateChkbox.click();
			    }
			    
			    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingUpdateIcon));
			    settingUpdateIcon.click();
			    
			    
			    String expValidationMessage="Data saved successfully";
				
				String validationMessage=checkValidationMessage(expValidationMessage);

				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingCloseIcon));
				settingCloseIcon.click();
				
				if(validationMessage.startsWith(expValidationMessage))
				{
					System.out.println("****Test Pass : Data Updated Successfully*********");
					
					//excelReader.setCellData(xlfile, xlSheetName, 19, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("****Test Fail : Data  Not Updated Successfully*********");
					//excelReader.setCellData(xlfile, xlSheetName, 19, 9, resFail);
					
					return false;
				}
			}

		  
	  @FindBy(xpath="//input[@id='id_header_10']")
	  private static WebElement  voucherHeaderCurrency;

	  @FindBy(xpath="//input[@id='id_header_145']")
	  private static WebElement  voucherHeaderLocalExchangeRate;	
	  

		@FindBy(xpath="//div[contains(text(),'Account')]")
		private static WebElement vocBodyAccTxt;
		
		@FindBy(xpath="//label[@id='id_transactionentry_footer_panel_summary_value_18']")
		private static WebElement vocBodyDebitTxt;
		
		@FindBy(xpath="//div[contains(text(),'Credit')]")
		private static WebElement vocBodyCreditTxt;

		@FindBy(xpath="//div[contains(text(),'Reference')]")
		private static WebElement vocBodyReferenceTxt; 	
		
		@FindBy(xpath="//label[@id='id_transactionentry_footer_panel_summary_value_18']")
		private static WebElement vocFooterdebitAmount;
		
		@FindBy(xpath="//label[@id='id_transactionentry_footer_panel_summary_value_19']")
		private static WebElement vocFooterCreditAmount;
		
		@FindBy(xpath="//*[@id='id_transactionentry_footer_panel_summary_value_16']")
		private static WebElement vocJEFooterAmount;
		
		  
		 
			
			@FindBy(xpath="//input[@id='id_header_11']")
			private static WebElement  voucherHeaderExchangeRate;

	  
	  public boolean checkOpeningBalanceVoucherEntryPageHeaderFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	  {
	 		
	   excelReader=new ExcelReader(POJOUtility.getExcelPath());
	   xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	 	
	   try
	   {
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkUserFriendlyMessage();
					   
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			boolean actEntryPageHeaderFieldsDocNumber     = documentNumberTxt.isDisplayed();
			boolean actEntryPageHeaderFieldsDate          = dateTxt.isDisplayed();
			boolean actEntryPageHeaderFieldsCurrency      = voucherHeaderCurrency.isDisplayed();
			boolean actEntryPageHeaderFieldsExchangeRate  = voucherHeaderExchangeRate.isDisplayed();
			boolean actEntryPageHeaderFieldsdepartment    = departmentTxt.isDisplayed();
			boolean actEntryPageHeaderFieldsLocalExeRate  = voucherHeaderLocalExchangeRate.isDisplayed();
			boolean actEntryPageHeaderFieldsNarration     = openingBalance_NarrationTxt.isDisplayed();
			
			
			boolean expEntryPageHeaderFieldsDocNumber    = true;
			boolean expEntryPageHeaderFieldsDate         = true;
			boolean expEntryPageHeaderFieldsCurrency     = true;
			boolean expEntryPageHeaderFieldsdepartment   = true;
			boolean expEntryPageHeaderFieldsLocalExeRate = true;
			boolean expEntryPageHeaderFieldsNarration    = true;
			
			
			System.out.println("Entry Page DocNumber Actual:                      "+actEntryPageHeaderFieldsDocNumber+"      Value Expected : "+expEntryPageHeaderFieldsDocNumber);
			System.out.println("Entry Page EntryPageHeaderFieldsDate Actual        :"+actEntryPageHeaderFieldsDate+"         Value Expected : "+expEntryPageHeaderFieldsDate);
			System.out.println("Entry Page EntryPageHeaderFieldsCurrency Actual    :"+actEntryPageHeaderFieldsCurrency+"     Value Expected : "+expEntryPageHeaderFieldsCurrency);
			System.out.println("Entry Page EntryPageHeaderFieldsdepartment Actual  :"+actEntryPageHeaderFieldsdepartment+"   Value Expected : "+expEntryPageHeaderFieldsdepartment);
			System.out.println("Entry Page EntryPageHeaderFieldsLocalExeRate Actual:"+actEntryPageHeaderFieldsLocalExeRate+" Value Expected : "+expEntryPageHeaderFieldsLocalExeRate);
			System.out.println("Entry Page RC Jump To Footer Value Actual:          "+actEntryPageHeaderFieldsNarration+"    Value Expected : "+expEntryPageHeaderFieldsNarration);

			if(actEntryPageHeaderFieldsDocNumber==expEntryPageHeaderFieldsDocNumber && actEntryPageHeaderFieldsDate==expEntryPageHeaderFieldsDate 
					&& actEntryPageHeaderFieldsNarration==expEntryPageHeaderFieldsNarration && 
					actEntryPageHeaderFieldsCurrency==expEntryPageHeaderFieldsCurrency && actEntryPageHeaderFieldsdepartment==expEntryPageHeaderFieldsdepartment &&
					actEntryPageHeaderFieldsLocalExeRate==expEntryPageHeaderFieldsLocalExeRate)
			{
				System.out.println("Test Pass : entry Page Header Options Are Displayed");
			//	excelReader.setCellData(xlfile, xlSheetName, 12, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : entry Page NOT Displayed");
			//	excelReader.setCellData(xlfile, xlSheetName, 12, 9, resFail);
				return false;
			}
		  } 	
		  catch (NoSuchElementException nse)
		  {
		 	System.err.println("CATCH BLOCK : NO SUCH ELEMENT MESSAGE IS DISPLAY    :  " + nse.getMessage());
		 	return false;
		  }
		  catch(TimeoutException te)
		  {
		 	System.err.println("CATCH BLOCK : TIME OUT EXECPTION MESSAGE IS DISPLAY :  " + te.getMessage());
		 	return false;
		   }
		 }
		 		 	
		 	
	   public boolean checkOpeningBalanceVoucherEntryPageBodyFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	   {
	 	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	 	
	 	try
	 	{
	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));		
		
			boolean actEntryPageBodyAccTxt            = vocBodyAccTxt.isDisplayed();
			boolean actEntryPageBodyDebitTxt          = vocBodyDebitTxt.isDisplayed();
			boolean actEntryPageBodyCreditTxt         = vocBodyCreditTxt.isDisplayed();
			boolean actEntryPageBodyReferenceTxt      = vocBodyReferenceTxt.isDisplayed();
			boolean actEntryPageBodyFieldsAccount     = select1stRow_1stColumn.isDisplayed();
			boolean actEntryPageBodyFieldsDebit       = select1stRow_2ndColumn.isDisplayed();
			boolean actEntryPageBodyFieldscredit      = select1stRow_3rdColumn.isDisplayed();
			boolean actEntryPageBodyFieldsReference   = select1stRow_4thColumn.isDisplayed();
						
			boolean expEntryPageBodyAccTxt            = true;
			boolean expEntryPageBodyDebitTxt          = true;
			boolean expEntryPageBodyCreditTxt         = true;
			boolean expEntryPageBodyReferenceTxt      = true;
			boolean expEntryPageBodyFieldsAccount     = true;
			boolean expEntryPageBodyFieldsDebit       = true;
			boolean expEntryPageBodyFieldscredit      = true;
			boolean expEntryPageBodyFieldsReference   = true;

			System.out.println("************************************* checkOpeningBalanceNewEntryPageBodyFields  ********************************************");
			
			System.out.println("Entry Page Body Fields Account Txt Actual  : " + actEntryPageBodyAccTxt+          " Value Expected : " + expEntryPageBodyAccTxt);
			System.out.println("Entry Page Body Fields Debit Txt Actual    : " + actEntryPageBodyDebitTxt+        " Value Expected : " + expEntryPageBodyDebitTxt);
			System.out.println("Entry Page Body Fields Credit Txt Actual   : " + actEntryPageBodyCreditTxt+       " Value Expected : " + expEntryPageBodyCreditTxt);
			System.out.println("Entry Page Body Fields Ref Txt Actual      : " + actEntryPageBodyReferenceTxt+    " Value Expected : " + expEntryPageBodyReferenceTxt);	
			System.out.println("Entry Page Body Fields Account  Actual     : " + actEntryPageBodyFieldsAccount+   " Value Expected : " + expEntryPageBodyFieldsAccount);
			System.out.println("Entry Page Body Fields Debit   Actual      : " + actEntryPageBodyFieldsDebit+     " Value Expected : " + expEntryPageBodyFieldsDebit);
			System.out.println("Entry Page Body Fields Credit   Actual     : " + actEntryPageBodyFieldscredit+    " Value Expected : " + expEntryPageBodyFieldscredit);
			System.out.println("Entry Page Body Fields Ref  Actual         : " + actEntryPageBodyFieldsReference+ " Value Expected : " + expEntryPageBodyFieldsReference);
			
			if(actEntryPageBodyAccTxt==expEntryPageBodyAccTxt && actEntryPageBodyDebitTxt==expEntryPageBodyDebitTxt 
					&& actEntryPageBodyCreditTxt==expEntryPageBodyCreditTxt && actEntryPageBodyReferenceTxt==expEntryPageBodyReferenceTxt 
					&& actEntryPageBodyFieldsAccount==expEntryPageBodyFieldsAccount &&actEntryPageBodyFieldsDebit==expEntryPageBodyFieldsDebit  && 
					actEntryPageBodyFieldscredit==expEntryPageBodyFieldscredit && actEntryPageBodyFieldsReference==expEntryPageBodyFieldsReference)
			{
				System.out.println("Test Pass : entry Page Body Options Are Displayed");
				//excelReader.setCellData(xlfile, xlSheetName, 13, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : entry Page NOT Displayed");
				//excelReader.setCellData(xlfile, xlSheetName, 13, 9, resFail);
				return false;
			}
		 	}
		     catch (NoSuchElementException nse)
		     {
		 	 System.err.println("CATCH BLOCK : NO SUCH ELEMENT MESSAGE IS DISPLAY    :  " + nse.getMessage());
		 	 return false;
		     }
		     catch(TimeoutException te)
		     {
		 	  System.err.println("CATCH BLOCK : TIME OUT EXECPTION MESSAGE IS DISPLAY :  " + te.getMessage());
		 	  return false;
		     }
		   }
		 	
		 	
		 	
		 	
	 	public boolean checkOpeningBalanceVoucherEntryPageFooterFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	 	{
	 		
	 	  excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 	  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	 		
	 	  try
	 	  {
	 		excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	 		
	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vocFooterdebitAmount));
	 		
	 		boolean actEntryPagevocFooterdebitAmount  =vocFooterdebitAmount.isDisplayed();
	 		boolean actEntryPageFooterCreditAmount    =vocFooterCreditAmount.isDisplayed();

	 		boolean expEntryPagevocFooterdebitAmount  = true;
	 		boolean expEntryPageFooterCreditAmount    = true;

	 		System.out.println("*********************************** checkOpeningBalanceNewEntryPageFooterFields  ***************************************************");
	 		System.out.println("Entry Page Footer Fields Debit Amt Value Actual   : " + actEntryPagevocFooterdebitAmount + "   Value Expected : " + expEntryPagevocFooterdebitAmount);
	 		System.out.println("Entry Page Footer Fields Credit Amt  Value Actual : " + actEntryPageFooterCreditAmount   + "  Value Expected  : " + expEntryPageFooterCreditAmount);

	 				
	 		if(actEntryPagevocFooterdebitAmount==expEntryPagevocFooterdebitAmount && actEntryPageFooterCreditAmount==expEntryPageFooterCreditAmount)
	 		{
	 			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
	 			//excelReader.setCellData(xlfile, xlSheetName, 14, 9, resPass);
	 			return true;
	 		}
	 		else
	 		{
	 			System.out.println("Test Fail : entry Page NOT Displayed");
	 			//excelReader.setCellData(xlfile, xlSheetName, 14, 9, resFail);
	 			return false;
	 		}
	 	  }
	 	  catch (NoSuchElementException nse)
	 	  {
	 		 System.err.println("CATCH BLOCK : NO SUCH ELEMENT MESSAGE IS DISPLAY    :  " + nse.getMessage());
	 		 return false;
	 	  }
	 	  catch(TimeoutException te)
	 	  {
	 		  System.err.println("CATCH BLOCK : TIME OUT EXECPTION MESSAGE IS DISPLAY :  " + te.getMessage());
	 		  return false;
	 	  }
	 	}
	 	

	    public boolean checkOpeningBalanceVoucherDocumentNumber() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	    {
	 	  excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 	  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	 		
	 	  try
	 	  {
	 		
		 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		 		documentNumberTxt.click();
		 		
		 		String  actEntryPageGetDocumentNumberValue   = documentNumberTxt.getAttribute("value");
				String actCurrency                           = voucherHeaderCurrency.getAttribute("value");
				boolean  actDepartment                       = departmentTxt.getText().isEmpty();
				String actExchangeRate                       = voucherHeaderExchangeRate.getAttribute("value");
				String actLocalExchangeRate                  = voucherHeaderLocalExchangeRate.getAttribute("value");
				
				String expEntryPageGetDocumentNumberValue    = "1";
				String expCurrency                           = "INR";
				boolean expDepartment                        = true;
				String expExchangeRate                       = "1.0000000000";
				String expLocalExchangeRate                  = "0.0000000000";
				
				
				System.out.println("EntryPage DocumentNumberValue             : "+actEntryPageGetDocumentNumberValue +" Value Expected : "+expEntryPageGetDocumentNumberValue);
				System.out.println("EntryPage voucherHeaderCurrency           : "+actCurrency                        +" Value Expected : "+expCurrency);
				System.out.println("EntryPage departmentTxt                   : "+actDepartment                      +" Value Expected : "+expDepartment);
				System.out.println("EntryPage voucherHeaderExchangeRate       : "+actExchangeRate                    +" Value Expected : "+expExchangeRate);
				System.out.println("EntryPage voucherHeaderLocalExchangeRate  : "+actLocalExchangeRate               +" Value Expected : "+expLocalExchangeRate);
				
				
				
				if (actEntryPageGetDocumentNumberValue.equalsIgnoreCase(expEntryPageGetDocumentNumberValue) && 
						actCurrency.equalsIgnoreCase(expCurrency) && actDepartment==expDepartment && actExchangeRate.equalsIgnoreCase(expExchangeRate) && 
						actLocalExchangeRate.equalsIgnoreCase(expLocalExchangeRate))
		 		{
		 			System.out.println("Test Pass : Document No is 1");
		 			return true;
		 		}
		 		else
		 		{
		 			System.out.println("Test Fail : entry Page NOT Displayed");
		 			return false;
		 		}
		 	  }
		       catch (NoSuchElementException nse)
		       {
		 	    System.err.println("CATCH BLOCK : NO SUCH ELEMENT MESSAGE IS DISPLAY    :  " + nse.getMessage());
		 	    return false;
		       }
		       catch(TimeoutException te)
		       {
		 	    System.err.println("CATCH BLOCK : TIME OUT EXECPTION MESSAGE IS DISPLAY :  " + te.getMessage());
		 	    return false;
		       }
		    }
		 	
		 	
		 	
		   public boolean checkOpeningBalanceVoucherDateIsDisable() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		   { 
		 		
		 	excelReader=new ExcelReader(POJOUtility.getExcelPath());
		 	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		 		
		 	try
		 	{
		 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt_CalenderBtn));
		 		dateTxt_CalenderBtn.click();
		 			
		 		boolean actEntryPageGetDatePickerValue  = calender_TodayBtn.isDisplayed();

		 		boolean expEntryPageGetDatePickerValue  = false;

		 		System.out.println("Entry Page Date Calender Value Actual  : " + actEntryPageGetDatePickerValue + "  Value Expected : " + expEntryPageGetDatePickerValue);
		 			
		 		Thread.sleep(3000);
		 		
		 		if(actEntryPageGetDatePickerValue==expEntryPageGetDatePickerValue)
		 		{
		 			System.out.println("Test Pass : Calender Opened");
		 			return true;
		 		}
		 		else
		 		{
		 			System.out.println("Test Pass : Date is 08/26/2019");
		 			return false;
		 		}
		 	
		 	 }
		     catch (NoSuchElementException nse)
		     {
		 	  System.err.println("CATCH BLOCK : NO SUCH ELEMENT MESSAGE IS DISPLAY    :  " + nse.getMessage());
		 	  return false;
		     }
		     catch(TimeoutException te)
		     {
		 	   System.err.println("CATCH BLOCK : TIME OUT EXECPTION MESSAGE IS DISPLAY :  " + te.getMessage());
		 	   return false;
		     }
		   }
		 	
		 	
	 	
	   public boolean checkOpeningBalanceVoucherSaveWithoutMandatoryFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	   {
	 		
	 	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	 	
	      try
	      {	
		     	 
		     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
		  		wareHouseTxt.click();
		     	 
		 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		 		saveBtn.click();
		 			
		 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessage));
		 		
		 		String actGetWarehouseValidationMessage    = errorMessage.getText();
		 		String expGetWarehouseValidationMessageOne = "Controls marked with arrow mark, require Values";
		 		String expGetWarehouseValidationMessageTwo = "Main -> Department";
		 		
		 		String expGetWH = "Controls marked with arrow mark, require Values";
		 		
		 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
		 		errorMessageCloseBtn.click();
		 		
		 		System.out.println("Entry Page voucher Mandatory Validation Value Actual  : " + actGetWarehouseValidationMessage + "  Value Expected : " + expGetWarehouseValidationMessageOne+expGetWarehouseValidationMessageTwo);
		 		
		 		if(actGetWarehouseValidationMessage.startsWith(expGetWarehouseValidationMessageOne) && actGetWarehouseValidationMessage.endsWith(expGetWarehouseValidationMessageTwo))
		 		{
		 			
		 			return true;
		 		}
		 		else
		 		{	
		 			
		 			return false;
		 		}
		      }
		      catch (NoSuchElementException nse)
		      {
		 	   System.err.println("CATCH BLOCK : NO SUCH ELEMENT MESSAGE IS DISPLAY    :  " + nse.getMessage());
		 	   return false;
		      }
		      catch(TimeoutException te)
		      {
		 	    System.err.println("CATCH BLOCK : TIME OUT EXECPTION MESSAGE IS DISPLAY :  " + te.getMessage());
		 	    return false;
		      }	
		   }
		   
		  
		 
		  
	   public boolean checkCurrencyInOpeningBalanceVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	   {
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
			voucherHeaderCurrency.click();
			
			voucherHeaderCurrency.sendKeys(Keys.SHIFT,Keys.HOME);
			
			voucherHeaderCurrency.sendKeys(Keys.SPACE);
			
			Thread.sleep(2000);
			
			int currencycount=currencyListCount.size();
			
			System.err.println(currencycount);
				
			for(int i=0 ; i < currencycount ;i++)
			{
				System.out.println("Entered Currency Combo Box ");
				
				String data=currencyListCount.get(i).getText();
				
				System.out.println("DATA  :"+data);
				
				if(data.equalsIgnoreCase("USD"))
				{
					currencyListCount.get(i).click();
					
					break;
				}
			}
				
			voucherHeaderCurrency.sendKeys(Keys.TAB);

			
			//Need to modifying 
			
			
			Thread.sleep(2000);
			
			
	             voucherHeaderCurrency.sendKeys(Keys.TAB);
	             
	             voucherHeaderExchangeRate.click();
	             
	             String actExchangeRate=voucherHeaderExchangeRate.getAttribute("value");
	             String expExchangeRate="40.0000000000";                
	             
	             System.out.println("voucherHeaderExchangeRate : "+actExchangeRate+" Value Expected : "+expExchangeRate);
	             
	             
	             if (actExchangeRate.equalsIgnoreCase(expExchangeRate) )
	                {
	                             System.out.println("Test Pass : Exchange Rate Is Updated ");
	                             return true;
	                     }
	                     else
	                     {
	                             System.out.println("Test Fail :  Exchange Rate Is  NOt Updated ");
	                             return false;
	                     }        

		}

		  
		@FindBy(xpath="//*[@id='id_header_10_table_body']/tr")
		private static List<WebElement> openingBalCurrencyList;
		  
		  
		  
	   public boolean checkExchangeRateWithCurrencyAEDInOpeningBalance() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	     {
	             
	             excelReader=new ExcelReader(POJOUtility.getExcelPath());
	             xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	             
	             getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
	             voucherHeaderCurrency.click();
	             voucherHeaderCurrency.sendKeys(Keys.SHIFT,Keys.HOME);
	             voucherHeaderCurrency.sendKeys(Keys.SPACE);
			
			     int openingBalCurrencyListCount=openingBalCurrencyList.size();
				
				 for (int i = 0; i < openingBalCurrencyListCount; i++) 
			 	 {
					String data=openingBalCurrencyList.get(i).getText();
					
					if (data.equalsIgnoreCase("AED"))
					{
						openingBalCurrencyList.get(i).click();
						break;
					}
			 	 }
	             
	             voucherHeaderCurrency.sendKeys(Keys.TAB);
	             
	             voucherHeaderExchangeRate.click();
	             
	             String actExchangeRate=voucherHeaderExchangeRate.getAttribute("value");
	             String expExchangeRate="9.0000000000";                
	             
	             System.out.println("voucherHeaderExchangeRate : "+actExchangeRate+" Value Expected : "+expExchangeRate);
	                          
	             if (actExchangeRate.equalsIgnoreCase(expExchangeRate) )
	                {
	                             System.out.println("Test Pass : Exchange Rate Is Updated ");
	                             return true;
	                     }
	                     else
	                     {
	                             System.out.println("Test Fail :  Exchange Rate Is  NOt Updated ");
	                             return false;
	                     }        
	     }
	     
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
	   @FindBy(xpath="//*[@id='id_header_268435459_table_body']/tr")
		private static List<WebElement> openingBalDepartmentList;
	 
	 public boolean checkExchangeRateAndLocalExchangeReateWithCurrencyAEDInOpeningBalance() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
     {
            
            excelReader=new ExcelReader(POJOUtility.getExcelPath());
            xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
            
            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
            departmentTxt.click();
            departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME);
            departmentTxt.sendKeys(Keys.SPACE);
		
               
            WebElement options=departmentTxt;
    		
            int openingBalDepartmentListCount=openingBalDepartmentList.size();
            
    		ArrayList<String> actDepartmentList= new ArrayList<String>(); 
    	
    		actDepartmentList.add("AMERICA");
    	    
    		actDepartmentList.add("DUBAI");
    	    
    		actDepartmentList.add("INDIA");
    	   
    		actDepartmentList.add("WALES");   		    
    	    
    		ArrayList<String> 
    		
    		expDepartmentList = new ArrayList<String>(); 

    		int count=openingBalDepartmentList.size();
    		
    		System.err.println(count);
    		
    		for(int i=0 ; i < count ;i++)
    		{
    			String data=openingBalDepartmentList.get(i).getAttribute("data-name");
    			System.err.println("IN FOR LOOP : "+data);
    			expDepartmentList.add(data);
    			
    		}
    		
    		System.err.println(expDepartmentList);
    		
    		
    		System.out.println("actDepartmentList"+actDepartmentList);
    		
    		System.out.println("expDepartmentList"+expDepartmentList);
    		
    		boolean actDepartmentValue=actDepartmentList.equals(expDepartmentList);
    		boolean expDepartmentValue=true;
            
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
            departmentTxt.click();
            departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME);
            departmentTxt.sendKeys(Keys.SPACE);
  		
			
			 for (int i = 0; i < openingBalDepartmentListCount; i++) 
		 	 {
				String data=openingBalDepartmentList.get(i).getText();
				
				if (data.equalsIgnoreCase("INDIA"))
				{
					openingBalDepartmentList.get(i).click();
					break;
				}
		 	 }
            
			 Thread.sleep(2000);
			 
			 departmentTxt.sendKeys(Keys.TAB);
       
			 Thread.sleep(2000);
            
            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
            voucherHeaderCurrency.click();
            voucherHeaderCurrency.sendKeys(Keys.SHIFT,Keys.HOME);
            voucherHeaderCurrency.sendKeys(Keys.SPACE);
		
		     int openingBalCurrencyListCount=openingBalCurrencyList.size();
			
			 for (int i = 0; i < openingBalCurrencyListCount; i++) 
		 	 {
				String data=openingBalCurrencyList.get(i).getText();
				
				if (data.equalsIgnoreCase("AED"))
				{
					openingBalCurrencyList.get(i).click();
					break;
				}
		 	 }
            
            voucherHeaderCurrency.sendKeys(Keys.TAB);
                 
            String actExchangeRate=voucherHeaderExchangeRate.getAttribute("value");
            String expExchangeRate="9.0000000000";
            
            String actLocExchangeRate=voucherHeaderLocalExchangeRate.getAttribute("value");
            String expLocExchangeRate="1.0000000000";
            
            
            System.out.println("voucherHeaderExchangeRate      : "+actExchangeRate+" Value Expected : "+expExchangeRate);
            System.out.println("voucherHeaderLocalExchangeRate : "+actLocExchangeRate+" Value Expected : "+expLocExchangeRate);
            
            if (actExchangeRate.equalsIgnoreCase(expExchangeRate) && actLocExchangeRate.equalsIgnoreCase(expLocExchangeRate) 
            		&& actDepartmentValue==expDepartmentValue)
               {
                            System.out.println("Test Pass : Exchange Rate Is Updated ");
                            return true;
                    }
                    else
                    {
                            System.out.println("Test Fail :  Exchange Rate Is  NOt Updated ");
                            return false;
                    }        
    			}
    

	 public boolean checkExchangeRateAndLocalExchangeReateWithCurrencyUSDInOpeningBalance() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
     {
            excelReader=new ExcelReader(POJOUtility.getExcelPath());
            xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
            
            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
            voucherHeaderCurrency.click();
            voucherHeaderCurrency.sendKeys(Keys.SHIFT,Keys.HOME);
            voucherHeaderCurrency.sendKeys(Keys.SPACE);
		
		     int openingBalCurrencyListCount=openingBalCurrencyList.size();
			
			 for (int i = 0; i < openingBalCurrencyListCount; i++) 
		 	 {
				String data=openingBalCurrencyList.get(i).getText();
				
				if (data.equalsIgnoreCase("USD"))
				{
					openingBalCurrencyList.get(i).click();
					break;
				}
		 	 }
            
            voucherHeaderCurrency.sendKeys(Keys.TAB);
            
            String actExchangeRate=voucherHeaderExchangeRate.getAttribute("value");
            String expExchangeRate="40.0000000000";
            
            String actLocExchangeRate=voucherHeaderLocalExchangeRate.getAttribute("value");
            String expLocExchangeRate="4.2800000000";
           
            System.out.println("voucherHeaderExchangeRate      : "+actExchangeRate+" Value Expected : "+expExchangeRate);
            System.out.println("voucherHeaderLocalExchangeRate : "+actLocExchangeRate+" Value Expected : "+expLocExchangeRate);
            
            if (actExchangeRate.equalsIgnoreCase(expExchangeRate) && actLocExchangeRate.equalsIgnoreCase(expLocExchangeRate) )
               {
                            System.out.println("Test Pass : Exchange Rate Is Updated ");
                            return true;
                    }
                    else
                    {
                            System.out.println("Test Fail :  Exchange Rate Is  NOt Updated ");
                            return false;
                    }        
    }

	 
	 public boolean checkExchangeRateAndLocalExchangeRateWithCurrencyINRInOpeningBalance() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
     {
            excelReader=new ExcelReader(POJOUtility.getExcelPath());
            xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
            
            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
            voucherHeaderCurrency.click();
            voucherHeaderCurrency.sendKeys(Keys.SHIFT,Keys.HOME);
            voucherHeaderCurrency.sendKeys(Keys.SPACE);
		
		     int openingBalCurrencyListCount=openingBalCurrencyList.size();
			
			 for (int i = 0; i < openingBalCurrencyListCount; i++) 
		 	 {
				String data=openingBalCurrencyList.get(i).getText();
				
				if (data.equalsIgnoreCase("INR"))
				{
					openingBalCurrencyList.get(i).click();
					break;
				}
		 	 }
            
            voucherHeaderCurrency.sendKeys(Keys.TAB);
            
            String actExchangeRate=voucherHeaderExchangeRate.getAttribute("value");
            String expExchangeRate="1.0000000000";
            
            String actLocExchangeRate=voucherHeaderLocalExchangeRate.getAttribute("value");
            String expLocExchangeRate="0.0700000000";
            
            System.out.println("voucherHeaderExchangeRate      : "+actExchangeRate+" Value Expected : "+expExchangeRate);
            System.out.println("voucherHeaderLocalExchangeRate : "+actLocExchangeRate+" Value Expected : "+expLocExchangeRate);   
            
            if (actExchangeRate.equalsIgnoreCase(expExchangeRate) && actLocExchangeRate.equalsIgnoreCase(expLocExchangeRate) )
            {
                    System.out.println("Test Pass : Exchange Rate Is Updated ");
                    return true;
             }
             else
             {
                    System.out.println("Test Fail :  Exchange Rate Is  NOt Updated ");
                    return false;
             }        
    }
	  
		  
		 
			
			
			
		  
	 public boolean checkSavingVoucherWithCustomerACurrencyINRDepartmentINDIALessThanAccountinDate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	 {
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
		    xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
						
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
			voucherHeaderCurrency.sendKeys(Keys.BACK_SPACE);
			
			int currencycount=currencyListCount.size();
			
			System.err.println(currencycount);
				
			for(int i=0 ; i < currencycount ;i++)
			{
				String data=currencyListCount.get(i).getText();
				
				System.err.println(data);
				
				if(data.equalsIgnoreCase("INR"))
				{
					currencyListCount.get(i).click();
					
					break;
				}
			}
				
			voucherHeaderCurrency.sendKeys(Keys.TAB);
				
	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
				
			int departmentcount=openingBalDepartmentList.size();
			
			System.err.println(departmentcount);
				
			for(int i=0 ; i < departmentcount ;i++)
			{
				String data=openingBalDepartmentList.get(i).getAttribute("data-name");
				
				if(data.equalsIgnoreCase("INDIA"))
				{
					openingBalDepartmentList.get(i).click();
					
					break;
				}
			}
				
			departmentTxt.sendKeys(Keys.TAB);
		
			
			
			
			
			
			//First Row
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
			enter_AccountTxt.click();
			enter_AccountTxt.sendKeys("W");
			
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOfAllElements(openingBalAccountListInGrid));
			int accountCount=openingBalAccountListInGrid.size();
			
			System.err.println(accountCount);
				
			for(int i=0 ; i < accountCount ;i++)
			{
				String data=openingBalAccountListInGrid.get(i).getText();
				Thread.sleep(2000);
				
				if(data.equalsIgnoreCase("WA COGS ACC INV"))
				{
					getFluentWebDriverWait().until(ExpectedConditions.visibilityOfAllElements(openingBalAccountListInGrid));
					openingBalAccountListInGrid.get(i).click();
					
					break;
				}
			}
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));	
			enter_AccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_DebitTxt));
			enter_DebitTxt.sendKeys("100");
			enter_DebitTxt.sendKeys(Keys.TAB);
			
			enter_OBCreditACTxt.sendKeys(Keys.TAB);
			
			
			
			//Second Row
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
			select2ndRow_1stColumn.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
			enter_AccountTxt.click();
			enter_AccountTxt.sendKeys("F");
			
			//int accountCount=openingBalAccountListInGrid.size();
			
			System.err.println(accountCount);
				
			for(int i=0 ; i < accountCount ;i++)
			{
				String data=openingBalAccountListInGrid.get(i).getText();
				
				if(data.equalsIgnoreCase("FIFO COGS ACC INV"))
				{
					openingBalAccountListInGrid.get(i).click();
					
					break;
				}
			}
			
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
			enter_AccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_DebitTxt));
			enter_DebitTxt.sendKeys("100");
		    enter_DebitTxt.sendKeys(Keys.TAB);
			
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_OBCreditACTxt));
			enter_OBCreditACTxt.sendKeys(Keys.TAB);
			
			
			
			//Third Row
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
			select3rdRow_1stColumn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
			enter_AccountTxt.click();
			enter_AccountTxt.sendKeys("BR");
			
			System.err.println(accountCount);
				
			for(int i=0 ; i < accountCount ;i++)
			{
				String data=openingBalAccountListInGrid.get(i).getText();
				
				if(data.equalsIgnoreCase("BR COGS ACC INV"))
				{
					openingBalAccountListInGrid.get(i).click();
					
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));	
			enter_AccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_DebitTxt));
			enter_DebitTxt.sendKeys("100");

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_DebitTxt));			
			enter_DebitTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_OBCreditACTxt));
			enter_OBCreditACTxt.sendKeys(Keys.TAB);
			
			
			
			
			//Fourth Row
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_1stColumn));
			select4thRow_1stColumn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));	
			enter_AccountTxt.click();
			enter_AccountTxt.sendKeys("ST");
			
			System.err.println(accountCount);
				
			for(int i=0 ; i < accountCount ;i++)
			{
			
				String data=openingBalAccountListInGrid.get(i).getText();
				
				if(data.equalsIgnoreCase("STD RATE COGS ACC INV"))
				{
					openingBalAccountListInGrid.get(i).click();
					
					break;
				}
			}
			
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));	
			enter_AccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_DebitTxt));	
			enter_DebitTxt.sendKeys("100");
			enter_DebitTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_OBCreditACTxt));
			enter_OBCreditACTxt.sendKeys(Keys.TAB);
		
			
	        //Fifth Row
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_1stColumn));
			select5thRow_1stColumn.click();
			Thread.sleep(2000);
			
			
			enter_AccountTxt.click();
			enter_AccountTxt.sendKeys("Customer B");
			
			System.err.println(accountCount);
				
			for(int i=0 ; i < accountCount ;i++)
			{
			
				String data=openingBalAccountListInGrid.get(i).getText();
				
				if(data.equalsIgnoreCase("Customer B"))
				{
					openingBalAccountListInGrid.get(i).click();
					
					break;
				}
			}
			
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));	
			enter_AccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_DebitTxt));	
			enter_DebitTxt.sendKeys(Keys.TAB);
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_OBCreditACTxt));
			enter_OBCreditACTxt.sendKeys("400");
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_OBCreditACTxt));
			enter_OBCreditACTxt.sendKeys(Keys.TAB);
			
				
			//Information Before Save
			
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			 
			String docno=documentNumberTxt.getAttribute("value");
			
			String actFooterCreditAmt=vocFooterCreditAmount.getText();
			String expFooterCreditAmt="400.00";
				
			System.out.println("Entry PAge Footer Credit Amount "  +actFooterCreditAmt +"  Value Expected  "+expFooterCreditAmt);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			
			String actPartyName = billRefPartyName.getText();
			String expPartyName = "Customer B (122-002) ";
			
			System.out.println("Bill wise Screen Cutomer Name "  + actPartyName + "  Value Expected  " + expPartyName);
			
			
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefAdjustBillsGrid));
				
			String actAdjustbills=billRefAdjustBillsGrid.getAttribute("data-totalrows");
			String expAdjustbills="0";
			
			String expBillNewReference                      ="0.00";
			String expBillTransactionCurrency               ="400.00";
			String expBillBaseCurrency                      ="400.00";
			String expBillLocalCurrency                     ="28.00";
			String expBillBalanceNewRefAmount               ="0.00";
			
	        String expbillRefAdjustAmountInTransCurency         ="0.00";
	        String expbillRefBalanceAmountAdjustInTrnasCurrency ="400.00";
	        

	        
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
	        String actBillNewReference                           = billRefNewReferenceTxt.getAttribute("value");
			String actBillTransactionCurrency                    = billRefTransactionCurency.getText();
			String actBillBaseCurrency                           = billRefBaseCurrency.getText();
			String actBillLocalCurrency                          = localCurrencyDhs.getText();
			String actBillBalanceNewRefAmount                    = balanceNewReferenceAmt.getText();
			

	        String actbillRefAdjustAmountInTransCurency         = billRefAdjustAmountInTransCurency.getText();
	        String actbillRefBalanceAmountAdjustInTrnasCurrency = billRefBalanceAmountAdjustInTrnasCurrency.getText();
	        
	        
	      
	      
	 		
	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
	 		billRefNewReferenceTxt.click();

	 		
	         
	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
	 		billRefPickIcon.click();
	        
	 		
	
	       
	    	
	        String expBillNewReferencePick                 ="400.00";
	 		String expBillTransactionCurrencyPick          ="400.00";
	 		String expBillBaseCurrencyPick                 ="400.00";
	 		String expBillLocalCurrencyPick                ="28.00";
	 		String expBillBalanceNewRefAmountPick          ="400.00";
	 		
	 
	        String expconversationRateBaseCurrencyRatePick  ="1";
	        String expconversationRateLocalCurrencyRatePick ="0.07";
	 		
	 
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
	      
	        String actBillNewReferencePick                   = billRefNewReferenceTxt.getAttribute("value");
	 		String actBillTransactionCurrencyPick            = billRefTransactionCurency.getText();
	 		String actBillBaseCurrencyPick                   = billRefBaseCurrency.getText();
	 		String actBillLocalCurrencyPick                  = localCurrencyDhs.getText();
	 		String actBillBalanceNewRefAmountPick            = balanceNewReferenceAmt.getText();
	 		
	 	    String actconversationRateBaseCurrencyRatePick   = conversationRateBaseCurrencyRate.getText();
	        String actconversationRateLocalCurrencyRatePick  = conversationRateLocalCurrencyRate.getText();
	 		
	    	
	        String actbillRefAdjustAmountInTransCurencyPick          = billRefAdjustAmountInTransCurency.getText();
	        String actbillRefBalanceAmountAdjustInTrnasCurrencyPick  = billRefBalanceAmountAdjustInTrnasCurrency.getText();
	      
	       
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
	        billRefOkBtn.click();
	        
	        
	        boolean savingVoucher=checkVoucherSavingMessage(docno);
	        
	        System.out.println("Bill reference Adjustment Bills  :"+ actAdjustbills+"                          "+ "expDate :"+expAdjustbills);
	        System.out.println("actBillNewReference :             "+ actBillNewReference +"                    "+ "expBillNewReference :"+expBillNewReference);
	        System.out.println("actBillTransactionCurrency       :"+ actBillTransactionCurrency + "            " + "expBillTransactionCurrency :"+expBillTransactionCurrency);
	        System.out.println("actBillBaseCurrency :             "+ actBillBaseCurrency + "                   " +"expBillBaseCurrency :"+expBillBaseCurrency);
	        System.out.println("actBillLocalCurrency :            "+ actBillLocalCurrency+ "                   " +"expBillLocalCurrency :"+expBillLocalCurrency);
	        System.out.println("actBillBalanceNewRefAmount :      "+ actBillBalanceNewRefAmount + "            " + "expBillBalanceNewRefAmount :"+expBillBalanceNewRefAmount);
	       
	        System.out.println("actbillRefAdjustAmountInTransCurency :"+ actbillRefAdjustAmountInTransCurency+ "       " +"expbillRefAdjustAmountInTransCurency :"+expbillRefAdjustAmountInTransCurency);
	        System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrency :"+ actbillRefBalanceAmountAdjustInTrnasCurrency + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrency :"+expbillRefBalanceAmountAdjustInTrnasCurrency);

	         
	       //////Pick
	        
	        System.out.println("actBillNewReferencePick :              "+ actBillNewReferencePick +"              "+ "expBillNewReferencePick :"+expBillNewReferencePick);
	        System.out.println("actBillTransactionCurrencyPick :       "+ actBillTransactionCurrencyPick + "     " + "expBillTransactionCurrencyPick :"+expBillTransactionCurrencyPick);
	        System.out.println("actBillBaseCurrencyPick :              "+ actBillBaseCurrencyPick + "            " + "expBillBaseCurrencyPick :"+expBillBaseCurrencyPick);
	        System.out.println("actBillLocalCurrencyPick :             "+ actBillLocalCurrency+ "                " +"expBillLocalCurrencyPick :"+expBillLocalCurrency);
	        System.out.println("actBillBalanceNewRefAmountPick :       "+ actBillBalanceNewRefAmountPick +        " " + "expBillBalanceNewRefAmountPick :"+expBillBalanceNewRefAmountPick);
	        System.out.println("actconversationRateBaseCurrRatePick:   "+ actconversationRateBaseCurrencyRatePick+ "  " +"expconversationRateBaseCurrencyRatePick :"+expconversationRateBaseCurrencyRatePick);
	        System.out.println("actconversationRateLocalCurRatePick :  "+ actconversationRateLocalCurrencyRatePick+ " " + "expconversationRateLocalCurrencyRatePick :"+expconversationRateLocalCurrencyRatePick);
	        
	      
	      
	        
	        System.out.println(" Voucher Saving Status             "+savingVoucher +"                     "+"True");
	        
	        
	        
	        if (actPartyName.equalsIgnoreCase(expPartyName) && actAdjustbills.equalsIgnoreCase(expAdjustbills) && savingVoucher==true && actBillNewReference.equalsIgnoreCase(expBillNewReference) && actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 
	 				actBillBaseCurrency.equalsIgnoreCase(expBillBaseCurrency) && actBillLocalCurrency.equalsIgnoreCase(expBillLocalCurrency) && 
	 				actBillBalanceNewRefAmount.equalsIgnoreCase(expBillBalanceNewRefAmount) && 
	 			     actbillRefAdjustAmountInTransCurency.equalsIgnoreCase(expbillRefAdjustAmountInTransCurency) &&
	 				actbillRefBalanceAmountAdjustInTrnasCurrency.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrency) && 
	 		        
	        		
	 		        actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) && actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) && 
					actBillBaseCurrencyPick.equalsIgnoreCase(expBillBaseCurrencyPick) && actBillLocalCurrencyPick.equalsIgnoreCase(expBillLocalCurrencyPick) && 
					actBillBalanceNewRefAmountPick.equalsIgnoreCase(expBillBalanceNewRefAmountPick) &&
					actconversationRateBaseCurrencyRatePick.equalsIgnoreCase(expconversationRateBaseCurrencyRatePick) && actconversationRateLocalCurrencyRatePick.equalsIgnoreCase(expconversationRateLocalCurrencyRatePick) && 
					actFooterCreditAmt.equalsIgnoreCase(expFooterCreditAmt))
	        {
	        	
	        	System.out.println("*********Opening Balance INR Adjusting Sales invoice of INR Entry partial*********************");
		        System.out.println(" Test Pass: Voucher SAved Successfully and Unsuspended Voucher is Dispalying in Billwise Screen ");
		        return true;
	        }
	        else
	        {
	        	System.out.println(" Test Fail:Voucher SAved Successfully and Unsuspended Voucher is Dispalying in Billwise Screen ");
	        	return false;
	        }
		}
			  
		  
		  
		  
		  
    
	 public boolean checkPreviousButtonInOpeningBalanceSavedVoucher() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	 {
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			


		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		    previousBtn.click();
		    
	        boolean loading=checkLoadingMessage();
	  		
	  		System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
	    	
	  		
	  		String actDocno               = documentNumberTxt.getAttribute("value");
	        String actCurrency            = voucherHeaderCurrency.getAttribute("value");
			String actDepartment          = departmentTxt.getAttribute("value");
	        String actExchangeRate        = voucherHeaderExchangeRate.getAttribute("value");
	        String actLocExchangeRate     = voucherHeaderLocalExchangeRate.getAttribute("value");
			
			String actR1Account           = select1stRow_1stColumn.getText();
			String actR1Debit             = select1stRow_2ndColumn.getText();

	        String actR2Account           = select2ndRow_1stColumn.getText();
			String actR2Debit             = select2ndRow_2ndColumn.getText();

	        String actR3Account           = select3rdRow_1stColumn.getText();
			String actR3Debit             = select3rdRow_2ndColumn.getText();

	        String actR4Account           = select4thRow_1stColumn.getText();
			String actR4Debit             = select4thRow_2ndColumn.getText();

	        String actR5Account           = select5thRow_1stColumn.getText();
			String actR5Credit            = select5thRow_3rdColumn.getText();
	        String actR5Ref               = select5thRow_4thColumn.getText();
	        
	    	String actFooterCreditAmt    =vocFooterCreditAmount.getText();
	    	 String actVoucherDebitAmt   = vocFooterdebitAmount.getText();
			
			String expDocno               ="1";
		    String expCurrency            ="INR";
			String expDepartment          ="INDIA";
	        String expExchangeRate        ="1.0000000000";
	        String expLocExchangeRate     ="0.0700000000";

			String expR1Account           ="WA COGS ACC INV";
			String expR1Debit             ="100.00";
			
	        String expR2Account           ="FIFO COGS ACC INV";
			String expR2Debit             ="100.00";

	        String expR3Account           ="BR COGS ACC INV";
			String expR3Debit             ="100.00";

	        String expR4Account           ="STD RATE COGS ACC INV";
			String expR4Debit             ="100.00";

	        String expR5Account           ="Customer B";
			String expR5Credit            ="400.00";
			String expR5Ref               ="New Reference";
			String expFooterCreditAmt     ="400.00";
	        String expVoucherDebitAmt     = "400.00";


			System.out.println("Entry Page Document Number    "+actDocno           +"  value Expected  "+expDocno);
			System.out.println("Entry Page Currency           "+actCurrency        +"  value Expected  "+expCurrency);
			System.out.println("Entry Page Department         "+actDepartment      +"  value Expected  "+expDepartment);
			System.out.println("Entry Page Exchange Rate      "+actExchangeRate    +"  value Expected  "+expExchangeRate);
			System.out.println("Entry Page Department         "+actLocExchangeRate +"  value Expected  "+expLocExchangeRate);

			System.out.println("Entry Page R1Account          "+actR1Account       +"  value Expected  "+expR1Account);
			System.out.println("Entry Page R2Account          "+actR2Account       +"  value Expected  "+expR2Account);
			System.out.println("Entry Page R3Account          "+actR3Account       +"  value Expected  "+expR3Account);
			System.out.println("Entry Page R4Account          "+actR4Account       +"  value Expected  "+expR4Account);
			System.out.println("Entry Page R5Account          "+actR5Account       +"  value Expected  "+expR5Account);
			System.out.println("Entry Page R1Debit            "+actR1Debit         +"  value Expected  "+expR1Debit);
			System.out.println("Entry Page R2Debit            "+actR2Debit         +"  value Expected  "+expR2Debit);
			System.out.println("Entry Page R3Debit            "+actR3Debit         +"  value Expected  "+expR3Debit);
			System.out.println("Entry Page R4Debit            "+actR4Debit         +"  value Expected  "+expR4Debit);
			System.out.println("Entry Page R5Credit           "+actR5Credit        +"  value Expected  "+expR5Credit);
			System.out.println("Entry Page R5Ref              "+actR5Ref           +"  value Expected  "+expR5Credit);
			
			System.out.println("Entry Page Debit Amount       "+actVoucherDebitAmt +"  value Expected  "+expVoucherDebitAmt);
			System.out.println("Entry Page Credit Amount      "+actFooterCreditAmt +"  value Expected  "+expFooterCreditAmt);
			
			
			
			if (loading==true && actDocno.equalsIgnoreCase(expDocno) && actCurrency.equalsIgnoreCase(expCurrency) &&actDepartment.equalsIgnoreCase(expDepartment) && 
					
					actExchangeRate.equalsIgnoreCase(expExchangeRate) && actLocExchangeRate.equalsIgnoreCase(expLocExchangeRate) && 
					
					actR1Account.equalsIgnoreCase(expR1Account) && actR1Debit.equalsIgnoreCase(expR1Debit) && 
					
					actR2Account.equalsIgnoreCase(expR2Account) && actR2Debit.equalsIgnoreCase(expR2Debit) && 
					actR3Account.equalsIgnoreCase(expR3Account) && actR3Debit.equalsIgnoreCase(expR3Debit) && 
					actR4Account.equalsIgnoreCase(expR4Account) && actR4Debit.equalsIgnoreCase(expR4Debit) && 
					
					actR5Account.equalsIgnoreCase(expR5Account) && actR5Credit.equalsIgnoreCase(expR5Credit) && 
					actR5Ref.equalsIgnoreCase(expR5Ref))
			{
				
				System.out.println(" Test Pass: Data Saved Successfully ");
				
				return true;
			}
			else 
			{
				System.out.println(" Test Pass: Data Saved Successfully ");
				
				return false;
			}
		}
		
		  
		  
		  
		  
	  // Delete Row In Billwise Row entry
	 
	   public boolean checkOpeningBalanceVoucherEditPreviousToDeleteRowBin() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	   {
		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
		
		 try
		 {
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fifthRowIndex));
			fifthRowIndex.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
			deleteRowBtn.click();
			
			
			boolean actColumnR5C1GetText=select5thRow_1stColumn.getText().isEmpty();
			System.out.println("actColumnR5C1GetText  :  "+actColumnR5C1GetText);
			boolean expColumnR5C1GetText  = true;
			
			boolean actColumnR5C2GetText=select5thRow_2ndColumn.getText().isEmpty();
			System.out.println("actColumnR5C2GetText  :  "+actColumnR5C2GetText);
			boolean expColumnR5C2GetText  = true;
			
			boolean actColumnR5C3GetText=select5thRow_3rdColumn.getText().isEmpty();
			System.out.println("actColumnR5C3GetText  :  "+actColumnR5C3GetText);
			boolean expColumnR5C3GetText  = true;
			
			System.out.println("Bin Column after Delete Row Value Actual     :  " + actColumnR5C1GetText +   " Value Expected : " + expColumnR5C1GetText);
			System.out.println("Bin Column after Delete Row Value Actual     :  " + actColumnR5C2GetText +   " Value Expected : " + expColumnR5C2GetText);
			System.out.println("Bin Column after Delete Row Value Actual     :  " + actColumnR5C3GetText +   " Value Expected : " + expColumnR5C3GetText);
			
			
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fourthRowIndex));
			fourthRowIndex.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(insertRowBtn));
			insertRowBtn.click();
			
			boolean actColumnR1GetText=select4thRow_1stColumn.getText().isEmpty();
			System.out.println("actColumnR1GetText  :  "+actColumnR1GetText);
			boolean expColumnR1GetText = true; 
			
			boolean actColumnR2GetText=select4thRow_2ndColumn.getText().isEmpty();
			System.out.println("actColumnR2GetText  :  "+actColumnR2GetText);
			boolean expColumnR2GetText = true;
			
			boolean actColumnR3GetText=select4thRow_3rdColumn.getText().isEmpty();
			System.out.println("actColumnR3GetText  :  "+actColumnR3GetText);
			boolean expColumnR3GetText = true;
			
			System.out.println("Bin Column after Delete Row Value Actual     :  " + actColumnR1GetText +   " Value Expected : " + expColumnR1GetText);
			System.out.println("Bin Column after Delete Row Value Actual     :  " + actColumnR2GetText +   " Value Expected : " + expColumnR2GetText);
			System.out.println("Bin Column after Delete Row Value Actual     :  " + actColumnR3GetText +   " Value Expected : " + expColumnR3GetText);
			
			
			if(actColumnR5C1GetText==expColumnR5C1GetText && actColumnR5C2GetText==expColumnR5C2GetText && actColumnR5C3GetText==expColumnR5C3GetText
					&& actColumnR1GetText==expColumnR1GetText && actColumnR2GetText==expColumnR2GetText && actColumnR3GetText==expColumnR3GetText)
			{
				System.out.println("Test Pass  deleted row Working  ");
				return true;
			}
			else
			{
				System.out.println("Test Fail Not Deleted Row");
				return false;
			}
		  }
		  catch (NoSuchElementException nse)
		  {
			 System.err.println("CATCH BLOCK : NO SUCH ELEMENT MESSAGE IS DISPLAY      :  " + nse.getMessage());
			 return false;
		  }
		  catch(TimeoutException te)
		  {
			  System.err.println("CATCH BLOCK : TIME OUT EXECPTION MESSAGE IS DISPLAY :  " + te.getMessage());
			  return false;
		  }
		}
		  
		  
	   public boolean checkOpeningBalanceVoucherEditPreviousUpdateRowAndSave() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	   {
		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
		
		 try
		 {
				//Fourth Row
			    int accountCount=openingBalAccountListInGrid.size();
				System.err.println(accountCount);	
			 
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_1stColumn));
				select4thRow_1stColumn.click();
				
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));	
								
				enter_AccountTxt.click();
				enter_AccountTxt.sendKeys("Customer B");
				
				Thread.sleep(2000);
				
				System.err.println(accountCount);
					
				for(int i=0 ; i < accountCount ;i++)
				{
				
					String data=openingBalAccountListInGrid.get(i).getText();
					
					if(data.equalsIgnoreCase("Customer B"))
					{
						openingBalAccountListInGrid.get(i).click();
						
						break;
					}
				}
				
					
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));	
				enter_AccountTxt.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_DebitTxt));	
				enter_DebitTxt.sendKeys(Keys.TAB);
						
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_OBCreditACTxt));
				enter_OBCreditACTxt.sendKeys("400");
						
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_OBCreditACTxt));
				enter_OBCreditACTxt.sendKeys(Keys.TAB);
				
					
				//Information Before Save
				
			    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
				 
				String docno=documentNumberTxt.getAttribute("value");
				
				String actFooterCreditAmt=vocFooterCreditAmount.getText();
				String expFooterCreditAmt="400.00";
					
				System.out.println("Entry PAge Footer Credit Amount "  +actFooterCreditAmt +"  Value Expected  "+expFooterCreditAmt);
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
				saveBtn.click();
				
				
				String actPartyName = billRefPartyName.getText();
				String expPartyName = "Customer B (122-002)";
				
				System.out.println("Bill wise Screen Cutomer Name "  + actPartyName + "  Value Expected  " + expPartyName);
				
				
			    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefAdjustBillsGrid));
					
				String actAdjustbills=billRefAdjustBillsGrid.getAttribute("data-totalrows");
				String expAdjustbills="0";
				
				String expBillNewReference                      ="0.00";
				String expBillTransactionCurrency               ="400.00";
				String expBillBaseCurrency                      ="400.00";
				String expBillLocalCurrency                     ="28.00";
				String expBillBalanceNewRefAmount               ="0.00";
				
		        String expbillRefAdjustAmountInTransCurency         ="0.00";
		        String expbillRefBalanceAmountAdjustInTrnasCurrency ="400.00";
		        

		        
		        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
		        String actBillNewReference                           = billRefNewReferenceTxt.getAttribute("value");
				String actBillTransactionCurrency                    = billRefTransactionCurency.getText();
				String actBillBaseCurrency                           = billRefBaseCurrency.getText();
				String actBillLocalCurrency                          = localCurrencyDhs.getText();
				String actBillBalanceNewRefAmount                    = balanceNewReferenceAmt.getText();
				

		        String actbillRefAdjustAmountInTransCurency         = billRefAdjustAmountInTransCurency.getText();
		        String actbillRefBalanceAmountAdjustInTrnasCurrency = billRefBalanceAmountAdjustInTrnasCurrency.getText();
		        
		        
		      
		      
		 		
		 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
		 		billRefNewReferenceTxt.click();

		 		
		         
		 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		 		billRefPickIcon.click();
		        
		 		
		
		       
		    	
		        String expBillNewReferencePick                 ="400.00";
		 		String expBillTransactionCurrencyPick          ="400.00";
		 		String expBillBaseCurrencyPick                 ="400.00";
		 		String expBillLocalCurrencyPick                ="28.00";
		 		String expBillBalanceNewRefAmountPick          ="400.00";
		 		
		 
		        String expconversationRateBaseCurrencyRatePick  ="1";
		        String expconversationRateLocalCurrencyRatePick ="0.07";
		 		
		 
		        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
		      
		        String actBillNewReferencePick                   = billRefNewReferenceTxt.getAttribute("value");
		 		String actBillTransactionCurrencyPick            = billRefTransactionCurency.getText();
		 		String actBillBaseCurrencyPick                   = billRefBaseCurrency.getText();
		 		String actBillLocalCurrencyPick                  = localCurrencyDhs.getText();
		 		String actBillBalanceNewRefAmountPick            = balanceNewReferenceAmt.getText();
		 		
		 	    String actconversationRateBaseCurrencyRatePick   = conversationRateBaseCurrencyRate.getText();
		        String actconversationRateLocalCurrencyRatePick  = conversationRateLocalCurrencyRate.getText();
		 		
		    	
		        String actbillRefAdjustAmountInTransCurencyPick          = billRefAdjustAmountInTransCurency.getText();
		        String actbillRefBalanceAmountAdjustInTrnasCurrencyPick  = billRefBalanceAmountAdjustInTrnasCurrency.getText();
		      
		       
		        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		        billRefOkBtn.click();
		        
		        
		        boolean savingVoucher=checkVoucherSavingMessage(docno);
		        
		        System.out.println("Bill reference Adjustment Bills  :"+ actAdjustbills+"                          "+ "expDate :"+expAdjustbills);
		        System.out.println("actBillNewReference :             "+ actBillNewReference +"                    "+ "expBillNewReference :"+expBillNewReference);
		        System.out.println("actBillTransactionCurrency       :"+ actBillTransactionCurrency + "            " + "expBillTransactionCurrency :"+expBillTransactionCurrency);
		        System.out.println("actBillBaseCurrency :             "+ actBillBaseCurrency + "                   " +"expBillBaseCurrency :"+expBillBaseCurrency);
		        System.out.println("actBillLocalCurrency :            "+ actBillLocalCurrency+ "                   " +"expBillLocalCurrency :"+expBillLocalCurrency);
		        System.out.println("actBillBalanceNewRefAmount :      "+ actBillBalanceNewRefAmount + "            " + "expBillBalanceNewRefAmount :"+expBillBalanceNewRefAmount);
		       
		        System.out.println("actbillRefAdjustAmountInTransCurency :"+ actbillRefAdjustAmountInTransCurency+ "       " +"expbillRefAdjustAmountInTransCurency :"+expbillRefAdjustAmountInTransCurency);
		        System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrency :"+ actbillRefBalanceAmountAdjustInTrnasCurrency + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrency :"+expbillRefBalanceAmountAdjustInTrnasCurrency);

		         
		       //////Pick
		        
		        System.out.println("actBillNewReferencePick :              "+ actBillNewReferencePick +"              "+ "expBillNewReferencePick :"+expBillNewReferencePick);
		        System.out.println("actBillTransactionCurrencyPick :       "+ actBillTransactionCurrencyPick + "     " + "expBillTransactionCurrencyPick :"+expBillTransactionCurrencyPick);
		        System.out.println("actBillBaseCurrencyPick :              "+ actBillBaseCurrencyPick + "            " + "expBillBaseCurrencyPick :"+expBillBaseCurrencyPick);
		        System.out.println("actBillLocalCurrencyPick :             "+ actBillLocalCurrency+ "                " +"expBillLocalCurrencyPick :"+expBillLocalCurrency);
		        System.out.println("actBillBalanceNewRefAmountPick :       "+ actBillBalanceNewRefAmountPick +        " " + "expBillBalanceNewRefAmountPick :"+expBillBalanceNewRefAmountPick);
		        System.out.println("actconversationRateBaseCurrRatePick:   "+ actconversationRateBaseCurrencyRatePick+ "  " +"expconversationRateBaseCurrencyRatePick :"+expconversationRateBaseCurrencyRatePick);
		        System.out.println("actconversationRateLocalCurRatePick :  "+ actconversationRateLocalCurrencyRatePick+ " " + "expconversationRateLocalCurrencyRatePick :"+expconversationRateLocalCurrencyRatePick);
		       	      
		        
		        System.out.println(" Voucher Saving Status             "+savingVoucher +"                     "+"True");
		        
		        
		        
		        if (actPartyName.equalsIgnoreCase(expPartyName) && actAdjustbills.equalsIgnoreCase(expAdjustbills) && savingVoucher==true && actBillNewReference.equalsIgnoreCase(expBillNewReference) && actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 
		 				actBillBaseCurrency.equalsIgnoreCase(expBillBaseCurrency) && actBillLocalCurrency.equalsIgnoreCase(expBillLocalCurrency) && 
		 				actBillBalanceNewRefAmount.equalsIgnoreCase(expBillBalanceNewRefAmount) && 
		 			     actbillRefAdjustAmountInTransCurency.equalsIgnoreCase(expbillRefAdjustAmountInTransCurency) &&
		 				actbillRefBalanceAmountAdjustInTrnasCurrency.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrency) && 
		 		        
		        		
		 		        actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) && actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) && 
						actBillBaseCurrencyPick.equalsIgnoreCase(expBillBaseCurrencyPick) && actBillLocalCurrencyPick.equalsIgnoreCase(expBillLocalCurrencyPick) && 
						actBillBalanceNewRefAmountPick.equalsIgnoreCase(expBillBalanceNewRefAmountPick) &&
						actconversationRateBaseCurrencyRatePick.equalsIgnoreCase(expconversationRateBaseCurrencyRatePick) && actconversationRateLocalCurrencyRatePick.equalsIgnoreCase(expconversationRateLocalCurrencyRatePick) && 
						actFooterCreditAmt.equalsIgnoreCase(expFooterCreditAmt))
		     
			{
				System.out.println("Test Pass  deleted row Working  ");
				return true;
			}
			else
			{
				System.out.println("Test Fail Not Deleted Row");
				return false;
			}
		  }
		  catch (NoSuchElementException nse)
		  {
			 System.err.println("CATCH BLOCK : NO SUCH ELEMENT MESSAGE IS DISPLAY      :  " + nse.getMessage());
			 return false;
		  }
		  catch(TimeoutException te)
		  {
			  System.err.println("CATCH BLOCK : TIME OUT EXECPTION MESSAGE IS DISPLAY :  " + te.getMessage());
			  return false;
		  }
		}
		  
		  
	   
	   public boolean checkSaveVoucherThroughCopyDocumentandSuspendVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	   {
		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
		
		 try
		 {
			 
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
				toggleBtn.click();
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(copyDocumentOption));	
				copyDocumentOption.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cd_FirstChkBox));
				cd_FirstChkBox.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cd_OkBtn));
				cd_OkBtn.click();
				
				checkUserFriendlyMessage();
					
				//Information Before Save
				
			    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
				 
				String docno=documentNumberTxt.getAttribute("value");
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
				saveBtn.click();
				
				
				String actPartyName = billRefPartyName.getText();
				String expPartyName = "Customer B (122-002)";
				
				System.out.println("Bill wise Screen Cutomer Name "  + actPartyName + "*  Value Expected  " + expPartyName);
				
				
			    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefAdjustBillsGrid));
					
				String actAdjustbills=billRefAdjustBillsGrid.getAttribute("data-totalrows");
				String expAdjustbills="0";
				
				String expBillNewReference                      ="0.00";
				String expBillTransactionCurrency               ="400.00";
				String expBillBaseCurrency                      ="400.00";
				String expBillLocalCurrency                     ="28.00";
				String expBillBalanceNewRefAmount               ="0.00";
				
		        String expbillRefAdjustAmountInTransCurency         ="0.00";
		        String expbillRefBalanceAmountAdjustInTrnasCurrency ="400.00";
		        

		        
		        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
		        String actBillNewReference                           = billRefNewReferenceTxt.getAttribute("value");
				String actBillTransactionCurrency                    = billRefTransactionCurency.getText();
				String actBillBaseCurrency                           = billRefBaseCurrency.getText();
				String actBillLocalCurrency                          = localCurrencyDhs.getText();
				String actBillBalanceNewRefAmount                    = balanceNewReferenceAmt.getText();
				

		        String actbillRefAdjustAmountInTransCurency         = billRefAdjustAmountInTransCurency.getText();
		        String actbillRefBalanceAmountAdjustInTrnasCurrency = billRefBalanceAmountAdjustInTrnasCurrency.getText();
		        
		        
		      
		      
		 		
		 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
		 		billRefNewReferenceTxt.click();

		 		
		         
		 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		 		billRefPickIcon.click();
		        
		 		
		
		       
		    	
		        String expBillNewReferencePick                 ="400.00";
		 		String expBillTransactionCurrencyPick          ="400.00";
		 		String expBillBaseCurrencyPick                 ="400.00";
		 		String expBillLocalCurrencyPick                ="28.00";
		 		String expBillBalanceNewRefAmountPick          ="400.00";
		 		
		 
		        String expconversationRateBaseCurrencyRatePick  ="1";
		        String expconversationRateLocalCurrencyRatePick ="0.07";
		 		
		 
		        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
		      
		        String actBillNewReferencePick                   = billRefNewReferenceTxt.getAttribute("value");
		 		String actBillTransactionCurrencyPick            = billRefTransactionCurency.getText();
		 		String actBillBaseCurrencyPick                   = billRefBaseCurrency.getText();
		 		String actBillLocalCurrencyPick                  = localCurrencyDhs.getText();
		 		String actBillBalanceNewRefAmountPick            = balanceNewReferenceAmt.getText();
		 		
		 	    String actconversationRateBaseCurrencyRatePick   = conversationRateBaseCurrencyRate.getText();
		        String actconversationRateLocalCurrencyRatePick  = conversationRateLocalCurrencyRate.getText();
		 		
		    	
		        String actbillRefAdjustAmountInTransCurencyPick          = billRefAdjustAmountInTransCurency.getText();
		        String actbillRefBalanceAmountAdjustInTrnasCurrencyPick  = billRefBalanceAmountAdjustInTrnasCurrency.getText();
		      
		       
		        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		        billRefOkBtn.click();
		        
		        
		        boolean savingVoucher=checkVoucherSavingMessage(docno);
		        
		        System.out.println("Bill reference Adjustment Bills  : "+ actAdjustbills             + " " + "expDate                    :"+expAdjustbills);
		        System.out.println("actBillNewReference              : "+ actBillNewReference        + " " + "expBillNewReference        :"+expBillNewReference);
		        System.out.println("actBillTransactionCurrency       : "+ actBillTransactionCurrency + " " + "expBillTransactionCurrency :"+expBillTransactionCurrency);
		        System.out.println("actBillBaseCurrency              : "+ actBillBaseCurrency        + " " +"expBillBaseCurrency         :"+expBillBaseCurrency);
		        System.out.println("actBillLocalCurrency             : "+ actBillLocalCurrency       + " " +"expBillLocalCurrency        :"+expBillLocalCurrency);
		        System.out.println("actBillBalanceNewRefAmount       : "+ actBillBalanceNewRefAmount + " " + "expBillBalanceNewRefAmount :"+expBillBalanceNewRefAmount);
		       
		        System.out.println("actbillRefAdjustAmountInTransCurency :"+ actbillRefAdjustAmountInTransCurency+ "       " +"expbillRefAdjustAmountInTransCurency :"+expbillRefAdjustAmountInTransCurency);
		        System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrency :"+ actbillRefBalanceAmountAdjustInTrnasCurrency + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrency :"+expbillRefBalanceAmountAdjustInTrnasCurrency);

		         
		       //////Pick
		        
		        System.out.println("actBillNewReferencePick              :  "+ actBillNewReferencePick                  + " " + "expBillNewReferencePick                  :"+expBillNewReferencePick);
		        System.out.println("actBillTransactionCurrencyPick       :  "+ actBillTransactionCurrencyPick           + " " + "expBillTransactionCurrencyPick           :"+expBillTransactionCurrencyPick);
		        System.out.println("actBillBaseCurrencyPick              :  "+ actBillBaseCurrencyPick                  + " " + "expBillBaseCurrencyPick                  :"+expBillBaseCurrencyPick);
		        System.out.println("actBillLocalCurrencyPick             :  "+ actBillLocalCurrency                     + " " + "expBillLocalCurrencyPick                 :"+expBillLocalCurrency);
		        System.out.println("actBillBalanceNewRefAmountPick       :  "+ actBillBalanceNewRefAmountPick           + " " + "expBillBalanceNewRefAmountPick           :"+expBillBalanceNewRefAmountPick);
		        System.out.println("actconversationRateBaseCurrRatePick  :  "+ actconversationRateBaseCurrencyRatePick  + " " + "expconversationRateBaseCurrencyRatePick  :"+expconversationRateBaseCurrencyRatePick);
		        System.out.println("actconversationRateLocalCurRatePick  :  "+ actconversationRateLocalCurrencyRatePick + " " + "expconversationRateLocalCurrencyRatePick :"+expconversationRateLocalCurrencyRatePick);
		       	      
		        
		        System.out.println(" Voucher Saving Status             "+savingVoucher +"                     "+"True");
		        
		        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		        previousBtn.click();
		        
		        checkUserFriendlyMessage();
		        
		        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		        new_SuspendBtn.click();
		        
		        boolean SuspendVoucher=checkVoucherSavingMessage(docno);
		        
		        if (actPartyName.equalsIgnoreCase(expPartyName) && actAdjustbills.equalsIgnoreCase(expAdjustbills) && savingVoucher==true && actBillNewReference.equalsIgnoreCase(expBillNewReference) && actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 
		 				actBillBaseCurrency.equalsIgnoreCase(expBillBaseCurrency) && actBillLocalCurrency.equalsIgnoreCase(expBillLocalCurrency) && 
		 				actBillBalanceNewRefAmount.equalsIgnoreCase(expBillBalanceNewRefAmount) && 
		 			     actbillRefAdjustAmountInTransCurency.equalsIgnoreCase(expbillRefAdjustAmountInTransCurency) &&
		 				actbillRefBalanceAmountAdjustInTrnasCurrency.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrency) && 
		 		        
		        		
		 		        actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) && actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) && 
						actBillBaseCurrencyPick.equalsIgnoreCase(expBillBaseCurrencyPick) && actBillLocalCurrencyPick.equalsIgnoreCase(expBillLocalCurrencyPick) && 
						actBillBalanceNewRefAmountPick.equalsIgnoreCase(expBillBalanceNewRefAmountPick) &&
						actconversationRateBaseCurrencyRatePick.equalsIgnoreCase(expconversationRateBaseCurrencyRatePick) && actconversationRateLocalCurrencyRatePick.equalsIgnoreCase(expconversationRateLocalCurrencyRatePick)
						
		        		&& SuspendVoucher==true)
		     
			{
				System.out.println("Test Pass  deleted row Working  ");
				return true;
			}
			else
			{
				System.out.println("Test Fail Not Deleted Row");
				return false;
			}
		  }
		  catch (NoSuchElementException nse)
		  {
			 System.err.println("CATCH BLOCK : NO SUCH ELEMENT MESSAGE IS DISPLAY      :  " + nse.getMessage());
			 return false;
		  }
		  catch(TimeoutException te)
		  {
			  System.err.println("CATCH BLOCK : TIME OUT EXECPTION MESSAGE IS DISPLAY :  " + te.getMessage());
			  return false;
		  }
		}
		  
		  
		 SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
	   */
	   // Purchase Voucher N
	   
	  /* @FindBy(xpath="//a[@id='2050']//span[contains(text(),'Purchase Vouchers N')]")
		private static WebElement  purchaseVoucherNew;
		
		@FindBy(xpath="//*[@id='id_transaction_viewcontainer']/li[1]/a")
		private static WebElement  homePageAllVouchersView;
		
		@FindBy(xpath="//a[contains(text(),'*Pending Authorization Purchase')]")
		private static WebElement  homePagePendingAuthorizationView;
		
		@FindBy(xpath="//a[contains(text(),'Pending Purchases Orders')]")
		private static WebElement  homePagePendingOrdersLinks;
		
		@FindBy(xpath="//*[@id='2059']/span")
		private static WebElement  purchaseVouchersVat;

		@FindBy(xpath="//*[@id='2060']/span")
		private static WebElement  purchaseReturnsVouchersVat;*/
	   
		
		
		
		
				
	   
	  
			//Purchase Voucher New 
		   //To Check Master and Transaction Authorization
			
			  
		
			
			
			
			
			@FindBy(xpath="//input[@id='id_header_20']")
			private static WebElement  voucherUpdateStocksCheckBox;
			
			@FindBy(xpath="//input[@id='id_header_21']")
			private static WebElement  voucherRaiseReceiptCheckBox;
			
			@FindBy(xpath="//input[@id='id_header_6']")
			private static WebElement  voucherHeaderDueDate;
		
		    /*@FindBy(xpath="//input[@id='id_header_67108924']")
			private static WebElement  purchaseVoucherNewNarration;*/
			
			@FindBy(xpath="//input[@id='id_header_67108932']")
			private static WebElement  purchaseVoucherNewNarration;

			/*@FindBy(xpath="//input[@id='id_header_67108931']")
			private static WebElement  purchaseVoucherNewTest;*/
			
			@FindBy(xpath="//ul[@id='searchedLiTrans']//label[contains(@class,'theme_icon-color')][contains(text(),'Document Info')]")
			private static WebElement  searchDocumentInfo;
			
			@FindBy(xpath="//div[@id='dashlate0']")
			private static WebElement  addCreateDashlet;
			
			@FindBy(xpath="//div[@id='DBdashlate0']")
			private static WebElement  dashletI;
			
			@FindBy(xpath="//input[@id='id_footer_134217745']")
			private static WebElement  footerRDField;
			
			
			  @FindBy(xpath="//input[@id='id_header_10']")
			  private static WebElement  voucherHeaderCurrency;

			  @FindBy(xpath="//input[@id='id_header_145']")
			  private static WebElement  voucherHeaderLocalExchangeRate;	
			  

				@FindBy(xpath="//div[contains(text(),'Account')]")
				private static WebElement vocBodyAccTxt;
				
				@FindBy(xpath="//label[@id='id_transactionentry_footer_panel_summary_value_18']")
				private static WebElement vocBodyDebitTxt;
				
				@FindBy(xpath="//div[contains(text(),'Credit')]")
				private static WebElement vocBodyCreditTxt;

				@FindBy(xpath="//div[contains(text(),'Reference')]")
				private static WebElement vocBodyReferenceTxt; 	
				
				@FindBy(xpath="//label[@id='id_transactionentry_footer_panel_summary_value_18']")
				private static WebElement vocFooterdebitAmount;
				
				@FindBy(xpath="//label[@id='id_transactionentry_footer_panel_summary_value_19']")
				private static WebElement vocFooterCreditAmount;
				
				@FindBy(xpath="//input[@id='id_header_11']")
				private static WebElement  voucherHeaderExchangeRate;
	  
			
			
			
			@FindBy(xpath="//div[contains(text(),'Warehouse')]")
			private static WebElement voucherBodyWareHouseName;
			
			@FindBy(xpath="//div[contains(text(),'Item')]")
			private static WebElement voucherBodyItemName;
			
			@FindBy(xpath="//div[contains(text(),'Units')]")
			private static WebElement voucherBodyUnitsName;
			
			@FindBy(xpath="//div[contains(text(),'RD')]")
			private static WebElement  voucherBodyRDName;
			
			@FindBy(xpath="//div[contains(text(),'Avg Rate(O)')]")
			private static WebElement  voucherBodyAvgRateName;
			               
			@FindBy(xpath="//div[contains(text(),'Quantity')]")
			private static WebElement  voucherBodyQtyName;

			@FindBy(xpath="//div[contains(text(),'L-Purchases Orders')]")
			private static WebElement  voucherBodyLPOName;
			
			@FindBy(xpath="//div[contains(text(),'Rate')]")
			private static WebElement  povoucherBodyRateName;
			
			@FindBy(xpath="//th[@id='id_transaction_entry_detail_table_control_heading_14']//div[@class='no-select'][contains(text(),'Rate')]")
			private static WebElement  voucherBodyRateName;
			
			@FindBy(xpath="//div[contains(text(),'Gross')]")
			private static WebElement voucherBodyGrossName;
			
			@FindBy(xpath="//div[contains(text(),'Batch')]")
			private static WebElement voucherBodyBatchName;
			
			@FindBy(xpath="//div[contains(text(),'Bins')]")
			private static WebElement voucherBodyBinsName;
			
			@FindBy(xpath="//div[contains(text(),'Expiry Date')]")
			private static WebElement voucherBodyExpirytDateName;
			
			@FindBy(xpath="//div[contains(text(),'RMA')]")
			private static WebElement voucherBodyRMAName;
			
			@FindBy(xpath="//tbody[@id='id_transaction_entry_detail_table_body']")
			private static WebElement voucherBody;
			
			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_head']")
			private static WebElement bodyTable;
			
		    @FindBy(xpath="//*[@id='id_transaction_entry_detail_table_row_heading']/th[1]")
			private static WebElement voucherBodyHeaderIndex;
			
			
			
			
			
			
			

	  
	  

/*
			// Adding New vendor In vendor Account 

			@FindBy(xpath="//label[contains(text(),'Vendor Account')]")
			private static WebElement VendorAccountLabel;

			//Name
			@FindBy(xpath="//input[@id='sName']")
			public static WebElement nameTxt;

			//Code
			@FindBy(xpath="//input[@id='sCode']")
			public static WebElement codeTxt;

			//AccountType	
			@FindBy(xpath="//select[@id='iAccountType']")
			public static WebElement accountTypeDropdown;

			//AccountType	
			@FindBy(xpath="//input[@id='oc_Group']")
			public static WebElement account_groupTxt;

			//CreditLimit
			@FindBy(xpath="//input[@id='fCreditLimit']")
			public static WebElement creditLimitTxt;

			//CreditDays
			@FindBy(xpath="//input[@id='iCreditDays']")
			public static WebElement creditdaysTxt;

			//ChequeDiscountLimit
			@FindBy(xpath="//input[@id='fChequeDiscountLimit']")
			public static WebElement chequeDiscountLimitTxt;

			//Rate Of Interest
			@FindBy(xpath="//input[@id='fRateofinterest']")
			public static WebElement rateofinterestTxt;

			//BankAccount
			@FindBy(xpath="//input[@id='iBankAc']")
			public static WebElement bankAccountTxt;

			@FindBy(xpath="//*[@id='iBankAc_input_image']/span")
			public static WebElement bankAccount_ExpansionBtn;

			@FindBy(xpath="//*[@id='iBankAc_input_settings']/span")
			public static WebElement bankAccount_SettingBtn;

			@FindBy(xpath="//div[@id='GenerateNewMasterModel']//button[2]")
			public static WebElement account_saveBtn;

			@FindBy(xpath="//button[@class='btn-link theme_icon-color closeMasterPartial btnGenerateMasterclose clsMasterPopupSaveClose']")
			public static WebElement account_CloseBtn;

			 @FindBy(xpath="//a[contains(text(),'General')]")
			 private static WebElement account_GeneralTab;
				
			 @FindBy(xpath="//a[contains(text(),'Settings')]")
			 private static WebElement account_SettingsTab;
				 
			 @FindBy(xpath="//a[contains(text(),'Details')]")
			 private static WebElement account_DetailsTab;
				
			 @FindBy(xpath="//a[contains(text(),'Print Layout')]")
			 private static WebElement account_PrintLayout;
				
			 @FindBy(xpath="//a[contains(text(),'Tree Tab Update')]")
			 private static WebElement account_TreeTabUpdate;
				
			 @FindBy(xpath="//a[contains(text(),'Document Tab')]")
			 private static WebElement account_DocumentTab;
				
			 @FindBy(xpath="//a[contains(text(),'Create Tab')]")
			 private static WebElement account_CreateTab;

			 @FindBy(xpath="//*[@id='divBtnGroup6']/div/a")
			 private static WebElement account_VatSettingsTab;
			 
			 @FindBy(xpath="//*[@id='id_transactionentry_header1_section']/div/div[3]/div[3]/label")
			 private static WebElement accountClickOnVoucherEntryPage;
			
			
			@FindBy(xpath="//tbody[@id='id_header_4_table_body']/tr/td[2]")
			private static List<WebElement> vendorAccountListCount; 
			
			@FindBy(xpath="//tbody[@id='id_header_3_table_body']/tr/td[2]")
			private static List<WebElement> purchaseAccountListCount; 
			
			@FindBy(xpath="//tbody[@id='id_header_268435459_table_body']/tr/td[2]")
		    private static List<WebElement> departmentListCount;
			
*/			 
		    
		    //Starting Of PurchaseVoucher 
		    
			@FindBy(xpath="//span[contains(text(),'Purchase Voucher N')]")
			private static WebElement  purchaseVoucherNew;

			
			@FindBy(xpath="//*[@id='id_transaction_viewcontainer']/li[1]/a")
			private static WebElement  homePageAllVouchersView;
			
			@FindBy(xpath="//a[contains(text(),'*Pending Authorization Purchase')]")
			private static WebElement  homePagePendingAuthorizationView;
			
			@FindBy(xpath="//a[contains(text(),'Pending Purchases Orders')]")
			private static WebElement  homePagePendingOrdersLinks;
			
			
			/*@FindBy(xpath="//*[@id='2059']/span")
			private static WebElement  purchaseVouchersVat;
*/
			@FindBy(xpath="//span[contains(text(),'Purchase Voucher VAT')]")
			private static WebElement  purchaseVouchersVat;
			
			
			
			@FindBy(xpath="//span[contains(text(),'Purchases Returns VAT')]")
			private static WebElement  purchaseReturnsVouchersVat;
			
			/*@FindBy(xpath="//*[@id='2060']/span")
			private static WebElement  purchaseReturnsVouchersVat;
			*/
			 public static boolean checkFinancialsMenuTransactionsMenuPurchasesMenu() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			 {
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
					Thread.sleep(3000);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
					financialsMenu.click();
							
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
					financialsTransactionMenu.click();
						
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
					financialsTransactionsPurchaseMenu.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucher));
						
					boolean actFinancialPurchaseIsDisplay              = purchaseVoucher.isDisplayed();
			    	boolean actFinancialPurchaseReturnsIsDisplay       = purchaseReturnsVoucher.isDisplayed(); 	
			    	boolean actFinancialPurchaseVoucherNewIsDisplay    = purchaseVoucherNew.isDisplayed();
			    	boolean actFinancialPurchaseVouchersVatIsDisplay   = purchaseVouchersVat.isDisplayed();
			    	//boolean actFinancialPurchaseReturnsVatIsDisplay    = purchaseReturnsVouchersVat.isDisplayed();
			    	
			    	boolean expFinancialPurchaseIsDisplay              = true;
			    	boolean expFinancialPurchaseReturnsIsDisplay       = true; 	
			    	boolean expFinancialPurchaseVoucherNewIsDisplay    = true;
			    	boolean expFinancialPurchaseVouchersVatIsDisplay   = true;
			    	boolean expFinancialPurchaseReturnsVatIsDisplay    = true;
			    	
			    	
			    	System.out.println("FinancialPurchaseIsDisplay              : " + actFinancialPurchaseIsDisplay   +                "  Value Expected  " + expFinancialPurchaseIsDisplay);	
			    	System.out.println("FinancialPurchaseReturnsIsDisplay       : " + actFinancialPurchaseReturnsIsDisplay  +          "  Value Expected  " + expFinancialPurchaseReturnsIsDisplay); 	
			    	System.out.println("FinancialPurchaseVoucherNewIsDisplay    : " + actFinancialPurchaseVoucherNewIsDisplay   +      "  Value Expected  " + expFinancialPurchaseVoucherNewIsDisplay);	   
			     	System.out.println("FinancialPurchaseVouchersVatIsDisplay   : " + actFinancialPurchaseVouchersVatIsDisplay  +      "  Value Expected  " + expFinancialPurchaseVouchersVatIsDisplay); 	
			    	//System.out.println("FinancialPurchaseReturnsVatIsDisplay    : " + actFinancialPurchaseReturnsVatIsDisplay +        "  Value Expected  " + expFinancialPurchaseReturnsVatIsDisplay);			
					
			    	
			    	
			    	boolean actMethod=actFinancialPurchaseIsDisplay==expFinancialPurchaseIsDisplay && actFinancialPurchaseReturnsIsDisplay==expFinancialPurchaseReturnsIsDisplay
							   && actFinancialPurchaseVoucherNewIsDisplay==expFinancialPurchaseVoucherNewIsDisplay && actFinancialPurchaseVouchersVatIsDisplay==expFinancialPurchaseVouchersVatIsDisplay 
							   /*&& actFinancialPurchaseReturnsVatIsDisplay==expFinancialPurchaseReturnsVatIsDisplay*/;
			    	
			    	String actResult=Boolean.toString(actMethod);
			    	String expResult=excelReader.getCellData("PurchaseVoucherN", 10, 7);
					
		             excelReader.setCellData(xlfile, "PurchaseVoucherN", 10, 8, actResult.toUpperCase());

			    	
			    	
					if (actMethod==true) 
					{
						excelReader.setCellData(xlfile, "PurchaseVoucherN", 9, 9, resPass);
						return true;
					}
					else 
					{
						
						excelReader.setCellData(xlfile, "PurchaseVoucherN", 9, 9, resFail);
						return false;
					}
		            }
		            catch (Exception e) 
		  		   {
		  			  String exception =e.getMessage();
		  			  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 9, 10, exception);
		  			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  			  return false;
		  		   }
			 }
			
			 
			
			
			
			
			public boolean checkPurchaseVoucherNewHomePage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		    {
					
				    excelReader=new ExcelReader(POJOUtility.getExcelPath());
				    xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
			       try
			       {
				
			    	   Thread.sleep(2000);
				    
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
					purchaseVoucherNew.click();
					
					Thread.sleep(2000);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
					
					boolean actHomePageNewBtn                     = newBtn.isDisplayed();
					boolean actHomePageEditBtn                    = editBtn.isDisplayed();
					boolean actHomePagePrintBtn                   = printBtn.isDisplayed();
					boolean actHomePageDeleteBtn                  = deleteBtn.isDisplayed();
					boolean actHomePageAuthorizeBtn               = authorizeBtn.isDisplayed();
					boolean actHomePageSuspendBtn                 = suspendBtn.isDisplayed();
					boolean actHomePageRejectBtn                  = rejectBtn.isDisplayed();
					boolean actHomePagePrintBarcodeBtn            = printBarCodeBtn.isDisplayed();
					boolean actHomePageExportXMLBtn               = exportToXMLBtn.isDisplayed();
					boolean actHomePageSettingsBtn                = settingsBtn.isDisplayed();
					boolean actHomePageCloseBtn                   = homeCloseBtn.isDisplayed();
					boolean actHomePageGridCheckBox               = grid_HeaderChkBox.isDisplayed();
					boolean actHomePageSortingBtn                 = sortingBtn.isDisplayed();
					boolean actHomePageCreateViewBn               = createViewBtn.isDisplayed();
					boolean actHomePageCustomizeBtn   		      = customizeBtn.isDisplayed();
					boolean actHomePageFilterBtn     		      = filterBtn.isDisplayed();
					boolean actHomePageRefreshBtn    		      = refreshBtn.isDisplayed();
					boolean actHomePageOptionsBtn     		      = optionsBtn.isDisplayed();
					boolean actHomePageExportBtn                  = exportBtn.isDisplayed();
					
					boolean actHomePageAllVouchersView            = homePageAllVouchersView.isDisplayed();
					boolean actHomePagePendingAuthorizationView   = homePagePendingAuthorizationView.isDisplayed();
					boolean actHomePagePendingOrdersLinks         = homePagePendingOrdersLinks.isDisplayed();
					
					
					boolean expHomePageNewBtn                     = true;
					boolean expHomePageEditBtn                    = true;
					boolean expHomePagePrintBtn                   = true;
					boolean expHomePageDeleteBtn                  = true;
					boolean expHomePageAuthorizeBtn               = true;
					boolean expHomePageSuspendBtn                 = true;
					boolean expHomePageRejectBtn                  = true;
					boolean expHomePagePrintBarcodeBtn            = true;
					boolean expHomePageExportXMLBtn               = true;
					boolean expHomePageSettingsBtn                = true;
					boolean expHomePageCloseBtn                   = true;
					boolean expHomePageGridCheckBox               = true;
					boolean expHomePageSortingBtn                 = true;
					boolean expHomePageCreateViewBn               = true;
					boolean expHomePageCustomizeBtn               = true;
					boolean expHomePageFilterBtn                  = true;
					boolean expHomePageRefreshBtn                 = true;
					boolean expHomePageOptionsBtn                 = true;
					boolean expHomePageExportBtn                  = true;
					
					boolean expHomePageAllVouchersView            = true;
					boolean expHomePagePendingAuthorizationView   = true;
					boolean expHomePagePendingOrdersLinks         = true;
					
					
					System.out.println("************************************ checkPurchaseVoucherNewHomePage  *****************************************************");
					System.out.println("Home Page New Btn Value Actual           :"+actHomePageNewBtn                   +"    Value Expected : "+expHomePageNewBtn);
					System.out.println("Home Page Edit Btn Value Actual          :"+actHomePageEditBtn                  +"    Value Expected : "+expHomePageEditBtn);
					System.out.println("Home Page Print Btn Value Actual         :"+actHomePagePrintBtn                 +"	 Value Expected : "+expHomePagePrintBtn);
					System.out.println("Home Page Delete Btn Value Actual        :"+actHomePageDeleteBtn                +"	 Value Expected : "+expHomePageDeleteBtn);
					System.out.println("Home Page Authorize Btn Value Actual     :"+actHomePageAuthorizeBtn             +"	 Value Expected : "+expHomePageAuthorizeBtn);
					System.out.println("Home Page Suspend Btn Value Actual       :"+actHomePageSuspendBtn               +"	 Value Expected : "+expHomePageSuspendBtn);
					System.out.println("Home Page Reject Btn Value Actual        :"+actHomePageRejectBtn                +"	 Value Expected : "+expHomePageRejectBtn);
					System.out.println("Home Page Print Barcode Btn Value Actual :"+actHomePagePrintBarcodeBtn          +"	 Value Expected : "+expHomePagePrintBarcodeBtn);
					System.out.println("Home Page Export XML Btn Value Actual    :"+actHomePageExportXMLBtn             +"	 Value Expected : "+expHomePageExportXMLBtn);
					System.out.println("Home Page Settings Btn Value Actual      :"+actHomePageSettingsBtn              +"	 Value Expected : "+expHomePageSettingsBtn);
					System.out.println("Home Page Close Btn Value Actual         :"+actHomePageCloseBtn                 +"	 Value Expected : "+expHomePageCloseBtn);
					System.out.println("Home Page Grid check Value Actual        :"+actHomePageGridCheckBox             +"	 Value Expected : "+expHomePageGridCheckBox);
					System.out.println("Home Page Sorting Btn Value Actual       :"+actHomePageSortingBtn               +"	 Value Expected : "+expHomePageSortingBtn);
					System.out.println("Home Page Create View Btn Value Actual   :"+actHomePageCreateViewBn             +"	 Value Expected : "+expHomePageCreateViewBn);
					System.out.println("Home Page Customize Btn Value Actual     :"+actHomePageCustomizeBtn             +"	 Value Expected : "+expHomePageCustomizeBtn);
					System.out.println("Home Page Filter check Value Actual      :"+actHomePageFilterBtn                +"	 Value Expected : "+expHomePageFilterBtn);
					System.out.println("Home Page Refesh Btn Value Actual        :"+actHomePageRefreshBtn               +"	 Value Expected : "+expHomePageRefreshBtn);
					System.out.println("Home Page Options Btn Value Actual       :"+actHomePageOptionsBtn               +"	 Value Expected : "+expHomePageOptionsBtn);
					System.out.println("Home Page Export Btn Value Actual        :"+actHomePageExportBtn                +"	 Value Expected : "+expHomePageExportBtn);
					System.out.println("Home Page All Voucher View Value Actual  :"+actHomePageAllVouchersView          +"	 Value Expected : "+expHomePageAllVouchersView);
					System.out.println("Home Page Pending Auth Value Actual      :"+actHomePagePendingAuthorizationView +"	 Value Expected : "+actHomePagePendingAuthorizationView);
					System.out.println("Home Page Pending Orders Value Actual    :"+actHomePagePendingOrdersLinks       +"	 Value Expected : "+actHomePagePendingOrdersLinks);
								
					
					
					boolean actMethod=actHomePageNewBtn==expHomePageNewBtn  && actHomePageEditBtn==expHomePageEditBtn && actHomePagePrintBtn==expHomePagePrintBtn
							&& actHomePageDeleteBtn==expHomePageDeleteBtn && actHomePageAuthorizeBtn==expHomePageAuthorizeBtn && actHomePageSuspendBtn==expHomePageSuspendBtn 
							&& actHomePageRejectBtn==expHomePageRejectBtn && actHomePagePrintBarcodeBtn==expHomePagePrintBarcodeBtn && actHomePageExportXMLBtn==expHomePageExportXMLBtn
							&& actHomePageSettingsBtn==expHomePageSettingsBtn && actHomePageCloseBtn==expHomePageCloseBtn && actHomePageGridCheckBox==expHomePageGridCheckBox
							&& actHomePageSortingBtn==expHomePageSortingBtn && actHomePageCreateViewBn==expHomePageCreateViewBn && actHomePageCustomizeBtn==expHomePageCustomizeBtn
							&& actHomePageFilterBtn==expHomePageFilterBtn && actHomePageRefreshBtn==expHomePageRefreshBtn && actHomePageOptionsBtn==expHomePageOptionsBtn
							&& actHomePageExportBtn==expHomePageExportBtn && actHomePageAllVouchersView==expHomePageAllVouchersView
							&& actHomePagePendingAuthorizationView==expHomePagePendingAuthorizationView && actHomePagePendingOrdersLinks==expHomePagePendingOrdersLinks;
					
					
					String actResult=Boolean.toString(actMethod);
					String expResult=excelReader.getCellData("PurchaseVoucherN", 12, 7);
					
		            excelReader.setCellData(xlfile, "PurchaseVoucherN", 12, 8, actResult.toUpperCase());
					
					
					
					if(actMethod==true)
					{
						System.out.println("Test Pass : HomeScreen Options Are Displayed");
						excelReader.setCellData(xlfile, "PurchaseVoucherN",  11, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail : HomeScreen Options Are NOT Displayed");
						excelReader.setCellData(xlfile, "PurchaseVoucherN", 11, 9, resFail);
						return false;
					}
		        }
		     	catch (Exception e) 
			   {
				  String exception =e.getMessage();
				  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 11, 10, exception);
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				  return false;
			   }
				}
				
			
			
			
			
			@FindBy(xpath="//*[@id='id_transactionentry_toggle']/div")
			private static List<WebElement> transEntryPageHeaderOptionsList;
			
			
			public boolean checkPurchaseVoucherNewEntryPageHeaderToggleOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
				newBtn.click();
				
				checkUserFriendlyMessage();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(freeFlowBtn));
				
				 int transEntryPageHeaderOptionsListCount=transEntryPageHeaderOptionsList.size();
				 
				 ArrayList<String> actEntryPageHeader          = new ArrayList<String>();
					
				 for (int i = 0; i < transEntryPageHeaderOptionsListCount; i++) 
			 	 {
					String data=transEntryPageHeaderOptionsList.get(i).getText();
					actEntryPageHeader.add(data);
					
			 	 }
		        
				String actEntryPageHeaderList=actEntryPageHeader.toString();
				String expEntryPageHeaderList=excelReader.getCellData("PurchaseVoucherN", 14, 7);
					
		        excelReader.setCellData(xlfile, "PurchaseVoucherN", 14, 8, actEntryPageHeaderList);
				 
				boolean actEntryPageJumpToHeaderSectionBtn= jumpToHeaderSectionBtn.isDisplayed();
				boolean actEntryPageJumpToBodySectionBtn  = jumpToBodySectionBtn.isDisplayed();
				boolean actEntryPageJumpToFooterBtn       = jumpToFooterBtn.isDisplayed();
				boolean actEntryPageNewBtn                = new_newBtn.isDisplayed();
				boolean actEntryPageSaveBtn               = saveBtn.isDisplayed();
				boolean actEntryPagePreviousBtn           = previousBtn.isDisplayed();
				boolean actEntryPageNextBtn               = nextBtn.isDisplayed();
				boolean actEntryPagePrintBtn              = new_PrintBtn.isDisplayed();
				boolean actEntryPageSuspendBtn            = new_SuspendBtn.isDisplayed();
				boolean actEntryPageCloseBtn              = new_CloseBtn.isDisplayed();
				boolean actEntryPageToggleBtn             = toggleBtn.isDisplayed();

				
				boolean expEntryPageJumpToHeaderSectionBtn= true;
				boolean expEntryPageJumpToBodySectionBtn  = true;
				boolean expEntryPageJumpToFooterBtn       = true;
				boolean expEntryPageNewBtn	              = true;
				boolean expEntryPageSaveBtn               = true;
				boolean expEntryPagePreviousBtn           = true;
				boolean expEntryPageNextBtn               = true;
				boolean expEntryPagePrintBtn              = true;
				boolean expEntryPageSuspendBtn            = true;
				boolean expEntryPageCloseBtn              = true;
				boolean expEntryPageToggleBtn             = true;

				
				
				System.out.println("************************************* checkPurchaseVoucherNewEntryPageHeaderToggleOptions  ********************************************");
				System.out.println("Entry Page RC Jump to Header Value Actual:"+actEntryPageJumpToHeaderSectionBtn +"    Value Expected : "+expEntryPageJumpToHeaderSectionBtn);
				System.out.println("Entry Page RC Jump To Body Value Actual  :"+actEntryPageJumpToBodySectionBtn   +"    Value Expected : "+expEntryPageJumpToBodySectionBtn);
				System.out.println("Entry Page RC Jump To Footer Value Actual:"+actEntryPageJumpToFooterBtn        +"    Value Expected : "+expEntryPageJumpToFooterBtn);
				System.out.println("Entry Page RC New Btn Value Actual       :"+actEntryPageNewBtn                 +"    Value Expected : "+expEntryPageNewBtn);
				System.out.println("Entry Page RC Save Btn Value Actual      :"+actEntryPageSaveBtn                +"    Value Expected : "+expEntryPageSaveBtn);
				System.out.println("Entry Page RC Previous Btn Value Actual  :"+actEntryPagePreviousBtn            +"    Value Expected : "+expEntryPagePreviousBtn);
				System.out.println("Entry Page RC Next Btn Value Actual      :"+actEntryPageNextBtn                +"    Value Expected : "+expEntryPageNextBtn);
				System.out.println("Entry Page RC Print Btn Value Actual     :"+actEntryPagePrintBtn               +"    Value Expected : "+expEntryPagePrintBtn);
				System.out.println("Entry Page RC Suspend Btn Value Actual   :"+actEntryPageSuspendBtn             +"    Value Expected : "+expEntryPageSuspendBtn);
				System.out.println("Entry Page RC Close Btn Value Actual     :"+actEntryPageCloseBtn               +"    Value Expected : "+expEntryPageCloseBtn);
				System.out.println("Entry Page RC Toggle Btn Value Actual    :"+actEntryPageToggleBtn              +"    Value Expected : "+expEntryPageToggleBtn);
				
				
			    boolean actMethod=actEntryPageJumpToHeaderSectionBtn==expEntryPageJumpToHeaderSectionBtn && actEntryPageJumpToBodySectionBtn==expEntryPageJumpToBodySectionBtn 
						&& actEntryPageJumpToFooterBtn==expEntryPageJumpToFooterBtn && actEntryPageJumpToFooterBtn==expEntryPageJumpToFooterBtn
						&& actEntryPageNewBtn==expEntryPageNewBtn && actEntryPageSaveBtn==expEntryPageSaveBtn && actEntryPagePreviousBtn==expEntryPagePreviousBtn
						&& actEntryPageNextBtn==expEntryPageNextBtn && actEntryPagePrintBtn==expEntryPagePrintBtn &&actEntryPageSuspendBtn==expEntryPageSuspendBtn 
						&& actEntryPageCloseBtn==expEntryPageCloseBtn && actEntryPageToggleBtn==expEntryPageToggleBtn && 
						actEntryPageHeaderList.equalsIgnoreCase(expEntryPageHeaderList);
			    
			    
			    String actResult=Boolean.toString(actMethod);
			    String expResult=excelReader.getCellData("PurchaseVoucherN", 15, 7);
					
		        excelReader.setCellData(xlfile, "PurchaseVoucherN", 15, 8, actResult.toUpperCase());
				
				
				if(actMethod==true)
			
				{
					System.out.println("Test Pass : entry Page Options Are Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 13, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : entry Page NOT Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 13, 9, resFail);
					return false;
				}
			}
					 catch (Exception e) 
			  		   {
			  			  String exception =e.getMessage();
			  			  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 13, 10, exception);
			  			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  			  return false;
			  		   }
				}
			

			
			

			

		  /*  @FindBy(xpath="//input[@id='id_header_67108924']")
			private static WebElement  purchaseVoucherNewNarration;
		*/
		    
			
		    
			/*@FindBy(xpath="//input[@id='id_header_67108931']")
			private static WebElement  purchaseVoucherNewTest;
			*/
			
			
			@FindBy(xpath="//*[@id='id_transactionentry_header_tabdetail_container']//div/label")
			private static List<WebElement>  transEntryPageHeaderFieldsList;
			
			

			public boolean checkPurchaseVoucherNewEntryPageHeaderFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				
				try
				{
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
		         int transEntryPageHeaderFieldsListCount=transEntryPageHeaderFieldsList.size();
				 
				 ArrayList<String> acttransEntryPageHeaderFieldsList          = new ArrayList<String>();
					
				 for (int i = 0; i < transEntryPageHeaderFieldsListCount; i++) 
			 	 {
					String data=transEntryPageHeaderFieldsList.get(i).getText();
					acttransEntryPageHeaderFieldsList.add(data);
					
			 	 }
		        
				String acttransEntryPageHeaderFields=acttransEntryPageHeaderFieldsList.toString();
				String exptransEntryPageHeaderFields=excelReader.getCellData("PurchaseVoucherN", 17, 7);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 17, 8, acttransEntryPageHeaderFields);
				
				
				boolean actEntryPageHeaderFieldsDocNumber     =documentNumberTxt.isDisplayed();
				boolean actEntryPageHeaderFieldsDate          =dateTxt.isDisplayed();
				boolean actEntryPageHeaderFieldsNarration     =purchaseVoucherNewNarration.isDisplayed();
				boolean actEntryPageHeaderFieldsPurchaseAc    =purchaseAccountTxt.isDisplayed();
				boolean actEntryPageHeaderFieldsVendorAc      =vendorAccountTxt.isDisplayed();
				boolean actEntryPageHeaderFieldRaiseReceipt   =voucherRaiseReceiptCheckBox.isDisplayed();
				boolean actEntryPageHeaderFieldsDepartment    =departmentTxt.isDisplayed();
				boolean actEntryPageHeaderFieldsDueDate       =voucherHeaderDueDate.isDisplayed();                                         
				boolean actEntryPageHeaderFieldsLocalExchRate =voucherHeaderLocalExchangeRate.isDisplayed();
				boolean actEntryPageHeaderFieldsCurrency      =voucherHeaderCurrency.isDisplayed();
				boolean actEntryPageHeaderFieldsExchRate      =voucherHeaderExchangeRate.isDisplayed();
				boolean actEntryPageHeaderFieldsWarehouse     =voucherHeaderCurrency.isDisplayed();
				//boolean actEntryPageHeaderFieldsTest          =purchaseVoucherNewTest.isDisplayed();	
				
				boolean expEntryPageHeaderFieldsDocNumber     =true;
				boolean expEntryPageHeaderFieldsDate          =true;
				boolean expEntryPageHeaderFieldsNarration     =true;
				boolean expEntryPageHeaderFieldsPurchaseAc    =true;
				boolean expEntryPageHeaderFieldsVendorAc      =true;
				boolean expEntryPageHeaderFieldRaiseReceipt   =true;
				boolean expEntryPageHeaderFieldsDepartment    =true;
				boolean expEntryPageHeaderFieldsDueDate       =true;                                         
				boolean expEntryPageHeaderFieldsLocalExchRate =true;
				boolean expEntryPageHeaderFieldsCurrency      =true;
				boolean expEntryPageHeaderFieldsExchRate      =true;
				boolean expEntryPageHeaderFieldsWarehouse     =true;
				boolean expEntryPageHeaderFieldsTest          =true;
				

				
				System.out.println("************************************* checkPurchaseVoucherNewEntryPageHeaderFields  *******************************************************");
				System.out.println("Entry Page Header Doc No Value Actual         :"+actEntryPageHeaderFieldsDocNumber    +"  Value Expected : "+expEntryPageHeaderFieldsDocNumber);
				System.out.println("Entry Page Header Date  Value Actual          :"+actEntryPageHeaderFieldsDate         +"  Value Expected : "+expEntryPageHeaderFieldsDate);
				System.out.println("Entry Page Header Narration Value Actual      :"+actEntryPageHeaderFieldsNarration    +"  Value Expected : "+expEntryPageHeaderFieldsNarration);
				System.out.println("Entry Page Header Purchase Value Actual       :"+actEntryPageHeaderFieldsPurchaseAc   +"  Value Expected : "+expEntryPageHeaderFieldsPurchaseAc);	
				System.out.println("Entry Page Header Vendor Value Actual         :"+actEntryPageHeaderFieldsVendorAc     +"  Value Expected : "+expEntryPageHeaderFieldsVendorAc);
				System.out.println("Entry Page Header Raise Receipt Value Actual  :"+actEntryPageHeaderFieldRaiseReceipt  +"  Value Expected : "+expEntryPageHeaderFieldRaiseReceipt);
				System.out.println("Entry Page Header Department Value Actual     :"+actEntryPageHeaderFieldsDepartment   +"  Value Expected : "+expEntryPageHeaderFieldsDepartment);
				System.out.println("Entry Page Header Due Date Value Actual       :"+actEntryPageHeaderFieldsDueDate      +"  Value Expected : "+expEntryPageHeaderFieldsDueDate);	
				System.out.println("Entry Page Header Local Exch Rate Value Actual:"+actEntryPageHeaderFieldsLocalExchRate+"  Value Expected : "+expEntryPageHeaderFieldsLocalExchRate);
				System.out.println("Entry Page Header Currency Value Actual       :"+actEntryPageHeaderFieldsCurrency     +"  Value Expected : "+expEntryPageHeaderFieldsCurrency);
				System.out.println("Entry Page Header Exch Rate Value Actual      :"+actEntryPageHeaderFieldsExchRate     +"  Value Expected : "+expEntryPageHeaderFieldsExchRate);
				System.out.println("Entry Page Header Warehouse Value Actual      :"+actEntryPageHeaderFieldsWarehouse    +"  Value Expected : "+expEntryPageHeaderFieldsWarehouse);	
				//System.out.println("Entry Page Header Test Value Actual           :"+actEntryPageHeaderFieldsTest         +"  Value Expected : "+expEntryPageHeaderFieldsTest);
				
				
				boolean actMethod=actEntryPageHeaderFieldsDocNumber==expEntryPageHeaderFieldsDocNumber && actEntryPageHeaderFieldsDate==expEntryPageHeaderFieldsDate 
						&& actEntryPageHeaderFieldsNarration==expEntryPageHeaderFieldsNarration && actEntryPageHeaderFieldsPurchaseAc==expEntryPageHeaderFieldsPurchaseAc
						&& actEntryPageHeaderFieldsVendorAc==expEntryPageHeaderFieldsVendorAc && actEntryPageHeaderFieldRaiseReceipt==expEntryPageHeaderFieldRaiseReceipt
						&& actEntryPageHeaderFieldsDepartment==expEntryPageHeaderFieldsDepartment && actEntryPageHeaderFieldsDueDate==expEntryPageHeaderFieldsDueDate
						&& actEntryPageHeaderFieldsLocalExchRate==expEntryPageHeaderFieldsLocalExchRate && actEntryPageHeaderFieldsCurrency==expEntryPageHeaderFieldsCurrency
						&& actEntryPageHeaderFieldsWarehouse==expEntryPageHeaderFieldsWarehouse /*&& actEntryPageHeaderFieldsTest==expEntryPageHeaderFieldsTest*/
						&& actEntryPageHeaderFieldsExchRate==expEntryPageHeaderFieldsExchRate;
				
				String actResult=Boolean.toString(actMethod);
				String expResult=excelReader.getCellData("PurchaseVoucherN", 18, 7);
				
		        excelReader.setCellData(xlfile, "PurchaseVoucherN", 18, 8, actResult.toUpperCase());
				
		        if(actMethod==true)
		        	
				{
					System.out.println("Test Pass : entry Page Options Are Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 16, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : entry Page NOT Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 16, 9, resFail);
					return false;
				}
			   }
					 catch (Exception e) 
			  		   {
			  			  String exception =e.getMessage();
			  			  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 16, 10, exception);
			  			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  			  return false;
			  		   }
				}
			
			
			
			
			/*@FindBy(xpath="//div[contains(text(),'Warehouse')]")
			private static WebElement voucherBodyWareHouseName;
			
			@FindBy(xpath="//div[contains(text(),'Item')]")
			private static WebElement voucherBodyItemName;
			
			@FindBy(xpath="//div[contains(text(),'Units')]")
			private static WebElement voucherBodyUnitsName;
			
			@FindBy(xpath="//div[contains(text(),'RD')]")
			private static WebElement  voucherBodyRDName;
			
			@FindBy(xpath="//div[contains(text(),'Avg Rate(O)')]")
			private static WebElement  voucherBodyAvgRateName;
			               
			@FindBy(xpath="//div[contains(text(),'Quantity')]")
			private static WebElement  voucherBodyQtyName;

			@FindBy(xpath="//div[contains(text(),'L-Purchases Orders')]")
			private static WebElement  voucherBodyLPOName;
			
			@FindBy(xpath="//div[contains(text(),'Rate')]")
			private static WebElement  povoucherBodyRateName;
			
			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_control_heading_7']/div[1]")
			private static WebElement  voucherBodyRateName;
			
			@FindBy(xpath="//div[contains(text(),'Gross')]")
			private static WebElement voucherBodyGrossName;
			
			@FindBy(xpath="//div[contains(text(),'Batch')]")
			private static WebElement voucherBodyBatchName;
			
			@FindBy(xpath="//div[contains(text(),'Bins')]")
			private static WebElement voucherBodyBinsName;
			
			@FindBy(xpath="//div[contains(text(),'Expiry Date')]")
			private static WebElement voucherBodyExpirytDateName;
			
			@FindBy(xpath="//div[contains(text(),'RMA')]")
			private static WebElement voucherBodyRMAName;
			
			@FindBy(xpath="//tbody[@id='id_transaction_entry_detail_table_body']")
			private static WebElement voucherBody;
			
			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_head']")
			private static WebElement bodyTable;
			
		    @FindBy(xpath="//*[@id='id_transaction_entry_detail_table_row_heading']/th[1]")
			private static WebElement voucherBodyHeaderIndex;
*/			
			public boolean checkPurchaseVoucherNewEntryPageBodyFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherBodyItemName));
				
				boolean actBodyItemName     =voucherBodyItemName.isDisplayed();
				boolean actBodyUnitName     =voucherBodyUnitsName.isDisplayed();
				boolean actBodyRDName       =voucherBodyRDName.isDisplayed();
				//boolean actBodyAvgRateName  =voucherBodyAvgRateName.isDisplayed();
				boolean actBodyQtyName      =voucherBodyQtyName.isDisplayed();
				boolean actBodyLPOName      =voucherBodyLPOName.isDisplayed();
				
				JavascriptExecutor js = (JavascriptExecutor) getDriver();
				js.executeScript("arguments[0].scrollIntoView();", voucherBodyGrossName);
				
				
				boolean actBodyRateName      =voucherBodyRateName.isDisplayed();
				boolean actBodyGrossName     =voucherBodyGrossName.isDisplayed();
				/*boolean actBodyBatchName     =voucherBodyBatchName.isDisplayed();
				boolean actBodyBinsName      =voucherBodyBinsName.isDisplayed();
				boolean actBodyRMAName       =voucherBodyRMAName.isDisplayed();
				boolean actBodyExpiryDateName=voucherBodyExpirytDateName.isDisplayed();*/
				
			   
				boolean actBodyR1C1         =select1stRow_1stColumn.isDisplayed();
				boolean actBodyR1C2         =select1stRow_2ndColumn.isDisplayed();
				boolean actBodyR1C3         =select1stRow_3rdColumn.isDisplayed();
				boolean actBodyR1C4         =select1stRow_4thColumn.isDisplayed();
				boolean actBodyR1C5         =select1stRow_5thColumn.isDisplayed();

				
				
				boolean expBodyItemName     =true;
				boolean expBodyUnitName     =true;
				boolean expBodyRDName       =true;
				boolean expBodyAvgRateName  =true;
				boolean expBodyQtyName      =true;
				boolean expBodyLPOName      =true;
				
				
				boolean expBodyRateName      =true;
				boolean expBodyGrossName     =true;
				boolean expBodyBatchName     =true;
				boolean expBodyBinsName      =true;
				boolean expBodyRMAName       =true;
				boolean expBodyExpiryDateName=true;
				
			   
				boolean expBodyR1C1         =true;
				boolean expBodyR1C2         =true;
				boolean expBodyR1C3         =true;
				boolean expBodyR1C4         =true;
				boolean expBodyR1C5         =true;
				
				System.out.println("*************************** checkPurchaseVoucherNewEntryPageBodyFields  **********************************");
				
				
				System.out.println("PV Body Item Value Actual                :  " + actBodyItemName       +"  Value Expected : " + expBodyItemName);
				System.out.println("PV Body Unit Value Actual                :  " + actBodyUnitName       +"  Value Expected : " + expBodyUnitName);
				System.out.println("PV Body RD Value Actual                  :  " + actBodyRDName         +"  Value Expected : " + expBodyAvgRateName);
				//System.out.println("PV Body Avg Rate Value Actual            :  " + actBodyAvgRateName    +"  Value Expected : " + expBodyAvgRateName);
				System.out.println("PV Body Qty Value Actual                 :  " + actBodyQtyName        +"  Value Expected : " + expBodyQtyName);
				System.out.println("PV Body LPO Value Actual                 :  " + actBodyLPOName        +"  Value Expected : " + expBodyLPOName);

				System.out.println("PV Body Rate Value Actual                :  " + actBodyRateName       +"  Value Expected : " + expBodyRateName);
				System.out.println("PV Body Gross Value Actual               :  " + actBodyGrossName      +"  Value Expected : " + expBodyGrossName);
				/*System.out.println("PV Body Batch Value Actual               :  " + actBodyBatchName      +"  Value Expected : " + expBodyBatchName);
				
				System.out.println("PV Body Expiry Value Actual              :  " + actBodyExpiryDateName +"  Value Expected : " + expBodyExpiryDateName);
				
				System.out.println("PV Body RMA Value Actual                 :  " + actBodyRMAName        +"  Value Expected : " + expBodyRMAName);
				System.out.println("PV Body Bins Value Actual                :  " + actBodyBinsName       +"  Value Expected : " + expBodyBinsName);*/
				System.out.println("PV Body R1C1 Value Actual                :  " + actBodyR1C1           +"  Value Expected : " + expBodyR1C1);
				System.out.println("PV Body R1C2 Value Actual                :  " + actBodyR1C2           +"  Value Expected : " + expBodyR1C2);
				System.out.println("PV Body R2C3 Value Actual                :  " + actBodyR1C3           +"  Value Expected : " + expBodyR1C3);
				System.out.println("PV Body R3C4 Value Actual                :  " + actBodyR1C4           +"  Value Expected : " + expBodyR1C4);
				System.out.println("PV Body R4C4 Value Actual                :  " + actBodyR1C5           +"  Value Expected : " + expBodyR1C5);
				
				
				Boolean actMethod=actBodyItemName==expBodyItemName && actBodyUnitName==expBodyUnitName &&
						  actBodyRDName==expBodyRDName /*&& actBodyAvgRateName==expBodyAvgRateName*/ &&
					      actBodyQtyName==expBodyQtyName && actBodyLPOName==expBodyLPOName && 
						
							 actBodyR1C1==expBodyR1C1 && actBodyR1C2==expBodyR1C2 &&
							 actBodyR1C3==expBodyR1C3 && actBodyR1C4==expBodyR1C4 && expBodyR1C5==actBodyR1C5 &&
					
			                actBodyRateName==expBodyRateName  && actBodyGrossName==expBodyGrossName/* &&
							actBodyBatchName==expBodyBatchName && actBodyExpiryDateName==expBodyExpiryDateName && 
							actBodyRMAName==expBodyRMAName && actBodyBinsName==expBodyBinsName*/;
				
				String actResult=Boolean.toString(actMethod);
				String expResult=excelReader.getCellData("PurchaseVoucherN", 20, 7);
				
		        excelReader.setCellData(xlfile, "PurchaseVoucherN", 20, 8, actResult.toUpperCase());
			   

				
				if(actMethod==true) 
					{
						System.out.println(" Test Pass: entry Page Body Options Are Displayed");
						excelReader.setCellData(xlfile, "PurchaseVoucherN", 19, 9, resPass);
						
						js.executeScript("arguments[0].scrollIntoView();", voucherBodyHeaderIndex);
						
						return true;
					}
					else
					{
						System.out.println(" Test Fail: entry Page Body Options Are Displayed");
						excelReader.setCellData(xlfile, "PurchaseVoucherN", 19, 9, resFail);
						
						js.executeScript("arguments[0].scrollIntoView();", voucherBodyHeaderIndex);
						
						return false;
					}
			    }
			     catch (Exception e) 
			     {
				  String exception =e.getMessage();
				  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 19, 10, exception);
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				  return false;
			    }
			}
			
			
			
			
			
			
			public boolean checkPurchaseVoucherNewEntryPageFooterFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
			  {
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jumpToFooterBtn));
				jumpToFooterBtn.click();
				
		        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(netLabel));
				
				boolean actEntryPageFooterFieldsNetLabel  =netLabel.isDisplayed();
				boolean actEntryPageFooterFieldsNetAmount =netAmount.isDisplayed();

				boolean expEntryPageFooterFieldsNetLabel  =true;
				boolean expEntryPageFooterFieldsNetAmount =true;

				
				
				System.out.println("****************************&************* checkOpeningStocksNewEntryPageFooterFields  ***************************************************");
				System.out.println("Entry Page Footer Fields Net Label Value Actual  : "+actEntryPageFooterFieldsNetLabel+   " Value Expected : "+expEntryPageFooterFieldsNetLabel);
				System.out.println("Entry Page Footer Fields Net Amount Value Actual : "+actEntryPageFooterFieldsNetAmount+  " Value Expected : "+expEntryPageFooterFieldsNetAmount);

				
				boolean actMethod=actEntryPageFooterFieldsNetLabel==expEntryPageFooterFieldsNetLabel && actEntryPageFooterFieldsNetAmount==expEntryPageFooterFieldsNetAmount;
				
				String actResult=Boolean.toString(actMethod);
				String expResult=excelReader.getCellData("PurchaseVoucherN", 22, 7);
				
		        excelReader.setCellData(xlfile, "PurchaseVoucherN", 22, 8, actResult.toUpperCase());
						
				if(actMethod==true)
				{
					System.out.println("Test Pass : entry Page Footer Options Are Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 21, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : entry Page NOT Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 21, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			   {
				  String exception =e.getMessage();
				  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 21, 10, exception);
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				  return false;
			   }
			}
			
			
			
			

			public boolean checkPurchaseVoucherNewEntryPageDocumentNumber() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jumpToHeaderSectionBtn));
				jumpToHeaderSectionBtn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
				documentNumberTxt.click();
				
				String actDocumentNumber  =documentNumberTxt.getAttribute("value");
				String expDocumentNumber  =excelReader.getCellData("PurchaseVoucherN", 23, 7);
				
		        excelReader.setCellData(xlfile, "PurchaseVoucherN", 23, 8, actDocumentNumber);

				System.out.println("***************************************** checkPurchaseVoucherNewEntryPageDocumentNumber  ***************************************************");
				System.out.println("Entry Page Open Docuemnt Number Value Actual  : "+actDocumentNumber   +" Value Expected : "+expDocumentNumber);
				
				
				if(actDocumentNumber.equalsIgnoreCase(expDocumentNumber))
				{
					System.out.println("Test Pass : Document No is 1");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 23, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : entry Page NOT Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 23, 9, resFail);
					return false;
				}
				}
				 catch (Exception e) 
				   {
					  String exception =e.getMessage();
					  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 23, 10, exception);
					  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
					  return false;
				   }
			}
			




			// Adding New vendor In vendor Account 

			@FindBy(xpath="//label[contains(text(),'Vendor Account')]")
			private static WebElement VendorAccountLabel;

			//Name
			@FindBy(xpath="//input[@id='sName']")
			public static WebElement nameTxt;

			//Code
			@FindBy(xpath="//input[@id='sCode']")
			public static WebElement codeTxt;

			//AccountType	
			@FindBy(xpath="//select[@id='iAccountType']")
			public static WebElement accountTypeDropdown;

			//AccountType	
			@FindBy(xpath="//input[@id='oc_Group']")
			public static WebElement account_groupTxt;

			//CreditLimit
			@FindBy(xpath="//input[@id='fCreditLimit']")
			public static WebElement creditLimitTxt;

			//CreditDays
			@FindBy(xpath="//input[@id='iCreditDays']")
			public static WebElement creditdaysTxt;

			//ChequeDiscountLimit
			@FindBy(xpath="//input[@id='fChequeDiscountLimit']")
			public static WebElement chequeDiscountLimitTxt;

			//Rate Of Interest
			@FindBy(xpath="//input[@id='fRateofinterest']")
			public static WebElement rateofinterestTxt;

			//BankAccount
			@FindBy(xpath="//input[@id='iBankAc']")
			public static WebElement bankAccountTxt;

			@FindBy(xpath="//*[@id='iBankAc_input_image']/span")
			public static WebElement bankAccount_ExpansionBtn;

			@FindBy(xpath="//*[@id='iBankAc_input_settings']/span")
			public static WebElement bankAccount_SettingBtn;

			@FindBy(xpath="//div[@id='GenerateNewMasterModel']//button[2]")
			public static WebElement account_saveBtn;

			@FindBy(xpath="//button[@class='btn-link theme_icon-color closeMasterPartial btnGenerateMasterclose clsMasterPopupSaveClose']")
			public static WebElement account_CloseBtn;

			 @FindBy(xpath="//a[contains(text(),'General')]")
			 private static WebElement account_GeneralTab;
				
			 @FindBy(xpath="//a[contains(text(),'Settings')]")
			 private static WebElement account_SettingsTab;
				 
			 @FindBy(xpath="//a[contains(text(),'Details')]")
			 private static WebElement account_DetailsTab;
				
			 @FindBy(xpath="//a[contains(text(),'Print Layout')]")
			 private static WebElement account_PrintLayout;
				
			 @FindBy(xpath="//a[contains(text(),'Tree Tab Update')]")
			 private static WebElement account_TreeTabUpdate;
				
			 @FindBy(xpath="//a[contains(text(),'Document Tab')]")
			 private static WebElement account_DocumentTab;
				
			 @FindBy(xpath="//a[contains(text(),'Create Tab')]")
			 private static WebElement account_CreateTab;

			 @FindBy(xpath="//*[@id='divBtnGroup6']/div/a")
			 private static WebElement account_VatSettingsTab;
			 
			 @FindBy(xpath="//*[@id='id_transactionentry_header1_section']/div/div[3]/div[3]/label")
			 private static WebElement accountClickOnVoucherEntryPage;
			

			public boolean checkAccountPageOnClickOnAccountsInVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(VendorAccountLabel));
				VendorAccountLabel.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(account_CloseBtn));
				
				boolean actaccount_GeneralTab     =account_GeneralTab.isDisplayed();
				boolean actaccount_SettingsTab    =account_SettingsTab.isDisplayed();
				boolean actaccount_DetailsTab     =account_DetailsTab.isDisplayed();
				boolean actaccount_PrintLayout    =account_PrintLayout.isDisplayed();
				/*boolean actaccount_TreeTabUpdate  =account_TreeTabUpdate.isDisplayed();
				boolean actaccount_DocumentTab    =account_DocumentTab.isDisplayed();
				boolean actaccount_CreateTab      =account_CreateTab.isDisplayed();
				boolean actaccount_VatSettingTab  =account_VatSettingsTab.isDisplayed();*/
				boolean actnameTxt   			  =nameTxt.isDisplayed();
				boolean actcodeTxt			      =codeTxt.isDisplayed();
				boolean actaccountTypeDropdown    =accountTypeDropdown.isDisplayed();
				boolean actaccount_groupTxt       =account_groupTxt.isDisplayed();
				boolean actcreditdaysTxt          =creditdaysTxt.isDisplayed();
				boolean actcreditLimitTxt         =creditLimitTxt.isDisplayed();
				boolean actchequeDiscountLimitTxt =chequeDiscountLimitTxt.isDisplayed();
				boolean actrateofinterestTxt      =rateofinterestTxt.isDisplayed();
				boolean actbankAccountTxt         =bankAccountTxt.isDisplayed();
				boolean actaccount_saveBtn        =account_saveBtn.isDisplayed();
				boolean actaccount_CloseBtn       =account_CloseBtn.isDisplayed();
				
				boolean expaccount_GeneralTab       =true;
				boolean expaccount_SettingsTab      =true;
				boolean expaccount_DetailsTab       =true;
				boolean expaccount_PrintLayout      =true;
				boolean expaccount_TreeTabUpdate    =true;
				boolean expaccount_DocumentTab      =true;
				boolean expaccount_CreateTab        =true;
				boolean expaccount_VatSettingTab    =true;
				boolean expnameTxt                  =true;
				boolean expcodeTxt                  =true;
				boolean expaccountTypeDropdown      =true;
				boolean expaccount_groupTxt         =true;
				boolean expcreditdaysTxt            =true;
				boolean expcreditLimitTxt           =true;
				boolean expchequeDiscountLimitTxt   =true;
				boolean exprateofinterestTxt        =true;
				boolean expbankAccountTxt      		=true;
				boolean expaccount_saveBtn          =true;
				boolean expaccount_CloseBtn         =true;
				
				
				System.out.println("****************************** checkVendorAccountLabelInVoucher  ********************************************");
				
				System.out.println("account_GeneralTab       :"+actaccount_GeneralTab		+" Value Expected : "+expaccount_GeneralTab);
				System.out.println("account_SettingsTab      :"+actaccount_SettingsTab		+" Value Expected : "+expaccount_SettingsTab);
				System.out.println("account_DetailsTab       :"+actaccount_DetailsTab		+" Value Expected : "+expaccount_DetailsTab);
				System.out.println("account_PrintLayout      :"+actaccount_PrintLayout		+" Value Expected : "+expaccount_PrintLayout);
				/*System.out.println("account_TreeTabUpdate    :"+actaccount_TreeTabUpdate	+" Value Expected : "+expaccount_TreeTabUpdate);
				System.out.println("account_DocumentTab      :"+actaccount_DocumentTab		+" Value Expected : "+expaccount_DocumentTab);
				System.out.println("account_CreateTab        :"+actaccount_CreateTab		+" Value Expected : "+expaccount_CreateTab);
				System.out.println("account_VatSettingsTab   :"+actaccount_VatSettingTab    +" Value Expected : "+expaccount_VatSettingTab);*/
				System.out.println("nameTxt 				 :"+actnameTxt					+" Value Expected : "+expnameTxt);
				System.out.println("codeTxt    				 :"+actcodeTxt					+" Value Expected : "+expcodeTxt);
				System.out.println("accountTypeDropdown      :"+actaccountTypeDropdown		+" Value Expected : "+expaccountTypeDropdown);
				System.out.println("account_groupTxt         :"+actaccount_groupTxt			+" Value Expected : "+expaccount_groupTxt);
				System.out.println("creditdaysTxt        	 :"+actcreditdaysTxt			+" Value Expected : "+expcreditdaysTxt);
				System.out.println("creditLimitTxt      	 :"+actcreditLimitTxt			+" Value Expected : "+expcreditLimitTxt);
				System.out.println("chequeDiscountLimitTxt   :"+actchequeDiscountLimitTxt	+" Value Expected : "+expchequeDiscountLimitTxt);
				System.out.println("rateofinterestTxt   	 :"+actrateofinterestTxt		+" Value Expected : "+exprateofinterestTxt);
				System.out.println("bankAccountTxt   		 :"+actbankAccountTxt			+" Value Expected : "+expbankAccountTxt);
				System.out.println("account_saveBtn  	     :"+actaccount_saveBtn			+" Value Expected : "+expaccount_saveBtn);
				System.out.println("account_CloseBtn      	 :"+actaccount_CloseBtn			+" Value Expected : "+expaccount_CloseBtn);
				
				
				boolean actMethod=actaccount_GeneralTab==expaccount_GeneralTab && actaccount_SettingsTab==expaccount_SettingsTab && actaccount_DetailsTab==expaccount_DetailsTab
						&& actaccount_PrintLayout==expaccount_PrintLayout /*&& actaccount_TreeTabUpdate==expaccount_TreeTabUpdate
						&& actaccount_DocumentTab==expaccount_DocumentTab && actaccount_CreateTab==expaccount_CreateTab */
						&& actnameTxt==expnameTxt && actcodeTxt==expcodeTxt && actaccountTypeDropdown==expaccountTypeDropdown
						&& actaccount_groupTxt==expaccount_groupTxt && actcreditdaysTxt==expcreditdaysTxt
						&& actcreditLimitTxt==expcreditLimitTxt && actchequeDiscountLimitTxt==expchequeDiscountLimitTxt
						&& actrateofinterestTxt==exprateofinterestTxt && actbankAccountTxt==expbankAccountTxt 
						&& actaccount_saveBtn==expaccount_saveBtn && actaccount_CloseBtn==expaccount_CloseBtn;
				
				
				String actResult=Boolean.toString(actMethod);
				String expResult=excelReader.getCellData("PurchaseVoucherN", 25, 7);
				
		        excelReader.setCellData(xlfile, "PurchaseVoucherN", 25, 8, actResult.toUpperCase());

				
				
				if(actMethod==true)
				{
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 24, 9, resPass);
					System.out.println("Test Pass : Account Screen Displayed");
					return true;
				}
				else
				{
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 24, 9, resFail);
					
					return false;
				}
			   }
			   catch (Exception e) 
			   {
				  String exception =e.getMessage();
				  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 24, 10, exception);
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				  return false;
			   }
		    }
			 
			
			

			
			public  boolean checkSaveButtonWithoutInputNameMandatoryFields() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
			{

				 excelReader=new ExcelReader(POJOUtility.getExcelPath());
				 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
				 try
				 {
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(account_GeneralTab));
				 
				 account_GeneralTab.click();
				
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(account_saveBtn));
				 
				 account_saveBtn.click();
				 
				 String expErrorMessage =excelReader.getCellData("PurchaseVoucherN", 27, 7);
				 
				 String validationMessage=checkValidationMessage(expErrorMessage);
				 
				 excelReader.setCellData(xlfile, "PurchaseVoucherN", 27, 8, validationMessage);
				 
				  
				 System.out.println("************************************* checkSaveButtonWithoutInputNameMandatoryFields  *********************************");
				 
				 System.out.println("error Message  :  "+validationMessage +" Value Expected : "+"TRUE");
				
				 if (validationMessage.equalsIgnoreCase(expErrorMessage))
				 {
					 excelReader.setCellData(xlfile, "PurchaseVoucherN", 26, 9, resPass);
					 
					 return true;
				 }
				 else
				 {
					 excelReader.setCellData(xlfile, "PurchaseVoucherN", 26, 9, resFail);
					 
					 return false;
				 }
				 }
				 catch (Exception e) 
				   {
					  String exception =e.getMessage();
					  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 26, 10, exception);
					  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
					  return false;
				   }
		      }
			
			
			
			
			 
			public boolean checkSavingAccountInVoucherEntryPage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		    {
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
				nameTxt.click();
				nameTxt.sendKeys(excelReader.getCellData("PurchaseVoucherN", 29, 6));
				nameTxt.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
				codeTxt.sendKeys(excelReader.getCellData("PurchaseVoucherN", 30, 6));
				codeTxt.sendKeys(Keys.TAB);
				
				String actnameTxt=nameTxt.getAttribute("value");
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 29, 8, actnameTxt);
				
				String actcodeTxt=codeTxt.getAttribute("value");
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 30, 8, actcodeTxt);
				
				String expnameTxt=excelReader.getCellData("PurchaseVoucherN", 29, 7);
				String expcodeTxt=excelReader.getCellData("PurchaseVoucherN", 30, 7);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(account_groupTxt));
				account_groupTxt.sendKeys(excelReader.getCellData("PurchaseVoucherN", 31, 6));
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(account_groupTxt));
				account_groupTxt.sendKeys(Keys.TAB);
			
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(account_saveBtn));
				account_saveBtn.click();

				
				System.out.println("************************************* checkSavingVendorAccount  *********************************");
				System.out.println("nameTxt 		  :  "+actnameTxt  		   +" Value Expected : "+expnameTxt);
				System.out.println("codeTxt  		  :  "+actcodeTxt 		   +" Value Expected : "+expcodeTxt);

				if(actnameTxt.equalsIgnoreCase(expnameTxt) && actcodeTxt.equalsIgnoreCase(expcodeTxt))
				{

		            excelReader.setCellData(xlfile, "PurchaseVoucherN", 28, 9, resPass);
					System.out.println("Test pass : Vendor C Saved Succesfully");
					return true;
				}
				else
				{
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 28, 9, resFail);
					System.out.println("Test Fail : Vendor C NOT Saved Succesfully");
					return false;
				}
				}
				 catch (Exception e) 
				   {
					  String exception =e.getMessage();
					  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 28, 10, exception);
					  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
					  return false;
				   }
				
				}
			 
			
			@FindBy(xpath="//tbody[@id='id_header_4_table_body']/tr/td[2]")
			private static List<WebElement> vendorAccountListCount; 
			
			
			
			public boolean checkCloseBtnInAccountCreationPageInVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
							  
				try
				{
				
					
			     Thread.sleep(2000);
					
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
				vendorAccountTxt.click();
				vendorAccountTxt.sendKeys(Keys.END);
				vendorAccountTxt.sendKeys(Keys.SHIFT,Keys.HOME);
				vendorAccountTxt.sendKeys(excelReader.getCellData("PurchaseVoucherN", 33, 6));
				Thread.sleep(2000);
				vendorAccountTxt.sendKeys(Keys.TAB);
				
				/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
				vendorAccountTxt.click();
				vendorAccountTxt.sendKeys(Keys.CONTROL+"e");*/
				
				//Checking the Close Button
				String actnameTxtName = nameTxt.getAttribute("value");
				String expnameTxtName = excelReader.getCellData("PurchaseVoucherN", 33, 7);
				
				System.out.println("account Name       : " + actnameTxtName		+ " Value Expected : " + expnameTxtName);
			
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(account_CloseBtn));
				
				boolean actaccount_GeneralTab     =account_GeneralTab.isDisplayed();
				boolean actaccount_SettingsTab    =account_SettingsTab.isDisplayed();
				boolean actaccount_DetailsTab     =account_DetailsTab.isDisplayed();
				boolean actaccount_PrintLayout    =account_PrintLayout.isDisplayed();
				/*boolean actaccount_TreeTabUpdate  =account_TreeTabUpdate.isDisplayed();
				boolean actaccount_DocumentTab    =account_DocumentTab.isDisplayed();
				boolean actaccount_CreateTab      =account_CreateTab.isDisplayed();*/
				boolean actnameTxt   			  =nameTxt.isDisplayed();
				boolean actcodeTxt			      =codeTxt.isDisplayed();
				boolean actaccountTypeDropdown    =accountTypeDropdown.isDisplayed();
				boolean actaccount_groupTxt       =account_groupTxt.isDisplayed();
				boolean actcreditdaysTxt          =creditdaysTxt.isDisplayed();
				boolean actcreditLimitTxt         =creditLimitTxt.isDisplayed();
				boolean actchequeDiscountLimitTxt =chequeDiscountLimitTxt.isDisplayed();
				boolean actrateofinterestTxt      =rateofinterestTxt.isDisplayed();
				boolean actbankAccountTxt         =bankAccountTxt.isDisplayed();
				boolean actaccount_saveBtn        =account_saveBtn.isDisplayed();
				boolean actaccount_CloseBtn       =account_CloseBtn.isDisplayed();
				
				boolean expaccount_GeneralTab       =true;
				boolean expaccount_SettingsTab      =true;
				boolean expaccount_DetailsTab       =true;
				boolean expaccount_PrintLayout      =true;
				boolean expaccount_TreeTabUpdate    =true;
				boolean expaccount_DocumentTab      =true;
				boolean expaccount_CreateTab        =true;
				boolean expnameTxt                  =true;
				boolean expcodeTxt                  =true;
				boolean expaccountTypeDropdown      =true;
				boolean expaccount_groupTxt         =true;
				boolean expcreditdaysTxt            =true;
				boolean expcreditLimitTxt           =true;
				boolean expchequeDiscountLimitTxt   =true;
				boolean exprateofinterestTxt        =true;
				boolean expbankAccountTxt      		=true;
				boolean expaccount_saveBtn          =true;
				boolean expaccount_CloseBtn         =true;
				
				
				System.out.println("****************************** checkVendorAccountLabelInVoucher  ********************************************");
				
				System.out.println("account_GeneralTab       :"+actaccount_GeneralTab		+" Value Expected : "+expaccount_GeneralTab);
				System.out.println("account_SettingsTab      :"+actaccount_SettingsTab		+" Value Expected : "+expaccount_SettingsTab);
				System.out.println("account_DetailsTab       :"+actaccount_DetailsTab		+" Value Expected : "+expaccount_DetailsTab);
				System.out.println("account_PrintLayout      :"+actaccount_PrintLayout		+" Value Expected : "+expaccount_PrintLayout);
				/*System.out.println("account_TreeTabUpdate    :"+actaccount_TreeTabUpdate	+" Value Expected : "+expaccount_TreeTabUpdate);
				System.out.println("account_DocumentTab      :"+actaccount_DocumentTab		+" Value Expected : "+expaccount_DocumentTab);
				System.out.println("account_CreateTab        :"+actaccount_CreateTab		+" Value Expected : "+expaccount_CreateTab);*/
				System.out.println("nameTxt                  :"+actnameTxt					+" Value Expected : "+expnameTxt);
				System.out.println("codeTxt    				 :"+actcodeTxt					+" Value Expected : "+expcodeTxt);
				System.out.println("accountTypeDropdown      :"+actaccountTypeDropdown		+" Value Expected : "+expaccountTypeDropdown);
				System.out.println("account_groupTxt         :"+actaccount_groupTxt			+" Value Expected : "+expaccount_groupTxt);
				System.out.println("creditdaysTxt        	 :"+actcreditdaysTxt			+" Value Expected : "+expcreditdaysTxt);
				System.out.println("creditLimitTxt      	 :"+actcreditLimitTxt			+" Value Expected : "+expcreditLimitTxt);
				System.out.println("chequeDiscountLimitTxt   :"+actchequeDiscountLimitTxt	+" Value Expected : "+expchequeDiscountLimitTxt);
				System.out.println("rateofinterestTxt   	 :"+actrateofinterestTxt		+" Value Expected : "+exprateofinterestTxt);
				System.out.println("bankAccountTxt   		 :"+actbankAccountTxt			+" Value Expected : "+expbankAccountTxt);
				System.out.println("account_saveBtn  	     :"+actaccount_saveBtn			+" Value Expected : "+expaccount_saveBtn);
				System.out.println("account_CloseBtn      	 :"+actaccount_CloseBtn			+" Value Expected : "+expaccount_CloseBtn);
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(account_CloseBtn));
				account_CloseBtn.click();
						
				
				boolean actMethod=actnameTxtName.equalsIgnoreCase(expnameTxtName) 
						&& actaccount_GeneralTab==expaccount_GeneralTab && actaccount_SettingsTab==expaccount_SettingsTab
						&& actaccount_DetailsTab==expaccount_DetailsTab && actaccount_PrintLayout==expaccount_PrintLayout 
						/*&& actaccount_TreeTabUpdate==expaccount_TreeTabUpdate && actaccount_DocumentTab==expaccount_DocumentTab 
						&& actaccount_CreateTab==expaccount_CreateTab */&& actnameTxt==expnameTxt && actcodeTxt==expcodeTxt 
						&& actaccountTypeDropdown==expaccountTypeDropdown && actaccount_groupTxt==expaccount_groupTxt && actcreditdaysTxt==expcreditdaysTxt
						&& actcreditLimitTxt==expcreditLimitTxt && actchequeDiscountLimitTxt==expchequeDiscountLimitTxt
						&& actrateofinterestTxt==exprateofinterestTxt && actbankAccountTxt==expbankAccountTxt 
						&& actaccount_saveBtn==expaccount_saveBtn && actaccount_CloseBtn==expaccount_CloseBtn;
				
				
				String actResult=Boolean.toString(actMethod);
				String expResult=excelReader.getCellData("PurchaseVoucherN", 34, 7);
				
		        excelReader.setCellData(xlfile, "PurchaseVoucherN", 34, 8, actResult);
				
				if(actMethod==true && actnameTxtName.equalsIgnoreCase(expnameTxtName) )
				{
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 32, 9, resPass);
					System.out.println("Test Pass : Account Screen Displayed");
					return true;
				}
				else
				{
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 32, 9, resFail);
					System.out.println("Test Fail : Account Screen NOT Displayed");
					return false;
				}
			}
			 catch (Exception e) 
			   {
				  String exception =e.getMessage();
				  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 32, 10, exception);
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				  return false;
			   }
		   }
			
			
			
			

			public boolean checkPurchaseVoucherNewSaveWithoutMandatoryFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
					
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
				saveBtn.click();
				
				
				
                String expSaveValidationMessageOnSaveWithoutInptData=excelReader.getCellData("PurchaseVoucherN", 35, 7);
				
				String actMessage=checkValidationMessage(expSaveValidationMessageOnSaveWithoutInptData);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 35, 8, actMessage);

				
				
				/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessage));
				String actdata=errorMessage.getText();
						
				String expdata1="Controls marked with arrow mark, require Values";
				String expdata2="Main -> PurchaseAC";
				String expdata3="Main -> VendorAC";
				String expdata4="Main -> Department";
				String expdata5="Main -> Warehouse";
				
				System.out.println(actdata);
				
				
				String actSaveMandatoryWithNoInputValidationMessage       =errorMessage.getText();
				
				 excelReader.setCellData(xlfile, xlSheetName, 1527, 8, actSaveMandatoryWithNoInputValidationMessage);
				
				String expSaveMandatoryWithNoInputValidationMessageOne    ="Controls marked with arrow mark, require Values";
				String expSaveMandatoryWithNoInputValidationMessageTwo    ="Main -> PurchaseAC";
				String expSaveMandatoryWithNoInputValidationMessageThree  ="Main -> VendorAC";
				String expSaveMandatoryWithNoInputValidationMessageFour   ="Main -> Department";
				String expSaveMandatoryWithNoInputValidationMessageFive   ="Main -> Warehouse";
				*/
				
				System.out.println("*********************************************** checkPurchaseVoucherNewSaveWithoutMandatoryFields  ********************************************");
				System.out.println("Entry Page Save with No Mandatory Input Value Actual  : "+actMessage  +" Value Expected : "+expSaveValidationMessageOnSaveWithoutInptData);	
				
				if(actMessage.equalsIgnoreCase(expSaveValidationMessageOnSaveWithoutInptData))
				{
					System.out.println("Test Pass : Error Message Displayed");
					
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 35, 9, resPass);
					return true;
				}
				else
				{
					
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 35, 9, resFail);
					
					return false;
				}
			}
			
			catch (Exception e) 
			   {
				  String exception =e.getMessage();
				  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 35, 10, exception);
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				  return false;
			   }
			}
			
			
			
			@FindBy(xpath="//tbody[@id='id_header_3_table_body']/tr/td[2]")
			private static List<WebElement> purchaseAccountListCount; 
			
			
			
			public boolean checkPurchaseVoucherNewPurchaseOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
				purchaseAccountTxt.click();
				
				purchaseAccountTxt.sendKeys(Keys.SPACE);
				
				ArrayList<String>  actPVPurchaseAccount= new ArrayList<String>(); 
				
				
				
				int count=purchaseAccountListCount.size();
				
				System.err.println(count);
				
				for(int i=0 ; i < count ;i++)
				{
					String data=purchaseAccountListCount.get(i).getText();
					System.err.println("IN FOR LOOP : "+data);
					actPVPurchaseAccount.add(data);
					
				}
				
				System.err.println(actPVPurchaseAccount);
				
				String actPVPurchaseAccountValue=actPVPurchaseAccount.toString();
			    String expPVPurchaseAccountValue=excelReader.getCellData("PurchaseVoucherN", 37, 7);
				
		        excelReader.setCellData(xlfile, "PurchaseVoucherN", 37, 8, actPVPurchaseAccountValue);
				
			    System.out.println("********************************************* checkPurchaseVoucherNewPurchaseOptions  ********************************************************");
				System.out.println("Entry Page Purchase Options Value Actual  : "+actPVPurchaseAccountValue+"  Value Expected : "+expPVPurchaseAccountValue);
			    
			    	
			   if(actPVPurchaseAccountValue.equalsIgnoreCase(expPVPurchaseAccountValue))
				{
					
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 36, 9, resPass);
					return true;
				}
				else
				{
					
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 36, 9, resFail);
					return false;
				}
			  }
			 catch (Exception e) 
			   {
				  String exception =e.getMessage();
				  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 36, 10, exception);
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				  return false;
			   }
			}
			
			
			
			
			public boolean checkPurchaseVoucherNewSaveWithPurchaseInput() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try 
				{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
				saveBtn.click();

				
				
                String expSaveValidationMessageOnSaveWithPurchaseInptData=excelReader.getCellData("PurchaseVoucherN", 38, 7);
				
				String actMessage=checkValidationMessage(expSaveValidationMessageOnSaveWithPurchaseInptData);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 38, 8, actMessage);

				
/*
			    String actSaveWithInputPurchaseAccountValidationMessage=errorMessage.getText();
			    
			    excelReader.setCellData(xlfile, xlSheetName, 1530, 8, actSaveWithInputPurchaseAccountValidationMessage);
			    
			    String expSaveWithInputPurchaseAccountValidationMsg     ="Controls marked with arrow mark, require Values";
				String expSaveWithInputPurchaseAccountValidationMsgOne  ="Main -> VendorAC";
				String expSaveWithInputPurchaseAccountValidationMsgTwo  ="Main -> Currency";
				String expSaveWithInputPurchaseAccountValidationMsgThree="Main -> Department";
				String expSaveWithInputPurchaseAccountValidationMsgFour ="Main -> Warehouse";*/
				
				
				System.out.println("*********************************************** checkPurchaseVoucherNewSaveWithPurchaseInput  ********************************************");
				System.out.println("Entry Page Save with Purchase Input Value Actual  : "+actMessage  +" Value Expected : "+expSaveValidationMessageOnSaveWithPurchaseInptData);	
				
			
			    	
				if(actMessage.equalsIgnoreCase(expSaveValidationMessageOnSaveWithPurchaseInptData)) 
						
				{
					System.out.println("Test Pass : Error Message Displayed");
					
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 38, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail :Error Message is Not Displayed ");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 38, 9, resFail);
					
					return false;
				}
			}
			 catch (Exception e) 
			   {
				  String exception =e.getMessage();
				  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 38, 10, exception);
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				  return false;
			   }
			}
			
			
			public boolean checkPurchaseVoucherNewVendorOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
				vendorAccountTxt.click();
				
				vendorAccountTxt.sendKeys(Keys.SPACE);	
				
				ArrayList<String>  actVendorAccountList= new ArrayList<String>(); 
			
				
				int count=vendorAccountListCount.size();

				System.err.println(count);
				
				for(int i=0 ; i < count ;i++)
				{
					String data=vendorAccountListCount.get(i).getText();
					System.err.println("IN FOR LOOP : "+data);
					actVendorAccountList.add(data);
					
				}
				
				System.err.println(actVendorAccountList);
				
				String actVendorAccountValue=actVendorAccountList.toString();
				
				String expVendorAccountValue=excelReader.getCellData("PurchaseVoucherN", 40, 7);
				
		        excelReader.setCellData(xlfile, "PurchaseVoucherN", 40, 8, actVendorAccountValue);

				

			    System.out.println("********************************************* checkPurchaseVoucherNewPurchaseOptions  ********************************************************");
				System.out.println("Entry Page Warehouse Masters Value Actual  : "+actVendorAccountValue+"      Value Expected : "+expVendorAccountValue);
			    
				
			   if(actVendorAccountValue.equalsIgnoreCase(expVendorAccountValue))
				{
					
		            excelReader.setCellData(xlfile, "PurchaseVoucherN", 39, 9, resPass);
					return true;
				}
				else
				{
					
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 39, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			   {
				  String exception =e.getMessage();
				  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 39, 10, exception);
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				  return false;
			   }
				
			}
			
			
			public boolean checkPurchaseVoucherNewSaveWithVendorInput() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
				 saveBtn.click();
				
				
				String expSaveValidationMessageOnSaveWithPurchaseANdVendorInptData=excelReader.getCellData("PurchaseVoucherN", 41, 7);
					
				String actMessage=checkValidationMessage(expSaveValidationMessageOnSaveWithPurchaseANdVendorInptData);
					
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 41, 8, actMessage);

				 
				 
				 
				/* getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessage));
				 String actSaveWithInputVendorAccountValidationMessage=errorMessage.getText();
				
				 excelReader.setCellData(xlfile, xlSheetName, 1533, 8, actSaveWithInputVendorAccountValidationMessage);
				
				 String expSaveWithInputVendorAccountValidationMsg     ="Controls marked with arrow mark, require Values";
				 String expSaveWithInputVendorAccountValidationMsgOne  ="Main -> Department";
				 String expSaveWithInputVendorAccountValidationMsgTwo  ="Main -> Warehouse";
				*/
					
				 System.out.println("*********************************************** checkPurchaseVoucherNewSaveWithVendorInput  ********************************************");
				 System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actMessage  +" Value Expected : "+expSaveValidationMessageOnSaveWithPurchaseANdVendorInptData);	
					
				    	
				if(actMessage.equalsIgnoreCase(expSaveValidationMessageOnSaveWithPurchaseANdVendorInptData))
				{
					
		            excelReader.setCellData(xlfile, "PurchaseVoucherN", 41, 9, resPass);
					return true;
				}
				else
				{
					
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 41, 9, resFail);
					return false;
				}
					
			}
			 catch (Exception e) 
			   {
				  String exception =e.getMessage();
				  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 41, 10, exception);
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				  return false;
			   }
			}
			
			
			
			
			
			

			
			public boolean checkPurchaseVoucherNewDueDateOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderDueDate));
				voucherHeaderDueDate.click();

				DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
				Date date=new Date();
				
		        String actCurrentDateInSimpleFormat=dateTxt.getAttribute("value");
		    	String expCurrentdate=dateFormat.format(date);
		        
		    	
		    	excelReader.setCellData(xlfile, "PurchaseVoucherN", 42, 7, actCurrentDateInSimpleFormat);
		    	
		    	
		        String actVoucherHeaderDueDate=voucherHeaderDueDate.getAttribute("value");
		        String expVoucherHeaderDueDate=dateFormat.format(date);
		        
		        
		        excelReader.setCellData(xlfile, "PurchaseVoucherN", 42, 8, actVoucherHeaderDueDate);
		        
		        
				System.out.println("*********************************************** checkPurchaseVoucherNewDueDateOption  ********************************************");
				System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actCurrentDateInSimpleFormat  +" Value Expected : "+expCurrentdate);	

				if(actCurrentDateInSimpleFormat.equalsIgnoreCase(expCurrentdate) && 
						actVoucherHeaderDueDate.equalsIgnoreCase(expVoucherHeaderDueDate))
				{
					System.out.println("Test Pass : Date Displayed as Current Date ");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 42, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Date Displayed as Current Date");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 42, 9, resFail);
					return false;
				}
			}
			 catch (Exception e) 
			   {
				  String exception =e.getMessage();
				  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 42, 10, exception);
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				  return false;
			   }
			}
			
			
			
			
			public boolean checkPurchaseVoucherNewCurrencyHasNotDefinedOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				
				voucherHeaderDueDate.click();
				voucherHeaderDueDate.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
				voucherHeaderCurrency.sendKeys(Keys.SPACE);
				
				WebElement options=voucherHeaderCurrency;
				
				ArrayList<String>  actVoucherHeaderCurrency= new ArrayList<String>(); 
			
				actVoucherHeaderCurrency.add("INR");
			    
				actVoucherHeaderCurrency.add("USD");
			    
				actVoucherHeaderCurrency.add("AED");
			      		    
				ArrayList<String> 
				
		        expVoucherHeaderCurrency = new ArrayList<String>(); 
				
				
				int count=currencyListCount.size();
				
				System.err.println(count);
				
				for(int i=0 ; i < count ;i++)
				{
					String data=currencyListCount.get(i).getText();
					System.err.println("IN FOR LOOP : "+data);
					expVoucherHeaderCurrency.add(data);
					
				}
				
				System.err.println(expVoucherHeaderCurrency);
				
				voucherHeaderCurrency.sendKeys(Keys.TAB);
				
				System.out.println("actVoucherHeaderCurrency"+actVoucherHeaderCurrency);
				
				System.out.println("expVoucherHeaderCurrency"+expVoucherHeaderCurrency);
				
				boolean VoucherHeaderCurrencyValue=actVoucherHeaderCurrency.equals(expVoucherHeaderCurrency);
				
				String actVoucherHeaderCurrencyValue=Boolean.toString(VoucherHeaderCurrencyValue);
				
				String  expVoucherHeaderCurrencyValue = excelReader.getCellData("PurchaseVoucherN", 43, 7);
				
		        excelReader.setCellData(xlfile, "PurchaseVoucherN", 43, 8, actVoucherHeaderCurrencyValue.toUpperCase());
				
				
				System.out.println("********************************************* checkPurchaseVoucherNewCurrencyHasNotDefinedOptions  ********************************************************");
				System.out.println("Entry Page Currency Has Not Define Value Actual  : "+actVoucherHeaderCurrency+       " Value Expected : "+expVoucherHeaderCurrency);
				System.out.println("Entry Page Currency Has Not Define Value Actual  : "+actVoucherHeaderCurrencyValue+  " Value Expected : "+expVoucherHeaderCurrencyValue);
				
			   
			   if(actVoucherHeaderCurrencyValue.equalsIgnoreCase(expVoucherHeaderCurrencyValue))
				{
					
				   excelReader.setCellData(xlfile, "PurchaseVoucherN", 43, 9, resPass);
					return true;
				}
				else
				{
					
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 43, 9, resFail);
					return false;
				}	
			}
			 catch (Exception e) 
			   {
				  String exception =e.getMessage();
				  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 43, 10, exception);
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				  return false;
			   }
			}
			
			
			@FindBy(xpath="//tbody[@id='id_header_268435459_table_body']/tr/td[2]")
		    private static List<WebElement> departmentListCount;
			
			public boolean checkPurchaseVoucherNewDepartment() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
					
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
				departmentTxt.click();
				
				departmentTxt.sendKeys(Keys.SPACE);
				
				
				WebElement options=departmentTxt;
				
				ArrayList<String> actDepartmentList= new ArrayList<String>(); 
			
				int count=departmentListCount.size();
				
				System.err.println(count);
				
				for(int i=0 ; i < count ;i++)
				{
					String data=departmentListCount.get(i).getText();
					System.err.println("IN FOR LOOP : "+data);
					actDepartmentList.add(data);
					
				}
				
				System.err.println(actDepartmentList);
				
				
				System.out.println("actDepartmentList"+actDepartmentList);
				
				
				String actDepartmentValue=actDepartmentList.toString();
				String expDepartmentValue=excelReader.getCellData("PurchaseVoucherN", 45, 7);
				
		        excelReader.setCellData(xlfile, "PurchaseVoucherN", 45, 8, actDepartmentValue);
				
				

				System.out.println("********************************************* checkPurchaseVoucherNewDepartment  ********************************************************");
				System.out.println("Entry Page Department Masters Value Actual  : "+actDepartmentValue     +"     Value Expected : "+expDepartmentValue);
			   
			   if(actDepartmentValue.equalsIgnoreCase(expDepartmentValue))
				{
					
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 44, 9, resPass);
					return true;
				}
				else
				{
					
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 44, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			   {
				  String exception =e.getMessage();
				  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 44, 10, exception);
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				  return false;
			   }
			
			}
			
			
			
			
			public boolean checkPurchaseVoucherNewSaveWithDepartmentInput() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try 
				{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
				saveBtn.click();
                 
				String expSaveValidationMessageOnSaveWithDepartmentInpt=excelReader.getCellData("PurchaseVoucherN", 46, 7);
				
				String actMessage=checkValidationMessage(expSaveValidationMessageOnSaveWithDepartmentInpt);
					
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 46, 8, actMessage);

				/*
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessage));
				String actSaveMessageWithInputDepartment=errorMessage.getText();
				
				excelReader.setCellData(xlfile, xlSheetName, 1538, 8, actSaveMessageWithInputDepartment);
				
				String expSaveMessageWithInputDepartment="Controls marked with arrow mark, require Values";
				String expSaveMessageWithInputDepartments="Main -> Warehouse";*/
				
				System.out.println("*********************************************** checkPurchaseVoucherNewSaveWithDepartmentInput  ********************************************");
				System.out.println("Entry Page Save Department Input Value Actual  : "+actMessage  +" Value Expected : "+expSaveValidationMessageOnSaveWithDepartmentInpt);	
				
				
				if(actMessage.equalsIgnoreCase(expSaveValidationMessageOnSaveWithDepartmentInpt))
				{
					System.out.println("Test Pass : Error Message Displayed");
					
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 46, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Error Message Not Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 46, 9, resFail);
					return false;
				}
			}
			 catch (Exception e) 
			   {
				  String exception =e.getMessage();
				  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 46, 10, exception);
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				  return false;
			   }
			}
				
			
			/*@FindBy(xpath="//tbody[@id='id_header_268435460_table_body']/tr")
		    private static List<WebElement> wareHouseListCount;
			*/
			
			public boolean checkPurchaseVoucherNewWarehouse() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
				wareHouseTxt.click();
				
				wareHouseTxt.sendKeys(Keys.SPACE);
				
				WebElement options=wareHouseTxt;
				
				ArrayList<String>  actWarehouseList= new ArrayList<String>(); 
				
			
				actWarehouseList.add("HYDERABAD");
			    
				actWarehouseList.add("MUMBAI");
			    
				actWarehouseList.add("SECUNDERABAD");
			   
				actWarehouseList.add("STWH");   	
				
				actWarehouseList.add("WH1");  
				
			    
			    
				ArrayList<String> expWarehouseList = new ArrayList<String>(); 
				
				int count=wareHouseListCount.size();
				
				String actWarehouseCount=Integer.toString(count);
				String expWarehouseCount= excelReader.getCellData("PurchaseVoucherN", 48, 7);
				
		        excelReader.setCellData(xlfile, "PurchaseVoucherN", 48, 8, actWarehouseCount);
				
				System.err.println(count);
				
				for(int i=0 ; i < count ;i++)
				{
					String data=wareHouseListCount.get(i).getText();
					System.err.println("IN FOR LOOP : "+data);
					expWarehouseList.add(data);
					
				}
				
				System.err.println(expWarehouseList);
				
				
				System.out.println("actWarehouseList"+actWarehouseList);
				
				System.out.println("expWarehouseList"+expWarehouseList);
				
				boolean WarhouseValue=actWarehouseList.equals(expWarehouseList);
				
				String actWarhouseValue=Boolean.toString(WarhouseValue);
				String expWarhouseValue=excelReader.getCellData("PurchaseVoucherN", 49, 7);
				
		        excelReader.setCellData(xlfile, "PurchaseVoucherN", 49, 8, actWarhouseValue.toUpperCase());
			
				System.out.println("*********************************************** checkPurchaseVoucherNewWarehouse  ********************************************");
				System.out.println("Entry Page Warehouse Value Actual  : "+actWarehouseList  +" Value Expected : "+expWarehouseList);	
				System.out.println("Entry Page Warehouse Value Actual  : "+actWarhouseValue  +" Value Expected : "+expWarhouseValue);
			   
			   if(actWarhouseValue.equalsIgnoreCase(expWarhouseValue) )
				{
					
				   excelReader.setCellData(xlfile, "PurchaseVoucherN", 47, 9, resPass);
					return true;
				}
				else
				{
					
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 47, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			   {
				  String exception =e.getMessage();
				  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 47, 10, exception);
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				  return false;
			   }
				
			
			}
			
			public boolean checkPurchaseVoucherNewSaveWithWarehouseInput() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
					
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
				saveBtn.click();
				
				String expSaveValidationMessageOnSaveWithoutBodyRows=excelReader.getCellData("PurchaseVoucherN", 50, 7);
				
				String emptyRowsMessage=checkValidationMessage(expSaveValidationMessageOnSaveWithoutBodyRows);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 50, 8, emptyRowsMessage);

				System.out.println("*********************************************** checkPurchaseVoucherNewSaveWithWarehouseInput  ********************************************");
				
				System.out.println("Entry Page Save with Vendor Input Value Actual  : "+emptyRowsMessage+" Value Expected : "+"TRUE");	
				
				
				if (emptyRowsMessage.equalsIgnoreCase(expSaveValidationMessageOnSaveWithoutBodyRows))
				{
					System.out.println("Test Pass : Error Message Displayed");
		            excelReader.setCellData(xlfile, "PurchaseVoucherN", 50, 9, resPass);;
					return true;
				}
				else
				{
					System.out.println("Test Pass : Error MEssage is Not Displayed ");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 50, 9, resFail);
					return false;
				}
			}
			 catch (Exception e) 
			   {
				  String exception =e.getMessage();
				  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 50, 10, exception);
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				  return false;
			   }
			}
				
			
			
			
			public boolean checkPurchaseVoucherNewVouchersEntryPageNew() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
				try
				{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
				documentNumberTxt.click();
				documentNumberTxt.clear();
				documentNumberTxt.sendKeys(excelReader.getCellData("PurchaseVoucherN", 52, 6));
				documentNumberTxt.sendKeys(Keys.TAB);
				
				String actGetDocumentNumberInputs=documentNumberTxt.getAttribute("value");
				String expGetDocumentNumberInputs=excelReader.getCellData("PurchaseVoucherN", 52, 7);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 52, 8, actGetDocumentNumberInputs);
				
				System.out.println("Test Pass : Entered 2 in DOC NO");
					
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_newBtn));
				new_newBtn.click();
				
				boolean res = getIsAlertPresent();
				
				if(res==true)
				{
					
					getWaitForAlert();
						
					getFluentWebDriverWait().until(ExpectedConditions.alertIsPresent());
						
					String actAlertMessageOnClickOnNewBtn=getDriver().switchTo().alert().getText();
					
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 53, 8, actAlertMessageOnClickOnNewBtn);
					
					String expAlertMessageOnClickOnNewBtn="The contents of the voucher are changed.";
					String expAlertMessageOnClickOnNewBtnn="Are you sure that you want to ignore the changes?";
						
				getDriver().switchTo().alert().accept();
				}
				Thread.sleep(2000);
					
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
				String actGetDocumentNumberInputAfterClickOnNewBtn=documentNumberTxt.getAttribute("value");
				String expGetDocumentNumberInputAfterClickOnNewBtn=excelReader.getCellData("PurchaseVoucherN", 54, 7);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 54, 8, actGetDocumentNumberInputAfterClickOnNewBtn);
					
				System.out.println("*********************************************** checkPurchaseVoucherNewVouchersEntryPageNew  ********************************************");
				System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actGetDocumentNumberInputs                 +" Value Expected : "+expGetDocumentNumberInputs);	
				//System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actAlertMessageOnClickOnNewBtn             +" Value Expected : "+expAlertMessageOnClickOnNewBtn+expAlertMessageOnClickOnNewBtnn);
				System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actGetDocumentNumberInputAfterClickOnNewBtn+" Value Expected : "+expGetDocumentNumberInputAfterClickOnNewBtn);
				
					
				if(actGetDocumentNumberInputs.equalsIgnoreCase(expGetDocumentNumberInputs)/* && actAlertMessageOnClickOnNewBtn.startsWith(expAlertMessageOnClickOnNewBtn) && actAlertMessageOnClickOnNewBtn.endsWith(expAlertMessageOnClickOnNewBtnn)*/ 
						&& actGetDocumentNumberInputAfterClickOnNewBtn.equalsIgnoreCase(expGetDocumentNumberInputAfterClickOnNewBtn))
				{
					System.out.println("Test Pass : DOC NO is 1");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 51, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Customize Pop Up NOT Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 51, 9, resFail);
					return false;
				}
			}
			 catch (Exception e) 
			   {
				  String exception =e.getMessage();
				  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 51, 10, exception);
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				  return false;
			   }
			}
			
			
			
			public boolean checkPurchaseVoucherNewWithCurrencyInputAndExcgRate() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try 
				{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
				purchaseAccountTxt.click();
				purchaseAccountTxt.sendKeys(Keys.SPACE);
				
				int count=purchaseAccountListCount.size();
				
				System.err.println(count);
				
				for(int i=0 ; i < count ;i++)
				{
					String data=purchaseAccountListCount.get(i).getText();
					
					if(data.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherN", 56, 6)))
					{
						purchaseAccountListCount.get(i).click();
						
						break;
					}
				}
				
				purchaseAccountTxt.sendKeys(Keys.TAB);

		        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
				vendorAccountTxt.click();
				vendorAccountTxt.sendKeys(Keys.SPACE);
				
				int vendorcount=vendorAccountListCount.size();
				
				System.err.println(vendorcount);
				
				for(int i=0 ; i < vendorcount ;i++)
				{
					String data=vendorAccountListCount.get(i).getText();
					
					if(data.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherN", 57, 6)))
					{
						vendorAccountListCount.get(i).click();
						
						break;
					}
				}
				
				vendorAccountTxt.sendKeys(Keys.TAB);
				raiseReceiptsChkBox.sendKeys(Keys.TAB);
				voucherHeaderDueDate.sendKeys(Keys.TAB);

				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
				voucherHeaderCurrency.sendKeys(Keys.SPACE);
				
				
				int currencycount=currencyListCount.size();
				
				System.err.println(currencycount);
					
				for(int i=0 ; i < currencycount ;i++)
				{
					String data=currencyListCount.get(i).getText();
					
					if(data.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherN", 58, 6)))
					{
						currencyListCount.get(i).click();
						
						break;
					}
				}
					
				voucherHeaderCurrency.sendKeys(Keys.TAB);
				voucherHeaderExchangeRate.click();
				
				String actExchangeRate=voucherHeaderExchangeRate.getAttribute("value");
				String expExchangeRate=excelReader.getCellData("PurchaseVoucherN", 59, 7);
				
		        excelReader.setCellData(xlfile, "PurchaseVoucherN", 59, 8, actExchangeRate);

				System.out.println("*********************************************** checkPurchaseVoucherNewWithCurrencyInputAndExcgRate  ********************************************");
				System.out.println("Entry Page Exchange Rate Value Actual  : "+actExchangeRate  +" Value Expected : "+expExchangeRate);	
				
				
				if (actExchangeRate.equalsIgnoreCase(expExchangeRate))
				{
					
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 55, 9, resPass);
					return true;
				}
				else
				{
					
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 55, 9, resFail);
					return false;
				}	
			}
			 catch (Exception e) 
			   {
				  String exception =e.getMessage();
				  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 55, 10, exception);
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				  return false;
			   }
				
			}
			
				
			public boolean checkCurrencyWithAED() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderDueDate));
				voucherHeaderDueDate.click();
				voucherHeaderDueDate.sendKeys(Keys.TAB);
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
				
				voucherHeaderCurrency.sendKeys(Keys.SPACE);
					
				int currencycount=currencyListCount.size();
				
				System.err.println(currencycount);
					
				for(int i=0 ; i < currencycount ;i++)
				{
					String data=currencyListCount.get(i).getText();
					
					if(data.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherN", 61, 6)))
					{
						currencyListCount.get(i).click();
						
						break;
					}
				}
					
				voucherHeaderCurrency.sendKeys(Keys.TAB);
				voucherHeaderExchangeRate.click();
				
				String actExchangeRate=voucherHeaderExchangeRate.getAttribute("value");
				String expExchangeRate=excelReader.getCellData("PurchaseVoucherN", 62, 7);
				
		        excelReader.setCellData(xlfile, "PurchaseVoucherN", 62, 8, actExchangeRate);
				
				
				System.out.println("*********************************************** checkCurrencyWithAED  ********************************************");
				System.out.println("Entry Page Exchange Rate Value Actual  : "+actExchangeRate  +" Value Expected : "+expExchangeRate);	
						
				if (actExchangeRate.equalsIgnoreCase(expExchangeRate) )
				   {
						System.out.println("Test Pass : Exchange Rate Is Updated ");
						excelReader.setCellData(xlfile, "PurchaseVoucherN", 60, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail :  Exchange Rate Is  NOt Updated ");
						excelReader.setCellData(xlfile, "PurchaseVoucherN", 60, 9, resFail);
						return false;
					}	
			}
			 catch (Exception e) 
			   {
				  String exception =e.getMessage();
				  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 60, 10, exception);
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				  return false;
			   }
			}
			
			
			

			public boolean checkCurrencyWithUSD() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				
				voucherHeaderDueDate.click();
				voucherHeaderDueDate.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
				
				voucherHeaderCurrency.sendKeys(Keys.SPACE);
					
				int currencycount=currencyListCount.size();
				
				System.err.println(currencycount);
					
				for(int i=0 ; i < currencycount ;i++)
				{
					String data=currencyListCount.get(i).getText();
					
					if(data.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherN", 64, 6)))
					{
						currencyListCount.get(i).click();
						
						break;
					}
				}
					
				voucherHeaderCurrency.sendKeys(Keys.TAB);
				
				
				voucherHeaderExchangeRate.click();
				
				
				String actCurrencyUSDExchangeRate=voucherHeaderExchangeRate.getAttribute("value");
				String expCurrencyUSDExchangeRate=excelReader.getCellData("PurchaseVoucherN", 65, 7);
				
		        excelReader.setCellData(xlfile, "PurchaseVoucherN", 65, 8, actCurrencyUSDExchangeRate);
				
				System.out.println("*********************************************** checkCurrencyWithUSD  ********************************************");
				System.out.println("Entry Page Exchange Rate Value Actual  : "+actCurrencyUSDExchangeRate  +" Value Expected : "+expCurrencyUSDExchangeRate);	
			
						
				if (actCurrencyUSDExchangeRate.equalsIgnoreCase(expCurrencyUSDExchangeRate) )
				   {
						System.out.println("Test Pass : Exchange Rate Is Updated ");
						excelReader.setCellData(xlfile, "PurchaseVoucherN", 63, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail :  Exchange Rate Is  NOt Updated ");
						excelReader.setCellData(xlfile, "PurchaseVoucherN", 63, 9, resFail);
						return false;
					}
			}
			catch (Exception e) 
			   {
				  String exception =e.getMessage();
				  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 63, 10, exception);
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				  return false;
			   }
			}
			
			

			 public boolean checkExchangeRateAndLocalExchangeReateWithCurrencyAEDInPurchaseVoucherN() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		     {
		            
		            excelReader=new ExcelReader(POJOUtility.getExcelPath());
		            xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		            
		            try
		            {
		            
		            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		            departmentTxt.click();
		            departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		            departmentTxt.sendKeys(Keys.SPACE);
				
		               
		            WebElement options=departmentTxt;
		    		
		            int OpeningBalDepartmentListCount=openingBalDepartmentList.size();
					
					 for (int i = 0; i < OpeningBalDepartmentListCount; i++) 
				 	 {
						String data=openingBalDepartmentList.get(i).getText();
						
						if (data.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherN", 69, 6)))
						{
							openingBalDepartmentList.get(i).click();
							break;
						}
				 	 }
		            
					 departmentTxt.sendKeys(Keys.TAB);
		       
					 Thread.sleep(2000);
		            
		            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		            voucherHeaderCurrency.click();
		            voucherHeaderCurrency.sendKeys(Keys.SHIFT,Keys.HOME);
		            voucherHeaderCurrency.sendKeys(Keys.SPACE);
				
				     int openingBalCurrencyListCount=openingBalCurrencyList.size();
					
					 for (int i = 0; i < openingBalCurrencyListCount; i++) 
				 	 {
						String data=openingBalCurrencyList.get(i).getText();
						
						if (data.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherN", 70, 6)))
						{
							openingBalCurrencyList.get(i).click();
							break;
						}
				 	 }
		            
		            voucherHeaderCurrency.sendKeys(Keys.TAB);
		                 
		            String actExchangeRate=voucherHeaderExchangeRate.getAttribute("value");
		            String expExchangeRate=excelReader.getCellData("PurchaseVoucherN", 71, 7);
			 		
		            excelReader.setCellData(xlfile, "PurchaseVoucherN", 71, 8, actExchangeRate);
		            
		            String actLocExchangeRate=voucherHeaderLocalExchangeRate.getAttribute("value");
		            String expLocExchangeRate=excelReader.getCellData("PurchaseVoucherN", 72, 7);
			 		
		            excelReader.setCellData(xlfile, "PurchaseVoucherN", 72, 8, expLocExchangeRate);
		            
		            
		            System.out.println("voucherHeaderExchangeRate      : "+actExchangeRate+" Value Expected : "+expExchangeRate);
		            System.out.println("voucherHeaderLocalExchangeRate : "+actLocExchangeRate+" Value Expected : "+expLocExchangeRate);
		            
		            if (actExchangeRate.equalsIgnoreCase(expExchangeRate) && actLocExchangeRate.equalsIgnoreCase(expLocExchangeRate) )
		            		
		               {
		                            System.out.println("Test Pass : Exchange Rate Is Updated ");
		                            excelReader.setCellData(xlfile, "PurchaseVoucherN", 66, 9, resPass);
		                            return true;
		                    }
		                    else
		                    {
		                            System.out.println("Test Fail :  Exchange Rate Is  NOt Updated ");
		                            excelReader.setCellData(xlfile, "PurchaseVoucherN", 66, 9, resFail);
		                            return false;
		                    } 
		            }
		            catch (Exception e) 
		  		  {
		  			  String exception =e.getMessage();
		  			  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 66, 10, exception);
		  			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  			  return false;
		  		  }
		  		   }
			 
			 public boolean checkExchangeRateAndLocalExchangeReateWithCurrencyUSDInpurchaseVoucherN() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		     {
		            excelReader=new ExcelReader(POJOUtility.getExcelPath());
		            xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		            
		            try 
		            {
		            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		            voucherHeaderCurrency.click();
		            voucherHeaderCurrency.sendKeys(Keys.SHIFT,Keys.HOME);
		            voucherHeaderCurrency.sendKeys(Keys.SPACE);
				
				    int openingBalCurrencyListCount=openingBalCurrencyList.size();
					
					 for (int i = 0; i < openingBalCurrencyListCount; i++) 
				 	 {
						String data=openingBalCurrencyList.get(i).getText();
						
						if (data.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherN", 74, 6)))
						{
							openingBalCurrencyList.get(i).click();
							break;
						}
				 	 }
		            
		            voucherHeaderCurrency.sendKeys(Keys.TAB);
		            
		            String actExchangeRate=voucherHeaderExchangeRate.getAttribute("value");
		            String expExchangeRate=excelReader.getCellData("PurchaseVoucherN", 75, 7);
		            
		            excelReader.setCellData(xlfile, "PurchaseVoucherN", 75, 8, actExchangeRate);
		            
		            String actLocExchangeRate=voucherHeaderLocalExchangeRate.getAttribute("value");
		            String expLocExchangeRate=excelReader.getCellData("PurchaseVoucherN", 76, 7);
		           
		            excelReader.setCellData(xlfile, "PurchaseVoucherN", 76, 8, actLocExchangeRate);
		            
		            System.out.println("voucherHeaderExchangeRate      : "+actExchangeRate+" Value Expected : "+expExchangeRate);
		            System.out.println("voucherHeaderLocalExchangeRate : "+actLocExchangeRate+" Value Expected : "+expLocExchangeRate);
		            
		            if (actExchangeRate.equalsIgnoreCase(expExchangeRate) && actLocExchangeRate.equalsIgnoreCase(expLocExchangeRate) )
		               {
		                            System.out.println("Test Pass : Exchange Rate Is Updated ");
		                            excelReader.setCellData(xlfile, "PurchaseVoucherN", 73, 9, resPass);
		                            return true;
		                    }
		                    else
		                    {
		                            System.out.println("Test Fail :  Exchange Rate Is  NOt Updated ");
		                            excelReader.setCellData(xlfile, "PurchaseVoucherN", 73, 9, resFail);
		                            return false;
		                    }  
		            
		            }
		            catch (Exception e) 
		  		  {
		  			  String exception =e.getMessage();
		  			  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 73, 10, exception);
		  			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  			  return false;
		  		  }
		  		   }
		            
		    

			 
			 public boolean checkExchangeRateAndLocalExchangeRateWithCurrencyINRInPurchaseVoucherN() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		     {
		            excelReader=new ExcelReader(POJOUtility.getExcelPath());
		            xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		            
		            try
		            {
		            	
		            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		            voucherHeaderCurrency.click();
		            voucherHeaderCurrency.sendKeys(Keys.SHIFT,Keys.HOME);
		            voucherHeaderCurrency.sendKeys(Keys.SPACE);
				
				     int openingBalCurrencyListCount=openingBalCurrencyList.size();
					
					 for (int i = 0; i < openingBalCurrencyListCount; i++) 
				 	 {
						String data=openingBalCurrencyList.get(i).getText();
						
						if (data.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherN", 78, 6)))
						{
							openingBalCurrencyList.get(i).click();
							break;
						}
				 	 }
		            
		            voucherHeaderCurrency.sendKeys(Keys.TAB);
		            
		            String actExchangeRate=voucherHeaderExchangeRate.getAttribute("value");
		            String expExchangeRate=excelReader.getCellData("PurchaseVoucherN", 79, 7);
		            
		            excelReader.setCellData(xlfile, "PurchaseVoucherN", 79, 8, actExchangeRate);
		            

		            String actLocExchangeRate=voucherHeaderLocalExchangeRate.getAttribute("value");
		            String expLocExchangeRate=excelReader.getCellData("PurchaseVoucherN", 80, 7);
		           
		            excelReader.setCellData(xlfile, "PurchaseVoucherN", 80, 8, actLocExchangeRate);
		            
		            System.out.println("voucherHeaderExchangeRate      : "+actExchangeRate+" Value Expected : "+expExchangeRate);
		            System.out.println("voucherHeaderLocalExchangeRate : "+actLocExchangeRate+" Value Expected : "+expLocExchangeRate);   
		            
		            if (actExchangeRate.equalsIgnoreCase(expExchangeRate) && actLocExchangeRate.equalsIgnoreCase(expLocExchangeRate) )
		            {
		                    System.out.println("Test Pass : Exchange Rate Is Updated ");
		                    excelReader.setCellData(xlfile, "PurchaseVoucherN", 77, 9, resPass);
		                    return true;
		             }
		             else
		             {
		                    System.out.println("Test Fail :  Exchange Rate Is  NOt Updated ");
		                    excelReader.setCellData(xlfile, "PurchaseVoucherN", 77, 9, resFail);
		                    return false;
		             }  
		            }
		            catch (Exception e) 
		  		  {
		  			  String exception =e.getMessage();
		  			  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 77, 10, exception);
		  			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  			  return false;
		  		  }
		  		   
		    }
			  
					
				public boolean checkSavingPurchaseVoucherNewWithEmptyRows() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
				{
				
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

				try
				{
					
					
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
					
					wareHouseTxt.sendKeys(Keys.SPACE);
						
					int warehousecount=wareHouseListCount.size();
					
					System.err.println(warehousecount);
						
					for(int i=0 ; i < warehousecount ;i++)
					{
						String data=wareHouseListCount.get(i).getText();
						
						if(data.equalsIgnoreCase("HYDERABAD"))
						{
							wareHouseListCount.get(i).click();
							
							break;
						}
					}
						
					wareHouseTxt.sendKeys(Keys.TAB);
					
					
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
					saveBtn.click();
					
					String expSaveValidationMessageOnSaveWithoutBodyRows=excelReader.getCellData("PurchaseVoucherN", 81, 7);
					
					String emptyRowsMessage=checkValidationMessage(expSaveValidationMessageOnSaveWithoutBodyRows);
					
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 81, 8, emptyRowsMessage);
					
					System.out.println("*********************************************** checkSavingPurchaseVoucherNewWithEmptyRows  ********************************************");
					System.out.println("Entry Page Save with Vendor Input Value Actual  : "+emptyRowsMessage+" Value Expected : "+"TRUE");	
					
					
					if (emptyRowsMessage.equalsIgnoreCase(expSaveValidationMessageOnSaveWithoutBodyRows))
					{
						excelReader.setCellData(xlfile, "PurchaseVoucherN", 81, 9, resPass);
						return true;
					} 
					else 
					{
						excelReader.setCellData(xlfile, "PurchaseVoucherN", 81, 9, resFail);
						return false;
					}
				}
				catch (Exception e) 
				   {
					  String exception =e.getMessage();
					  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 81, 10, exception);
					  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
					  return false;
				   }
				
				}

					
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
				
			
			
			
			
			
			public boolean checkLocalExchangeRateWithDepartmentAmericaCurrencyUSD() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				voucherHeaderExchangeRate.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
				
				departmentTxt.sendKeys(Keys.SPACE);
					
				int departmentcount=departmentListCount.size();
				
				System.err.println(departmentcount);
					
				for(int i=0 ; i < departmentcount ;i++)
				{
					String data=departmentListCount.get(i).getText();
					
					if(data.equalsIgnoreCase("AMERICA"))
					{
						departmentListCount.get(i).click();
						
						break;
					}
				}
					
				departmentTxt.sendKeys(Keys.TAB);
				
				Thread.sleep(2000);
				voucherHeaderLocalExchangeRate.click();
				
				
				String actLocalExchangeRateWithDepartmentAsAmerica=voucherHeaderLocalExchangeRate.getAttribute("value");
			    String expLocalExchangeRateWithDepartmentAsAmerica="4.2800000000";	
				

				System.out.println("*********************************************** checkLocalExchangeRateWithDepartmentAmericaCurrencyUSD  ********************************************");
				System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actLocalExchangeRateWithDepartmentAsAmerica  +" Value Expected : "+expLocalExchangeRateWithDepartmentAsAmerica);	
				
				
				if (actLocalExchangeRateWithDepartmentAsAmerica.equalsIgnoreCase(expLocalExchangeRateWithDepartmentAsAmerica) )
				   {
						System.out.println("Test Pass : Exchange Rate Is Updated ");
						excelReader.setCellData(xlfile, "Sheet6", 119, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail :  Exchange Rate Is  NOt Updated ");
						excelReader.setCellData(xlfile, "Sheet6", 119, 9, resFail);
						return false;
					}	
			}
			
			
			
			
			

			public boolean checkLocalExchangeRateWithDepartmentDUBAI() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				voucherHeaderExchangeRate.click();
				voucherHeaderExchangeRate.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
				
				departmentTxt.sendKeys(Keys.SPACE);
					
				int departmentcount=departmentListCount.size();
				
				System.err.println(departmentcount);
					
				for(int i=0 ; i < departmentcount ;i++)
				{
					String data=departmentListCount.get(i).getText();
					
					if(data.equalsIgnoreCase("DUBAI"))
					{
						departmentListCount.get(i).click();
						
						break;
					}
				}
					
				departmentTxt.sendKeys(Keys.TAB);
				
				
				voucherHeaderLocalExchangeRate.click();
				
				
				String actLocalExchangeRateWithDepartmentAsDubai=voucherHeaderLocalExchangeRate.getAttribute("value");
				String expLocalExchangeRateWithDepartmentAsDubai="4.2800000000";
				

				System.out.println("*********************************************** checkLocalExchangeRateWithDepartmentDUBAI  ********************************************");
				System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actLocalExchangeRateWithDepartmentAsDubai  +" Value Expected : "+expLocalExchangeRateWithDepartmentAsDubai);	
				
				
						
				if (actLocalExchangeRateWithDepartmentAsDubai.equalsIgnoreCase(expLocalExchangeRateWithDepartmentAsDubai) )
			   {
						System.out.println("Test Pass : Exchange Rate Is Updated ");
						excelReader.setCellData(xlfile, "Sheet6", 120, 9, resPass);
						return true;
			   }
			   else
			   {
						System.out.println("Test Fail :  Exchange Rate Is  NOt Updated ");
						excelReader.setCellData(xlfile, "Sheet6", 120, 9, resFail);
						return false;
			   }	
			}
			
			
			

			public boolean checkLocalExchangeRateWithDepartmentINDIA() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				voucherHeaderExchangeRate.click();
				voucherHeaderExchangeRate.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
				
				departmentTxt.sendKeys(Keys.SPACE);
					
				int departmentcount=departmentListCount.size();
				
				System.err.println(departmentcount);
					
				for(int i=0 ; i < departmentcount ;i++)
				{
					String data=departmentListCount.get(i).getText();
					
					if(data.equalsIgnoreCase("INDIA"))
					{
						departmentListCount.get(i).click();
						
						break;
					}
				}
					
				departmentTxt.sendKeys(Keys.TAB);
				
				
				//voucherHeaderLocalExchangeRate.click();
				
				
				String actLocalExchangeRateBySelectingDepartmentAsIndia=voucherHeaderLocalExchangeRate.getAttribute("value");
				String expLocalExchangeRateBySelectingDepartmentAsIndia="4.2800000000";
				

				System.out.println("*********************************************** checkLocalExchangeRateWithDepartmentINDIA  ********************************************");
				System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actLocalExchangeRateBySelectingDepartmentAsIndia  +" Value Expected : "+expLocalExchangeRateBySelectingDepartmentAsIndia);	
				
						
				if (actLocalExchangeRateBySelectingDepartmentAsIndia.equalsIgnoreCase(expLocalExchangeRateBySelectingDepartmentAsIndia) )
				   {
						System.out.println("Test Pass : Exchange Rate Is Updated ");
						excelReader.setCellData(xlfile, "Sheet6", 121, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail :  Exchange Rate Is  NOt Updated ");
						excelReader.setCellData(xlfile, "Sheet6", 121, 9, resFail);
						return false;
					}	
			}
			
			
			

			public boolean checkLocalExchangeRateWithDepartmentWALES()throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				voucherHeaderExchangeRate.click();
				voucherHeaderExchangeRate.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
				
				departmentTxt.sendKeys(Keys.SPACE);
					
				int departmentcount=departmentListCount.size();
				
				System.err.println(departmentcount);
					
				for(int i=0 ; i < departmentcount ;i++)
				{
					String data=departmentListCount.get(i).getText();
					
					if(data.equalsIgnoreCase("WALES"))
					{
						departmentListCount.get(i).click();
						
						break;
					}
				}
					
				departmentTxt.sendKeys(Keys.TAB);	
							
				String actLocalExchangeRateOnSelectingDepartmentAsWales=voucherHeaderLocalExchangeRate.getAttribute("value");
				String expLocalExchangeRateOnSelectingDepartmentAsWales="4.2800000000";
				
				System.out.println("*********************************************** checkLocalExchangeRateWithDepartmentWALES  ********************************************");
				System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actLocalExchangeRateOnSelectingDepartmentAsWales  +" Value Expected : "+expLocalExchangeRateOnSelectingDepartmentAsWales);	
										
			    if (actLocalExchangeRateOnSelectingDepartmentAsWales.equalsIgnoreCase(expLocalExchangeRateOnSelectingDepartmentAsWales) )
			     {
					System.out.println("Test Pass : Exchange Rate Is Updated ");
					excelReader.setCellData(xlfile, "Sheet6", 122, 9, resPass);
					return true;
				 }
				 else
				 {
					System.out.println("Test Fail :  Exchange Rate Is  NOt Updated ");
					excelReader.setCellData(xlfile, "Sheet6", 122, 9, resFail);
					return false;
				 }	
			}
			

			
			public boolean checkExchangeRateAndLocalExchangeRateWithCurrencyAED() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				voucherHeaderDueDate.click();
				voucherHeaderDueDate.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
				
				voucherHeaderCurrency.sendKeys(Keys.SPACE);
					
				int currencycount=currencyListCount.size();
				
				System.err.println(currencycount);
					
				for(int i=0 ; i < currencycount ;i++)
				{
					String data=currencyListCount.get(i).getAttribute("data-scurrencycode");
					
					if(data.equalsIgnoreCase("AED"))
					{
						currencyListCount.get(i).click();
						
						break;
					}
				}
					
				voucherHeaderCurrency.sendKeys(Keys.TAB);
				
				String actExchangeRateOnChangeOfCurrencyToAED=voucherHeaderExchangeRate.getAttribute("value");
			    String actLocalExchangeRateOnChangeOfCurrencyToAED=voucherHeaderLocalExchangeRate.getAttribute("value");
				
				String expExchangeRateOnChangeOfCurrencyToAED="14.0000000000";
				String expLocalExchangeRateOnChangeOfCurrencyToAED="1.0000000000";
				

				System.out.println("*********************************************** checkExchangeRateAndLocalExchangeReatewithCurrencyAED  ********************************************");
				System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actExchangeRateOnChangeOfCurrencyToAED       +" Value Expected : "+expExchangeRateOnChangeOfCurrencyToAED);	
				System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actLocalExchangeRateOnChangeOfCurrencyToAED  +" Value Expected : "+expLocalExchangeRateOnChangeOfCurrencyToAED);
			
				if (actExchangeRateOnChangeOfCurrencyToAED.equalsIgnoreCase(expExchangeRateOnChangeOfCurrencyToAED) 
						&& actLocalExchangeRateOnChangeOfCurrencyToAED.equalsIgnoreCase(expLocalExchangeRateOnChangeOfCurrencyToAED) )
				   {
						System.out.println("Test Pass : Exchange Rate Is Updated ");
						excelReader.setCellData(xlfile, "Sheet6", 123, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail :  Exchange Rate Is  NOt Updated ");
						excelReader.setCellData(xlfile, "Sheet6", 123, 9, resFail);
						return false;
					}	
			}
			

			public boolean checkExchangeRateAndLocalExchangeRateWithCurrencyUSD() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				voucherHeaderDueDate.click();
				voucherHeaderDueDate.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
				
				voucherHeaderCurrency.sendKeys(Keys.SPACE);
					
				int currencycount=currencyListCount.size();
				
				System.err.println(currencycount);
					
				for(int i=0 ; i < currencycount ;i++)
				{
					String data=currencyListCount.get(i).getAttribute("data-scurrencycode");
					
					if(data.equalsIgnoreCase("USD"))
					{
						currencyListCount.get(i).click();
						
						break;
					}
				}
					
				voucherHeaderCurrency.sendKeys(Keys.TAB);
				
				String actExchangeRateOnChangeOfCurrencyToUSD=voucherHeaderExchangeRate.getAttribute("value");
				String expExchangeRateOnChangeOfCurrencyToUSD="60.0000000000";
				
				String actLocalExchangeRateOnChnageOfCurrencyToUSD=voucherHeaderLocalExchangeRate.getAttribute("value");
				String expLocalExchangeRateOnChnageOfCurrencyToUSD="4.2800000000";
				
				System.out.println("*********************************************** checkExchangeRateAndLocalExchangeReatewithCurrencyUSD  ********************************************");
				System.out.println("ExchangeRateOnChangeOfCurrencyToUSD      : "+actExchangeRateOnChangeOfCurrencyToUSD       +" Value Expected : "+expExchangeRateOnChangeOfCurrencyToUSD);	
				System.out.println("LocalExchangeRateOnChnageOfCurrencyToUSD : "+actLocalExchangeRateOnChnageOfCurrencyToUSD  +" Value Expected : "+expLocalExchangeRateOnChnageOfCurrencyToUSD);
			
				
				if (actExchangeRateOnChangeOfCurrencyToUSD.equalsIgnoreCase(expExchangeRateOnChangeOfCurrencyToUSD)
						&& actLocalExchangeRateOnChnageOfCurrencyToUSD.equalsIgnoreCase(expLocalExchangeRateOnChnageOfCurrencyToUSD) )
				   {
						System.out.println("Test Pass : Exchange Rate Is Updated ");
						excelReader.setCellData(xlfile, "Sheet6", 124, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail :  Exchange Rate Is  NOt Updated ");
						excelReader.setCellData(xlfile, "Sheet6", 124, 9, resFail);
						return false;
					}	
			}
			

			public boolean checkExchangeRateAndLocalExchangeRateWithCurrencyINR()throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
				purchaseAccountTxt.click();
				purchaseAccountTxt.sendKeys(Keys.SPACE);
				
				int count=purchaseAccountListCount.size();
				
				System.err.println(count);
				
				for(int i=0 ; i < count ;i++)
				{
					String data=purchaseAccountListCount.get(i).getText();
					
					if(data.equalsIgnoreCase("Purchase"))
					{
						purchaseAccountListCount.get(i).click();
						
						break;
					}
				}
				
				purchaseAccountTxt.sendKeys(Keys.TAB);

		        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
				vendorAccountTxt.click();
				vendorAccountTxt.sendKeys(Keys.SPACE);
				
				int vendorcount=vendorAccountListCount.size();
				
				System.err.println(vendorcount);
				
				for(int i=0 ; i < vendorcount ;i++)
				{
					String data=vendorAccountListCount.get(i).getText();
					
					if(data.equalsIgnoreCase("Vendor a"))
					{
						vendorAccountListCount.get(i).click();
						
						break;
					}
				}
				
				vendorAccountTxt.sendKeys(Keys.TAB);
				
				
				raiseReceiptsChkBox.sendKeys(Keys.TAB);
				
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
				
				voucherHeaderCurrency.sendKeys(Keys.SPACE);
					
				int currencycount=currencyListCount.size();
				
				System.err.println(currencycount);
					
				for(int i=0 ; i < currencycount ;i++)
				{
					String data=currencyListCount.get(i).getText();
					
					if(data.equalsIgnoreCase("INR"))
					{
						currencyListCount.get(i).click();
						
						break;
					}
				}
				
				voucherHeaderCurrency.sendKeys(Keys.TAB);
				
				voucherHeaderExchangeRate.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
				
				departmentTxt.sendKeys(Keys.SPACE);
					
				int departmentcount=departmentListCount.size();
				
				System.err.println(departmentcount);
					
				for(int i=0 ; i < departmentcount ;i++)
				{
					String data=departmentListCount.get(i).getText();
					
					if(data.equalsIgnoreCase("INDIA"))
					{
						departmentListCount.get(i).click();
						
						break;
					}
				}
					
				departmentTxt.sendKeys(Keys.TAB);	
				
			
				voucherHeaderLocalExchangeRate.click();
				voucherHeaderLocalExchangeRate.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
				
				wareHouseTxt.sendKeys(Keys.SPACE);
					
				int warehousecount=wareHouseListCount.size();
				
				System.err.println(warehousecount);
					
				for(int i=0 ; i < warehousecount ;i++)
				{
					String data=wareHouseListCount.get(i).getText();
					
					if(data.equalsIgnoreCase("HYDERABAD"))
					{
						wareHouseListCount.get(i).click();
						
						break;
					}
				}
					
				wareHouseTxt.sendKeys(Keys.TAB);
				
				String actExchnageRateOnChangingCurrencyToINR=voucherHeaderExchangeRate.getAttribute("value");
				String expExchnageRateOnChangingCurrencyToINR="1.0000000000";
				
				String actLocalExchnageRateOnChangingCurrencyToINR=voucherHeaderLocalExchangeRate.getAttribute("value");
				String expLocalExchnageRateOnChangingCurrencyToINR="0.0700000000";
				
				
				
				System.out.println("*********************************************** checkExchangeRateAndLocalExchangeReatewithCurrencyINR  ********************************************");
				System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actExchnageRateOnChangingCurrencyToINR       +" Value Expected : "+expExchnageRateOnChangingCurrencyToINR);	
				System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actLocalExchnageRateOnChangingCurrencyToINR  +" Value Expected : "+expLocalExchnageRateOnChangingCurrencyToINR);
			
				
				
				
				
				if (actExchnageRateOnChangingCurrencyToINR.equalsIgnoreCase(expExchnageRateOnChangingCurrencyToINR) 
						&& actLocalExchnageRateOnChangingCurrencyToINR.equalsIgnoreCase(expLocalExchnageRateOnChangingCurrencyToINR) )
				   {
						System.out.println("Test Pass : Exchange Rate Is Updated ");
						excelReader.setCellData(xlfile, "Sheet6", 125, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail :  Exchange Rate Is  NOt Updated ");
						excelReader.setCellData(xlfile, "Sheet6", 125, 9, resFail);
						return false;
					}	
			}

			
			
		///////////////////

		//Purchase Voucher New Body
	
			

		public boolean checkEnteringDataInFirstRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{	
			
					
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
				select1stRow_1stColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
				enter_ItemTxt.sendKeys(Keys.SPACE);
				
				int itemcount=itemListCount.size();
				
				System.err.println(itemcount);
					
				for(int i=0 ; i < itemcount ;i++)
				{
					String data=itemListCount.get(i).getText();
					
					if(data.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherN", 101, 6)))
					{
						itemListCount.get(i).click();
						
						break;
					}
				}
					
				enter_ItemTxt.sendKeys(Keys.TAB);	
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
				select1stRow_5thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
				enter_Quantity.click();
				enter_Quantity.clear();
				enter_Quantity.sendKeys(excelReader.getCellData("PurchaseVoucherN", 102, 6));
				enter_Quantity.sendKeys(Keys.TAB);
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
				enter_Rate.click();
				enter_Rate.clear();
				enter_Rate.sendKeys(excelReader.getCellData("PurchaseVoucherN", 103, 6));
				enter_Rate.sendKeys(Keys.TAB);
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
				enter_Gross.click();
				enter_Gross.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
				
				String actR1C1Item =select1stRow_1stColumn.getText();
				String actR1C2Units=select1stRow_2ndColumn.getText();
				String actR1C5Qty  =select1stRow_5thColumn.getText();
				String actR1C7Rate =select1stRow_7thColumn.getText();
				String actR1C8Gross=select1stRow_8thColumn.getText();
				
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 104, 8, actR1C1Item);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 105, 8, actR1C2Units);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 106, 8, actR1C5Qty);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 107, 8, actR1C7Rate);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 108, 8, actR1C8Gross);
				
				String expR1C1Item =excelReader.getCellData("PurchaseVoucherN", 104, 7);
				String expR1C2Units=excelReader.getCellData("PurchaseVoucherN", 105, 7);
				String expR1C5Qty  =excelReader.getCellData("PurchaseVoucherN", 106, 7);
				String expR1C7Rate =excelReader.getCellData("PurchaseVoucherN", 107, 7);
				String expR1C8Gross=excelReader.getCellData("PurchaseVoucherN", 108, 7);
				


				System.out.println("*********************************************** checkEnteringDatainFirstRow  ********************************************");
				System.out.println("Entry Page Save with Vendor Item Value Actual   : "+actR1C1Item   +" Value Expected : "+expR1C1Item);	
				System.out.println("Entry Page Save with Vendor Units Value Actual  : "+actR1C2Units  +" Value Expected : "+expR1C2Units);
				System.out.println("Entry Page Save with Vendor QTY Value Actual    : "+actR1C5Qty    +" Value Expected : "+expR1C5Qty);
				System.out.println("Entry Page Save with Vendor RATE Value Actual   : "+actR1C7Rate   +" Value Expected : "+expR1C7Rate);
				System.out.println("Entry Page Save with Vendor Gross Value Actual  : "+actR1C8Gross  +" Value Expected : "+expR1C8Gross);
				
				
				
				
				if(actR1C1Item.equalsIgnoreCase(expR1C1Item) && actR1C2Units.equalsIgnoreCase(expR1C2Units) && actR1C5Qty.equalsIgnoreCase(expR1C5Qty) 
					&& actR1C7Rate.equalsIgnoreCase(expR1C7Rate) && actR1C8Gross.equalsIgnoreCase(expR1C8Gross) )
				{
					System.out.println("Test Pass : Data Entered in first Row");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 99, 9, resPass);

					return true;
				}
				else
				{
					System.out.println("Test Fail : Data NOT Entered in first Row");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 99, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
		    {
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 99, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
		    }	
			}
			



			
			public boolean checkSavingVoucherWithoutBatchPurchaseVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
			
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				try
				{
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
				saveBtn.click();
				
				
				String expSaveMessageValidationWithoutBatch=excelReader.getCellData("PurchaseVoucherN", 110, 7);
				
				String validationMessage=checkValidationMessage(expSaveMessageValidationWithoutBatch);
				
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 110, 8, validationMessage);
				
				System.out.println("*********************************************** checkSavingVoucherWithoutBatchPurchaseVoucher  ********************************************");
				System.out.println("Entry Page Save with Vendor Input Value Actual  : "+validationMessage+" Value Expected : "+"TRUE");	
				
				
				if(validationMessage.equalsIgnoreCase(expSaveMessageValidationWithoutBatch))
				{
					System.out.println("Test Pass : Error Message Is As Expected");
					
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 109, 9, resPass);
					
					return true;
				}
				else
				{
					System.out.println("Test Fail : Error Message Is NOT As Expected");
					
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 109, 9, resFail);
					
					return false;
				}
				}
				catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 109, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			   	 	return false;
				}
			}
			
			
			
			
			public boolean checkSavingVoucherWithoutExpiryDatePurchaseVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_10thColumn));
				select1stRow_10thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
				enter_Batch.click();
				enter_Batch.sendKeys(excelReader.getCellData("PurchaseVoucherN", 112, 6));
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
				saveBtn.click();
				
				String expSaveMessageValidationWithoutBatchExpiry=excelReader.getCellData("PurchaseVoucherN", 113, 7);
				
				String validationMessage=checkValidationMessage(expSaveMessageValidationWithoutBatchExpiry);
				

				excelReader.setCellData(xlfile, "PurchaseVoucherN", 113, 8, validationMessage);

				System.out.println("*********************************************** checkSavingVoucherWithoutExpiryDatePurchaseVoucher  ********************************************");
				System.out.println("Entry Page Save with Vendor Input Value Actual  : "+validationMessage+" Value Expected : "+"TRUE");	
				
				
				
				if(validationMessage.equalsIgnoreCase(expSaveMessageValidationWithoutBatchExpiry))
				{
					System.out.println("Test Pass : Error Message Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 111, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test fail : Error Message NOT Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 111, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 111, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
			}
		
			}
			
	  
	  
			public boolean checkInputExpiryDateOfBatchInPurchaseVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				try
				{
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_10thColumn));
				select1stRow_10thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
				enter_Batch.click();
				enter_Batch.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
				enter_Expirydate.sendKeys(Keys.TAB);
				
				DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
				Date date=new Date();
				System.out.println(df.format(date));
				
				//Actdata is current date
				
				String actBatchExpiryColumnAfterInput=select1stRow_12thColumn.getText();
				
				String expBatchExpiryColumnAfterInput=df.format(date);
				

				System.out.println("*********************************************** checkExpiryDateOfBatchPurchaseVoucher  ********************************************");
				System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actBatchExpiryColumnAfterInput  +" Value Expected : "+expBatchExpiryColumnAfterInput);	

				if(actBatchExpiryColumnAfterInput.equalsIgnoreCase(expBatchExpiryColumnAfterInput))
				{
					System.out.println("Test Pass : Expiry date is Correct");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 114, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Expiry date is NOt Correct");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 114, 9, resFail);
					
					return false;
				}
			}
				catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 114, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			   	 	return false;
				}
			}
			
			
			public boolean checkEnteringDataInSecondRowOfPurchaseVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{

			    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
				enter_ItemTxt.sendKeys(Keys.SPACE);
				
				int itemcount=itemListCount.size();
				
				System.err.println(itemcount);
					
				for(int i=0 ; i < itemcount ;i++)
				{
					String data=itemListCount.get(i).getText();
					
					if(data.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherN", 116, 6)))
					{
						itemListCount.get(i).click();
						
						break;
					}
				}
					
				enter_ItemTxt.sendKeys(Keys.TAB);	
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_5thColumn));
				select2ndRow_5thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
				enter_Quantity.click();
				enter_Quantity.clear();
				enter_Quantity.sendKeys(excelReader.getCellData("PurchaseVoucherN", 117, 6));
				enter_Quantity.sendKeys(Keys.TAB);
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
				enter_Rate.click();
				enter_Rate.clear();
				enter_Rate.sendKeys(excelReader.getCellData("PurchaseVoucherN", 118, 6));
				enter_Rate.sendKeys(Keys.TAB);
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
				enter_Gross.click();
				enter_Gross.sendKeys(Keys.TAB);
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchTxt));
				
				boolean actBinSearchTxt      =binSearchTxt.isDisplayed();
				boolean actBinSearchBtn      =binSearchBtn.isDisplayed();
				boolean actBinAutoAllocateBtn=binAutoAllocateBtn.isDisplayed();
				boolean actBinPickBtn        =binPickBtn.isDisplayed();
				boolean actBinCancelBtn      =binCancelBtn.isDisplayed();

				boolean expBinSearchTxt      =true;
				boolean expBinSearchBtn      =true;
				boolean expBinAutoAllocateBtn=true;
				boolean expBinPickBtn        =true;
				boolean expBinCancelBtn      =true;
				

				System.out.println("*********************************************** checkEnteringDataInSecondRowOfPurchaseVoucher  ********************************************");
				System.out.println(" BinSearch Input Value Actual          : "+actBinSearchTxt        +" Value Expected : "+expBinSearchTxt);	
				System.out.println(" BinSearchBtn Input Value Actual       : "+actBinSearchBtn        +" Value Expected : "+expBinSearchBtn);
				System.out.println(" BinAutoAllocateBtn Input Value Actual : "+actBinAutoAllocateBtn  +" Value Expected : "+expBinAutoAllocateBtn);
				System.out.println(" BinPickBtn Input Value Actual         : "+actBinPickBtn          +" Value Expected : "+expBinPickBtn);
				System.out.println(" BinCancelBtn Input Value Actual       : "+actBinCancelBtn        +" Value Expected : "+expBinCancelBtn);
				
				
		       getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binselect1stRow_2ndColumn));
				
		        String actBinGroupNameR1=binselect1stRow_2ndColumn.getText();
				
				String actBinNameR2=binselect2ndRow_2ndColumn.getText();
				String actBinStockR2=binselect2ndRow_3rdColumn.getText();
				String actBinCapacityR2=binselect2ndRow_4thColumn.getText();
				String actBinLoadR2=binselect2ndRow_5thColumn.getText();
				String actBinFreeSpaceR2=binselect2ndRow_6thColumn.getText();
				String actBinFreeQtyR2=binselect2ndRow_7thColumn.getText();
				String actBinToBeAllocatedR2=binselect2ndRow_8thColumn.getText();
					
				
				String actBinNameR3=binselect3rdRow_2ndColumn.getText();
				String actBinStockR3=binselect3rdRow_3rdColumn.getText();
				String actBinCapacityR3=binselect3rdRow_4thColumn.getText();
				String actBinLoadR3=binselect3rdRow_5thColumn.getText();
				String actBinFreeSpaceR3=binselect3rdRow_6thColumn.getText();
				String actBinFreeQtyR3=binselect3rdRow_7thColumn.getText();
				String actBinToBeAllocatedR3=binselect3rdRow_8thColumn.getText();
				
				String actBinTotalQty=binTotalQty.getAttribute("value");
				String actBinBaseUom=binBaseUOM.getText();
				String actBinBalanceQty=binBalanceTxt.getAttribute("value");

			   
				String actBinSum=binSumInward.getText();
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 119, 8, actBinGroupNameR1);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 120, 8, actBinNameR2);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 121, 8, actBinStockR2);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 122, 8, actBinCapacityR2);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 123, 8, actBinLoadR2);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 124, 8, actBinFreeSpaceR2);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 125, 8, actBinFreeQtyR2);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 126, 8, actBinToBeAllocatedR2);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 127, 8, actBinNameR3);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 128, 8, actBinStockR3);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 129, 8, actBinCapacityR3);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 130, 8, actBinLoadR3);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 131, 8, actBinFreeSpaceR3);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 132, 8, actBinFreeQtyR3);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 133, 8, actBinToBeAllocatedR3);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 134, 8, actBinTotalQty);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 135, 8, actBinBaseUom);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 136, 8, actBinBalanceQty);
				
				
				
				String expBinGroupNameR1=excelReader.getCellData("PurchaseVoucherN", 119, 7);
		
				String expBinNameR2=excelReader.getCellData("PurchaseVoucherN", 120, 7);
				String expBinStockR2=excelReader.getCellData("PurchaseVoucherN", 121, 7);
				String expBinCapacityR2=excelReader.getCellData("PurchaseVoucherN", 122, 7);
				String expBinLoadR2=excelReader.getCellData("PurchaseVoucherN", 123, 7);
				String expBinFreeSpaceR2=excelReader.getCellData("PurchaseVoucherN", 124, 7);
				String expBinFreeQtyR2=excelReader.getCellData("PurchaseVoucherN", 125, 7);
				String expBinToBeAllocatedR2=excelReader.getCellData("PurchaseVoucherN", 126, 7);
					
				String expBinNameR3=excelReader.getCellData("PurchaseVoucherN", 127, 7);
				String expBinStockR3=excelReader.getCellData("PurchaseVoucherN", 128, 7);
				String expBinCapacityR3=excelReader.getCellData("PurchaseVoucherN", 129, 7);
				String expBinLoadR3=excelReader.getCellData("PurchaseVoucherN", 130, 7);
				String expBinFreeSpaceR3=excelReader.getCellData("PurchaseVoucherN", 131, 7);
				String expBinFreeQtyR3=excelReader.getCellData("PurchaseVoucherN", 132, 7);
				String expBinToBeAllocatedR3=excelReader.getCellData("PurchaseVoucherN", 133, 7);
				
				
				String expBinTotalQty=excelReader.getCellData("PurchaseVoucherN", 134, 7);
				String expBinBaseUom=excelReader.getCellData("PurchaseVoucherN", 135, 7);
				String expBinBalanceQty=excelReader.getCellData("PurchaseVoucherN", 136, 7);
				
				//String expBinSum="12.00";
						
				
		        System.out.println("First Row Group Name Value Actual       :  " + actBinGroupNameR1       +"  Value Expected : " + expBinGroupNameR1);
				
				System.out.println("Second Row Bin Name Value Actual        :  " + actBinNameR2            +"  Value Expected : " + expBinNameR2);
				System.out.println("Second Row Stock Value Actual           :  " + actBinStockR2           +"  Value Expected : " + expBinStockR2);
				System.out.println("Second Row Capacity Value Actual        :  " + actBinCapacityR2        +"  Value Expected : " + expBinCapacityR2);
				System.out.println("Second Row Load Value Actual            :  " + actBinLoadR2            +"  Value Expected : " + expBinLoadR2);
				System.out.println("Second Row Free Space Value Actual      :  " + actBinFreeSpaceR2       +"  Value Expected : " + expBinFreeSpaceR2);
				System.out.println("Second Row Free Qty Value Actual        :  " + actBinFreeQtyR2         +"  Value Expected : " + expBinFreeQtyR2);
				System.out.println("Second Row To Be Allocated Value Actual :  " + actBinToBeAllocatedR2   +"  Value Expected : " + expBinToBeAllocatedR2);
					
				System.out.println("Third Row Bin Name Value Actual         :  " + actBinNameR3            +"  Value Expected : " + expBinNameR3);
				System.out.println("Third Row Stock Value Actual            :  " + actBinStockR3           +"  Value Expected : " + expBinStockR3);
				System.out.println("Third Row Capacity Value Actual         :  " + actBinCapacityR3        +"  Value Expected : " + expBinCapacityR3);
				System.out.println("Third Row Load Value Actual             :  " + actBinLoadR3            +"  Value Expected : " + expBinLoadR3);
				System.out.println("Third Row Free Space Value Actual       :  " + actBinFreeSpaceR3       +"  Value Expected : " + expBinFreeSpaceR3);
				System.out.println("Third Row Free Qty Value Actual         :  " + actBinFreeQtyR3         +"  Value Expected : " + expBinFreeQtyR3);
				System.out.println("Third Row To Be Allocated Value Actual  :  " + actBinToBeAllocatedR3   +"  Value Expected : " + expBinToBeAllocatedR3);
				
				System.out.println("Bin Total Qty Value Actual              :  " +actBinTotalQty           +"  Value Expected : " +expBinTotalQty);
				System.out.println("Bin Base Uom Value Actual               :  " +actBinBaseUom            +"  Value Expected : " +expBinBaseUom);
				System.out.println("Bin Balance Txt Value Actual            :  " +actBinBalanceQty         +"  Value Expected : " +expBinBalanceQty);
			
				
				if(actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn 
					&& actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn
					
					&& actBinGroupNameR1.equalsIgnoreCase(expBinGroupNameR1)
					
					&& actBinNameR2.equalsIgnoreCase(expBinNameR2) && actBinStockR2.equalsIgnoreCase(expBinStockR2) 
					&& actBinCapacityR2.equalsIgnoreCase(expBinCapacityR2) && actBinLoadR2.equalsIgnoreCase(expBinLoadR2)
					&& actBinFreeSpaceR2.equalsIgnoreCase(expBinFreeSpaceR2) && actBinFreeQtyR2.equalsIgnoreCase(expBinFreeQtyR2)
					&& actBinToBeAllocatedR2.equalsIgnoreCase(expBinToBeAllocatedR2)
					
					&& actBinNameR3.equalsIgnoreCase(expBinNameR3) && actBinStockR3.equalsIgnoreCase(expBinStockR3) 
					&& actBinCapacityR3.equalsIgnoreCase(expBinCapacityR3) && actBinLoadR3.equalsIgnoreCase(expBinLoadR3)
					&& actBinFreeSpaceR3.equalsIgnoreCase(expBinFreeSpaceR3) && actBinFreeQtyR3.equalsIgnoreCase(expBinFreeQtyR3)
					&& actBinToBeAllocatedR3.equalsIgnoreCase(expBinToBeAllocatedR3)
					
					&& actBinTotalQty.equalsIgnoreCase(expBinTotalQty) && actBinBaseUom.equalsIgnoreCase(expBinBaseUom) 
					&& actBinBalanceQty.equalsIgnoreCase(expBinBalanceQty))
					
				{
					System.out.println("Test Pass : Bin Pop Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 115, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Bin Pop NOT Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 115, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 115, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
			}
			}
			
			
			
			public boolean checkPurchaseVoucherNewSelectingBin4ThroughDoubleClick() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binselect2ndRow_1stColumn));
				getAction().doubleClick(binselect2ndRow_1stColumn).build().perform();
						
				boolean BinOkButtonIsEnable=binOkBtn.isEnabled();
				
				String actBinOkButtonIsEnable=Boolean.toString(BinOkButtonIsEnable);
				String expBinOkButtonIsEnable=excelReader.getCellData("PurchaseVoucherN", 138, 7);
				
			    excelReader.setCellData(xlfile, "PurchaseVoucherN", 138, 8, actBinOkButtonIsEnable.toUpperCase());
				
				String actBinScreenToBeAllocatedColumnR2C8=binselect2ndRow_8thColumn.getText();
				String expBinScreenToBeAllocatedColumnR2C8=excelReader.getCellData("PurchaseVoucherN", 139, 7);
				
			    excelReader.setCellData(xlfile, "PurchaseVoucherN", 139, 8, actBinScreenToBeAllocatedColumnR2C8);
				
							
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
				binOkBtn.click();
				
				String actVoucherBinColumnR2C10=select2ndRow_10thColumn.getText();
				String expVoucherBinColumnR2C10=excelReader.getCellData("PurchaseVoucherN", 140, 7);
				
			    excelReader.setCellData(xlfile, "PurchaseVoucherN", 140, 8, actVoucherBinColumnR2C10);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_10thColumn));
				

				System.out.println("*********************************************** checkPurchaseVoucherNewSelectingBin5ThroughDoubleClick  ********************************************");
				System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actBinOkButtonIsEnable                 +" Value Expected : "+expBinOkButtonIsEnable);	
				System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actBinScreenToBeAllocatedColumnR2C8    +" Value Expected : "+expBinScreenToBeAllocatedColumnR2C8);
				System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actVoucherBinColumnR2C10               +" Value Expected : "+expVoucherBinColumnR2C10);
			
				if(actBinOkButtonIsEnable.equalsIgnoreCase(expBinOkButtonIsEnable) && actBinScreenToBeAllocatedColumnR2C8.equalsIgnoreCase(expBinScreenToBeAllocatedColumnR2C8)
						&& actVoucherBinColumnR2C10.equalsIgnoreCase(expVoucherBinColumnR2C10))
				{

					System.out.println("test pass : Bin 5 Displayed in Voucher");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 137, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("test fail : Bin 5 NOT Displayed in Voucher");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 137, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 137, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
			}
			}
			
			
			
			
			
			
			public boolean checkEnteringDatainThirdRowAndSaveForRmaValidation() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
				select3rdRow_1stColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
				enter_ItemTxt.sendKeys(Keys.LEFT_SHIFT,Keys.HOME);
				enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
				enter_ItemTxt.sendKeys(Keys.SPACE);
				
				int itemcount=itemListCount.size();
				
				System.err.println(itemcount);
					
				for(int i=0 ; i < itemcount ;i++)
				{
					String data=itemListCount.get(i).getText();
					
					if(data.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherN", 142, 6)))
					{
						itemListCount.get(i).click();	
						break;
					}
				}
					
				enter_ItemTxt.sendKeys(Keys.TAB);	
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
				saveBtn.click();
				
				String expErrorMessage=excelReader.getCellData("PurchaseVoucherN", 143, 7);

				String validationMessage=checkValidationMessage(expErrorMessage);
				
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 143, 8, validationMessage);
				
				System.out.println("************************************* checkEnteringDatainThirdRowAndSaveForRmaValidation  *********************************");
				
				System.out.println("Message On Rma Mandatory       :  " + validationMessage+" Value Expected : " +"TRUE");
				
				if(validationMessage.equalsIgnoreCase(expErrorMessage))
				{
					System.out.println("Test Pass : error Message Displayed");
					
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 141, 9, resPass);
					
					return true;
				}
				else
				{
					System.out.println("Test Fail : error Message Displayed");
					
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 141, 9, resFail);
								
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 141, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
			}
			}
			
			
			
			
			
			
			public boolean checkPurchaseVoucherEnteringDataRmaWithZeroQuantity() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_12thColumn));
				select3rdRow_12thColumn.click();
				
				String expErrorMessage=excelReader.getCellData("PurchaseVoucherN", 145, 7);
				
				String validationMessage=checkValidationMessage(expErrorMessage);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 145, 8, validationMessage);
				
				
				System.out.println("************************************* checkEnteringDataRmaWithZeroQuantity  *********************************");
				
				System.out.println("Message On Rma With Zero Qty     :  " +validationMessage +" Value Expected : " +"TRUE");
					
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaCancelBtn));
				rmaCancelBtn.click();
				
				
				if(validationMessage.equalsIgnoreCase(expErrorMessage))
				{
					System.out.println("Test Pass : error Message Displayed");
					
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 144, 9, resPass);
					
					return true;
				}
				else
				{
					System.out.println("Test Fail : error Message Displayed");
					
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 144, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 144, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
			}
			}
			
			
			
			
		
			public boolean checkPurchaseVoucherNewRMAPopupScreen() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
			{	
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_5thColumn));
				select3rdRow_5thColumn.click();
				
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
				enter_Quantity.click();
				enter_Quantity.clear();
				enter_Quantity.sendKeys(excelReader.getCellData("PurchaseVoucherN", 147, 6));
				enter_Quantity.sendKeys(Keys.TAB);
				
				Thread.sleep(1000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
				enter_Rate.click();
				enter_Rate.clear();
				enter_Rate.sendKeys(excelReader.getCellData("PurchaseVoucherN", 148, 6));
				enter_Rate.sendKeys(Keys.TAB);
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_12thColumn));
				select3rdRow_12thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(rmaScreenTitle));
				
				// Actual
				boolean actRmaSerialNumberTxtField=rmaSerialNumberTxtField.isDisplayed();
				boolean actRmaQuantityTxtField=rmaQuantityTxtField.isDisplayed();
				boolean actRmaAddBtn=rmaAddBtn.isDisplayed();
				boolean actRmaNumberofItemsLabel=rmaNumberofItemsLabel.isDisplayed();
				boolean actRmaTableHeadingRMA=rmaTableHeadingRMA.isDisplayed();
				boolean actRmaTableHeadingDocumentNo=rmaTableHeadingDocumentNo.isDisplayed();
				boolean actRmaTableHeadingDocumentDate=rmaTableHeadingDocumentDate.isDisplayed();
				boolean actRmaClearBtn=rmaClearBtn.isDisplayed();
				boolean actRmaOkBtn=rmaOkBtn.isDisplayed();
				boolean actRmaCancelBtn=rmaCancelBtn.isDisplayed();
				boolean actRmaCloseBtn=rmaCloseBtn.isDisplayed();
				
				// Expected
				boolean exprmaSerialNumberTxtField=true;
				boolean exprmaQuantityTxtField=true;
				boolean exprmaAddBtn=true;
				boolean exprmaNumberofItemsLabel=true;
				boolean exprmaTableHeadingRMA=true;
				boolean exprmaTableHeadingDocumentNo=true;
				boolean exprmaTableHeadingDocumentDate=true;
				boolean exprmaClearBtn=true;
				boolean exprmaOkBtn=true;
				boolean exprmaCancelBtn=true;
				boolean exprmaCloseBtn=true;
				
				
				System.out.println("************************************* checkRMAPopupScreen  *********************************");
				
				System.out.println("Rma Serial Number Text Field 	   : "+actRmaSerialNumberTxtField	   +"  Value Expected : "+exprmaSerialNumberTxtField);
				System.out.println("Rma Qty Field              	 	   : "+actRmaQuantityTxtField		   +"  Value Expected : "+exprmaQuantityTxtField);
				System.out.println("Rma Add Button 					   : "+actRmaAddBtn					   +"  Value Expected : "+exprmaAddBtn);
				System.out.println("Rma Number Of Items 			   : "+actRmaNumberofItemsLabel		   +"  Value Expected : "+exprmaNumberofItemsLabel);
				System.out.println("Rma Table heading Rma  			   : "+actRmaTableHeadingRMA		   +"  Value Expected : "+exprmaTableHeadingRMA);
				System.out.println("Rma Table Heading Document Number  : "+actRmaTableHeadingDocumentNo    +"  Value Expected : "+exprmaTableHeadingDocumentNo);
				System.out.println("Rma Table Heading Document Date    : "+actRmaTableHeadingDocumentDate  +"  Value Expected : "+exprmaTableHeadingDocumentDate);
				System.out.println("Rma Clear Button                   : "+actRmaClearBtn				   +"  Value Expected : "+exprmaClearBtn);
				System.out.println("Rma Ok Button                      : "+actRmaOkBtn					   +"  Value Expected : "+exprmaOkBtn);
				System.out.println("Rma Cancel Button                  : "+actRmaCancelBtn				   +"  Value Expected : "+exprmaCancelBtn);
				System.out.println("Rma Close Button  				   : "+actRmaCloseBtn				   +"  Value Expected : "+exprmaCloseBtn);
				
				if(actRmaSerialNumberTxtField==exprmaSerialNumberTxtField && actRmaQuantityTxtField==exprmaQuantityTxtField  && actRmaAddBtn==exprmaAddBtn
						&& actRmaNumberofItemsLabel==exprmaNumberofItemsLabel && actRmaNumberofItemsLabel==exprmaTableHeadingRMA
						&& actRmaTableHeadingDocumentNo==exprmaTableHeadingDocumentNo && actRmaTableHeadingDocumentDate==exprmaTableHeadingDocumentDate
						&& actRmaClearBtn==exprmaClearBtn && actRmaOkBtn==exprmaOkBtn && actRmaCancelBtn==exprmaCancelBtn && actRmaCloseBtn==exprmaCloseBtn)
				{
					System.out.println("***Test Pass: RMA Popup Screen Appeared with all the Options***");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 146, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("***Test Fail: RMA Popup Screen NOT Appeared with all the Options***");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 146, 9, resFail);
					return false;
				}
				}
				catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 146, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			   	 	return false;
				}
			}
			

			public boolean checkPurchaseVoucherNewInputingSerialNumbers() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				
				try
				{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaSerialNumberTxtField));
				rmaSerialNumberTxtField.click();
				rmaSerialNumberTxtField.sendKeys(excelReader.getCellData("PurchaseVoucherN", 150, 6));
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaAddBtn));
				rmaAddBtn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaTableRow1Column1));
				String actRmavalueR1=rma_EnterRMA.getAttribute("value");
				String expRmavalueR1=excelReader.getCellData("PurchaseVoucherN", 151, 7);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaTableRow2Column1));
				String actRmavalueR2=rmaTableRow2Column1.getText();
				String expRmavalueR2=excelReader.getCellData("PurchaseVoucherN", 152, 7);
				
					
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaTableRow3Column1));
				String actRmavalueR3=rmaTableRow3Column1.getText();
				String expRmavalueR3=excelReader.getCellData("PurchaseVoucherN", 153, 7);
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaTableRow4Column1));
				String actRmavalueR4=rmaTableRow4Column1.getText();
				String expRmavalueR4=excelReader.getCellData("PurchaseVoucherN", 154, 7);
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaTableRow5Column1));
				String actRmavalueR5=rmaTableRow5Column1.getText();
				String expRmavalueR5=excelReader.getCellData("PurchaseVoucherN", 155, 7);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 151, 8, actRmavalueR1);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 152, 8, actRmavalueR2);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 153, 8, actRmavalueR3);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 154, 8, actRmavalueR4);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 155, 8, actRmavalueR5);
				
				
				System.out.println("************************************* checkInputingSerialNumbers  *********************************");
				System.out.println("Rma value Row 1 In Rma Pop Up  : "+actRmavalueR1+"  Value Expected : "+expRmavalueR1);
				System.out.println("Rma value Row 2 In Rma Pop Up  : "+actRmavalueR2+"  Value Expected : "+expRmavalueR2);
				System.out.println("Rma value Row 3 In Rma Pop Up  : "+actRmavalueR3+"  Value Expected : "+expRmavalueR3);
				System.out.println("Rma value Row 4 In Rma Pop Up  : "+actRmavalueR4+"  Value Expected : "+expRmavalueR4);
				System.out.println("Rma value Row 5 In Rma Pop Up  : "+actRmavalueR5+"  Value Expected : "+expRmavalueR5);
				
				if(actRmavalueR1.equalsIgnoreCase(expRmavalueR1) && actRmavalueR2.equalsIgnoreCase(expRmavalueR2)
						&& actRmavalueR3.equalsIgnoreCase(expRmavalueR3) && actRmavalueR4.equalsIgnoreCase(expRmavalueR4)
						&& actRmavalueR5.equalsIgnoreCase(expRmavalueR5))
				{
					System.out.println("Test Pass : Allowing Different Serial numbers");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 149, 9, resPass);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaOkBtn));
					rmaOkBtn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
					enter_RMA.sendKeys(Keys.TAB);
					
					return true;
				}
				else
				{
					System.out.println("Test Fail : NOT Allowing Different Serial numbers");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 149, 9, resFail);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaOkBtn));
					rmaOkBtn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
					enter_RMA.sendKeys(Keys.TAB);
					
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 149, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaOkBtn));
				rmaOkBtn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
				enter_RMA.sendKeys(Keys.TAB);
		   	 	return false;
			}
			}

			
			
			 public boolean checkPurchaseVoucherNewAddingStockItemInFourthRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			 {
					
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
					
				try
				{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
					enter_ItemTxt.sendKeys(Keys.SPACE);
					
					int itemcount=itemListCount.size();
					
					System.err.println(itemcount);
						
					for(int i=0 ; i < itemcount ;i++)
					{
						String data=itemListCount.get(i).getText();
						
						if(data.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherN", 157, 6)))
						{
							itemListCount.get(i).click();
							
							break;
						}
					}
						
					enter_ItemTxt.sendKeys(Keys.TAB);	
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
					enter_UnitTxt.sendKeys(Keys.TAB);
					
					String actdata            = select4thRow_2ndColumn.getText();
					String expdata            = excelReader.getCellData("PurchaseVoucherN", 158, 7);
					
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 158, 8, actdata);
					

					System.out.println("Rma value Row 1 In Rma Pop Up  : "+actdata+"  Value Expected : "+expdata);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_5thColumn));
					select4thRow_5thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
					enter_Quantity.click();
					enter_Quantity.clear();
					enter_Quantity.sendKeys(excelReader.getCellData("PurchaseVoucherN", 159, 6));
					enter_Quantity.sendKeys(Keys.TAB);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
					enter_Rate.click();
					enter_Rate.clear();
					enter_Rate.sendKeys(excelReader.getCellData("PurchaseVoucherN", 160, 6));
					enter_Rate.sendKeys(Keys.TAB);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
					enter_Gross.sendKeys(Keys.TAB);

					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_3rdColumn));
					String act1                = select4thRow_5thColumn.getText();
					String act2                = select4thRow_7thColumn.getText();
					String actGross            = select4thRow_8thColumn.getText();
				
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 161, 8, actGross);
					String exp1,exp2,expGross,exp4;
					
					exp1                        = "5.00";
					exp2                        = "9.00";
					expGross                    = excelReader.getCellData("PurchaseVoucherN", 161, 7);
									
					System.out.println("Rma value Row 2 In Rma Pop Up  : "+act1+"  Value Expected : "+exp1);
					System.out.println("Rma value Row 3 In Rma Pop Up  : "+act2+"  Value Expected : "+exp2);
					System.out.println("Rma value Row 4 In Rma Pop Up  : "+actGross+"  Value Expected : "+expGross);
									
					if(actdata.equalsIgnoreCase(expdata) && act1.equalsIgnoreCase(exp1) && act2.equalsIgnoreCase(exp2)
							&& actGross.equalsIgnoreCase(expGross))
					{
						System.out.println("Test Pass : Data Entered in Fourth Row");
						excelReader.setCellData(xlfile, "PurchaseVoucherN", 156, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail : Data NOT Entered in Fourth Row");
						excelReader.setCellData(xlfile, "PurchaseVoucherN", 156, 9, resFail);
						return false;
					}		
				  }
				catch (Exception e) 
			    {
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 156, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			   	 	return false;
			    }	

				}
				
				
/*			//Bill Reference Screen 	
				

				@FindBy(xpath="//input[@id='txtNewReference']")
				private static WebElement  billRefNewReferenceTxt;
				
				@FindBy(xpath="//input[@id='txtOnAccount']")
				private static WebElement  billRefTxtOnAccount;		
					
				@FindBy(xpath="//input[@id='Searchtxt']")
				private static WebElement  billRefSearchTxt;		
				
				@FindBy(xpath="//select[@id='cbmShowBillForAdjustment']")
				private static WebElement  billRefNewReferenceDropdown;		
				
				@FindBy(xpath="//select[@id='cbmShowBills']")
				private static WebElement  billRefShowBillsDropdown;		
				
				@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_11']//div[contains(text(),'Due Date')]")
				private static WebElement  billRefGridHeaderDueDate;		
				
				@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_16']//div[contains(text(),'Currency')]")
				private static WebElement  billRefGridHeaderCurrency;		
				
				@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_21']//div[contains(text(),'Original Amt')]")
				private static WebElement  billRefGridHeaderOrginalAmt;		
				
				@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_23']//div[contains(text(),'Balance Amount')]")
				private static WebElement  billRefGridHeaderBalanceAmt;		
				
				@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_33']//div[contains(text(),'Adjustment Amount')]")
				private static WebElement  billRefGridHeaderAdjustmentAmt;		
				
				@FindBy(xpath="//div[contains(text(),'Native Currency')]")
				private static WebElement  billRefGridHeaderNativeCurrency;		
				
				@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_41']//div[contains(text(),'Narration')]")
				private static WebElement  billRefGridHeaderNarration;		
				
				@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_50']//div[contains(text(),'Previous Adjustment Amount')]")
				private static WebElement  billRefGridHeaderPreviosAdjustmentAmt;		
				
				@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_1-0']")
				private static WebElement  billRefGridFirstRow;	
				
				@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_1-1']//input")
				private static WebElement  billRefGridFirstRowChkbox;		
				
				@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_2-1']//input")
				private static WebElement  billRefGridSecondRowChkbox;	*/	
				
				/*@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_3-1']//input")
				private static WebElement  billRefGridThirdRowChkbox;		
				
				@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_1-33']")
				private static WebElement  billRefGridFirstRowAdjustmentAmtTxt;		
				
				@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_2-33']")
				private static WebElement  billRefGridSecondRowAdjustmentAmtTxt;		
				
				@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_3-33']")
				private static WebElement  billRefGridThirdRowAdjustmentAmtTxt;		
				
				@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_1-41']")
				private static WebElement  billRefGridFirstNarrationTxt;		
				
				@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_2-41']")
				private static WebElement  billRefGridSecondNarrationTxt;		
				
				@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_3-41']")
				private static WebElement  billRefGridThirdNarrationTxt;		
				
				@FindBy(xpath="//input[@id='id_Narration']")
				private static WebElement  narrationToWrite;		
				
				@FindBy(xpath="//input[@id='id_limit']")
				private static WebElement  adjustAmtToWrite;		
				
				@FindBy(xpath="//div[@class='col-xs-6 navbar-header']//div[@class='navText']")
				private static WebElement  billRefPaymentsBillReferenceLabel;		
				
				@FindBy(xpath="//div[@class='col-sm-12 col-md-3']//input[@class='Fbutton']")
				private static WebElement  billRefAdjustOnFIFOBtn;		
				
				@FindBy(xpath="//span[@id='btnPick']")
				private static WebElement  billRefPickIcon;		
				
				@FindBy(xpath="//span[@id='btnOk']")
				private static WebElement  billRefOkBtn;		
				
				@FindBy(xpath="//span[@id='btnCancel']")
				private static WebElement  billRefcancel;		
				
				@FindBy(xpath="//label[@id='id_transactionentry_footer_panel_summary_value_net']")
				private static WebElement  billRefSummatyValueNet;		
				
				@FindBy(xpath="//td[@id='AccountAmount_col_1-1']")
				private static WebElement  billRefGridVendorRow1;	
				
				@FindBy(xpath="//td[@id='AccountAmount_col_1-2']")
				private static WebElement  billRefGridVendorAmtRow1;	
				
				@FindBy(xpath="//td[@id='AccountAmount_col_2-1']")
				private static WebElement  billRefGridVendorRow2;	
				
				@FindBy(xpath="//td[@id='AccountAmount_col_2-2']")
				private static WebElement  billRefGridVendorAmtRow2;	
				
				@FindBy(xpath="//td[@id='AccountAmount_col_3-1']")
				private static WebElement  billRefGridVendorRow3;
				
				@FindBy(xpath="//label[@id='tbNewRefAmountAdjValue']")
				private static WebElement amtAdjustedAgainstNewREfinOtherVouchers;
						
				@FindBy(xpath="//label[@id='tbAmountToAdjustInTransCurrencyValue']")
				private static WebElement transactionCurency;
				
				@FindBy(xpath="//label[@id='tbAmountToAdjustInBaseCurrencyValue']")
				private static WebElement baseCurrency;
				
				@FindBy(xpath="//label[@id='tbAmountToAdjustInLocalCurrencyValue']")
				private static WebElement localCurrencyDhs;
				
				@FindBy(xpath="//label[@id='tbNewRefBalAmountValue']")
				private static WebElement balanceNewReferenceAmt;
				
				@FindBy(xpath="//li[@id='id_li_Adjustment_Tab_BreakUpByTag']//span[@class='font-5'][contains(text(),'Break Up by Tag')]")
				private static WebElement breakUpByTagTab;
				
				@FindBy(xpath="//span[@class='font-5'][contains(text(),'Adjustment')]")
				private static WebElement adjustmentTab;
				
				@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-9']")
				private static WebElement breakUpByTagDueDate;
				
				@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-10']")
				private static WebElement breakUpByTagDepartment;
				
				@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-18']")
				private static WebElement breakUpByTagBaseCurrency;
				
				@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-17']")
				private static WebElement breakUpByTagBillCurrency;
				
				@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-20']")
				private static WebElement breakUpByTagBaseConversionRate;
					
				@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-21']")
				private static WebElement breakUpByTagBaseLocalCurrency;
				
				@FindBy(xpath="//label[@id='txtblkAmountadjusted']")
				private static WebElement  billRefAdjustAmountInTransCurency;*/
				
/*				@FindBy(xpath="//label[@id='txtblkAmounttobeadjust']")
				private static WebElement  billRefBalanceAmountAdjustInTrnasCurrency;
				
				@FindBy(xpath="//label[@id='id_BillWise_IP_LocalConversionRateValue']")
				private static WebElement  billRefInfoBarLocalCurrencyRate;
				
				
				@FindBy(xpath="//label[@id='tbAmountToAdjustInTransCurrencyValue']")
				private static WebElement billRefTransactionCurency;
				
				@FindBy(xpath="//label[@id='tbAmountToAdjustInBaseCurrencyValue']")
				private static WebElement billRefBaseCurrency;
				

				@FindBy(xpath="//label[@id='id_BillWise_IP_AccountName']")
				private static WebElement breakUpDetailsAccount;
				
				@FindBy(xpath="//label[@id='id_BillWise_IP_ProductName']")
				private static WebElement breakUpDetailsItem;
				
				@FindBy(xpath="//label[@id='id_BillWise_IP_TagName']")
				private static WebElement breakUpDetailsDepartment;
				
				@FindBy(xpath="//label[@id='id_BillWise_IP_BaseCurrencyValue']")
				private static WebElement conversationRateBaseCurrencyRate;
				
				@FindBy(xpath="//label[@id='id_BillWise_IP_LocalConversionRateValue']")
				private static WebElement conversationRateLocalCurrencyRate;
				
				@FindBy(xpath="//label[@id='id_infoPanel_lblAEDTranAmountValue']")
				private static WebElement asOnEntryDateTransAmt;
				
				@FindBy(xpath="//label[@id='id_infoPanel_lblAEDBaseConversionValue']")
				private static WebElement asOnEntryDateBaseConcersationRate;
				
				@FindBy(xpath="//label[@id='id_infoPanel_lblAEDBaseAmountValue']")
				private static WebElement asOnEntryDateBaseAmount;
				
				@FindBy(xpath="//label[@id='id_infoPanel_lblAEDLocalConversionValue']")
				private static WebElement asOnEntryDateLocConversationRate;
				
				@FindBy(xpath="//label[@id='id_infoPanel_lblAEDLocalAmountValue']")
				private static WebElement asOnEntryDateAmt;
				
				@FindBy(xpath="//label[@id='id_infoPanel_lblAADTranAmountValue']")
				private static WebElement balOnAdjstDateTransAmt;
				
				@FindBy(xpath="//label[@id='id_infoPanel_lblAADBaseConversionValue']")
				private static WebElement  balOnAdjstDateBasrConversionRate;
				
				@FindBy(xpath="//label[@id='id_infoPanel_lblAADBaseAmountValue']")
				private static WebElement  balOnAdjstDateBaseAmount;
				
				@FindBy(xpath="//label[@id='id_infoPanel_lblAADLocalConversionValue']")
				private static WebElement  balOnAdjstDateLocalConversionRate;
				
				@FindBy(xpath="//label[@id='id_infoPanel_lblAADLocalAmountValue']")
				private static WebElement  balOnAdjstDateAmt;
				
				@FindBy(xpath="//label[@id='id_infoPanel_lblAdjTranAmountValue']")
				private static WebElement adjustmentsAmount1;
				
				@FindBy(xpath="//label[@id='id_infoPanel_lblAdjBaseAmountValue']")
				private static WebElement adjustmentsAmount2;
				
				@FindBy(xpath="//label[@id='id_infoPanel_lblAdjLocalAmountValue']")
				private static WebElement adjustmentsAmount3;
				
				@FindBy(xpath="//label[@id='id_infoPanel_lblNativeCurrencyValue']")
				private static WebElement adjustmentsAmount4;
				
				@FindBy(xpath="//label[@id='id_infoPanel_lblExDiffTranAmountValue']")
				private static WebElement exchangeGainLossForBaseCurrency;
				
				@FindBy(xpath="//label[@id='id_infoPanel_lblExDiffLocalAmountValue']")
				private static WebElement exchangeGainLossForLocalCurrency;
					
				@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_1-33']")
				private static WebElement gridAdjustmentAmtRow1;
				
				@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_2-33']")
				private static WebElement gridAdjustmentAmtRow2;
				
				@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_3-33']")
				private static WebElement gridAdjustmentAmtRow3;
				
				@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_4-33']")
				private static WebElement gridAdjustmentAmtRow4;

				@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_5-33']")
				private static WebElement gridAdjustmentAmtRow5;
				
				
				@FindBy(xpath="//input[@id='id_limit']")
				private static WebElement gridEnterAdjustAmtRow1;
				
				//Billreference Body Grid Elements
				
				@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_1-21']")
				private static WebElement gridOrginalAmtRow1;
				
				@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_2-21']")
				private static WebElement gridOrginalAmtRow2;
				
				@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_3-21']")
				private static WebElement gridOrginalAmtRow3;
				
				@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_4-21']")
				private static WebElement gridOrginalAmtRow4;
				
				@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_5-21']")
				private static WebElement gridOrginalAmtRow5;
				
				@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_1-23']")
				private static WebElement gridBalanceAmtRow1;
				
				@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_2-23']")
				private static WebElement gridBalanceAmtRow2;
				
				@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_3-23']")
				private static WebElement gridBalanceAmtRow3;
				
				@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_4-23']")
				private static WebElement gridBalanceAmtRow4;
				
				@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_5-23']")
				private static WebElement gridBalanceAmtRow5;
				
					
				@FindBy(xpath="//*[@id='InfPnlAdjGrd_body']/tr/td[2]")
				private static WebElement InfoSideBarDocRow1;

				@FindBy(xpath="//*[@id='InfPnlAdjGrd_body']/tr/td[3]")
				private static WebElement InfoSideBarAmtRow1;

				@FindBy(xpath="//tbody[@id='InfPnlAdjGrd_body']//td[4]")
				private static WebElement InfoSideBarBaseAmtRow1;

				// Row 2
				
				@FindBy(xpath="//*[@id='InfPnlAdjGrd_body']/tr[2]/td[2]")
				private static WebElement InfoSideBarDocRow2;

				@FindBy(xpath="//*[@id='InfPnlAdjGrd_body']/tr[2]/td[3]")
				private static WebElement InfoSideBarAmtRow2;

				@FindBy(xpath="//tbody[@id='InfPnlAdjGrd_body']//tr[2]//td[4]")
				private static WebElement InfoSideBarBaseAmtRow2;

				// Row 3
				
				@FindBy(xpath="//*[@id='InfPnlAdjGrd_body']/tr[3]/td[2]")
				private static WebElement InfoSideBarDocRow3;

				@FindBy(xpath="//*[@id='InfPnlAdjGrd_body']/tr[3]/td[3]")
				private static WebElement InfoSideBarAmtRow3;

				@FindBy(xpath="//tbody[@id='InfPnlAdjGrd_body']//tr[3]//td[4]")
				private static WebElement InfoSideBarBaseAmtRow3;*/
				  
				
				// Row 4 
/*				
				@FindBy(xpath="//*[@id='InfPnlAdjGrd_body']/tr[4]/td[2]")
				private static WebElement InfoSideBarDocRow4;

				@FindBy(xpath="//*[@id='InfPnlAdjGrd_body']/tr[4]/td[3]")
				private static WebElement InfoSideBarAmtRow4;

				@FindBy(xpath="//tbody[@id='InfPnlAdjGrd_body']//tr[4]//td[4]")
				private static WebElement InfoSideBarBaseAmtRow4;
				
				// row 5
				
				@FindBy(xpath="//*[@id='InfPnlAdjGrd_body']/tr[5]/td[2]")
				private static WebElement InfoSideBarDocRow5;

				@FindBy(xpath="//*[@id='InfPnlAdjGrd_body']/tr[5]/td[3]")
				private static WebElement InfoSideBarAmtRow5;

				@FindBy(xpath="//tbody[@id='InfPnlAdjGrd_body']//tr[5]//td[4]")
				private static WebElement InfoSideBarBaseAmtRow5;
				
				

				@FindBy(xpath="//table[@id='id_Adjustment_Grid']")
				private static WebElement billRefAdjustBillsGrid;
					
				@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_1-8']")
				private static WebElement billRefAdjustBillsRow1DocNo;
				
				@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_2-8']")
				private static WebElement billRefAdjustBillsRow2DocNo;
				
				@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_3-8']")
				private static WebElement billRefAdjustBillsRow3DocNo;
				
				@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_4-8']")
				private static WebElement billRefAdjustBillsRow4DocNo;
				
				@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_5-8']")
				private static WebElement billRefAdjustBillsRow5DocNo;
				  
				@FindBy(xpath="//*[@id='id_body_12_table_body']/tr")
				private static List<WebElement> openingBalAccountListInGrid;
				
				@FindBy(xpath="//input[@id='id_body_19']")
				private static WebElement  enter_OBCreditACTxt;

				@FindBy(xpath="//*[@id='lblAccount']")
				private static WebElement  billRefPartyName;*/
				
				public boolean checkPurchaseVoucherNewBillwise() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
				{
					
				  excelReader=new ExcelReader(POJOUtility.getExcelPath());
				  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
					
						
				  try 
				  {
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
						saveBtn.click();
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPaymentsBillReferenceLabel));
						
						// Actual
						boolean actbillRefPaymentsBillReferenceLabel=billRefPaymentsBillReferenceLabel.isDisplayed();
						boolean actbillRefNewReferenceTxt=billRefNewReferenceTxt.isDisplayed();
						boolean actbillRefTxtOnAccount=billRefTxtOnAccount.isDisplayed();
						boolean actbillRefSearchTxt=billRefSearchTxt.isDisplayed();
						boolean actbillRefNewReferenceDropdown=billRefNewReferenceDropdown.isDisplayed();
						boolean actbillRefShowBillsDropdown=billRefShowBillsDropdown.isDisplayed();
						boolean actbillRefAdjustOnFIFOBtn=billRefAdjustOnFIFOBtn.isDisplayed();
						boolean actbillRefPickIcon=billRefPickIcon.isDisplayed();
						boolean actbillRefOkBtn=billRefOkBtn.isDisplayed();
						boolean actbillRefcancel=billRefcancel.isDisplayed();
						
						// Expected
						boolean expbillRefPaymentsBillReferenceLabel=true;
						boolean expbillRefNewReferenceTxt=true;
						boolean expbillRefTxtOnAccount=true;
						boolean expbillRefSearchTxt=true;
						boolean expbillRefNewReferenceDropdown=true;
						boolean expbillRefShowBillsDropdown=true;
						boolean expbillRefAdjustOnFIFOBtn=true;
						boolean expbillRefPickIcon=true;
						boolean expbillRefOkBtn=true;
						boolean expbillRefcancel=true;
						
						System.out.println("************************************* checkBillReferenceScreen  *********************************");
						System.out.println("Bill Reference Screen Lable : "+actbillRefPaymentsBillReferenceLabel +"  Value Expected : "+expbillRefPaymentsBillReferenceLabel);
						System.out.println("New refernce Text Filed 	: "+actbillRefNewReferenceTxt			 +"  Value Expected : "+expbillRefNewReferenceTxt);
						System.out.println("On Account Text Filed 		: "+actbillRefTxtOnAccount				 +"  Value Expected : "+expbillRefTxtOnAccount);
						System.out.println("Search Text Filed 			: "+actbillRefSearchTxt					 +"  Value Expected : "+expbillRefSearchTxt);
						System.out.println("Adjust Bills Drop Down		: "+actbillRefNewReferenceDropdown		 +"  Value Expected : "+expbillRefNewReferenceDropdown);
						System.out.println("Show Bills Drop Down 		: "+actbillRefShowBillsDropdown			 +"  Value Expected : "+expbillRefShowBillsDropdown);
						System.out.println("Adjsut On FIFO 				: "+actbillRefAdjustOnFIFOBtn			 +"  Value Expected : "+expbillRefAdjustOnFIFOBtn);
						System.out.println("Pick Option 				: "+actbillRefPickIcon					 +"  Value Expected : "+expbillRefPickIcon);
						System.out.println("Ok Button 					: "+actbillRefOkBtn						 +"  Value Expected : "+expbillRefOkBtn);
						System.out.println("Cancel Button 				: "+actbillRefcancel					 +"  Value Expected : "+expbillRefcancel);
					
				
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPartyName));
						
						String actPartyName = billRefPartyName.getText();
						String expPartyName = excelReader.getCellData("PurchaseVoucherN", 163, 7);
						
						excelReader.setCellData(xlfile, "PurchaseVoucherN", 163, 8, actPartyName);
						
						System.out.println("Bill wise Screen Cutomer Name "  + actPartyName + "  Value Expected  " + expPartyName);
						
						
					    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefAdjustBillsGrid));
							
						String actAdjustbills=billRefAdjustBillsGrid.getAttribute("data-totalrows");
						String expAdjustbills=excelReader.getCellData("PurchaseVoucherN", 164, 7);
						excelReader.setCellData(xlfile, "PurchaseVoucherN", 164, 8, actAdjustbills);
						
						String expBillNewReference                      =excelReader.getCellData("PurchaseVoucherN", 165, 7);
						String expBillTransactionCurrency               =excelReader.getCellData("PurchaseVoucherN", 166, 7);
						String expBillBaseCurrency                      =excelReader.getCellData("PurchaseVoucherN", 167, 7);
						String expBillLocalCurrency                     =excelReader.getCellData("PurchaseVoucherN", 168, 7);
						String expBillBalanceNewRefAmount               =excelReader.getCellData("PurchaseVoucherN", 169, 7);
						
				        String expbillRefAdjustAmountInTransCurency         =excelReader.getCellData("PurchaseVoucherN", 170, 7);
				        String expbillRefBalanceAmountAdjustInTrnasCurrency =excelReader.getCellData("PurchaseVoucherN", 171, 7);
				        			        
				        
				        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
				        String actBillNewReference                           = billRefNewReferenceTxt.getAttribute("value");
						String actBillTransactionCurrency                    = billRefTransactionCurency.getText();
						String actBillBaseCurrency                           = billRefBaseCurrency.getText();
						String actBillLocalCurrency                          = localCurrencyDhs.getText();
						String actBillBalanceNewRefAmount                    = balanceNewReferenceAmt.getText();
						

				        String actbillRefAdjustAmountInTransCurency         = billRefAdjustAmountInTransCurency.getText();
				        String actbillRefBalanceAmountAdjustInTrnasCurrency = billRefBalanceAmountAdjustInTrnasCurrency.getText();
				        	
				        
				        excelReader.setCellData(xlfile, "PurchaseVoucherN", 165, 8, actBillNewReference);
				        excelReader.setCellData(xlfile, "PurchaseVoucherN", 166, 8, actBillTransactionCurrency);
				        excelReader.setCellData(xlfile, "PurchaseVoucherN", 167, 8, actBillBaseCurrency);
				        excelReader.setCellData(xlfile, "PurchaseVoucherN", 168, 8, actBillLocalCurrency);
				        excelReader.setCellData(xlfile, "PurchaseVoucherN", 169, 8, actBillBalanceNewRefAmount);
				        excelReader.setCellData(xlfile, "PurchaseVoucherN", 170, 8, actbillRefAdjustAmountInTransCurency);
				        excelReader.setCellData(xlfile, "PurchaseVoucherN", 171, 8, actbillRefBalanceAmountAdjustInTrnasCurrency);

				        
				        System.out.println("Bill reference Adjustment Bills  :"+ actAdjustbills+"                          "+ "expDate :"+expAdjustbills);
				        System.out.println("actBillNewReference :             "+ actBillNewReference +"                    "+ "expBillNewReference :"+expBillNewReference);
				        System.out.println("actBillTransactionCurrency       :"+ actBillTransactionCurrency + "            " + "expBillTransactionCurrency :"+expBillTransactionCurrency);
				        System.out.println("actBillBaseCurrency :             "+ actBillBaseCurrency + "                   " +"expBillBaseCurrency :"+expBillBaseCurrency);
				        System.out.println("actBillLocalCurrency :            "+ actBillLocalCurrency+ "                   " +"expBillLocalCurrency :"+expBillLocalCurrency);
				        System.out.println("actBillBalanceNewRefAmount :      "+ actBillBalanceNewRefAmount + "            " + "expBillBalanceNewRefAmount :"+expBillBalanceNewRefAmount);
				       
				        System.out.println("actbillRefAdjustAmountInTransCurency :"+ actbillRefAdjustAmountInTransCurency+ "       " +"expbillRefAdjustAmountInTransCurency :"+expbillRefAdjustAmountInTransCurency);
				        System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrency :"+ actbillRefBalanceAmountAdjustInTrnasCurrency + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrency :"+expbillRefBalanceAmountAdjustInTrnasCurrency);

				        
				        
				        if (actPartyName.equalsIgnoreCase(expPartyName) && actAdjustbills.equalsIgnoreCase(expAdjustbills) && actBillNewReference.equalsIgnoreCase(expBillNewReference) && actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 
				 				actBillBaseCurrency.equalsIgnoreCase(expBillBaseCurrency) && actBillLocalCurrency.equalsIgnoreCase(expBillLocalCurrency) && 
				 				actBillBalanceNewRefAmount.equalsIgnoreCase(expBillBalanceNewRefAmount) && 
				 			     actbillRefAdjustAmountInTransCurency.equalsIgnoreCase(expbillRefAdjustAmountInTransCurency) &&
				 				actbillRefBalanceAmountAdjustInTrnasCurrency.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrency)
				 				
				        		&& actbillRefPaymentsBillReferenceLabel==expbillRefPaymentsBillReferenceLabel && actbillRefNewReferenceTxt==expbillRefNewReferenceTxt
								&& actbillRefTxtOnAccount==expbillRefTxtOnAccount && actbillRefSearchTxt==expbillRefSearchTxt
								&& actbillRefNewReferenceDropdown==expbillRefNewReferenceDropdown && actbillRefShowBillsDropdown==expbillRefShowBillsDropdown
								&& actbillRefAdjustOnFIFOBtn==expbillRefAdjustOnFIFOBtn && actbillRefPickIcon==expbillRefPickIcon
								&& actbillRefOkBtn==expbillRefOkBtn && actbillRefcancel==expbillRefcancel)
				     
					{
						System.out.println("Test Pass  deleted row Working  ");
						excelReader.setCellData(xlfile, "PurchaseVoucherN", 162, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail Not Deleted Row");
						excelReader.setCellData(xlfile, "PurchaseVoucherN", 162, 9, resPass);
						return false;
					}
				}
				catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 162, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			   	 	return false;
				}
				}
				

				
				public boolean checkPurchaseVoucherNewBillwiseScreenClickOnPick() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
				{
					
				  excelReader=new ExcelReader(POJOUtility.getExcelPath());
				  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
			
				  try
				  {
				  
				    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
			 	    billRefNewReferenceTxt.click();
		         
			 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			 		billRefPickIcon.click();
						       
			        String expBillNewReferencePick                  = excelReader.getCellData("PurchaseVoucherN", 173, 7);
			 		String expBillTransactionCurrencyPick           = excelReader.getCellData("PurchaseVoucherN", 174, 7);
			 		String expBillBaseCurrencyPick                  = excelReader.getCellData("PurchaseVoucherN", 175, 7);
			 		String expBillLocalCurrencyPick                 = excelReader.getCellData("PurchaseVoucherN", 176, 7);
			 		String expBillBalanceNewRefAmountPick           = excelReader.getCellData("PurchaseVoucherN", 177, 7);
			 
			        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
			      
			        String actBillNewReferencePick                   = billRefNewReferenceTxt.getAttribute("value");
			 		String actBillTransactionCurrencyPick            = billRefTransactionCurency.getText();
			 		String actBillBaseCurrencyPick                   = billRefBaseCurrency.getText();
			 		String actBillLocalCurrencyPick                  = localCurrencyDhs.getText();
			 		String actBillBalanceNewRefAmountPick            = balanceNewReferenceAmt.getText();
			 		
			 	    String actconversationRateBaseCurrencyRatePick   = conversationRateBaseCurrencyRate.getText();
			        String actconversationRateLocalCurrencyRatePick  = conversationRateLocalCurrencyRate.getText();
			 					    	
			        String actbillRefAdjustAmountInTransCurencyPick          = billRefAdjustAmountInTransCurency.getText();
			        String actbillRefBalanceAmountAdjustInTrnasCurrencyPick  = billRefBalanceAmountAdjustInTrnasCurrency.getText();
			      
			        String expbillRefAdjustAmountInTransCurencyPick          = excelReader.getCellData("PurchaseVoucherN", 178, 7);
			        String expbillRefBalanceAmountAdjustInTrnasCurrencyPick  = excelReader.getCellData("PurchaseVoucherN", 179, 7);
			        
			        String expconversationRateBaseCurrencyRatePick  ="1";
			        String expconversationRateLocalCurrencyRatePick ="0.07";
			        
			        excelReader.setCellData(xlfile, "PurchaseVoucherN", 173, 8, actBillNewReferencePick);
			        excelReader.setCellData(xlfile, "PurchaseVoucherN", 174, 8, actBillTransactionCurrencyPick);
			        excelReader.setCellData(xlfile, "PurchaseVoucherN", 175, 8, actBillBaseCurrencyPick);
			        excelReader.setCellData(xlfile, "PurchaseVoucherN", 176, 8, actBillLocalCurrencyPick);
			        excelReader.setCellData(xlfile, "PurchaseVoucherN", 177, 8, actBillBalanceNewRefAmountPick);
			        excelReader.setCellData(xlfile, "PurchaseVoucherN", 178, 8, actbillRefAdjustAmountInTransCurencyPick);
			        excelReader.setCellData(xlfile, "PurchaseVoucherN", 178, 8, actbillRefBalanceAmountAdjustInTrnasCurrencyPick);
			        
				        
			        System.out.println("Bill reference Adjustment Bills  :"+ actBillNewReferencePick+"                          "+ "expDate :"+expBillNewReferencePick);
			        System.out.println("actBillNewReference :             "+ actBillTransactionCurrencyPick +"                    "+ "expBillNewReference :"+expBillTransactionCurrencyPick);
			        System.out.println("actBillTransactionCurrency       :"+ actBillBaseCurrencyPick + "            " + "expBillTransactionCurrency :"+expBillBaseCurrencyPick);
			        System.out.println("actBillBaseCurrency :             "+ actBillLocalCurrencyPick + "                   " +"expBillBaseCurrency :"+expBillLocalCurrencyPick);
			        System.out.println("actBillLocalCurrency :            "+ actBillBalanceNewRefAmountPick+ "                   " +"expBillLocalCurrency :"+expBillBalanceNewRefAmountPick);
			        System.out.println("actBillBalanceNewRefAmount :      "+ actconversationRateBaseCurrencyRatePick + "            " + "expBillBalanceNewRefAmount :"+expconversationRateBaseCurrencyRatePick);
			       
			        System.out.println("actbillRefAdjustAmountInTransCurency :"+ actconversationRateLocalCurrencyRatePick+ "       " +"expbillRefAdjustAmountInTransCurency :"+expconversationRateLocalCurrencyRatePick);
			        System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrency :"+ actbillRefAdjustAmountInTransCurencyPick + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrency :"+expbillRefAdjustAmountInTransCurencyPick);
			        System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrency :"+ actbillRefBalanceAmountAdjustInTrnasCurrencyPick + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrency :"+expbillRefBalanceAmountAdjustInTrnasCurrencyPick);
			        
			        
			        if (actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) && actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick)
			        		&& actBillBaseCurrencyPick.equalsIgnoreCase(expBillBaseCurrencyPick) && actBillLocalCurrencyPick.equalsIgnoreCase(expBillLocalCurrencyPick)
			        		&& actBillBalanceNewRefAmountPick.equalsIgnoreCase(expBillBalanceNewRefAmountPick) && actconversationRateBaseCurrencyRatePick.equalsIgnoreCase(expconversationRateBaseCurrencyRatePick) 
			        		&& actbillRefAdjustAmountInTransCurencyPick.equalsIgnoreCase(expbillRefAdjustAmountInTransCurencyPick) 
			        		&& actbillRefBalanceAmountAdjustInTrnasCurrencyPick.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrencyPick))
			     
					{
						System.out.println("Test Pass  deleted row Working  ");
						excelReader.setCellData(xlfile, "PurchaseVoucherN", 172, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail Not Deleted Row");
						excelReader.setCellData(xlfile, "PurchaseVoucherN", 172, 9, resPass);
						return false;
					}
				}
				catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 172, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			   	 	return false;
				}
	 
				}
			
			
				
						
				
				
				@FindBy(xpath="//span[@id='btnOk']")
				private static WebElement Bill_OkBtn;
				
				
				public boolean checkSavingOfPurchaseVoucherNewOnClickOkButtonInBillwisePage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
				{
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
					try
					{
						
				   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
				   Bill_OkBtn.click();
				   Thread.sleep(3000);
				   
				   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
				   String docno=documentNumberTxt.getAttribute("value");
				   
				   int doc = Integer.parseInt(docno);
				   int actdoc = doc-1;
				   
				   String actDoc = Integer.toString(actdoc);
				   
				   boolean savingMessage=checkVoucherSavingMessage(actDoc);
				   
				   
				   String actSavingMessage=Boolean.toString(savingMessage);
				   String expSavingMessage=excelReader.getCellData("PurchaseVoucherN", 180, 7);
				   
				   excelReader.setCellData(xlfile, "PurchaseVoucherN", 180, 8, actSavingMessage.toUpperCase());
				   
				   System.out.println("************************************* checkSavingOfPurchaseVoucherNew  *********************************");
				   
				   System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
				   System.out.println(" Saving Message Status: "+actSavingMessage+ " Value Expected : "+expSavingMessage);
				   
				   if (savingMessage==true)
				   {
					   System.out.println("Test Pass : Error Message is Displayed ");
					   excelReader.setCellData(xlfile, "PurchaseVoucherN", 180, 9, resPass);
					   
					   return true;
				   }
				   else
				   {
					   System.out.println("Test Fail :  Error Message is  not Displayed ");
					   excelReader.setCellData(xlfile, "PurchaseVoucherN", 180, 9, resFail);
					   return false;
				   }
				}
				catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 180, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			   	 	return false;
				}
				}
				
				
				
			
			
			

			//Create Info Panel
			
			public boolean checkPurchaseVoucherNewEntryPageInfoSideBar() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoSideBarCustomizeBtn));
				
				boolean actInforSideBarCustomization            =infoSideBarCustomizeBtn.isDisplayed();
				boolean actInforSideBarCustomizationExpandButton=infoSideBarMinimizeExpandBtn.isDisplayed();
				boolean expInforSideBarCustomization            =true;
				boolean expInforSideBarCustomizationExpandButton=true;
				
				System.out.println("***************************************** checkPurchaseVoucherNewEntryPageDocumentNumber  ***************************************************");
				System.out.println("Entry Page Open Docuemnt Number Value Actual  : "+actInforSideBarCustomization               +" Value Expected : "+expInforSideBarCustomization);
				System.out.println("Entry Page Open Docuemnt Number Value Actual  : "+actInforSideBarCustomizationExpandButton   +" Value Expected : "+expInforSideBarCustomizationExpandButton);
				
				
				
				boolean actDisplay=actInforSideBarCustomization==expInforSideBarCustomization && actInforSideBarCustomizationExpandButton==expInforSideBarCustomizationExpandButton;
				
				String actResult=Boolean.toString(actDisplay);
				String expResult = excelReader.getCellData("PurchaseVoucherN", 182, 7);
				
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 182, 8, actResult.toUpperCase());
				
				
				if(actDisplay==true)
				{
					System.out.println("Test Pass : entry Page Footer Options Are Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 181, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : entry Page NOT Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 181, 9, resFail);
					return false;
				}
				}
				catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 181, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			   	 	return false;
				}
			}
			
			
			@FindBy(xpath="//*[@id='id_transactionentry_infopanel_container']/div[1]/div[2]/span")
			private static WebElement  customizeCloseBtn;
			
			public boolean checkPurchaseVoucherNewEntryPageInfoSideBarCustomizeBtn() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoSideBarCustomizeBtn));
				
				infoSideBarCustomizeBtn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeSearchTxt));

				boolean actInfoCustomizationSearchTxt        = customizeSearchTxt.isDisplayed();
				boolean actInfoCustomizationSearchBtn        = customizeSearchBtn.isDisplayed();
				boolean actInfoCustomizationCloseBtn         = customizeCloseBtn.isDisplayed();
				boolean actInfoCustomizationSaveBtn          = customizeSaveBtn.isDisplayed();
				boolean actInfoCustomizationCancelBtn        = customizeCancelBtn.isDisplayed();
				boolean actInfoCustomizationGraphBtn         = graphBtn.isDisplayed();
				boolean actInfoCustomizationReportBtn        = reportBtn.isDisplayed();
				boolean actInfoCustomizationInfopanelBtn     = infoPanelBtn.isDisplayed();
				boolean actInfoCustomizationWorkFlowBtn      = workFlowBtn.isDisplayed();
				boolean actInfoCustomizationOtherDashletsBtn = otherDashlets.isDisplayed();

				boolean expInfoCustomizationSearchTxt        = true;
				boolean expInfoCustomizationSearchBtn        = true;
				boolean expInfoCustomizationCloseBtn         = true;
				boolean expInfoCustomizationSaveBtn          = true;
				boolean expInfoCustomizationCancelBtn        = true;
				boolean expInfoCustomizationGraphBtn         = true;
				boolean expInfoCustomizationReportBtn        = true;
				boolean expInfoCustomizationInfopanelBtn     = true;
				boolean expInfoCustomizationWorkFlowBtn      = true;
				boolean expInfoCustomizationOtherDashletsBtn = true;

				
				System.out.println("***************************************** checkPurchaseVoucherNewEntryPageInfoSideBarCustomizeBtn  ***************************************************");
				
				System.out.println("Entry Page Info Panel Search Txt Value Actual : "+actInfoCustomizationSearchTxt        +" Value Expected : "+expInfoCustomizationSearchTxt);
				System.out.println("Entry Page Info Panel Search Btn Value Actual : "+actInfoCustomizationSearchBtn        +" Value Expected : "+expInfoCustomizationSearchBtn);
				System.out.println("Entry Page Info Panel Close Btn Value Actual  : "+actInfoCustomizationCloseBtn         +" Value Expected : "+expInfoCustomizationCloseBtn);
				System.out.println("Entry Page Info Panel Save Btn Value Actual   : "+actInfoCustomizationSaveBtn          +" Value Expected : "+expInfoCustomizationSaveBtn);
				System.out.println("Entry Page Info Panel Cancel Value Actual     : "+actInfoCustomizationCancelBtn        +" Value Expected : "+expInfoCustomizationCancelBtn);
				System.out.println("Entry Page Info Panel Graph Value Actual      : "+actInfoCustomizationGraphBtn         +" Value Expected : "+expInfoCustomizationGraphBtn);
				System.out.println("Entry Page Info Panel Report Value Actual     : "+actInfoCustomizationReportBtn        +" Value Expected : "+expInfoCustomizationReportBtn);
				System.out.println("Entry Page Info Panel Value Actual            : "+actInfoCustomizationInfopanelBtn     +" Value Expected : "+expInfoCustomizationInfopanelBtn);
				System.out.println("Entry Page Info Panel WorkFlow Btn Actual     : "+actInfoCustomizationWorkFlowBtn      +" Value Expected : "+expInfoCustomizationWorkFlowBtn);
				System.out.println("Entry Page Info Panel Dashlet Btn Actual      : "+actInfoCustomizationOtherDashletsBtn +" Value Expected : "+expInfoCustomizationOtherDashletsBtn);
				
				
				boolean actDisplay=actInfoCustomizationSearchTxt==expInfoCustomizationSearchTxt && actInfoCustomizationSearchBtn==expInfoCustomizationSearchBtn && actInfoCustomizationCloseBtn==expInfoCustomizationCloseBtn 
						&& actInfoCustomizationSaveBtn==expInfoCustomizationSaveBtn && actInfoCustomizationGraphBtn==expInfoCustomizationGraphBtn
						&& actInfoCustomizationReportBtn==expInfoCustomizationReportBtn && actInfoCustomizationInfopanelBtn==expInfoCustomizationInfopanelBtn  
						&& actInfoCustomizationWorkFlowBtn==expInfoCustomizationWorkFlowBtn && actInfoCustomizationOtherDashletsBtn==expInfoCustomizationOtherDashletsBtn;
				
				String actResult=Boolean.toString(actDisplay);
				String expResult=excelReader.getCellData("PurchaseVoucherN", 183, 7);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 183, 8, actResult);
				
				if(actDisplay==true)
				{
					System.out.println("Test Pass : entry Page Footer Options Are Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 183, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : entry Page NOT Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 183, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 183, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
			}
			}
			
			
			
			public boolean checkPurchaseVoucherNewEntryPageInfoSideBarGraphOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(graphBtn));
				
				graphBtn.click();
					
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newGraphOption));
			
				boolean actGraphOption       =newGraphOption.isDisplayed();
				
				String actNewGraphOption=Boolean.toString(actGraphOption);
				String expNewGraphOptions=excelReader.getCellData("PurchaseVoucherN", 185, 7);
				
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 185, 8, actNewGraphOption.toUpperCase());
				
				
				System.out.println("***************************************** checkPurchaseVoucherNewEntryPageInfoSideBarGraphOption  *****************************************");
				System.out.println("Entry Page Open Info Side Graph Value Actual  : "+actNewGraphOption               +" Value Expected : "+expNewGraphOptions);
				
				if(actNewGraphOption.equalsIgnoreCase(expNewGraphOptions))
				{
					System.out.println("Test Pass : entry Page Footer Options Are Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 184, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : entry Page NOT Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 184, 9, resFail);
					return false;
				}
				}
				catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 184, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			   	 	return false;
				}
			}
			
			
			public boolean checkPurchaseVoucherNewEntryPageInfoSideBarReportOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reportBtn));
				
				reportBtn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newReportOption));
				
				boolean NewReportOption       =newReportOption.isDisplayed();
				
				String actNewReportOption=Boolean.toString(NewReportOption);
				String expNewReportOption=excelReader.getCellData("PurchaseVoucherN", 187, 7);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 187, 8, actNewReportOption.toUpperCase());
				
				
				System.out.println("***************************************** checkPurchaseVoucherNewEntryPageInfoSideBarReportOption  *****************************************");
				System.out.println("Entry Page Open Info Side Report Value Actual  : "+actNewReportOption               +" Value Expected : "+expNewReportOption);
				
				
				if(actNewReportOption.equalsIgnoreCase(expNewReportOption))
				{
					System.out.println("Test Pass : entry Page Footer Options Are Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 186, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : entry Page NOT Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 186, 9, resFail);
					return false;
				}
				}
				catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 186, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			   	 	return false;
				}
			}
			
			
			
			public boolean checkPurchaseVoucherNewEntryPageInfoSideBarInfoPanelOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoPanelBtn));
				
				infoPanelBtn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newInfoPanelOption));
				
				boolean NewInfoPanelOption       =newInfoPanelOption.isDisplayed();
				
				String actNewInfoPanelOption=Boolean.toString(NewInfoPanelOption);
				String expNewInfoPanelOption=excelReader.getCellData("PurchaseVoucherN", 189, 7);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 189, 8, actNewInfoPanelOption.toUpperCase());
				
			
				System.out.println("***************************************** checkPurchaseVoucherNewEntryPageInfoSideBarInfoPanelOption  *****************************************");
				System.out.println("Entry Page Open Info Side Info Panel Value Actual  : "+actNewInfoPanelOption               +" Value Expected : "+expNewInfoPanelOption);
				
				
				
				if(actNewInfoPanelOption.equalsIgnoreCase(expNewInfoPanelOption))
				{
					System.out.println("Test Pass : entry Page Footer Options Are Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 188, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : entry Page NOT Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 188, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 188, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
			}
				
			}
			
			
			
			public boolean checkPurchaseVoucherNewEntryPageInfoSideBarWorkFlowOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowBtn));
				
				workFlowBtn.click();
				
				Thread.sleep(2000);
					
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newWorkFlowOption));
				
				boolean NewWorkFlowOption       =newWorkFlowOption.isDisplayed();
				
				String actNewWorkFlowOption=Boolean.toString(NewWorkFlowOption);
				String expNewWorkFlowOption=excelReader.getCellData("PurchaseVoucherN", 191, 7);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 191, 8, actNewWorkFlowOption.toUpperCase());
				
			
				System.out.println("***************************************** checkPurchaseVoucherNewEntryPageInfoSideBarWorkFlowOption  *****************************************");
				System.out.println("Entry Page Open Info Side Workflow Value Actual  : "+actNewWorkFlowOption               +" Value Expected : "+expNewWorkFlowOption);
				
				
				if(actNewWorkFlowOption.equalsIgnoreCase(expNewWorkFlowOption))
				{
					System.out.println("Test Pass : entry Page Footer Options Are Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 190, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : entry Page NOT Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 190, 9, resFail);
					return false;
				}
				}
				catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 190, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			   	 	return false;
				}
			}
			
			

			public boolean checkPurchaseVoucherNewEntryPageInfoSideBarOtherDashletsOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(otherDashlets));
				
				otherDashlets.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentInfo));
				
				boolean DocumentInfoInOtherDashletsOption       =documentInfo.isDisplayed();
				
				String actDocumentInfoInOtherDashletsOption=Boolean.toString(DocumentInfoInOtherDashletsOption);
				String expDocumentInfoInOtherDashletsOption=excelReader.getCellData("PurchaseVoucherN", 193, 7);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 193, 8, actDocumentInfoInOtherDashletsOption);
			
				System.out.println("***************************************** checkPurchaseVoucherNewEntryPageInfoSideBarOtherDashletsOption  *****************************************");
				System.out.println("Entry Page Open Info Side Other Dashlets Value Actual  : "+actDocumentInfoInOtherDashletsOption               +" Value Expected : "+expDocumentInfoInOtherDashletsOption);

				

				if(actDocumentInfoInOtherDashletsOption.equalsIgnoreCase(expDocumentInfoInOtherDashletsOption))
				{
					System.out.println("Test Pass : entry Page Footer Options Are Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 192, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : entry Page NOT Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 192, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 192, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
			}
			}
			
			public boolean checkPurchaseVoucherNewEntryPageInfoSideBarSearch() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeSearchTxt));
				
				customizeSearchTxt.click();
				
			    customizeSearchTxt.sendKeys(excelReader.getCellData("PurchaseVoucherN", 195, 6));
			  
			    customizeSearchTxt.sendKeys(Keys.TAB);
			   
			    Thread.sleep(2000);
			     
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchDocumentInfo));
				
				boolean SearchDocumentInfo       =searchDocumentInfo.isDisplayed();
				
				String actSearchDocumentInfo=Boolean.toString(SearchDocumentInfo);
				String expSearchDocumentInfo=excelReader.getCellData("PurchaseVoucherN", 196, 7);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 196, 8, actSearchDocumentInfo.toUpperCase());
				
			
				System.out.println("***************************************** checkPurchaseVoucherNewEntryPageInfoSideBarSearch  *****************************************");
				System.out.println("Entry Page Open Info Side Search Info Value Actual  : "+actSearchDocumentInfo               +" Value Expected : "+expSearchDocumentInfo);

				
				if(actSearchDocumentInfo.equalsIgnoreCase(expSearchDocumentInfo))
				{
					System.out.println("Test Pass : entry Page Footer Options Are Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 194, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : entry Page NOT Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 194, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 194, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
			}
			}
			
			
			
			public boolean checkPurchaseVoucherNewInfoPanelDashlet() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\infoPanels.exe");
							
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addCreateDashlet));
				
				boolean AddCreateDashlet       =addCreateDashlet.isDisplayed();
				
				String actAddCreateDashlet=Boolean.toString(AddCreateDashlet);
				String expAddCreateDashlet=excelReader.getCellData("PurchaseVoucherN", 197, 7);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 197, 8, actAddCreateDashlet.toUpperCase());
				
			
				System.out.println("***************************************** checkPurchaseVoucherNewInfoPanelDashlet  *****************************************");
				System.out.println("Entry Page Open Info Side Add Create Dashlet Value Actual  : "+actAddCreateDashlet               +" Value Expected : "+expAddCreateDashlet);
		
				if(actAddCreateDashlet.equalsIgnoreCase(expAddCreateDashlet))
				{
					System.out.println("Test Pass : entry Page Footer Options Are Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 197, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : entry Page NOT Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 197, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 197, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
			}
			}
			
		
			
			public boolean checkPurchaseVoucherNewSaveInfoPanelDashlet() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeSaveBtn));
				customizeSaveBtn.click();
					
				String expSaveInfoPanelMessage       =excelReader.getCellData("PurchaseVoucherN", 199, 7);
				
				String dashBoradSaveMessage=checkValidationMessage(expSaveInfoPanelMessage);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 199, 8, expSaveInfoPanelMessage);
				
				System.out.println("***************************************** checkPurchaseVoucherNewSaveInfoPanelDashlet  *****************************************");
				System.out.println("Entry Page Open Info Side New Save Value Actual  : "+dashBoradSaveMessage+" Value Expected : "+"TRUE");	
				
				if(dashBoradSaveMessage.equalsIgnoreCase(expSaveInfoPanelMessage))
				{
					System.out.println("Test Pass : Error Message Is As Expected");
					
					
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 198, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Error Message Is NOT As Expected");
					
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 198, 9, resFail);
					return false;
				}	
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 198, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
			}
			}
			
			


			
			
			//Click on Previous and Check the voucher information and status of the voucher
			public boolean checkVoucherStatusInInfoPanelOnClickPreviousButton() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

				try
				{
			    getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(previousBtn));
			    previousBtn.click();			    
			   
			    
			    boolean loading=checkLoadingMessage();
				
				System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
			    
			    
				Thread.sleep(2000);
				
			    
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
				documentNumberTxt.click();
				
				String actdocNumber,expdocNumber;
				
				actdocNumber=documentNumberTxt.getAttribute("value");
				expdocNumber=excelReader.getCellData("PurchaseVoucherN", 201, 7);

				excelReader.setCellData(xlfile, "PurchaseVoucherN", 201, 8, actdocNumber);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
				dateTxt.click();
				
				DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
			    Date date=new Date();
			    System.out.println(df.format(date));
			   
				String actVoucherDate,expVoucherDate;
				
				actVoucherDate=dateTxt.getAttribute("value");
				expVoucherDate=df.format(date);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
				purchaseAccountTxt.click();
			
				String actpurchaseAccountTxt=purchaseAccountTxt.getAttribute("value");
				String exppurchaseAccountTxt=excelReader.getCellData("PurchaseVoucherN", 202, 7);

				excelReader.setCellData(xlfile, "PurchaseVoucherN", 202, 8, actpurchaseAccountTxt);
			
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
				vendorAccountTxt.click();
			
				String actvendorAccountTxt=vendorAccountTxt.getAttribute("value");
				String expvendorAccountTxt=excelReader.getCellData("PurchaseVoucherN", 203, 7);

				excelReader.setCellData(xlfile, "PurchaseVoucherN", 203, 8, actvendorAccountTxt);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
				voucherHeaderCurrency.click();
			
				String actvoucherHeaderCurrency=voucherHeaderCurrency.getAttribute("value");
				String expvoucherHeaderCurrency=excelReader.getCellData("PurchaseVoucherN", 204, 7);

				excelReader.setCellData(xlfile, "PurchaseVoucherN", 204, 8, actvoucherHeaderCurrency);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
				departmentTxt.click();
			
				String actdepartmentTxt=departmentTxt.getAttribute("value");
				String expdepartmentTxt=excelReader.getCellData("PurchaseVoucherN", 205, 7);

				excelReader.setCellData(xlfile, "PurchaseVoucherN", 205, 8, actdepartmentTxt);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
				wareHouseTxt.click();
			
				String actwareHouseTxt=wareHouseTxt.getAttribute("value");
				String expwareHouseTxt=excelReader.getCellData("PurchaseVoucherN", 206, 7);

				excelReader.setCellData(xlfile, "PurchaseVoucherN", 206, 8, actwareHouseTxt);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_footerExpandBtn));
				new_footerExpandBtn.click();
							
				String actPvVoucherItemR1,actPvVoucherUnitsR1,actPvVoucherQtyR1,actPvVoucherRateR1,actPvVoucherGrossR1,actPvVoucherBatchR1;
				String actPvVoucherItemR2,actPvVoucherUnitsR2,actPvVoucherQtyR2,actPvVoucherRateR2,actPvVoucherGrossR2,actPvVoucherBinR2;
				String actPvVoucherItemR3,actPvVoucherUnitsR3,actPvVoucherQtyR3,actPvVoucherRateR3,actPvVoucherGrossR3,actPvVoucherRMAR3;
				String actPvVoucherItemR4,actPvVoucherUnitsR4,actPvVoucherQtyR4,actPvVoucherRateR4,actPvVoucherGrossR4,actPvVoucherBatchR4;
				
				String actPvVoucherFooterQty,actPvVoucherFooterGross,actPvVoucherFooterNet,actPvVoucherFooterAvgRateO;
							
				String actinfoPanelStatus,actinfoPanelCreatedBY,actinfoPanelEditedBy,actinfoPanelNextToAuth,actinfoPanelBillStatus;

				String expPvVoucherItemR1,expPvVoucherUnitsR1,expPvVoucherQtyR1,expPvVoucherRateR1,expPvVoucherGrossR1,expPvVoucherBatchR1;
				String expPvVoucherItemR2,expPvVoucherUnitsR2,expPvVoucherQtyR2,expPvVoucherRateR2,expPvVoucherGrossR2,expPvVoucherBinR2;
				String expPvVoucherItemR3,expPvVoucherUnitsR3,expPvVoucherQtyR3,expPvVoucherRateR3,expPvVoucherGrossR3,expPvVoucherRMAR3;
				String expPvVoucherItemR4,expPvVoucherUnitsR4,expPvVoucherQtyR4,expPvVoucherRateR4,expPvVoucherGrossR4,expPvVoucherBatchR4;
				
				String expPvVoucherFooterQty,expPvVoucherFooterGross,expPvVoucherFooterNet,expPvVoucherFooterAvgRateO;
				
				String expinfoPanelStatus,expinfoPanelCreatedBY,expinfoPanelEditedBy,expinfoPanelNextToAuth,expinfoPanelBillStatus;
									
				expPvVoucherItemR1=excelReader.getCellData("PurchaseVoucherN", 207, 7);
				expPvVoucherUnitsR1=excelReader.getCellData("PurchaseVoucherN", 208, 7);
				expPvVoucherQtyR1=excelReader.getCellData("PurchaseVoucherN", 209, 7);
				expPvVoucherRateR1=excelReader.getCellData("PurchaseVoucherN", 210, 7);
				expPvVoucherGrossR1=excelReader.getCellData("PurchaseVoucherN", 211, 7);
				expPvVoucherBatchR1=excelReader.getCellData("PurchaseVoucherN", 212, 7);
				
				/*expPvVoucherItemR2=excelReader.getCellData("PurchaseVoucherN", 213, 7);
				expPvVoucherUnitsR2=excelReader.getCellData("PurchaseVoucherN", 214, 7);;
				expPvVoucherQtyR2=excelReader.getCellData("PurchaseVoucherN", 215, 7);
				expPvVoucherRateR2=excelReader.getCellData("PurchaseVoucherN", 216, 7);
				expPvVoucherGrossR2=excelReader.getCellData("PurchaseVoucherN", 217, 7);			
				expPvVoucherBinR2=excelReader.getCellData("PurchaseVoucherN", 218, 7);
				
				expPvVoucherItemR3=excelReader.getCellData("PurchaseVoucherN", 219, 7);
				expPvVoucherUnitsR3=excelReader.getCellData("PurchaseVoucherN", 220, 7);
				expPvVoucherQtyR3=excelReader.getCellData("PurchaseVoucherN", 221, 7);
				expPvVoucherRateR3=excelReader.getCellData("PurchaseVoucherN", 222, 7);
				expPvVoucherGrossR3=excelReader.getCellData("PurchaseVoucherN", 223, 7);
				expPvVoucherRMAR3=excelReader.getCellData("PurchaseVoucherN", 224, 7);
				
				expPvVoucherItemR4=excelReader.getCellData("PurchaseVoucherN", 225, 7);
				expPvVoucherUnitsR4=excelReader.getCellData("PurchaseVoucherN", 226, 7);
				expPvVoucherQtyR4=excelReader.getCellData("PurchaseVoucherN", 227, 7);
				expPvVoucherRateR4=excelReader.getCellData("PurchaseVoucherN", 228, 7);
				expPvVoucherGrossR4=excelReader.getCellData("PurchaseVoucherN", 229, 7);
				expPvVoucherBatchR4=excelReader.getCellData("PurchaseVoucherN", 230, 7);*/
				
				expPvVoucherFooterNet=excelReader.getCellData("PurchaseVoucherN", 231, 7);
				expPvVoucherFooterQty=excelReader.getCellData("PurchaseVoucherN", 232, 7);
				expPvVoucherFooterGross=excelReader.getCellData("PurchaseVoucherN", 233, 7);
				//expPvVoucherFooterAvgRateO=excelReader.getCellData("PurchaseVoucherN", 234, 7); //11.66
				
				expinfoPanelStatus=excelReader.getCellData("PurchaseVoucherN", 235, 7);
				expinfoPanelCreatedBY=excelReader.getCellData("PurchaseVoucherN", 236, 7);
				expinfoPanelEditedBy=excelReader.getCellData("PurchaseVoucherN", 237, 7);
				expinfoPanelNextToAuth=excelReader.getCellData("PurchaseVoucherN", 238, 7);
				expinfoPanelBillStatus=excelReader.getCellData("PurchaseVoucherN", 239, 7);
				
				System.out.println(netAmount.getText());
				System.out.println(QtyAmount.getText());
				System.out.println(GrossAmount.getText());
				System.out.println(PVNFooterAvgRateO.getText());
								
				actPvVoucherItemR1=select1stRow_1stColumn.getText();
				actPvVoucherUnitsR1=select1stRow_2ndColumn.getText();
				actPvVoucherQtyR1=select1stRow_5thColumn.getText();
				actPvVoucherRateR1=select1stRow_7thColumn.getText();
				actPvVoucherGrossR1=select1stRow_8thColumn.getText();
				//actPvVoucherBatchR1=select1stRow_10thColumn.getText();
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 207, 8, actPvVoucherItemR1);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 208, 8, actPvVoucherUnitsR1);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 209, 8, actPvVoucherQtyR1);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 210, 8, actPvVoucherRateR1);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 211, 8, actPvVoucherGrossR1);
				//excelReader.setCellData(xlfile, "PurchaseVoucherN", 212, 8, actPvVoucherBatchR1);
				
				/*actPvVoucherItemR2=select2ndRow_1stColumn.getText();
				actPvVoucherUnitsR2=select2ndRow_2ndColumn.getText();
				actPvVoucherQtyR2=select2ndRow_5thColumn.getText();
				actPvVoucherRateR2=select2ndRow_7thColumn.getText();
				actPvVoucherGrossR2=select2ndRow_8thColumn.getText();
				actPvVoucherBinR2=select2ndRow_10thColumn.getText();
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 213, 8, actPvVoucherItemR2);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 214, 8, actPvVoucherUnitsR2);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 215, 8, actPvVoucherQtyR2);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 216, 8, actPvVoucherRateR2);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 217, 8, actPvVoucherGrossR2);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 218, 8, actPvVoucherBinR2);
				
				actPvVoucherItemR3=select3rdRow_1stColumn.getText();
				actPvVoucherUnitsR3=select3rdRow_2ndColumn.getText();
				actPvVoucherQtyR3=select3rdRow_5thColumn.getText();
				actPvVoucherRateR3=select3rdRow_7thColumn.getText();
				actPvVoucherGrossR3=select3rdRow_8thColumn.getText();
				actPvVoucherRMAR3=select3rdRow_12thColumn.getText();
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 219, 8, actPvVoucherItemR3);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 220, 8, actPvVoucherUnitsR3);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 221, 8, actPvVoucherQtyR3);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 222, 8, actPvVoucherRateR3);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 223, 8, actPvVoucherGrossR3);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 224, 8, actPvVoucherRMAR3);
				
				actPvVoucherItemR4=select4thRow_1stColumn.getText();
				actPvVoucherUnitsR4=select4thRow_2ndColumn.getText();
				actPvVoucherQtyR4=select4thRow_5thColumn.getText();
				actPvVoucherRateR4=select4thRow_7thColumn.getText();
				actPvVoucherGrossR4=select4thRow_8thColumn.getText();
				actPvVoucherBatchR4=select4thRow_9thColumn.getText();
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 225, 8, actPvVoucherItemR4);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 226, 8, actPvVoucherUnitsR4);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 227, 8, actPvVoucherQtyR4);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 228, 8, actPvVoucherRateR4);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 229, 8, actPvVoucherGrossR4);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 230, 8, actPvVoucherBatchR4);*/
				
				
				actPvVoucherFooterNet=netAmount.getText();
				actPvVoucherFooterQty=QtyAmount.getText();
				actPvVoucherFooterGross=GrossAmount.getText();
				actPvVoucherFooterAvgRateO=PVNFooterAvgRateO.getText();
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 231, 8, actPvVoucherFooterNet);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 232, 8, actPvVoucherFooterQty);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 233, 8, actPvVoucherFooterGross);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 234, 8, actPvVoucherFooterAvgRateO);
				
				
				actinfoPanelStatus=infoPanelStatus.getText();
				actinfoPanelCreatedBY=infoPanelCreatedBY.getText();
				actinfoPanelEditedBy=infoPanelEditedBy.getText();
				actinfoPanelNextToAuth=infoPanelNextToAuth.getText();
				actinfoPanelBillStatus=infoPanelBillStatus.getText();
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 235, 8, actinfoPanelStatus);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 236, 8, actinfoPanelCreatedBY);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 237, 8, actinfoPanelEditedBy);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 238, 8, actinfoPanelNextToAuth);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 239, 8, actinfoPanelBillStatus);
				
				 
				System.out.println("************************************* checkClickOnDocumentNumberAlertsInAuthorizeUser  *********************************");

				System.out.println("PvdocNumber                 :  " + actdocNumber 			 +" Value Expected : " + expdocNumber);
		        System.out.println("PvVoucherDate               :  " + actVoucherDate 			 +" Value Expected : " + expVoucherDate);
		        
		        System.out.println("PvVoucherpurchaseAccountTxt :  " + actpurchaseAccountTxt 	 +" Value Expected : " + exppurchaseAccountTxt);
		        System.out.println("PvVouchervendorAccountTxt   :  " + actvendorAccountTxt 		 +" Value Expected : " + expvendorAccountTxt);
		        System.out.println("PvVoucherHeaderCurrency     :  " + actvoucherHeaderCurrency  +" Value Expected : " + expvoucherHeaderCurrency);
		        System.out.println("PvVoucherdepartmentTxt      :  " + actdepartmentTxt 		 +" Value Expected : " + expdepartmentTxt);
		        System.out.println("PvVoucherWarehouse          :  " + actwareHouseTxt 			 +" Value Expected : " + expwareHouseTxt);
		        
		        System.out.println("PvVoucherFooterNet          :  " + actPvVoucherFooterNet 	 +" Value Expected : " + expPvVoucherFooterNet);
		        System.out.println("PvVoucherFooterQty          :  " + actPvVoucherFooterQty  	 +" Value Expected : " + expPvVoucherFooterQty);
		        System.out.println("PvVoucherFooterGross        :  " + actPvVoucherFooterGross	 +" Value Expected : " + expPvVoucherFooterGross);
		        //System.out.println("PvVoucherFooterAvgRateO     :  " + actPvVoucherFooterAvgRateO+" Value Expected : " + expPvVoucherFooterAvgRateO);
		        
		        System.out.println("First Row Item Name         :  " + actPvVoucherItemR1  		 +" Value Expected : " + expPvVoucherItemR1);
		        System.out.println("First Row Units Name        :  " + actPvVoucherUnitsR1 		 +" Value Expected : " + expPvVoucherUnitsR1);
		        System.out.println("First Row Qty Name          :  " + actPvVoucherQtyR1		 +" Value Expected : " + expPvVoucherQtyR1);
		        System.out.println("First Row Rate Name         :  " + actPvVoucherRateR1 		 +" Value Expected : " + expPvVoucherRateR1);
		        System.out.println("First Row Gross Name        :  " + actPvVoucherGrossR1 	     +" Value Expected : " + expPvVoucherGrossR1);
		        //System.out.println("First Row Batch Name        :  " + actPvVoucherBatchR1 		 +" Value Expected : " + expPvVoucherBatchR1);
		        
		        /*System.out.println("Second Row Item Name        :  " + actPvVoucherItemR2  		 +" Value Expected : " + expPvVoucherItemR2);
		        System.out.println("Second Row Units Name       :  " + actPvVoucherUnitsR2 		 +" Value Expected : " + expPvVoucherUnitsR2);
		        System.out.println("Second Row Qty Name         :  " + actPvVoucherQtyR2 		 +" Value Expected : " + expPvVoucherQtyR2);
		        System.out.println("Second Row Rate Name        :  " + actPvVoucherRateR2  		 +" Value Expected : " + expPvVoucherRateR2);
		        System.out.println("Second Row Gross Name       :  " + actPvVoucherGrossR2 		 +" Value Expected : " + expPvVoucherGrossR2);
		        System.out.println("Second Row Bin Name         :  " + actPvVoucherBinR2 		 +" Value Expected : " + expPvVoucherBinR2);*/
		        
		        System.out.println("infoPanelStatus             :  ." + actinfoPanelStatus 		 +". Value Expected : " + expinfoPanelStatus);
		        System.out.println("infoPanelCreatedBY          :  ." + actinfoPanelCreatedBY 	 +". Value Expected : " + expinfoPanelCreatedBY);
		        System.out.println("infoPanelEditedBy           :  ." + actinfoPanelEditedBy 	 +". Value Expected : " + expinfoPanelEditedBy);
		        System.out.println("infoPanelNextToAuth         :  ." + actinfoPanelNextToAuth 	 +". Value Expected : " + expinfoPanelNextToAuth);
		        System.out.println("infoPanelBillStatus         :  ." + actinfoPanelBillStatus	 +". Value Expected : " + expinfoPanelBillStatus);
		        				
				if(actdocNumber.equalsIgnoreCase(expdocNumber) && actVoucherDate.equalsIgnoreCase(expVoucherDate) 
						&& actwareHouseTxt.equalsIgnoreCase(expwareHouseTxt) && actpurchaseAccountTxt.equalsIgnoreCase(exppurchaseAccountTxt)
						&& actvendorAccountTxt.equalsIgnoreCase(expvendorAccountTxt) && actvoucherHeaderCurrency.equalsIgnoreCase(expvoucherHeaderCurrency)
						
						&& actPvVoucherFooterQty.equalsIgnoreCase(expPvVoucherFooterQty) && actPvVoucherFooterGross.equalsIgnoreCase(expPvVoucherFooterGross) 
						&& actPvVoucherFooterNet.equalsIgnoreCase(expPvVoucherFooterNet) /*&& actPvVoucherFooterAvgRateO.equalsIgnoreCase(expPvVoucherFooterAvgRateO)*/
						
						&& actPvVoucherItemR1.equalsIgnoreCase(expPvVoucherItemR1) && actPvVoucherUnitsR1.equalsIgnoreCase(expPvVoucherUnitsR1)
						&& actPvVoucherQtyR1.equalsIgnoreCase(expPvVoucherQtyR1) && actPvVoucherRateR1.equalsIgnoreCase(expPvVoucherRateR1)
						&& actPvVoucherGrossR1.equalsIgnoreCase(expPvVoucherGrossR1)  /*&& actPvVoucherBatchR1.equalsIgnoreCase(expPvVoucherBatchR1)*/
						
						/*&& actPvVoucherItemR2.equalsIgnoreCase(expPvVoucherItemR2) && actPvVoucherUnitsR2.equalsIgnoreCase(expPvVoucherUnitsR2)
						&& actPvVoucherQtyR2.equalsIgnoreCase(expPvVoucherQtyR2) && actPvVoucherRateR2.equalsIgnoreCase(expPvVoucherRateR2)
						&& actPvVoucherGrossR2.equalsIgnoreCase(expPvVoucherGrossR2)  && actPvVoucherBinR2.equalsIgnoreCase(expPvVoucherBinR2)
						
						&& actPvVoucherItemR3.equalsIgnoreCase(expPvVoucherItemR3) && actPvVoucherUnitsR3.equalsIgnoreCase(expPvVoucherUnitsR3)
						&& actPvVoucherQtyR3.equalsIgnoreCase(expPvVoucherQtyR3) && actPvVoucherRateR3.equalsIgnoreCase(expPvVoucherRateR3)
						&& actPvVoucherGrossR3.equalsIgnoreCase(expPvVoucherGrossR3)  && actPvVoucherRMAR3.equalsIgnoreCase(expPvVoucherRMAR3)
						
						&& actPvVoucherItemR4.equalsIgnoreCase(expPvVoucherItemR4) && actPvVoucherUnitsR4.equalsIgnoreCase(expPvVoucherUnitsR4)
						&& actPvVoucherQtyR4.equalsIgnoreCase(expPvVoucherQtyR4) && actPvVoucherRateR4.equalsIgnoreCase(expPvVoucherRateR4)
						&& actPvVoucherGrossR4.equalsIgnoreCase(expPvVoucherGrossR4)  && actPvVoucherBatchR4.equalsIgnoreCase(expPvVoucherBatchR4)*/
						
						&& actinfoPanelStatus.equalsIgnoreCase(expinfoPanelStatus) && actinfoPanelCreatedBY.equalsIgnoreCase(expinfoPanelCreatedBY)
						&& actinfoPanelEditedBy.equalsIgnoreCase(expinfoPanelEditedBy) && actinfoPanelNextToAuth.equalsIgnoreCase(expinfoPanelNextToAuth)
						&& actinfoPanelBillStatus.equalsIgnoreCase(expinfoPanelBillStatus))
				{
					System.out.println("Test Pass : Saved Data is As Expected");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 200, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Saved Data is NOT As Expected");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 200, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 200, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
			}
			}
			
			
			
			
			
		/*	@FindBy(xpath="//td[contains(text(),'Authorized')]")
			private static WebElement homePageAuthStatusAuthorizeRowOne;
			
			@FindBy(xpath="//div[contains(text(),'Authorized by')]")
			private static WebElement infoPanelAuthorizeBy;*/
			
			
			@FindBy(xpath="//td[contains(text(),'Pending')]")
			private static WebElement homePageAuthStatusPendingRowOne;
			 
			
			public boolean checkPurchaseVoucherNewAuthorizationStatusInHomePageInAuthorizeUser() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

				try
				{
			   /* getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(authorizeBtn));
			    authorizeBtn.click();*/

			    getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(new_CloseBtn));
			    new_CloseBtn.click();
			    Thread.sleep(2000);
			    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(suspendStatusRow1));
			    
				String actStatus=suspendStatusRow1.getText();
				String expStatus=excelReader.getCellData("PurchaseVoucherN", 241, 7);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 241, 8, actStatus);
			   
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homePageAuthStatusPendingRowOne));
				String acthomePageAuthStatusPendingRowOne= homePageAuthStatusPendingRowOne.getText();
				String exphomePageAuthStatusPendingRowOne=excelReader.getCellData("PurchaseVoucherN", 242, 7);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 242, 8, acthomePageAuthStatusPendingRowOne);
				
				System.out.println("************************************* checkVoucherSuspendAuthorizeStatusInAuthorizeUser  *********************************");
				System.out.println("Suspend Status In home Page 	 :  "+actStatus 						+" Value Expected : "+expStatus);
				System.out.println("homePageAuthStatusPendingRowOne  :  "+acthomePageAuthStatusPendingRowOne+" Value Expected : "+exphomePageAuthStatusPendingRowOne);
				
				if (actStatus.equalsIgnoreCase(expStatus) && acthomePageAuthStatusPendingRowOne.equalsIgnoreCase(exphomePageAuthStatusPendingRowOne))
				{
					System.out.println("Test Pass : Entry Page Close Button");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 240, 9, resPass);
					return true;
				}
				
				else
				{
					System.out.println("Test Fail :  Entry Page Close Button");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 240, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 240, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
			}
			}
			

			//Click on Pending Authorization Purchase link in the Purchase Voucher New
			
			@FindBy(xpath="//body/section/div/div/section/div/div/div/div/div/table/tbody/tr")
			private static WebElement homePagePendingAuthRows;
			
			@FindBy(xpath="//*[@id='tblBodyTransRender']/tr")
			private static List<WebElement>  voucherBodyGridRowCount;
				
			@FindBy(xpath="//*[@id='tblBodyTransRender']")
			private static WebElement  voucherBodyGrid;
			
			public boolean checkPendingAuthorizationPurchaseInHomePage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

				try
				{
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homePagePendingAuthorizationView));	
				homePagePendingAuthorizationView.click();
				
				Thread.sleep(3000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherBodyGrid));
				
				boolean voucherbodyGrid=voucherBodyGrid.getText().isEmpty();
				
				String actvoucherBodyGrid=Boolean.toString(voucherbodyGrid);
				String expvoucherBodyGrid=excelReader.getCellData("PurchaseVoucherN", 244, 7);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 244, 8, actvoucherBodyGrid.toUpperCase());
				
				System.out.println("************************************* checkPendingAuthorizationPurchaseInHomePage  *********************************");
				
				System.out.println("Row Count in Voucher Body : "+actvoucherBodyGrid+" Value Expected : "+expvoucherBodyGrid);
				
				if(actvoucherBodyGrid.equalsIgnoreCase(expvoucherBodyGrid))
				{
					System.out.println("Test Pass :No Vouchers are Displayed ");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 243, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Vouchers are Displayed ");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 243, 9, resFail);
					return false;
				}
				}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 243, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
			}
			
			}

			
			//Click on Pending Purchase Orders link in the Purchase Voucher New
			public boolean checkPendingPurchaseOrdersInHomePage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				try
				{
				
					
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homePagePendingOrdersLinks));	
				homePagePendingOrdersLinks.click();
				
				boolean voucherbodyGrid=voucherBodyGrid.getText().isEmpty();
				
				String actvoucherbodyGrid=Boolean.toString(voucherbodyGrid);
				String expvoucherbodyGrid= excelReader.getCellData("PurchaseVoucherN", 246, 7);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 246, 8, actvoucherbodyGrid.toUpperCase());
				
				
				System.out.println("************************************* checkPendingPurchaseOrdersInHomePage  *********************************");
				
				System.out.println("Row Count in Voucher Body : "+actvoucherbodyGrid+" Value Expected : "+expvoucherbodyGrid);
				
				if(actvoucherbodyGrid.equalsIgnoreCase(expvoucherbodyGrid))
				{
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 245, 9, resPass);
					return true;
				}
				else
				{
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 245, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 245, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
			}
			}

			
			public boolean checkCloseOptionInPurchaseVoucherNewHomePage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

				try
				{
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));	
				voucherhomeCloseBtn.click();
				
				boolean labeldashboard=labelDashboard.isDisplayed();
				
				String actlabelDashboard=Boolean.toString(labeldashboard);
				String explabelDashboard=excelReader.getCellData("PurchaseVoucherN", 248, 7);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 248, 8, actlabelDashboard);
				
				System.out.println("************************************* checkCloseOptionInPurchaseVoucherNewHomePage  *********************************");
				System.out.println("labelDashboard  : "+actlabelDashboard+" Value Expected : "+explabelDashboard);
				
				if(actlabelDashboard.equalsIgnoreCase(explabelDashboard))
				{
					System.out.println("Test Pass : Home Close Working");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 247, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Home Close NOT Working");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 247, 9, resPass);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 247, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
			}
			}

		  




	@FindBy(xpath="//*[@id='userprofile']/li/span[2]")
	private static WebElement logoutOption;

	/*@FindBy(xpath="//*[@id='txtUsername']")
	private static WebElement username;*/

	@FindBy(id="txtPassword")
	private static WebElement password;

	@FindBy(id="ddlCompany")
	private static WebElement companyDropDownList;

	@FindBy(id="btnSignin")
	private static WebElement signIn;

	//ddd

	//Logout and Login as Authorize Voucher To Login Authorize User
		public boolean checkSignOutBeforeVoucherAuthorization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			    getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(userNameDisplay));
			    userNameDisplay.click();
			
			    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			    logoutOption.click();
			 
				boolean verifyFiledsStatus=true;
				
				getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(username));
				
				
				boolean actusername              = username.isDisplayed();
				boolean actpassword              = password.isDisplayed();
				boolean actcompanyDropDownList   = companyDropDownList.isDisplayed();
				boolean actsignIn                = signIn.isDisplayed();
				
				// Expected
				boolean expusername              = true;
				boolean exppassword              = true;
				boolean expcompanyDropDownList   = true;
				boolean expsignIn                = true;
				
				System.out.println("************************************* checkSignOut  *********************************");
				System.out.println("username             : "+actusername             +" Value Expected : "+expusername);
				System.out.println("password             : "+actpassword             +" Value Expected : "+exppassword);
				System.out.println("companyDropDownList  : "+actcompanyDropDownList  +" Value Expected : "+expcompanyDropDownList);
				System.out.println("signIn               : "+actsignIn               +" Value Expected : "+expsignIn);
				
				boolean actMethod=actusername==expusername && actpassword==exppassword && actcompanyDropDownList==expcompanyDropDownList
						&& actsignIn==expsignIn;
				
				
				String actResult=Boolean.toString(actMethod);
				String expResult=excelReader.getCellData("PurchaseVoucherN", 250, 7);
		
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 250, 8, actResult.toUpperCase());
				
				
				if(actMethod==true)
				{
			
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 249, 9, resPass);
					return true;
				}
				else
				{
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 249, 9, resFail);
					return false;
			    }
			      }
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 249, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				return false;
			}
	    }


	      public boolean checkAlertsInWrapperLayoutAuthorizeUser() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			try
			{
				
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(username));
			username.click();
			 
			 username.sendKeys(excelReader.getCellData("PurchaseVoucherN", 252, 6));
			 getAction().moveToElement(username).sendKeys(Keys.TAB).perform();
			 
			 getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(password));
			 password.sendKeys(excelReader.getCellData("PurchaseVoucherN", 253, 6));
			 
			 getAction().moveToElement(password).sendKeys(Keys.TAB).perform();
			  
			 getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(signIn));
			 signIn.click();
			 
			 //checkRefreshPopOnlogin();
			 
			//checkPopUpWindow();
			
			Thread.sleep(5000);
			 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			String actUserInfo=userNameDisplay.getText();
			
			System.out.println("User Info : "+actUserInfo);
			
			System.out.println("User Info Capture Text :"+userNameDisplay.getText());
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
			
			companyLogo.click();
			
			String actCompanyTxt=companyName.getText();
			String actLoginCompanyName=actCompanyTxt.substring(0, 19);
			System.out.println("company name :"+ actLoginCompanyName);
			companyLogo.click();
						    	
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
			String getDashboard=labelDashboard.getText();
				
			boolean getnoOfAlertsDisplay=noOfAlertsDisplay.isDisplayed();
					
			// Expected
			String expuserInfo="UserAllOptionsST";
			String expLoginCompanyName="Automation Company ";
			String expDashboard="Dashboard";
			boolean expnoOfAlertsDisplay=true;
			
			System.out.println("************************************* checkAlertsToSignIAsAuthorizeUser  *********************************");
			System.out.println("userNameDisplay    : "+actUserInfo              +" Value Expected : "+expuserInfo);
			System.out.println("LoginCompanyName   : "+actLoginCompanyName      +" Value Expected : "+expLoginCompanyName);
			System.out.println("labelDashboard     : "+getDashboard             +" Value Expected : "+expDashboard);
			System.out.println("noOfAlertsDisplay  : "+getnoOfAlertsDisplay     +" Value Expected : "+expnoOfAlertsDisplay);
			
			
			boolean actMethod=actUserInfo.equalsIgnoreCase(expuserInfo) && actLoginCompanyName.equalsIgnoreCase(expLoginCompanyName)
					&& getDashboard.equalsIgnoreCase(expDashboard) && getnoOfAlertsDisplay==expnoOfAlertsDisplay;
			
			String actResult=Boolean.toString(actMethod);
			String expResult=excelReader.getCellData("PurchaseVoucherN", 254, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 254, 8, actResult);
			
			
			if(actMethod==true)
			{
				System.out.println("Test Pass : Transaction Authorization is Displayed");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 251, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Transaction Authorization is Displayed");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 251, 9, resFail);
				return false;
			}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 251, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				return false;
			}
	}



	@FindBy(xpath="//span[@id='noofalerts']")
	private static WebElement noOfAlertsDisplay;

	@FindBy(xpath="//li[@class='header']")
	private static WebElement alertsMainHeader;

	@FindBy(xpath="//li[@class='treeview-menu']//a[@id='1']")
	private static WebElement alertTransactionsTreeView;

	@FindBy(xpath="//a[@id='769']//span[1]")
	private static WebElement alertPurchaseVoucher;

	@FindBy(xpath="//li[@id='masterChild_769']//a")
	private static WebElement alertPurchaseVoucherNeedsAuthorization;


		public boolean checkClickOnAlertsInWrapperLayoutAuthorizeUser() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(noOfAlertsDisplay));
			noOfAlertsDisplay.click();
			
			Thread.sleep(2000);
			
			// Actual
			String  actAlertsMainHeader=alertsMainHeader.getText();
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 256, 8, actAlertsMainHeader);
			
			boolean actNoOfAlertsDisplay=alertsMainHeader.isDisplayed();
			
			String actAlertTransactionsTreeView=alertTransactionsTreeView.getText();
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 257, 8, actAlertTransactionsTreeView);
			
			boolean actNoOfAlertsTransaction=alertTransactionsTreeView.isDisplayed();
			
			// Expected
			String  expAlertsMainHeader = excelReader.getCellData("PurchaseVoucherN", 256, 7);
			boolean expNoOfAlertsDisplay=true;
			
			String  expAlertTransactionsTreeView=excelReader.getCellData("PurchaseVoucherN", 257, 7);
			boolean expNoOfAlertsTransaction=true;
			
			System.out.println("************************************* checkClickOnAlertsInAuthorizeUser  *********************************");
			System.out.println("noOfAlertsDisplay         : "+actNoOfAlertsDisplay+" Value Expected          : "+expNoOfAlertsDisplay);
			System.out.println("alertsMainHeader          : "+actAlertsMainHeader+" Value Expected           : "+expAlertsMainHeader);
			System.out.println("noOfalertsTransaction     : "+actNoOfAlertsTransaction+" Value Expected      : "+expNoOfAlertsTransaction);
			System.out.println("alertTransactionsTreeView : "+actAlertTransactionsTreeView+" Value Expected  : "+expAlertTransactionsTreeView);
			
			if(actNoOfAlertsDisplay==expNoOfAlertsDisplay && actAlertsMainHeader.equalsIgnoreCase(expAlertsMainHeader)
					&& actNoOfAlertsTransaction==expNoOfAlertsTransaction && actAlertTransactionsTreeView.equalsIgnoreCase(expAlertTransactionsTreeView))
			{
			
				System.out.println("Test Pass : Transaction Authorization is Displayed");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 255, 9, resPass);
				return true;
				
			}
			else
			{
				System.out.println("Test Fail : Transaction Authorization is Displayed");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 255, 9, resFail);
				return false;
			
			}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 255, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
			}
	}


		public boolean checkClickOnTransactionAlertsInAlertsPopUpAuthorizeUser() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(alertTransactionsTreeView));
			alertTransactionsTreeView.click();
			
			Thread.sleep(2000);
			
			// Actual
			String actAlertPurchaseVoucher=alertPurchaseVoucher.getText();
			boolean actNoOfAlertPurchaseVoucher=alertPurchaseVoucher.isDisplayed();
			
			// Expected
			String expAlertPurchaseVoucher=excelReader.getCellData("PurchaseVoucherN", 259, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 259, 8, actAlertPurchaseVoucher);
			
			boolean expNoOfAlertPurchaseVoucher=true;
			
			System.out.println("************************************* checkClickOnTransactionAlertsInAuthorizeUser  *********************************");
			System.out.println("No Of alertPurchaseVoucher  : "+actNoOfAlertPurchaseVoucher +" Value Expected : "+expNoOfAlertPurchaseVoucher);
			System.out.println("alertPurchaseVoucher        : ."+actAlertPurchaseVoucher		+". Value Expected : "+expAlertPurchaseVoucher);
			
			if(actNoOfAlertPurchaseVoucher==expNoOfAlertPurchaseVoucher && actAlertPurchaseVoucher.equalsIgnoreCase(expAlertPurchaseVoucher))
			{
			
				System.out.println("Test Pass : Transaction Authorization is Displayed");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 258, 9, resPass);
				return true;
				
			}
			else
			{
				System.out.println("Test Fail : Transaction Authorization is Displayed");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 258, 9, resFail);
				return false;
			
			}
			}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 258, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
	   	 	return false;
		}
	}



	     public boolean checkClickOnVoucherAlertsFromTransactionsOfAlertPopupAuthorizeUser() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
				
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(alertPurchaseVoucher));
			alertPurchaseVoucher.click();
			
			Thread.sleep(2000);
			
			// Actual
			String actAlertPurchaseVoucherNeedsAuthorization=alertPurchaseVoucherNeedsAuthorization.getText();
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 261, 8, actAlertPurchaseVoucherNeedsAuthorization);
			
			boolean actNoOfAlertPurchaseVoucherNeedsAuthorization=alertPurchaseVoucherNeedsAuthorization.isDisplayed();
			
			// Expected
			String expAlertPurchaseVoucherNeedsAuthorization=excelReader.getCellData("PurchaseVoucherN", 261, 7);
			
			boolean expNoOfAlertPurchaseVoucherNeedsAuthorization=true;
			
			System.out.println("************************************* checkClickOnVoucherAlertsInAuthorizeUser  *********************************");
			System.out.println("No Of alertPurchaseVoucherNeedsAuthorization  : "+actNoOfAlertPurchaseVoucherNeedsAuthorization +" Value Expected : "+expNoOfAlertPurchaseVoucherNeedsAuthorization);
			System.out.println("alertPurchaseVoucherNeedsAuthorization        : ."+actAlertPurchaseVoucherNeedsAuthorization		+". Value Expected : "+expAlertPurchaseVoucherNeedsAuthorization);
			
			if(actNoOfAlertPurchaseVoucherNeedsAuthorization==expNoOfAlertPurchaseVoucherNeedsAuthorization
					&& actAlertPurchaseVoucherNeedsAuthorization.startsWith(expAlertPurchaseVoucherNeedsAuthorization))
			{
			
				System.out.println("Test Pass : Transaction Authorization is Displayed");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 260, 9, resPass);
				return true;
				
			}
			else
			{
				System.out.println("Test Fail : Transaction Authorization is Displayed");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 260, 9, resFail);
				return false;
			
			}
				  
			}
	     catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 260, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
			}
	}




	@FindBy(xpath="//div[@id='id_transactionentry_infopanel_data_container']//div[1]//div[2]")
	private static WebElement infoPanelStatus;

	@FindBy(xpath="//div[@id='id_transactionentry_infopanel_data_container']//div[2]//div[2]")
	private static WebElement infoPanelCreatedBY;

	/*@FindBy(xpath="//div[@id='DBdashlate1']//div[2]//div[2]")
	private static WebElement infoPanelCreatedBY;*/

	@FindBy(xpath="//div[@id='id_transactionentry_infopanel_data_container']//div[4]//div[2]")
	private static WebElement infoPanelEditedBy;

	@FindBy(xpath="//div[@id='id_transactionentry_infopanel_data_container']//div[6]//div[2]")
	private static WebElement infoPanelNextToAuth;

	@FindBy(xpath="//div[@id='id_transactionentry_infopanel_data_container']//div[7]//div[2]")
	private static WebElement infoPanelBillStatus;


		public boolean checkClickOnDocumentNumberAlertsInAlertsPopUpAuthorizeUser() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try 
			{
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(alertPurchaseVoucherNeedsAuthorization));
			alertPurchaseVoucherNeedsAuthorization.click();
			
			Thread.sleep(5000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			documentNumberTxt.click();
			
			String actdocNumber,expdocNumber;
			
			actdocNumber=documentNumberTxt.getAttribute("value");
			expdocNumber=excelReader.getCellData("PurchaseVoucherN", 263, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 263, 8, actdocNumber);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
			dateTxt.click();
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
			Date date=new Date();
			System.out.println(df.format(date));
			
			String actVoucherDate,expVoucherDate;
			
			actVoucherDate=dateTxt.getAttribute("value");
			expVoucherDate=df.format(date);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			
			String actpurchaseAccountTxt=purchaseAccountTxt.getAttribute("value");
			String exppurchaseAccountTxt=excelReader.getCellData("PurchaseVoucherN", 264, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 264, 8, actpurchaseAccountTxt);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			
			String actvendorAccountTxt=vendorAccountTxt.getAttribute("value");
			String expvendorAccountTxt=excelReader.getCellData("PurchaseVoucherN", 265, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 265, 8, actvendorAccountTxt);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
			voucherHeaderCurrency.click();
			
			String actvoucherHeaderCurrency=voucherHeaderCurrency.getAttribute("value");
			String expvoucherHeaderCurrency=excelReader.getCellData("PurchaseVoucherN", 266, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 266, 8, actvoucherHeaderCurrency);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			
			String actdepartmentTxt=departmentTxt.getAttribute("value");
			String expdepartmentTxt=excelReader.getCellData("PurchaseVoucherN", 267, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 267, 8, actdepartmentTxt);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			
			String actwareHouseTxt=wareHouseTxt.getAttribute("value");
			String expwareHouseTxt=excelReader.getCellData("PurchaseVoucherN", 268, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 268, 8, actwareHouseTxt);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_footerExpandBtn));
			new_footerExpandBtn.click();
			
			
			String actPvVoucherItemR1,actPvVoucherUnitsR1,actPvVoucherQtyR1,actPvVoucherRateR1,actPvVoucherGrossR1,actPvVoucherBatchR1;
			String actPvVoucherItemR2,actPvVoucherUnitsR2,actPvVoucherQtyR2,actPvVoucherRateR2,actPvVoucherGrossR2,actPvVoucherBinR2;
			String actPvVoucherItemR3,actPvVoucherUnitsR3,actPvVoucherQtyR3,actPvVoucherRateR3,actPvVoucherGrossR3,actPvVoucherRMAR3;
			String actPvVoucherItemR4,actPvVoucherUnitsR4,actPvVoucherQtyR4,actPvVoucherRateR4,actPvVoucherGrossR4,actPvVoucherBatchR4;
			
			String actPvVoucherFooterQty,actPvVoucherFooterGross,actPvVoucherFooterNet,actPvVoucherFooterAvgRateO;
			
			
			String actinfoPanelStatus,actinfoPanelCreatedBY,actinfoPanelEditedBy,actinfoPanelNextToAuth,actinfoPanelBillStatus;
			
			String expPvVoucherItemR1,expPvVoucherUnitsR1,expPvVoucherQtyR1,expPvVoucherRateR1,expPvVoucherGrossR1,expPvVoucherBatchR1;
			String expPvVoucherItemR2,expPvVoucherUnitsR2,expPvVoucherQtyR2,expPvVoucherRateR2,expPvVoucherGrossR2,expPvVoucherBinR2;
			String expPvVoucherItemR3,expPvVoucherUnitsR3,expPvVoucherQtyR3,expPvVoucherRateR3,expPvVoucherGrossR3,expPvVoucherRMAR3;
			String expPvVoucherItemR4,expPvVoucherUnitsR4,expPvVoucherQtyR4,expPvVoucherRateR4,expPvVoucherGrossR4,expPvVoucherBatchR4;
			
			String expPvVoucherFooterQty,expPvVoucherFooterGross,expPvVoucherFooterNet,expPvVoucherFooterAvgRateO;
			
			
			String expinfoPanelStatus,expinfoPanelCreatedBY,expinfoPanelEditedBy,expinfoPanelNextToAuth,expinfoPanelBillStatus;
			
			expPvVoucherItemR1=excelReader.getCellData("PurchaseVoucherN", 269, 7);
			expPvVoucherUnitsR1=excelReader.getCellData("PurchaseVoucherN", 270, 7);
			expPvVoucherQtyR1=excelReader.getCellData("PurchaseVoucherN", 271, 7);
			expPvVoucherRateR1=excelReader.getCellData("PurchaseVoucherN", 272, 7);
			expPvVoucherGrossR1=excelReader.getCellData("PurchaseVoucherN", 273, 7);
			expPvVoucherBatchR1=excelReader.getCellData("PurchaseVoucherN", 274, 7);
			
			/*expPvVoucherItemR2=excelReader.getCellData("PurchaseVoucherN", 275, 7);
			expPvVoucherUnitsR2=excelReader.getCellData("PurchaseVoucherN", 276, 7);;
			expPvVoucherQtyR2=excelReader.getCellData("PurchaseVoucherN", 277, 7);
			expPvVoucherRateR2=excelReader.getCellData("PurchaseVoucherN", 278, 7);
			expPvVoucherGrossR2=excelReader.getCellData("PurchaseVoucherN", 279, 7);			
			expPvVoucherBinR2=excelReader.getCellData("PurchaseVoucherN", 280, 7);
			
			expPvVoucherItemR3=excelReader.getCellData("PurchaseVoucherN", 281, 7);
			expPvVoucherUnitsR3=excelReader.getCellData("PurchaseVoucherN", 282, 7);
			expPvVoucherQtyR3=excelReader.getCellData("PurchaseVoucherN", 283, 7);
			expPvVoucherRateR3=excelReader.getCellData("PurchaseVoucherN", 284, 7);
			expPvVoucherGrossR3=excelReader.getCellData("PurchaseVoucherN", 285, 7);
			expPvVoucherRMAR3=excelReader.getCellData("PurchaseVoucherN", 286, 7);
			
			expPvVoucherItemR4=excelReader.getCellData("PurchaseVoucherN", 287, 7);
			expPvVoucherUnitsR4=excelReader.getCellData("PurchaseVoucherN", 288, 7);
			expPvVoucherQtyR4=excelReader.getCellData("PurchaseVoucherN", 289, 7);
			expPvVoucherRateR4=excelReader.getCellData("PurchaseVoucherN", 290, 7);
			expPvVoucherGrossR4=excelReader.getCellData("PurchaseVoucherN", 291, 7);
			expPvVoucherBatchR4=excelReader.getCellData("PurchaseVoucherN", 292, 7);*/
			
			expPvVoucherFooterNet=excelReader.getCellData("PurchaseVoucherN", 293, 7);
			expPvVoucherFooterQty=excelReader.getCellData("PurchaseVoucherN", 294, 7);
			expPvVoucherFooterGross=excelReader.getCellData("PurchaseVoucherN", 295, 7);
			//expPvVoucherFooterAvgRateO=excelReader.getCellData("PurchaseVoucherN", 296, 7); //11.66
			
			expinfoPanelStatus=excelReader.getCellData("PurchaseVoucherN", 297, 7);
			expinfoPanelCreatedBY=excelReader.getCellData("PurchaseVoucherN", 298, 7);
			expinfoPanelEditedBy=excelReader.getCellData("PurchaseVoucherN", 299, 7);
			expinfoPanelNextToAuth=excelReader.getCellData("PurchaseVoucherN", 300, 7);
			expinfoPanelBillStatus=excelReader.getCellData("PurchaseVoucherN", 301, 7);
			
			System.out.println(netAmount.getText());
			System.out.println(QtyAmount.getText());
			System.out.println(GrossAmount.getText());
			System.out.println(PVNFooterAvgRateO.getText());
						
			actPvVoucherItemR1=select1stRow_1stColumn.getText();
			actPvVoucherUnitsR1=select1stRow_2ndColumn.getText();
			actPvVoucherQtyR1=select1stRow_5thColumn.getText();
			actPvVoucherRateR1=select1stRow_7thColumn.getText();
			actPvVoucherGrossR1=select1stRow_8thColumn.getText();
			//actPvVoucherBatchR1=select1stRow_10thColumn.getText();
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 269, 8, actPvVoucherItemR1);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 270, 8, actPvVoucherUnitsR1);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 271, 8, actPvVoucherQtyR1);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 272, 8, actPvVoucherRateR1);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 273, 8, actPvVoucherGrossR1);
			//excelReader.setCellData(xlfile, "PurchaseVoucherN", 274, 8, actPvVoucherBatchR1);
			
			/*actPvVoucherItemR2=select2ndRow_1stColumn.getText();
			actPvVoucherUnitsR2=select2ndRow_2ndColumn.getText();
			actPvVoucherQtyR2=select2ndRow_5thColumn.getText();
			actPvVoucherRateR2=select2ndRow_7thColumn.getText();
			actPvVoucherGrossR2=select2ndRow_8thColumn.getText();
			actPvVoucherBinR2=select2ndRow_10thColumn.getText();
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 275, 8, actPvVoucherItemR2);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 276, 8, actPvVoucherUnitsR2);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 277, 8, actPvVoucherQtyR2);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 278, 8, actPvVoucherRateR2);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 279, 8, actPvVoucherGrossR2);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 280, 8, actPvVoucherBinR2);
			
			actPvVoucherItemR3=select3rdRow_1stColumn.getText();
			actPvVoucherUnitsR3=select3rdRow_2ndColumn.getText();
			actPvVoucherQtyR3=select3rdRow_5thColumn.getText();
			actPvVoucherRateR3=select3rdRow_7thColumn.getText();
			actPvVoucherGrossR3=select3rdRow_8thColumn.getText();
			actPvVoucherRMAR3=select3rdRow_12thColumn.getText();
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 281, 8, actPvVoucherItemR3);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 282, 8, actPvVoucherUnitsR3);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 283, 8, actPvVoucherQtyR3);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 284, 8, actPvVoucherRateR3);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 285, 8, actPvVoucherGrossR3);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 286, 8, actPvVoucherRMAR3);
			
			actPvVoucherItemR4=select4thRow_1stColumn.getText();
			actPvVoucherUnitsR4=select4thRow_2ndColumn.getText();
			actPvVoucherQtyR4=select4thRow_5thColumn.getText();
			actPvVoucherRateR4=select4thRow_7thColumn.getText();
			actPvVoucherGrossR4=select4thRow_8thColumn.getText();
			actPvVoucherBatchR4=select4thRow_9thColumn.getText();
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 287, 8, actPvVoucherItemR4);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 288, 8, actPvVoucherUnitsR4);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 289, 8, actPvVoucherQtyR4);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 290, 8, actPvVoucherRateR4);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 291, 8, actPvVoucherGrossR4);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 292, 8, actPvVoucherBatchR4);*/
			
			
			actPvVoucherFooterNet=netAmount.getText();
			actPvVoucherFooterQty=QtyAmount.getText();
			actPvVoucherFooterGross=GrossAmount.getText();
			actPvVoucherFooterAvgRateO=PVNFooterAvgRateO.getText();
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 293, 8, actPvVoucherFooterNet);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 294, 8, actPvVoucherFooterQty);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 295, 8, actPvVoucherFooterGross);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 296, 8, actPvVoucherFooterAvgRateO);
			
			
			actinfoPanelStatus=infoPanelStatus.getText();
			actinfoPanelCreatedBY=infoPanelCreatedBY.getText();
			actinfoPanelEditedBy=infoPanelEditedBy.getText();
			actinfoPanelNextToAuth=infoPanelNextToAuth.getText();
			actinfoPanelBillStatus=infoPanelBillStatus.getText();
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 297, 8, actinfoPanelStatus);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 298, 8, actinfoPanelCreatedBY);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 299, 8, actinfoPanelEditedBy);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 300, 8, actinfoPanelNextToAuth);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 301, 8, actinfoPanelBillStatus);
			

			System.out.println("************************************* checkClickOnDocumentNumberAlertsInAuthorizeUser  *********************************");
			
			System.out.println("PvdocNumber                 :  " + actdocNumber 			 +" Value Expected : " + expdocNumber);
			System.out.println("PvVoucherDate               :  " + actVoucherDate 			 +" Value Expected : " + expVoucherDate);
			
			System.out.println("PvVoucherpurchaseAccountTxt :  " + actpurchaseAccountTxt 	 +" Value Expected : " + exppurchaseAccountTxt);
			System.out.println("PvVouchervendorAccountTxt   :  " + actvendorAccountTxt 		 +" Value Expected : " + expvendorAccountTxt);
			System.out.println("PvVoucherHeaderCurrency     :  " + actvoucherHeaderCurrency  +" Value Expected : " + expvoucherHeaderCurrency);
			System.out.println("PvVoucherdepartmentTxt      :  " + actdepartmentTxt 		 +" Value Expected : " + expdepartmentTxt);
			System.out.println("PvVoucherWarehouse          :  " + actwareHouseTxt 			 +" Value Expected : " + expwareHouseTxt);
			
			System.out.println("PvVoucherFooterNet          :  " + actPvVoucherFooterNet 	 +" Value Expected : " + expPvVoucherFooterNet);
			System.out.println("PvVoucherFooterQty          :  " + actPvVoucherFooterQty  	 +" Value Expected : " + expPvVoucherFooterQty);
			System.out.println("PvVoucherFooterGross        :  " + actPvVoucherFooterGross	 +" Value Expected : " + expPvVoucherFooterGross);
			//System.out.println("PvVoucherFooterAvgRateO     :  " + actPvVoucherFooterAvgRateO+" Value Expected : " + expPvVoucherFooterAvgRateO);
			
			System.out.println("First Row Item Name         :  " + actPvVoucherItemR1  		 +" Value Expected : " + expPvVoucherItemR1);
			System.out.println("First Row Units Name        :  " + actPvVoucherUnitsR1 		 +" Value Expected : " + expPvVoucherUnitsR1);
			System.out.println("First Row Qty Name          :  " + actPvVoucherQtyR1		 +" Value Expected : " + expPvVoucherQtyR1);
			System.out.println("First Row Rate Name         :  " + actPvVoucherRateR1 		 +" Value Expected : " + expPvVoucherRateR1);
			System.out.println("First Row Gross Name        :  " + actPvVoucherGrossR1 	     +" Value Expected : " + expPvVoucherGrossR1);
			//System.out.println("First Row Batch Name        :  " + actPvVoucherBatchR1 		 +" Value Expected : " + expPvVoucherBatchR1);
			
			/*System.out.println("Second Row Item Name        :  " + actPvVoucherItemR2  		 +" Value Expected : " + expPvVoucherItemR2);
			System.out.println("Second Row Units Name       :  " + actPvVoucherUnitsR2 		 +" Value Expected : " + expPvVoucherUnitsR2);
			System.out.println("Second Row Qty Name         :  " + actPvVoucherQtyR2 		 +" Value Expected : " + expPvVoucherQtyR2);
			System.out.println("Second Row Rate Name        :  " + actPvVoucherRateR2  		 +" Value Expected : " + expPvVoucherRateR2);
			System.out.println("Second Row Gross Name       :  " + actPvVoucherGrossR2 		 +" Value Expected : " + expPvVoucherGrossR2);
			System.out.println("Second Row Bin Name         :  " + actPvVoucherBinR2 		 +" Value Expected : " + expPvVoucherBinR2);*/
			
			System.out.println("infoPanelStatus             :  " + actinfoPanelStatus 		 +" Value Expected : " + expinfoPanelStatus);
			System.out.println("infoPanelCreatedBY          :  " + actinfoPanelCreatedBY 	 +" Value Expected : " + expinfoPanelCreatedBY);
			System.out.println("infoPanelEditedBy           :  " + actinfoPanelEditedBy 	 +" Value Expected : " + expinfoPanelEditedBy);
			System.out.println("infoPanelNextToAuth         :  " + actinfoPanelNextToAuth 	 +" Value Expected : " + expinfoPanelNextToAuth);
			System.out.println("infoPanelBillStatus         :  " + actinfoPanelBillStatus	 +" Value Expected : " + expinfoPanelBillStatus);
			
			
			
			if(actdocNumber.equalsIgnoreCase(expdocNumber) && actVoucherDate.equalsIgnoreCase(expVoucherDate) 
					&& actwareHouseTxt.equalsIgnoreCase(expwareHouseTxt) && actpurchaseAccountTxt.equalsIgnoreCase(exppurchaseAccountTxt)
					&& actvendorAccountTxt.equalsIgnoreCase(expvendorAccountTxt) && actvoucherHeaderCurrency.equalsIgnoreCase(expvoucherHeaderCurrency)
					
					&& actPvVoucherFooterQty.equalsIgnoreCase(expPvVoucherFooterQty) && actPvVoucherFooterGross.equalsIgnoreCase(expPvVoucherFooterGross) 
					&& actPvVoucherFooterNet.equalsIgnoreCase(expPvVoucherFooterNet) /*&& actPvVoucherFooterAvgRateO.equalsIgnoreCase(expPvVoucherFooterAvgRateO)*/
					
					&& actPvVoucherItemR1.equalsIgnoreCase(expPvVoucherItemR1) && actPvVoucherUnitsR1.equalsIgnoreCase(expPvVoucherUnitsR1)
					&& actPvVoucherQtyR1.equalsIgnoreCase(expPvVoucherQtyR1) && actPvVoucherRateR1.equalsIgnoreCase(expPvVoucherRateR1)
					&& actPvVoucherGrossR1.equalsIgnoreCase(expPvVoucherGrossR1) /* && actPvVoucherBatchR1.equalsIgnoreCase(expPvVoucherBatchR1)*/
					
					/*&& actPvVoucherItemR2.equalsIgnoreCase(expPvVoucherItemR2) && actPvVoucherUnitsR2.equalsIgnoreCase(expPvVoucherUnitsR2)
					&& actPvVoucherQtyR2.equalsIgnoreCase(expPvVoucherQtyR2) && actPvVoucherRateR2.equalsIgnoreCase(expPvVoucherRateR2)
					&& actPvVoucherGrossR2.equalsIgnoreCase(expPvVoucherGrossR2)  && actPvVoucherBinR2.equalsIgnoreCase(expPvVoucherBinR2)
					
					&& actPvVoucherItemR3.equalsIgnoreCase(expPvVoucherItemR3) && actPvVoucherUnitsR3.equalsIgnoreCase(expPvVoucherUnitsR3)
					&& actPvVoucherQtyR3.equalsIgnoreCase(expPvVoucherQtyR3) && actPvVoucherRateR3.equalsIgnoreCase(expPvVoucherRateR3)
					&& actPvVoucherGrossR3.equalsIgnoreCase(expPvVoucherGrossR3)  && actPvVoucherRMAR3.equalsIgnoreCase(expPvVoucherRMAR3)
					
					&& actPvVoucherItemR4.equalsIgnoreCase(expPvVoucherItemR4) && actPvVoucherUnitsR4.equalsIgnoreCase(expPvVoucherUnitsR4)
					&& actPvVoucherQtyR4.equalsIgnoreCase(expPvVoucherQtyR4) && actPvVoucherRateR4.equalsIgnoreCase(expPvVoucherRateR4)
					&& actPvVoucherGrossR4.equalsIgnoreCase(expPvVoucherGrossR4)  && actPvVoucherBatchR4.equalsIgnoreCase(expPvVoucherBatchR4)*/
					
					&& actinfoPanelStatus.equalsIgnoreCase(expinfoPanelStatus) && actinfoPanelCreatedBY.equalsIgnoreCase(expinfoPanelCreatedBY)
					&& actinfoPanelEditedBy.equalsIgnoreCase(expinfoPanelEditedBy) && actinfoPanelNextToAuth.equalsIgnoreCase(expinfoPanelNextToAuth)
					&& actinfoPanelBillStatus.equalsIgnoreCase(expinfoPanelBillStatus))
			{
				System.out.println("Test Pass : Saved Data is As Expected");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 262, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Saved Data is NOT As Expected");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 262, 9, resFail);
				return false;
			}
			}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 262, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
	   	 	return false;
		}
	   }




	@FindBy(xpath="//td[contains(text(),'Authorized')]")
	private static WebElement homePageAuthStatusAuthorizeRowOne;

	@FindBy(xpath="//div[contains(text(),'Authorized by')]")
	private static WebElement infoPanelAuthorizeBy;
	

	
	@FindBy(xpath="//textarea[@id='id_transactionentry_authorization_remark']")
	private static WebElement  remarksOfAuthorizeRemarks;
	
	
	@FindBy(xpath="//input[@id='id_transactionentry_authorization_remark_popup_ok']")
	private static WebElement  remarksOfAuthorizeRemarksOkButton;


	  public boolean checkAuthorizeOptionAndAuthorizationStatusInHomePageInAuthorizeUser() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(authorizeBtn));
			authorizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(remarksOfAuthorizeRemarks));
		    remarksOfAuthorizeRemarks.click();
		    remarksOfAuthorizeRemarks.sendKeys("Test Smoke");
		    
		    
		    getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(remarksOfAuthorizeRemarksOkButton));
		    remarksOfAuthorizeRemarksOkButton.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(new_CloseBtn));
			new_CloseBtn.click();
			
			String acthomePageAuthStatusAuthorizeRowOne=homePageAuthStatusAuthorizeRowOne.getText();
			String exphomePageAuthStatusAuthorizeRowOne=excelReader.getCellData("PurchaseVoucherN", 303, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 303, 8, acthomePageAuthStatusAuthorizeRowOne);
			
			System.out.println("************************************* checkAuthorizeOptionAndAuthorizationStatusInHomePageInAuthorizeUser  *********************************");
			System.out.println("homePageAuthStatusAuthorizeRowOne  : "+acthomePageAuthStatusAuthorizeRowOne+" Value Expected : "+exphomePageAuthStatusAuthorizeRowOne);
			
			if (acthomePageAuthStatusAuthorizeRowOne.equalsIgnoreCase(exphomePageAuthStatusAuthorizeRowOne))
			{
				System.out.println("Test Pass : No Vouchers is played ");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 302, 9, resPass);
				return true;
			}
			
			else
			{
				System.out.println("Test Fail : Vouchers are Displayed ");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 302, 9, resFail);
				return false;
			}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 302, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
			}
	}







	     public boolean checkVoucherInformationAfterAuthorizationInAuthorizeUser() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			 
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(grid_ChkBox1));
			getAction().doubleClick(grid_ChkBox1).build().perform();
			
			boolean loading=checkLoadingMessage();
			
			System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
			
			Thread.sleep(5000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			documentNumberTxt.click();
			
			String actdocNumber,expdocNumber;
			
			actdocNumber=documentNumberTxt.getAttribute("value");
			expdocNumber=excelReader.getCellData("PurchaseVoucherN", 305, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 305, 8, actdocNumber);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
			dateTxt.click();
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
			Date date=new Date();
			System.out.println(df.format(date));
			
			String actVoucherDate,expVoucherDate;
			
			actVoucherDate=dateTxt.getAttribute("value");
			expVoucherDate=df.format(date);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			
			String actpurchaseAccountTxt=purchaseAccountTxt.getAttribute("value");
			String exppurchaseAccountTxt=excelReader.getCellData("PurchaseVoucherN", 306, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 306, 8, actpurchaseAccountTxt);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			
			String actvendorAccountTxt=vendorAccountTxt.getAttribute("value");
			String expvendorAccountTxt=excelReader.getCellData("PurchaseVoucherN", 307, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 307, 8, actvendorAccountTxt);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
			voucherHeaderCurrency.click();
			
			String actvoucherHeaderCurrency=voucherHeaderCurrency.getAttribute("value");
			String expvoucherHeaderCurrency=excelReader.getCellData("PurchaseVoucherN", 308, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 308, 8, actvoucherHeaderCurrency);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			
			String actdepartmentTxt=departmentTxt.getAttribute("value");
			String expdepartmentTxt=excelReader.getCellData("PurchaseVoucherN", 309, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 309, 8, actdepartmentTxt);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			
			String actwareHouseTxt=wareHouseTxt.getAttribute("value");
			String expwareHouseTxt=excelReader.getCellData("PurchaseVoucherN", 310, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 310, 8, actwareHouseTxt);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_footerExpandBtn));
			new_footerExpandBtn.click();
			
			
			String actPvVoucherItemR1,actPvVoucherUnitsR1,actPvVoucherQtyR1,actPvVoucherRateR1,actPvVoucherGrossR1,actPvVoucherBatchR1;
			String actPvVoucherItemR2,actPvVoucherUnitsR2,actPvVoucherQtyR2,actPvVoucherRateR2,actPvVoucherGrossR2,actPvVoucherBinR2;
			String actPvVoucherItemR3,actPvVoucherUnitsR3,actPvVoucherQtyR3,actPvVoucherRateR3,actPvVoucherGrossR3,actPvVoucherRMAR3;
			String actPvVoucherItemR4,actPvVoucherUnitsR4,actPvVoucherQtyR4,actPvVoucherRateR4,actPvVoucherGrossR4,actPvVoucherBatchR4;
			
			String actPvVoucherFooterQty,actPvVoucherFooterGross,actPvVoucherFooterNet,actPvVoucherFooterAvgRateO;
			
			
			String actinfoPanelStatus,actinfoPanelCreatedBY,actinfoPanelEditedBy,actinfoPanelNextToAuth,actinfoPanelBillStatus;
			
			String expPvVoucherItemR1,expPvVoucherUnitsR1,expPvVoucherQtyR1,expPvVoucherRateR1,expPvVoucherGrossR1,expPvVoucherBatchR1;
			String expPvVoucherItemR2,expPvVoucherUnitsR2,expPvVoucherQtyR2,expPvVoucherRateR2,expPvVoucherGrossR2,expPvVoucherBinR2;
			String expPvVoucherItemR3,expPvVoucherUnitsR3,expPvVoucherQtyR3,expPvVoucherRateR3,expPvVoucherGrossR3,expPvVoucherRMAR3;
			String expPvVoucherItemR4,expPvVoucherUnitsR4,expPvVoucherQtyR4,expPvVoucherRateR4,expPvVoucherGrossR4,expPvVoucherBatchR4;
			
			String expPvVoucherFooterQty,expPvVoucherFooterGross,expPvVoucherFooterNet,expPvVoucherFooterAvgRateO;
			String expinfoPanelStatus,expinfoPanelCreatedBY,expinfoPanelEditedBy,expinfoPanelNextToAuth,expinfoPanelBillStatus;
			
			expPvVoucherItemR1=excelReader.getCellData("PurchaseVoucherN", 311, 7);
			expPvVoucherUnitsR1=excelReader.getCellData("PurchaseVoucherN", 312, 7);
			expPvVoucherQtyR1=excelReader.getCellData("PurchaseVoucherN", 313, 7);
			expPvVoucherRateR1=excelReader.getCellData("PurchaseVoucherN", 314, 7);
			expPvVoucherGrossR1=excelReader.getCellData("PurchaseVoucherN", 315, 7);
			expPvVoucherBatchR1=excelReader.getCellData("PurchaseVoucherN", 316, 7);
			
			/*expPvVoucherItemR2=excelReader.getCellData("PurchaseVoucherN", 317, 7);
			expPvVoucherUnitsR2=excelReader.getCellData("PurchaseVoucherN", 318, 7);
			expPvVoucherQtyR2=excelReader.getCellData("PurchaseVoucherN", 319, 7);
			expPvVoucherRateR2=excelReader.getCellData("PurchaseVoucherN", 320, 7);
			expPvVoucherGrossR2=excelReader.getCellData("PurchaseVoucherN", 321, 7);			
			expPvVoucherBinR2=excelReader.getCellData("PurchaseVoucherN", 322, 7);
			
			expPvVoucherItemR3=excelReader.getCellData("PurchaseVoucherN", 323, 7);
			expPvVoucherUnitsR3=excelReader.getCellData("PurchaseVoucherN", 324, 7);
			expPvVoucherQtyR3=excelReader.getCellData("PurchaseVoucherN", 325, 7);
			expPvVoucherRateR3=excelReader.getCellData("PurchaseVoucherN", 326, 7);
			expPvVoucherGrossR3=excelReader.getCellData("PurchaseVoucherN", 327, 7);
			expPvVoucherRMAR3=excelReader.getCellData("PurchaseVoucherN", 328, 7);
			
			expPvVoucherItemR4=excelReader.getCellData("PurchaseVoucherN", 329, 7);
			expPvVoucherUnitsR4=excelReader.getCellData("PurchaseVoucherN", 330, 7);
			expPvVoucherQtyR4=excelReader.getCellData("PurchaseVoucherN", 331, 7);
			expPvVoucherRateR4=excelReader.getCellData("PurchaseVoucherN", 332, 7);
			expPvVoucherGrossR4=excelReader.getCellData("PurchaseVoucherN", 333, 7);
			expPvVoucherBatchR4=excelReader.getCellData("PurchaseVoucherN", 334, 7);*/
		
			expPvVoucherFooterNet=excelReader.getCellData("PurchaseVoucherN", 335, 7);
			expPvVoucherFooterQty=excelReader.getCellData("PurchaseVoucherN", 336, 7);
			expPvVoucherFooterGross=excelReader.getCellData("PurchaseVoucherN", 337, 7);
			//expPvVoucherFooterAvgRateO=excelReader.getCellData("PurchaseVoucherN", 338, 7); //11.66
			
			expinfoPanelStatus=excelReader.getCellData("PurchaseVoucherN", 339, 7);
			expinfoPanelCreatedBY=excelReader.getCellData("PurchaseVoucherN", 340, 7);
			expinfoPanelEditedBy=excelReader.getCellData("PurchaseVoucherN", 341, 7);
			expinfoPanelNextToAuth=excelReader.getCellData("PurchaseVoucherN", 342, 7);
			expinfoPanelBillStatus=excelReader.getCellData("PurchaseVoucherN", 343, 7);
			
			System.out.println(netAmount.getText());
			System.out.println(QtyAmount.getText());
			System.out.println(GrossAmount.getText());
			System.out.println(PVNFooterAvgRateO.getText());
						
			actPvVoucherItemR1=select1stRow_1stColumn.getText();
			actPvVoucherUnitsR1=select1stRow_2ndColumn.getText();
			actPvVoucherQtyR1=select1stRow_5thColumn.getText();
			actPvVoucherRateR1=select1stRow_7thColumn.getText();
			actPvVoucherGrossR1=select1stRow_8thColumn.getText();
			//actPvVoucherBatchR1=select1stRow_10thColumn.getText();
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 311, 8, actPvVoucherItemR1);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 312, 8, actPvVoucherUnitsR1);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 313, 8, actPvVoucherQtyR1);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 314, 8, actPvVoucherRateR1);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 315, 8, actPvVoucherGrossR1);
			//excelReader.setCellData(xlfile, "PurchaseVoucherN", 316, 8, actPvVoucherBatchR1);
			/*
			actPvVoucherItemR2=select2ndRow_1stColumn.getText();
			actPvVoucherUnitsR2=select2ndRow_2ndColumn.getText();
			actPvVoucherQtyR2=select2ndRow_5thColumn.getText();
			actPvVoucherRateR2=select2ndRow_7thColumn.getText();
			actPvVoucherGrossR2=select2ndRow_8thColumn.getText();
			actPvVoucherBinR2=select2ndRow_10thColumn.getText();
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 317, 8, actPvVoucherItemR2);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 318, 8, actPvVoucherUnitsR2);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 319, 8, actPvVoucherQtyR2);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 320, 8, actPvVoucherRateR2);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 321, 8, actPvVoucherGrossR2);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 322, 8, actPvVoucherBinR2);
			
			actPvVoucherItemR3=select3rdRow_1stColumn.getText();
			actPvVoucherUnitsR3=select3rdRow_2ndColumn.getText();
			actPvVoucherQtyR3=select3rdRow_5thColumn.getText();
			actPvVoucherRateR3=select3rdRow_7thColumn.getText();
			actPvVoucherGrossR3=select3rdRow_8thColumn.getText();
			actPvVoucherRMAR3=select3rdRow_12thColumn.getText();
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 323, 8, actPvVoucherItemR3);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 324, 8, actPvVoucherUnitsR3);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 325, 8, actPvVoucherQtyR3);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 326, 8, actPvVoucherRateR3);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 327, 8, actPvVoucherGrossR3);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 328, 8, actPvVoucherRMAR3);
			
			actPvVoucherItemR4=select4thRow_1stColumn.getText();
			actPvVoucherUnitsR4=select4thRow_2ndColumn.getText();
			actPvVoucherQtyR4=select4thRow_5thColumn.getText();
			actPvVoucherRateR4=select4thRow_7thColumn.getText();
			actPvVoucherGrossR4=select4thRow_8thColumn.getText();
			actPvVoucherBatchR4=select4thRow_9thColumn.getText();
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 329, 8, actPvVoucherItemR4);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 330, 8, actPvVoucherUnitsR4);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 331, 8, actPvVoucherQtyR4);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 332, 8, actPvVoucherRateR4);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 333, 8, actPvVoucherGrossR4);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 334, 8, actPvVoucherBatchR4);*/
			
			
			actPvVoucherFooterNet=netAmount.getText();
			actPvVoucherFooterQty=QtyAmount.getText();
			actPvVoucherFooterGross=GrossAmount.getText();
			actPvVoucherFooterAvgRateO=PVNFooterAvgRateO.getText();
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 335, 8, actPvVoucherFooterNet);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 336, 8, actPvVoucherFooterQty);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 337, 8, actPvVoucherFooterGross);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 338, 8, actPvVoucherFooterAvgRateO);
			
			
			actinfoPanelStatus=infoPanelStatus.getText();
			actinfoPanelCreatedBY=infoPanelCreatedBY.getText();
			actinfoPanelEditedBy=infoPanelEditedBy.getText();
			actinfoPanelNextToAuth=infoPanelNextToAuth.getText();
			actinfoPanelBillStatus=infoPanelBillStatus.getText();
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 339, 8, actinfoPanelStatus);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 340, 8, actinfoPanelCreatedBY);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 341, 8, actinfoPanelEditedBy);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 342, 8, actinfoPanelNextToAuth);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 343, 8, actinfoPanelBillStatus);
			
		
			 
			System.out.println("************************************* checkVoucherInformationAfterAuthorizationInAuthorizeUser  *********************************");
			
			System.out.println("PvdocNumber                 :  " + actdocNumber 			 +" Value Expected : " + expdocNumber);
			System.out.println("PvVoucherDate               :  " + actVoucherDate 			 +" Value Expected : " + expVoucherDate);
			
			System.out.println("PvVoucherpurchaseAccountTxt :  " + actpurchaseAccountTxt 	 +" Value Expected : " + exppurchaseAccountTxt);
			System.out.println("PvVouchervendorAccountTxt   :  " + actvendorAccountTxt 		 +" Value Expected : " + expvendorAccountTxt);
			System.out.println("PvVoucherHeaderCurrency     :  " + actvoucherHeaderCurrency  +" Value Expected : " + expvoucherHeaderCurrency);
			System.out.println("PvVoucherdepartmentTxt      :  " + actdepartmentTxt 		 +" Value Expected : " + expdepartmentTxt);
			System.out.println("PvVoucherWarehouse          :  " + actwareHouseTxt 			 +" Value Expected : " + expwareHouseTxt);
			
			System.out.println("PvVoucherFooterNet          :  " + actPvVoucherFooterNet 	 +" Value Expected : " + expPvVoucherFooterNet);
			System.out.println("PvVoucherFooterQty          :  " + actPvVoucherFooterQty  	 +" Value Expected : " + expPvVoucherFooterQty);
			System.out.println("PvVoucherFooterGross        :  " + actPvVoucherFooterGross	 +" Value Expected : " + expPvVoucherFooterGross);
			//System.out.println("PvVoucherFooterAvgRateO     :  " + actPvVoucherFooterAvgRateO+" Value Expected : " + expPvVoucherFooterAvgRateO);
			
			System.out.println("First Row Item Name         :  " + actPvVoucherItemR1  		 +" Value Expected : " + expPvVoucherItemR1);
			System.out.println("First Row Units Name        :  " + actPvVoucherUnitsR1 		 +" Value Expected : " + expPvVoucherUnitsR1);
			System.out.println("First Row Qty Name          :  " + actPvVoucherQtyR1		 +" Value Expected : " + expPvVoucherQtyR1);
			System.out.println("First Row Rate Name         :  " + actPvVoucherRateR1 		 +" Value Expected : " + expPvVoucherRateR1);
			System.out.println("First Row Gross Name        :  " + actPvVoucherGrossR1 	     +" Value Expected : " + expPvVoucherGrossR1);
			//System.out.println("First Row Batch Name        :  " + actPvVoucherBatchR1 		 +" Value Expected : " + expPvVoucherBatchR1);
			
			/*System.out.println("Second Row Item Name        :  " + actPvVoucherItemR2  		 +" Value Expected : " + expPvVoucherItemR2);
			System.out.println("Second Row Units Name       :  " + actPvVoucherUnitsR2 		 +" Value Expected : " + expPvVoucherUnitsR2);
			System.out.println("Second Row Qty Name         :  " + actPvVoucherQtyR2 		 +" Value Expected : " + expPvVoucherQtyR2);
			System.out.println("Second Row Rate Name        :  " + actPvVoucherRateR2  		 +" Value Expected : " + expPvVoucherRateR2);
			System.out.println("Second Row Gross Name       :  " + actPvVoucherGrossR2 		 +" Value Expected : " + expPvVoucherGrossR2);
			System.out.println("Second Row Bin Name         :  " + actPvVoucherBinR2 		 +" Value Expected : " + expPvVoucherBinR2);
			
			System.out.println("Third Row Item Name         :  " + actPvVoucherItemR3  		 +" Value Expected : " + expPvVoucherItemR3);
			System.out.println("Third Row Units Name        :  " + actPvVoucherUnitsR3 		 +" Value Expected : " + expPvVoucherUnitsR3);
			System.out.println("Third Row Qty Name          :  " + actPvVoucherQtyR3 		 +" Value Expected : " + expPvVoucherQtyR3);
			System.out.println("Third Row Rate Name         :  " + actPvVoucherRateR3  		 +" Value Expected : " + expPvVoucherRateR3);
			System.out.println("Third Row Gross Name        :  " + actPvVoucherGrossR3 		 +" Value Expected : " + expPvVoucherGrossR3);
			System.out.println("Third Row RMA Name          :  " + actPvVoucherRMAR3		 +" Value Expected : " + expPvVoucherRMAR3);
			
			System.out.println("Fourth Row Item Name        :  " + actPvVoucherItemR4  		 +" Value Expected : " + expPvVoucherItemR4);
			System.out.println("Fourth Row Units Name       :  " + actPvVoucherUnitsR4 		 +" Value Expected : " + expPvVoucherUnitsR4);
			System.out.println("Fourth Row Qty Name         :  " + actPvVoucherQtyR4 		 +" Value Expected : " + expPvVoucherQtyR4);
			System.out.println("Fourth Row Rate Name        :  " + actPvVoucherRateR4  		 +" Value Expected : " + expPvVoucherRateR4);
			System.out.println("Fourth Row Gross Name       :  " + actPvVoucherGrossR4 		 +" Value Expected : " + expPvVoucherGrossR4);
			System.out.println("Fourth Row Batch Name       :  " + actPvVoucherBatchR4 		 +" Value Expected : " + expPvVoucherBatchR4);*/
			
			System.out.println("infoPanelStatus             :  " + actinfoPanelStatus 		 +" Value Expected : " + expinfoPanelStatus);
			System.out.println("infoPanelCreatedBY          :  " + actinfoPanelCreatedBY 	 +" Value Expected : " + expinfoPanelCreatedBY);
			System.out.println("infoPanelEditedBy           :  " + actinfoPanelEditedBy 	 +" Value Expected : " + expinfoPanelEditedBy);
			System.out.println("infoPanelNextToAuth         :  " + actinfoPanelNextToAuth 	 +" Value Expected : " + expinfoPanelNextToAuth);
			System.out.println("infoPanelBillStatus         :  " + actinfoPanelBillStatus	 +" Value Expected : " + expinfoPanelBillStatus);
			
			
			if(actdocNumber.equalsIgnoreCase(expdocNumber) && actVoucherDate.equalsIgnoreCase(expVoucherDate) 
					&& actwareHouseTxt.equalsIgnoreCase(expwareHouseTxt) && actpurchaseAccountTxt.equalsIgnoreCase(exppurchaseAccountTxt)
					&& actvendorAccountTxt.equalsIgnoreCase(expvendorAccountTxt) && actvoucherHeaderCurrency.equalsIgnoreCase(expvoucherHeaderCurrency)
					
					&& actPvVoucherFooterQty.equalsIgnoreCase(expPvVoucherFooterQty) && actPvVoucherFooterGross.equalsIgnoreCase(expPvVoucherFooterGross) 
					&& actPvVoucherFooterNet.equalsIgnoreCase(expPvVoucherFooterNet) /*&& actPvVoucherFooterAvgRateO.equalsIgnoreCase(expPvVoucherFooterAvgRateO)*/
					
					&& actPvVoucherItemR1.equalsIgnoreCase(expPvVoucherItemR1) && actPvVoucherUnitsR1.equalsIgnoreCase(expPvVoucherUnitsR1)
					&& actPvVoucherQtyR1.equalsIgnoreCase(expPvVoucherQtyR1) && actPvVoucherRateR1.equalsIgnoreCase(expPvVoucherRateR1)
					&& actPvVoucherGrossR1.equalsIgnoreCase(expPvVoucherGrossR1)  /*&& actPvVoucherBatchR1.equalsIgnoreCase(expPvVoucherBatchR1)*/
					
					/*&& actPvVoucherItemR2.equalsIgnoreCase(expPvVoucherItemR2) && actPvVoucherUnitsR2.equalsIgnoreCase(expPvVoucherUnitsR2)
					&& actPvVoucherQtyR2.equalsIgnoreCase(expPvVoucherQtyR2) && actPvVoucherRateR2.equalsIgnoreCase(expPvVoucherRateR2)
					&& actPvVoucherGrossR2.equalsIgnoreCase(expPvVoucherGrossR2)  && actPvVoucherBinR2.equalsIgnoreCase(expPvVoucherBinR2)
					
					&& actPvVoucherItemR3.equalsIgnoreCase(expPvVoucherItemR3) && actPvVoucherUnitsR3.equalsIgnoreCase(expPvVoucherUnitsR3)
					&& actPvVoucherQtyR3.equalsIgnoreCase(expPvVoucherQtyR3) && actPvVoucherRateR3.equalsIgnoreCase(expPvVoucherRateR3)
					&& actPvVoucherGrossR3.equalsIgnoreCase(expPvVoucherGrossR3)  && actPvVoucherRMAR3.equalsIgnoreCase(expPvVoucherRMAR3)
					
					&& actPvVoucherItemR4.equalsIgnoreCase(expPvVoucherItemR4) && actPvVoucherUnitsR4.equalsIgnoreCase(expPvVoucherUnitsR4)
					&& actPvVoucherQtyR4.equalsIgnoreCase(expPvVoucherQtyR4) && actPvVoucherRateR4.equalsIgnoreCase(expPvVoucherRateR4)
					&& actPvVoucherGrossR4.equalsIgnoreCase(expPvVoucherGrossR4) */
					
					&& actinfoPanelStatus.equalsIgnoreCase(expinfoPanelStatus) && actinfoPanelCreatedBY.equalsIgnoreCase(expinfoPanelCreatedBY)
					&& actinfoPanelEditedBy.equalsIgnoreCase(expinfoPanelEditedBy) && actinfoPanelNextToAuth.equalsIgnoreCase(expinfoPanelNextToAuth)
					&& actinfoPanelBillStatus.equalsIgnoreCase(expinfoPanelBillStatus))
			{
					System.out.println("Test Pass : Saved Data is As Expected");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 304, 9, resPass);
					return true;
			}
			else
			{
					System.out.println("Test Fail : Saved Data is NOT As Expected");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 304, 9, resFail);
					return false;
			}  
		}
	     catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 304, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
			}
		}
		


	//-------------------------------------------------------------------------------------------------




	     public boolean checkPendingAuthorizationsInAuthorizeUser() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));	
			new_CloseBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homePagePendingAuthorizationView));	
			homePagePendingAuthorizationView.click();
			
			Thread.sleep(3000);
			
			boolean voucherbodyGrid=voucherBodyGrid.getText().isEmpty();
			
			String actvoucherBodyGrid=Boolean.toString(voucherbodyGrid);
			String expvoucherBodyGrid=excelReader.getCellData("PurchaseVoucherN", 345, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 345, 8, actvoucherBodyGrid.toUpperCase());
			
			
			System.out.println("************************************* checkPendingAuthorizationsInAuthorizeUser  *********************************");
			
			System.out.println("Row Count in Voucher Body : "+actvoucherBodyGrid+" Value Expected : "+expvoucherBodyGrid);
			
			if(actvoucherBodyGrid.equalsIgnoreCase(expvoucherBodyGrid))
			{
				System.out.println("Test Pass : Error Message is Displayed ");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 344, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail :  Error Message is  not Displayed ");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 344, 9, resFail);
				return false;
			}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 344, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
			}
			
	   }





	//Click on Pending Purchase Orders link in the Purchase Voucher New 
	     public boolean checkPendingPurchaseOrdersInHomePageAuthorizeUser() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homePagePendingOrdersLinks));	
			homePagePendingOrdersLinks.click();
			
			Thread.sleep(3000);
			
			boolean voucherbodyGrid=voucherBodyGrid.getText().isEmpty();
			
			String actvoucherBodyGrid=Boolean.toString(voucherbodyGrid);
			String expvoucherBodyGrid=excelReader.getCellData("PurchaseVoucherN", 347, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 347, 8, actvoucherBodyGrid);
			
			System.out.println("************************************* checkPendingPurchaseOrdersInHomePageAuthorizeUser  *********************************");
			
			System.out.println("Row Count in Voucher Body : "+actvoucherBodyGrid+" Value Expected : "+expvoucherBodyGrid);
			
			if(actvoucherBodyGrid.equalsIgnoreCase(expvoucherBodyGrid))
			{
				System.out.println("Test Pass : Vouchers EMPTY ");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 344, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail :  Vouchers are Displayed  ");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 344, 9, resFail);
				return false;
			}
			}
	     catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 344, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
			}
	 }



	     public boolean checkCloseOptionInPurchaseVoucherNewHomePageAuthorizeUser() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));	
				voucherhomeCloseBtn.click();
				
				Thread.sleep(1000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
				
				boolean LabelDashboard=labelDashboard.isDisplayed();
				
				String actlabelDashboard=Boolean.toString(LabelDashboard);
				String explabelDashboard=excelReader.getCellData("PurchaseVoucherN", 349, 7);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 349, 8, actlabelDashboard);
				
				
				System.out.println("************************************* checkCloseOptionInPurchaseVoucherNewHomePageAuthorizeUser  *********************************");
				System.out.println("labelDashboard  : "+actlabelDashboard+" Value Expected : "+explabelDashboard);
				
				if(actlabelDashboard.equalsIgnoreCase(explabelDashboard))
				{
					System.out.println("Test Pass : Home Close Working");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 348, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Home Close NOT Working");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 348, 9, resPass);
					return false;
				}
				}
		      catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 348, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			   	 	return false;
				}
	  }




	//Logout and Login as Su User
	     public boolean checkSignOutInAuthorizeUser() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(userNameDisplay));
			userNameDisplay.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			logoutOption.click();
			
			boolean verifyFiledsStatus=true;
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(username));
			boolean actusername             = username.isDisplayed();
			boolean actpassword             = password.isDisplayed();
			boolean actcompanyDropDownList  = companyDropDownList.isDisplayed();
			boolean actsignIn               = signIn.isDisplayed();
			
			// Expected
			boolean expusername             = true;
			boolean exppassword             = true;
			boolean expcompanyDropDownList  = true;
			boolean expsignIn               = true;
			
			System.out.println("************************************* checkSignOutInAuthorizeUser  *********************************");
			System.out.println("username  : "+actusername+" Value Expected : "+expusername);
			System.out.println("password  : "+actpassword+" Value Expected : "+exppassword);
			System.out.println("companyDropDownList  : "+actcompanyDropDownList+" Value Expected : "+expcompanyDropDownList);
			System.out.println("signIn  : "+actsignIn+" Value Expected : "+expsignIn);
			
			
			boolean actMethod=actusername==expusername && actpassword==exppassword && actcompanyDropDownList==expcompanyDropDownList
					&& actsignIn==expsignIn;
			
			
			String actResult=Boolean.toString(actMethod);
			String expResult=excelReader.getCellData("PurchaseVoucherN", 351, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 351, 8, actResult);
			
			if(actMethod==true)
			{
			
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 350, 9, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 350, 9, resFail);
				return false;
			}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 350, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
			} 
	      }


	        public boolean checkSignInForSU() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
				{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				
				getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(username));
				username.click();
				 
				 username.sendKeys(excelReader.getCellData("PurchaseVoucherN", 353, 6));
				 getAction().moveToElement(username).sendKeys(Keys.TAB).perform();
				 
				 getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(password));
				 password.sendKeys(excelReader.getCellData("PurchaseVoucherN", 354, 6));
				 
				 getAction().moveToElement(password).sendKeys(Keys.TAB).perform();
				  
				 getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(signIn));
				 signIn.click();
				 
				 
				 //checkRefreshPopOnlogin();
				 
				 Thread.sleep(5000);
					    
				//checkPopUpWindow();
				
				Thread.sleep(6000);
				 
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
				String actUserInfo=userNameDisplay.getText();
				
				System.out.println("User Info : "+actUserInfo);
				
				System.out.println("User Info Capture Text :"+userNameDisplay.getText());
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
				
				companyLogo.click();
				
				String actCompanyTxt=companyName.getText();
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 355, 8, actCompanyTxt);
				
				String actLoginCompanyName=actCompanyTxt.substring(0, 19);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 356, 8, actLoginCompanyName);
				
				System.out.println("company name :"+ actLoginCompanyName);
				companyLogo.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
				
				String actDashboard=labelDashboard.getText();
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 357, 8, actDashboard);
				
				
				// Expected
				String expUserInfo=excelReader.getCellData("PurchaseVoucherN", 355, 7);
				String expLoginCompanyName=excelReader.getCellData("PurchaseVoucherN", 356, 7);
				String expDashboard=excelReader.getCellData("PurchaseVoucherN", 357, 7);
				
				System.out.println("************************************* checkSignInForSU  *********************************");
				
				System.out.println("userNameDisplay  : "+actUserInfo+          " Value Expected          : "+expUserInfo);
				System.out.println("LoginCompanyName : "+actLoginCompanyName+  " Value Expected          : "+expLoginCompanyName);
				System.out.println("labelDashboard   : "+actDashboard+         " Value Expected          : "+expDashboard);
				
				if(actUserInfo.equalsIgnoreCase(expUserInfo) && actLoginCompanyName.equalsIgnoreCase(expLoginCompanyName)
						&& actDashboard.equalsIgnoreCase(expDashboard))
				{	
					
					System.out.println("Test Pass : Transaction Authorization is Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 352, 9, resPass);
					return true;
						
				}
				else
				{
					System.out.println("Test Fail : Transaction Authorization is Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 352, 9, resFail);
					return false;
						
				}
				}
	        catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 352, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
			}
	}




	//-----------------------------------------------------------------------------------------------------


	     public boolean checkAuthorizationStatusInPurchaseVoucherNewSULogin() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			
			try
			{
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
			finacinalsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homePageAuthStatusAuthorizeRowOne));
			String acthomePageAuthStatusAuthorizeRowOne=homePageAuthStatusAuthorizeRowOne.getText();
			String exphomePageAuthStatusAuthorizeRowOne=excelReader.getCellData("PurchaseVoucherN", 359, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 359, 8, acthomePageAuthStatusAuthorizeRowOne);
			
			System.out.println("************************************* checkAuthorizationStatusInPurchaseVoucherNewSULogin  *********************************");
			System.out.println("homePageAuthStatusAuthorizeRowOne  : "+acthomePageAuthStatusAuthorizeRowOne+" Value Expected : "+exphomePageAuthStatusAuthorizeRowOne);
			
			if (acthomePageAuthStatusAuthorizeRowOne.equalsIgnoreCase(exphomePageAuthStatusAuthorizeRowOne))
			{
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 358, 9, resPass);
				return true;
			}
			
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 358, 9, resFail);
				return false;
			}
			}
	     catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 358, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
			}
	   }

		
		@FindBy(xpath="//div[@id='id_transactionentry_summary']//div[2]//div[2]")
		private static WebElement PVNFooterAvgRateO;

	  public boolean checkAuthorizeVoucherInPurchaseVoucherNewEditOptionFromHomePage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
			finacinalsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
			getAction().doubleClick(grid_ChkBox1).build().perform();
			
			boolean loading=checkLoadingMessage();
			
			System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			documentNumberTxt.click();
			
			String actdocNumber,expdocNumber;
			
			actdocNumber=documentNumberTxt.getAttribute("value");
			expdocNumber=excelReader.getCellData("PurchaseVoucherN", 361, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 361, 8, actdocNumber);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
			dateTxt.click();
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
			Date date=new Date();
			System.out.println(df.format(date));
			
			String actVoucherDate,expVoucherDate;
			
			actVoucherDate=dateTxt.getAttribute("value");
			expVoucherDate=df.format(date);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			
			String actpurchaseAccountTxt=purchaseAccountTxt.getAttribute("value");
			String exppurchaseAccountTxt=excelReader.getCellData("PurchaseVoucherN", 362, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 362, 8, actpurchaseAccountTxt);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			
			String actvendorAccountTxt=vendorAccountTxt.getAttribute("value");
			String expvendorAccountTxt=excelReader.getCellData("PurchaseVoucherN", 363, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 363, 8, actvendorAccountTxt);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
			voucherHeaderCurrency.click();
			
			String actvoucherHeaderCurrency=voucherHeaderCurrency.getAttribute("value");
			String expvoucherHeaderCurrency=excelReader.getCellData("PurchaseVoucherN", 364, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 364, 8, actvoucherHeaderCurrency);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			
			String actdepartmentTxt=departmentTxt.getAttribute("value");
			String expdepartmentTxt=excelReader.getCellData("PurchaseVoucherN", 365, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 365, 8, actdepartmentTxt);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			
			String actwareHouseTxt=wareHouseTxt.getAttribute("value");
			String expwareHouseTxt=excelReader.getCellData("PurchaseVoucherN", 366, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 366, 8, actwareHouseTxt);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_footerExpandBtn));
			new_footerExpandBtn.click();
						
			String actPvVoucherItemR1,actPvVoucherUnitsR1,actPvVoucherQtyR1,actPvVoucherRateR1,actPvVoucherGrossR1,actPvVoucherBatchR1;
			String actPvVoucherItemR2,actPvVoucherUnitsR2,actPvVoucherQtyR2,actPvVoucherRateR2,actPvVoucherGrossR2,actPvVoucherBinR2;
			String actPvVoucherItemR3,actPvVoucherUnitsR3,actPvVoucherQtyR3,actPvVoucherRateR3,actPvVoucherGrossR3,actPvVoucherRMAR3;
			String actPvVoucherItemR4,actPvVoucherUnitsR4,actPvVoucherQtyR4,actPvVoucherRateR4,actPvVoucherGrossR4,actPvVoucherBatchR4;
			
			String actPvVoucherFooterQty,actPvVoucherFooterGross,actPvVoucherFooterNet,actPvVoucherFooterAvgRateO;
						
			String actinfoPanelStatus,actinfoPanelCreatedBY,actinfoPanelEditedBy,actinfoPanelNextToAuth,actinfoPanelBillStatus;
			
			String expPvVoucherItemR1,expPvVoucherUnitsR1,expPvVoucherQtyR1,expPvVoucherRateR1,expPvVoucherGrossR1,expPvVoucherBatchR1;
			String expPvVoucherItemR2,expPvVoucherUnitsR2,expPvVoucherQtyR2,expPvVoucherRateR2,expPvVoucherGrossR2,expPvVoucherBinR2;
			String expPvVoucherItemR3,expPvVoucherUnitsR3,expPvVoucherQtyR3,expPvVoucherRateR3,expPvVoucherGrossR3,expPvVoucherRMAR3;
			String expPvVoucherItemR4,expPvVoucherUnitsR4,expPvVoucherQtyR4,expPvVoucherRateR4,expPvVoucherGrossR4,expPvVoucherBatchR4;
			
			String expPvVoucherFooterQty,expPvVoucherFooterGross,expPvVoucherFooterNet,expPvVoucherFooterAvgRateO;
			
			String expinfoPanelStatus,expinfoPanelCreatedBY,expinfoPanelEditedBy,expinfoPanelNextToAuth,expinfoPanelBillStatus;

			expPvVoucherItemR1=excelReader.getCellData("PurchaseVoucherN", 367, 7);
			expPvVoucherUnitsR1=excelReader.getCellData("PurchaseVoucherN", 368, 7);
			expPvVoucherQtyR1=excelReader.getCellData("PurchaseVoucherN", 369, 7);
			expPvVoucherRateR1=excelReader.getCellData("PurchaseVoucherN", 370, 7);
			expPvVoucherGrossR1=excelReader.getCellData("PurchaseVoucherN", 371, 7);
			expPvVoucherBatchR1=excelReader.getCellData("PurchaseVoucherN", 372, 7);
			
			/*expPvVoucherItemR2=excelReader.getCellData("PurchaseVoucherN", 373, 7);
			expPvVoucherUnitsR2=excelReader.getCellData("PurchaseVoucherN", 374, 7);;
			expPvVoucherQtyR2=excelReader.getCellData("PurchaseVoucherN", 375, 7);
			expPvVoucherRateR2=excelReader.getCellData("PurchaseVoucherN", 376, 7);
			expPvVoucherGrossR2=excelReader.getCellData("PurchaseVoucherN", 377, 7);			
			expPvVoucherBinR2=excelReader.getCellData("PurchaseVoucherN", 378, 7);
			
			expPvVoucherItemR3=excelReader.getCellData("PurchaseVoucherN", 379, 7);
			expPvVoucherUnitsR3=excelReader.getCellData("PurchaseVoucherN", 380, 7);
			expPvVoucherQtyR3=excelReader.getCellData("PurchaseVoucherN", 381, 7);
			expPvVoucherRateR3=excelReader.getCellData("PurchaseVoucherN", 382, 7);
			expPvVoucherGrossR3=excelReader.getCellData("PurchaseVoucherN", 383, 7);
			expPvVoucherRMAR3=excelReader.getCellData("PurchaseVoucherN", 384, 7);
			
			expPvVoucherItemR4=excelReader.getCellData("PurchaseVoucherN", 385, 7);
			expPvVoucherUnitsR4=excelReader.getCellData("PurchaseVoucherN", 386, 7);
			expPvVoucherQtyR4=excelReader.getCellData("PurchaseVoucherN", 387, 7);
			expPvVoucherRateR4=excelReader.getCellData("PurchaseVoucherN", 388, 7);
			expPvVoucherGrossR4=excelReader.getCellData("PurchaseVoucherN", 389, 7);
			expPvVoucherBatchR4=excelReader.getCellData("PurchaseVoucherN", 390, 7);*/
		
			expPvVoucherFooterNet=excelReader.getCellData("PurchaseVoucherN", 391, 7);
			expPvVoucherFooterQty=excelReader.getCellData("PurchaseVoucherN", 392, 7);
			expPvVoucherFooterGross=excelReader.getCellData("PurchaseVoucherN", 393, 7);
			//expPvVoucherFooterAvgRateO=excelReader.getCellData("PurchaseVoucherN", 394, 7); //11.66
			
			expinfoPanelStatus=excelReader.getCellData("PurchaseVoucherN", 395, 7);
			expinfoPanelCreatedBY=excelReader.getCellData("PurchaseVoucherN", 396, 7);
			expinfoPanelEditedBy=excelReader.getCellData("PurchaseVoucherN", 397, 7);
			expinfoPanelNextToAuth=excelReader.getCellData("PurchaseVoucherN", 398, 7);
			expinfoPanelBillStatus=excelReader.getCellData("PurchaseVoucherN", 399, 7);
			
			System.out.println(netAmount.getText());
			System.out.println(QtyAmount.getText());
			System.out.println(GrossAmount.getText());
			System.out.println(PVNFooterAvgRateO.getText());
						
			actPvVoucherItemR1=select1stRow_1stColumn.getText();
			actPvVoucherUnitsR1=select1stRow_2ndColumn.getText();
			actPvVoucherQtyR1=select1stRow_5thColumn.getText();
			actPvVoucherRateR1=select1stRow_7thColumn.getText();
			actPvVoucherGrossR1=select1stRow_8thColumn.getText();
			//actPvVoucherBatchR1=select1stRow_10thColumn.getText();
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 367, 8, actPvVoucherItemR1);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 368, 8, actPvVoucherUnitsR1);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 369, 8, actPvVoucherQtyR1);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 370, 8, actPvVoucherRateR1);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 371, 8, actPvVoucherGrossR1);
			//excelReader.setCellData(xlfile, "PurchaseVoucherN", 372, 8, actPvVoucherBatchR1);
			
			/*actPvVoucherItemR2=select2ndRow_1stColumn.getText();
			actPvVoucherUnitsR2=select2ndRow_2ndColumn.getText();
			actPvVoucherQtyR2=select2ndRow_5thColumn.getText();
			actPvVoucherRateR2=select2ndRow_7thColumn.getText();
			actPvVoucherGrossR2=select2ndRow_8thColumn.getText();
			actPvVoucherBinR2=select2ndRow_10thColumn.getText();
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 373, 8, actPvVoucherItemR2);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 374, 8, actPvVoucherUnitsR2);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 375, 8, actPvVoucherQtyR2);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 376, 8, actPvVoucherRateR2);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 377, 8, actPvVoucherGrossR2);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 378, 8, actPvVoucherBinR2);
			
			actPvVoucherItemR3=select3rdRow_1stColumn.getText();
			actPvVoucherUnitsR3=select3rdRow_2ndColumn.getText();
			actPvVoucherQtyR3=select3rdRow_5thColumn.getText();
			actPvVoucherRateR3=select3rdRow_7thColumn.getText();
			actPvVoucherGrossR3=select3rdRow_8thColumn.getText();
			actPvVoucherRMAR3=select3rdRow_12thColumn.getText();
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 379, 8, actPvVoucherItemR3);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 380, 8, actPvVoucherUnitsR3);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 381, 8, actPvVoucherQtyR3);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 382, 8, actPvVoucherRateR3);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 383, 8, actPvVoucherGrossR3);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 384, 8, actPvVoucherRMAR3);
			
			actPvVoucherItemR4=select4thRow_1stColumn.getText();
			actPvVoucherUnitsR4=select4thRow_2ndColumn.getText();
			actPvVoucherQtyR4=select4thRow_5thColumn.getText();
			actPvVoucherRateR4=select4thRow_7thColumn.getText();
			actPvVoucherGrossR4=select4thRow_8thColumn.getText();
			actPvVoucherBatchR4=select4thRow_9thColumn.getText();
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 385, 8, actPvVoucherItemR4);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 386, 8, actPvVoucherUnitsR4);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 387, 8, actPvVoucherQtyR4);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 388, 8, actPvVoucherRateR4);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 389, 8, actPvVoucherGrossR4);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 390, 8, actPvVoucherBatchR4);*/
			
			
			actPvVoucherFooterNet=netAmount.getText();
			actPvVoucherFooterQty=QtyAmount.getText();
			actPvVoucherFooterGross=GrossAmount.getText();
			actPvVoucherFooterAvgRateO=PVNFooterAvgRateO.getText();
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 391, 8, actPvVoucherFooterNet);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 392, 8, actPvVoucherFooterQty);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 393, 8, actPvVoucherFooterGross);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 394, 8, actPvVoucherFooterAvgRateO);
			
			
			actinfoPanelStatus=infoPanelStatus.getText();
			actinfoPanelCreatedBY=infoPanelCreatedBY.getText();
			actinfoPanelEditedBy=infoPanelEditedBy.getText();
			actinfoPanelNextToAuth=infoPanelNextToAuth.getText();
			actinfoPanelBillStatus=infoPanelBillStatus.getText();
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 395, 8, actinfoPanelStatus);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 396, 8, actinfoPanelCreatedBY);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 397, 8, actinfoPanelEditedBy);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 398, 8, actinfoPanelNextToAuth);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 399, 8, actinfoPanelBillStatus);
			
		
			 
			System.out.println("************************************* checkClickOnDocumentNumberAlertsInAuthorizeUser  *********************************");
			
			System.out.println("PvdocNumber                 :  " + actdocNumber 			 +" Value Expected : " + expdocNumber);
			System.out.println("PvVoucherDate               :  " + actVoucherDate 			 +" Value Expected : " + expVoucherDate);
			
			System.out.println("PvVoucherpurchaseAccountTxt :  " + actpurchaseAccountTxt 	 +" Value Expected : " + exppurchaseAccountTxt);
			System.out.println("PvVouchervendorAccountTxt   :  " + actvendorAccountTxt 		 +" Value Expected : " + expvendorAccountTxt);
			System.out.println("PvVoucherHeaderCurrency     :  " + actvoucherHeaderCurrency  +" Value Expected : " + expvoucherHeaderCurrency);
			System.out.println("PvVoucherdepartmentTxt      :  " + actdepartmentTxt 		 +" Value Expected : " + expdepartmentTxt);
			System.out.println("PvVoucherWarehouse          :  " + actwareHouseTxt 			 +" Value Expected : " + expwareHouseTxt);
			
			System.out.println("PvVoucherFooterNet          :  " + actPvVoucherFooterNet 	 +" Value Expected : " + expPvVoucherFooterNet);
			System.out.println("PvVoucherFooterQty          :  " + actPvVoucherFooterQty  	 +" Value Expected : " + expPvVoucherFooterQty);
			System.out.println("PvVoucherFooterGross        :  " + actPvVoucherFooterGross	 +" Value Expected : " + expPvVoucherFooterGross);
			//System.out.println("PvVoucherFooterAvgRateO     :  " + actPvVoucherFooterAvgRateO+" Value Expected : " + expPvVoucherFooterAvgRateO);
			
			System.out.println("First Row Item Name         :  " + actPvVoucherItemR1  		 +" Value Expected : " + expPvVoucherItemR1);
			System.out.println("First Row Units Name        :  " + actPvVoucherUnitsR1 		 +" Value Expected : " + expPvVoucherUnitsR1);
			System.out.println("First Row Qty Name          :  " + actPvVoucherQtyR1		 +" Value Expected : " + expPvVoucherQtyR1);
			System.out.println("First Row Rate Name         :  " + actPvVoucherRateR1 		 +" Value Expected : " + expPvVoucherRateR1);
			System.out.println("First Row Gross Name        :  " + actPvVoucherGrossR1 	     +" Value Expected : " + expPvVoucherGrossR1);
			//stem.out.println("First Row Batch Name        :  " + actPvVoucherBatchR1 		 +" Value Expected : " + expPvVoucherBatchR1);
			
			/*System.out.println("Second Row Item Name        :  " + actPvVoucherItemR2  		 +" Value Expected : " + expPvVoucherItemR2);
			System.out.println("Second Row Units Name       :  " + actPvVoucherUnitsR2 		 +" Value Expected : " + expPvVoucherUnitsR2);
			System.out.println("Second Row Qty Name         :  " + actPvVoucherQtyR2 		 +" Value Expected : " + expPvVoucherQtyR2);
			System.out.println("Second Row Rate Name        :  " + actPvVoucherRateR2  		 +" Value Expected : " + expPvVoucherRateR2);
			System.out.println("Second Row Gross Name       :  " + actPvVoucherGrossR2 		 +" Value Expected : " + expPvVoucherGrossR2);
			System.out.println("Second Row Bin Name         :  " + actPvVoucherBinR2 		 +" Value Expected : " + expPvVoucherBinR2);*/
			
			System.out.println("infoPanelStatus             :  " + actinfoPanelStatus 		 +" Value Expected : " + expinfoPanelStatus);
			System.out.println("infoPanelCreatedBY          :  " + actinfoPanelCreatedBY 	 +" Value Expected : " + expinfoPanelCreatedBY);
			System.out.println("infoPanelEditedBy           :  " + actinfoPanelEditedBy 	 +" Value Expected : " + expinfoPanelEditedBy);
			System.out.println("infoPanelNextToAuth         :  " + actinfoPanelNextToAuth 	 +" Value Expected : " + expinfoPanelNextToAuth);
			System.out.println("infoPanelBillStatus         :  " + actinfoPanelBillStatus	 +" Value Expected : " + expinfoPanelBillStatus);
							
			
			if(actdocNumber.equalsIgnoreCase(expdocNumber) && actVoucherDate.equalsIgnoreCase(expVoucherDate) 
					&& actwareHouseTxt.equalsIgnoreCase(expwareHouseTxt) && actpurchaseAccountTxt.equalsIgnoreCase(exppurchaseAccountTxt)
					&& actvendorAccountTxt.equalsIgnoreCase(expvendorAccountTxt) && actvoucherHeaderCurrency.equalsIgnoreCase(expvoucherHeaderCurrency)
					
					&& actPvVoucherFooterQty.equalsIgnoreCase(expPvVoucherFooterQty) && actPvVoucherFooterGross.equalsIgnoreCase(expPvVoucherFooterGross) 
					&& actPvVoucherFooterNet.equalsIgnoreCase(expPvVoucherFooterNet) /*&& actPvVoucherFooterAvgRateO.equalsIgnoreCase(expPvVoucherFooterAvgRateO)*/
					
					&& actPvVoucherItemR1.equalsIgnoreCase(expPvVoucherItemR1) && actPvVoucherUnitsR1.equalsIgnoreCase(expPvVoucherUnitsR1)
					&& actPvVoucherQtyR1.equalsIgnoreCase(expPvVoucherQtyR1) && actPvVoucherRateR1.equalsIgnoreCase(expPvVoucherRateR1)
					&& actPvVoucherGrossR1.equalsIgnoreCase(expPvVoucherGrossR1)  /*&& actPvVoucherBatchR1.equalsIgnoreCase(expPvVoucherBatchR1)*/
					
					/*&& actPvVoucherItemR2.equalsIgnoreCase(expPvVoucherItemR2) && actPvVoucherUnitsR2.equalsIgnoreCase(expPvVoucherUnitsR2)
					&& actPvVoucherQtyR2.equalsIgnoreCase(expPvVoucherQtyR2) && actPvVoucherRateR2.equalsIgnoreCase(expPvVoucherRateR2)
					&& actPvVoucherGrossR2.equalsIgnoreCase(expPvVoucherGrossR2)  && actPvVoucherBinR2.equalsIgnoreCase(expPvVoucherBinR2)
					
					&& actPvVoucherItemR3.equalsIgnoreCase(expPvVoucherItemR3) && actPvVoucherUnitsR3.equalsIgnoreCase(expPvVoucherUnitsR3)
					&& actPvVoucherQtyR3.equalsIgnoreCase(expPvVoucherQtyR3) && actPvVoucherRateR3.equalsIgnoreCase(expPvVoucherRateR3)
					&& actPvVoucherGrossR3.equalsIgnoreCase(expPvVoucherGrossR3)  && actPvVoucherRMAR3.equalsIgnoreCase(expPvVoucherRMAR3)
					
					&& actPvVoucherItemR4.equalsIgnoreCase(expPvVoucherItemR4) && actPvVoucherUnitsR4.equalsIgnoreCase(expPvVoucherUnitsR4)
					&& actPvVoucherQtyR4.equalsIgnoreCase(expPvVoucherQtyR4) && actPvVoucherRateR4.equalsIgnoreCase(expPvVoucherRateR4)
					&& actPvVoucherGrossR4.equalsIgnoreCase(expPvVoucherGrossR4)  && actPvVoucherBatchR4.equalsIgnoreCase(expPvVoucherBatchR4)*/
					
					&& actinfoPanelStatus.equalsIgnoreCase(expinfoPanelStatus) && actinfoPanelCreatedBY.equalsIgnoreCase(expinfoPanelCreatedBY)
					&& actinfoPanelEditedBy.equalsIgnoreCase(expinfoPanelEditedBy) && actinfoPanelNextToAuth.equalsIgnoreCase(expinfoPanelNextToAuth)
					&& actinfoPanelBillStatus.equalsIgnoreCase(expinfoPanelBillStatus))
			{
				System.out.println("Test Pass : Saved Data is As Expected");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 360, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Saved Data is NOT As Expected");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 360, 9, resFail);
				return false;
			}
		}
	  
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 360, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
			}
	   }







		// Master Authorization Page 
		
		//Masters Menu	
		@FindBy (xpath="//*[@id='1000']/span")
		public static WebElement mastersMenu;
		
		//Accounts 
		@FindBy (xpath="//a[@id='1104']//span[contains(text(),'Account')]")
		public static WebElement accounts;

		//Accounts Title
		@FindBy (xpath="//span[@id='spnHeaderText']")
		public static WebElement accountsTitle;
		
		@FindBy(xpath = "//span[@class='icon-reject2 theme_color']")
		public static WebElement newErrorMessageCloseBtn;
		
		@FindBy(xpath = "//div[@id='idGlobalError']")
		public static WebElement validationConfirmationMessage;
		
		
		 public static boolean checkErrorMessageIsDisplayingOrNotDisplaying() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException 
		   {     
			   
			 System.out.println("************************   checkErrorMessageIsDisplayingOrNotDisplaying Method Executes.............    ******************************");
			   
			 try 
			 { 
				boolean actValidationMessageIsEmptyDisplay                  = validationConfirmationMessage.getText().isEmpty();
		        boolean expValidationMessageIsEmptyDisplay                  = true;   
				
		        System.out.println("Error Message Is Displaying Or Not Displaying Value Actual : " + actValidationMessageIsEmptyDisplay + " Value Expected : " + expValidationMessageIsEmptyDisplay);
		        
				if (actValidationMessageIsEmptyDisplay == expValidationMessageIsEmptyDisplay)
				{
					//System.out.println("No Error Message Is Displaying On Opening Page,Click On Add, Edit, Delete Etc...... In Method : " + validationConfirmationMessage.getText());
					return true;
				} 
				else 
				{
					//System.err.println("Error Message Is Displaying On Opening Page, Click, Add, Edit, Delete Etc..... In Method : " + validationConfirmationMessage.getText());
					newErrorMessageCloseBtn.click();
					return false;
				}
				
			 } 
			 catch (NoSuchElementException nse)
			 {
				System.err.println("CATCH BLOCK : NO SUCH ELEMENT MESSAGE IS DISPLAY  :   "+ nse.getMessage());
				return false;
			 }
		  }

	    public boolean checkAccountsMastersPageOnClickOnAccountsMenuFromMastersMenu() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
	    	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	  	     xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			 System.out.println("********************* checkAccountsMastersPageOnClickOnAccountsMenuFromMastersMenu Method Executes.............   *****************************");
			
			 try
			 {
			   
			    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
				homeMenu.click();
			
			    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu)); 
				mastersMenu.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
				accounts.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountsTitle));
			
				boolean actSummaryErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
				boolean expSummaryErrorMessage  = true;
				String actAccountsTitle         = accountsTitle.getText();
				String expAccountsTitle         = excelReader.getCellData("PurchaseVoucherN", 401, 7);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 401, 8, actAccountsTitle);
				
				System.out.println("Opening Accounts Is Any Error Message Value Actual : " + actSummaryErrorMessage + " Value Expected : " + expSummaryErrorMessage);
			  	System.out.println("Accounts Masters Title Display Value Actual        : " + actAccountsTitle       + " Value Expected : " + expAccountsTitle);
			
				if (actAccountsTitle.equalsIgnoreCase(expAccountsTitle) && actSummaryErrorMessage==expSummaryErrorMessage) 
				{
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 400, 9, resPass);
					return true;
				} 
			    else 
			    {
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 400, 9, resFail);
					return false;
				}
			}
			 catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 400 , 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			   	 	return false;
				}
	   }


		@FindBy(xpath = "//label[@class='msgInfo']")
		public static WebElement clickOnEmptyGroup;

		@FindBy(xpath = "//span[@class='icon-font6 icon-missmatched-entries theme_icon-color']")
		public static WebElement masterShowAllUnauthorisedRecords;

	    public static boolean checkShowAllUnAuthorizeOptionInAccountsMasterPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
			{
			excelReader = new ExcelReader(POJOUtility.getExcelPath());
			
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			System.out.println("************************************************** checkBlankOnDoubleClickTheCreateAccountGroup ************************************************");
			
			try
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterShowAllUnauthorisedRecords)); 
				masterShowAllUnauthorisedRecords.click();	
			
				Thread.sleep(1000);
				
				String actAccountGroupEmptyRecords = clickOnEmptyGroup.getText();
				
			    String expAccountGroupEmptyRecords = excelReader.getCellData("PurchaseVoucherN", 403, 7);
			    
			    excelReader.setCellData(xlfile, "PurchaseVoucherN", 403, 8, actAccountGroupEmptyRecords);
			
				System.out.println("Empty Records Display Value Actual                 : " + actAccountGroupEmptyRecords + "  Value Expected : " + expAccountGroupEmptyRecords);
			
				if (actAccountGroupEmptyRecords.equalsIgnoreCase(expAccountGroupEmptyRecords)) 
				{
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 402, 9, resPass);
					return true;
				} 
				else 
				{
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 402, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 402 , 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
			}
	   }


		@FindBy(xpath = "//i[@class='icon-font6 icon-close']")
		public static WebElement masterCloseBtn;

	   public boolean checkClickOnCloseButtonInAccountMasterInSuLogin() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
			{
		   
		      excelReader=new ExcelReader(POJOUtility.getExcelPath());
		      xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		   
			System.out.println("************************************************** checkClickOnCloseButtonInAccountMaster  ********************************************");
			
			
			try
			{
			
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCloseBtn));
				masterCloseBtn.click();
					
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
			
				String actDashboardLabel = labelDashboard.getText();
				String expDashboardLabel = excelReader.getCellData("PurchaseVoucherN", 405, 7);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 405, 8, actDashboardLabel);
			
				System.out.println("Click Close button In Accounts Master Value Actual  : " + actDashboardLabel+ "      Value Expected : " + expDashboardLabel);
			
				if (actDashboardLabel.equalsIgnoreCase(expDashboardLabel)) 
				{
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 404, 9, resPass);
					System.out.println(" Test Pass: Close Button is working");
					return true;
				} 
				else
				{
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 404, 9, resFail);
					System.out.println(" Test Fail: Close Button is not working");
					return false;
				}	
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 404 , 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
			}
	    }




	//Logout and Login as Authorize Master To Login Authorize User
		public boolean checkSignOutBeforeMasterAuthorization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
		   excelReader=new ExcelReader(POJOUtility.getExcelPath());
		   xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		try
		{
		  getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(userNameDisplay));
		  userNameDisplay.click();

		  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		  logoutOption.click();
		 
			boolean verifyFiledsStatus=true;
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(username));
			
			
			boolean actusername               = username.isDisplayed();
			boolean actpassword               = password.isDisplayed();
			boolean actcompanyDropDownList    = companyDropDownList.isDisplayed();
			boolean actsignIn                 = signIn.isDisplayed();
			
			// Expected
			boolean expusername              = true;
			boolean exppassword              = true;
			boolean expcompanyDropDownList   = true;
			boolean expsignIn                = true;
			
			System.out.println("************************************* checkSignOut  *********************************");
			System.out.println("username              : "+actusername+" Value Expected : "+expusername);
			System.out.println("password              : "+actpassword+" Value Expected : "+exppassword);
			System.out.println("companyDropDownList   : "+actcompanyDropDownList+" Value Expected : "+expcompanyDropDownList);
			System.out.println("signIn                : "+actsignIn+" Value Expected : "+expsignIn);
			
			boolean actMethod=actusername==expusername && actpassword==exppassword && actcompanyDropDownList==expcompanyDropDownList
					&& actsignIn==expsignIn;
			
			String actResult=Boolean.toString(actMethod);
			String expResult= excelReader.getCellData("PurchaseVoucherN", 407, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 407, 8, actResult);
			
			
			if(actMethod==true)
			{
	           System.out.println(" Test Pass: Login Screen Display");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 406, 9, resPass);
				return true;
			}
			else
			{
				System.out.println(" Test Fail: Not Diplay Login Screen ");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 406, 9, resFail);
				return false;
			}
		    }
		
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 406, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
	   	 	return false;
		}
	  }


		public boolean checkMasterAuthoizationToLoginAuthorizeUser() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
				try
				{
			    getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(username));
			    username.click();
			     
			     username.sendKeys(excelReader.getCellData("PurchaseVoucherN", 409, 6));
			     getAction().moveToElement(username).sendKeys(Keys.TAB).perform();
				 
			     getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(password));
				 password.sendKeys(excelReader.getCellData("PurchaseVoucherN", 410, 6));
				 
				 getAction().moveToElement(password).sendKeys(Keys.TAB).perform();
				  
				 getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(signIn));
				 signIn.click();
				 
				 //checkRefreshPopOnlogin();
				 
				//checkPopUpWindow();
			
				Thread.sleep(5000);
				 
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
				String actUserInfo=userNameDisplay.getText();
				
				System.out.println("User Info : "+actUserInfo);
				
				System.out.println("User Info Capture Text :"+userNameDisplay.getText());
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
				
				companyLogo.click();
				
	            String actCompanyTxt=companyName.getText();
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 411, 8, actCompanyTxt);
				
				String actLoginCompanyName=actCompanyTxt.substring(0, 19);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 412, 8, actLoginCompanyName);
				
				System.out.println("company name :"+ actLoginCompanyName);
				companyLogo.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
				
				String actDashboard=labelDashboard.getText();
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 413, 8, actDashboard);
				
				
				// Expected
				String expUserInfo=excelReader.getCellData("PurchaseVoucherN", 411, 7);
				String expLoginCompanyName=excelReader.getCellData("PurchaseVoucherN", 412, 7);
				String expDashboard=excelReader.getCellData("PurchaseVoucherN", 413, 7);
				
				System.out.println("************************************* checkSignInForSU  *********************************");
				
				System.out.println("userNameDisplay  : "+actUserInfo+          " Value Expected          : "+expUserInfo);
				System.out.println("LoginCompanyName : "+actLoginCompanyName+  " Value Expected          : "+expLoginCompanyName);
				System.out.println("labelDashboard   : "+actDashboard+         " Value Expected          : "+expDashboard);
				
				if(actUserInfo.equalsIgnoreCase(expUserInfo) && actLoginCompanyName.equalsIgnoreCase(expLoginCompanyName)
						&& actDashboard.equalsIgnoreCase(expDashboard))
				{	
					
					System.out.println("Test Pass : Transaction Authorization is Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 408, 9, resPass);
					return true;
						
				}
				else
				{
					System.out.println("Test Fail : Transaction Authorization is Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 408, 9, resFail);
					return false;
						
				}
				}
	        catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 408, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
			}
	   }


	   public boolean checkOpenAccountsMastersPageFromAuthorizeUser() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
		   excelReader = new ExcelReader(POJOUtility.getExcelPath());
		   xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		   System.out.println("********************* checkAccountsMastersPageOnClickOnAccountsMenuFromMastersMenu Method Executes.............   *****************************");
		
		   try
		   {
			   
			    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		    	homeMenu.click();
		
		        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu)); 
		    	mastersMenu.click();
		    	
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
				accounts.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountsTitle));
		
				boolean actSummaryErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
				boolean expSummaryErrorMessage  = true;
				String actAccountsTitle         = accountsTitle.getText();
				String expAccountsTitle         = excelReader.getCellData("PurchaseVoucherN", 415, 7);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 415, 8, actAccountsTitle);
				
				System.out.println("Opening Accounts Is Any Error Message Value Actual : " + actSummaryErrorMessage + " Value Expected : " + expSummaryErrorMessage);
			  	System.out.println("Accounts Masters Title Display Value Actual        : " + actAccountsTitle       + " Value Expected : " + expAccountsTitle);
		
				if (actAccountsTitle.equalsIgnoreCase(expAccountsTitle) && actSummaryErrorMessage==expSummaryErrorMessage) 
				{
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 414, 9, resPass);
					return true;
				} 
			    else 
			    {
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 414, 9, resFail);
					return false;
				}
		    }
		   catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 414, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
			}
	   }
		
		@FindBy(xpath = "//*[@id='LandingGridBody']/tr[1]/td[11]")
		public static WebElement masterCreationNameOfLane1;

		
		
		//Check ONce Flow And Conform And Here The Purchase Voucher Ending Take Place 
	  public static boolean checkShowAllUnAuthorizeOptionInAccountsMasterPageFromAuthorizeUser() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	  {
		excelReader = new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		System.out.println("************************************************** checkBlankOnDoubleClickTheCreateAccountGroup ************************************************");

		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterShowAllUnauthorisedRecords)); 
			masterShowAllUnauthorisedRecords.click();	
		
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCreationNameOfLane1)); 			
			 
			String actFirstRowName  = masterCreationNameOfLane1.getText();
			
		    String expFirstRowName = excelReader.getCellData("PurchaseVoucherN", 417, 7);
		    
		    excelReader.setCellData(xlfile, "PurchaseVoucherN", 417, 8, actFirstRowName);
		
			System.out.println("Empty Records Display Value Actual                 : " + actFirstRowName + "  Value Expected : " + expFirstRowName);

			if (actFirstRowName.equalsIgnoreCase(expFirstRowName)) 
			{
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 416, 9, resPass);
				return true;
			} 
			else 
			{
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 416, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 416, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
	   	 	return false;
		}
	   }

	  
	 
	  
	@FindBy(xpath = "//input[@id='liSelectAllMasters']")
	public static WebElement masterGridHeader_SelectAllRowsCheckBox;

	@FindBy(xpath = "//*[@id='btnAuthorize']")
	public static WebElement masterAccountAuthorizeButton;



	public static boolean checkSelectNonAuthorizeAndClickOnAuthorizeButton() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader = new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		System.out.println("************************************************** checkBlankOnDoubleClickTheCreateAccountGroup ************************************************");

		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterGridHeader_SelectAllRowsCheckBox));
			boolean actAccountMasterGridSelectTxt = masterGridHeader_SelectAllRowsCheckBox.isDisplayed();
			masterGridHeader_SelectAllRowsCheckBox.click();

			boolean SummaryErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
			
			String actSummaryErrorMessage =Boolean.toString(SummaryErrorMessage);
			
			String expSummaryErrorMessage=excelReader.getCellData("PurchaseVoucherN", 419, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 419, 8, actSummaryErrorMessage.toUpperCase());
			
			
			System.out.println("Empty Records Display Value Actual                 : " + actSummaryErrorMessage + "  Value Expected : " + expSummaryErrorMessage);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterAccountAuthorizeButton));
			masterAccountAuthorizeButton.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterAuthName));
			
			boolean actAuthName=masterAuthName.isDisplayed();
			boolean actAuthSaveBtn=masterAuthSaveBtn.isDisplayed();
			boolean actAuthCancelBtn=masterAuthCancelBtn.isDisplayed();
		
			
			boolean expAuthName=true;
			boolean expAuthSaveBtn=true;
			boolean expAuthCancelBtn=true;
			
			System.out.println("***********************checkSelectNonAuthorizeAndClickOnAuthorizeButton*********************************************");
			
			System.out.println("Empty Records Display Value Actual                 : " + actAuthName + "  Value Expected : " + expAuthName);
			System.out.println("Empty Records Display Value Actual                 : " + actAuthSaveBtn + "  Value Expected : " + expAuthSaveBtn);
			System.out.println("Empty Records Display Value Actual                 : " + actAuthCancelBtn + "  Value Expected : " + expAuthCancelBtn);
			
			if (actSummaryErrorMessage.equalsIgnoreCase(expSummaryErrorMessage) && actAuthName==expAuthName && actAuthSaveBtn==expAuthSaveBtn 
					&& actAuthCancelBtn==expAuthCancelBtn) 
			{
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 418, 9, resPass);
				return true;
			} 
			else 
			{
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 418, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 418, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
	   	 	return false;
		}
	 }



	@FindBy(xpath = "//*[@id='txt_authMessage']")
	public static WebElement masterAuthName;

	@FindBy(xpath = "//*[@id='btnAuthorizationSave']")
	public static WebElement masterAuthSaveBtn;

	@FindBy(xpath = "//*[@id='authorizationModal']/div/div/div[3]/button[2]")
	public static WebElement masterAuthCancelBtn;	

	public static boolean checkAUthorizePageWithRemarksClickOnSaveBtn() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		System.out.println("************************************************** checkAUthorizePageWithRemarksClickOnSaveBtn ************************************************");
		
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterAuthName));
			masterAuthName.click();
			masterAuthName.sendKeys(excelReader.getCellData("PurchaseVoucherN", 421, 6));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterAuthSaveBtn));
			masterAuthSaveBtn.click();
			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(validationConfirmationMessage));
		
			boolean actValidationMessageIsEmptyDisplay                  = validationConfirmationMessage.getText().isEmpty();
	        boolean expValidationMessageIsEmptyDisplay                  = true;   
			
	        System.out.println("Error Message Is Displaying Or Not Displaying Value Actual : " + actValidationMessageIsEmptyDisplay + " Value Expected : " + expValidationMessageIsEmptyDisplay);*/
	        
	        String actAccountGroupEmptyRecords = clickOnEmptyGroup.getText();
			String expAccountGroupEmptyRecords = excelReader.getCellData("PurchaseVoucherN", 422, 7);
	        
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 422, 8, actAccountGroupEmptyRecords);
			
			System.out.println("Error Message Is Displaying Or Not Displaying Value Actual : " + actAccountGroupEmptyRecords + " Value Expected : " + expAccountGroupEmptyRecords);
	        
			if (actAccountGroupEmptyRecords.equalsIgnoreCase(expAccountGroupEmptyRecords)) 
			{
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 420, 9, resPass);
				return true;
			} 
			else 
			{
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 420, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 420, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
	   	 	return false;
		}
	 }


	 public boolean checkClickOnCloseButtonInAccountMasterInAuthorizeLogin() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
	 {
		System.out.println("************************************************** checkClickOnCloseButtonInAccountMaster  ********************************************");
		

		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		try
		{
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCloseBtn));
			masterCloseBtn.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));

			String actDashboardLabel = labelDashboard.getText();
			String expDashboardLabel = excelReader.getCellData("PurchaseVoucherN", 423, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 423, 8, actDashboardLabel);

			System.out.println("Click Close button In Accounts Master Value Actual  : " + actDashboardLabel+ "      Value Expected : " + expDashboardLabel);

			if (actDashboardLabel.equalsIgnoreCase(expDashboardLabel)) 
			{
				System.out.println(" Test Pass: Close Button is working");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 423, 9, resPass);
				return true;
			} 
			else
			{
				System.out.println(" Test Fail: Close Button is not working");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 423, 9, resFail);
				return false;
			}	
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 423, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
	   	 	return false;
		}
	}



	//Login as Su 

	public boolean checkSignOutAuthorizationOfMasterByAuthorizeUser() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			try
			
			{
				getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(userNameDisplay));
				userNameDisplay.click();
			
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
				logoutOption.click();
			 
				boolean verifyFiledsStatus=true;
				
				getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(username));
				
				
				boolean actusername=username.isDisplayed();
				boolean actpassword=password.isDisplayed();
				boolean actcompanyDropDownList=companyDropDownList.isDisplayed();
				boolean actsignIn=signIn.isDisplayed();
				
				// Expected
				boolean expusername=true;
				boolean exppassword=true;
				boolean expcompanyDropDownList=true;
				boolean expsignIn=true;
				
				System.out.println("************************************* checkSignOutInAuthorizeUser  *********************************");
				System.out.println("username              : "+actusername+" Value Expected : "+expusername);
				System.out.println("password              : "+actpassword+" Value Expected : "+exppassword);
				System.out.println("companyDropDownList   : "+actcompanyDropDownList+" Value Expected : "+expcompanyDropDownList);
				System.out.println("signIn                : "+actsignIn+" Value Expected : "+expsignIn);
				
				
				boolean actMethod=actusername==expusername && actpassword==exppassword && actcompanyDropDownList==expcompanyDropDownList
						&& actsignIn==expsignIn;
				
				
				String actResult=Boolean.toString(actMethod);
				String expResult=excelReader.getCellData("PurchaseVoucherN", 424, 7);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 424, 8, actResult.toUpperCase());
				
				if(actMethod==true)
				{
			
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 424, 9, resPass);
					return true;
				}
				else
				{
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 424, 9, resFail);
					return false;
			    }
				
				}
				catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 424, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
					return false;
				}
	     }



		public boolean checkSignInWithUserNameAsSu() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(username));
			username.click();
			
			username.sendKeys(excelReader.getCellData("PurchaseVoucherN", 426, 6));
			getAction().moveToElement(username).sendKeys(Keys.TAB).perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(password));
			password.sendKeys(excelReader.getCellData("PurchaseVoucherN", 427, 6));
			
			getAction().moveToElement(password).sendKeys(Keys.TAB).perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(signIn));
			signIn.click();
			
			//checkRefreshPopOnlogin();
			
			//checkPopUpWindow();
				
			Thread.sleep(5000);
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			String actUserInfo=userNameDisplay.getText();
		
		System.out.println("User Info : "+actUserInfo);
		
		System.out.println("User Info Capture Text :"+userNameDisplay.getText());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
		
		companyLogo.click();
		
		String actCompanyTxt=companyName.getText();
		String actLoginCompanyName=actCompanyTxt.substring(0, 19);
		System.out.println("company name :"+ actLoginCompanyName);
		companyLogo.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
		
		String actDashboard=labelDashboard.getText();

		// Expected
		String expUserInfo="SU";
		String expLoginCompanyName="Automation Company ";
		String expDashboard="Dashboard";
		
		System.out.println("************************************* checkSignInForSU  *********************************");
		System.out.println("userNameDisplay  : "+actUserInfo+          " Value Expected          : "+expUserInfo);
		System.out.println("LoginCompanyName : "+actLoginCompanyName+  " Value Expected          : "+expLoginCompanyName);
		System.out.println("labelDashboard   : "+actDashboard+         " Value Expected          : "+expDashboard);
		
		
		boolean actMethod=actUserInfo.equalsIgnoreCase(expUserInfo) && actLoginCompanyName.equalsIgnoreCase(expLoginCompanyName)
				&& actDashboard.equalsIgnoreCase(expDashboard);
		
		String actResult=Boolean.toString(actMethod);
		String expResult=excelReader.getCellData("PurchaseVoucherN", 428, 7);
		
		excelReader.setCellData(xlfile, "PurchaseVoucherN", 428, 8, actResult.toUpperCase());
		
		if(actMethod==true)	
		{	
			
			System.out.println("Test Pass : Transaction Authorization is Displayed");
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 425, 9, resPass);
			return true;
				
		}
		else
		{
			System.out.println("Test Fail : Transaction Authorization is Displayed");
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 425, 9, resFail);
			return false;
		}
	  }
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 426, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			 	return false;
		}
		}
		
		public boolean checkCopyandPasteFromClipBoardinPurchaseVoucherNew() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
			finacinalsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
			getAction().doubleClick(grid_ChkBox1).build().perform();
					
			checkUserFriendlyMessage();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
			toggleBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(copytoClipboardBtn));
			copytoClipboardBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_newBtn));
			new_newBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
			toggleBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pastefromClipboardBtn));
			pastefromClipboardBtn.click();
			
			checkUserFriendlyMessage();
			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_10thColumn));
			select1stRow_10thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.sendKeys(excelReader.getCellData("PurchaseVoucherN", 429, 6));
			enter_Batch.sendKeys(Keys.TAB);*/
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String docno = documentNumberTxt.getAttribute("value");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			boolean savingMessage=checkVoucherSavingMessage(docno);
			   
			   
			   String actSavingMessage=Boolean.toString(savingMessage);
			   String expSavingMessage=excelReader.getCellData("PurchaseVoucherN", 429, 7);
			   
			   excelReader.setCellData(xlfile, "PurchaseVoucherN", 429, 8, actSavingMessage.toUpperCase());
			   
			   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			   new_CloseBtn.click();
			   
			   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
			   
			   System.out.println("************************************* checkSavingOfPurchaseVoucherNew  *********************************");
			   
			   System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
			   System.out.println(" Saving Message Status: "+actSavingMessage+ " Value Expected : "+expSavingMessage);
			   
			   if (savingMessage==true)
			   {
				   System.out.println("Test Pass : Error Message is Displayed ");
				   excelReader.setCellData(xlfile, "PurchaseVoucherN", 429, 9, resPass);
				   
				   return true;
			   }
			   else
			   {
				   System.out.println("Test Fail :  Error Message is  not Displayed ");
				   excelReader.setCellData(xlfile, "PurchaseVoucherN", 429, 9, resFail);
				   return false;
			   }
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 429, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
			}
		}


	

    @FindBy(xpath="//label[@id='id_transactionentry_footer_panel_summary_value_26']")
	private static WebElement  QtyAmount;
	
	@FindBy(xpath="//label[@id='id_transactionentry_footer_panel_summary_value_28']")
	private static WebElement  GrossAmount;
	
	@FindBy(xpath="//span[@class='col-xs-6 icon-expand icon-font6 no_padding_left_right theme_color-inverse']")
	private static WebElement  new_footerExpandBtn;

  
    // VAT REPORTS ELEMENTS
	
	@FindBy(xpath="//a[@id='207']//span[contains(text(),'VAT')]")
	private static WebElement  vatMenu;
	
	@FindBy(xpath="//span[contains(text(),'Purchase Account Report')]")
	private static WebElement  purchaseAccountReportMenu;
	
	@FindBy(xpath="//span[contains(text(),'VAT detailed report')]")
	private static WebElement  vatDetailedReportMenu;
	
	@FindBy(xpath="//span[contains(text(),'Sales Account Report')]")
	private static WebElement  salesAccountReportMenu;
	
	@FindBy(xpath="//span[contains(text(),'Sales by Customer Report')]")
	private static WebElement  salesByCustomeReportMenu;
	
	@FindBy(xpath="//span[contains(text(),'VAT summary report')]")
	private static WebElement  vatSummaryReportMenu;
	
	@FindBy(xpath="//span[contains(text(),'VAT audit file')]")
	private static WebElement  vatAuditFileMenu;
	
	@FindBy(xpath="//span[contains(text(),'VAT return report')]")
	private static WebElement  vatReturnReportMenu;
	
	@FindBy(xpath="//span[contains(text(),'Sales advance VAT report')]")
	private static WebElement  salesAdvanceVatReportMenu;
	
	//
	
	@FindBy(xpath="//i[@class='icon-font6 icon-schedule']")
	private static WebElement  scheduleBtn;
	
	@FindBy(xpath="//i[@class='icon-font6 icon-custamize']")
	private static WebElement  vatReportCustomizeBtn;
	
	@FindBy(xpath="//i[@class='icon-font6 icon-filter']")
	private static WebElement  vatReportFilterBtn;
	
	@FindBy(xpath="//i[@class='icon-font6 icon-ok']")
	private static WebElement  vatReportOkBtn;
	
	@FindBy(xpath="//i[@class='icon-font6 icon-close']")
	private static WebElement  vatReportCloseBtn;
	
	@FindBy(xpath="//select[@id='DateOptions_']")
	private static WebElement  dateOptionDropdown;
	
	@FindBy(xpath="//input[@id='id_starting_date_']")
	private static WebElement  startDateTxt;
	
	@FindBy(xpath="//td[@id='id_starting_date__input_image']//span[@class='icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow']")
	private static WebElement  startDateDatePicker;
	
	@FindBy(xpath="//input[@id='id_ending_date_']")
	private static WebElement  endDateTxt;
	
	@FindBy(xpath="//td[@id='id_ending_date__input_image']//span[@class='icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow']")
	private static WebElement  endDateDatePicker;
	
	@FindBy(xpath="//select[@id='RITCombobox__1']")
	private static WebElement  transactionTypeDropdown;
	
	@FindBy(xpath="//input[@id='RITCheckbox__2']")
	private static WebElement  includePurchaseReturnsVoucher;
	
	@FindBy(xpath="//select[@id='RITLayout_']")
	private static WebElement  layoutDropdown;
	
	@FindBy(xpath="//select[@id='RITOutput_']")
	private static WebElement  outputDropdown;
	
	@FindBy(xpath="//select[@id='RITCombobox__2']")
	private static WebElement  voucherTypeDropdown;
	
	@FindBy(xpath="//select[@id='RITCombobox__3']")
	private static WebElement  selectDealersDropdown;
	
	
	//
	
	@FindBy(xpath="//span[@id='reportSort']")
	private static WebElement report_sortingBtn;
			
	@FindBy(xpath="//span[@id='reportRefresh']")
	private static WebElement report_RefreshBtn;
			
	@FindBy(xpath="//span[@id='print_report_']")
	private static WebElement report_PrintBtn;
			
	@FindBy(xpath="//div[contains(text(),'Export')]")
	private static WebElement report_ExportBtn;
			
	@FindBy(xpath="//span[@id='GraphIcon']")
	private static WebElement report_GraphBtn;
			
	@FindBy(xpath="//span[@id='BackTrackIcon']")
	private static WebElement report_BackTrackBtn;
			
	@FindBy(xpath="//span[@id='reportCustomize']")
	private static WebElement report_ReportCustomizeBtn;
			
	@FindBy(xpath="//span[@id='filterIcon']")
	private static WebElement report_FilterBtn;
	
	@FindBy(xpath="//span[@id='idFilterCustomizeIcon']")
	private static WebElement  report_FilterCustomizeBtn;
	
	@FindBy(xpath="//span[@id='a']")
	private static WebElement  report_Filter_FilterBtn;
	
	@FindBy(xpath="//*[@id='551_0_AdvanceFilter']/table/tbody/tr/td[1]/select")
	private static WebElement  reportsAdvanced_WhereDropDown;
	
	@FindBy(xpath="//tbody//input[@placeholder='Select Field']")
	private static WebElement  reportsAdvanced_SelectFielddropdown;
	
	@FindBy(xpath="//table/tbody/tr/td[3]/select")
	private static WebElement  reportsAdvanced_SelectOperatorDropDown;
	
	@FindBy(xpath="//table/tbody/tr/td[4]/select")
	private static WebElement  reportsAdvanced_ComparewithDropDown;
	
	@FindBy(xpath="//table/tbody/tr/td[5]/input")
	private static WebElement  reportsAdvanced_ValueTxt;
	
	@FindBy(xpath="//input[@id='advancefilter_master_551_0']")
	private static WebElement  reportsAdvanced_EnterValue;
	
	@FindBy(xpath="//table/tbody/tr/td[7]/span")
	private static WebElement  reportsAdvanced_AddIconBtn;
	
	@FindBy(xpath="//table/tbody/tr/td[6]/span")
	private static WebElement  reportsAdvanced_DeleteIcon1Btn;
	
	@FindBy(xpath="//table/tbody/tr[2]/td[6]/span")
	private static WebElement  reportsAdvanced__DeleteIcon2Btn;
	
	@FindBy(xpath="//div[@id='filterTree_551_0_AdvanceFilter']//a[@id='536870916']")
	private static WebElement  reports_AdvancedFilter_SelectField_WH_ExpandBtn;
	
	@FindBy(xpath="//div[@id='filterTree_551_0_AdvanceFilter']//a[@id='5058']")
	private static WebElement  reports_AdvancedFilter_SelectField_WH_NameBtn;
	
	@FindBy(xpath="//input[@id='chkSaveFilter']")
	private static WebElement  report_FilterSaveFilterPermanentlyChkBox;
	
	@FindBy(xpath="//span[@id='filterRefresh']")
	private static WebElement  report_Filter_RefreshBtn;
	
	@FindBy(xpath="//i[contains(@class,'icon icon-ok')]")
	private static WebElement  report_FilterOkBtn;
	
	@FindBy(xpath="//i[contains(@class,'icon icon-close')]")
	private static WebElement  report_FilterCancelBtn;
			
	@FindBy(xpath="//div[@id='dvfilter']//span[contains(@class,'icon-down-arrow icon-font8 dropdown-toggle theme_button_color')]")
	private static WebElement report_FilterDownBtn;
			
	@FindBy(xpath="//span[@id='analyzeIcon']")
	private static WebElement report_AnalyzeBtn;
			
	@FindBy(xpath="//span[@id='CrossrefrenceIcon']")
	private static WebElement report_CrossReferenceBtn;
			
	@FindBy(xpath="//span[contains(text(),'Options')]")
	private static WebElement report_OptionsBtn;
			
	@FindBy(xpath="//div[@id='dvoptions']//span[contains(@class,'icon-down-arrow icon-font8 dropdown-toggle theme_button_color')]")
	private static WebElement report_OptionsDownBtn;
			
	@FindBy(xpath="//span[@id='reportClose']")
	private static WebElement report_CloseBtn;
			
	@FindBy(xpath="//button[@id='frstPage_']")
	private static WebElement report_FirstBtn;
			
	@FindBy(xpath="//button[@id='prvPage_']")
	private static WebElement report_PreviousBtn;
			
	@FindBy(xpath="//button[@id='pgnumber_']")
	private static WebElement report_PageNoBtn;
			
	@FindBy(xpath="//button[@id='nxtPage_']")
	private static WebElement report_NextBtn;
			
	@FindBy(xpath="//button[@id='lstPage_']")
	private static WebElement report_LastBtn;
	
	@FindBy(xpath="//input[@id='txtSearchReport']")
	private static WebElement report_SearchTxt;
	
	// vat Summary
	
	@FindBy(xpath="//span[contains(@class,'icon-back icon-font7')]")
	private static WebElement backBtn;
	
	@FindBy(xpath="//span[contains(@class,'icon-refresh icon-font7')]")
	private static WebElement displayBtn;
	
	@FindBy(xpath="//div[contains(text(),'Exit')]")
	private static WebElement exitBtn;
	
	
	
	@FindBy(xpath="//input[@id='txt_FromDate']")
	private static WebElement fromDateTxt;
	
	@FindBy(xpath="//td[@id='txt_FromDate_input_image']//span[contains(@class,'icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow')]")
	private static WebElement fromDatedatePicker;
	
	@FindBy(xpath="//input[@id='txt_Todate']")
	private static WebElement toDateTxt;
	
	@FindBy(xpath="//td[@id='txt_Todate_input_image']//span[contains(@class,'icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow')]")
	private static WebElement toDatedatePicker;
	
	@FindBy(xpath="//*[@id='tblSalesRegion']/thead/tr/th")
	private static List<WebElement> salesRegionGridHeaderList;
	
	@FindBy(xpath="//*[@id='tblSalesRegion']/tbody/tr/td")
	private static List<WebElement> salesRegionGridBodyList;
	
	@FindBy(xpath="//*[@id='tblPurchasesRegion']/thead/tr/th")
	private static List<WebElement> purchaseRegionGridHeaderList;
	
	@FindBy(xpath="//*[@id='tblPurchasesRegion']/tbody/tr/td")
	private static List<WebElement> purchaseRegionGridBodyList;
	
	
	@FindBy(xpath="//input[@id='txt_totalPurchase']")
	private static WebElement totalPurchaseTxt;
	
	@FindBy(xpath="//input[@id='txt_totalVATPurchase']")
	private static WebElement totalVatOnPurchaseTxt;

	@FindBy(xpath="//input[@id='txt_totalSales']")
	private static WebElement totalSalesTxt;
	
	@FindBy(xpath="//input[@id='txt_totalVATSales']")
	private static WebElement totalVatOnSalesTxt;

	@FindBy(xpath="//input[@id='txt_totalVATdue']")
	private static WebElement totalVatDueTxt;
	
	@FindBy(xpath="//input[@id='txt_Correction']")
	private static WebElement correctionsFromPreviousQuarterTxt;

	@FindBy(xpath="//input[@id='txt_VATCredit']")
	private static WebElement vatCrediPreviousQuarterTxt;
	
	@FindBy(xpath="//input[@id='txt_NetVATdue']")
	private static WebElement netVatDueTxt;
	
	
	// vat Audit
	
	@FindBy(xpath="//*[@id='VATAuditFileBody']/div/label")
	private static List<WebElement> vatAuditFileMainHeadingList;
	
	@FindBy(xpath="//*[@id='VATAuditFileBody']/div/div/label")
	private static List<WebElement> vatAuditFileSubHeadingList;
	
	@FindBy(xpath="//*[@id='tblCompanyInfo']/thead/tr/th")
	private static List<WebElement> companyInfoGridHeaderList;
	
	@FindBy(xpath="//*[@id='tblCompanyInfo']/tbody/tr/td")
	private static List<WebElement> companyInfoGridBodyList;
	
	@FindBy(xpath="//*[@id='tblPurListing']/thead/tr/th")
	private static List<WebElement> purchaseListGridHeaderList;
	
	@FindBy(xpath="//*[@id='tblPurListing']/tbody/tr/td")
	private static List<WebElement> purchaseListGridBodyList;
	
	@FindBy(xpath="//*[@id='tblSupplySalListing']/thead/tr/th")
	private static List<WebElement> saleListGridHeaderList;
	
	@FindBy(xpath="//*[@id='tblSupplySalListing']/tbody/tr/td")
	private static List<WebElement> saleListGridBodyList;
	
	@FindBy(xpath="//*[@id='tblGeneralLedger']/thead/tr/th")
	private static List<WebElement> generalLedgerGridHeaderList;
	
	@FindBy(xpath="//*[@id='tblGeneralLedger']/tbody/tr/td")
	private static List<WebElement> generalLedgerGridBodyList;
	
	@FindBy(xpath="//*[@id='VATAuditFileBody']/div/div/div/label")
	private static List<WebElement> vatAuditFileGridsFooterList;
	
	
	// vat Return
	
	@FindBy(xpath="//*[@id='VATMonthlyReturnRepKSABody']/div/fieldset/legend")
	private static List<WebElement> vatReturnMainHeadingList;
	
	@FindBy(xpath="//*[@id='tblVATOnSalKSA']/thead/tr/th")
	private static List<WebElement> vatOnSalesGridHeaderList;
	
	@FindBy(xpath="//*[@id='tblVATOnSalKSA']/tbody/tr/td")
	private static List<WebElement> vatOnSalesGridBodyList;
	
	@FindBy(xpath="//*[@id='tblVATOnPurKSA']/thead/tr/th")
	private static List<WebElement> vatOnPurchasesGridHeaderList;
	
	@FindBy(xpath="//*[@id='tblVATOnPurKSA']/tbody/tr/td")
	private static List<WebElement> vatOnPurchasesGridBodyList;
	
	@FindBy(xpath="//*[@id='tblNetVATDueKSA']/thead/tr/th")
	private static List<WebElement> netVatDueGridHeaderList;
	
	@FindBy(xpath="//*[@id='tblNetVATDueKSA']/tbody/tr/td")
	private static List<WebElement> netVatDueGridBodyList;
	
	
	
	@FindBy(xpath="//*[@id='trRender_1']/td[1]")
	private static WebElement sl_1stRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_1']/td[2]")
	private static WebElement sl_1stRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[3]")
	private static WebElement sl_1stRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[4]")
	private static WebElement sl_1stRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[5]")
	private static WebElement sl_1stRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[6]")
	private static WebElement sl_1stRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[7]")
	private static WebElement sl_1stRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[8]")
	private static WebElement sl_1stRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[9]")
	private static WebElement sl_1stRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[10]")
	private static WebElement sl_1stRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[11]")
	private static WebElement sl_1stRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[12]")
	private static WebElement sl_1stRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[13]")
	private static WebElement sl_1stRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[14]")
	private static WebElement sl_1stRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[15]")
	private static WebElement sl_1stRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[16]")
	private static WebElement sl_1stRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[17]")
	private static WebElement sl_1stRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[18]")
	private static WebElement sl_1stRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[19]")
	private static WebElement sl_1stRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[20]")
	private static WebElement sl_1stRow20thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[21]")
	private static WebElement sl_1stRow21thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[22]")
	private static WebElement sl_1stRow22thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[23]")
	private static WebElement sl_1stRow23thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[24]")
	private static WebElement sl_1stRow24thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[25]")
	private static WebElement sl_1stRow25thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[26]")
	private static WebElement sl_1stRow26thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[27]")
	private static WebElement sl_1stRow27thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[28]")
	private static WebElement sl_1stRow28thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[29]")
	private static WebElement sl_1stRow29thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[30]")
	private static WebElement sl_1stRow30thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[31]")
	private static WebElement sl_1stRow31thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[32]")
	private static WebElement sl_1stRow32thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[33]")
	private static WebElement sl_1stRow33thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[34]")
	private static WebElement sl_1stRow34thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[35]")
	private static WebElement sl_1stRow35thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[36]")
	private static WebElement sl_1stRow36thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[37]")
	private static WebElement sl_1stRow37thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[38]")
	private static WebElement sl_1stRow38thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[39]")
	private static WebElement sl_1stRow39thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[40]")
	private static WebElement sl_1stRow40thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[41]")
	private static WebElement sl_1stRow41thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[42]")
	private static WebElement sl_1stRow42thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[43]")
	private static WebElement sl_1stRow43thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[44]")
	private static WebElement sl_1stRow44thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[45]")
	private static WebElement sl_1stRow45thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[46]")
	private static WebElement sl_1stRow46thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[47]")
	private static WebElement sl_1stRow47thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[48]")
	private static WebElement sl_1stRow48thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[49]")
	private static WebElement sl_1stRow49thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[50]")
	private static WebElement sl_1stRow50thCol;
	
	
	@FindBy(xpath="//*[@id='trRender_2']/td[1]")
	private static WebElement sl_2ndRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_2']/td[2]")
	private static WebElement sl_2ndRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[3]")
	private static WebElement sl_2ndRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[4]")
	private static WebElement sl_2ndRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[5]")
	private static WebElement sl_2ndRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[6]")
	private static WebElement sl_2ndRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[7]")
	private static WebElement sl_2ndRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[8]")
	private static WebElement sl_2ndRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[9]")
	private static WebElement sl_2ndRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[10]")
	private static WebElement sl_2ndRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[11]")
	private static WebElement sl_2ndRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[12]")
	private static WebElement sl_2ndRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[13]")
	private static WebElement sl_2ndRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[14]")
	private static WebElement sl_2ndRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[15]")
	private static WebElement sl_2ndRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[16]")
	private static WebElement sl_2ndRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[17]")
	private static WebElement sl_2ndRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[18]")
	private static WebElement sl_2ndRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[19]")
	private static WebElement sl_2ndRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[20]")
	private static WebElement sl_2ndRow20thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[21]")
	private static WebElement sl_2ndRow21thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[22]")
	private static WebElement sl_2ndRow22thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[23]")
	private static WebElement sl_2ndRow23thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[24]")
	private static WebElement sl_2ndRow24thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[25]")
	private static WebElement sl_2ndRow25thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[26]")
	private static WebElement sl_2ndRow26thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[27]")
	private static WebElement sl_2ndRow27thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[28]")
	private static WebElement sl_2ndRow28thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[29]")
	private static WebElement sl_2ndRow29thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[30]")
	private static WebElement sl_2ndRow30thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[31]")
	private static WebElement sl_2ndRow31thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[32]")
	private static WebElement sl_2ndRow32thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[33]")
	private static WebElement sl_2ndRow33thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[34]")
	private static WebElement sl_2ndRow34thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[35]")
	private static WebElement sl_2ndRow35thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[36]")
	private static WebElement sl_2ndRow36thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[37]")
	private static WebElement sl_2ndRow37thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[38]")
	private static WebElement sl_2ndRow38thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[39]")
	private static WebElement sl_2ndRow39thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[40]")
	private static WebElement sl_2ndRow40thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[41]")
	private static WebElement sl_2ndRow41thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[42]")
	private static WebElement sl_2ndRow42thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[43]")
	private static WebElement sl_2ndRow43thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[44]")
	private static WebElement sl_2ndRow44thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[45]")
	private static WebElement sl_2ndRow45thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[46]")
	private static WebElement sl_2ndRow46thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[47]")
	private static WebElement sl_2ndRow47thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[48]")
	private static WebElement sl_2ndRow48thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[49]")
	private static WebElement sl_2ndRow49thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[50]")
	private static WebElement sl_2ndRow50thCol;
	
	
	
	
	
	@FindBy(xpath="//*[@id='trRender_3']/td[1]")
	private static WebElement sl_3rdRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_3']/td[2]")
	private static WebElement sl_3rdRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[3]")
	private static WebElement sl_3rdRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[4]")
	private static WebElement sl_3rdRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[5]")
	private static WebElement sl_3rdRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[6]")
	private static WebElement sl_3rdRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[7]")
	private static WebElement sl_3rdRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[8]")
	private static WebElement sl_3rdRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[9]")
	private static WebElement sl_3rdRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[10]")
	private static WebElement sl_3rdRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[11]")
	private static WebElement sl_3rdRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[12]")
	private static WebElement sl_3rdRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[13]")
	private static WebElement sl_3rdRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[14]")
	private static WebElement sl_3rdRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[15]")
	private static WebElement sl_3rdRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[16]")
	private static WebElement sl_3rdRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[17]")
	private static WebElement sl_3rdRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[18]")
	private static WebElement sl_3rdRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[19]")
	private static WebElement sl_3rdRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[20]")
	private static WebElement sl_3rdRow20thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[21]")
	private static WebElement sl_3rdRow21thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[22]")
	private static WebElement sl_3rdRow22thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[23]")
	private static WebElement sl_3rdRow23thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[24]")
	private static WebElement sl_3rdRow24thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[25]")
	private static WebElement sl_3rdRow25thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[26]")
	private static WebElement sl_3rdRow26thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[27]")
	private static WebElement sl_3rdRow27thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[28]")
	private static WebElement sl_3rdRow28thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[29]")
	private static WebElement sl_3rdRow29thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[30]")
	private static WebElement sl_3rdRow30thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[31]")
	private static WebElement sl_3rdRow31thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[32]")
	private static WebElement sl_3rdRow32thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[33]")
	private static WebElement sl_3rdRow33thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[34]")
	private static WebElement sl_3rdRow34thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[35]")
	private static WebElement sl_3rdRow35thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[36]")
	private static WebElement sl_3rdRow36thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[37]")
	private static WebElement sl_3rdRow37thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[38]")
	private static WebElement sl_3rdRow38thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[39]")
	private static WebElement sl_3rdRow39thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[40]")
	private static WebElement sl_3rdRow40thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[41]")
	private static WebElement sl_3rdRow41thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[42]")
	private static WebElement sl_3rdRow42thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[43]")
	private static WebElement sl_3rdRow43thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[44]")
	private static WebElement sl_3rdRow44thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[45]")
	private static WebElement sl_3rdRow45thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[46]")
	private static WebElement sl_3rdRow46thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[47]")
	private static WebElement sl_3rdRow47thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[48]")
	private static WebElement sl_3rdRow48thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[49]")
	private static WebElement sl_3rdRow49thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[50]")
	private static WebElement sl_3rdRow50thCol;
	
	
	
	
	
	
	
	
	@FindBy(xpath="//*[@id='trRender_4']/td[1]")
	private static WebElement sl_4thRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_4']/td[2]")
	private static WebElement sl_4thRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[3]")
	private static WebElement sl_4thRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[4]")
	private static WebElement sl_4thRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[5]")
	private static WebElement sl_4thRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[6]")
	private static WebElement sl_4thRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[7]")
	private static WebElement sl_4thRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[8]")
	private static WebElement sl_4thRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[9]")
	private static WebElement sl_4thRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[10]")
	private static WebElement sl_4thRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[11]")
	private static WebElement sl_4thRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[12]")
	private static WebElement sl_4thRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[13]")
	private static WebElement sl_4thRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[14]")
	private static WebElement sl_4thRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[15]")
	private static WebElement sl_4thRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[16]")
	private static WebElement sl_4thRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[17]")
	private static WebElement sl_4thRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[18]")
	private static WebElement sl_4thRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[19]")
	private static WebElement sl_4thRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[20]")
	private static WebElement sl_4thRow20thCol;
	

	@FindBy(xpath="//*[@id='trRender_4']/td[21]")
	private static WebElement sl_4thRow21thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[22]")
	private static WebElement sl_4thRow22thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[23]")
	private static WebElement sl_4thRow23thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[24]")
	private static WebElement sl_4thRow24thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[25]")
	private static WebElement sl_4thRow25thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[26]")
	private static WebElement sl_4thRow26thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[27]")
	private static WebElement sl_4thRow27thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[28]")
	private static WebElement sl_4thRow28thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[29]")
	private static WebElement sl_4thRow29thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[30]")
	private static WebElement sl_4thRow30thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[31]")
	private static WebElement sl_4thRow31thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[32]")
	private static WebElement sl_4thRow32thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[33]")
	private static WebElement sl_4thRow33thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[34]")
	private static WebElement sl_4thRow34thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[35]")
	private static WebElement sl_4thRow35thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[36]")
	private static WebElement sl_4thRow36thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[37]")
	private static WebElement sl_4thRow37thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[38]")
	private static WebElement sl_4thRow38thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[39]")
	private static WebElement sl_4thRow39thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[40]")
	private static WebElement sl_4thRow40thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[41]")
	private static WebElement sl_4thRow41thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[42]")
	private static WebElement sl_4thRow42thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[43]")
	private static WebElement sl_4thRow43thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[44]")
	private static WebElement sl_4thRow44thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[45]")
	private static WebElement sl_4thRow45thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[46]")
	private static WebElement sl_4thRow46thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[47]")
	private static WebElement sl_4thRow47thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[48]")
	private static WebElement sl_4thRow48thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[49]")
	private static WebElement sl_4thRow49thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[50]")
	private static WebElement sl_4thRow50thCol;
	
	

	
	
	
	
	
	@FindBy(xpath="//*[@id='trRender_5']/td[1]")
	private static WebElement sl_5thRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_5']/td[2]")
	private static WebElement sl_5thRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[3]")
	private static WebElement sl_5thRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[4]")
	private static WebElement sl_5thRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[5]")
	private static WebElement sl_5thRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[6]")
	private static WebElement sl_5thRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[7]")
	private static WebElement sl_5thRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[8]")
	private static WebElement sl_5thRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[9]")
	private static WebElement sl_5thRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[10]")
	private static WebElement sl_5thRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[11]")
	private static WebElement sl_5thRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[12]")
	private static WebElement sl_5thRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[13]")
	private static WebElement sl_5thRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[14]")
	private static WebElement sl_5thRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[15]")
	private static WebElement sl_5thRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[16]")
	private static WebElement sl_5thRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[17]")
	private static WebElement sl_5thRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[18]")
	private static WebElement sl_5thRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[19]")
	private static WebElement sl_5thRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[20]")
	private static WebElement sl_5thRow20thCol;
	

	@FindBy(xpath="//*[@id='trRender_5']/td[21]")
	private static WebElement sl_5thRow21thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[22]")
	private static WebElement sl_5thRow22thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[23]")
	private static WebElement sl_5thRow23thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[24]")
	private static WebElement sl_5thRow24thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[25]")
	private static WebElement sl_5thRow25thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[26]")
	private static WebElement sl_5thRow26thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[27]")
	private static WebElement sl_5thRow27thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[28]")
	private static WebElement sl_5thRow28thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[29]")
	private static WebElement sl_5thRow29thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[30]")
	private static WebElement sl_5thRow30thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[31]")
	private static WebElement sl_5thRow31thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[32]")
	private static WebElement sl_5thRow32thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[33]")
	private static WebElement sl_5thRow33thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[34]")
	private static WebElement sl_5thRow34thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[35]")
	private static WebElement sl_5thRow35thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[36]")
	private static WebElement sl_5thRow36thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[37]")
	private static WebElement sl_5thRow37thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[38]")
	private static WebElement sl_5thRow38thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[39]")
	private static WebElement sl_5thRow39thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[40]")
	private static WebElement sl_5thRow40thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[41]")
	private static WebElement sl_5thRow41thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[42]")
	private static WebElement sl_5thRow42thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[43]")
	private static WebElement sl_5thRow43thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[44]")
	private static WebElement sl_5thRow44thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[45]")
	private static WebElement sl_5thRow45thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[46]")
	private static WebElement sl_5thRow46thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[47]")
	private static WebElement sl_5thRow47thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[48]")
	private static WebElement sl_5thRow48thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[49]")
	private static WebElement sl_5thRow49thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[50]")
	private static WebElement sl_5thRow50thCol;
	
	
	
	

	
	@FindBy(xpath="//*[@id='trRender_6']/td[1]")
	private static WebElement sl_6thRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_6']/td[2]")
	private static WebElement sl_6thRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[3]")
	private static WebElement sl_6thRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[4]")
	private static WebElement sl_6thRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[5]")
	private static WebElement sl_6thRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[6]")
	private static WebElement sl_6thRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[7]")
	private static WebElement sl_6thRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[8]")
	private static WebElement sl_6thRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[9]")
	private static WebElement sl_6thRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[10]")
	private static WebElement sl_6thRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[11]")
	private static WebElement sl_6thRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[12]")
	private static WebElement sl_6thRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[13]")
	private static WebElement sl_6thRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[14]")
	private static WebElement sl_6thRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[15]")
	private static WebElement sl_6thRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[16]")
	private static WebElement sl_6thRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[17]")
	private static WebElement sl_6thRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[18]")
	private static WebElement sl_6thRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[19]")
	private static WebElement sl_6thRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[20]")
	private static WebElement sl_6thRow20thCol;
	

	@FindBy(xpath="//*[@id='trRender_6']/td[21]")
	private static WebElement sl_6thRow21thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[22]")
	private static WebElement sl_6thRow22thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[23]")
	private static WebElement sl_6thRow23thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[24]")
	private static WebElement sl_6thRow24thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[25]")
	private static WebElement sl_6thRow25thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[26]")
	private static WebElement sl_6thRow26thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[27]")
	private static WebElement sl_6thRow27thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[28]")
	private static WebElement sl_6thRow28thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[29]")
	private static WebElement sl_6thRow29thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[30]")
	private static WebElement sl_6thRow30thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[31]")
	private static WebElement sl_6thRow31thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[32]")
	private static WebElement sl_6thRow32thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[33]")
	private static WebElement sl_6thRow33thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[34]")
	private static WebElement sl_6thRow34thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[35]")
	private static WebElement sl_6thRow35thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[36]")
	private static WebElement sl_6thRow36thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[37]")
	private static WebElement sl_6thRow37thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[38]")
	private static WebElement sl_6thRow38thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[39]")
	private static WebElement sl_6thRow39thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[40]")
	private static WebElement sl_6thRow40thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[41]")
	private static WebElement sl_6thRow41thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[42]")
	private static WebElement sl_6thRow42thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[43]")
	private static WebElement sl_6thRow43thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[44]")
	private static WebElement sl_6thRow44thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[45]")
	private static WebElement sl_6thRow45thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[46]")
	private static WebElement sl_6thRow46thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[47]")
	private static WebElement sl_6thRow47thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[48]")
	private static WebElement sl_6thRow48thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[49]")
	private static WebElement sl_6thRow49thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[50]")
	private static WebElement sl_6thRow50thCol;
	
	
	
	
	
	
	
	
	@FindBy(xpath="//*[@id='trRender_7']/td[1]")
	private static WebElement sl_7thRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_7']/td[2]")
	private static WebElement sl_7thRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[3]")
	private static WebElement sl_7thRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[4]")
	private static WebElement sl_7thRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[5]")
	private static WebElement sl_7thRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[6]")
	private static WebElement sl_7thRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[7]")
	private static WebElement sl_7thRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[8]")
	private static WebElement sl_7thRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[9]")
	private static WebElement sl_7thRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[10]")
	private static WebElement sl_7thRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[11]")
	private static WebElement sl_7thRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[12]")
	private static WebElement sl_7thRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[13]")
	private static WebElement sl_7thRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[14]")
	private static WebElement sl_7thRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[15]")
	private static WebElement sl_7thRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[16]")
	private static WebElement sl_7thRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[17]")
	private static WebElement sl_7thRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[18]")
	private static WebElement sl_7thRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[19]")
	private static WebElement sl_7thRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[20]")
	private static WebElement sl_7thRow20thCol;
	
	
	@FindBy(xpath="//*[@id='trRender_8']/td[1]")
	private static WebElement sl_8thRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_8']/td[2]")
	private static WebElement sl_8thRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[3]")
	private static WebElement sl_8thRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[4]")
	private static WebElement sl_8thRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[5]")
	private static WebElement sl_8thRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[6]")
	private static WebElement sl_8thRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[7]")
	private static WebElement sl_8thRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[8]")
	private static WebElement sl_8thRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[9]")
	private static WebElement sl_8thRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[10]")
	private static WebElement sl_8thRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[11]")
	private static WebElement sl_8thRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[12]")
	private static WebElement sl_8thRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[13]")
	private static WebElement sl_8thRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[14]")
	private static WebElement sl_8thRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[15]")
	private static WebElement sl_8thRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[16]")
	private static WebElement sl_8thRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[17]")
	private static WebElement sl_8thRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[18]")
	private static WebElement sl_8thRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[19]")
	private static WebElement sl_8thRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[20]")
	private static WebElement sl_8thRow20thCol;
	
	
	
	@FindBy(xpath="//*[@id='trRender_9']/td[1]")
	private static WebElement sl_9thRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_9']/td[2]")
	private static WebElement sl_9thRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[3]")
	private static WebElement sl_9thRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[4]")
	private static WebElement sl_9thRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[5]")
	private static WebElement sl_9thRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[6]")
	private static WebElement sl_9thRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[7]")
	private static WebElement sl_9thRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[8]")
	private static WebElement sl_9thRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[9]")
	private static WebElement sl_9thRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[10]")
	private static WebElement sl_9thRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[11]")
	private static WebElement sl_9thRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[12]")
	private static WebElement sl_9thRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[13]")
	private static WebElement sl_9thRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[14]")
	private static WebElement sl_9thRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[15]")
	private static WebElement sl_9thRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[16]")
	private static WebElement sl_9thRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[17]")
	private static WebElement sl_9thRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[18]")
	private static WebElement sl_9thRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[19]")
	private static WebElement sl_9thRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[20]")
	private static WebElement sl_9thRow20thCol;
	
	
	
	@FindBy(xpath="//*[@id='trRender_10']/td[1]")
	private static WebElement sl_10thRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_10']/td[2]")
	private static WebElement sl_10thRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[3]")
	private static WebElement sl_10thRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[4]")
	private static WebElement sl_10thRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[5]")
	private static WebElement sl_10thRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[6]")
	private static WebElement sl_10thRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[7]")
	private static WebElement sl_10thRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[8]")
	private static WebElement sl_10thRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[9]")
	private static WebElement sl_10thRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[10]")
	private static WebElement sl_10thRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[11]")
	private static WebElement sl_10thRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[12]")
	private static WebElement sl_10thRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[13]")
	private static WebElement sl_10thRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[14]")
	private static WebElement sl_10thRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[15]")
	private static WebElement sl_10thRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[16]")
	private static WebElement sl_10thRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[17]")
	private static WebElement sl_10thRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[18]")
	private static WebElement sl_10thRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[19]")
	private static WebElement sl_10thRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[20]")
	private static WebElement sl_10thRow20thCol;
	
	
	@FindBy(xpath="//*[@id='trRender_11']/td[1]")
	private static WebElement sl_11thRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_11']/td[2]")
	private static WebElement sl_11thRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[3]")
	private static WebElement sl_11thRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[4]")
	private static WebElement sl_11thRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[5]")
	private static WebElement sl_11thRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[6]")
	private static WebElement sl_11thRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[7]")
	private static WebElement sl_11thRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[8]")
	private static WebElement sl_11thRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[9]")
	private static WebElement sl_11thRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[10]")
	private static WebElement sl_11thRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[11]")
	private static WebElement sl_11thRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[12]")
	private static WebElement sl_11thRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[13]")
	private static WebElement sl_11thRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[14]")
	private static WebElement sl_11thRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[15]")
	private static WebElement sl_11thRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[16]")
	private static WebElement sl_11thRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[17]")
	private static WebElement sl_11thRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[18]")
	private static WebElement sl_11thRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[19]")
	private static WebElement sl_11thRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[20]")
	private static WebElement sl_11thRow20thCol;
	
	
	@FindBy(xpath="//*[@id='trRender_12']/td[1]")
	private static WebElement sl_12thRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_12']/td[2]")
	private static WebElement sl_12thRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[3]")
	private static WebElement sl_12thRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[4]")
	private static WebElement sl_12thRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[5]")
	private static WebElement sl_12thRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[6]")
	private static WebElement sl_12thRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[7]")
	private static WebElement sl_12thRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[8]")
	private static WebElement sl_12thRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[9]")
	private static WebElement sl_12thRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[10]")
	private static WebElement sl_12thRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[11]")
	private static WebElement sl_12thRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[12]")
	private static WebElement sl_12thRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[13]")
	private static WebElement sl_12thRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[14]")
	private static WebElement sl_12thRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[15]")
	private static WebElement sl_12thRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[16]")
	private static WebElement sl_12thRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[17]")
	private static WebElement sl_12thRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[18]")
	private static WebElement sl_12thRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[19]")
	private static WebElement sl_12thRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[20]")
	private static WebElement sl_12thRow20thCol;
	
	
	
	@FindBy(xpath="//*[@id='trRender_13']/td[1]")
	private static WebElement sl_13thRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_13']/td[2]")
	private static WebElement sl_13thRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[3]")
	private static WebElement sl_13thRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[4]")
	private static WebElement sl_13thRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[5]")
	private static WebElement sl_13thRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[6]")
	private static WebElement sl_13thRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[7]")
	private static WebElement sl_13thRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[8]")
	private static WebElement sl_13thRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[9]")
	private static WebElement sl_13thRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[10]")
	private static WebElement sl_13thRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[11]")
	private static WebElement sl_13thRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[12]")
	private static WebElement sl_13thRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[13]")
	private static WebElement sl_13thRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[14]")
	private static WebElement sl_13thRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[15]")
	private static WebElement sl_13thRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[16]")
	private static WebElement sl_13thRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[17]")
	private static WebElement sl_13thRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[18]")
	private static WebElement sl_13thRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[19]")
	private static WebElement sl_13thRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[20]")
	private static WebElement sl_13thRow20thCol;
	
	
	
	@FindBy(xpath="//*[@id='trRender_14']/td[1]")
	private static WebElement sl_14thRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_14']/td[2]")
	private static WebElement sl_14thRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[3]")
	private static WebElement sl_14thRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[4]")
	private static WebElement sl_14thRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[5]")
	private static WebElement sl_14thRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[6]")
	private static WebElement sl_14thRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[7]")
	private static WebElement sl_14thRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[8]")
	private static WebElement sl_14thRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[9]")
	private static WebElement sl_14thRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[10]")
	private static WebElement sl_14thRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[11]")
	private static WebElement sl_14thRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[12]")
	private static WebElement sl_14thRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[13]")
	private static WebElement sl_14thRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[14]")
	private static WebElement sl_14thRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[15]")
	private static WebElement sl_14thRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[16]")
	private static WebElement sl_14thRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[17]")
	private static WebElement sl_14thRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[18]")
	private static WebElement sl_14thRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[19]")
	private static WebElement sl_14thRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[20]")
	private static WebElement sl_14thRow20thCol;
	
	
	
	@FindBy(xpath="//*[@id='trRender_15']/td[1]")
	private static WebElement sl_15thRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_15']/td[2]")
	private static WebElement sl_15thRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_15']/td[3]")
	private static WebElement sl_15thRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_15']/td[4]")
	private static WebElement sl_15thRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_15']/td[5]")
	private static WebElement sl_15thRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_15']/td[6]")
	private static WebElement sl_15thRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_15']/td[7]")
	private static WebElement sl_15thRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_15']/td[8]")
	private static WebElement sl_15thRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_15']/td[9]")
	private static WebElement sl_15thRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_15']/td[10]")
	private static WebElement sl_15thRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_15']/td[11]")
	private static WebElement sl_15thRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_15']/td[12]")
	private static WebElement sl_15thRow12thCol;
	
	
	

	// Purchase Voucher VAT 
	   
	 public boolean checkPurchaseVoucherVATHomePage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	 {
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			try 
			{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
			purchaseVouchersVat.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			
			boolean actHomePageNewBtn                  =newBtn.isDisplayed();
			boolean actHomePageEditBtn                 =editBtn.isDisplayed();
			boolean actHomePagePrintBtn                =printBtn.isDisplayed();
			boolean actHomePageDeleteBtn               =deleteBtn.isDisplayed();
			boolean actHomePageSuspendBtn              =suspendBtn.isDisplayed();
			boolean actHomePagePrintBarcodeBtn         =printBarCodeBtn.isDisplayed();
			boolean actHomePageExportXMLBtn            =exportToXMLBtn.isDisplayed();
			boolean actHomePageSettingsBtn             =settingsBtn.isDisplayed();
			boolean actHomePageCloseBtn                =homeCloseBtn.isDisplayed();
			boolean actHomePageGridCheckBox            =grid_HeaderChkBox.isDisplayed();
			boolean actHomePageSortingBtn              =sortingBtn.isDisplayed();
			boolean actHomePageCreateViewBn            =createViewBtn.isDisplayed();
			boolean actHomePageCustomizeBtn   		   =customizeBtn.isDisplayed();
			boolean actHomePageFilterBtn     		   =filterBtn.isDisplayed();
			boolean actHomePageRefreshBtn    		   =refreshBtn.isDisplayed();
			boolean actHomePageOptionsBtn     		   =optionsBtn.isDisplayed();
			boolean actHomePageExportBtn               =exportBtn.isDisplayed();
			
			boolean actHomePageAllVouchersView         =homePageAllVouchersView.isDisplayed();
			
			
			boolean expHomePageNewBtn                   =true;
			boolean expHomePageEditBtn                  =true;
			boolean expHomePagePrintBtn                 =true;
			boolean expHomePageDeleteBtn                =true;
			boolean expHomePageAuthorizeBtn             =true;
			boolean expHomePageSuspendBtn               =true;
			boolean expHomePagePrintBarcodeBtn          =true;
			boolean expHomePageExportXMLBtn             =true;
			boolean expHomePageSettingsBtn              =true;
			boolean expHomePageCloseBtn                 =true;
			boolean expHomePageGridCheckBox             =true;
			boolean expHomePageSortingBtn               =true;
			boolean expHomePageCreateViewBn             =true;
			boolean expHomePageCustomizeBtn             =true;
			boolean expHomePageFilterBtn                =true;
			boolean expHomePageRefreshBtn               =true;
			boolean expHomePageOptionsBtn               =true;
			boolean expHomePageExportBtn                =true;
			
			boolean expHomePageAllVouchersView          =true;
				
				
				System.out.println("************************************ checkPurchaseVoucherNewHomePage  *****************************************************");
				System.out.println("Home Page New Btn Value Actual           :"+actHomePageNewBtn                   +"    Value Expected : "+expHomePageNewBtn);
				System.out.println("Home Page Edit Btn Value Actual          :"+actHomePageEditBtn                  +"    Value Expected : "+expHomePageEditBtn);
				System.out.println("Home Page Print Btn Value Actual         :"+actHomePagePrintBtn                 +"	 Value Expected : "+expHomePagePrintBtn);
				System.out.println("Home Page Delete Btn Value Actual        :"+actHomePageDeleteBtn                +"	 Value Expected : "+expHomePageDeleteBtn);
				System.out.println("Home Page Suspend Btn Value Actual       :"+actHomePageSuspendBtn               +"	 Value Expected : "+expHomePageSuspendBtn);
				System.out.println("Home Page Print Barcode Btn Value Actual :"+actHomePagePrintBarcodeBtn          +"	 Value Expected : "+expHomePagePrintBarcodeBtn);
				System.out.println("Home Page Export XML Btn Value Actual    :"+actHomePageExportXMLBtn             +"	 Value Expected : "+expHomePageExportXMLBtn);
				System.out.println("Home Page Settings Btn Value Actual      :"+actHomePageSettingsBtn              +"	 Value Expected : "+expHomePageSettingsBtn);
				System.out.println("Home Page Close Btn Value Actual         :"+actHomePageCloseBtn                 +"	 Value Expected : "+expHomePageCloseBtn);
				System.out.println("Home Page Grid check Value Actual        :"+actHomePageGridCheckBox             +"	 Value Expected : "+expHomePageGridCheckBox);
				System.out.println("Home Page Sorting Btn Value Actual       :"+actHomePageSortingBtn               +"	 Value Expected : "+expHomePageSortingBtn);
				System.out.println("Home Page Create View Btn Value Actual   :"+actHomePageCreateViewBn             +"	 Value Expected : "+expHomePageCreateViewBn);
				System.out.println("Home Page Customize Btn Value Actual     :"+actHomePageCustomizeBtn             +"	 Value Expected : "+expHomePageCustomizeBtn);
				System.out.println("Home Page Filter check Value Actual      :"+actHomePageFilterBtn                +"	 Value Expected : "+expHomePageFilterBtn);
				System.out.println("Home Page Refesh Btn Value Actual        :"+actHomePageRefreshBtn               +"	 Value Expected : "+expHomePageRefreshBtn);
				System.out.println("Home Page Options Btn Value Actual       :"+actHomePageOptionsBtn               +"	 Value Expected : "+expHomePageOptionsBtn);
				System.out.println("Home Page Export Btn Value Actual        :"+actHomePageExportBtn                +"	 Value Expected : "+expHomePageExportBtn);
				System.out.println("Home Page All Voucher View Value Actual  :"+actHomePageAllVouchersView          +"	 Value Expected : "+expHomePageAllVouchersView);
				
				
				boolean actMethod=actHomePageNewBtn==expHomePageNewBtn  && actHomePageEditBtn==expHomePageEditBtn && actHomePagePrintBtn==expHomePagePrintBtn
						&& actHomePageDeleteBtn==expHomePageDeleteBtn  && actHomePageSuspendBtn==expHomePageSuspendBtn 
		                && actHomePagePrintBarcodeBtn==expHomePagePrintBarcodeBtn && actHomePageExportXMLBtn==expHomePageExportXMLBtn
						&& actHomePageSettingsBtn==expHomePageSettingsBtn && actHomePageCloseBtn==expHomePageCloseBtn && actHomePageGridCheckBox==expHomePageGridCheckBox
						&& actHomePageSortingBtn==expHomePageSortingBtn && actHomePageCreateViewBn==expHomePageCreateViewBn && actHomePageCustomizeBtn==expHomePageCustomizeBtn
						&& actHomePageFilterBtn==expHomePageFilterBtn && actHomePageRefreshBtn==expHomePageRefreshBtn && actHomePageOptionsBtn==expHomePageOptionsBtn
						&& actHomePageExportBtn==expHomePageExportBtn && actHomePageAllVouchersView==expHomePageAllVouchersView;
				
				
				String actResult=Boolean.toString(actMethod);
				String expResult=excelReader.getCellData(xlSheetName, 8, 7);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 8, 8, actResult.toUpperCase());
				
				if(actMethod==true)
				{
					System.out.println("Test Pass : HomeScreen Options Are Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 8, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : HomeScreen Options Are NOT Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 8, 9, resFail);
					return false;
				}
	         }
	     catch (Exception e) 
		 {
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 8, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		 	return false;
		 }
		}
		
	
	


	@FindBy(xpath="//tbody[@id='LandingGridBody']/tr/td[10]")
	private static List<WebElement> nameList;

	@FindBy(xpath="//span[contains(text(),'Place of supply')]")
	private static WebElement placeOfSupply;

	@FindBy(xpath="//a[@id='1178']//span[contains(text(),'Jurisdiction')]")
	private static WebElement jurisdiction;

	@FindBy(xpath ="//*[@id='LandingGridBody']/tr/td[10]")
	public static List<WebElement> masterTaxCodeList;

	@FindBy (xpath="//*[@id='1161']/span")
	private static WebElement taxCode;

	@FindBy(xpath = "//span[@id='btnClose']")
	private static WebElement cancelIcon;

	@FindBy(xpath="//td[@id='editScreen_bodyrow_4 _8']")
	private static WebElement  editScreenbody4thRowFormula;

	@FindBy(xpath="//td[@id='editScreen_bodyrow_4 _9']")
	private static WebElement  editScreenbody4thRowPreload;

	@FindBy(xpath="//td[@id='editScreen_bodyrow_5 _9']")
	private static WebElement  editScreenbody5thRowPreload;

	@FindBy(xpath="//td[@id='editScreen_bodyrow_4 _1']//span[@id='editIcon']")
	private static WebElement  editScreenbody4thRowEditBtn;

	@FindBy(xpath="//td[@id='editScreen_bodyrow_5 _1']//span[@id='editIcon']")
	private static WebElement  editScreenbody5thRowEditBtn;
	
	@FindBy(xpath="//td[@id='editScreen_bodyrow_3 _8']")
	private static WebElement  editScreenbody3rdRowFormula;

	@FindBy(xpath="//td[@id='editScreen_bodyrow_3 _9']")
	private static WebElement  editScreenbody3rdRowPreload;

	@FindBy(xpath="//td[@id='editScreen_bodyrow_3 _1']//span[@id='editIcon']")
	private static WebElement  editScreenbody3rdRowEditBtn;


	@FindBy(xpath="//*[@id='navigationtab2']/div/span[2]")
	private static WebElement  miscellaneousTab;

	@FindBy(xpath="//input[@id='misc_PostingUpdateFA']")
	private static WebElement  postingUpdateChkBox;

	@FindBy(xpath="//input[@id='misc_PostingSelectAccInLine']")
	private static WebElement  selectAccountInEveryLineChkBox;

	@FindBy(xpath="//input[@id='misc_chkUpdateStock']")
	private static WebElement  updateStockChkBox;

	@FindBy(xpath="//input[@id='misc_PostingPostVAT']")
	private static WebElement  postVatChkBox;

	@FindBy(xpath="//input[@id='misc_chkDetailedPosting']")
	private static WebElement detailedPostingChkbox;

		public boolean checkPurchaseVoucherVATSettingOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			try 
			{
			
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsBtn));
				settingsBtn.click();
					
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
			 	documentsTab.click();

			 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
			 	String actmasters1 = masters1.getText();
			 	
			 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters2));
			 	String actmasters2 = masters2.getText();
			 	
			 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters3));
			 	String actmasters3 = masters3.getText();
			 	
			 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters4));
			 	String actmasters4 = masters4.getText();
			 	
			 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
			 	String warehouseposition = position1.getText();
			 	
			 	if(warehouseposition.equalsIgnoreCase("Header"))
			 	{
			 		position1.click();
			 		
			 		Select s = new Select(positionDropdown);
			 		s.selectByVisibleText("Body");
			 	}
			 	
			 	showDependency1.click();
			 	
			 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position2));
			 	String actposition1 = position1.getText();
			 	
			 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position2));
			 	String actposition2 = position2.getText();
			 	
			 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position3));
			 	String actposition3 = position3.getText();
			 	
			 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position4));
			 	String actposition4 = position4.getText();
			 	
			 	String actshowDependency2 = showDependency2.getText();
			 	
			 	String expmasters1 = "Warehouse";
			 	String expmasters2 = "Department";
			 	String expmasters3 = "Place Of Supply";
			 	String expmasters4 = "Jurisdiction";
			 	
			 	String expposition1 = "Body";
			 	String expposition2 = "Header";
			 	String expposition3 = "Header";
			 	String expposition4 = "Header";
			 	
			 	String expshowDependency2 = "Jurisdiction";
			 	
			 	
			 	Thread.sleep(2000);
			 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
			 	miscellaneousTab.click();
			 	
			 	
			 	if (postingUpdateChkBox.isSelected()==false) 
			 	{
			 		postingUpdateChkBox.click();
				}
			 	
			 	if (selectAccountInEveryLineChkBox.isSelected()==false) 
			 	{
			 		selectAccountInEveryLineChkBox.click();
				}
			 	
			 	if (updateStockChkBox.isSelected()==false) 
			 	{
			 		updateStockChkBox.click();
				}
			 	
			 	if (postVatChkBox.isSelected()==false) 
			 	{
			 		postVatChkBox.click();
				}
			 	
			 	if(detailedPostingChkbox.isSelected()==true)
					
				{
					detailedPostingChkbox.click();
				}
				
			 	
			 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenTab));
			 	editScreenTab.click();
			 	
			 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenbody3rdRowFormula));
			 	String acteditScreenbody4thRowFormula = editScreenbody3rdRowFormula.getText();
			 	
			 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenbody3rdRowPreload));
			 	String acteditScreenbody4thRowPreload = editScreenbody3rdRowPreload.getText();
			 	
			 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenbody4thRowPreload));
			 	String acteditScreenbody5thRowPreload = editScreenbody4thRowPreload.getText();
			 	
			 	String expeditScreenbody4thRowFormula = "(gr) *sb4/100";
			 	String expeditScreenbody4thRowPreload = "vatrt*vatdt";
			 	String expeditScreenbody5thRowPreload = "&(gr-sbo4)";
	            
			 	System.out.println("***********************Setting Option Displayed *******************************");
			 	
			 	System.out.println("masters1  : " + actmasters1  +" Value Expected : " + expmasters1);
			 	System.out.println("masters2  : " + actmasters2  +" Value Expected : " + expmasters2);
			 	System.out.println("masters3  : " + actmasters3  +" Value Expected : " + expmasters3);
			 	System.out.println("masters4  : " + actmasters4  +" Value Expected : " + expmasters4);
			 	
			 	System.out.println("position1  : " + actposition1  +" Value Expected : " + expposition1);
			 	System.out.println("position2  : " + actposition2  +" Value Expected : " + expposition2);
			 	System.out.println("position3  : " + actposition3  +" Value Expected : " + expposition3);
			 	System.out.println("position4  : " + actposition4  +" Value Expected : " + expposition4);
			 	
			 	System.out.println("showDependency2  : " + actshowDependency2  +" Value Expected : " + expshowDependency2);
			 	
			 	System.out.println("editScreenbody4thRowFormula : "+acteditScreenbody4thRowFormula +" Value Expected : "+ expeditScreenbody4thRowFormula);
			 	System.out.println("editScreenbody4thRowPreload : "+acteditScreenbody4thRowPreload +" Value Expected : "+ expeditScreenbody4thRowPreload);
			 	System.out.println("editScreenbody5thRowPreload : "+acteditScreenbody5thRowPreload +" Value Expected : "+ expeditScreenbody5thRowPreload);
			 
				
				if (actmasters1.equalsIgnoreCase(expmasters1) && actmasters2.equalsIgnoreCase(expmasters2) && actmasters3.equalsIgnoreCase(expmasters3)
						&& actmasters4.equalsIgnoreCase(expmasters4) && actposition1.equalsIgnoreCase(expposition1) && actposition2.equalsIgnoreCase(expposition2)
						&& actposition3.equalsIgnoreCase(expposition3) && actposition4.equalsIgnoreCase(expposition4) && actshowDependency2.equalsIgnoreCase(expshowDependency2)
						&& acteditScreenbody4thRowFormula.equalsIgnoreCase(expeditScreenbody4thRowFormula) && acteditScreenbody4thRowPreload.equalsIgnoreCase(expeditScreenbody4thRowPreload)
						&& acteditScreenbody5thRowPreload.equalsIgnoreCase(expeditScreenbody5thRowPreload))
				{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
					updateBtn.click();
					
					System.out.println(" PURCHASE VOUCHER VAT  Settings Options are Excepted ");
					
					String expMessage		="Data Saved Successfully";
					
					String actMessage3		=checkValidationMessage(expMessage);
				
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 9, 9, resPass);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settings_closeBtn));
					settings_closeBtn.click();

					return true;
				}
				else
				{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenbody3rdRowEditBtn));
					editScreenbody3rdRowEditBtn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenAddBehaviourformulaTxt));
					editScreenAddBehaviourformulaTxt.click();
					editScreenAddBehaviourformulaTxt.clear();
					editScreenAddBehaviourformulaTxt.sendKeys("(gr) *sb4/100");
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenAddBehaviourFormulaokBtn));
					editScreenAddBehaviourFormulaokBtn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenPreloadTxt));
					editScreenPreloadTxt.click();
					editScreenPreloadTxt.clear();
					editScreenPreloadTxt.sendKeys("vatrt*vatdt");
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenApplyBtn));
					editScreenApplyBtn.click();
					
					String expMessage1		="Data Saved Successfully";
					
					String actMessage1		=checkValidationMessage(expMessage1);
					
					Thread.sleep(2000);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenbody4thRowEditBtn));
					editScreenbody4thRowEditBtn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenPreloadTxt));
					editScreenPreloadTxt.click();
					editScreenPreloadTxt.clear();
					editScreenPreloadTxt.sendKeys("&(gr-sbo4)");
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenApplyBtn));
					editScreenApplyBtn.click();
					
					String expMessage2		="Data Saved Successfully";
					
					String actMessage2		=checkValidationMessage(expMessage2);		
					
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
					updateBtn.click();
					
					
					String expMessage3		="Data Saved Successfully";
					
					String actMessage3		=checkValidationMessage(expMessage3);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settings_closeBtn));
					settings_closeBtn.click();

					if(actMessage1.equalsIgnoreCase(expMessage1) && actMessage2.equalsIgnoreCase(expMessage2) &&  actMessage3.equalsIgnoreCase(expMessage3))
					{
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 9, 9, resPass);
						System.out.println("Test Pass : Selecting Tags Successfully And Updating");
						return true;
					}
					else
					{
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 9, 9, resFail);
						System.out.println("Test Fail : Not Selecting Tags and Not Updating");
						return false;
					}
				}
			 }
			  catch (Exception e) 
				 {
				    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settings_closeBtn));
					settings_closeBtn.click();

				  String exception =e.getMessage();
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				  return false;
				 }
			}


		public boolean checkPurchaseVoucherVATNewEntryPage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

			try
			{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkUserFriendlyMessage();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(freeFlowBtn));
			
			boolean actEntryPageJumpToHeaderSectionBtn= jumpToHeaderSectionBtn.isDisplayed();
			boolean actEntryPageJumpToBodySectionBtn  = jumpToBodySectionBtn.isDisplayed();
			boolean actEntryPageJumpToFooterBtn       = jumpToFooterBtn.isDisplayed();
			boolean actEntryPageNewBtn                = new_newBtn.isDisplayed();
			boolean actEntryPageSaveBtn               = saveBtn.isDisplayed();
			boolean actEntryPagePreviousBtn           = previousBtn.isDisplayed();
			boolean actEntryPageNextBtn               = nextBtn.isDisplayed();
			boolean actEntryPagePrintBtn              = new_PrintBtn.isDisplayed();
			boolean actEntryPageSuspendBtn            = new_SuspendBtn.isDisplayed();
			boolean actEntryPageCloseBtn              = new_CloseBtn.isDisplayed();
			boolean actEntryPageToggleBtn             = toggleBtn.isDisplayed();

			
			boolean expEntryPageJumpToHeaderSectionBtn= true;
			boolean expEntryPageJumpToBodySectionBtn  = true;
			boolean expEntryPageJumpToFooterBtn       = true;
			boolean expEntryPageNewBtn	              = true;
			boolean expEntryPageSaveBtn               = true;
			boolean expEntryPagePreviousBtn           = true;
			boolean expEntryPageNextBtn               = true;
			boolean expEntryPagePrintBtn              = true;
			boolean expEntryPageSuspendBtn            = true;
			boolean expEntryPageCloseBtn              = true;
			boolean expEntryPageToggleBtn             = true;

			
			
			System.out.println("************************************* checkPurchaseVoucherNewEntryPage  ********************************************");
			
			System.out.println("Entry Page RC Jump to Header Value Actual:"+actEntryPageJumpToHeaderSectionBtn +"    Value Expected : "+expEntryPageJumpToHeaderSectionBtn);
			System.out.println("Entry Page RC Jump To Body Value Actual  :"+actEntryPageJumpToBodySectionBtn   +"    Value Expected : "+expEntryPageJumpToBodySectionBtn);
			System.out.println("Entry Page RC Jump To Footer Value Actual:"+actEntryPageJumpToFooterBtn        +"    Value Expected : "+expEntryPageJumpToFooterBtn);
			System.out.println("Entry Page RC New Btn Value Actual       :"+actEntryPageNewBtn                 +"    Value Expected : "+expEntryPageNewBtn);
			System.out.println("Entry Page RC Save Btn Value Actual      :"+actEntryPageSaveBtn                +"    Value Expected : "+expEntryPageSaveBtn);
			System.out.println("Entry Page RC Previous Btn Value Actual  :"+actEntryPagePreviousBtn            +"    Value Expected : "+expEntryPagePreviousBtn);
			System.out.println("Entry Page RC Next Btn Value Actual      :"+actEntryPageNextBtn                +"    Value Expected : "+expEntryPageNextBtn);
			System.out.println("Entry Page RC Print Btn Value Actual     :"+actEntryPagePrintBtn               +"    Value Expected : "+expEntryPagePrintBtn);
			System.out.println("Entry Page RC Suspend Btn Value Actual   :"+actEntryPageSuspendBtn             +"    Value Expected : "+expEntryPageSuspendBtn);
			System.out.println("Entry Page RC Close Btn Value Actual     :"+actEntryPageCloseBtn               +"    Value Expected : "+expEntryPageCloseBtn);
			System.out.println("Entry Page RC Toggle Btn Value Actual    :"+actEntryPageToggleBtn              +"    Value Expected : "+expEntryPageToggleBtn);
			
			
			boolean actMethod=actEntryPageJumpToHeaderSectionBtn==expEntryPageJumpToHeaderSectionBtn && actEntryPageJumpToBodySectionBtn==expEntryPageJumpToBodySectionBtn 
					&& actEntryPageJumpToFooterBtn==expEntryPageJumpToFooterBtn && actEntryPageJumpToFooterBtn==expEntryPageJumpToFooterBtn
					&& actEntryPageNewBtn==expEntryPageNewBtn && actEntryPageSaveBtn==expEntryPageSaveBtn && actEntryPagePreviousBtn==expEntryPagePreviousBtn
					&& actEntryPageNextBtn==expEntryPageNextBtn && actEntryPagePrintBtn==expEntryPagePrintBtn &&actEntryPageSuspendBtn==expEntryPageSuspendBtn 
					&& actEntryPageCloseBtn==expEntryPageCloseBtn && actEntryPageToggleBtn==expEntryPageToggleBtn;
			
			
			String actResult=Boolean.toString(actMethod);
			String expResult=excelReader.getCellData("PurchaseVoucherVAT", 11, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 11, 8, actResult.toUpperCase());
			
			if(actMethod==true )
		
			{
				System.out.println("Test Pass : Entry Page Header Options Are Displayed");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 10, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : entry Page NOT Displayed");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 10, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 10, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
	   	 	return false;
		}
		}


		
		
		
		
		// Header 
		
		@FindBy(xpath="//input[@id='id_header_268435470']")
		private static WebElement  placeofSupplyTxt;
		
		@FindBy(xpath="//tbody[@id='id_header_268435470_table_body']/tr/td[2]")
		private static List<WebElement>  placeofSupplyList;
		
		@FindBy(xpath="//input[@id='id_header_268435471']")
		private static WebElement  jurisdictionTxt;
		
		@FindBy(xpath="//tbody[@id='id_header_268435471_table_body']/tr/td[2]")
		private static List<WebElement>  jurisdictionList;
		
		/*@FindBy(xpath="//input[@id='id_header_67108982']")
		private static WebElement  permintNoTxt;*/
		
		@FindBy(xpath="//input[@id='id_header_67108956']")
		private static WebElement  permintNoTxt;
		
		
		
		// Body
		
		@FindBy(xpath="//input[@id='id_body_16777333']")
		private static WebElement  taxCodeTxt;
		
		@FindBy(xpath="//tbody[@id='id_body_16777333_table_body']/tr/td[2]")
		private static List<WebElement>  taxCodeList;
		
		@FindBy(xpath="//input[@id='id_body_33554503']")
		private static WebElement  enter_VatTxt;
		
		@FindBy(xpath="//input[@id='id_body_33554504']")
		private static WebElement  enter_TaxableTxt;
		
		

		

		
		public boolean checkPurchaseVoucherVATEntryPageHeaderFields() throws EncryptedDocumentException, InvalidFormatException, IOException
		{

			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			try
			{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		
			boolean actEntryPageHeaderFieldsDocNumber     =documentNumberTxt.isDisplayed();
			boolean actEntryPageHeaderFieldsDate          =dateTxt.isDisplayed();
			/*boolean actEntryPageHeaderFieldsPurchaseAc    =purchaseAccountTxt.isDisplayed();*/
			boolean actEntryPageHeaderFieldsVendorAc      =vendorAccountTxt.isDisplayed();
			boolean actEntryPageHeaderFieldRaiseReceipt   =voucherRaiseReceiptCheckBox.isDisplayed();
			boolean actEntryPageHeaderFieldsDepartment    =departmentTxt.isDisplayed();
			boolean actEntryPageHeaderFieldsDueDate       =voucherHeaderDueDate.isDisplayed();                                         
			boolean actEntryPageHeaderFieldsLocalExchRate =voucherHeaderLocalExchangeRate.isDisplayed();
			boolean actEntryPageHeaderFieldsCurrency      =voucherHeaderCurrency.isDisplayed();
			boolean actEntryPageHeaderFieldsExchRate      =voucherHeaderExchangeRate.isDisplayed();
			boolean actEntryPageHeaderFieldsWarehouse     =voucherHeaderCurrency.isDisplayed();
			boolean actEntryPageHeaderPlaceOfSupply       =placeofSupplyTxt.isDisplayed();
			boolean actEntryPageHeaderJurisdiction        =jurisdictionTxt.isDisplayed();
			boolean actEntryPageHeaderPermitNumber        =permintNoTxt.isDisplayed();
			
			boolean expEntryPageHeaderFieldsDocNumber     =true;
			boolean expEntryPageHeaderFieldsDate          =true;
			/*boolean expEntryPageHeaderFieldsPurchaseAc    =true;*/
			boolean expEntryPageHeaderFieldsVendorAc      =true;
			boolean expEntryPageHeaderFieldRaiseReceipt   =true;
			boolean expEntryPageHeaderFieldsDepartment    =true;
			boolean expEntryPageHeaderFieldsDueDate       =true;                                         
			boolean expEntryPageHeaderFieldsLocalExchRate =true;
			boolean expEntryPageHeaderFieldsCurrency      =true;
			boolean expEntryPageHeaderFieldsExchRate      =true;
			boolean expEntryPageHeaderFieldsWarehouse     =true;
	        boolean expEntryPageHeaderFieldPalceOfSupply  =true;
	        boolean expEntryPageHeaderFieldJurisdiction   =true;
	        boolean expEntryPageHeaderFieldPermitNumber   =true;
			
			System.out.println("************************************* checkPurchaseVoucherNewEntryPageHeaderFields  *******************************************************");
			System.out.println("Entry Page Header Doc No Value Actual         :"+actEntryPageHeaderFieldsDocNumber    +"  Value Expected : "+expEntryPageHeaderFieldsDocNumber);
			System.out.println("Entry Page Header Date  Value Actual          :"+actEntryPageHeaderFieldsDate         +"  Value Expected : "+expEntryPageHeaderFieldsDate);
			/*System.out.println("Entry Page Header Purchase Value Actual       :"+actEntryPageHeaderFieldsPurchaseAc   +"  Value Expected : "+expEntryPageHeaderFieldsPurchaseAc);*/	
			System.out.println("Entry Page Header Vendor Value Actual         :"+actEntryPageHeaderFieldsVendorAc     +"  Value Expected : "+expEntryPageHeaderFieldsVendorAc);
			System.out.println("Entry Page Header Raise Receipt Value Actual  :"+actEntryPageHeaderFieldRaiseReceipt  +"  Value Expected : "+expEntryPageHeaderFieldRaiseReceipt);
			System.out.println("Entry Page Header Department Value Actual     :"+actEntryPageHeaderFieldsDepartment   +"  Value Expected : "+expEntryPageHeaderFieldsDepartment);
			System.out.println("Entry Page Header Due Date Value Actual       :"+actEntryPageHeaderFieldsDueDate      +"  Value Expected : "+expEntryPageHeaderFieldsDueDate);	
			System.out.println("Entry Page Header Local Exch Rate Value Actual:"+actEntryPageHeaderFieldsLocalExchRate+"  Value Expected : "+expEntryPageHeaderFieldsLocalExchRate);
			System.out.println("Entry Page Header Currency Value Actual       :"+actEntryPageHeaderFieldsCurrency     +"  Value Expected : "+expEntryPageHeaderFieldsCurrency);
			System.out.println("Entry Page Header Exch Rate Value Actual      :"+actEntryPageHeaderFieldsExchRate     +"  Value Expected : "+expEntryPageHeaderFieldsExchRate);
			System.out.println("Entry Page Header Warehouse Value Actual      :"+actEntryPageHeaderFieldsWarehouse    +"  Value Expected : "+expEntryPageHeaderFieldsWarehouse);	
			System.out.println("Entry Page Header Place OF Supply Value Actual:"+actEntryPageHeaderPlaceOfSupply   +"  Value Expected : "+expEntryPageHeaderFieldPalceOfSupply);
			System.out.println("Entry Page Header Place OF Jurisdiction       :"+actEntryPageHeaderJurisdiction   +"  Value Expected : "+expEntryPageHeaderFieldJurisdiction);
			System.out.println("Entry Page Header Place OF Permit No          :"+actEntryPageHeaderPermitNumber   +"  Value Expected : "+expEntryPageHeaderFieldPermitNumber);
			
			boolean actMethod=actEntryPageHeaderFieldsDocNumber==expEntryPageHeaderFieldsDocNumber && actEntryPageHeaderFieldsDate==expEntryPageHeaderFieldsDate 
					/*&& actEntryPageHeaderFieldsPurchaseAc==expEntryPageHeaderFieldsPurchaseAc*/
					&& actEntryPageHeaderFieldsVendorAc==expEntryPageHeaderFieldsVendorAc && actEntryPageHeaderFieldRaiseReceipt==expEntryPageHeaderFieldRaiseReceipt
					&& actEntryPageHeaderFieldsDepartment==expEntryPageHeaderFieldsDepartment && actEntryPageHeaderFieldsDueDate==expEntryPageHeaderFieldsDueDate
					&& actEntryPageHeaderFieldsLocalExchRate==expEntryPageHeaderFieldsLocalExchRate && actEntryPageHeaderFieldsCurrency==expEntryPageHeaderFieldsCurrency
					&& actEntryPageHeaderFieldsWarehouse==expEntryPageHeaderFieldsWarehouse && actEntryPageHeaderJurisdiction==expEntryPageHeaderFieldJurisdiction
					&& actEntryPageHeaderFieldsExchRate==expEntryPageHeaderFieldsExchRate && actEntryPageHeaderPlaceOfSupply==expEntryPageHeaderFieldPalceOfSupply
					&& actEntryPageHeaderPermitNumber==expEntryPageHeaderFieldPermitNumber;
		
			String actResult= Boolean.toString(actMethod);
			String expResult=excelReader.getCellData("PurchaseVoucherVAT", 13, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 13, 8, actResult);
			
			if(actMethod==true)
			{
				System.out.println("Test Pass : entry Page Header Options Are Displayed");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 12, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : entry Page NOT Displayed");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 12, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 12, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
	   	 	return false;
		}
		
		}
//ee
		@FindBy(xpath="//div[contains(text(),'Tax Code')]")
		private static WebElement voucherBodyTaxCodeName;
		
		@FindBy(xpath="//div[contains(text(),'VAT')]")
		private static WebElement voucherBodyVatName;
		
	    @FindBy(xpath="//div[contains(text(),'Taxable')]")
		private static WebElement voucherBodyTaxableName;			
		
	    @FindBy(xpath="//div[contains(text(),'Purchase Account')]")
		private static WebElement voucherBodyPurchaseAccountName;	
	  
	   
	  
	    
	    public boolean checkPurchaseVoucherVATEntryPageBodyFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherBodyItemName));
			
			boolean actBodyItemName             = voucherBodyItemName.isDisplayed();
			boolean actBodyWarehouseName        = voucherBodyWareHouseName.isDisplayed();
			boolean actBodyTaxCodeName          = voucherBodyTaxCodeName.isDisplayed();
			boolean actBodyPurchaseAccountName  = voucherBodyPurchaseAccountName.isDisplayed();
			boolean actBodyunits		        = voucherBodyUnitsName.isDisplayed();
			
			JavascriptExecutor js = (JavascriptExecutor) getDriver();
			js.executeScript("arguments[0].scrollIntoView();", voucherBodyVatName);
			
			boolean actBodyAvgRateName  =voucherBodyAvgRateName.isDisplayed();
			boolean actBodyQtyName      =voucherBodyQtyName.isDisplayed();
			boolean actBodyRateName      =voucherBodyRateName.isDisplayed();
			boolean actBodyVATName      =voucherBodyVatName.isDisplayed();
			boolean actBodyGrossName     =voucherBodyGrossName.isDisplayed();
			
			
			js.executeScript("arguments[0].scrollIntoView();", voucherBodyRemarksName);
			
			boolean actBodyTaxableName  =voucherBodyTaxableName.isDisplayed();
			
			boolean actBodyBatchName     =voucherBodyBatchName.isDisplayed();
			boolean actBodyBinsName      =voucherBodyBinsName.isDisplayed();
			boolean actBodyRMAName       =voucherBodyRMAName.isDisplayed();
			boolean actBodyExpiryDateName=voucherBodyExpirytDateName.isDisplayed();
			boolean actvoucherBodyRemarksName =voucherBodyRemarksName.isDisplayed();
		   
			boolean actBodyR1C1         =select1stRow_1stColumn.isDisplayed();
			boolean actBodyR1C2         =select1stRow_2ndColumn.isDisplayed();
			boolean actBodyR1C3         =select1stRow_3rdColumn.isDisplayed();
			boolean actBodyR1C4         =select1stRow_4thColumn.isDisplayed();
			boolean actBodyR1C5         =select1stRow_5thColumn.isDisplayed();
			
			boolean expBodyItemName     =true;
			boolean expBodyWarehouseName=true;
			boolean expBodyTAxCodeName  =true;
			boolean expBodyPurchaseAccountName =true;
			boolean expBodyunits        =true;
			boolean expBodyAvgRateName  =true;
			boolean expBodyQtyName      =true;
			boolean expBodyVATName      =true;
			boolean expBodyTaxableName  =true;
			
			
			boolean expBodyRateName      =true;
			boolean expBodyGrossName     =true;
			boolean expBodyBatchName     =true;
			boolean expBodyBinsName      =true;
			boolean expBodyRMAName       =true;
			boolean expBodyExpiryDateName=true;
			boolean expvoucherBodyRemarksName=  true;
			
		   
			boolean expBodyR1C1         =true;
			boolean expBodyR1C2         =true;
			boolean expBodyR1C3         =true;
			boolean expBodyR1C4         =true;
			boolean expBodyR1C5         =true;
			
			System.out.println("*************************** checkPurchaseVoucherVATEntryPageBodyFields  **********************************");
			
			
			System.out.println("PV Body Item Value Actual                :  " + actBodyItemName            +"  Value Expected : " + expBodyItemName);
			System.out.println("PV Body Warehouse Value Actual           :  " + actBodyWarehouseName       +"  Value Expected : " + expBodyWarehouseName);
			System.out.println("PV Body TaxCode Value Actual             :  " + actBodyTaxCodeName         +"  Value Expected : " + expBodyTAxCodeName);
			System.out.println("PV Body Purchase Account Value Actual    :  " + actBodyPurchaseAccountName +"  Value Expected : " + expBodyPurchaseAccountName);
			System.out.println("PV Body Units Value Actual               :  " + actBodyunits               +"  Value Expected : " + expBodyunits);
			System.out.println("PV Body Avg Rate Value Actual            :  " + actBodyAvgRateName         +"  Value Expected : " + expBodyAvgRateName);
			System.out.println("PV Body Qty Value Actual                 :  " + actBodyQtyName             +"  Value Expected : " + expBodyQtyName);
			System.out.println("PV Body VAT Value Actual                 :  " + actBodyVATName             +"  Value Expected : " + expBodyVATName);
			System.out.println("PV Body Taxable Value Actual             :  " + actBodyTaxableName         +"  Value Expected : " + expBodyTaxableName);

			System.out.println("PV Body Rate Value Actual                :  " + actBodyRateName           +"  Value Expected : " + expBodyRateName);
			System.out.println("PV Body Gross Value Actual               :  " + actBodyGrossName          +"  Value Expected : " + expBodyGrossName);
			System.out.println("PV Body Batch Value Actual               :  " + actBodyBatchName          +"  Value Expected : " + expBodyBatchName);
			
			System.out.println("PV Body Expiry Value Actual              :  " + actBodyExpiryDateName     +"  Value Expected : " + expBodyExpiryDateName);
			System.out.println("PV Body Expiry Value Actual              :  " + actvoucherBodyRemarksName     +"  Value Expected : " + expvoucherBodyRemarksName);
			
			
			System.out.println("PV Body RMA Value Actual                 :  " + actBodyRMAName        +"  Value Expected : " + expBodyRMAName);
			System.out.println("PV Body Bins Value Actual                :  " + actBodyBinsName       +"  Value Expected : " + expBodyBinsName);
			System.out.println("PV Body R1C1 Value Actual                :  " + actBodyR1C1           +"  Value Expected : " + expBodyR1C1);
			System.out.println("PV Body R1C2 Value Actual                :  " + actBodyR1C2           +"  Value Expected : " + expBodyR1C2);
			System.out.println("PV Body R2C3 Value Actual                :  " + actBodyR1C3           +"  Value Expected : " + expBodyR1C3);
			System.out.println("PV Body R3C4 Value Actual                :  " + actBodyR1C4           +"  Value Expected : " + expBodyR1C4);
			System.out.println("PV Body R4C4 Value Actual                :  " + actBodyR1C5           +"  Value Expected : " + expBodyR1C5);
			
			
			boolean actMethod=actBodyItemName==expBodyItemName && actBodyWarehouseName==expBodyWarehouseName &&
					  actBodyTaxCodeName==expBodyTAxCodeName && actBodyAvgRateName==expBodyAvgRateName &&
				      actBodyQtyName==expBodyQtyName && actBodyVATName==expBodyVATName && actBodyunits==expBodyunits &&
				      actBodyTaxableName==expBodyTaxableName && actBodyPurchaseAccountName==expBodyPurchaseAccountName && 
				      actvoucherBodyRemarksName==expvoucherBodyRemarksName && 
					
						 actBodyR1C1==expBodyR1C1 && actBodyR1C2==expBodyR1C2 &&
						 actBodyR1C3==expBodyR1C3 && actBodyR1C4==expBodyR1C4 && expBodyR1C5==actBodyR1C5 &&
				
		                actBodyRateName==expBodyRateName  && actBodyGrossName==expBodyGrossName &&
						actBodyBatchName==expBodyBatchName && actBodyExpiryDateName==expBodyExpiryDateName && 
						actBodyRMAName==expBodyRMAName && actBodyBinsName==expBodyBinsName;
		   

			String actResult=Boolean.toString(actMethod);
			String expResult=excelReader.getCellData("PurchaseVoucherVAT", 15, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 15, 8, actResult);
			
			if(actMethod==true) 
				{
					System.out.println(" Test Pass: entry Page Body Options Are Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 14, 9, resPass);
					
					js.executeScript("arguments[0].scrollIntoView();", voucherBodyHeaderIndex);
					
					return true;
				}
				else
				{
					System.out.println(" Test Fail: entry Page Body Options Are Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 14, 9, resFail);
					
					js.executeScript("arguments[0].scrollIntoView();", voucherBodyHeaderIndex);
					
					return false;
				}
		 }
	    catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 14, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
	   	 	return false;
		}
		}
		
		
		
		
		
		
		public boolean checkPurchaseVoucherVATEntryPageFooterFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jumpToFooterBtn));
			jumpToFooterBtn.click();
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(netLabel));
			
			boolean actEntryPageFooterFieldsNetLabel  =netLabel.isDisplayed();
			boolean actEntryPageFooterFieldsNetAmount =netAmount.isDisplayed();

			boolean expEntryPageFooterFieldsNetLabel  =true;
			boolean expEntryPageFooterFieldsNetAmount =true;

			System.out.println("****************************&************* checkPurchaseVoucherVATEntryPageFooterFields  ***************************************************");
			System.out.println("Entry Page Footer Fields Net Label Value Actual  : "+actEntryPageFooterFieldsNetLabel+   " Value Expected : "+expEntryPageFooterFieldsNetLabel);
			System.out.println("Entry Page Footer Fields Net Amount Value Actual : "+actEntryPageFooterFieldsNetAmount+  " Value Expected : "+expEntryPageFooterFieldsNetAmount);

					
			boolean actMethod=actEntryPageFooterFieldsNetLabel==expEntryPageFooterFieldsNetLabel && actEntryPageFooterFieldsNetAmount==expEntryPageFooterFieldsNetAmount;
			
			String actResult=Boolean.toString(actMethod);
			String expresult=excelReader.getCellData("PurchaseVoucherVAT", 17, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 17, 8, actResult.toUpperCase());
			
			
			if(actMethod==true)
			{
				System.out.println("Test Pass : entry Page Footer Options Are Displayed");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 16, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : entry Page NOT Displayed");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 16, 9, resFail);
				return false;
			}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 16, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
			}
		}
		
		

		public boolean checkPurchaseVoucherVATEntryPageDocumentNumber() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jumpToHeaderSectionBtn));
			jumpToHeaderSectionBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			documentNumberTxt.click();
			
			String actDocumentNumber  =documentNumberTxt.getAttribute("value");
			String expDocumentNumber  =excelReader.getCellData("PurchaseVoucherVAT", 19, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 19, 8, actDocumentNumber);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
			enter_WarehouseTxt.click();
			
			enter_WarehouseTxt.sendKeys(Keys.SPACE);
		
			
			int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
			
			for (int i = 0; i < pvvGridWarehouseListCount; i++) 
			{
				String warehouse=pvvGridWarehouseList.get(i).getText();
				if (warehouse.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 20, 6))) 
				{
					pvvGridWarehouseList.get(i).click();
					break;
				}
			}
	        enter_WarehouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			
			enter_ItemTxt.click();
			enter_ItemTxt.sendKeys(Keys.SPACE);
	        int pvvGridItemListCount=pvvGridItemList.size();
			for (int i = 0; i < pvvGridItemListCount; i++) 
			{
				String Item=pvvGridItemList.get(i).getText();
				if (Item.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 21, 6))) 
				{
					pvvGridItemList.get(i).click();
					break;
				}
			}
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
			
	        enter_PvTaxCode.sendKeys(Keys.TAB);
	    
			
			boolean Taxcode=select1stRow_3rdColumn.getText().isEmpty();
			
			String actTaxcode=Boolean.toString(Taxcode);
			String expTaxcode=excelReader.getCellData("PurchaseVoucherVAT", 20, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 20, 8, actTaxcode.toUpperCase());
			
			System.out.println("***************************************** checkPurchaseVoucherNewEntryPageDocumentNumber  ***************************************************");
			System.out.println("Entry Page Open Docuemnt Number Value Actual  : "+actDocumentNumber   +" Value Expected : "+expDocumentNumber);
			
			
			if(actDocumentNumber.equalsIgnoreCase(expDocumentNumber) && actTaxcode.equalsIgnoreCase(expTaxcode))
			{
				System.out.println("Test Pass : Document No is 1");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 18, 9, resPass);
				
				firstRowIndex.click();
				
				deleteRowBtn.click();
				
				return true;
			}
			else
			{
				System.out.println("Test Fail : entry Page NOT Displayed");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 18, 9, resFail);
				
	            firstRowIndex.click();
				
				deleteRowBtn.click();
				
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 18, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
	   	 	return false;
		}
		}
		
		
		public boolean checkPurchaseOptionsInPurchaseVoucherVATEntryPage() throws EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			try
			{
			
			purchaseAccountTxt.click();
			purchaseAccountTxt.sendKeys(Keys.SPACE);
			
			ArrayList<String>  actPVPurchaseAccount= new ArrayList<String>(); 
			
			int count=purchaseAccountListCount.size();
			
			System.err.println(count);
			
			for(int i=0 ; i < count ;i++)
			{
				String data=purchaseAccountListCount.get(i).getText();
				System.err.println("IN FOR LOOP : "+data);
				actPVPurchaseAccount.add(data);
				
			}
			
			System.err.println(actPVPurchaseAccount);
			
			String actPVPurchaseAccountValue=actPVPurchaseAccount.toString();
		    String expPVPurchaseAccountValue=excelReader.getCellData("PurchaseVoucherVAT", 21, 7);
		    
		    excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 21, 8, actPVPurchaseAccountValue);
			
		    System.out.println("********************************************* checkPurchaseOptionsInPurchaseVoucherVATEntryPage  ********************************************************");
			System.out.println("Entry Page Warehouse Masters Value Actual  : "+actPVPurchaseAccountValue+"  Value Expected : "+expPVPurchaseAccountValue);
		    
		    	
		   if(actPVPurchaseAccountValue.equalsIgnoreCase(expPVPurchaseAccountValue))
			{
				System.out.println("Test Pass : Purchase Options Displayed");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 20, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Purchase Options Not Displayed ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 20, 9, resFail);
				return false;
			}
			
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 20, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
	   	 	return false;
		}
		}
			
		

		public boolean checkPurchaseVoucherVATSaveWithOutInput() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			String expSaveWithInputPurchaseAccountValidationMsg     =excelReader.getCellData("PurchaseVoucherVAT", 23, 7);
			
			String actSaveWithInputPurchaseAccountValidationMessage=checkValidationMessage(expSaveWithInputPurchaseAccountValidationMsg);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 23, 8, actSaveWithInputPurchaseAccountValidationMessage);
			
			System.out.println("*********************************************** checkPurchaseVoucherVATSaveWithPurchaseInput  ********************************************");
			System.out.println("Entry Page Save with Purchase Input Value Actual  : "+actSaveWithInputPurchaseAccountValidationMessage  +" Value Expected : "+expSaveWithInputPurchaseAccountValidationMsg+expSaveWithInputPurchaseAccountValidationMsg);	
		
		    	
			if(actSaveWithInputPurchaseAccountValidationMessage.equalsIgnoreCase(expSaveWithInputPurchaseAccountValidationMsg) )
			{
				System.out.println("Test Pass : Error Message Displayed");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 22, 9, resPass);
				return true;
			}
			else
			{
				
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 22, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 22, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
	   	 	return false;
		}
		}
			
		


		public boolean checkPurchaseVoucherVATVendorOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	 {
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		try
		{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		
		vendorAccountTxt.sendKeys(Keys.SPACE);	
		
		ArrayList<String>  actVendorAccountList= new ArrayList<String>(); 

		int count=vendorAccountListCount.size();

		System.err.println(count);
		
		for(int i=0 ; i < count ;i++)
		{
			String data=vendorAccountListCount.get(i).getText();
			System.err.println("IN FOR LOOP : "+data);
			actVendorAccountList.add(data);
			
		}
		  
		vendorAccountTxt.sendKeys(Keys.TAB);
		
		
		
		System.err.println(actVendorAccountList);
		
		String actVendorAccountValue=actVendorAccountList.toString();
		
		String expVendorAccountValue=excelReader.getCellData("PurchaseVoucherVAT", 25, 7);
		
		excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 25, 8, actVendorAccountValue);
		

	    System.out.println("********************************************* checkPurchaseVoucherVATVendorOptions  ********************************************************");
		System.out.println("Entry Page Warehouse Masters Value Actual  : "+actVendorAccountValue+"      Value Expected : "+expVendorAccountValue);
	    
		
	   if(actVendorAccountValue.equalsIgnoreCase(expVendorAccountValue))
		{
			System.out.println("Test Pass : Error Message Displayed");
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 24, 9, resPass);
			return true;
		}
		else
		{
			
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 24, 9, resFail);
			return false;
		}
	 }
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 24, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
	   	 	return false;
		}
		
	}


		public boolean checkPurchaseVoucherVATSaveWithVendorInput() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		try
		{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		
		String expSaveWithInputVendorAccountValidationMsg     =excelReader.getCellData("PurchaseVoucherVAT", 27, 7);
		
		String actSaveWithInputVendorAccountValidationMessage=checkValidationMessage(expSaveWithInputVendorAccountValidationMsg);
		
		excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 27, 8, actSaveWithInputVendorAccountValidationMessage);
		
		
			
			System.out.println("*********************************************** checkPurchaseVoucherVATSaveWithVendorInput  ********************************************");
			System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actSaveWithInputVendorAccountValidationMessage  +" Value Expected : "+expSaveWithInputVendorAccountValidationMsg);	
			
		    	
			if(actSaveWithInputVendorAccountValidationMessage.startsWith(expSaveWithInputVendorAccountValidationMsg))
					
		{
			System.out.println("Test Pass : Error Message Displayed");
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 26, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile,"PurchaseVoucherVAT", 26, 9, resFail);
			return false;
		}
	   }
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 26, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		}
	 }


		public boolean checkDueDateOptioninPurchaseVoucherVATEntryPage() throws EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderDueDate));
			voucherHeaderDueDate.click();
			
			DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
			
	        String actCurrentDateInSimpleFormat=dateTxt.getAttribute("value");
			 
	        String expVoucherHeaderDueDate=voucherHeaderDueDate.getAttribute("value");
			
	        
	        excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 28, 7, actCurrentDateInSimpleFormat);
	        excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 28, 8, expVoucherHeaderDueDate);
	        
			System.out.println("*********************************************** checkDueDateOptioninPurchaseVoucherVatEntryPage  ********************************************");
			System.out.println("Entry Page Due Date  Value Actual  : "+actCurrentDateInSimpleFormat  +" Value Expected : "+expVoucherHeaderDueDate);	

			if(actCurrentDateInSimpleFormat.equalsIgnoreCase(expVoucherHeaderDueDate))
			{
				System.out.println("Test Pass : Date Displayed as Current Date ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 28, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Date Not  Displayed as Current Date");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 28, 9, resFail);
				return false;
			}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 28, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
			}
		}
				
		public boolean checkCurrencyOptioninPurchaseVoucherVAT() throws EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
				voucherHeaderCurrency.click();
				voucherHeaderCurrency.sendKeys(Keys.SHIFT,Keys.HOME);
				voucherHeaderCurrency.sendKeys(Keys.SPACE);	
				
				ArrayList<String>  actvoucherHeaderCurrency= new ArrayList<String>(); 
				
	            int count=currencyListCount.size();
				
				System.err.println(count);
				
				for(int i=0 ; i < count ;i++)
				{
					String data=currencyListCount.get(i).getText();
					System.err.println("IN FOR LOOP : "+data);
					actvoucherHeaderCurrency.add(data);
					
				}
				
				System.err.println(actvoucherHeaderCurrency);
				
				voucherHeaderCurrency.sendKeys(Keys.TAB);
				
				String actCurrencyList=actvoucherHeaderCurrency.toString();
				
				String expCurrencyList=excelReader.getCellData("PurchaseVoucherVAT", 30, 7);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 30, 8, actCurrencyList);
				
				if(actCurrencyList.equalsIgnoreCase(expCurrencyList))
				{
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 29, 9, resPass);
					return true;
				}
				else
				{
					
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 29, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 29, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
			}
		}
				
			
			public boolean checkPurchaseVoucherVATVouchersEntryPageNew() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
				try
				{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
				documentNumberTxt.click();
				documentNumberTxt.clear();
				documentNumberTxt.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 32, 6));
				documentNumberTxt.sendKeys(Keys.TAB);
				
				String actGetDocumentNumberInputs=documentNumberTxt.getAttribute("value");
				String expGetDocumentNumberInputs=excelReader.getCellData("PurchaseVoucherVAT", 33, 7);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 33, 8, actGetDocumentNumberInputs);
				
				System.out.println("Test Pass : Entered 2 in DOC NO");
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_newBtn));
				new_newBtn.click();
				
				boolean res = getIsAlertPresent();
				
				if(res==true)
				{
				
					getWaitForAlert();
					
					getFluentWebDriverWait().until(ExpectedConditions.alertIsPresent());
					
					String actAlertMessageOnClickOnNewBtn=getDriver().switchTo().alert().getText();
					String expAlertMessageOnClickOnNewBtn=excelReader.getCellData("PurchaseVoucherVAT", 34, 7);
					
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 34, 8, actAlertMessageOnClickOnNewBtn);
					
					
					getDriver().switchTo().alert().accept();
				}
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
				String actGetDocumentNumberInputAfterClickOnNewBtn=documentNumberTxt.getAttribute("value");
				String expGetDocumentNumberInputAfterClickOnNewBtn=excelReader.getCellData("PurchaseVoucherVAT", 35, 7);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 35, 8, actGetDocumentNumberInputAfterClickOnNewBtn);
				
				System.out.println("*********************************************** checkPurchaseVoucherNewVouchersEntryPageNew  ********************************************");
				System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actGetDocumentNumberInputs                 +" Value Expected : "+expGetDocumentNumberInputs);	
				//System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actAlertMessageOnClickOnNewBtn             +" Value Expected : "+expAlertMessageOnClickOnNewBtn);
				System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actGetDocumentNumberInputAfterClickOnNewBtn+" Value Expected : "+expGetDocumentNumberInputAfterClickOnNewBtn);
				
				
				if(actGetDocumentNumberInputs.equalsIgnoreCase(expGetDocumentNumberInputs) /*&& actAlertMessageOnClickOnNewBtn.equalsIgnoreCase(expAlertMessageOnClickOnNewBtn)*/ 
						&& actGetDocumentNumberInputAfterClickOnNewBtn.equalsIgnoreCase(expGetDocumentNumberInputAfterClickOnNewBtn))
				{
					System.out.println("Test Pass : New Option in Entry Page ");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 31, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail :New Option in Entry Page ");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 31, 9, resFail);
					return false;
			}
		}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 31, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
			}
				
			}

		
		public boolean checkPurchaseVoucherVATWithCurrencyInputAndExcgRate() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			

	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys(Keys.SPACE);
			
			int vendorcount=vendorAccountListCount.size();
			
			System.err.println(vendorcount);
			
			for(int i=0 ; i < vendorcount ;i++)
			{
				String data=vendorAccountListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 38, 6)))
				{
					vendorAccountListCount.get(i).click();
					
					break;
				}
			}
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			raiseReceiptsChkBox.sendKeys(Keys.TAB);
			voucherHeaderDueDate.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
			voucherHeaderCurrency.click();;
			voucherHeaderCurrency.sendKeys(Keys.SHIFT,Keys.HOME);
			
			voucherHeaderCurrency.sendKeys(Keys.SPACE);
			
			int currencycount=currencyListCount.size();
			
			System.err.println(currencycount);
				
			for(int i=0 ; i < currencycount ;i++)
			{
				String data=currencyListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 39, 6)))
				{
					currencyListCount.get(i).click();
					
					break;
				}
			}
				
			voucherHeaderCurrency.sendKeys(Keys.TAB);
			voucherHeaderExchangeRate.click();
			
			
			String actExchangeRate=voucherHeaderExchangeRate.getAttribute("value");
			String expExchangeRate=excelReader.getCellData("PurchaseVoucherVAT", 40, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 40, 8, actExchangeRate);

			System.out.println("*********************************************** checkPurchaseVoucherNewWithCurrencyInputAndExcgRate  ********************************************");
			System.out.println("Entry Page Exchange Rate Value Actual  : "+actExchangeRate  +" Value Expected : "+expExchangeRate);	
			
			
			if (actExchangeRate.equalsIgnoreCase(expExchangeRate))
			{
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 36, 9, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 36, 9, resFail);
				return false;
			}	
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 36, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
	   	 	return false;
		}
			
		}
		
		
		
		public boolean checkPurchaseVoucherVATDepartment() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			WebElement options=departmentTxt;
			
			ArrayList<String> actDepartmentList= new ArrayList<String>(); 
		

			int count=departmentListCount.size();
			
			System.err.println(count);
			
			for(int i=0 ; i < count ;i++)
			{
				String data=departmentListCount.get(i).getText();
				System.err.println("IN FOR LOOP : "+data);
				actDepartmentList.add(data);
				
			}
			
			System.err.println(actDepartmentList);
			
			
			System.out.println("actDepartmentList"+actDepartmentList);
			
			
			String actDepartmentValue=actDepartmentList.toString();
			String expDepartmentValue=excelReader.getCellData("PurchaseVoucherVAT", 42	, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 42, 8, actDepartmentValue);
			

			System.out.println("********************************************* checkPurchaseVoucherVATDepartment  ********************************************************");
			System.out.println("Entry Page Department Masters Value Actual  : "+actDepartmentValue     +"     Value Expected : "+expDepartmentValue);
		   
		   if(actDepartmentValue.equalsIgnoreCase(expDepartmentValue))
			{
				System.out.println("Test Pass : Error Message Displayed");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 41, 9, resPass);
				return true;
			}
			else
			{
				
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 41, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 41, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
	   	 	return false;
		}
		
		}
		


		
		public boolean checkExchangeRateAndLocalExchangeRateWithCurrencyINRInPurchaseVoucherVAT()throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			
			voucherHeaderDueDate.click();
			voucherHeaderDueDate.sendKeys(Keys.TAB);
			
			voucherHeaderCurrency.sendKeys(Keys.TAB);
			
			voucherHeaderExchangeRate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME,Keys.BACK_SPACE);
			departmentTxt.sendKeys(Keys.SPACE);
			Thread.sleep(2000);
			int departmentcount=departmentListCount.size();
			
			System.err.println(departmentcount);
				
			for(int i=0 ; i < departmentcount ;i++)
			{
				String data=departmentListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 43, 6)))
				{
					departmentListCount.get(i).click();
					break;
				}
			}
				
			Thread.sleep(1000);
			
			departmentTxt.sendKeys(Keys.TAB);	
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderExchangeRate));
			String actExchnageRateOnChangingCurrencyToINR=voucherHeaderExchangeRate.getAttribute("value");
			String expExchnageRateOnChangingCurrencyToINR=excelReader.getCellData("PurchaseVoucherVAT", 44, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 44, 8, actExchnageRateOnChangingCurrencyToINR);
			
			
			String actLocalExchnageRateOnChangingCurrencyToINR=voucherHeaderLocalExchangeRate.getAttribute("value");
			String expLocalExchnageRateOnChangingCurrencyToINR=excelReader.getCellData("PurchaseVoucherVAT", 45, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 45, 8, actLocalExchnageRateOnChangingCurrencyToINR);
			
			System.out.println("*********************************************** checkExchangeRateAndLocalExchangeReatewithCurrencyINR  ********************************************");
			System.out.println("Exchange Rate  Value Actual             : "+actExchnageRateOnChangingCurrencyToINR       +" Value Expected : "+expExchnageRateOnChangingCurrencyToINR);	
			System.out.println("Local Exchange Rate  Value Actual       : "+actLocalExchnageRateOnChangingCurrencyToINR  +" Value Expected : "+expLocalExchnageRateOnChangingCurrencyToINR);
		
			
			
			if (actExchnageRateOnChangingCurrencyToINR.equalsIgnoreCase(expExchnageRateOnChangingCurrencyToINR) 
					&& actLocalExchnageRateOnChangingCurrencyToINR.equalsIgnoreCase(expLocalExchnageRateOnChangingCurrencyToINR) )
			   {
					System.out.println("Test Pass : Exchange Rate Is Updated ");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 43, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail :  Exchange Rate Is  NOt Updated ");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 43, 9, resFail);
					return false;
				}	
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 43, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
			}
		
		}


					
		  @FindBy(xpath="//*[@id='iCurrencyId']")
		  private static WebElement localCurrencyComboBox;
		  
		  @FindBy(xpath="//input[@id='Jurisdiction']")
	      private static WebElement jurisdictionTxtInDepartmentMaster;
		
		  
		  @FindBy(xpath="//a[contains(text(),'VAT Settings')]")
			private static WebElement vatSettingsTab;
			
			@FindBy(xpath="//input[@id='PlaceOfSupply']")
			private static WebElement masterplaceofSupplyTxt;
			
			@FindBy(xpath="//tbody[@id='PlaceOfSupply_table_body']/tr/td[2]")
			private static List<WebElement> masterPlaceOfSupplyList; 
			
			public boolean checkSettingPlaceofSupplyForvendorAInPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
					vendorAccountTxt.click();
					vendorAccountTxt.sendKeys(Keys.END);
					vendorAccountTxt.sendKeys(Keys.SHIFT,Keys.HOME);
					vendorAccountTxt.sendKeys(Keys.SPACE);
					
					int vendorcount=vendorAccountListCount.size();
					
					System.err.println(vendorcount);
					
					for(int i=0 ; i < vendorcount ;i++)
					{
						String data=vendorAccountListCount.get(i).getText();
						
						if(data.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 429, 6)))
						{
							vendorAccountListCount.get(i).click();
							
							break;
						}
					}
					
					vendorAccountTxt.sendKeys(Keys.TAB);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
					vendorAccountTxt.click();
					
					vendorAccountTxt.sendKeys(Keys.CONTROL + "e");
					
					Thread.sleep(1000);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vatSettingsTab));
					vatSettingsTab.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterplaceofSupplyTxt));
					masterplaceofSupplyTxt.click();
					masterplaceofSupplyTxt.sendKeys(Keys.END);
					masterplaceofSupplyTxt.sendKeys(Keys.SHIFT,Keys.HOME);
					masterplaceofSupplyTxt.sendKeys(Keys.SPACE);
					
					int masterPlaceOfSupplyListCount=masterPlaceOfSupplyList.size();
					
					System.err.println(masterPlaceOfSupplyListCount);
					
					for(int i=0 ; i < masterPlaceOfSupplyListCount ;i++)
					{
						String data=masterPlaceOfSupplyList.get(i).getText();
						
						if(data.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 430, 6)))
						{
							masterPlaceOfSupplyList.get(i).click();
							
							break;
						}
					}
					
					masterplaceofSupplyTxt.sendKeys(Keys.TAB);
					
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(account_saveBtn));
					account_saveBtn.click();
					
					Thread.sleep(2000);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_newBtn));
					new_newBtn.click();
					
					getWaitForAlert();
					
					getAlert().accept();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
					vendorAccountTxt.click();
					vendorAccountTxt.sendKeys(Keys.END);
					vendorAccountTxt.sendKeys(Keys.SHIFT,Keys.HOME);
					vendorAccountTxt.sendKeys(Keys.SPACE);
					
					
					for(int i=0 ; i < vendorcount ;i++)
					{
						String data=vendorAccountListCount.get(i).getText();
						
						if(data.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 429, 6)))
						{
							vendorAccountListCount.get(i).click();
							
							break;
						}
					}
					
					vendorAccountTxt.sendKeys(Keys.TAB);
			
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeofSupplyTxt));
					String actplaceofSupplyTxt = placeofSupplyTxt.getAttribute("value");
					String expplaceofSupplyTxt = excelReader.getCellData("PurchaseVoucherVAT", 430, 7);
					
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 430, 8, actplaceofSupplyTxt);
					
					
					System.out.println("placeofSupplyTxt Actual   : "+actplaceofSupplyTxt);
					System.out.println("placeofSupplyTxt Expected : "+expplaceofSupplyTxt);
					
					if(actplaceofSupplyTxt.equalsIgnoreCase(expplaceofSupplyTxt)) 
					{
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 429, 9, resPass);
						System.out.println("Test Pass :Department Screen Displayed");
						return true;
					}
					else
					{
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 429, 9, resFail);
						System.out.println("Test Fail : Department Screen NOT Displayed");
						return false;
					}
				}
				catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 429, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			   	 	return false;
				}
		    }

				
		
		

		public boolean checkDepartmentMasterCreationPageOnClickOnEditMasterInPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.click();
			
			departmentTxt.sendKeys(Keys.END);
			
			departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME,Keys.BACK_SPACE);
							
			departmentTxt.sendKeys(Keys.SPACE);
			
			
	        int departmentcount=departmentListCount.size();
			
			System.err.println(departmentcount);
				
			for(int i=0 ; i < departmentcount ;i++)
			{
				String data=departmentListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 51, 6)))
				{
					departmentListCount.get(i).click();
					
					break;
				}
			}
				
			departmentTxt.sendKeys(Keys.TAB);	
			
			departmentTxt.sendKeys(Keys.CONTROL + "e");
			
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
			 
			boolean actDepartmentName          = nameTxt.isDisplayed();
			boolean actDepartmentCode          = codeTxt.isDisplayed();
			boolean actDepartmentCurrency      = localCurrencyComboBox.isDisplayed();
			boolean actDepartmentJurisdiction  = jurisdictionTxtInDepartmentMaster.isDisplayed();
			boolean actDepartmentSaveBtn       = account_saveBtn.isDisplayed();
			boolean actDepartmentCloseBtn      = account_CloseBtn.isDisplayed();
			
			boolean expDepartmentName          = true;
			boolean expDepartmentCode          = true;
			boolean expDepartmentCurrency      = true;
			boolean expDepartmentJurisdiction  = true;
			boolean expDepartmentSaveBtn       = true;
			boolean expDepartmentCloseBtn      = true;
			
			System.out.println("****************************** checkVendorAccountLabelInVoucher  ********************************************");
			
			System.out.println("actDepartmentName          :"+actDepartmentName		    +" Value Expected : "+expDepartmentName);
			System.out.println("actDepartmentCode          :"+actDepartmentCode		    +" Value Expected : "+expDepartmentCode);
			System.out.println("actDepartmentCurrency      :"+actDepartmentCurrency		+" Value Expected : "+expDepartmentCurrency);
			System.out.println("actDepartmentJurisdiction  :"+actDepartmentJurisdiction	+" Value Expected : "+expDepartmentJurisdiction);
			System.out.println("actDepartmentSaveBtn       :"+actDepartmentSaveBtn	    +" Value Expected : "+expDepartmentSaveBtn);
			System.out.println("actDepartmentCloseBtn      :"+actDepartmentCloseBtn		+" Value Expected : "+expDepartmentCloseBtn);
			
			
			String actGetDepartmentName=nameTxt.getAttribute("value");
			String expGetDepartmentName=excelReader.getCellData("PurchaseVoucherVAT", 47, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 47, 8, actGetDepartmentName);
			
			System.out.println("actDepartmentCurrency       :"+actGetDepartmentName		+" Value Expected : "+expGetDepartmentName);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxtInDepartmentMaster));
			jurisdictionTxtInDepartmentMaster.click();
			
			jurisdictionTxtInDepartmentMaster.sendKeys(Keys.END);
		
			jurisdictionTxtInDepartmentMaster.sendKeys(Keys.SHIFT,Keys.HOME);
			
			jurisdictionTxtInDepartmentMaster.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 48, 6));
			Thread.sleep(2000);
			jurisdictionTxtInDepartmentMaster.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(account_saveBtn));
			account_saveBtn.click();
			
			boolean actMethod=actDepartmentName==expDepartmentName && actDepartmentCode==expDepartmentCode && actDepartmentCurrency==expDepartmentCurrency
					&& actDepartmentJurisdiction==expDepartmentJurisdiction && actDepartmentSaveBtn==expDepartmentSaveBtn
					&& actDepartmentCloseBtn==expDepartmentCloseBtn && actGetDepartmentName.equalsIgnoreCase(expGetDepartmentName);
			
			String actDisplayResult=Boolean.toString(actMethod);
			String expDisplayResult=excelReader.getCellData("PurchaseVoucherVAT", 49, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 49, 8, actDisplayResult.toUpperCase());
			
			if(actMethod==true) 
			{
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 46, 9, resPass);
				System.out.println("Test Pass :Department Screen Displayed");
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 46, 9, resFail);
				System.out.println("Test Fail : Department Screen NOT Displayed");
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 46, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
	   	 	return false;
		}
	    }
		

		
	@FindBy(xpath="//*[@id='id_header_268435470_table_body']/tr")
	private static List<WebElement>  placeOfSupplyList;
		
		public boolean checkDepartmentMasterUpdateByClickOnSaveInPurchaseVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
				
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_newBtn));
				new_newBtn.click();
				
				getWaitForAlert();
				
				getAlert().accept();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
				vendorAccountTxt.click();
				vendorAccountTxt.sendKeys(Keys.END);
				vendorAccountTxt.sendKeys(Keys.SHIFT,Keys.HOME);
				vendorAccountTxt.sendKeys(Keys.SPACE);
				
				int vendorcount=vendorAccountListCount.size();
				
				System.err.println(vendorcount);
				
				for(int i=0 ; i < vendorcount ;i++)
				{
					String data=vendorAccountListCount.get(i).getText();
					
					if(data.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 429, 6)))
					{
						vendorAccountListCount.get(i).click();
						
						break;
					}
				}
				
				vendorAccountTxt.sendKeys(Keys.TAB);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			
			departmentTxt.sendKeys(Keys.END);
			
			departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME,Keys.BACK_SPACE);
							
			departmentTxt.sendKeys(Keys.SPACE);
			
			
	        int departmentcount=departmentListCount.size();
			
			System.err.println(departmentcount);
				
			for(int i=0 ; i < departmentcount ;i++)
			{
				String data=departmentListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 51, 6)))
				{
					departmentListCount.get(i).click();
					
					break;
				}
			}
				
			departmentTxt.sendKeys(Keys.TAB);	
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
			String actDepartmentCurrency     =jurisdictionTxt.getAttribute("value");
			
			String expDepartmentCurrency     =excelReader.getCellData("PurchaseVoucherVAT", 52, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 52, 8, actDepartmentCurrency);
			
			System.out.println("Test"+jurisdictionTxt.getText());
			
			
			System.out.println("actDepartmentName       :"+actDepartmentCurrency		+" Value Expected : "+expDepartmentCurrency);
			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeofSupplyTxt));
			placeofSupplyTxt.click();
			placeofSupplyTxt.sendKeys(Keys.SPACE);
			
	        int placeOfSupplyListCount=placeOfSupplyList.size();
			
			System.err.println(placeOfSupplyListCount);
				
			for(int i=0 ; i < placeOfSupplyListCount ;i++)
			{
				String data=placeOfSupplyList.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 53, 6)))
				{
					placeOfSupplyList.get(i).click();
					
					break;
				}
			}
				
			placeofSupplyTxt.sendKeys(Keys.TAB);	*/
			
			
			if(actDepartmentCurrency.equalsIgnoreCase(expDepartmentCurrency)) 
			{
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 50, 9, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 50, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 50, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
	   	 	return false;
		}
	    }


	    @FindBy(xpath="//input[@id='id_body_536870916']")
	    private static WebElement enter_WarehouseTxt;
		
	    @FindBy(xpath="//*[@id='id_body_536870916_table_body']/tr")
	    private static List<WebElement> pvvGridWarehouseList;
		
	    @FindBy(xpath="//*[@id='id_body_23_table_body']/tr")
	    private static List<WebElement> pvvGridItemList;
	  
	  
	    

		public boolean checkTaxCodeBySelectingStandardRateItemInPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		  try
		  {
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoSideBarExpandBtn));
			infoSideBarExpandBtn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
			enter_WarehouseTxt.click();
			
			enter_WarehouseTxt.sendKeys(Keys.SPACE);
		
			
			int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
			
			for (int i = 0; i < pvvGridWarehouseListCount; i++) 
			{
				String warehouse=pvvGridWarehouseList.get(i).getText();
				if (warehouse.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 55, 6))) 
				{
					pvvGridWarehouseList.get(i).click();
					break;
				}
			}
	        enter_WarehouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			
			enter_ItemTxt.click();
			enter_ItemTxt.sendKeys(Keys.SPACE);
	        int pvvGridItemListCount=pvvGridItemList.size();
			for (int i = 0; i < pvvGridItemListCount; i++) 
			{
				String Item=pvvGridItemList.get(i).getText();
				if (Item.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 56, 6))) 
				{
					pvvGridItemList.get(i).click();
					break;
				}
			}
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
			
	        enter_PvTaxCode.click();
	        
	        
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
			select1stRow_9thColumn.click();
			
			String actWarehouse=select1stRow_1stColumn.getText();
			String expWarehouse=excelReader.getCellData("PurchaseVoucherVAT", 55, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 55, 8, actWarehouse);
			
			
			String actItem=select1stRow_2ndColumn.getText();
			String expItem=excelReader.getCellData("PurchaseVoucherVAT", 56, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 56, 8, actItem);
			
			
			String actTaxCode=select1stRow_3rdColumn.getText();
			String expTaxCode=excelReader.getCellData("PurchaseVoucherVAT", 57, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 57, 8, actTaxCode);
			
			String actPurchaseAccount=select1stRow_4thColumn.getText();
			String expPurchaseAccount=excelReader.getCellData("PurchaseVoucherVAT", 54, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 54, 8, actPurchaseAccount);
			
			
			String actUnits=select1stRow_5thColumn.getText();
			String expUnits=excelReader.getCellData("PurchaseVoucherVAT", 58, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 58, 8, actUnits);
			
			System.out.println("************************************checkTaxCodeBySelectingStandardRateItemInPurchaseVoucherBody*************");
			
			System.out.println("WAREHOUSE      :"+actWarehouse		+" Value Expected : "+expWarehouse);
			System.out.println("ITEM           :"+actItem		    +" Value Expected : "+expItem);
			System.out.println("Tax Code       :"+actTaxCode		+" Value Expected : "+expTaxCode);
			System.out.println("UNITS          :"+actUnits		    +" Value Expected : "+expUnits);
			System.out.println("PurchaseAccount           : " + actPurchaseAccount+ " Value Expected : "+expPurchaseAccount);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
			select1stRow_9thColumn.click();
			
			if(actTaxCode.equalsIgnoreCase(expTaxCode) && actWarehouse.equalsIgnoreCase(expWarehouse) && 
					actItem.equalsIgnoreCase(expItem) && actUnits.equalsIgnoreCase(expUnits) && actPurchaseAccount.equalsIgnoreCase(expPurchaseAccount))
			{
				System.out.println("Test Pass : Data Entered in first Row");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 54, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Data NOT Entered in first Row");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 54, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 54, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
	   	 	return false;
		}
		}
		

		public boolean checkAvGRateAndAVGRateOBySelectingStandardRateBatchItemInPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		    try
		    {
		    	
		    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_6thColumn));
				select1stRow_6thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
				select1stRow_7thColumn.click();
				
								
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
				select1stRow_8thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
				select1stRow_9thColumn.click();
		    	
		    	
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
				
				String actR1C1AVGRate =select1stRow_7thColumn.getText();			
				String expR1C1AVGRate =excelReader.getCellData("PurchaseVoucherVAT", 60, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 60, 8, actR1C1AVGRate);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
				String actR1C1AVGRateO =select1stRow_8thColumn.getText();			
				String expR1C1AVGRateO =excelReader.getCellData("PurchaseVoucherVAT", 61, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 61, 8, actR1C1AVGRateO);
						
						
				System.out.println("******************checkAvGRateAndAVGRateOBySelectingStandardRateBatchItemInPurchaseVoucherBody**********");
				
				System.out.println("Entry Page Avg Rate Value Actual      : "+actR1C1AVGRate   +" Value Expected : "+expR1C1AVGRate);	
				System.out.println("Entry Page Avg Rate (o) Value Actual  : "+actR1C1AVGRateO   +" Value Expected : "+expR1C1AVGRateO);
												
				if(actR1C1AVGRate.equalsIgnoreCase(expR1C1AVGRate) && 
						actR1C1AVGRateO.equalsIgnoreCase(expR1C1AVGRateO))
				{
					System.out.println("Test Pass : Data Entered in first Row");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 59, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Data NOT Entered in first Row");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 59, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 59, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
			}
		}
		
		
		
		public boolean checkGrossBySelectingStandardRateIteminPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.click();
			enter_Quantity.clear();
			enter_Quantity.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 63, 6));
			enter_Quantity.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.click();
			enter_Rate.clear();
			enter_Rate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 64, 6));
			enter_Rate.sendKeys(Keys.TAB);
							
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.click();
			enter_Gross.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
			String actR1C1Gross =select1stRow_12thColumn.getText();			
			String expR1C1Gross =excelReader.getCellData("PurchaseVoucherVAT", 65, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 65, 8, actR1C1Gross);
					
			System.out.println("*********************************************** checkGrossBySelectingStandardRateIteminPurchaseVoucherBody  ********************************************");
			System.out.println("Entry Page Gross Value Actual  : "+actR1C1Gross   +" Value Expected : "+expR1C1Gross);	
											
			if(actR1C1Gross.equalsIgnoreCase(expR1C1Gross) )
			{
				System.out.println("Test Pass : Gross Value AS Expected ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 62, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Gross Value is Not Expected ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 62, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 62, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
	   	 	return false;
		}
		}
		
		
		/*@FindBy(xpath="//input[@id='id_body_33554503']")
		private static WebElement enter_PvVat;*/
		
		
		@FindBy(xpath="//input[@id='id_body_33554485']")
		private static WebElement enter_PvVat;
		
		
		
		public boolean checkVATValueBySelectingStandardRateIteminPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
				
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
			select1stRow_14thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvVat));
			enter_PvVat.click();
			
			enter_PvVat.sendKeys(Keys.TAB);
			
			String actR1C1VAT =select1stRow_14thColumn.getText();			
			String expR1C1VAT =excelReader.getCellData("PurchaseVoucherVAT", 67, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 67, 8, actR1C1VAT);
			
					
			System.out.println("*******************************checkVATValueBySelectingStandardRateIteminPurchaseVoucherBody****************");
			
			System.out.println("Entry Page VAT Value  Value Actual  : "+actR1C1VAT   +" Value Expected : "+expR1C1VAT);	

			
			if(actR1C1VAT.equalsIgnoreCase(expR1C1VAT))
			{
				System.out.println("Test Pass : Data Entered in first Row");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 66, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Data NOT Entered in first Row");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 66, 9, resFail);
				return false;
			}
		  }
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 66, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
	   	 	return false;
		}
		}
		
		
		
		
		/*@FindBy(xpath="//input[@id='id_body_33554504']")
		private static WebElement enter_PvTaxable;*/
		               
		
		@FindBy(xpath="//input[@id='id_body_33554486']")
		private static WebElement enter_PvTaxable;
		
		@FindBy(xpath="//tbody[@id='id_body_16777307_table_body']/tr/td[2]")
		private static List<WebElement> pvvGridTaxCodeList;
		
		@FindBy(xpath="//input[@id='id_body_16777307']")
		private static WebElement enter_PvTaxCode;
		
		
		public boolean checkTaxableValueBySelectingStandardRateItemAndClickonSaveWithoutBatch() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxable));
			enter_PvTaxable.click();
			enter_PvTaxable.sendKeys(Keys.TAB);
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_15thColumn));
			String actR1C1Taxable =select1stRow_15thColumn.getText();			
			String expR1C1Taxable =excelReader.getCellData("PurchaseVoucherVAT", 68, 7);
		
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 68, 8, actR1C1Taxable);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			String expMessage	= excelReader.getCellData("PurchaseVoucherVAT", 69, 7);
			
			
			String actMessage	=checkValidationMessage(expMessage);


			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 69, 8, actMessage);
			
			
			System.out.println("******************************checkTaxableValueBySelectingStandardRateItemAndClickonSaveWithoutBatch************************************");
			
			System.out.println("Entry Page Taxable Value Actual                          : "+actR1C1Taxable   +" Value Expected : "+expR1C1Taxable);
			System.out.println("Message Displayed As Clcik On SAve Without Batch Value   : "+actMessage   +" Value Expected : "+expMessage);
			
											
			if(actR1C1Taxable.equalsIgnoreCase(expR1C1Taxable)  && actMessage.equalsIgnoreCase(expMessage))
			{
				System.out.println("Test Pass : Displayed Taxable Value and Message  Dispalyed As Excepted ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 68, 9, resPass);
				return true;
			}	
			else
			{
				System.out.println("Test Fail :Not Displayed Taxable Value");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 68, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 68, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
	   	 	return false;
		}
		}
		
		
		public boolean checkBatchValueandExpireyDateInPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));	
			select1stRow_16thColumn.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.click();
			enter_Batch.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 71, 6));
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			String expMessage	= excelReader.getCellData("PurchaseVoucherVAT", 70, 7);
			String actMessage	=checkValidationMessage(expMessage);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 70, 8, actMessage);
			
			
			String actBatchName=select1stRow_16thColumn.getText();
			String expBatchName=excelReader.getCellData("PurchaseVoucherVAT", 71, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 71, 8, actBatchName);
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_18thColumn));
	        select1stRow_18thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
			enter_Expirydate.click();
			enter_Expirydate.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_18thColumn));
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
			Date date=new Date();
			System.out.println(df.format(date));
			
			String actCurrentDate =select1stRow_18thColumn.getText();			
			
			String expCurrentDate = df.format(date);
			
			System.out.println("*********************************************** checkBatchValueInPurchaseVoucherBody  ********************************************");
			System.out.println("Entry Page Current Date  Value Actual  : "+actCurrentDate   +" Value Expected : "+expCurrentDate);
			System.out.println("Entry Page Validation Message          : "+actMessage       +" Value Expected : "+expMessage);
			System.out.println("Entry Page Batch Name  Value Actual    : "+actBatchName   +" Value Expected : "+expBatchName);
											
			if(actMessage.equalsIgnoreCase(expMessage) && actCurrentDate.equalsIgnoreCase(expCurrentDate) && actBatchName.equalsIgnoreCase(expBatchName) )
			{
				System.out.println("Test Pass : Displayed Batch Name and Expirey date ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 70, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Not Displayed Batch Name and Expirey date");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 70, 9, resFail);
				return false;
			}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 70, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
			}
		}
		

		
		public boolean checkTaxCodeBySelectingStandardRateItemInSecondRowOfPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		try
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
			select2ndRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
			enter_WarehouseTxt.click();
			enter_WarehouseTxt.sendKeys(Keys.END);
			enter_WarehouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			enter_WarehouseTxt.sendKeys(Keys.SPACE);
			
			int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
			for (int i = 0; i < pvvGridWarehouseListCount; i++) 
			{
				String warehouse=pvvGridWarehouseList.get(i).getText();
				if (warehouse.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 73, 6))) 
				{
					pvvGridWarehouseList.get(i).click();
					break;
				}
			}
	        enter_WarehouseTxt.sendKeys(Keys.TAB);
			
	        
	       getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		   enter_ItemTxt.click();
		   enter_ItemTxt.sendKeys(Keys.SPACE);
	        int pvvGridItemListCount=pvvGridItemList.size();
			for (int i = 0; i < pvvGridItemListCount; i++) 
			{
				String Item=pvvGridItemList.get(i).getText();
				if (Item.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 74, 6))) 
				{
					pvvGridItemList.get(i).click();
					break;
				}
			}
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_5thColumn));
			select2ndRow_5thColumn.click();
								
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_9thColumn));
			select2ndRow_9thColumn.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
			String actWarehouse=select2ndRow_1stColumn.getText();
			String expWarehouse=excelReader.getCellData("PurchaseVoucherVAT", 73, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 73, 8, actWarehouse);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_2ndColumn));
			String actItem=select2ndRow_2ndColumn.getText();
			String expItem=excelReader.getCellData("PurchaseVoucherVAT", 74, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 74, 8, actItem);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_3rdColumn));
			String actTaxCode=select2ndRow_3rdColumn.getText();
			String expTaxCode=excelReader.getCellData("PurchaseVoucherVAT", 75, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 75, 8, actTaxCode);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_4thColumn));
			String actPurchaseAccount=select2ndRow_4thColumn.getText();
			String expPurchaseAccount=excelReader.getCellData("PurchaseVoucherVAT", 72, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 72, 8, actPurchaseAccount);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_5thColumn));
			String actUnits=select2ndRow_5thColumn.getText();
			String expUnits=excelReader.getCellData("PurchaseVoucherVAT", 76, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 76, 8, actUnits);
		
			System.out.println("****************checkTaxCodeBySelectingStandardRateItemInSecondRowOfPurchaseVoucherBody*******");
			System.out.println("WAREHOUSE      :"+actWarehouse		+" Value Expected : "+expWarehouse);
			System.out.println("ITEM           :"+actItem		    +" Value Expected : "+expItem);
			System.out.println("Tax Code       :"+actTaxCode		+" Value Expected : "+expTaxCode);
			System.out.println("UNITS          :"+actUnits		    +" Value Expected : "+expUnits);
			System.out.println("Purchase Account          :"+actPurchaseAccount		    +" Value Expected : "+expPurchaseAccount);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_9thColumn));
			select2ndRow_9thColumn.click();
			
			if(actTaxCode.equalsIgnoreCase(expTaxCode)  && actWarehouse.equalsIgnoreCase(expWarehouse) && 
					actItem.equalsIgnoreCase(expItem) && actUnits.equalsIgnoreCase(expUnits) && actPurchaseAccount.equalsIgnoreCase(expPurchaseAccount) )
			{
				System.out.println("Test Pass : Data Entered in Second Row");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 72, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Data NOT Entered in Second Row");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 72, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 72, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
	   	 	return false;
		}
		}
		
		public boolean checkAvGRateAndAVGRateOBySelectingStandardRateBatchItemInSecondRowPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_6thColumn));
			select2ndRow_6thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_7thColumn));
			select2ndRow_7thColumn.click();
			
							
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_8thColumn));
			select2ndRow_8thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_9thColumn));
			select2ndRow_9thColumn.click();
				
			String actR1C1AVGRate =select2ndRow_7thColumn.getText();			
			String expR1C1AVGRate =excelReader.getCellData("PurchaseVoucherVAT", 78, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 78, 8, actR1C1AVGRate);
			
			String actR1C1AVGRateO =select2ndRow_8thColumn.getText();			
			String expR1C1AVGRateO =excelReader.getCellData("PurchaseVoucherVAT", 79, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 79, 8, actR1C1AVGRate);
					
					
			System.out.println("*********************************************** checkAvGRateAndAVGRateOBySelectingStandardRateBatchItemInSecondRowPurchaseVoucherBody  ********************************************");
			System.out.println("Entry Page Avg Rate Value Actual      : "+actR1C1AVGRate   +" Value Expected : "+expR1C1AVGRate);	
			System.out.println("Entry Page Avg Rate(o)  Value Actual  : "+actR1C1AVGRateO   +" Value Expected : "+expR1C1AVGRateO);
			
											
			if(actR1C1AVGRate.equalsIgnoreCase(expR1C1AVGRate) )
			{
				System.out.println("Test Pass : Displayed AVG  rate And Avg Rate(o) in Second Row");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 77, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail :  Not Displayed AVG  rate And Avg Rate(o) in Second Row Second Row");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 77, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 77, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
	   	 	return false;
		}
		}
		


		
		
		public boolean checkGrossBySelectingStandardRateItemInSecondRowPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.click();
			enter_Quantity.clear();
			enter_Quantity.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 81, 6));
			enter_Quantity.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.click();
			enter_Rate.clear();
			enter_Rate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 82, 6));
			enter_Rate.sendKeys(Keys.TAB);
							
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.click();
			enter_Gross.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_12thColumn));
			String actR1C1Gross =select2ndRow_12thColumn.getText();			
			String expR1C1Gross =excelReader.getCellData("PurchaseVoucherVAT", 83, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 83, 8, actR1C1Gross);
					
			System.out.println("******************* checkGrossBySelectingStandardRateItemInSecondRowPurchaseVoucherBody  ****************************");
			System.out.println("Entry Page Save Gross Value Actual  : "+actR1C1Gross   +" Value Expected : "+expR1C1Gross);	
											
			if(actR1C1Gross.equalsIgnoreCase(expR1C1Gross) )
			{
				System.out.println("Test Pass :Gross Value Is Updated ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 80, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Gross Value is Not Updated ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 80, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 80, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
	   	 	return false;
		}
		}
		
		
		
		public boolean checkVATValueBySelectingStandardRateItemInSecondRowPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_14thColumn));
			select2ndRow_14thColumn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvVat));
			enter_PvVat.click();
			
			enter_PvVat.sendKeys(Keys.TAB);
			
			String actR1C1VAT =select2ndRow_14thColumn.getText();			
			String expR1C1VAT =excelReader.getCellData("PurchaseVoucherVAT", 85, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 85, 8, actR1C1VAT);
					
			System.out.println("*********************************************** checkVATValueBySelectingStandardRateItemInSecondRowPurchaseVoucherBody  ********************************************");
			System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1VAT   +" Value Expected : "+expR1C1VAT);	

			
			if(actR1C1VAT.equalsIgnoreCase(expR1C1VAT))
			{
				System.out.println("Test Pass : Displayed VAT");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 84, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Not Displayed VAT");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 84, 9, resFail);
				return false;
			}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 84, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
			}
		}
		
		
		
		public boolean checkTaxableValueBySelectingStandardRateItemInSecondRowPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxable));
			enter_PvTaxable.click();
			enter_PvTaxable.sendKeys(Keys.TAB);
					
			
			String actR1C1Taxable =select2ndRow_15thColumn.getText();			
			String expR1C1Taxable =excelReader.getCellData("PurchaseVoucherVAT", 87, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 87, 8, actR1C1Taxable);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			String expMessage	= excelReader.getCellData("PurchaseVoucherVAT", 86, 7);
			String actMessage	=checkValidationMessage(expMessage);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 86, 8, actMessage);

			
			
			System.out.println("************** checkTaxableValueBySelectingStandardRateItemInSecondRowPurchaseVoucherBody  **************************");
			System.out.println("Entry Page Taxable Value Actual  : "+actR1C1Taxable   +" Value Expected : "+expR1C1Taxable);	
			System.out.println("Message Displayed As Clcik On SAve Without Batch Value   : "+actMessage   +" Value Expected : "+expMessage);
											
			if(actR1C1Taxable.equalsIgnoreCase(expR1C1Taxable)  && actMessage.equalsIgnoreCase(expMessage))
			{
				System.out.println("Test Pass : Taxable Data is Updated and Message is Displayed in Row");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 86, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : TaxABLE Data is Not Updated ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 86, 9, resFail);
				return false;
			}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 86, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
			}
		}
		
		
		public boolean checkBatchValueInSecondRowPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		   try
		   {
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_16thColumn));	
			select2ndRow_16thColumn.click();
			   
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.click();
			enter_Batch.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 89, 6));

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			String expMessage	= excelReader.getCellData("PurchaseVoucherVAT", 88, 7);
			String actMessage	=checkValidationMessage(expMessage);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 88, 8, actMessage);
			
			
			String actBatchName=select2ndRow_16thColumn.getText();
			String expBatchName=excelReader.getCellData("PurchaseVoucherVAT", 89, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 89, 8, actBatchName);
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_18thColumn));
	        select2ndRow_18thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
			enter_Expirydate.click();
			enter_Expirydate.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_18thColumn));
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
			Date date=new Date();
			System.out.println(df.format(date));
			
			String actCurrentDate =select2ndRow_18thColumn.getText();	
			String expCurrentDate = df.format(date);
	      
			System.out.println("****************************checkBatchValueInSecondRowPurchaseVoucherBody*************************************");
			
			System.out.println("Entry Page Current Date  Value Actual  : "+actCurrentDate   +" Value Expected : "+expCurrentDate);
			System.out.println("Entry Page Validation Message          : "+actMessage       +" Value Expected : "+expMessage);
			System.out.println("Entry Page Batch Name  Value Actual    : "+actBatchName   +" Value Expected : "+expBatchName);
											
			if(actMessage.equalsIgnoreCase(expMessage) && actCurrentDate.equalsIgnoreCase(expCurrentDate) && actBatchName.equalsIgnoreCase(expBatchName) )
			{
				System.out.println("Test Pass : Batch Value Entered into Second Row");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 88, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Batch Value Not  Entered into Second Row");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 88, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		 {
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 88, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
	   	 	return false;
		  }
		}

		
		
		public boolean checkTaxCodeBySelectingStandardRateItemInThirdRowOfPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
			select3rdRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
			enter_WarehouseTxt.click();
			enter_WarehouseTxt.sendKeys(Keys.END);
			enter_WarehouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			enter_WarehouseTxt.sendKeys(Keys.SPACE);
			
			int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
			for (int i = 0; i < pvvGridWarehouseListCount; i++) 
			{
				String warehouse=pvvGridWarehouseList.get(i).getText();
				if (warehouse.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 91, 6))) 
				{
					pvvGridWarehouseList.get(i).click();
					break;
				}
			}
	        enter_WarehouseTxt.sendKeys(Keys.TAB);
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.click();
			enter_ItemTxt.sendKeys(Keys.SPACE);
	        int pvvGridItemListCount=pvvGridItemList.size();
			for (int i = 0; i < pvvGridItemListCount; i++) 
			{
				String Item=pvvGridItemList.get(i).getText();
				if (Item.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 92, 6))) 
				{
					pvvGridItemList.get(i).click();
					break;
				}
			}
			enter_ItemTxt.sendKeys(Keys.TAB);
	        
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_5thColumn));
			select3rdRow_5thColumn.click();
								
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_9thColumn));
			select3rdRow_9thColumn.click();
							
			String actWarehouse=select3rdRow_1stColumn.getText();
			String expWarehouse=excelReader.getCellData("PurchaseVoucherVAT", 91, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 91, 8, actWarehouse);
							
			String actItem=select3rdRow_2ndColumn.getText();
			String expItem=excelReader.getCellData("PurchaseVoucherVAT", 92, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 92, 8, actWarehouse);
						
			String actTaxCode=select3rdRow_3rdColumn.getText();
			String expTaxCode=excelReader.getCellData("PurchaseVoucherVAT", 93, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 93, 8, actWarehouse);
			
			String actPurchaseAccount=select1stRow_4thColumn.getText();
			String expPurchaseAccount=excelReader.getCellData("PurchaseVoucherVAT", 90, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 90, 8, actPurchaseAccount);
			
			
			String actUnits=select3rdRow_5thColumn.getText();
			String expUnits=excelReader.getCellData("PurchaseVoucherVAT", 94, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 94, 8, actWarehouse);
			
			System.out.println("**********************checkTaxCodeBySelectingStandardRateItemInThirdRowOfPurchaseVoucherBody**************");
			
			System.out.println("WAREHOUSE      :"+actWarehouse		+" Value Expected : "+expWarehouse);
			System.out.println("ITEM           :"+actItem		    +" Value Expected : "+expItem);
			System.out.println("Tax Code       :"+actTaxCode		+" Value Expected : "+expTaxCode);
			System.out.println("UNITS          :"+actUnits		    +" Value Expected : "+expUnits);
			System.out.println("PurchaseAccount     :"+actPurchaseAccount 		    +" Value Expected : "+expPurchaseAccount );
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_9thColumn));
			select3rdRow_9thColumn.click();
			
			if(actTaxCode.equalsIgnoreCase(expTaxCode)  && actWarehouse.equalsIgnoreCase(expWarehouse) && 
					actItem.equalsIgnoreCase(expItem) && actUnits.equalsIgnoreCase(expUnits)  && actPurchaseAccount.equalsIgnoreCase(expPurchaseAccount))
			{
				System.out.println("Test Pass : Data Entered in Third  Row");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 90, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Data NOT Entered in Third Row");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 90, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 90, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
	   	 	return false;
		}
		}
		

		

		// Item General Tab
		@FindBy(xpath = "//*[@id='divBtnGroup0']/div/a")
		private static WebElement ItemNewnewGeneralBtn;

		// Item Units Tab
		@FindBy(xpath = "//*[@id='divBtnGroup1']/div/a")
		private static WebElement ItemNewUnitsBtn;

		// Master Item Settings
		@FindBy(xpath = "//*[@id='divBtnGroup2']/div/a")
		private static WebElement ItemNewSettingsBtn;

	    // Master Item Classification
		@FindBy(xpath = "//*[@id='divBtnGroup3']/div/a")
		private static WebElement ItemNewClassificationBtn;
		// Master Item Replenishment
		@FindBy(xpath = "//*[@id='divBtnGroup5']/div/a")
		private static WebElement ItemNewReplenishmentBtn;

		// Master Item Other Details
		@FindBy(xpath = "//*[@id='divBtnGroup4']/div/a")
		private static WebElement ItemNewOtherDetailsBtn;

		// OutLet Elements
		@FindBy(xpath = "//*[@id='divBtnGroup7']/div/a")
		private static WebElement ItemNewOutletBtn;

		@FindBy(xpath = "//a[contains(text(),'Create Tab')]")
		public static WebElement itemNewCreateTab;

		@FindBy(xpath = "//*[@id='TaxCategory']")
		public static WebElement taxCategorySelect;
		
		@FindBy(xpath = "//div[@id='GenerateNewMasterModel']//button[2]")
		public static WebElement saveItemMaster;

		
		public boolean checkAvGRateAndAVGRateOBySelectingStandardRateBatchItemInThirdRowPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_6thColumn));
			select3rdRow_6thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_7thColumn));
			select3rdRow_7thColumn.click();
			
							
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_8thColumn));
			select3rdRow_8thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_9thColumn));
			select3rdRow_9thColumn.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_7thColumn));
			String actR1C1AVGRate =select3rdRow_7thColumn.getText();			
			String expR1C1AVGRate =excelReader.getCellData("PurchaseVoucherVAT", 96, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 96, 8, actR1C1AVGRate);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_8thColumn));
			String actR1C1AVGRateO =select3rdRow_8thColumn.getText();			
			String expR1C1AVGRateO =excelReader.getCellData("PurchaseVoucherVAT", 97, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 97, 8, actR1C1AVGRateO);
					
					
			System.out.println("********* checkAvGRateAndAVGRateOBySelectingStandardRateBatchItemInThirdRowPurchaseVoucherBody  *************************");
			System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1AVGRate   +" Value Expected : "+expR1C1AVGRate);	
			System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1AVGRateO   +" Value Expected : "+expR1C1AVGRateO);
											
			if(actR1C1AVGRate.equalsIgnoreCase(expR1C1AVGRate) && actR1C1AVGRateO.equalsIgnoreCase(expR1C1AVGRateO) )
			{
				System.out.println("Test Pass :Avg Rate is Updated");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 95, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Avg rate is Not Updated ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 95, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 95, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
	   	 	return false;
		}
		}
		
		
		
		
		
		public boolean checkGrossBySelectingStandardRateItemInThirdRowPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.click();
			enter_Quantity.clear();
			enter_Quantity.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 99, 6));
			enter_Quantity.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.click();
			enter_Rate.clear();
			enter_Rate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 100, 6));
			enter_Rate.sendKeys(Keys.TAB);
							
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.click();
			enter_Gross.sendKeys(Keys.TAB);

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_12thColumn));
			String actR1C1Gross =select3rdRow_12thColumn.getText();			
			String expR1C1Gross =excelReader.getCellData("PurchaseVoucherVAT", 101, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 101, 8, actR1C1Gross);		
			
			System.out.println("*********** checkGrossBySelectingStandardRateItemInThirdRowPurchaseVoucherBody  **************************");
			System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1Gross   +" Value Expected : "+expR1C1Gross);	
											
			if(actR1C1Gross.equalsIgnoreCase(expR1C1Gross) )
			{
				System.out.println("Test Pass : Gross Value iS updated in Third Row");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 98, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Gross Value is Not Updated ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 98, 9, resFail);
				return false;
			}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 98, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
			}
		}
		
		
		
		public boolean checkVATValueBySelectingStandardRateItemInThirdRowPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_14thColumn));
			select3rdRow_14thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvVat));
			enter_PvVat.click();
			enter_PvVat.sendKeys(Keys.TAB);
			
			String actR3C1VAT =select3rdRow_14thColumn.getText();			
			String expR3C1VAT =excelReader.getCellData("PurchaseVoucherVAT", 103, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 103, 8, actR3C1VAT);
					
			System.out.println("******************* checkVATValueBySelectingStandardRateItemInThirdRowPurchaseVoucherBody  *********************");
			System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR3C1VAT   +" Value Expected : "+expR3C1VAT);	

			
			if(actR3C1VAT.equalsIgnoreCase(expR3C1VAT))
			{
				System.out.println("Test Pass : Entered VAT Value");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 102, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail :  Not Entered VAT Value");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 102, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 102, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
	   	 	return false;
		}
		}
		
		
		
		public boolean checkTaxableValueBySelectingStandardRateItemInThirdRowPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		     try
		     {
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxable));
			enter_PvTaxable.click();
			enter_PvTaxable.sendKeys(Keys.TAB);
					
			
			String actR1C1Taxable =select3rdRow_15thColumn.getText();			
			String expR1C1Taxable =excelReader.getCellData("PurchaseVoucherVAT", 105, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 105, 8, actR1C1Taxable);
		
			
			System.out.println("**************** checkTaxableValueBySelectingStandardRateItemInThirdRowPurchaseVoucherBody  **************************");
			System.out.println("Entry Page Taxable Input Value Actual  : "+actR1C1Taxable   +" Value Expected : "+expR1C1Taxable);	
											
			if(actR1C1Taxable.equalsIgnoreCase(expR1C1Taxable) )
			{
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 104, 9, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 104, 9, resFail);
				return false;
			}
		     }
		     catch (Exception e) 
		 	{
		 		String exception =e.getMessage();
		 		excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 104, 10, exception);
		 		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
	    	 	return false;
		 	}
		}
		
		
		public boolean checkBatchValueInThirdRowPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.click();
			enter_Batch.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 107, 6));
			

	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_18thColumn));
	        select3rdRow_18thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
			enter_Expirydate.click();
			enter_Expirydate.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_16thColumn));
			
			String actR1C1Batch =select3rdRow_16thColumn.getText();			
			String expR1C1Batch=excelReader.getCellData("PurchaseVoucherVAT", 107, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 107, 8, actR1C1Batch);
			
			
			System.out.println("***************** checkBatchValueInThirdRowPurchaseVoucherBody  ********************************************");
			System.out.println("Third Row Batch  Value Actual  : "+actR1C1Batch   +" Value Expected : "+expR1C1Batch);	
											
			if(actR1C1Batch.equalsIgnoreCase(expR1C1Batch) )
			{
				System.out.println("Test Pass :Entered Batch Value ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 106, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail :  NOt Entered Batch Value ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 106, 9, resFail);
				return false;
			}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 106, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
			}
		}
		
		
		
		
		public boolean checkUpdateItemSettingsAsZeroInFourthRowOfPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		try
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_1stColumn));
			select4thRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
			enter_WarehouseTxt.click();
			enter_WarehouseTxt.sendKeys(Keys.END);
			enter_WarehouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	        enter_WarehouseTxt.sendKeys(Keys.SPACE);
			
			int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
			for (int i = 0; i < pvvGridWarehouseListCount; i++) 
			{
				String warehouse=pvvGridWarehouseList.get(i).getText();
				if (warehouse.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 109, 6))) 
				{
					pvvGridWarehouseList.get(i).click();
					break;
				}
			}
	        enter_WarehouseTxt.sendKeys(Keys.TAB);
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.SPACE);
	        int pvvGridItemListCount=pvvGridItemList.size();
			for (int i = 0; i < pvvGridItemListCount; i++) 
			{
				String Item=pvvGridItemList.get(i).getText();
				if (Item.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 110, 6))) 
				{
					pvvGridItemList.get(i).click();
					break;
				}
			}
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_2ndColumn));
			select4thRow_2ndColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.click();
			Thread.sleep(2000);
			enter_ItemTxt.sendKeys(Keys.CONTROL + "e");
			
			boolean actGeneralTab        = ItemNewnewGeneralBtn.isDisplayed();
			boolean actUnitTab           = ItemNewUnitsBtn.isDisplayed();
			boolean actSettingsTab       = ItemNewSettingsBtn.isDisplayed();
			boolean actClassificationTab = ItemNewClassificationBtn.isDisplayed();
			boolean actOtherDetailsTab   = ItemNewOtherDetailsBtn.isDisplayed();
			boolean actReplenishmentTab  = ItemNewReplenishmentBtn.isDisplayed();
			boolean actOutletTab         = ItemNewOutletBtn.isDisplayed();
			//boolean actCreateTab         = itemNewCreateTab.isDisplayed();

			boolean expGeneralTab        = true;
			boolean expUnitTab           = true;
			boolean expSettingsTab       = true;
			boolean expClassificationTab = true;
			boolean expOtherDetailsTab   = true;
			boolean expReplenishmentTab  = true;
			boolean expOutletTab         = true;
			//boolean expCreateTab         = true;

			System.out.println("****************************************checkUpdateItemSettingsAsZeroInFourthRowOfPurchaseVoucherBody***************");
			System.out.println("************************************************** check Tabs Options  *************************************************************");

			System.out.println("General Tab Value Actual         :  " + actGeneralTab +        "  Value Expected :  " + expGeneralTab);
			System.out.println("Unit Tab Value Actual            :  " + actUnitTab +           "  Value Expected :  " + expUnitTab);
			System.out.println("Settings Tab Value Actual        :  " + actSettingsTab +       "  Value Expected :  " + expSettingsTab);
			System.out.println("Classification Tab Value Actual  :  " + actClassificationTab + "  Value Expected :  " + expClassificationTab);
			System.out.println("Other Details Tab Value Actual   :  " + actOtherDetailsTab +   "  Value Expected :  " + expOtherDetailsTab);
			System.out.println("Replenishment Tab Value Actual   :  " + actReplenishmentTab +  "  Value Expected :  " + expReplenishmentTab);
			System.out.println("Outlet Tab Value Actual          :  " + actOutletTab +         "  Value Expected :  " + expOutletTab);
			//System.out.println("Outlet Tab Value Actual          :  " + actCreateTab +         "  Value Expected :  " + expCreateTab);
				
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemNewSettingsBtn));
			ItemNewSettingsBtn.click();
						
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(taxCategorySelect));
			taxCategorySelect.click();
			
			taxCategorySelect.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 111, 6));
			
			taxCategorySelect.sendKeys(Keys.TAB);
							
			taxCategorySelect.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveItemMaster));
			saveItemMaster.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.click();
			Thread.sleep(2000);
			
			enter_ItemTxt.sendKeys(Keys.END);
			enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			enter_ItemTxt.sendKeys(Keys.SPACE);
	        
			for (int i = 0; i < pvvGridItemListCount; i++) 
			{
				String Item=pvvGridItemList.get(i).getText();
				if (Item.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 110, 6))) 
				{
					pvvGridItemList.get(i).click();
					break;
				}
			}
			enter_ItemTxt.sendKeys(Keys.TAB);
		
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_5thColumn));
			select4thRow_5thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_9thColumn));
			select4thRow_9thColumn.click();
			
			String actWarehouse=select4thRow_1stColumn.getText();
			String expWarehouse=excelReader.getCellData("PurchaseVoucherVAT", 109, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 109, 8, actWarehouse);
							
			String actItem=select4thRow_2ndColumn.getText();
			String expItem=excelReader.getCellData("PurchaseVoucherVAT", 110, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 110, 8, actItem);;
						
			
			String actTaxCode=select4thRow_3rdColumn.getText();
			String expTaxCode=excelReader.getCellData("PurchaseVoucherVAT", 111, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 111, 8, actTaxCode);
			
			String actPurchaseAccount=select4thRow_4thColumn.getText();
			String expPurchaseAccount=excelReader.getCellData("PurchaseVoucherVAT", 108, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 108, 8, actPurchaseAccount);
			
			String actUnits=select3rdRow_5thColumn.getText();
			String expUnits=excelReader.getCellData("PurchaseVoucherVAT", 112, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 112, 8, actUnits);
			
			System.out.println("******************* Values From Entry Page********************************************************");
			System.out.println("WAREHOUSE      :"+actWarehouse		+" Value Expected : "+expWarehouse);
			System.out.println("ITEM           :"+actItem		    +" Value Expected : "+expItem);
			System.out.println("UNITS          :"+actUnits		    +" Value Expected : "+expUnits);
			System.out.println("TAxcode          :"+actTaxCode		    +" Value Expected : "+expTaxCode);
			System.out.println("Purchase Account          :"+actPurchaseAccount		    +" Value Expected : "+expPurchaseAccount);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_20thColumn));
			select4thRow_20thColumn.click();
			
			enter_PvRemarks.sendKeys(Keys.TAB);
			
		    if(actWarehouse.equalsIgnoreCase(expWarehouse) && actItem.equalsIgnoreCase(expItem)  &&  
		    		actUnits.equalsIgnoreCase(expUnits)  && 
		    		actPurchaseAccount.equalsIgnoreCase(expPurchaseAccount))
			{
				System.out.println("Test Pass : Data Entered in Fourth Row");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 108, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Data NOT Entered in Fourth Row");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 108, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 108, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
	   	 	return false;
		}
		}

		
		
		
		 // Delete row For Bin Validation
		   public boolean checkPurchaseVoucherVATRowDelete() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		   {
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
			
			 try
			 {
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fourthRowIndex));
				fourthRowIndex.click();
					
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
				deleteRowBtn.click();
				
				Thread.sleep(2000);
				
				/*String actBinColumnR3GetText=select4thRow_2ndColumn.getText();
				System.out.println("actBinColumnR3GetText  :  "+actBinColumnR3GetText);*/
				
				boolean BinColumnAfterDeleteRow=select4thRow_2ndColumn.getText().isEmpty();
				
				String actBinColumnAfterDeleteRow=Boolean.toString(BinColumnAfterDeleteRow);
				
				/*String expBinColumnAfterDeleteRow=excelReader.getCellData("PurchaseVoucherVAT", 114, 7);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 114, 8, actBinColumnAfterDeleteRow.toUpperCase());
				*/
			    
				
				boolean expBinColumnAfterDeleteRow=true;
				
				
	            System.out.println("*****************************checkPurchaseVoucherVATRowDelete*************************************");
				System.out.println("Bin Column after Delete Row Value Actual     :  " + actBinColumnAfterDeleteRow +   " Value Expected : " + expBinColumnAfterDeleteRow);
					
				if(BinColumnAfterDeleteRow==expBinColumnAfterDeleteRow)
				{
					System.out.println("Test Pass  deleted row Working  ");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 113, 9, resPass);
					return true;			
				}
				else
				{
					System.out.println("Test Fail Not Deleted Row");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 113, 9, resFail);
					return false;
				}
			  }
			  catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 113, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			   	 	return false;
				}
		   }
		

		   public boolean checkTaxCodeBySelectingStandardRateItemInFourthRowOfPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				Thread.sleep(2000);
				System.err.println("1");
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_1stColumn));
				select4thRow_1stColumn.click();
				System.err.println("2");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
				enter_WarehouseTxt.click();
				enter_WarehouseTxt.sendKeys(Keys.END);
				enter_WarehouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
				enter_WarehouseTxt.sendKeys(Keys.SPACE);
				System.err.println("3");
				int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
				
				for (int i = 0; i < pvvGridWarehouseListCount; i++) 
				{
					String warehouse=pvvGridWarehouseList.get(i).getText();
					if (warehouse.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 116, 6))) 
					{
						pvvGridWarehouseList.get(i).click();
						break;
					}
				}
		        enter_WarehouseTxt.sendKeys(Keys.TAB);
					
		        System.err.println("3");
		        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
				enter_ItemTxt.click();
				enter_ItemTxt.sendKeys(Keys.SPACE);
		        int pvvGridItemListCount=pvvGridItemList.size();
				for (int i = 0; i < pvvGridItemListCount; i++) 
				{
					String Item=pvvGridItemList.get(i).getText();
					if (Item.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 117, 6))) 
					{
						pvvGridItemList.get(i).click();
						break;
					}
				}
				enter_ItemTxt.sendKeys(Keys.TAB);
			
				System.err.println("4");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
				
			    enter_PvTaxCode.click();
			        
			 /*   enter_PvTaxCode.sendKeys(Keys.SHIFT,Keys.HOME,Keys.BACK_SPACE);
			    Thread.sleep(1000);
			        
			    enter_PvTaxCode.sendKeys(Keys.BACK_SPACE);
			        
			    enter_PvTaxCode.sendKeys(Keys.SHIFT,Keys.HOME);
			        
			    enter_PvTaxCode.sendKeys(Keys.SPACE);
			        
			    int pvvGridTaxCodeListCount=pvvGridTaxCodeList.size(); 
			        
			    System.err.println("pvvGridTaxCodeListCount "+pvvGridTaxCodeListCount);
			        
				for (int i = 0; i < pvvGridTaxCodeListCount; i++) 
				{
					String Taxable=pvvGridTaxCodeList.get(i).getText();
						
					if (Taxable.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 118, 6))) 
					{
						pvvGridTaxCodeList.get(i).click();
						break;
					}
				}
			    enter_PvTaxCode.sendKeys(Keys.TAB);*/
				
			    System.err.println("5");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_5thColumn));
				select4thRow_5thColumn.click();
									
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_9thColumn));
				select4thRow_9thColumn.click();
								
				System.err.println("6");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_1stColumn));
				String actWarehouse=select4thRow_1stColumn.getText();
				String expWarehouse=excelReader.getCellData("PurchaseVoucherVAT", 116, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 116, 8, actWarehouse);
				System.err.println("7");		
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_2ndColumn));
				String actItem=select4thRow_2ndColumn.getText();
				String expItem=excelReader.getCellData("PurchaseVoucherVAT", 117, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 117, 8, actItem);
				System.err.println("8");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_3rdColumn));
				String actTaxCode=select4thRow_3rdColumn.getText();
				String expTaxCode=excelReader.getCellData("PurchaseVoucherVAT", 118, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 118, 8, actTaxCode);
				System.err.println("9");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_4thColumn));
				String actPurchaseAccount=select4thRow_4thColumn.getText();
				String expPurchaseAccount=excelReader.getCellData("PurchaseVoucherVAT", 115, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 115, 8, actPurchaseAccount);
				
				System.err.println("10");
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_5thColumn));
				System.err.println("11");
				String actUnits=select4thRow_5thColumn.getText();
				System.err.println("12");
				String expUnits=excelReader.getCellData("PurchaseVoucherVAT", 119, 7);
				System.err.println("13");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 119, 8, actUnits);
				
				System.out.println("************************************checkTaxCodeBySelectingStandardRateItemInFourthRowOfPurchaseVoucherBody*************");
				
				System.out.println("Warehouse       : " + actWarehouse	+ " Value Expected : "+expWarehouse);
				System.out.println("Item            : " + actItem		+ " Value Expected : "+expItem);
				System.out.println("TaxCode         : " + actTaxCode	+ " Value Expected : "+expTaxCode);
				System.out.println("Units           : " + actUnits		+ " Value Expected : "+expUnits);
			    System.out.println("PurchaseAccount         :  "+actPurchaseAccount+ " Value Expected : "+expPurchaseAccount);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_9thColumn));
				select4thRow_9thColumn.click();
				
				if(actTaxCode.equalsIgnoreCase(expTaxCode) && actWarehouse.equalsIgnoreCase(expWarehouse) && 
						actItem.equalsIgnoreCase(expItem) && actUnits.equalsIgnoreCase(expUnits) && actPurchaseAccount.equalsIgnoreCase(expPurchaseAccount))
				{
					System.out.println("Test Pass : Data Entered in Fourth Row");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 115, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Data NOT Entered in Fourth Row");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 115, 9, resFail);
					return false;
				}
			}
		   catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 115, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
			}
			}


		
		   public boolean checkAvGRateAndAVGRateOBySelectingBinItemInFourthRowPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		   {
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
			{
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_6thColumn));
				select4thRow_6thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_7thColumn));
				select4thRow_7thColumn.click();
				
								
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_8thColumn));
				select4thRow_8thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_9thColumn));
				select4thRow_9thColumn.click();
						
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_7thColumn));
				String actR1C1AVGRate = select4thRow_7thColumn.getText();			
				String expR1C1AVGRate = excelReader.getCellData("PurchaseVoucherVAT", 121, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 121, 8, actR1C1AVGRate);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_8thColumn));
				String actR1C1AVGRateO = select4thRow_8thColumn.getText();			
				String expR1C1AVGRateO = excelReader.getCellData("PurchaseVoucherVAT", 122, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 122, 8, actR1C1AVGRateO);
						
				System.out.println("********************** checkAvGRateAndAVGRateOBySelectingBinItemInFourthRowPurchaseVoucherBody  *****************");
				
				System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1AVGRate   +" Value Expected : "+expR1C1AVGRate);	
				System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1AVGRateO   +" Value Expected : "+expR1C1AVGRateO);
												
				if(actR1C1AVGRate.equalsIgnoreCase(expR1C1AVGRate)  && actR1C1AVGRateO.equalsIgnoreCase(expR1C1AVGRateO) )
				{
					System.out.println("Test Pass :Displayed AVg Rate ");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 120, 9, resPass);
					return true;
				}
				else
				{
					
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 120, 9, resFail);
					return false;
				}
		   }

	           catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 120, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			   	 	return false;
				}
			}
			

			
			public boolean checkGrossBySelectingStandardRateItemInFourthRowPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
				enter_Quantity.click();
				enter_Quantity.clear();
				enter_Quantity.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 124, 6));
				enter_Quantity.sendKeys(Keys.TAB);
				
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
				enter_Rate.click();
				enter_Rate.clear();
				enter_Rate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 125, 6));
				enter_Rate.sendKeys(Keys.TAB);
								
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
				enter_Gross.click();
				enter_Gross.sendKeys(Keys.TAB);

				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_12thColumn));
				String actR1C1Gross =select4thRow_12thColumn.getText();			
				String expR1C1Gross =excelReader.getCellData("PurchaseVoucherVAT", 126, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 126, 8, actR1C1Gross);
						
				System.out.println("********************* checkGrossBySelectingStandardRateItemInFourthRowPurchaseVoucherBody  *********************************");
				System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1Gross   +" Value Expected : "+expR1C1Gross);	
												
				if(actR1C1Gross.equalsIgnoreCase(expR1C1Gross) )
				{
					System.out.println("Test Pass : Gross is Updated ");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 123, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Gross is Not Updated");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 123, 9, resFail);
					return false;
				}
				}

	            catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 123, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			   	 	return false;
				}
			}
		
			public boolean checkVATValueBySelectingStandardRateItemInFourthRowPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		         try
		         {
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_14thColumn));
				select4thRow_14thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvVat));
				enter_PvVat.click();
				enter_PvVat.sendKeys(Keys.TAB);
				
				
				String actR1C1VAT =select4thRow_14thColumn.getText();			
				String expR1C1VAT =excelReader.getCellData("PurchaseVoucherVAT", 128, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 128, 8, actR1C1VAT);
						
				System.out.println("******** checkVATValueBySelectingStandardRateItemInFourthRowPurchaseVoucherBody  ********************************************");
				System.out.println("Entry Page VAT Value Actual  : "+actR1C1VAT   +" Value Expected : "+expR1C1VAT);	

				
				if(actR1C1VAT.equalsIgnoreCase(expR1C1VAT))
				{
					System.out.println("Test Pass : Pv VAT Value IS Updated ");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 127, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : PV Vat Value IS Not Upadated ");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 127, 9, resFail);
					return false;
				}
		         }
		         catch (Exception e) 
					{
						String exception =e.getMessage();
						excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 127, 10, exception);
						System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				   	 	return false;
					}
			}
			
			
			
			public boolean checkTaxableValueBySelectingStandardRateItemInFourthRowPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxable));
				enter_PvTaxable.click();
				enter_PvTaxable.sendKeys(Keys.TAB);
						
				String actR1C1Taxable =select4thRow_15thColumn.getText();			
				String expR1C1Taxable =excelReader.getCellData("PurchaseVoucherVAT", 130, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 130, 8, actR1C1Taxable);
				
				System.out.println("*************************** checkTaxableValueBySelectingStandardRateItemInFourthRowPurchaseVoucherBody  *************************");
				System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1Taxable   +" Value Expected : "+expR1C1Taxable);	
												
				if(actR1C1Taxable.equalsIgnoreCase(expR1C1Taxable) )
				{
					System.out.println("Test Pass :Taxable Value is Updated ");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 129, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail :Taxable Value is  not Updated");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 129, 9, resFail);
					return false;
				}
			}

	          catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 129, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			   	 	return false;
				}
			}
			
			
			
			

			@FindBy(xpath="//*[@id='id_transaction_bins_grid_row_heading']/th/div[1]")
			private static List<WebElement> binPopupGridLabel;
			
			public boolean checkBinPopUpPageInFourthRowPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
			  excelReader=new ExcelReader(POJOUtility.getExcelPath());
			  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
			  try
			  {
				  
				int binPopupGridLabelCount = binPopupGridLabel.size();
					
				ArrayList<String> binPopupGridLabelArray = new ArrayList<String>();
				
				for(int i=0;i<binPopupGridLabelCount;i++)
				{
					String data = binPopupGridLabel.get(i).getText();
					binPopupGridLabelArray.add(data);
				}
				
				
				String actbinPopupGridLabelList=binPopupGridLabelArray.toString();
				String expbinPopupGridLabelList=excelReader.getCellData("PurchaseVoucherVAT", 132, 7);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 132, 8, actbinPopupGridLabelList);
				
				System.out.println("actbinPopupGridLabel : " + actbinPopupGridLabelList);
				System.out.println("expbinPopupGridLabel : " + expbinPopupGridLabelList);
				  
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchTxt));		
				
				boolean actBinSearchTxt                = binSearchTxt.isDisplayed();
				boolean actBinSearchBtn                = binSearchBtn.isDisplayed();
				//boolean actBinAlternateCategory        = binAlternateCategoryCheckBtn.isDisplayed();
				boolean actBinAutoAllocateBtn          = binAutoAllocateBtn.isDisplayed();
				boolean actBinPickBtn                  = binPickBtn.isDisplayed();
				boolean actBinCancelBtn                = binCancelBtn.isDisplayed();
				boolean actBinOkBtn                    = binOkBtn.isEnabled();
						
				boolean expBinSearchTxt                = true;
				boolean expBinSearchBtn                = true;
				boolean expBinAlternateCategory        = true;
				boolean expBinAutoAllocateBtn          = true;
				boolean expBinPickBtn                  = true;
				boolean expBinCancelBtn                = true;
				boolean expBinOkBtn                    = true;
				System.out.println("**************************checkBinPopUpPageInFourthRowPurchaseVoucherBody************************************************");	
				
				System.out.println("Bin Search Value Actual                :  " + actBinSearchTxt +         " Value Expected : " + expBinSearchTxt);
				System.out.println("Bin Search Btn Value Actual            :  " + actBinSearchBtn +         " Value Expected : " + expBinSearchBtn);
				
				System.out.println("Bin Auto Allocate Btn Value Actual     :  " + actBinAutoAllocateBtn +   " Value Expected : " + expBinAutoAllocateBtn);
				System.out.println("Bin Pick Btn Value Actual              :  " + actBinPickBtn +           " Value Expected : " + expBinPickBtn);
				System.out.println("Bin Cancel Btn Value Actual            :  " + actBinCancelBtn +         " Value Expected : " + expBinCancelBtn);
				System.out.println("Bin Ok Btn Value Actual                :  " + actBinOkBtn +             " Value Expected : " + expBinOkBtn);
				
						
				String expBinNameValue                 = excelReader.getCellData("PurchaseVoucherVAT", 133, 7);
				String expBinStockValue                = excelReader.getCellData("PurchaseVoucherVAT", 134, 7);
				String expBinCapcityValue              = excelReader.getCellData("PurchaseVoucherVAT", 135, 7);
				String expBinLoadValue                 = excelReader.getCellData("PurchaseVoucherVAT", 136, 7);
				String expBinFreeSpace                 = excelReader.getCellData("PurchaseVoucherVAT", 137, 7);
				String expBinFreeQty                   = excelReader.getCellData("PurchaseVoucherVAT", 138, 7);
				String expBinToBeAllocated             = excelReader.getCellData("PurchaseVoucherVAT", 139, 7);
				
				
				String expBinTotalQty                  = excelReader.getCellData("PurchaseVoucherVAT", 140, 7);
				String expBinBaseUom                   = excelReader.getCellData("PurchaseVoucherVAT", 141, 7);
				String expBinBalanceQty                = excelReader.getCellData("PurchaseVoucherVAT", 142, 7);
				
				String expBinSum                       = excelReader.getCellData("PurchaseVoucherVAT", 143, 7);
									
				String actBinNameValue                 = binselect1stRow_2ndColumn.getText();	
				String actBinStockValue                = binselect1stRow_3rdColumn.getText();
				String actBinCapcityValue              = binselect1stRow_4thColumn.getText();
				String actBinLoadValue                 = binselect1stRow_5thColumn.getText();
				String actBinFreeSpace                 = binselect1stRow_6thColumn.getText();
				String actBinFreeQty                   = binselect1stRow_7thColumn.getText();
				String actBinToBeAllocated             = binselect1stRow_8thColumn.getText();
				

				String actBinTotalQty                  = binTotalQty.getAttribute("value");
				String actBinBaseUom                   = binBaseUOM.getText();
				String actBinBalanceQty                = binBalanceTxt.getAttribute("value");
				
				String actBinSum                       = binSumInward.getText();
										
				
				
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 133, 8, actBinNameValue);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 134, 8, actBinStockValue);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 135, 8, actBinCapcityValue);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 136, 8, actBinLoadValue);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 137, 8, actBinFreeSpace);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 138, 8, actBinFreeQty);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 139, 8, actBinToBeAllocated);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 140, 8, actBinTotalQty);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 141, 8, actBinBaseUom);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 142, 8, actBinBalanceQty);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 143, 8, actBinSum);
				
				
				System.out.println("Second Row Stock            :  " + actBinNameValue +        "  Value Expected : "  + expBinNameValue);
				System.out.println("Second Row Capacity         :  " + actBinStockValue +       "  Value Expected : "  + expBinStockValue);
				System.out.println("Second Row Load             :  " + actBinCapcityValue +     "  Value Expected : "  + expBinCapcityValue);
				System.out.println("Second Row Free Space       :  " + actBinLoadValue +        "  Value Expected : "  + expBinLoadValue);
				System.out.println("Second Row Free Qty         :  " + actBinFreeSpace +        "  Value Expected : "  + expBinFreeSpace);
				System.out.println("Second Row To Be Allocated  :  " + actBinFreeQty +          "  Value Expected : "  + expBinFreeQty);
				System.out.println("Second Row To Be Allocated  :  " + actBinToBeAllocated +    "  Value Expected : "  + expBinToBeAllocated);
				
				
				System.out.println("Bin Total Qty               :  " +actBinTotalQty +            "  Value Expected : "  + expBinTotalQty);
				System.out.println("Bin Base Uom                :  " +actBinBaseUom +             "  Value Expected : "  + expBinBaseUom);
				System.out.println("Bin Balance Txt             :  " +actBinBalanceQty +          "  Value Expected : "  + expBinBalanceQty);
				
				System.out.println("Bin Total To Be Adjusted    :  " + actBinSum +                "  Value Expected : "  + expBinSum);
				
			
						
				if(actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn /*&& actBinAlternateCategory==expBinAlternateCategory */
						&& actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn
						&& actBinOkBtn==expBinOkBtn
						
						&& actBinNameValue.equalsIgnoreCase(expBinNameValue) && actBinStockValue.equalsIgnoreCase(expBinStockValue) 
						&& actBinCapcityValue.equalsIgnoreCase(expBinCapcityValue) && actBinLoadValue.equalsIgnoreCase(expBinLoadValue)
						&& actBinFreeSpace.equalsIgnoreCase(expBinFreeSpace) && actBinFreeQty.equalsIgnoreCase(expBinFreeQty)
						&& actBinToBeAllocated.equalsIgnoreCase(expBinToBeAllocated)
								
						&& actBinTotalQty.equalsIgnoreCase(expBinTotalQty) && actBinBaseUom.equalsIgnoreCase(expBinBaseUom) 
						&& actBinBalanceQty.equalsIgnoreCase(expBinBalanceQty)
						
						&& actBinSum.equalsIgnoreCase(expBinSum))	
				{
					System.out.println("Selected Bin And Ok Btn Not Enabled");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 131, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Not Selected Bin And Ok Btn Not Enabled");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 131, 9, resFail);
					return false;
				}	
			  }
			  catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 131, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			   	 	return false;
				}
			}
			
			

			public boolean checkAutoAllocateOptionInBinPopupPageInFourthRowPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
			  excelReader=new ExcelReader(POJOUtility.getExcelPath());
			  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
			
				
			  try
			  {
				  
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
				binAutoAllocateBtn.click();
									  
				int binPopupGridLabelCount = binPopupGridLabel.size();
					
				ArrayList<String> binPopupGridLabelArray = new ArrayList<String>();
				
				for(int i=0;i<binPopupGridLabelCount;i++)
				{
					String data = binPopupGridLabel.get(i).getText();
					binPopupGridLabelArray.add(data);
				}
				
				
				String actbinPopupGridLabelList=binPopupGridLabelArray.toString();
				String expbinPopupGridLabelList=excelReader.getCellData("PurchaseVoucherVAT", 145, 7);;
				
				
				excelReader.setCellData(xlfile,"PurchaseVoucherVAT", 145, 8, actbinPopupGridLabelList);
				
				System.out.println("actbinPopupGridLabel : " + actbinPopupGridLabelList);
				System.out.println("expbinPopupGridLabel : " + expbinPopupGridLabelList);
				  
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchTxt));		
				
				boolean actBinSearchTxt                = binSearchTxt.isDisplayed();
				boolean actBinSearchBtn                = binSearchBtn.isDisplayed();
				//boolean actBinAlternateCategory        = binAlternateCategoryCheckBtn.isDisplayed();
				boolean actBinAutoAllocateBtn          = binAutoAllocateBtn.isDisplayed();
				boolean actBinPickBtn                  = binPickBtn.isDisplayed();
				boolean actBinCancelBtn                = binCancelBtn.isDisplayed();
				boolean actBinOkBtn                    = binOkBtn.isEnabled();
						
				boolean expBinSearchTxt                = true;
				boolean expBinSearchBtn                = true;
				boolean expBinAlternateCategory        = true;
				boolean expBinAutoAllocateBtn          = true;
				boolean expBinPickBtn                  = true;
				boolean expBinCancelBtn                = true;
				boolean expBinOkBtn                    = true;
					
				
				System.out.println("*********************checkAutoAllocateOptionInBinPopupPageInFourthRowPurchaseVoucherBody****************************");
				
				System.out.println("Bin Search Value Actual                :  " + actBinSearchTxt +         " Value Expected : " + expBinSearchTxt);
				System.out.println("Bin Search Btn Value Actual            :  " + actBinSearchBtn +         " Value Expected : " + expBinSearchBtn);
				/*System.out.println("Bin Alternate Category Value Actual    :  " + actBinAlternateCategory + " Value Expected : " + expBinAlternateCategory);*/
				System.out.println("Bin Auto Allocate Btn Value Actual     :  " + actBinAutoAllocateBtn +   " Value Expected : " + expBinAutoAllocateBtn);
				System.out.println("Bin Pick Btn Value Actual              :  " + actBinPickBtn +           " Value Expected : " + expBinPickBtn);
				System.out.println("Bin Cancel Btn Value Actual            :  " + actBinCancelBtn +         " Value Expected : " + expBinCancelBtn);
				System.out.println("Bin Ok Btn Value Actual                :  " + actBinOkBtn +             " Value Expected : " + expBinOkBtn);
				
				
				String expBinNameValue                 = excelReader.getCellData("PurchaseVoucherVAT", 146, 7);
				String expBinStockValue                = excelReader.getCellData("PurchaseVoucherVAT", 147, 7);
				String expBinCapcityValue              = excelReader.getCellData("PurchaseVoucherVAT", 148, 7);
				String expBinLoadValue                 = excelReader.getCellData("PurchaseVoucherVAT", 149, 7);
				String expBinFreeSpace                 = excelReader.getCellData("PurchaseVoucherVAT", 150, 7);
				String expBinFreeQty                   = excelReader.getCellData("PurchaseVoucherVAT", 151, 7);
				String expBinToBeAllocated             = excelReader.getCellData("PurchaseVoucherVAT", 152, 7);
				
				
				String expBinTotalQty                  = excelReader.getCellData("PurchaseVoucherVAT", 153, 7);
				String expBinBaseUom                   = excelReader.getCellData("PurchaseVoucherVAT", 154, 7);
				String expBinBalanceQty                = excelReader.getCellData("PurchaseVoucherVAT", 155, 7);
				
				String expBinSum                       = excelReader.getCellData("PurchaseVoucherVAT", 156, 7);
								
				String actBinNameValue                 = binselect1stRow_2ndColumn.getText();	
				String actBinStockValue                = binselect1stRow_3rdColumn.getText();
				String actBinCapcityValue              = binselect1stRow_4thColumn.getText();
				String actBinLoadValue                 = binselect1stRow_5thColumn.getText();
				String actBinFreeSpace                 = binselect1stRow_6thColumn.getText();
				String actBinFreeQty                   = binselect1stRow_7thColumn.getText();
				String actBinToBeAllocated             = binselect1stRow_8thColumn.getText();
				

				String actBinTotalQty                  = binTotalQty.getAttribute("value");
				String actBinBaseUom                   = binBaseUOM.getText();
				String actBinBalanceQty                = binBalanceTxt.getAttribute("value");
				
				String actBinSum                       = binSumInward.getText();
										
				
				
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 146, 8, actBinNameValue);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 147, 8, actBinStockValue);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 148, 8, actBinCapcityValue);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 149, 8, actBinLoadValue);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 150, 8, actBinFreeSpace);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 151, 8, actBinFreeQty);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 152, 8, actBinToBeAllocated);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 153, 8, actBinTotalQty);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 154, 8, actBinBaseUom);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 155, 8, actBinBalanceQty);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 156, 8, actBinSum);
				
				
				System.out.println("Second Row Stock            :  " + actBinNameValue +        "  Value Expected : "  + expBinNameValue);
				System.out.println("Second Row Capacity         :  " + actBinStockValue +       "  Value Expected : "  + expBinStockValue);
				System.out.println("Second Row Load             :  " + actBinCapcityValue +     "  Value Expected : "  + expBinCapcityValue);
				System.out.println("Second Row Free Space       :  " + actBinLoadValue +        "  Value Expected : "  + expBinLoadValue);
				System.out.println("Second Row Free Qty         :  " + actBinFreeSpace +        "  Value Expected : "  + expBinFreeSpace);
				System.out.println("Second Row To Be Allocated  :  " + actBinFreeQty +          "  Value Expected : "  + expBinFreeQty);
				System.out.println("Second Row To Be Allocated  :  " + actBinToBeAllocated +    "  Value Expected : "  + expBinToBeAllocated);
				
				
				System.out.println("Bin Total Qty               :  " +actBinTotalQty +            "  Value Expected : "  + expBinTotalQty);
				System.out.println("Bin Base Uom                :  " +actBinBaseUom +             "  Value Expected : "  + expBinBaseUom);
				System.out.println("Bin Balance Txt             :  " +actBinBalanceQty +          "  Value Expected : "  + expBinBalanceQty);
				
				System.out.println("Bin Total To Be Adjusted    :  " + actBinSum +                "  Value Expected : "  + expBinSum);
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_7thColumn));
						
				if(actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn/* && actBinAlternateCategory==expBinAlternateCategory*/ 
						&& actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn
						&& actBinOkBtn==expBinOkBtn
						
						&& actBinNameValue.equalsIgnoreCase(expBinNameValue) && actBinStockValue.equalsIgnoreCase(expBinStockValue) 
						&& actBinCapcityValue.equalsIgnoreCase(expBinCapcityValue) && actBinLoadValue.equalsIgnoreCase(expBinLoadValue)
						&& actBinFreeSpace.equalsIgnoreCase(expBinFreeSpace) && actBinFreeQty.equalsIgnoreCase(expBinFreeQty)
						&& actBinToBeAllocated.equalsIgnoreCase(expBinToBeAllocated)
								
						&& actBinTotalQty.equalsIgnoreCase(expBinTotalQty) && actBinBaseUom.equalsIgnoreCase(expBinBaseUom) 
						&& actBinBalanceQty.equalsIgnoreCase(expBinBalanceQty)
						
						&& actBinSum.equalsIgnoreCase(expBinSum))	
				{
					System.out.println("Selected Bin And Ok Btn Not Enabled");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 144, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Not Selected Bin And Ok Btn Not Enabled");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 144, 9, resFail);
					return false;
				}	
			  }
			  catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 144, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			   	 	return false;
				}
			
			}
			
			


			public boolean checkCancelOptionInBinPopUpPageInFourthRowPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
			  excelReader=new ExcelReader(POJOUtility.getExcelPath());
			  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
			  try
			  {
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binCancelBtn));
			  binCancelBtn.click();
				
			  
			    String actWarehouse=select4thRow_1stColumn.getText();
				String expWarehouse=excelReader.getCellData("PurchaseVoucherVAT", 158, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 158, 8, actWarehouse);
								
				String actItem=select4thRow_2ndColumn.getText();
				String expItem=excelReader.getCellData("PurchaseVoucherVAT", 159, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 159, 8, actItem);
							
				String actTaxCode=select4thRow_3rdColumn.getText();
				String expTaxCode=excelReader.getCellData("PurchaseVoucherVAT", 160, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 160, 8, actTaxCode);
				
				String actUnits=select4thRow_5thColumn.getText();
				String expUnits=excelReader.getCellData("PurchaseVoucherVAT", 161, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 161, 8, actUnits);
				

				System.out.println("************************************checkCancelOptionInBinPopUpPageInFourthRowPurchaseVoucherBody*************");
				
				System.out.println("Warehouse       : " + actWarehouse	+ " Value Expected : "+expWarehouse);
				System.out.println("Item            : " + actItem		+ " Value Expected : "+expItem);
				System.out.println("TaxCode         : " + actTaxCode	+ " Value Expected : "+expTaxCode);
				System.out.println("Units           : " + actUnits		+ " Value Expected : "+expUnits);
			
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_12thColumn));
				String actR1C1Gross =select4thRow_12thColumn.getText();			
				String expR1C1Gross =excelReader.getCellData("PurchaseVoucherVAT", 162, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 162, 8, actR1C1Gross);
			  
				if(actWarehouse.equalsIgnoreCase(expWarehouse) && actR1C1Gross.equalsIgnoreCase(expR1C1Gross))	
				{
					System.out.println("Test Pass: Cancel Button in Bin POp up");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 157, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail: Cancel Option in Bin Pop Up");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 157, 9, resFail);
					return false;
				}	
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 157, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
			}
			}
			
			
			public boolean checkBinPopUpPageAfterClickOnCancelAndClickOnBinInFourthRowPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
			  excelReader=new ExcelReader(POJOUtility.getExcelPath());
			  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
			  
				Thread.sleep(2000);
			  try
			  {
					
			    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Bin));
			    enter_Bin.click();
			    enter_Bin.sendKeys(Keys.SPACE);
				  
				  
				int binPopupGridLabelCount = binPopupGridLabel.size();
					
				ArrayList<String> binPopupGridLabelArray = new ArrayList<String>();
				
				for(int i=0;i<binPopupGridLabelCount;i++)
				{
					String data = binPopupGridLabel.get(i).getText();
					binPopupGridLabelArray.add(data);
				}
				
				
				String actbinPopupGridLabelList=binPopupGridLabelArray.toString();
				String expbinPopupGridLabelList=excelReader.getCellData("PurchaseVoucherVAT", 164, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 164, 8, actbinPopupGridLabelList);
				
				System.out.println("actbinPopupGridLabel : " + actbinPopupGridLabelList);
				System.out.println("expbinPopupGridLabel : " + expbinPopupGridLabelList);
				  
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchTxt));		
				
				boolean actBinSearchTxt                = binSearchTxt.isDisplayed();
				boolean actBinSearchBtn                = binSearchBtn.isDisplayed();
				//boolean actBinAlternateCategory        = binAlternateCategoryCheckBtn.isDisplayed();
				boolean actBinAutoAllocateBtn          = binAutoAllocateBtn.isDisplayed();
				boolean actBinPickBtn                  = binPickBtn.isDisplayed();
				boolean actBinCancelBtn                = binCancelBtn.isDisplayed();
				boolean actBinOkBtn                    = binOkBtn.isEnabled();
						
				boolean expBinSearchTxt                = true;
				boolean expBinSearchBtn                = true;
				boolean expBinAlternateCategory        = true;
				boolean expBinAutoAllocateBtn          = true;
				boolean expBinPickBtn                  = true;
				boolean expBinCancelBtn                = true;
				boolean expBinOkBtn                    = true;
					
				System.out.println("**********************checkBinPopUpPageAfterClickOnCancelAndClickOnBinInFourthRowPurchaseVoucherBody***********************");
				
				System.out.println("Bin Search Value Actual                :  " + actBinSearchTxt +         " Value Expected : " + expBinSearchTxt);
				System.out.println("Bin Search Btn Value Actual            :  " + actBinSearchBtn +         " Value Expected : " + expBinSearchBtn);
				//System.out.println("Bin Alternate Category Value Actual    :  " + actBinAlternateCategory + " Value Expected : " + expBinAlternateCategory);
				System.out.println("Bin Auto Allocate Btn Value Actual     :  " + actBinAutoAllocateBtn +   " Value Expected : " + expBinAutoAllocateBtn);
				System.out.println("Bin Pick Btn Value Actual              :  " + actBinPickBtn +           " Value Expected : " + expBinPickBtn);
				System.out.println("Bin Cancel Btn Value Actual            :  " + actBinCancelBtn +         " Value Expected : " + expBinCancelBtn);
				System.out.println("Bin Ok Btn Value Actual                :  " + actBinOkBtn +             " Value Expected : " + expBinOkBtn);

				String expBinNameValue                 = excelReader.getCellData("PurchaseVoucherVAT", 165, 7);
				String expBinStockValue                = excelReader.getCellData("PurchaseVoucherVAT", 166, 7);
				String expBinCapcityValue              = excelReader.getCellData("PurchaseVoucherVAT", 167, 7);
				String expBinLoadValue                 = excelReader.getCellData("PurchaseVoucherVAT", 168, 7);
				String expBinFreeSpace                 = excelReader.getCellData("PurchaseVoucherVAT", 169, 7);
				String expBinFreeQty                   = excelReader.getCellData("PurchaseVoucherVAT", 170, 7);
				String expBinToBeAllocated             = excelReader.getCellData("PurchaseVoucherVAT", 171, 7);
				
				
				String expBinTotalQty                  = excelReader.getCellData("PurchaseVoucherVAT", 172, 7);
				String expBinBaseUom                   = excelReader.getCellData("PurchaseVoucherVAT", 173, 7);
				String expBinBalanceQty                = excelReader.getCellData("PurchaseVoucherVAT", 174, 7);
				
				String expBinSum                       = excelReader.getCellData("PurchaseVoucherVAT", 175, 7);
								
				String actBinNameValue                 = binselect1stRow_2ndColumn.getText();	
				String actBinStockValue                = binselect1stRow_3rdColumn.getText();
				String actBinCapcityValue              = binselect1stRow_4thColumn.getText();
				String actBinLoadValue                 = binselect1stRow_5thColumn.getText();
				String actBinFreeSpace                 = binselect1stRow_6thColumn.getText();
				String actBinFreeQty                   = binselect1stRow_7thColumn.getText();
				String actBinToBeAllocated             = binselect1stRow_8thColumn.getText();
				

				String actBinTotalQty                  = binTotalQty.getAttribute("value");
				String actBinBaseUom                   = binBaseUOM.getText();
				String actBinBalanceQty                = binBalanceTxt.getAttribute("value");
				
				String actBinSum                       = binSumInward.getText();
										
				
				
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 165, 8, actBinNameValue);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 166, 8, actBinStockValue);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 167, 8, actBinCapcityValue);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 168, 8, actBinLoadValue);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 169, 8, actBinFreeSpace);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 170, 8, actBinFreeQty);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 171, 8, actBinToBeAllocated);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 172, 8, actBinTotalQty);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 173, 8, actBinBaseUom);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 174, 8, actBinBalanceQty);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 175, 8, actBinSum);
				
				
	            System.out.println("**********************checkBinPopUpPageAfterClickOnCancelAndClickOnBinInFourthRowPurchaseVoucherBody*******************");
				
				System.out.println("Second Row Stock            :  " + actBinNameValue +        "  Value Expected : "  + expBinNameValue);
				System.out.println("Second Row Capacity         :  " + actBinStockValue +       "  Value Expected : "  + expBinStockValue);
				System.out.println("Second Row Load             :  " + actBinCapcityValue +     "  Value Expected : "  + expBinCapcityValue);
				System.out.println("Second Row Free Space       :  " + actBinLoadValue +        "  Value Expected : "  + expBinLoadValue);
				System.out.println("Second Row Free Qty         :  " + actBinFreeSpace +        "  Value Expected : "  + expBinFreeSpace);
				System.out.println("Second Row To Be Allocated  :  " + actBinFreeQty +          "  Value Expected : "  + expBinFreeQty);
				System.out.println("Second Row To Be Allocated  :  " + actBinToBeAllocated +    "  Value Expected : "  + expBinToBeAllocated);
				
				System.out.println("Bin Total Qty               :  " +actBinTotalQty +            "  Value Expected : "  + expBinTotalQty);
				System.out.println("Bin Base Uom                :  " +actBinBaseUom +             "  Value Expected : "  + expBinBaseUom);
				System.out.println("Bin Balance Txt             :  " +actBinBalanceQty +          "  Value Expected : "  + expBinBalanceQty);
				
				System.out.println("Bin Total To Be Adjusted    :  " + actBinSum +                "  Value Expected : "  + expBinSum);
			
						
				if(actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn /*&& actBinAlternateCategory==expBinAlternateCategory*/ 
						&& actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn
						&& actBinOkBtn==expBinOkBtn
						
						&& actBinNameValue.equalsIgnoreCase(expBinNameValue) && actBinStockValue.equalsIgnoreCase(expBinStockValue) 
						&& actBinCapcityValue.equalsIgnoreCase(expBinCapcityValue) && actBinLoadValue.equalsIgnoreCase(expBinLoadValue)
						&& actBinFreeSpace.equalsIgnoreCase(expBinFreeSpace) && actBinFreeQty.equalsIgnoreCase(expBinFreeQty)
						&& actBinToBeAllocated.equalsIgnoreCase(expBinToBeAllocated)
								
						&& actBinTotalQty.equalsIgnoreCase(expBinTotalQty) && actBinBaseUom.equalsIgnoreCase(expBinBaseUom) 
						&& actBinBalanceQty.equalsIgnoreCase(expBinBalanceQty)
						
						&& actBinSum.equalsIgnoreCase(expBinSum))	
				{
					System.out.println("Selected Bin And Ok Btn  Enabled");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 163, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Not Selected Bin And Ok Btn Not Enabled");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 163, 9, resFail);
					return false;
				}	
			  }
			  catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 163, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			   	 	return false;
				}
			}
			

			
			
			public boolean checkPickOptionInBinPopupPageInFourthRowOfPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
			  excelReader=new ExcelReader(POJOUtility.getExcelPath());
			  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
			  Thread.sleep(2000);
				
			  try
			  {
				  
			   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binselect1stRow_1stColumn));
			   binselect1stRow_1stColumn.click();
					
			    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binPickBtn));
			    binPickBtn.click();
				  
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchTxt));		
				
				boolean actBinSearchTxt                = binSearchTxt.isDisplayed();
				boolean actBinSearchBtn                = binSearchBtn.isDisplayed();
				//boolean actBinAlternateCategory        = binAlternateCategoryCheckBtn.isDisplayed();
				boolean actBinAutoAllocateBtn          = binAutoAllocateBtn.isDisplayed();
				boolean actBinPickBtn                  = binPickBtn.isDisplayed();
				boolean actBinCancelBtn                = binCancelBtn.isDisplayed();
				boolean actBinOkBtn                    = binOkBtn.isEnabled();
						
				boolean expBinSearchTxt                = true;
				boolean expBinSearchBtn                = true;
				boolean expBinAlternateCategory        = true;
				boolean expBinAutoAllocateBtn          = true;
				boolean expBinPickBtn                  = true;
				boolean expBinCancelBtn                = true;
				boolean expBinOkBtn                    = true;
				
				
				System.out.println("**********************checkPickOptionInBinPopupPageInFourthRowOfPurchaseVoucherVAT*******************");
				
				System.out.println("Bin Search Value Actual                :  " + actBinSearchTxt +         " Value Expected : " + expBinSearchTxt);
				System.out.println("Bin Search Btn Value Actual            :  " + actBinSearchBtn +         " Value Expected : " + expBinSearchBtn);
				//System.out.println("Bin Alternate Category Value Actual    :  " + actBinAlternateCategory + " Value Expected : " + expBinAlternateCategory);
				System.out.println("Bin Auto Allocate Btn Value Actual     :  " + actBinAutoAllocateBtn +   " Value Expected : " + expBinAutoAllocateBtn);
				System.out.println("Bin Pick Btn Value Actual              :  " + actBinPickBtn +           " Value Expected : " + expBinPickBtn);
				System.out.println("Bin Cancel Btn Value Actual            :  " + actBinCancelBtn +         " Value Expected : " + expBinCancelBtn);
				System.out.println("Bin Ok Btn Value Actual                :  " + actBinOkBtn +             " Value Expected : " + expBinOkBtn);
				
				
				String expBinNameValue                 = excelReader.getCellData("PurchaseVoucherVAT", 177, 7);
				String expBinStockValue                = excelReader.getCellData("PurchaseVoucherVAT", 178, 7);
				String expBinCapcityValue              = excelReader.getCellData("PurchaseVoucherVAT", 179, 7);
				String expBinLoadValue                 = excelReader.getCellData("PurchaseVoucherVAT", 180, 7);
				String expBinFreeSpace                 = excelReader.getCellData("PurchaseVoucherVAT", 181, 7);
				String expBinFreeQty                   = excelReader.getCellData("PurchaseVoucherVAT", 182, 7);
				String expBinToBeAllocated             = excelReader.getCellData("PurchaseVoucherVAT", 183, 7);
				
				
				String expBinTotalQty                  = excelReader.getCellData("PurchaseVoucherVAT", 184, 7);
				String expBinBaseUom                   = excelReader.getCellData("PurchaseVoucherVAT", 185, 7);
				String expBinBalanceQty                = excelReader.getCellData("PurchaseVoucherVAT", 186, 7);
				
				String expBinSum                       = excelReader.getCellData("PurchaseVoucherVAT", 187, 7);
								
				String actBinNameValue                 = binselect1stRow_2ndColumn.getText();	
				String actBinStockValue                = binselect1stRow_3rdColumn.getText();
				String actBinCapcityValue              = binselect1stRow_4thColumn.getText();
				String actBinLoadValue                 = binselect1stRow_5thColumn.getText();
				String actBinFreeSpace                 = binselect1stRow_6thColumn.getText();
				String actBinFreeQty                   = binselect1stRow_7thColumn.getText();
				String actBinToBeAllocated             = binselect1stRow_8thColumn.getText();
				

				String actBinTotalQty                  = binTotalQty.getAttribute("value");
				String actBinBaseUom                   = binBaseUOM.getText();
				String actBinBalanceQty                = binBalanceTxt.getAttribute("value");
				
				String actBinSum                       = binSumInward.getText();
										
				
				
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 177, 8, actBinNameValue);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 178, 8, actBinStockValue);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 179, 8, actBinCapcityValue);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 180, 8, actBinLoadValue);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 181, 8, actBinFreeSpace);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 182, 8, actBinFreeQty);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 183, 8, actBinToBeAllocated);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 184, 8, actBinTotalQty);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 185, 8, actBinBaseUom);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 186, 8, actBinBalanceQty);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 187, 8, actBinSum);
				
				
				System.out.println("Second Row Stock            :  " + actBinNameValue +        "  Value Expected : "  + expBinNameValue);
				System.out.println("Second Row Capacity         :  " + actBinStockValue +       "  Value Expected : "  + expBinStockValue);
				System.out.println("Second Row Load             :  " + actBinCapcityValue +     "  Value Expected : "  + expBinCapcityValue);
				System.out.println("Second Row Free Space       :  " + actBinLoadValue +        "  Value Expected : "  + expBinLoadValue);
				System.out.println("Second Row Free Qty         :  " + actBinFreeSpace +        "  Value Expected : "  + expBinFreeSpace);
				System.out.println("Second Row To Be Allocated  :  " + actBinFreeQty +          "  Value Expected : "  + expBinFreeQty);
				System.out.println("Second Row To Be Allocated  :  " + actBinToBeAllocated +    "  Value Expected : "  + expBinToBeAllocated);
							
				System.out.println("Bin Total Qty               :  " +actBinTotalQty +            "  Value Expected : "  + expBinTotalQty);
				System.out.println("Bin Base Uom                :  " +actBinBaseUom +             "  Value Expected : "  + expBinBaseUom);
				System.out.println("Bin Balance Txt             :  " +actBinBalanceQty +          "  Value Expected : "  + expBinBalanceQty);
				
				System.out.println("Bin Total To Be Adjusted    :  " + actBinSum +                "  Value Expected : "  + expBinSum);
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_7thColumn));
						
				if(actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn/* && actBinAlternateCategory==expBinAlternateCategory */
						&& actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn
						&& actBinOkBtn==expBinOkBtn
						
						&& actBinNameValue.equalsIgnoreCase(expBinNameValue) && actBinStockValue.equalsIgnoreCase(expBinStockValue) 
						&& actBinCapcityValue.equalsIgnoreCase(expBinCapcityValue) && actBinLoadValue.equalsIgnoreCase(expBinLoadValue)
						&& actBinFreeSpace.equalsIgnoreCase(expBinFreeSpace) && actBinFreeQty.equalsIgnoreCase(expBinFreeQty)
						&& actBinToBeAllocated.equalsIgnoreCase(expBinToBeAllocated)
								
						&& actBinTotalQty.equalsIgnoreCase(expBinTotalQty) && actBinBaseUom.equalsIgnoreCase(expBinBaseUom) 
						&& actBinBalanceQty.equalsIgnoreCase(expBinBalanceQty)
						
						&& actBinSum.equalsIgnoreCase(expBinSum))	
				{
					System.out.println("Test Pass: Pick Option in Bin Pop up ");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 176, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail: Pick Option in Bin Pop up ");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 176, 9, resFail);
					return false;
				}	
			  }
			  catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 176, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			   	 	return false;
				}
			
			}
			

			
			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_head']/tr/th/div[1]")
			private static List<WebElement> pvVatBodygridHeaderList;

			
			@FindBy(xpath="//input[@id='id_body_23']")
			private static WebElement  enter_PvItemTxt;	
			
			@FindBy(xpath="//input[@id='id_body_16777333']")
			private static WebElement  taxCodePvTxt;
			
			@FindBy(xpath="//input[@id='id_body_24']")
			private static WebElement  enter_PvUnitTxt;
			
			@FindBy(xpath="[@id='id_body_33554477']")
			private static WebElement  enter_PvRD;
			
			@FindBy(xpath="//input[@id='id_body_33554478']")
			private static WebElement  enter_PvVatAvgRate;
			
			@FindBy(xpath="//input[@id='id_body_33554479']")
			private static WebElement  enter_PvVatAvgRateO;
			
			@FindBy(xpath="//input[@id='id_body_26']")
			private static WebElement  enter_PvQuantity;
			
			@FindBy(xpath="//input[@id='id_body_27']")
			private static WebElement  enter_PvRate;
			
			@FindBy(xpath="//input[@id='id_body_28']")
			private static WebElement  enter_PVGross;
			

			
			@FindBy(xpath="//input[@id='id_body_13']")
			private static WebElement  enter_PvBatch;
			
			@FindBy(xpath="//input[@id='id_body_85']")
			private static WebElement  enter_PvBin;
			
			@FindBy(xpath="//input[@id='id_body_37']")
			private static WebElement enter_PvExpirydate;
			
			@FindBy(xpath="//input[@id='id_body_38']")
			private static WebElement  enter_PvRMA;
			
			/*@FindBy(xpath="//textarea[@id='id_body_16777294']")
			private static WebElement  enter_PvRemarks;*/
			    
			@FindBy(xpath="//textarea[@id='id_body_16777309']")
			private static WebElement  enter_PvRemarks;
			
			
			
			
		    @FindBy(xpath="//a[@id='2059']//span[contains(text(),'Purchases Voucher VAT')]")
		    private static WebElement pvVatVoucher;
		    
		    @FindBy(xpath="//div[contains(text(),'Remarks')]")
			private static WebElement voucherBodyRemarksName;
			
			public boolean checkBinPopUpPagePickQtyAfterClickOnOkButtonAndClickOnBinInFourthRowPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
			  excelReader=new ExcelReader(POJOUtility.getExcelPath());
			  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
			  Thread.sleep(2000);
				
			  try
			  {
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
				binOkBtn.click();
					
				String actBinName=select4thRow_17thColumn.getText();
				
				String expBinName=excelReader.getCellData("PurchaseVoucherVAT", 189, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 189, 8, actBinName);
				
				System.out.println("*****checkBinPopUpPagePickQtyAfterClickOnOkButtonAndClickOnBinInFourthRowPurchaseVoucherBody*************************");
				
				System.out.println("Bin Column in Voucher : "+ actBinName +  "    "+select4thRow_14thColumn.getText());
				
			/*	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_17thColumn));
				select4thRow_17thColumn.click();
			*/	enter_PvRemarks.sendKeys(Keys.TAB);
						
				if(actBinName.equalsIgnoreCase(expBinName))	
				{
					System.out.println("Test Pass: Bin is Displayed in Body Grid");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 188, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail: Bin is not Displayed in body Grid");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 188, 9, resFail);
					return false;
				}	
			  }
			  catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 188, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			   	 	return false;
				}

			}
			


			public boolean checkTaxCodeBySelectingFIFOBinItemInFifthRowOfPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
			try
			{
							
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_1stColumn));
				select5thRow_1stColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
				enter_WarehouseTxt.click();
				enter_WarehouseTxt.sendKeys(Keys.END);
				enter_WarehouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
				enter_WarehouseTxt.sendKeys(Keys.SPACE);
					
				int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
				
				for (int i = 0; i < pvvGridWarehouseListCount; i++) 
				{
					String warehouse=pvvGridWarehouseList.get(i).getText();
					if (warehouse.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 191, 6))) 
					{
						pvvGridWarehouseList.get(i).click();
						break;
					}
				}
		        enter_WarehouseTxt.sendKeys(Keys.TAB);
					
		        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
				enter_ItemTxt.click();
				enter_ItemTxt.sendKeys(Keys.SPACE);
		        int pvvGridItemListCount=pvvGridItemList.size();
				for (int i = 0; i < pvvGridItemListCount; i++) 
				{
					String Item=pvvGridItemList.get(i).getText();
					if (Item.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 192, 6))) 
					{
						pvvGridItemList.get(i).click();
						break;
					}
				}
				enter_ItemTxt.sendKeys(Keys.TAB);
			
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
				
			    enter_PvTaxCode.click();
			        
			    /*enter_PvTaxCode.sendKeys(Keys.SHIFT,Keys.HOME,Keys.BACK_SPACE);
			    Thread.sleep(1000);
			        
			    enter_PvTaxCode.sendKeys(Keys.BACK_SPACE);
			        
			    enter_PvTaxCode.sendKeys(Keys.SHIFT,Keys.HOME);
			        
			    enter_PvTaxCode.sendKeys(Keys.SPACE);
			        
			    int pvvGridTaxCodeListCount=pvvGridTaxCodeList.size(); 
			        
			    System.err.println("pvvGridTaxCodeListCount "+pvvGridTaxCodeListCount);
			        
				for (int i = 0; i < pvvGridTaxCodeListCount; i++) 
				{
					String Taxable=pvvGridTaxCodeList.get(i).getText();
						
					if (Taxable.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 193, 6))) 
					{
						pvvGridTaxCodeList.get(i).click();
						break;
					}
				}
			    enter_PvTaxCode.sendKeys(Keys.TAB);*/
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_5thColumn));
				select5thRow_5thColumn.click();
									
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_9thColumn));
				select5thRow_9thColumn.click();
								
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_1stColumn));
				String actWarehouse=select5thRow_1stColumn.getText();
				String expWarehouse=excelReader.getCellData("PurchaseVoucherVAT", 191, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 191, 8, actWarehouse);
						
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_2ndColumn));
				String actItem=select5thRow_2ndColumn.getText();
				String expItem=excelReader.getCellData("PurchaseVoucherVAT", 192, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 192, 8, actItem);
					
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_3rdColumn));
				String actTaxCode=select5thRow_3rdColumn.getText();
				String expTaxCode=excelReader.getCellData("PurchaseVoucherVAT", 193, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 193, 8, actTaxCode);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_4thColumn));
				String actPurchaseAccount=select5thRow_4thColumn.getText();
				String expPurchaseAccount=excelReader.getCellData("PurchaseVoucherVAT", 190, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 190, 8, actPurchaseAccount);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_5thColumn));
				String actUnits=select5thRow_5thColumn.getText();
				String expUnits=excelReader.getCellData("PurchaseVoucherVAT", 194, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 194, 8, actUnits);
				

				System.out.println("************checkTaxCodeBySelectingFIFOBinItemInFifthRowOfPurchaseVoucherVAT*************");
				
				System.out.println("Warehouse       : " + actWarehouse	+ " Value Expected : "+expWarehouse);
				System.out.println("Item            : " + actItem		+ " Value Expected : "+expItem);
				System.out.println("TaxCode         : " + actTaxCode	+ " Value Expected : "+expTaxCode);
				System.out.println("Units           : " + actUnits		+ " Value Expected : "+expUnits);
				System.out.println("PurchaseAccount           : " + actPurchaseAccount		+ " Value Expected : "+expPurchaseAccount);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_9thColumn));
				select5thRow_9thColumn.click();
				
				if(actTaxCode.equalsIgnoreCase(expTaxCode) && actWarehouse.equalsIgnoreCase(expWarehouse) && 
						actItem.equalsIgnoreCase(expItem) && actUnits.equalsIgnoreCase(expUnits) &&
						actPurchaseAccount.equalsIgnoreCase(expPurchaseAccount))
				
				{
					System.out.println("Test Pass : Data Entered in FIFTH Row");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 190, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Data NOT Entered in FIFTH Row");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 190, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 190, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
			}

			}
			

			
			public boolean checkAvGRateAndAVGRateOBySelectingFIFOBinItemInFifthRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
			try
			{
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_6thColumn));
				select5thRow_6thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_7thColumn));
				select5thRow_7thColumn.click();
				
								
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_8thColumn));
				select5thRow_8thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_9thColumn));
				select5thRow_9thColumn.click();
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_7thColumn));
				String actR1C1AVGRate =select5thRow_7thColumn.getText();			
				String expR1C1AVGRate =excelReader.getCellData("PurchaseVoucherVAT", 196, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 196, 8, actR1C1AVGRate);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_8thColumn));
				String actR1C1AVGRateO =select5thRow_8thColumn.getText();			
				String expR1C1AVGRateO =excelReader.getCellData("PurchaseVoucherVAT", 197, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 197, 8, actR1C1AVGRateO);
						
						
				System.out.println("*************************checkAvGRateAndAVGRateOBySelectingFIFOBinItemInFifthRowPurchaseVoucherVAT******************************");
				
				System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1AVGRate   +" Value Expected : "+expR1C1AVGRate);	
				System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1AVGRateO   +" Value Expected : "+expR1C1AVGRateO);
												
				if(actR1C1AVGRate.equalsIgnoreCase(expR1C1AVGRate) )
				{
					System.out.println("Test Pass : Avg Rate is updated ");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 195, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Avg Rate is Not Updated ");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 195, 9, resFail);
					return false;
				}
				}
				catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 195, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			   	 	return false;
				}
			}
			
			public boolean checkGrossBySelectingFIFOBinItemInFifthRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				try
				{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
				enter_Quantity.click();
				enter_Quantity.clear();
				enter_Quantity.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 199, 6));
				enter_Quantity.sendKeys(Keys.TAB);
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
				enter_Rate.click();
				enter_Rate.clear();
				enter_Rate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 200, 6));
				enter_Rate.sendKeys(Keys.TAB);
								
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
				enter_Gross.click();
				enter_Gross.sendKeys(Keys.TAB);

				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_12thColumn));
				String actR1C1Gross =select5thRow_12thColumn.getText();			
				String expR1C1Gross =excelReader.getCellData("PurchaseVoucherVAT", 201, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 201, 8, actR1C1Gross);
				
				System.out.println("**************************checkGrossBySelectingFIFOBinItemInFifthRowPurchaseVoucherVAT***************************************");
				
				System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1Gross   +" Value Expected : "+expR1C1Gross);	
												
				if(actR1C1Gross.equalsIgnoreCase(expR1C1Gross) )
				{
					System.out.println("Test Pass : Gross Value IS Updated ");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 198, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : No Gross Value IS Updated ");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 198, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 198, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
			}

			}
			
			
			
			public boolean checkVATValueBySelectingFIFOBinItemInFifthRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_14thColumn));
				select5thRow_14thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvVat));
				enter_PvVat.click();
				enter_PvVat.sendKeys(Keys.TAB);
				
				
				String actR1C1VAT =select5thRow_14thColumn.getText();			
				String expR1C1VAT =excelReader.getCellData("PurchaseVoucherVAT", 203, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 203, 8, actR1C1VAT);
						
				System.out.println("******************************checkVATValueBySelectingFIFOBinItemInFifthRowPurchaseVoucherVAT************************************");
				
				System.out.println("PV VAT 	Value Actual  : "+actR1C1VAT   +" Value Expected : "+expR1C1VAT);	

				
				if(actR1C1VAT.equalsIgnoreCase(expR1C1VAT))
				{
					System.out.println("Test Pass : Displayed PV Vat Value ");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 202, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Not Displayed Pv VAt Value ");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 202, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 202, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
			}
			}
			
			
			
			public boolean checkTaxableValueBySelectingFIFOBinItemInFifthRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				Thread.sleep(2000);
			
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxable));
				enter_PvTaxable.click();
				
		       /* enter_PvTaxable.sendKeys(Keys.TAB);*/
						
				
				String actR1C1Taxable =enter_PvTaxable.getAttribute("value");			
				String expR1C1Taxable =excelReader.getCellData("PurchaseVoucherVAT", 204, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 204, 8, actR1C1Taxable);
			
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
				saveBtn.click();
				
				String expErrorMessage =excelReader.getCellData("PurchaseVoucherVAT", 205, 7);;
				String validationMessage=checkValidationMessage(expErrorMessage);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 205, 8, validationMessage);
				
				
				
				System.out.println("**************************checkTaxableValueBySelectingFIFOBinItemInFifthRowPurchaseVoucherVAT************************************");
				
				System.out.println("Taxable  Value Actual  : "+actR1C1Taxable   +" Value Expected : "+expR1C1Taxable);	
												
				if(actR1C1Taxable.equalsIgnoreCase(expR1C1Taxable)  && validationMessage.equalsIgnoreCase(expErrorMessage))
				{
					System.out.println("Test Pass : Taxable Value is updated and  Validation Message is Displayed  ");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 204, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Data NOT Entered in first Row");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 204, 9, resFail);
					return false;
				}
				}
				catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 204, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			   	 	return false;
				}
			}
			
			
			
			//Check With Col in Grid s
			
			 public boolean checkBinPopUpPageInputManualInputInAllocateQtyInPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			  {
					
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_17thColumn));
					select5thRow_17thColumn.click();
 
					Thread.sleep(1000);

					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binselect2ndRow_8thColumn));
					binselect2ndRow_8thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ToBeAllocateTxt));
					enter_ToBeAllocateTxt.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 207, 6));
					enter_ToBeAllocateTxt.sendKeys(Keys.TAB);
					
					Thread.sleep(2000);
					
					//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binTotalQty));
					//String actBinTotalQty                   = binTotalQty.getAttribute("value");
					String actBinBaseUom                    = binBaseUOM.getText();
					String actBinBalanceQty                 = binBalanceTxt.getAttribute("value");
					String actBinSum                        = binSumInward.getText();
					
					//excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 208, 8, actBinTotalQty);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 209, 8, actBinBaseUom);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 210, 8, actBinBalanceQty);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 211, 8, actBinSum);
					
					String expBinTotalQty                   = excelReader.getCellData("PurchaseVoucherVAT", 208, 7);
					String expBinBaseUom                    = excelReader.getCellData("PurchaseVoucherVAT", 209, 7);
					String expBinBalanceQty                 = excelReader.getCellData("PurchaseVoucherVAT", 210, 7);
					String expBinSum                        = excelReader.getCellData("PurchaseVoucherVAT", 211, 7);
						
					System.out.println("***********************checkBinPopUpPageInputManualInputInAllocateQtyInPurchaseVoucherVAT*************************************");
			       
					//System.out.println("Bin Total Qty               :  " +actBinTotalQty +            "  Value Expected : "  + expBinTotalQty);
					System.out.println("Bin Base Uom                :  " +actBinBaseUom +             "  Value Expected : "  + expBinBaseUom);
					System.out.println("Bin Balance Txt             :  " +actBinBalanceQty +          "  Value Expected : "  + expBinBalanceQty);				
					System.out.println("Bin Total To Be Adjusted    :  " + actBinSum +                "  Value Expected : " + expBinSum);
					
					Thread.sleep(2000);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
					binOkBtn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_17thColumn));
					String actBinName=select5thRow_17thColumn.getText();
					String expBinName=excelReader.getCellData("PurchaseVoucherVAT", 212, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 212, 8, actBinName);
					
					/*System.out.println("Bin Column in Voucher : "+ actBinName +  "    "+ select5thRow_12thColumn.getText());
					System.out.println("Bin Column in Voucher : "+ actBinName +  "    "+ select5thRow_13thColumn.getText());
					System.out.println("Bin Column in Voucher : "+ actBinName +  "    "+ select5thRow_14thColumn.getText());
					*/
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvRemarks));
					enter_PvRemarks.sendKeys(Keys.TAB);
							
					if(/*	actBinTotalQty.equalsIgnoreCase(expBinTotalQty) && */actBinBaseUom.equalsIgnoreCase(expBinBaseUom) 
							&& actBinBalanceQty.equalsIgnoreCase(expBinBalanceQty)
							&& actBinSum.equalsIgnoreCase(expBinSum)
							&&actBinName.equalsIgnoreCase(expBinName))
						
					{
						System.out.println("Test Pass: Entered Manually in Bin pop upin To Be Allocated Col ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 206, 9, resPass);
						return true;
					
					}
					else
					{
						System.out.println("Test fail: Entry Manually in Bin Pop up");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 206, 9, resFail);
						return false;
					}
				  }
				catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 206, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			   	 	return false;
				}
			  }
		
				
			 
			 
			 public boolean checkTaxCodeBySelectingFIFOBinItemInSixthRowOfPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			 {
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
					try
					{
								
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select6thRow_1stColumn));
					select6thRow_1stColumn.click();

					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
					enter_WarehouseTxt.click();
					enter_WarehouseTxt.sendKeys(Keys.END);
					enter_WarehouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
					enter_WarehouseTxt.sendKeys(Keys.SPACE);
						
					int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
					
					for (int i = 0; i < pvvGridWarehouseListCount; i++) 
					{
						String warehouse=pvvGridWarehouseList.get(i).getText();
						if (warehouse.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 214, 6))) 
						{
							pvvGridWarehouseList.get(i).click();
							break;
						}
					}
			        enter_WarehouseTxt.sendKeys(Keys.TAB);
						
			        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
					enter_ItemTxt.click();
					enter_ItemTxt.sendKeys(Keys.SPACE);
			        int pvvGridItemListCount=pvvGridItemList.size();
					for (int i = 0; i < pvvGridItemListCount; i++) 
					{
						String Item=pvvGridItemList.get(i).getText();
						if (Item.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 215, 6))) 
						{
							pvvGridItemList.get(i).click();
							break;
						}
					}
					enter_ItemTxt.sendKeys(Keys.TAB);
				
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
					
				    enter_PvTaxCode.click();
				        
				    enter_PvTaxCode.sendKeys(Keys.SHIFT,Keys.HOME,Keys.BACK_SPACE);
				   
				        
				   /* enter_PvTaxCode.sendKeys(Keys.BACK_SPACE);
				        
				    enter_PvTaxCode.sendKeys(Keys.SHIFT,Keys.HOME);
				        
				    enter_PvTaxCode.sendKeys(Keys.SPACE);
				        
				    int pvvGridTaxCodeListCount=pvvGridTaxCodeList.size(); 
				        
				    System.err.println("pvvGridTaxCodeListCount "+pvvGridTaxCodeListCount);
				        
					for (int i = 0; i < pvvGridTaxCodeListCount; i++) 
					{
						String Taxable=pvvGridTaxCodeList.get(i).getText();
							
						if (Taxable.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 216, 6))) 
						{
							pvvGridTaxCodeList.get(i).click();
							break;
						}
					}
				    enter_PvTaxCode.sendKeys(Keys.TAB);
					*/
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select6thRow_5thColumn));
					select6thRow_5thColumn.click();
										
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select6thRow_9thColumn));
					select6thRow_9thColumn.click();
									
					
					String actWarehouse=select6thRow_1stColumn.getText();
					String expWarehouse=excelReader.getCellData("PurchaseVoucherVAT", 214, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 214, 8, actWarehouse);
									
					String actItem=select6thRow_2ndColumn.getText();
					String expItem=excelReader.getCellData("PurchaseVoucherVAT", 215, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 215, 8, actItem);
								
					String actTaxCode=select6thRow_3rdColumn.getText();
					String expTaxCode=excelReader.getCellData("PurchaseVoucherVAT", 216, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 216, 8, actTaxCode);
					
					
					String actPurchaseAccount=select6thRow_4thColumn.getText();
					String expPurchaseAccount=excelReader.getCellData("PurchaseVoucherVAT", 213, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 213, 8, actPurchaseAccount);
					
					
					String actUnits=select6thRow_5thColumn.getText();
					String expUnits=excelReader.getCellData("PurchaseVoucherVAT", 217, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 217, 8, actUnits);
					

					System.out.println("************checkTaxCodeBySelectingFIFOBinItemInSixthRowOfPurchaseVoucherVAT*************");
					
					System.out.println("Warehouse       : " + actWarehouse	+ " Value Expected : "+expWarehouse);
					System.out.println("Item            : " + actItem		+ " Value Expected : "+expItem);
					System.out.println("TaxCode         : " + actTaxCode	+ " Value Expected : "+expTaxCode);
					System.out.println("Units           : " + actUnits		+ " Value Expected : "+expUnits);
					System.out.println("PurchaseAccount           : " + actPurchaseAccount		+ " Value Expected : "+expPurchaseAccount);
				
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select6thRow_9thColumn));
					select6thRow_9thColumn.click();
					
					if(actTaxCode.equalsIgnoreCase(expTaxCode) && actWarehouse.equalsIgnoreCase(expWarehouse) && 
							actItem.equalsIgnoreCase(expItem) && actUnits.equalsIgnoreCase(expUnits) && 
							actPurchaseAccount.equalsIgnoreCase(expPurchaseAccount))
					
					{
						System.out.println("Test Pass : Data Entered in Sixth Row");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 213, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail : Data NOT Entered in Sixth Row");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 213, 9, resFail);
						return false;
					}
					}
					catch (Exception e) 
					{
						String exception =e.getMessage();
						excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 213, 10, exception);
						System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				   	 	return false;
					}
				}
				

				
				public boolean checkAvGRateAndAVGRateOBySelectingFIFOBinItemInSixthRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
				{
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
				try
				{
					
					
					
					Thread.sleep(2000);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select6thRow_6thColumn));
					select6thRow_6thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select6thRow_7thColumn));
					select6thRow_7thColumn.click();
					
									
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select6thRow_8thColumn));
					select6thRow_8thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select6thRow_9thColumn));
					select6thRow_9thColumn.click();
						
								
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select6thRow_7thColumn));
					String actR1C1AVGRate =select6thRow_7thColumn.getText();			
					String expR1C1AVGRate =excelReader.getCellData("PurchaseVoucherVAT", 219, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 219, 8, actR1C1AVGRate);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select6thRow_8thColumn));
					String actR1C1AVGRateO =select6thRow_8thColumn.getText();			
					String expR1C1AVGRateO =excelReader.getCellData("PurchaseVoucherVAT", 220, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 220, 8, actR1C1AVGRateO);
							
					
					
					System.out.println("**************checkAvGRateAndAVGRateOBySelectingFIFOBinItemInSixthRowPurchaseVoucherVAT************************************");
					
					System.out.println("Avg rate  Value Actual     : "+actR1C1AVGRate    +" Value Expected : "+expR1C1AVGRate);	
					System.out.println("Avg rate (o) Value Actual  : "+actR1C1AVGRateO   +" Value Expected : "+expR1C1AVGRateO);
													
					if(actR1C1AVGRate.equalsIgnoreCase(expR1C1AVGRate) &&  actR1C1AVGRateO.equalsIgnoreCase(expR1C1AVGRateO))
					{
						System.out.println("Test Pass : Displayed Avg Rate And Avg rate(o) in Sixth Row");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 218, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail : Not  Displayed Avg Rate And Avg rate(o) in Sixth Row");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 218, 9, resFail);
						return false;
					}
					}
					catch (Exception e) 
					{
						String exception =e.getMessage();
						excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 218, 10, exception);
						System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				   	 	return false;
					}
				}
				

				
				
				
				
				public boolean checkGrossBySelectingFIFOBinItemInSixthRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
				{
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
					try
					{
							
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
					enter_Quantity.click();
					enter_Quantity.clear();
					enter_Quantity.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 222, 6));
					enter_Quantity.sendKeys(Keys.TAB);
					
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
					enter_Rate.click();
					enter_Rate.clear();
					enter_Rate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 223, 6));
					enter_Rate.sendKeys(Keys.TAB);
									
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
					enter_Gross.click();
					enter_Gross.sendKeys(Keys.TAB);

					Thread.sleep(2000);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select6thRow_12thColumn));
					
					String actR1C1Gross =select6thRow_12thColumn.getText();			
					String expR1C1Gross =excelReader.getCellData("PurchaseVoucherVAT", 224, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 224, 8, actR1C1Gross);
							
					System.out.println("*****************checkGrossBySelectingFIFOBinItemInSixthRowPurchaseVoucherVAT*******************************");
					System.out.println("Gross  Value Actual  : "+actR1C1Gross   +" Value Expected : "+expR1C1Gross);	
													
					if(actR1C1Gross.equalsIgnoreCase(expR1C1Gross) )
					{
						System.out.println("Test Pass : Gross Value Updated ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 221, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail : Gross Value is Not Updated ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 221, 9, resFail);
						return false;
					}
				}
				catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 221, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			   	 	return false;
				}
				}
				
				
				
				public boolean checkVATValueBySelectingFIFOBinItemInSixthRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
				{
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
					try
					{
					Thread.sleep(2000);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select6thRow_14thColumn));
					select6thRow_14thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvVat));
					enter_PvVat.click();
					enter_PvVat.sendKeys(Keys.TAB);
					
					String actR1C1VAT =select6thRow_14thColumn.getText();			
					String expR1C1VAT =excelReader.getCellData("PurchaseVoucherVAT", 226, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 226, 8, actR1C1VAT);
							
					System.out.println("**************************checkVATValueBySelectingFIFOBinItemInSixthRowPurchaseVoucherVAT****************************");
					
					System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1VAT   +" Value Expected : "+expR1C1VAT);	

					
					if(actR1C1VAT.equalsIgnoreCase(expR1C1VAT))
					{
						System.out.println("Test Pass : Pv Vat Value Displayed ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 225, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail : Pv vat Value is not Displayed ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 225, 9, resFail);
						return false;
					}
					
				}
				catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 225, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			   	 	return false;
				}
				}
				
				
				
				
				
				public boolean checkTaxableValueBySelectingFIFOBinItemInSixthRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
				{
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
					try
					{
					Thread.sleep(2000);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxable));
					enter_PvTaxable.click();
					enter_PvTaxable.sendKeys(Keys.TAB);
							
					String actR1C1Taxable =select6thRow_15thColumn.getText();			
					String expR1C1Taxable =excelReader.getCellData("PurchaseVoucherVAT", 228, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 228, 8, actR1C1Taxable);
				
					
					System.out.println("********************checkTaxableValueBySelectingFIFOBinItemInSixthRowPurchaseVoucherVAT*******************************");
					
					System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1Taxable   +" Value Expected : "+expR1C1Taxable);	
													
					if(actR1C1Taxable.equalsIgnoreCase(expR1C1Taxable) )
					{
						System.out.println("Test Pass : PV Taxable Value is Updated ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 227, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail : Pv Taxable Value Updated ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 227, 9, resFail);
						return false;
					}
				}
				catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 227, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			   	 	return false;
				}

				}
				
				
				
				 public boolean checkBinPopUpPageSelectBinAllocateQtyThroughDoubleClickInPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
				  {
						
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
					try
					{
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binselect2ndRow_1stColumn));
						binselect2ndRow_1stColumn.click();
						
						getAction().doubleClick(binselect2ndRow_1stColumn).build().perform();
						
						Thread.sleep(2000);
						
						String actBinTotalQty                   = binTotalQty.getAttribute("value");
						String actBinBaseUom                    = binBaseUOM.getText();
						String actBinBalanceQty                 = binBalanceTxt.getAttribute("value");
						String actBinSum                        = binSumInward.getText();
						
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 230, 8, actBinTotalQty);
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 231, 8, actBinBaseUom);
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 232, 8, actBinBalanceQty);
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 233, 8, actBinSum);
						
						String expBinTotalQty                   = excelReader.getCellData("PurchaseVoucherVAT", 230, 7);
						String expBinBaseUom                    = excelReader.getCellData("PurchaseVoucherVAT", 231, 7);
						String expBinBalanceQty                 = excelReader.getCellData("PurchaseVoucherVAT", 232, 7);
						String expBinSum                        = excelReader.getCellData("PurchaseVoucherVAT", 233, 7);
							
				       System.out.println("************checkBinPopUpPageSelectBinAllocateQtyThroughDoubleClickInPurchaseVoucherVAT**************");
						
						System.out.println("Bin Total Qty               :  " +actBinTotalQty +            "  Value Expected : "  + expBinTotalQty);
						System.out.println("Bin Base Uom                :  " +actBinBaseUom +             "  Value Expected : "  + expBinBaseUom);
						System.out.println("Bin Balance Txt             :  " +actBinBalanceQty +          "  Value Expected : "  + expBinBalanceQty);				
						System.out.println("Bin Total To Be Adjusted    :  " + actBinSum +                "  Value Expected : " + expBinSum);
						
						Thread.sleep(2000);
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
						binOkBtn.click();
						
						Thread.sleep(2000);
						
						String actBinName=select6thRow_17thColumn.getText();
						
						String expBinName=excelReader.getCellData("PurchaseVoucherVAT", 234, 7);
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 234, 8, actBinName);
						
						System.out.println("Bin Column in Voucher : "+ actBinName +  "    "+select6thRow_17thColumn.getText());
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select6thRow_14thColumn));
						
						
						enter_PvRemarks.sendKeys(Keys.TAB);
								
						if(	actBinTotalQty.equalsIgnoreCase(expBinTotalQty) && actBinBaseUom.equalsIgnoreCase(expBinBaseUom) 
								&& actBinBalanceQty.equalsIgnoreCase(expBinBalanceQty)
								
								&& actBinSum.equalsIgnoreCase(expBinSum)
								
								&& actBinName.equalsIgnoreCase(expBinName))
							
						{
							System.out.println("Selected Bin And Ok Btn is Enabled");
							excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 229, 9, resPass);
							return true;
						
						}
						else
						{
							System.out.println("Not Selected Bin And Ok Btn Not Enabled");
							excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 229, 9, resFail);
							return false;
						}
					  }
					catch (Exception e) 
					{
						String exception =e.getMessage();
						excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 229, 10, exception);
						System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				   	 	return false;
					}
				  }
			

				 

			 
			 
			 public boolean checkTaxCodeBySelectingWACOGSRMAItemInSeventhRowOfPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			 {
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
					try
					{
								
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select7thRow_1stColumn));
					select7thRow_1stColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
					enter_WarehouseTxt.click();
					enter_WarehouseTxt.sendKeys(Keys.END);
					enter_WarehouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
					enter_WarehouseTxt.sendKeys(Keys.SPACE);
						
					int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
					
					for (int i = 0; i < pvvGridWarehouseListCount; i++) 
					{
						String warehouse=pvvGridWarehouseList.get(i).getText();
						if (warehouse.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 236, 6))) 
						{
							pvvGridWarehouseList.get(i).click();
							break;
						}
					}
			        enter_WarehouseTxt.sendKeys(Keys.TAB);
						
			        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
					enter_ItemTxt.click();
					enter_ItemTxt.sendKeys(Keys.SPACE);
			        int pvvGridItemListCount=pvvGridItemList.size();
					for (int i = 0; i < pvvGridItemListCount; i++) 
					{
						String Item=pvvGridItemList.get(i).getText();
						if (Item.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 237, 6))) 
						{
							pvvGridItemList.get(i).click();
							break;
						}
					}
					enter_ItemTxt.sendKeys(Keys.TAB);
				
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
					
				    enter_PvTaxCode.click();
				     /*   
				    enter_PvTaxCode.sendKeys(Keys.SHIFT,Keys.HOME,Keys.BACK_SPACE);
				    Thread.sleep(1000);
				        
				    enter_PvTaxCode.sendKeys(Keys.BACK_SPACE);
				        
				    enter_PvTaxCode.sendKeys(Keys.SHIFT,Keys.HOME);
				        
				    enter_PvTaxCode.sendKeys(Keys.SPACE);
				        
				    int pvvGridTaxCodeListCount=pvvGridTaxCodeList.size(); 
				        
				    System.err.println("pvvGridTaxCodeListCount "+pvvGridTaxCodeListCount);
				        
					for (int i = 0; i < pvvGridTaxCodeListCount; i++) 
					{
						String Taxable=pvvGridTaxCodeList.get(i).getText();
							
						if (Taxable.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 238, 6))) 
						{
							pvvGridTaxCodeList.get(i).click();
							break;
						}
					}
				    enter_PvTaxCode.sendKeys(Keys.TAB);
					*/
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select7thRow_5thColumn));
					select7thRow_5thColumn.click();
										
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select7thRow_9thColumn));
					select7thRow_9thColumn.click();
									
					
					String actWarehouse=select7thRow_1stColumn.getText();
					String expWarehouse=excelReader.getCellData("PurchaseVoucherVAT", 236, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 236, 8, actWarehouse);
									
					String actItem=select7thRow_2ndColumn.getText();
					String expItem=excelReader.getCellData("PurchaseVoucherVAT", 237, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 237, 8, actItem);
								
					String actTaxCode=select7thRow_3rdColumn.getText();
					String expTaxCode=excelReader.getCellData("PurchaseVoucherVAT", 238, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 238, 8, actTaxCode);
					
					String actPurchaseAccount=select7thRow_4thColumn.getText();
					String expPurchaseAccount=excelReader.getCellData("PurchaseVoucherVAT", 235, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 235, 8, actPurchaseAccount);
					
					
					String actUnits=select7thRow_5thColumn.getText();
					String expUnits=excelReader.getCellData("PurchaseVoucherVAT", 239, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 239, 8, actUnits);
					

					System.out.println("************checkTaxCodeBySelectingWACOGSRMAItemInSeventhRowOfPurchaseVoucherVAT*************");
					
					System.out.println("Warehouse       : " + actWarehouse	+ " Value Expected : "+expWarehouse);
					System.out.println("Item            : " + actItem		+ " Value Expected : "+expItem);
					System.out.println("TaxCode         : " + actTaxCode	+ " Value Expected : "+expTaxCode);
					System.out.println("Units           : " + actUnits		+ " Value Expected : "+expUnits);
					System.out.println("Purchase Account           : " + actPurchaseAccount		+ " Value Expected : "+expPurchaseAccount);
				
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select7thRow_9thColumn));
					select7thRow_9thColumn.click();
					
					if(actTaxCode.equalsIgnoreCase(expTaxCode) && actWarehouse.equalsIgnoreCase(expWarehouse) && 
							actItem.equalsIgnoreCase(expItem) && actUnits.equalsIgnoreCase(expUnits) && 
							actPurchaseAccount.equalsIgnoreCase(expPurchaseAccount))
					
					{
						System.out.println("Test Pass : Data Entered in Seventh Row");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 235, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail : Data NOT Entered in Seventh Row");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 235, 9, resFail);
						return false;
					}
					}
					catch (Exception e) 
					{
						String exception =e.getMessage();
						excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 235, 10, exception);
						System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				   	 	return false;
					}
				}
				

				
				public boolean checkAvGRateAndAVGRateOBySelectingWACOGSRMAItemInSeventhRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
				{
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
						
				try
				{
					
					
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select7thRow_6thColumn));
					select7thRow_6thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select7thRow_7thColumn));
					select7thRow_7thColumn.click();
					
									
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select7thRow_8thColumn));
					select7thRow_8thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select7thRow_9thColumn));
					select7thRow_9thColumn.click();
						
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select7thRow_7thColumn));
					String actR1C1AVGRate =select7thRow_7thColumn.getText();			
					String expR1C1AVGRate =excelReader.getCellData("PurchaseVoucherVAT", 241, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 241, 8, actR1C1AVGRate);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select7thRow_8thColumn));
					String actR1C1AVGRateO =select7thRow_8thColumn.getText();			
					String expR1C1AVGRateO =excelReader.getCellData("PurchaseVoucherVAT", 242, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 242, 8, actR1C1AVGRateO);
							
							
					System.out.println("******************* checkAvGRateAndAVGRateOBySelectingWACOGSRMAItemInSeventhRowPurchaseVoucherVAT  *************************************");
					
					System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1AVGRate   +" Value Expected : "+expR1C1AVGRate);	
					System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1AVGRateO   +" Value Expected : "+expR1C1AVGRateO);
													
					if(actR1C1AVGRate.equalsIgnoreCase(expR1C1AVGRate) && actR1C1AVGRateO.equalsIgnoreCase(expR1C1AVGRateO))
					{
						System.out.println("Test Pass : Avg rate is updated");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 240, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail : Avg Rate is not Updated ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 240, 9, resFail);
						return false;
					}
					}
					catch (Exception e) 
					{
						String exception =e.getMessage();
						excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 240, 10, exception);
						System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				   	 	return false;
					}

				}
				

				
				
				
				
				public boolean checkGrossBySelectingWACOGSRMAItemInSeventhRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
				{
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
					try
					{
							
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
					enter_Quantity.click();
					enter_Quantity.clear();
					enter_Quantity.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 244, 6));
					enter_Quantity.sendKeys(Keys.TAB);
					
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
					enter_Rate.click();
					enter_Rate.clear();
					enter_Rate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 245, 6));
					enter_Rate.sendKeys(Keys.TAB);
									
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
					enter_Gross.click();
					enter_Gross.sendKeys(Keys.TAB);

					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select7thRow_12thColumn));
					String actR1C1Gross =select7thRow_12thColumn.getText();			
					String expR1C1Gross =excelReader.getCellData("PurchaseVoucherVAT", 246, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 246, 8, actR1C1Gross);
							
					System.out.println("************** checkGrossBySelectingWACOGSRMAItemInSeventhRowPurchaseVoucherVAT  ****************************************");
					
					System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1Gross   +" Value Expected : "+expR1C1Gross);	
													
					if(actR1C1Gross.equalsIgnoreCase(expR1C1Gross) )
					{
						System.out.println("Test Pass : Gross is Updated As Expected ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 243, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail : Gross is Not Updated As Expected");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 243, 9, resFail);
						return false;
					}
					}
					catch (Exception e) 
					{
						String exception =e.getMessage();
						excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 243, 10, exception);
						System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				   	 	return false;
					}
				}
				

				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[11]")
				private static WebElement  select7thRow_10thColumn;
				
				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[12]")
				private static WebElement  select7thRow_11thColumn;

				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[13]")
				private static WebElement  select7thRow_12thColumn;

				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[14]")
				private static WebElement  select7thRow_13thColumn;

				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[15]")
				private static WebElement  select7thRow_14thColumn;

				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[16]")
				private static WebElement  select7thRow_15thColumn;
				
				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[17]")
				private static WebElement  select7thRow_16thColumn;
				
				
				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[18]")
				private static WebElement  select7thRow_17thColumn;
				
				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[19]")
				private static WebElement  select7thRow_18thColumn;
				
				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[20]")
				private static WebElement  select7thRow_19thColumn;
				
				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[21]")
				private static WebElement  select7thRow_20thColumn;
				
				
				public boolean checkVATValueBySelectingWACOGSRMAItemInSeventhRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
				{
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
					try
					{
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select7thRow_14thColumn));
					select7thRow_14thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvVat));
					enter_PvVat.click();
					enter_PvVat.sendKeys(Keys.TAB);
					
					
					String actR1C1VAT =select7thRow_14thColumn.getText();			
					String expR1C1VAT =excelReader.getCellData("PurchaseVoucherVAT", 248, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 248, 8, actR1C1VAT);
							
					System.out.println("***********************checkVATValueBySelectingWACOGSRMAItemInSeventhRowPurchaseVoucherVAT*************************************");
					
					System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1VAT   +" Value Expected : "+expR1C1VAT);	

					
					if(actR1C1VAT.equalsIgnoreCase(expR1C1VAT))
					{
						System.out.println("Test Pass : PV VAT Value Is Updated ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 237, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail : PV VAT Value is Not Updated ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 237, 9, resFail);
						return false;
					}
					}
					catch (Exception e) 
					{
						String exception =e.getMessage();
						excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 237, 10, exception);
						System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				   	 	return false;
					}
				}
				
				
				
				public boolean checkTaxableValueBySelectingWACOGSRMAItemInSeventhRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
				{
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
					try
					{
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxable));
					enter_PvTaxable.click();
					
					String actR1C1Taxable =enter_PvTaxable.getAttribute("value");			
					String expR1C1Taxable =excelReader.getCellData("PurchaseVoucherVAT", 249, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 249, 8, actR1C1Taxable);
				
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
					saveBtn.click();
					
					String expErrorMessage =excelReader.getCellData("PurchaseVoucherVAT", 250, 7);;
					String validationMessage=checkValidationMessage(expErrorMessage);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 250, 8, validationMessage);
					
					
					System.out.println("********************************checkTaxableValueBySelectingWACOGSRMAItemInSeventhRowPurchaseVoucherVAT***********************************");
					System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1Taxable   +" Value Expected : "+expR1C1Taxable);	
													
					if(actR1C1Taxable.equalsIgnoreCase(expR1C1Taxable)  && validationMessage.equalsIgnoreCase(expErrorMessage))
					{
						
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 249, 9, resPass);
						return true;
					}
					else
					{
						
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 249, 9, resFail);
						return false;
					}
					}
					catch (Exception e) 
					{
						String exception =e.getMessage();
						excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 249, 10, exception);
						System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				   	 	return false;
					}
				}

			 
			 
		 

			    
			    public boolean checkAddAndOkButtonInRmaPageOfPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
				{
					
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
					try
					{
						
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select7thRow_19thColumn));
					select7thRow_19thColumn.click();
						
						
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaSerialNumberTxtField));
					rmaSerialNumberTxtField.click();
					rmaSerialNumberTxtField.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 252, 6));
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaAddBtn));
					rmaAddBtn.click();
							
					// Actual
					String  actRmaRow1=rma_EnterRMA.getAttribute("value");
					
					// Expected
					String  expRmaRow1=excelReader.getCellData("PurchaseVoucherVAT", 252, 7);
					
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 252, 8, actRmaRow1);
					
					System.out.println("******************* checkAddAndOkButtonInRmaPageOfPurchaseVoucherVAT  *********************************");
					
					System.out.println("Rma Row 1 Serial Number   : "+actRmaRow1	   +"  Value Expected : "+expRmaRow1);
				
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaOkBtn));
					rmaOkBtn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
					String actRMATxt=enter_RMA.getAttribute("value");
					
					String expRMATxt=excelReader.getCellData("PurchaseVoucherVAT", 253, 7);
					
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 253, 8, actRMATxt);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
				    enter_RMA.sendKeys(Keys.TAB);

					enter_PvRemarks.sendKeys(Keys.TAB);
					
					if(actRmaRow1.equalsIgnoreCase(expRmaRow1) && actRMATxt.equalsIgnoreCase(expRMATxt))
					{
						System.out.println("Test Pass : 1 Row Displayed");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 251, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail : 1 Row NOT Displayed");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 251, 9, resFail);
						return false;
					}
					}
					catch (Exception e) 
					{
						String exception =e.getMessage();
						excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 251, 10, exception);
						System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				   	 	return false;
					}

	             }
				
		
		  
	    public boolean checkTaxCodeBySelectingWACOGSRMAItemInEightRowOfPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select8thRow_1stColumn));
				select8thRow_1stColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
				enter_WarehouseTxt.click();
				enter_WarehouseTxt.sendKeys(Keys.END);
				enter_WarehouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
				enter_WarehouseTxt.sendKeys(Keys.SPACE);
					
				int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
				
				for (int i = 0; i < pvvGridWarehouseListCount; i++) 
				{
					String warehouse=pvvGridWarehouseList.get(i).getText();
					if (warehouse.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 255, 6))) 
					{
						pvvGridWarehouseList.get(i).click();
						break;
					}
				}
		        enter_WarehouseTxt.sendKeys(Keys.TAB);
					
		        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
				enter_ItemTxt.click();
				enter_ItemTxt.sendKeys(Keys.SPACE);
		        int pvvGridItemListCount=pvvGridItemList.size();
				for (int i = 0; i < pvvGridItemListCount; i++) 
				{
					String Item=pvvGridItemList.get(i).getText();
					if (Item.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 256, 6))) 
					{
						pvvGridItemList.get(i).click();
						break;
					}
				}
				enter_ItemTxt.sendKeys(Keys.TAB);
			
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
				
			    enter_PvTaxCode.click();
			        
			   /* enter_PvTaxCode.sendKeys(Keys.SHIFT,Keys.HOME,Keys.BACK_SPACE);
			    Thread.sleep(1000);
			        
			    enter_PvTaxCode.sendKeys(Keys.BACK_SPACE);
			        
			    enter_PvTaxCode.sendKeys(Keys.SHIFT,Keys.HOME);
			        
			    enter_PvTaxCode.sendKeys(Keys.SPACE);
			        
			    int pvvGridTaxCodeListCount=pvvGridTaxCodeList.size(); 
			        
			    System.err.println("pvvGridTaxCodeListCount "+pvvGridTaxCodeListCount);
			        
				for (int i = 0; i < pvvGridTaxCodeListCount; i++) 
				{
					String Taxable=pvvGridTaxCodeList.get(i).getText();
						
					if (Taxable.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 257, 6))) 
					{
						pvvGridTaxCodeList.get(i).click();
						break;
					}
				}
			    enter_PvTaxCode.sendKeys(Keys.TAB);*/
			
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select8thRow_5thColumn));
				select8thRow_5thColumn.click();
									
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select8thRow_9thColumn));
				select8thRow_9thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select8thRow_1stColumn));
				String actWarehouse=select8thRow_1stColumn.getText();
				String expWarehouse=excelReader.getCellData("PurchaseVoucherVAT", 255, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 255, 8, actWarehouse);
								
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select8thRow_2ndColumn));
				String actItem=select8thRow_2ndColumn.getText();
				String expItem=excelReader.getCellData("PurchaseVoucherVAT", 256, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 256, 8, actItem);
							
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select8thRow_3rdColumn));
				String actTaxCode=select8thRow_3rdColumn.getText();
				String expTaxCode=excelReader.getCellData("PurchaseVoucherVAT", 257, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 257, 8, actTaxCode);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select8thRow_4thColumn));
				String actPurchaseAccount=select8thRow_4thColumn.getText();
				String expPurchaseAccount=excelReader.getCellData("PurchaseVoucherVAT", 254, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 254, 8, actPurchaseAccount);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select8thRow_5thColumn));
				String actUnits=select8thRow_5thColumn.getText();
				String expUnits=excelReader.getCellData("PurchaseVoucherVAT", 258, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 258, 8, actUnits);
				
				System.out.println("*******************checkTaxCodeBySelectingWACOGSRMAItemInEightRowOfPurchaseVoucherVAT******************");
				
				System.out.println("Warehouse       : " + actWarehouse	+ " Value Expected : "+expWarehouse);
				System.out.println("Item            : " + actItem		+ " Value Expected : "+expItem);
				System.out.println("TaxCode         : " + actTaxCode	+ " Value Expected : "+expTaxCode);
				System.out.println("Units           : " + actUnits		+ " Value Expected : "+expUnits);
			    System.out.println("PurchaseAccount   :     "+actPurchaseAccount+ " Value Expected : "+expPurchaseAccount);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select8thRow_9thColumn));
				select8thRow_9thColumn.click();
				
				if(actTaxCode.equalsIgnoreCase(expTaxCode) && actWarehouse.equalsIgnoreCase(expWarehouse) && 
						actItem.equalsIgnoreCase(expItem) && actUnits.equalsIgnoreCase(expUnits) && 
						actPurchaseAccount.equalsIgnoreCase(expPurchaseAccount))
				
				{
					System.out.println("Test Pass : Data Entered in eigth Row");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 254, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Data NOT Entered in first Row");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 254, 9, resFail);
					return false;
				}
		 }
				catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 254, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			   	 	return false;
				}
			}
			

			
			public boolean checkAvGRateAndAVGRateOBySelectingWACOGSRMAItemInEigthRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		    try
		    {
		    	
		    	
		    	
		    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select8thRow_6thColumn));
				select8thRow_6thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select8thRow_7thColumn));
				select8thRow_7thColumn.click();
				
								
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select8thRow_8thColumn));
				select8thRow_8thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select8thRow_9thColumn));
				select8thRow_9thColumn.click();
						
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select8thRow_7thColumn));
				
				String actR1C1AVGRate =select8thRow_7thColumn.getText();			
				String expR1C1AVGRate =excelReader.getCellData("PurchaseVoucherVAT", 260, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 260, 8, actR1C1AVGRate);
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select8thRow_8thColumn));
				String actR1C1AVGRateO =select8thRow_8thColumn.getText();			
				String expR1C1AVGRateO =excelReader.getCellData("PurchaseVoucherVAT", 261, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 261, 8, actR1C1AVGRateO);
						
						
				System.out.println("************************checkAvGRateAndAVGRateOBySelectingWACOGSRMAItemInEigthRowPurchaseVoucherVAT****************************************");
				
				System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1AVGRate   +" Value Expected : "+expR1C1AVGRate);	
				System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1AVGRateO   +" Value Expected : "+expR1C1AVGRateO);
												
				if(actR1C1AVGRate.equalsIgnoreCase(expR1C1AVGRate) && actR1C1AVGRateO.equalsIgnoreCase(expR1C1AVGRateO))
				{
					System.out.println("Test Pass :Avg rate Is Updated");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 259, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail :Avg rate is Not updated");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 259, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 259, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
			}
			}
			

			
			
			
			
			public boolean checkGrossBySelectingWACOGSRMAItemIEigthRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
				enter_Quantity.click();
				enter_Quantity.clear();
				enter_Quantity.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 263, 6));
				enter_Quantity.sendKeys(Keys.TAB);
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
				enter_Rate.click();
				enter_Rate.clear();
				enter_Rate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 264, 6));
				enter_Rate.sendKeys(Keys.TAB);
								
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
				enter_Gross.click();
				enter_Gross.sendKeys(Keys.TAB);

				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select8thRow_12thColumn));
				
				String actR1C1Gross =select8thRow_12thColumn.getText();			
				String expR1C1Gross =excelReader.getCellData("PurchaseVoucherVAT", 265, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 265, 8, actR1C1Gross);
						
				System.out.println("**********************checkGrossBySelectingWACOGSRMAItemIEigthRowPurchaseVoucherVAT******************************************");
				System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1Gross   +" Value Expected : "+expR1C1Gross);	
												
				if(actR1C1Gross.equalsIgnoreCase(expR1C1Gross) )
				{
					System.out.println("Test Pass : Gross is Updated ");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 262, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Gross is not updated ");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 262, 9, resFail);
					return false;
				}
				}
				catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 262, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			   	 	return false;
				}
			}

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[11]")
			private static WebElement  select8thRow_10thColumn;

			
			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[12]")
			private static WebElement  select8thRow_11thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[13]")
			private static WebElement  select8thRow_12thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[14]")
			private static WebElement  select8thRow_13thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[15]")
			private static WebElement  select8thRow_14thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[16]")
			private static WebElement  select8thRow_15thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[17]")
			private static WebElement  select8thRow_16thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[18]")
			private static WebElement  select8thRow_17thColumn;
			
			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[19]")
			private static WebElement  select8thRow_18thColumn;
			
			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[20]")
			private static WebElement  select8thRow_19thColumn;
			
			
			
			public boolean checkVATValueBySelectingWACOGSRMAItemInEightRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select8thRow_14thColumn));
				select8thRow_14thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvVat));
				enter_PvVat.click();
				
				enter_PvVat.sendKeys(Keys.TAB);
				
				
				String actR1C1VAT =select8thRow_14thColumn.getText();			
				String expR1C1VAT =excelReader.getCellData("PurchaseVoucherVAT", 267, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 267, 8, actR1C1VAT);
						
				System.out.println("*************************************checkVATValueBySelectingWACOGSRMAItemInEightRowPurchaseVoucherVAT***********************************");
				System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1VAT   +" Value Expected : "+expR1C1VAT);	

				
				if(actR1C1VAT.equalsIgnoreCase(expR1C1VAT))
				{
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 266, 9, resPass);
					return true;
				}
				else
				{
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 266, 9, resFail);
					return false;
				}
				}
				catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 266, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			   	 	return false;
				}
			}
			
			
			
			public boolean checkTaxableValueBySelectingWACOGSRMAItemInEigthRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxable));
				enter_PvTaxable.click();
				enter_PvTaxable.sendKeys(Keys.TAB);
				
				String actR1C1Taxable =select8thRow_15thColumn.getText();			
				String expR1C1Taxable =excelReader.getCellData("PurchaseVoucherVAT", 269, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 269, 8, actR1C1Taxable);
			
				
				System.out.println("**************************checkTaxableValueBySelectingWACOGSRMAItemInEigthRowPurchaseVoucherVAT**********************************");
				
				System.out.println("Entry Page Taxable Value Actual  : "+actR1C1Taxable   +" Value Expected : "+expR1C1Taxable);	
												
				if(actR1C1Taxable.equalsIgnoreCase(expR1C1Taxable) )
				{
					System.out.println("Test Pass : Displayed Value  Taxable ");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 268, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Not Displayed Taxable Value ");
					excelReader.setCellData(xlfile, "Sheet6", 268, 9, resFail);
					return false;
				}
				}
				catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 268, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			   	 	return false;
				}
			}

		 
		 
	 

		    
		    public boolean checkAddAndOkButtonInRmaPageEigthRowOfPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaSerialNumberTxtField));
				rmaSerialNumberTxtField.click();
				rmaSerialNumberTxtField.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 271, 6));
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaAddBtn));
				rmaAddBtn.click();
						
				// Actual
				String  actRmaRow1=rma_EnterRMA.getAttribute("value");
				
				// Expected
				String  expRmaRow1=excelReader.getCellData("PurchaseVoucherVAT", 271, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 271, 8, actRmaRow1);
				
				System.out.println("********************************checkAddAndOkButtonInRmaPageEigthRowOfPurchaseVoucherVAT*****************************");
				
				System.out.println("Rma Row 1 Serial Number   : "+actRmaRow1	   +"  Value Expected : "+expRmaRow1);
			
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaOkBtn));
				rmaOkBtn.click();

				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select8thRow_17thColumn));
				
				String actRMATxt=enter_RMA.getAttribute("value");
				
				String expRMATxt=excelReader.getCellData("PurchaseVoucherVAT", 272, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 272, 8, actRMATxt);
				
				System.out.println("Rma Row 1 Serial Number   : "+actRMATxt	   +"  Value Expected : "+expRMATxt);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
				enter_RMA.sendKeys(Keys.TAB);
				
				enter_PvRemarks.sendKeys(Keys.TAB);
				
				if(actRmaRow1.equalsIgnoreCase(expRmaRow1) )
				{
					System.out.println("Test Pass : 1 Row Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 270, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : 1 Row NOT Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 270, 9, resFail);
					return false;
				}
				}
				catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 270, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			   	 	return false;
				}
	         }

	  
		    
		    public boolean checkTaxCodeBySelectingWACOGSRMAItemInNinethRowOfPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
					try
					{
								
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select9thRow_1stColumn));
					select9thRow_1stColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
					enter_WarehouseTxt.click();
					enter_WarehouseTxt.sendKeys(Keys.END);
					enter_WarehouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
					enter_WarehouseTxt.sendKeys(Keys.SPACE);
						
					int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
					
					for (int i = 0; i < pvvGridWarehouseListCount; i++) 
					{
						String warehouse=pvvGridWarehouseList.get(i).getText();
						if (warehouse.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 274, 6))) 
						{
							pvvGridWarehouseList.get(i).click();
							break;
						}
					}
			        enter_WarehouseTxt.sendKeys(Keys.TAB);
						
			        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
					enter_ItemTxt.click();
					enter_ItemTxt.sendKeys(Keys.SPACE);
			        int pvvGridItemListCount=pvvGridItemList.size();
					for (int i = 0; i < pvvGridItemListCount; i++) 
					{
						String Item=pvvGridItemList.get(i).getText();
						if (Item.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 275, 6))) 
						{
							pvvGridItemList.get(i).click();
							break;
						}
					}
					enter_ItemTxt.sendKeys(Keys.TAB);
				
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
					
				    enter_PvTaxCode.click();
				        
				   /* enter_PvTaxCode.sendKeys(Keys.SHIFT,Keys.HOME,Keys.BACK_SPACE);
				    Thread.sleep(1000);
				        
				    enter_PvTaxCode.sendKeys(Keys.BACK_SPACE);
				        
				    enter_PvTaxCode.sendKeys(Keys.SHIFT,Keys.HOME);
				        
				    enter_PvTaxCode.sendKeys(Keys.SPACE);
				        
				    int pvvGridTaxCodeListCount=pvvGridTaxCodeList.size(); 
				        
				    System.err.println("pvvGridTaxCodeListCount "+pvvGridTaxCodeListCount);
				        
					for (int i = 0; i < pvvGridTaxCodeListCount; i++) 
					{
						String Taxable=pvvGridTaxCodeList.get(i).getText();
							
						if (Taxable.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 276, 6))) 
						{
							pvvGridTaxCodeList.get(i).click();
							break;
						}
					}
				    enter_PvTaxCode.sendKeys(Keys.TAB);*/
				
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select9thRow_5thColumn));
					select9thRow_5thColumn.click();
										
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select9thRow_9thColumn));
					select9thRow_9thColumn.click();
					

					String actWarehouse=select9thRow_1stColumn.getText();
					String expWarehouse=excelReader.getCellData("PurchaseVoucherVAT", 274, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 274, 8, actWarehouse);
									
					String actItem=select9thRow_2ndColumn.getText();
					String expItem=excelReader.getCellData("PurchaseVoucherVAT", 275, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 275, 8, actItem);
								
					String actTaxCode=select9thRow_3rdColumn.getText();
					String expTaxCode=excelReader.getCellData("PurchaseVoucherVAT", 276, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 276, 8, actTaxCode);
					
					String actPurchaseAccount=select9thRow_4thColumn.getText();
					String expPurchaseAccount=excelReader.getCellData("PurchaseVoucherVAT", 273, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 273, 8, actPurchaseAccount);
					
					String actUnits=select9thRow_5thColumn.getText();
					String expUnits=excelReader.getCellData("PurchaseVoucherVAT", 277, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 277, 8, actUnits);
					
					System.out.println("*******************checkTaxCodeBySelectingWACOGSRMAItemInNinethRowOfPurchaseVoucherVAT******************");
					
					System.out.println("Warehouse       : " + actWarehouse	+ " Value Expected : "+expWarehouse);
					System.out.println("Item            : " + actItem		+ " Value Expected : "+expItem);
					System.out.println("TaxCode         : " + actTaxCode	+ " Value Expected : "+expTaxCode);
					System.out.println("Units           : " + actUnits		+ " Value Expected : "+expUnits);
					System.out.println("PurchaseAccount   : "+actPurchaseAccount +" Value Expected  : "+expPurchaseAccount);
					
				
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select9thRow_9thColumn));
					select9thRow_9thColumn.click();
					
					if(actTaxCode.equalsIgnoreCase(expTaxCode) && actWarehouse.equalsIgnoreCase(expWarehouse) && 
							actItem.equalsIgnoreCase(expItem) && actUnits.equalsIgnoreCase(expUnits) && 
							actPurchaseAccount.equalsIgnoreCase(expPurchaseAccount))
					
					{
						System.out.println("Test Pass : Data Entered in eigth Row");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 273, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail : Data NOT Entered in Eight Row");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 273, 9, resFail);
						return false;
					}
			 }
					catch (Exception e) 
					{
						String exception =e.getMessage();
						excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 273, 10, exception);
						System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				   	 	return false;
					}
				}
				
				
				public boolean checkAvGRateAndAVGRateOBySelectingWACOGSRMAItemInNinethRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
				{
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
						
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select9thRow_6thColumn));
					select9thRow_6thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select9thRow_7thColumn));
					select9thRow_7thColumn.click();
					
									
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select9thRow_8thColumn));
					select9thRow_8thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select9thRow_9thColumn));
					select9thRow_9thColumn.click();
						
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select9thRow_7thColumn));
					
					
					String actR1C1AVGRate =select9thRow_7thColumn.getText();			
					String expR1C1AVGRate =excelReader.getCellData("PurchaseVoucherVAT", 279, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 279, 8, actR1C1AVGRate);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select9thRow_8thColumn));
					String actR1C1AVGRateO =select9thRow_8thColumn.getText();			
					String expR1C1AVGRateO =excelReader.getCellData("PurchaseVoucherVAT", 280, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 280, 8, actR1C1AVGRateO);
							
							
					System.out.println("***********************checkAvGRateAndAVGRateOBySelectingWACOGSRMAItemInNinethRowPurchaseVoucherVAT*******************");
					
					System.out.println("Entry Page Avg Rate  Value Actual      : "+actR1C1AVGRate    +" Value Expected : "+expR1C1AVGRate);	
					System.out.println("Entry Page Avgg Rate (o) Value Actual  : "+actR1C1AVGRateO   +" Value Expected : "+expR1C1AVGRateO);
													
					if(actR1C1AVGRate.equalsIgnoreCase(expR1C1AVGRate) &&  actR1C1AVGRateO.equalsIgnoreCase(expR1C1AVGRateO))
					{
						System.out.println("Test Pass : Avg Rate Is Updated ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 278, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail : Avg Rate is Not Updated ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 278, 9, resFail);
						return false;
					}
				}


	              catch (Exception e) 
					{
						String exception =e.getMessage();
						excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 278, 10, exception);
						System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				   	 	return false;
					}
	       }

				public boolean checkGrossBySelectingWACOGSRMAItemInNinethRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
				{
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
					try
					{
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
					enter_Quantity.click();
					enter_Quantity.clear();
					enter_Quantity.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 282, 6));
					enter_Quantity.sendKeys(Keys.TAB);
					
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
					enter_Rate.click();
					enter_Rate.clear();
					enter_Rate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 283, 6));
					enter_Rate.sendKeys(Keys.TAB);
									
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
					enter_Gross.click();
					enter_Gross.sendKeys(Keys.TAB);

					Thread.sleep(2000);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select9thRow_12thColumn));
					String actR1C1Gross =select9thRow_12thColumn.getText();			
					String expR1C1Gross =excelReader.getCellData("PurchaseVoucherVAT", 284, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 284, 8, actR1C1Gross);
							
					System.out.println("**************** checkGrossBySelectingWACOGSRMAItemInNinethRowPurchaseVoucherVAT  ****************************");
					System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1Gross   +" Value Expected : "+expR1C1Gross);	
													
					if(actR1C1Gross.equalsIgnoreCase(expR1C1Gross) )
					{
						System.out.println("Test Pass : Displayed Gross Value ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 281, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail : Not Displayed Gross Value ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 281, 9, resFail);
						return false;
					}
					}
					catch (Exception e) 
					{
						String exception =e.getMessage();
						excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 281, 10, exception);
						System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				   	 	return false;
					}
				}
				


				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[11]")
				private static WebElement  select9thRow_10thColumn;

				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[12]")
				private static WebElement  select9thRow_11thColumn;

				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[13]")
				private static WebElement  select9thRow_12thColumn;

				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[14]")
				private static WebElement  select9thRow_13thColumn;

				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[15]")
				private static WebElement  select9thRow_14thColumn;
				
				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[16]")
				private static WebElement  select9thRow_15thColumn;
				
				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[17]")
				private static WebElement  select9thRow_16thColumn;
				
				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[18]")
				private static WebElement  select9thRow_17thColumn;
				
				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[19]")
				private static WebElement  select9thRow_18thColumn;
				
				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[20]")
				private static WebElement  select9thRow_19thColumn;
				
				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[21]")
				private static WebElement  select9thRow_20thColumn;

				
				public boolean checkVATValueBySelectingWACOGSRMAItemInNinethRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
				{
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
					try
					{
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select9thRow_14thColumn));
					select9thRow_14thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvVat));
					enter_PvVat.click();
					enter_PvVat.sendKeys(Keys.TAB);
					
					String actR1C1VAT =select9thRow_14thColumn.getText();			
					String expR1C1VAT =excelReader.getCellData("PurchaseVoucherVAT", 286, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 286, 8, actR1C1VAT);
							
					System.out.println("************* checkVATValueBySelectingWACOGSRMAItemInNinethRowPurchaseVoucherVAT  *************************************");
					System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1VAT   +" Value Expected : "+expR1C1VAT);	

					
					if(actR1C1VAT.equalsIgnoreCase(expR1C1VAT))
					{
						System.out.println("Test Pass :Diplayed PV VAT Value ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 285, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail : Not Displayed PV VAT Value  ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 285, 9, resFail);
						return false;
					}
					}
					catch (Exception e) 
					{
						String exception =e.getMessage();
						excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 285, 10, exception);
						System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				   	 	return false;
					}
				}
				
				
				
				public boolean checkTaxableValueBySelectingWACOGSRMAItemInNinethRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
				{
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
					try
					{
					Thread.sleep(2000);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxable));
					enter_PvTaxable.click();
					enter_PvTaxable.sendKeys(Keys.TAB);
							
					
					String actR1C1Taxable =select9thRow_15thColumn.getText();			
					String expR1C1Taxable =excelReader.getCellData("PurchaseVoucherVAT", 288, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 288, 8, actR1C1Taxable);
				
					
					System.out.println("*********************checkTaxableValueBySelectingWACOGSRMAItemInNinethRowPurchaseVoucherVAT*************************************");
					System.out.println("Taxable  Value Actual  : "+actR1C1Taxable   +" Value Expected : "+expR1C1Taxable);	
													
					if(actR1C1Taxable.equalsIgnoreCase(expR1C1Taxable) )
					{
						System.out.println("Test Pass :Taxable Value is Displayed ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 287, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail : Taxable Value is Not Displayed ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 287, 9, resFail);
						return false;
					}
					}
					catch (Exception e) 
					{
						String exception =e.getMessage();
						excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 287, 10, exception);
						System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				   	 	return false;
					}
				}

			 
			 
		 

			    
			    public boolean checkAddAndOkButtonInRmaPageNinethRowOfPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
				{
					
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
					try
					{
						
					Thread.sleep(2000);
						
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaSerialNumberTxtField));
					rmaSerialNumberTxtField.click();
					rmaSerialNumberTxtField.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 290, 6));
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaAddBtn));
					rmaAddBtn.click();
							
					// Actual
					String  actRmaRow1=rma_EnterRMA.getAttribute("value");
					
					// Expected
					String  expRmaRow1=excelReader.getCellData("PurchaseVoucherVAT", 290, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 290, 8, actRmaRow1);

					
					System.out.println("************************************* checkRmaWithSerialNumbersNotCompletely  *********************************");
					
					System.out.println("Rma Row 1 Serial Number   : "+actRmaRow1	   +"  Value Expected : "+expRmaRow1);
				
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaOkBtn));
					rmaOkBtn.click();

					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select8thRow_17thColumn));
					String actRMATxt=enter_RMA.getAttribute("value");
					
					String expRMATxt=excelReader.getCellData("PurchaseVoucherVAT", 272, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 272, 8, actRMATxt);
					
					System.out.println("RMATxt     :"+actRMATxt +"     Value Expected : "+expRMATxt);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
					enter_RMA.sendKeys(Keys.TAB);
					
					enter_PvRemarks.sendKeys(Keys.TAB);
					
					if(actRmaRow1.equalsIgnoreCase(expRmaRow1))
					{
						System.out.println("Test Pass :RMA Value is  Displayed");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 289, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail : RMA Value is NOt  Displayed");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 289, 9, resFail);
						return false;
					}
					}
					catch (Exception e) 
					{
						String exception =e.getMessage();
						excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 289, 10, exception);
						System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				   	 	return false;
					}
	             }

	    
			 //Checking Pending Status in the Home Page
				
				




		
		public boolean checkTaxCodeBySelectingStdCOGSItemInTenthRowOfPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
						
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select10thRow_1stColumn));
			select10thRow_1stColumn.click();
			

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
			enter_WarehouseTxt.click();
			enter_WarehouseTxt.sendKeys(Keys.END);
			enter_WarehouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			enter_WarehouseTxt.sendKeys(Keys.SPACE);
				
			int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
			
			for (int i = 0; i < pvvGridWarehouseListCount; i++) 
			{
				String warehouse=pvvGridWarehouseList.get(i).getText();
				if (warehouse.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 293, 6))) 
				{
					pvvGridWarehouseList.get(i).click();
					break;
				}
			}
	        enter_WarehouseTxt.sendKeys(Keys.TAB);
				
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.click();
			enter_ItemTxt.sendKeys(Keys.SPACE);
	        int pvvGridItemListCount=pvvGridItemList.size();
			for (int i = 0; i < pvvGridItemListCount; i++) 
			{
				String Item=pvvGridItemList.get(i).getText();
				if (Item.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 294, 6))) 
				{
					pvvGridItemList.get(i).click();
					break;
				}
			}
			enter_ItemTxt.sendKeys(Keys.TAB);
		
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
			
		    enter_PvTaxCode.click();
		        
		    /*enter_PvTaxCode.sendKeys(Keys.SHIFT,Keys.HOME,Keys.BACK_SPACE);
		    Thread.sleep(1000);
		        
		    enter_PvTaxCode.sendKeys(Keys.BACK_SPACE);
		        
		    enter_PvTaxCode.sendKeys(Keys.SHIFT,Keys.HOME);
		        
		    enter_PvTaxCode.sendKeys(Keys.SPACE);
		        
		    int pvvGridTaxCodeListCount=pvvGridTaxCodeList.size(); 
		        
		    System.err.println("pvvGridTaxCodeListCount "+pvvGridTaxCodeListCount);
		        
			for (int i = 0; i < pvvGridTaxCodeListCount; i++) 
			{
				String Taxable=pvvGridTaxCodeList.get(i).getText();
					
				if (Taxable.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 295, 6))) 
				{
					pvvGridTaxCodeList.get(i).click();
					break;
				}
			}
		    enter_PvTaxCode.sendKeys(Keys.TAB);
	*/	
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select10thRow_5thColumn));
			select10thRow_5thColumn.click();
								
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select10thRow_9thColumn));
			select10thRow_9thColumn.click();
			

			String actWarehouse=select10thRow_1stColumn.getText();
			String expWarehouse=excelReader.getCellData("PurchaseVoucherVAT", 293, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 293, 8, actWarehouse);
							
			String actItem=select10thRow_2ndColumn.getText();
			String expItem=excelReader.getCellData("PurchaseVoucherVAT", 294, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 294, 8, actItem);
						
			String actTaxCode=select10thRow_3rdColumn.getText();
			String expTaxCode=excelReader.getCellData("PurchaseVoucherVAT", 295, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 295, 8, actTaxCode);
			
			String actPurchaseAccount=select10thRow_4thColumn.getText();
			String expPurchaseAccount=excelReader.getCellData("PurchaseVoucherVAT", 292, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 292, 8, actPurchaseAccount);
			
			
			String actUnits=select10thRow_5thColumn.getText();
			String expUnits=excelReader.getCellData("PurchaseVoucherVAT", 296, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 296, 8, actUnits);
			
			System.out.println("*******************checkTaxCodeBySelectingStdCOGSItemInTenthRowOfPurchaseVoucherVAT******************");
			
			System.out.println("Warehouse       : " + actWarehouse	+ " Value Expected : "+expWarehouse);
			System.out.println("Item            : " + actItem		+ " Value Expected : "+expItem);
			System.out.println("TaxCode         : " + actTaxCode	+ " Value Expected : "+expTaxCode);
			System.out.println("Units           : " + actUnits		+ " Value Expected : "+expUnits);
			System.out.println("PurchaseAccount      :  "+actPurchaseAccount+ " Value Expected : "+expPurchaseAccount);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select10thRow_9thColumn));
			select10thRow_9thColumn.click();
			
			if(actTaxCode.equalsIgnoreCase(expTaxCode) && actWarehouse.equalsIgnoreCase(expWarehouse) && 
					actItem.equalsIgnoreCase(expItem) && actUnits.equalsIgnoreCase(expUnits) && 
					actPurchaseAccount.equalsIgnoreCase(expPurchaseAccount))
			
			{
				System.out.println("Test Pass : Data Entered in TenthRow");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 292, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Data NOT Entered in TenthRow");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 292, 9, resFail);
				return false;
			}
			}
	         catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 292, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
			}
		}
		

		
		public boolean checkAvGRateAndAVGRateOBySelectingStdCOGSItemInTenthRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
					
		try
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select10thRow_6thColumn));
			select10thRow_6thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select10thRow_7thColumn));
			select10thRow_7thColumn.click();
			
							
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select10thRow_8thColumn));
			select10thRow_8thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select10thRow_9thColumn));
			select10thRow_9thColumn.click();
				
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select10thRow_7thColumn));
			
			String actR1C1AVGRate =select10thRow_7thColumn.getText();			
			String expR1C1AVGRate =excelReader.getCellData("PurchaseVoucherVAT", 298, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 298, 8, actR1C1AVGRate);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select10thRow_8thColumn));
			String actR1C1AVGRateO =select10thRow_8thColumn.getText();			
			String expR1C1AVGRateO =excelReader.getCellData("PurchaseVoucherVAT", 299, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 299, 8, actR1C1AVGRateO);
					
					
			System.out.println("*************************checkAvGRateAndAVGRateOBySelectingStdCOGSItemInTenthRowPurchaseVoucherVAT************");
			
			System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1AVGRate   +" Value Expected : "+expR1C1AVGRate);	
			System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1AVGRateO   +" Value Expected : "+expR1C1AVGRateO);
											
			if(actR1C1AVGRate.equalsIgnoreCase(expR1C1AVGRate) && actR1C1AVGRateO.equalsIgnoreCase(expR1C1AVGRateO) )
			{
				System.out.println("Test Pass : Dispalyed Avg  Rate");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 297, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Not Displayed Avg Rate ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 297, 9, resFail);
				return false;
			}
			}

	        catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 297, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
			}
		}
		

		
		
		public boolean checkGrossBySelectingStdCOGSItemInTenthRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.click();
			enter_Quantity.clear();
			enter_Quantity.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 301, 6));
			enter_Quantity.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.click();
			enter_Rate.clear();
			enter_Rate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 302, 6));
			enter_Rate.sendKeys(Keys.TAB);
							
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.click();
			enter_Gross.sendKeys(Keys.TAB);

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select10thRow_12thColumn));
			
			String actR1C1Gross =select10thRow_12thColumn.getText();			
			String expR1C1Gross =excelReader.getCellData("PurchaseVoucherVAT", 303, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 303, 8, actR1C1Gross);
					
			System.out.println("****************************checkGrossBySelectingStdCOGSItemInTenthRowPurchaseVoucherVAT*********************************");
			System.out.println("Entry Page Gross Value Actual  : "+actR1C1Gross   +" Value Expected : "+expR1C1Gross);	
											
			if(actR1C1Gross.equalsIgnoreCase(expR1C1Gross) )
			{
				System.out.println("Test Pass : Gross is updated");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 300, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail :Gross is not updated");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 300, 9, resFail);
				return false;
			}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 300, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
			}
		}
		
		
		
		public boolean checkVATValueBySelectingStdCOGSInTenthRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select10thRow_14thColumn));
			select10thRow_14thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvVat));
			enter_PvVat.click();
			enter_PvVat.clear();
			enter_PvVat.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 305, 6));
			enter_PvVat.sendKeys(Keys.TAB);
			
			
			String actR1C1VAT =select10thRow_14thColumn.getText();			
			String expR1C1VAT =excelReader.getCellData("PurchaseVoucherVAT", 305, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 305, 8, actR1C1VAT);
					
			System.out.println("**************************checkVATValueBySelectingStdCOGSInTenthRowPurchaseVoucherVAT**********************************");
			
			System.out.println("Entry Page VAT  Value Actual  : "+actR1C1VAT   +" Value Expected : "+expR1C1VAT);	

			
			if(actR1C1VAT.equalsIgnoreCase(expR1C1VAT))
			{
				System.out.println("Test Pass : VAT Value Displayed  ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 304, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : VAT Value Displayed ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 304, 9, resFail);
				return false;
			}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 304, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			 	return false;
			}
		}
		
		
		
		public boolean checkTaxableValueBySelectingStdCOGSInTenthRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			try
			{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxable));
			enter_PvTaxable.click();
			enter_PvTaxable.sendKeys(Keys.TAB);
					
			
			String actR1C1Taxable =select10thRow_15thColumn.getText();			
			String expR1C1Taxable =excelReader.getCellData("PurchaseVoucherVAT", 307, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 307, 8, actR1C1Taxable);
		
			enter_PvRemarks.sendKeys(Keys.TAB);
			
			System.out.println("*****************checkTaxableValueBySelectingStdCOGSInTenthRowPurchaseVoucherVAT***************************************");
			System.out.println("Entry Page TAXABLE  Value Actual  : "+actR1C1Taxable   +" Value Expected : "+expR1C1Taxable);	
											
			if(actR1C1Taxable.equalsIgnoreCase(expR1C1Taxable) )
			{
				System.out.println("Test Pass : Taxable Value Displayed ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 306, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Not Displayed Actual Value");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 306, 9, resFail);
				return false;
			}
			}

			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 306, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			 	return false;
			}
		}





		public boolean checkTaxCodeBySelectingStdCOGSInEleventhRowOfPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
							
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select11thRow_1stColumn));
				select11thRow_1stColumn.click();
				

				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
				enter_WarehouseTxt.click();
				enter_WarehouseTxt.sendKeys(Keys.END);
				enter_WarehouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
				enter_WarehouseTxt.sendKeys(Keys.SPACE);
					
				int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
				
				for (int i = 0; i < pvvGridWarehouseListCount; i++) 
				{
					String warehouse=pvvGridWarehouseList.get(i).getText();
					if (warehouse.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 309, 6))) 
					{
						pvvGridWarehouseList.get(i).click();
						break;
					}
				}
		        enter_WarehouseTxt.sendKeys(Keys.TAB);
					
		        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
				enter_ItemTxt.click();
				enter_ItemTxt.sendKeys(Keys.SPACE);
		        int pvvGridItemListCount=pvvGridItemList.size();
				for (int i = 0; i < pvvGridItemListCount; i++) 
				{
					String Item=pvvGridItemList.get(i).getText();
					if (Item.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 310, 6))) 
					{
						pvvGridItemList.get(i).click();
						break;
					}
				}
				enter_ItemTxt.sendKeys(Keys.TAB);
			
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
				
			    enter_PvTaxCode.click();
			        
			    /*enter_PvTaxCode.sendKeys(Keys.SHIFT,Keys.HOME,Keys.BACK_SPACE);
			    Thread.sleep(1000);
			        
			    enter_PvTaxCode.sendKeys(Keys.BACK_SPACE);
			        
			    enter_PvTaxCode.sendKeys(Keys.SHIFT,Keys.HOME);
			        
			    enter_PvTaxCode.sendKeys(Keys.SPACE);
			        
			    int pvvGridTaxCodeListCount=pvvGridTaxCodeList.size(); 
			        
			    System.err.println("pvvGridTaxCodeListCount "+pvvGridTaxCodeListCount);
			        
				for (int i = 0; i < pvvGridTaxCodeListCount; i++) 
				{
					String Taxable=pvvGridTaxCodeList.get(i).getText();
						
					if (Taxable.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 311, 6))) 
					{
						pvvGridTaxCodeList.get(i).click();
						break;
					}
				}
			    enter_PvTaxCode.sendKeys(Keys.TAB);
	*/
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select11thRow_5thColumn));
				select11thRow_5thColumn.click();
									
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select11thRow_9thColumn));
				select11thRow_9thColumn.click();
				
				String actWarehouse=select11thRow_1stColumn.getText();
				String expWarehouse=excelReader.getCellData("PurchaseVoucherVAT", 309, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 309, 8, actWarehouse);
								
				String actItem=select11thRow_2ndColumn.getText();
				String expItem=excelReader.getCellData("PurchaseVoucherVAT", 310, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 310, 8, actItem);
							
				String actTaxCode=select11thRow_3rdColumn.getText();
				String expTaxCode=excelReader.getCellData("PurchaseVoucherVAT", 311, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 311, 8, actTaxCode);
				
				String actPurchaseAccount=select11thRow_4thColumn.getText();
				String expPurchaseAccount=excelReader.getCellData("PurchaseVoucherVAT", 308, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 308, 8, actPurchaseAccount);
				
				String actUnits=select11thRow_5thColumn.getText();
				String expUnits=excelReader.getCellData("PurchaseVoucherVAT", 312, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 312, 8, actUnits);
				
				
				System.out.println("*******************checkTaxCodeBySelectingStdCOGSInEleventhRowOfPurchaseVoucherVAT******************");
				
				System.out.println("Warehouse       : " + actWarehouse	+ " Value Expected : "+expWarehouse);
				System.out.println("Item            : " + actItem		+ " Value Expected : "+expItem);
				System.out.println("TaxCode         : " + actTaxCode	+ " Value Expected : "+expTaxCode);
				System.out.println("Units           : " + actUnits		+ " Value Expected : "+expUnits);
				System.out.println(" PurchaseAccount  : "+actPurchaseAccount+ " Value Expected : "+expPurchaseAccount);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select11thRow_9thColumn));
				select11thRow_9thColumn.click();
				
				if(actTaxCode.equalsIgnoreCase(expTaxCode) && actWarehouse.equalsIgnoreCase(expWarehouse) && 
						actItem.equalsIgnoreCase(expItem) && actUnits.equalsIgnoreCase(expUnits) && 
						actPurchaseAccount.equalsIgnoreCase(expPurchaseAccount))
				
				{
					System.out.println("Test Pass : Data Entered in Eleventh Row");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 308, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Data NOT Entered in Eleventh Row");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 308, 9, resFail);
					return false;
				}
				}
				catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 308, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				 	return false;
				}
			}
		

		
		public boolean checkAvGRateAndAVGRateBySelectingStdCOGSInEleventhRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
				
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select11thRow_6thColumn));
			select11thRow_6thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select11thRow_7thColumn));
			select11thRow_7thColumn.click();
			
							
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select11thRow_8thColumn));
			select11thRow_8thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select11thRow_9thColumn));
			select11thRow_9thColumn.click();
				
				
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select11thRow_7thColumn));
			
			String actR1C1AVGRate =select11thRow_7thColumn.getText();			
			String expR1C1AVGRate =excelReader.getCellData("PurchaseVoucherVAT", 314, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 314, 8, actR1C1AVGRate);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select11thRow_8thColumn));
			String actR1C1AVGRateO =select11thRow_8thColumn.getText();			
			String expR1C1AVGRateO =excelReader.getCellData("PurchaseVoucherVAT", 315, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 315, 8, actR1C1AVGRateO);
					
					
			System.out.println("***************************checkAvGRateAndAVGRateBySelectingStdCOGSInEleventhRowPurchaseVoucherVAT*******************************");
			
			System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1AVGRate   +" Value Expected : "+expR1C1AVGRate);	
			System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1AVGRateO   +" Value Expected : "+expR1C1AVGRateO);
											
			if(actR1C1AVGRate.equalsIgnoreCase(expR1C1AVGRate)   && actR1C1AVGRateO.equalsIgnoreCase(expR1C1AVGRateO))
			{
				System.out.println("Test Pass : Displayed Avg Rate is Displayed ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 313, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Avg Rate is Not Displayed ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 313, 9, resFail);
				return false;
			}
			}
			
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 313, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			 	return false;
			}
		}
		

		public boolean checkGrossBySelectingStdCOGSItemInEleventhRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.click();
			enter_Quantity.clear();
			enter_Quantity.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 317, 6));
			enter_Quantity.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.click();
			enter_Rate.clear();
			enter_Rate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 318, 6));
			enter_Rate.sendKeys(Keys.TAB);
							
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.click();
			enter_Gross.sendKeys(Keys.TAB);

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select11thRow_12thColumn));
			String actR1C1Gross =select11thRow_12thColumn.getText();			
			String expR1C1Gross =excelReader.getCellData("PurchaseVoucherVAT", 319, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 319, 8, actR1C1Gross);
					
			System.out.println("*********************************checkGrossBySelectingStdCOGSItemInEleventhRowPurchaseVoucherVAT**********************************");
			
			System.out.println("Entry Page Gross  Value Actual  : "+actR1C1Gross   +" Value Expected : "+expR1C1Gross);	
											
			if(actR1C1Gross.equalsIgnoreCase(expR1C1Gross))
			{
				System.out.println("Test Pass : Gross Value is Displayed ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 316, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Gross Value is Not Displayed ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 316, 9, resFail);
				return false;
			}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 316, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			 	return false;
			}
			
		}
		
		
		
		public boolean checkVATValueBySelectingStdCOGSItemInEleventhRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select11thRow_14thColumn));
			select11thRow_14thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvVat));
			enter_PvVat.click();
			/*enter_PvVat.clear();
			enter_PvVat.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 321, 6));*/
			enter_PvVat.sendKeys(Keys.TAB);
			
			String actR1C1VAT =select11thRow_14thColumn.getText();			
			String expR1C1VAT =excelReader.getCellData("PurchaseVoucherVAT", 321, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 321, 8, actR1C1VAT);
					
			System.out.println("******************************checkVATValueBySelectingStdCOGSItemInEleventhRowPurchaseVoucherVAT***********************");
			System.out.println("Entry Page VAT Value Actual  : "+actR1C1VAT   +" Value Expected : "+expR1C1VAT);	

			
			if(actR1C1VAT.equalsIgnoreCase(expR1C1VAT))
			{
				System.out.println("Test Pass :Displayed Vat Value ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 320, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Displayed Vat Value");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 320, 9, resFail);
				return false;
			}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 320, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			 	return false;
			}
		}
		
		
		
		public boolean checkTaxableValueBySelectingStdCOGSItemInEleventhRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxable));
			enter_PvTaxable.click();
			enter_PvTaxable.sendKeys(Keys.TAB);
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select11thRow_15thColumn));
			String actR1C1Taxable =select11thRow_15thColumn.getText();			
			String expR1C1Taxable =excelReader.getCellData("PurchaseVoucherVAT", 323, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 323, 8, actR1C1Taxable);
		
			
			System.out.println("*****************************checkTaxableValueBySelectingStdCOGSItemInEleventhRowPurchaseVoucherVAT*****************************");
			
			System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1Taxable   +" Value Expected : "+expR1C1Taxable);	
			
			enter_PvRemarks.sendKeys(Keys.TAB);
			
			
			if(actR1C1Taxable.equalsIgnoreCase(expR1C1Taxable) )
			{
				System.out.println("Test Pass : Displayed Taxable Value  ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 322, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT  Displayed Taxable Value");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 322, 9, resFail);
				return false;
			}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 322, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			 	return false;
			}
		}

		





		public boolean checkTaxCodeBySelectingStdCOGSInTwelevethRowOfPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
							
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select12thRow_1stColumn));
				select12thRow_1stColumn.click();

				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
				enter_WarehouseTxt.click();
				enter_WarehouseTxt.sendKeys(Keys.END);
				enter_WarehouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
				enter_WarehouseTxt.sendKeys(Keys.SPACE);
					
				int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
				
				for (int i = 0; i < pvvGridWarehouseListCount; i++) 
				{
					String warehouse=pvvGridWarehouseList.get(i).getText();
					if (warehouse.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 325, 6))) 
					{
						pvvGridWarehouseList.get(i).click();
						break;
					}
				}
		        enter_WarehouseTxt.sendKeys(Keys.TAB);
					
		        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
				enter_ItemTxt.click();
				enter_ItemTxt.sendKeys(Keys.SPACE);
		        int pvvGridItemListCount=pvvGridItemList.size();
				for (int i = 0; i < pvvGridItemListCount; i++) 
				{
					String Item=pvvGridItemList.get(i).getText();
					if (Item.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 326, 6))) 
					{
						pvvGridItemList.get(i).click();
						break;
					}
				}
				enter_ItemTxt.sendKeys(Keys.TAB);
			
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
				
			    enter_PvTaxCode.click();
			  
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select12thRow_5thColumn));
				select12thRow_5thColumn.click();
									
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select12thRow_9thColumn));
				select12thRow_9thColumn.click();
				
				String actWarehouse=select12thRow_1stColumn.getText();
				String expWarehouse=excelReader.getCellData("PurchaseVoucherVAT", 325, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 325, 8, actWarehouse);
								
				String actItem=select12thRow_2ndColumn.getText();
				String expItem=excelReader.getCellData("PurchaseVoucherVAT", 326, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 326, 8, actItem);
							
				String actTaxCode=select12thRow_3rdColumn.getText();
				String expTaxCode=excelReader.getCellData("PurchaseVoucherVAT", 327, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 327, 8, actTaxCode);
				
				
				String actPurchaseAccount=select12thRow_4thColumn.getText();
				String expPurchaseAccount=excelReader.getCellData("PurchaseVoucherVAT", 324, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 324, 8, actPurchaseAccount);
				
				String actUnits=select12thRow_5thColumn.getText();
				String expUnits=excelReader.getCellData("PurchaseVoucherVAT", 328, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 328, 8, actUnits);
				
				System.out.println("*******************checkTaxCodeBySelectingStdCOGSInTwelevethRowOfPurchaseVoucherVAT******************");
				
				System.out.println("Warehouse       : " + actWarehouse	+ " Value Expected : "+expWarehouse);
				System.out.println("Item            : " + actItem		+ " Value Expected : "+expItem);
				System.out.println("TaxCode         : " + actTaxCode	+ " Value Expected : "+expTaxCode);
				System.out.println("Units           : " + actUnits		+ " Value Expected : "+expUnits);
				System.out.println("PurchaseAccount   : "+actPurchaseAccount+ " Value Expected : "+expPurchaseAccount);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select12thRow_9thColumn));
				select12thRow_9thColumn.click();
				
				if(actTaxCode.equalsIgnoreCase(expTaxCode) && actWarehouse.equalsIgnoreCase(expWarehouse) && 
						actItem.equalsIgnoreCase(expItem) && actUnits.equalsIgnoreCase(expUnits)&& 
						actPurchaseAccount.equalsIgnoreCase(expPurchaseAccount))
				
				{
					System.out.println("Test Pass : Data Entered in Tweleve Row");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 324, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Data NOT Entered in Tweleve Row");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 324, 9, resFail);
					return false;
				}
				}
				  catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 324, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			   	 	return false;
				}
			}
		

		
		public boolean checkAvGRateAndAVGRateOBySelectingStdCOGSInTwelevethRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
			try
			{
				
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select12thRow_6thColumn));
			select12thRow_6thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select12thRow_7thColumn));
			select12thRow_7thColumn.click();
			
							
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select12thRow_8thColumn));
			select12thRow_8thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select12thRow_9thColumn));
			select12thRow_9thColumn.click();
				
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select12thRow_7thColumn));
			String actR1C1AVGRate =select12thRow_7thColumn.getText();			
			String expR1C1AVGRate =excelReader.getCellData("PurchaseVoucherVAT", 330, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 330, 8, actR1C1AVGRate);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select12thRow_8thColumn));
			String actR1C1AVGRateO =select12thRow_8thColumn.getText();			
			String expR1C1AVGRateO =excelReader.getCellData("PurchaseVoucherVAT", 331, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 331, 8, actR1C1AVGRateO);
					
					
			System.out.println("************************checkAvGRateAndAVGRateOBySelectingStdCOGSInTwelevethRowPurchaseVoucherVAT***********");
			
			System.out.println("Entry Page Avg Rate  Value Actual    : "+actR1C1AVGRate   +" Value Expected : "+expR1C1AVGRate);	
			System.out.println("Entry Page Avg Rate(o) Value Actual  : "+actR1C1AVGRateO   +" Value Expected : "+expR1C1AVGRateO);
											
			if(actR1C1AVGRate.equalsIgnoreCase(expR1C1AVGRate) && actR1C1AVGRateO.equalsIgnoreCase(expR1C1AVGRateO))
			{
				System.out.println("Test Pass : Displayed Avg Rate ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 329, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Not Displayed Avg rate");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 329, 9, resFail);
				return false;
			}
			}
			  catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 329, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
			}

		}
		

		

		
		
		public boolean checkGrossBySelectingStdCOGSInTwelevethRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.click();
			enter_Quantity.clear();
			enter_Quantity.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 333, 6));
			enter_Quantity.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.click();
			enter_Rate.clear();
			enter_Rate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 334, 6));
			enter_Rate.sendKeys(Keys.TAB);
							
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.click();
			enter_Gross.sendKeys(Keys.TAB);

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select12thRow_12thColumn));
			String actR1C1Gross =select12thRow_12thColumn.getText();			
			String expR1C1Gross =excelReader.getCellData("PurchaseVoucherVAT", 335, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 335, 8, actR1C1Gross);
					
			System.out.println("**********************************checkGrossBySelectingStdCOGSInTwelevethRowPurchaseVoucherVAT*********************************");
			System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1Gross   +" Value Expected : "+expR1C1Gross);	
											
			if(actR1C1Gross.equalsIgnoreCase(expR1C1Gross) )
			{
				System.out.println("Test Pass : Displayed Gross Value ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 332, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : not Displayed Gross Value ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 332, 9, resFail);
				return false;
			}
			}
			  catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 332, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			   	 	return false;
				}
		}
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[11]")
		private static WebElement  select10thRow_10thColumn;


		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[11]")
		private static WebElement  select11thRow_10thColumn;
				
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[12]")
		private static WebElement  select11thRow_11thColumn;
				
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[13]")
		private static WebElement  select11thRow_12thColumn;
				
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[14]")
		private static WebElement  select11thRow_13thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[15]")
		private static WebElement  select11thRow_14thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[16]")
		private static WebElement  select11thRow_15thColumn;


		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[13]")
		private static WebElement  select12thRow_12thColumn;

		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[14]")
		private static WebElement  select12thRow_13thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[15]")
		private static WebElement  select12thRow_14thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[16]")
		private static WebElement  select12thRow_15thColumn;

		
		public boolean checkVATValueBySelectingStdCOGSInTwelevethRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select12thRow_14thColumn));
			select12thRow_14thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvVat));
			enter_PvVat.click();
			enter_PvVat.sendKeys(Keys.TAB);
			
			
			String actR1C1VAT =select12thRow_14thColumn.getText();			
			String expR1C1VAT =excelReader.getCellData("PurchaseVoucherVAT", 337, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 337, 8, actR1C1VAT);
					
			System.out.println("*********************************************** checkEnteringDatainFirstRow  ********************************************");
			System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1VAT   +" Value Expected : "+expR1C1VAT);	

			
			if(actR1C1VAT.equalsIgnoreCase(expR1C1VAT))
			{
				System.out.println("Test Pass : Data Entered in first Row");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 336, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Data NOT Entered in first Row");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 336, 9, resFail);
				return false;
			}
		}
		 catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 336, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
			}
		}
		
		
		
		public boolean checkTaxableValueBySelectingStdCOGSInTwelevethRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxable));
			enter_PvTaxable.click();
			enter_PvTaxable.sendKeys(Keys.TAB);
					
			
			String actR1C1Taxable =select12thRow_15thColumn.getText();	
			
			String expR1C1Taxable =excelReader.getCellData("PurchaseVoucherVAT", 339, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 339, 8, actR1C1Taxable);
		
			
			System.out.println("******************************checkTaxableValueBySelectingStdCOGSInTwelevethRowPurchaseVoucherVAT*************************");
			
			System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1Taxable   +" Value Expected : "+expR1C1Taxable);	
			
			enter_PvRemarks.sendKeys(Keys.TAB);
			
			if(actR1C1Taxable.equalsIgnoreCase(expR1C1Taxable) )
			{
				System.out.println("Test Pass : Data Entered in first Row");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 338, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Data NOT Entered in first Row");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 338, 9, resFail);
				return false;
			}
		}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 338, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
			}
		}




	public boolean checkPurchaseVoucherVATBillwisePage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
	  excelReader=new ExcelReader(POJOUtility.getExcelPath());
	  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
		
			try
			{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPaymentsBillReferenceLabel));
			
			// Actual
			boolean actbillRefPaymentsBillReferenceLabel=billRefPaymentsBillReferenceLabel.isDisplayed();
			boolean actbillRefNewReferenceTxt=billRefNewReferenceTxt.isDisplayed();
			boolean actbillRefTxtOnAccount=billRefTxtOnAccount.isDisplayed();
			boolean actbillRefSearchTxt=billRefSearchTxt.isDisplayed();
			boolean actbillRefNewReferenceDropdown=billRefNewReferenceDropdown.isDisplayed();
			boolean actbillRefShowBillsDropdown=billRefShowBillsDropdown.isDisplayed();
			boolean actbillRefAdjustOnFIFOBtn=billRefAdjustOnFIFOBtn.isDisplayed();
			boolean actbillRefPickIcon=billRefPickIcon.isDisplayed();
			boolean actbillRefOkBtn=billRefOkBtn.isDisplayed();
			boolean actbillRefcancel=billRefcancel.isDisplayed();
			
			// Expected
			boolean expbillRefPaymentsBillReferenceLabel=true;
			boolean expbillRefNewReferenceTxt=true;
			boolean expbillRefTxtOnAccount=true;
			boolean expbillRefSearchTxt=true;
			boolean expbillRefNewReferenceDropdown=true;
			boolean expbillRefShowBillsDropdown=true;
			boolean expbillRefAdjustOnFIFOBtn=true;
			boolean expbillRefPickIcon=true;
			boolean expbillRefOkBtn=true;
			boolean expbillRefcancel=true;
			
			System.out.println("************************************* checkBillReferenceScreen  *********************************");
			System.out.println("Bill Reference Screen Lable : "+actbillRefPaymentsBillReferenceLabel +"  Value Expected : "+expbillRefPaymentsBillReferenceLabel);
			System.out.println("New refernce Text Filed 	: "+actbillRefNewReferenceTxt			 +"  Value Expected : "+expbillRefNewReferenceTxt);
			System.out.println("On Account Text Filed 		: "+actbillRefTxtOnAccount				 +"  Value Expected : "+expbillRefTxtOnAccount);
			System.out.println("Search Text Filed 			: "+actbillRefSearchTxt					 +"  Value Expected : "+expbillRefSearchTxt);
			System.out.println("Adjust Bills Drop Down		: "+actbillRefNewReferenceDropdown		 +"  Value Expected : "+expbillRefNewReferenceDropdown);
			System.out.println("Show Bills Drop Down 		: "+actbillRefShowBillsDropdown			 +"  Value Expected : "+expbillRefShowBillsDropdown);
			System.out.println("Adjsut On FIFO 				: "+actbillRefAdjustOnFIFOBtn			 +"  Value Expected : "+expbillRefAdjustOnFIFOBtn);
			System.out.println("Pick Option 				: "+actbillRefPickIcon					 +"  Value Expected : "+expbillRefPickIcon);
			System.out.println("Ok Button 					: "+actbillRefOkBtn						 +"  Value Expected : "+expbillRefOkBtn);
			System.out.println("Cancel Button 				: "+actbillRefcancel					 +"  Value Expected : "+expbillRefcancel);
			
			
			String actPartyName = billRefPartyName.getText();
			String expPartyName = excelReader.getCellData("PurchaseVoucherVAT", 342, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 342, 8, actPartyName);
			
			System.out.println("Bill wise Screen Cutomer Name : "  + actPartyName+ "  Value Expected  : " + expPartyName);
						
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefAdjustBillsGrid));
				
			String actAdjustbills=billRefAdjustBillsGrid.getAttribute("data-totalrows");
			String expAdjustbills=excelReader.getCellData("PurchaseVoucherVAT", 341, 7);
			
			String expBillNewReference                      =excelReader.getCellData("PurchaseVoucherVAT", 343, 7);
			String expBillTransactionCurrency               =excelReader.getCellData("PurchaseVoucherVAT", 344, 7);
			String expBillBaseCurrency                      =excelReader.getCellData("PurchaseVoucherVAT", 345, 7);
			String expBillLocalCurrency                     =excelReader.getCellData("PurchaseVoucherVAT", 346, 7);
			String expBillBalanceNewRefAmount               =excelReader.getCellData("PurchaseVoucherVAT", 347, 7);
			
	        String expbillRefAdjustAmountInTransCurency         = excelReader.getCellData("PurchaseVoucherVAT", 348, 7);
	        String expbillRefBalanceAmountAdjustInTrnasCurrency = excelReader.getCellData("PurchaseVoucherVAT", 349, 7);
	        			        
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
	        String actBillNewReference                           = billRefNewReferenceTxt.getAttribute("value");
			String actBillTransactionCurrency                    = billRefTransactionCurency.getText();
			String actBillBaseCurrency                           = billRefBaseCurrency.getText();
			String actBillLocalCurrency                          = localCurrencyDhs.getText();
			String actBillBalanceNewRefAmount                    = balanceNewReferenceAmt.getText();
	        String actbillRefAdjustAmountInTransCurency         = billRefAdjustAmountInTransCurency.getText();
	        String actbillRefBalanceAmountAdjustInTrnasCurrency = billRefBalanceAmountAdjustInTrnasCurrency.getText();
	        	 		
	        excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 341, 8, actAdjustbills);
	        excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 343, 8, actBillNewReference);
	        excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 344, 8, actBillTransactionCurrency);
	        excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 345, 8, actBillBaseCurrency);
	        excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 346, 8, actBillLocalCurrency);
	        excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 347, 8, actBillBalanceNewRefAmount);
	        excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 348, 8, actbillRefAdjustAmountInTransCurency);
	        excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 349, 8, actbillRefBalanceAmountAdjustInTrnasCurrency);
	        
	        
	        System.out.println("***********************************************Bill Wise Screen **************************************************************************");
	        
	        System.out.println("Bill reference Adjustment Bills  :"+ actAdjustbills+"                          "+ "expDate :"+expAdjustbills);
	        System.out.println("actBillNewReference :             "+ actBillNewReference +"                    "+ "expBillNewReference :"+expBillNewReference);
	        System.out.println("actBillTransactionCurrency       :"+ actBillTransactionCurrency + "            " + "expBillTransactionCurrency :"+expBillTransactionCurrency);
	        System.out.println("actBillBaseCurrency :             "+ actBillBaseCurrency + "                   " +"expBillBaseCurrency :"+expBillBaseCurrency);
	        System.out.println("actBillLocalCurrency :            "+ actBillLocalCurrency+ "                   " +"expBillLocalCurrency :"+expBillLocalCurrency);
	        System.out.println("actBillBalanceNewRefAmount :      "+ actBillBalanceNewRefAmount + "            " + "expBillBalanceNewRefAmount :"+expBillBalanceNewRefAmount);
	       
	        System.out.println("actbillRefAdjustAmountInTransCurency :"+ actbillRefAdjustAmountInTransCurency+ "       " +"expbillRefAdjustAmountInTransCurency :"+expbillRefAdjustAmountInTransCurency);
	        System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrency :"+ actbillRefBalanceAmountAdjustInTrnasCurrency + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrency :"+expbillRefBalanceAmountAdjustInTrnasCurrency);
	        
	        if (actPartyName.equalsIgnoreCase(expPartyName) && actAdjustbills.equalsIgnoreCase(expAdjustbills) && actBillNewReference.equalsIgnoreCase(expBillNewReference) && actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 
	 				actBillBaseCurrency.equalsIgnoreCase(expBillBaseCurrency) && actBillLocalCurrency.equalsIgnoreCase(expBillLocalCurrency) && 
	 				actBillBalanceNewRefAmount.equalsIgnoreCase(expBillBalanceNewRefAmount) && 
	 			    actbillRefAdjustAmountInTransCurency.equalsIgnoreCase(expbillRefAdjustAmountInTransCurency) &&
	 				actbillRefBalanceAmountAdjustInTrnasCurrency.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrency)
	 				
	        		&& actbillRefPaymentsBillReferenceLabel==expbillRefPaymentsBillReferenceLabel && actbillRefNewReferenceTxt==expbillRefNewReferenceTxt
					&& actbillRefTxtOnAccount==expbillRefTxtOnAccount && actbillRefSearchTxt==expbillRefSearchTxt
					&& actbillRefNewReferenceDropdown==expbillRefNewReferenceDropdown && actbillRefShowBillsDropdown==expbillRefShowBillsDropdown
					&& actbillRefAdjustOnFIFOBtn==expbillRefAdjustOnFIFOBtn && actbillRefPickIcon==expbillRefPickIcon
					&& actbillRefOkBtn==expbillRefOkBtn && actbillRefcancel==expbillRefcancel)	     
		{
			System.out.println("Test Pass  Displayed Bill Wise Screen  ");
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 340, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail Not Displayed Bill wise Screen ");
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 340, 9, resFail);
			return false;
		}	
	}

		catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 340, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   	 	return false;
			}
	  
	}



	public boolean checkPurchaseVoucherVATBillwiseScreenClickOnPick() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
	  excelReader=new ExcelReader(POJOUtility.getExcelPath());
	  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	

	  
	  try
	  {
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
		    billRefNewReferenceTxt.click();
	 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			       
			
			
			
			String expBillNewReferencePick                      =excelReader.getCellData("PurchaseVoucherVAT", 351, 7);
			String expBillTransactionCurrencyPick               =excelReader.getCellData("PurchaseVoucherVAT", 352, 7);
			String expBillBaseCurrencyPick                      =excelReader.getCellData("PurchaseVoucherVAT", 353, 7);
			String expBillLocalCurrencyPick                     =excelReader.getCellData("PurchaseVoucherVAT", 354, 7);
			String expBillBalanceNewRefAmountPick               =excelReader.getCellData("PurchaseVoucherVAT", 355, 7);
			
	        String expbillRefAdjustAmountInTransCurencyPick         = excelReader.getCellData("PurchaseVoucherVAT", 356, 7);
	        String expbillRefBalanceAmountAdjustInTrnasCurrencyPick = excelReader.getCellData("PurchaseVoucherVAT", 357, 7);
	        			        
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
	        String actBillNewReferencePick                           = billRefNewReferenceTxt.getAttribute("value");
			String actBillTransactionCurrencyPick                    = billRefTransactionCurency.getText();
			String actBillBaseCurrencyPick                           = billRefBaseCurrency.getText();
			String actBillLocalCurrencyPick                          = localCurrencyDhs.getText();
			String actBillBalanceNewRefAmountPick                    = balanceNewReferenceAmt.getText();
	        String actbillRefAdjustAmountInTransCurencyPick         = billRefAdjustAmountInTransCurency.getText();
	        String actbillRefBalanceAmountAdjustInTrnasCurrencyPick = billRefBalanceAmountAdjustInTrnasCurrency.getText();
	        	 		
	        
	        excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 351, 8, actBillNewReferencePick);
	        excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 352, 8, actBillTransactionCurrencyPick);
	        excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 353, 8, actBillBaseCurrencyPick);
	        excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 354, 8, actBillLocalCurrencyPick);
	        excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 355, 8, actBillBalanceNewRefAmountPick);
	        excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 356, 8, actbillRefAdjustAmountInTransCurencyPick);
	        excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 357, 8, actbillRefBalanceAmountAdjustInTrnasCurrencyPick);
	    
			
	        
	        System.out.println("***********************************************Bill Wise Screen **************************************************************************");
	       
	    
	        
	        System.out.println("Bill reference Adjustment Bills  :"+ actBillNewReferencePick+"                          "+ "expDate :"+expBillNewReferencePick);
	        System.out.println("actBillNewReference :             "+ actBillTransactionCurrencyPick +"                    "+ "expBillNewReference :"+expBillTransactionCurrencyPick);
	        System.out.println("actBillTransactionCurrency       :"+ actBillBaseCurrencyPick + "            " + "expBillTransactionCurrency :"+expBillBaseCurrencyPick);
	        System.out.println("actBillBaseCurrency :             "+ actBillLocalCurrencyPick + "                   " +"expBillBaseCurrency :"+expBillLocalCurrencyPick);
	        System.out.println("actBillLocalCurrency :            "+ actBillBalanceNewRefAmountPick+ "                   " +"expBillLocalCurrency :"+expBillBalanceNewRefAmountPick);
	        
	       
	       
	        System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrency :"+ actbillRefAdjustAmountInTransCurencyPick + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrency :"+expbillRefAdjustAmountInTransCurencyPick);
	        System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrency :"+ actbillRefBalanceAmountAdjustInTrnasCurrencyPick + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrency :"+expbillRefBalanceAmountAdjustInTrnasCurrencyPick);
	        
	        
	        if (actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) && actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick)
	        		&& actBillBaseCurrencyPick.equalsIgnoreCase(expBillBaseCurrencyPick) && actBillLocalCurrencyPick.equalsIgnoreCase(expBillLocalCurrencyPick)
	        		&& actBillBalanceNewRefAmountPick.equalsIgnoreCase(expBillBalanceNewRefAmountPick)  
	        		&& actbillRefAdjustAmountInTransCurencyPick.equalsIgnoreCase(expbillRefAdjustAmountInTransCurencyPick) 
	        		&& actbillRefBalanceAmountAdjustInTrnasCurrencyPick.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrencyPick))
	     
		{
			System.out.println("Test Pass  Voucher Saved Successfully  ");
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 350, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail Voucher Fails in saving ");
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 350, 9, resFail);
			return false;
		}
	  }
	  catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 350, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
	 	 	return false;
		}

	}



			

			
			public boolean checkSavingOfPurchaseVoucherVATOnClickOkButtonInBillwisePage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
			   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			   Bill_OkBtn.click();
			   
			   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			   String docno=documentNumberTxt.getAttribute("value");
			   
			   boolean savingMessage=checkVoucherSavingMessage(docno);
			   
			   
			   String actSavingMessage=Boolean.toString(savingMessage);
			   String expSavingMessage=excelReader.getCellData("PurchaseVoucherVAT", 359, 7);
			   
			   excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 359, 8, actSavingMessage.toUpperCase());
			   
			   
			   System.out.println("************************************* checkSavingOfPurchaseVoucherNew  *********************************");
			   
			   System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
			   
			   
			   if (savingMessage==true)
			   {
					System.out.println("Test Pass  Voucher Saved Successfully in Purchae Voucher VAT  ");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 358, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail Voucher Fails in saving in Purchae Voucher VAT ");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 358, 9, resFail);
					return false;
				}
			 }
			 catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 358, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				 	return false;
				}
			
			}
			 
			
			public boolean checkBatchValidationInPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
					
					Thread.sleep(2000);
					
					 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
						vendorAccountTxt.click();
						vendorAccountTxt.sendKeys(Keys.SPACE);
						
						int vendorcount=vendorAccountListCount.size();
						
						System.err.println(vendorcount);
						
						for(int i=0 ; i < vendorcount ;i++)
						{
							String data=vendorAccountListCount.get(i).getText();
							
							if(data.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 361, 6)))
							{
								vendorAccountListCount.get(i).click();
								
								break;
							}
						}
						
						vendorAccountTxt.sendKeys(Keys.TAB);
						raiseReceiptsChkBox.sendKeys(Keys.TAB);
						voucherHeaderDueDate.sendKeys(Keys.TAB);
						voucherHeaderCurrency.sendKeys(Keys.TAB);
						voucherHeaderExchangeRate.click();
						

						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
						
						departmentTxt.click();
						departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME,Keys.BACK_SPACE);
						departmentTxt.sendKeys(Keys.SPACE);
						Thread.sleep(2000);
						int departmentcount=departmentListCount.size();
						
						System.err.println(departmentcount);
							
						for(int i=0 ; i < departmentcount ;i++)
						{
							String data=departmentListCount.get(i).getText();
							
							if(data.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 362, 6)))
							{
								departmentListCount.get(i).click();
								break;
							}
						}
							
						Thread.sleep(1000);
						
						departmentTxt.sendKeys(Keys.TAB);	
					
						/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeofSupplyTxt));
						placeofSupplyTxt.click();
						placeofSupplyTxt.sendKeys(Keys.SPACE);
						
				        int placeOfSupplyListCount=placeOfSupplyList.size();
						
						System.err.println(placeOfSupplyListCount);
							
						for(int i=0 ; i < placeOfSupplyListCount ;i++)
						{
							String data=placeOfSupplyList.get(i).getText();
							
							if(data.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 363, 6)))
							{
								placeOfSupplyList.get(i).click();
								
								break;
							}
						}
							
						placeofSupplyTxt.sendKeys(Keys.TAB);*/
					
					
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
						select1stRow_1stColumn.click();
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
						enter_WarehouseTxt.click();
						
						enter_WarehouseTxt.sendKeys(Keys.SPACE);
					
						
						int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
						
						for (int i = 0; i < pvvGridWarehouseListCount; i++) 
						{
							String warehouse=pvvGridWarehouseList.get(i).getText();
							if (warehouse.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 364, 6))) 
							{
								pvvGridWarehouseList.get(i).click();
								break;
							}
						}
				        enter_WarehouseTxt.sendKeys(Keys.TAB);
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
						
						enter_ItemTxt.click();
						enter_ItemTxt.sendKeys(Keys.SPACE);
				        int pvvGridItemListCount=pvvGridItemList.size();
						for (int i = 0; i < pvvGridItemListCount; i++) 
						{
							String Item=pvvGridItemList.get(i).getText();
							if (Item.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 365, 6))) 
							{
								pvvGridItemList.get(i).click();
								break;
							}
						}
						enter_ItemTxt.sendKeys(Keys.TAB);	
						
						
				        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
						
				        enter_PvTaxCode.sendKeys(Keys.TAB);
				        
				        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
						select1stRow_5thColumn.click();
				        
				        
				        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_6thColumn));
						select1stRow_6thColumn.click();
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
						select1stRow_7thColumn.click();
						
										
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
						select1stRow_8thColumn.click();
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
						select1stRow_9thColumn.click();
					
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
						enter_Quantity.click();
						enter_Quantity.clear();
						enter_Quantity.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 366, 6));
						enter_Quantity.sendKeys(Keys.TAB);
						
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
						enter_Rate.click();
						enter_Rate.clear();
						enter_Rate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 367, 6));
						enter_Rate.sendKeys(Keys.TAB);
										
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
						enter_Gross.sendKeys(Keys.TAB);
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
						select1stRow_14thColumn.click();
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvVat));
						enter_PvVat.sendKeys(Keys.TAB);
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxable));
						enter_PvTaxable.sendKeys(Keys.TAB);
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
						saveBtn.click();
						
						String expBatchMessage	= excelReader.getCellData("PurchaseVoucherVAT", 368, 7);
						
						
						String actBatchMessage	=checkValidationMessage(expBatchMessage);


						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 368, 8, actBatchMessage);
						
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));	
						select1stRow_16thColumn.click();
							
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
						enter_Batch.click();
						enter_Batch.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 369, 6));
					
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
						saveBtn.click();
						
						String expDateMessage	= excelReader.getCellData("PurchaseVoucherVAT", 370, 7);
						String actDateMessage	=checkValidationMessage(expDateMessage);
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 370, 8, actDateMessage);
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_18thColumn));
						select1stRow_18thColumn.click();
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
						enter_Expirydate.click();
						
					if (actDateMessage.equalsIgnoreCase(expDateMessage) && actBatchMessage.equalsIgnoreCase(expBatchMessage))
					{
						    System.out.println(" Test Pass: Batch Qty Entered In First Row ");
						    excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 360, 9, resPass);
						    return true;
					}
					else
					{
						    System.out.println(" Test Fail: Batch Qty Entered In First Row ");
						    excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 360, 9, resFail);
	                        return false;
					}
					
				}
			 catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 360, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				 	return false;
				}
			
			}
			    
			  							    
				
			public boolean checkBinValidationInPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
						select2ndRow_1stColumn.click();
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
						enter_WarehouseTxt.click();
						
				        enter_WarehouseTxt.sendKeys(Keys.TAB);
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
						
						enter_ItemTxt.click();
						enter_ItemTxt.sendKeys(Keys.SPACE);
				        int pvvGridItemListCount=pvvGridItemList.size();
						for (int i = 0; i < pvvGridItemListCount; i++) 
						{
							String Item=pvvGridItemList.get(i).getText();
							if (Item.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 371, 6))) 
							{
								pvvGridItemList.get(i).click();
								break;
							}
						}
						enter_ItemTxt.sendKeys(Keys.TAB);	
						
						
				        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
						
				        enter_PvTaxCode.sendKeys(Keys.TAB);
				        
				        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_5thColumn));
						select2ndRow_5thColumn.click();
				        
				        
				        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_6thColumn));
						select2ndRow_6thColumn.click();
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_7thColumn));
						select2ndRow_7thColumn.click();
						
										
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_8thColumn));
						select2ndRow_8thColumn.click();
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_9thColumn));
						select2ndRow_9thColumn.click();
					
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
						enter_Quantity.click();
						enter_Quantity.clear();
						enter_Quantity.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 372, 6));
						enter_Quantity.sendKeys(Keys.TAB);
						
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
						enter_Rate.click();
						enter_Rate.clear();
						enter_Rate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 373, 6));
						enter_Rate.sendKeys(Keys.TAB);
										
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
						enter_Gross.sendKeys(Keys.TAB);
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_14thColumn));
						select2ndRow_14thColumn.click();
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvVat));
						enter_PvVat.sendKeys(Keys.TAB);
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxable));
						enter_PvTaxable.sendKeys(Keys.TAB);
						
						/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
						saveBtn.click();
						
						String expBatchMessage	= excelReader.getCellData("PurchaseVoucherVAT", 371, 7);
						
						
						String actBatchMessage	=checkValidationMessage(expBatchMessage);


						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 371, 8, actBatchMessage);*/
						
						
							
					
						String expBinNameValue                 = excelReader.getCellData("PurchaseVoucherVAT", 374, 7);
						String expBinStockValue                = excelReader.getCellData("PurchaseVoucherVAT", 375, 7);
						String expBinCapcityValue              = excelReader.getCellData("PurchaseVoucherVAT", 376, 7);
						String expBinLoadValue                 = excelReader.getCellData("PurchaseVoucherVAT", 377, 7);
						String expBinFreeSpace                 = excelReader.getCellData("PurchaseVoucherVAT", 378, 7);
						String expBinFreeQty                   = excelReader.getCellData("PurchaseVoucherVAT", 379, 7);
						String expBinToBeAllocated             = excelReader.getCellData("PurchaseVoucherVAT", 380, 7);
						
						
						String expBinTotalQty                  = excelReader.getCellData("PurchaseVoucherVAT", 381, 7);
						String expBinBaseUom                   = excelReader.getCellData("PurchaseVoucherVAT", 382, 7);
						String expBinBalanceQty                = excelReader.getCellData("PurchaseVoucherVAT", 383, 7);
						
						String expBinSum                       = excelReader.getCellData("PurchaseVoucherVAT", 384, 7);
										
						Thread.sleep(2000);
						
						System.err.println("1");
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binselect1stRow_2ndColumn));
						
						String actBinNameValue                 = binselect1stRow_2ndColumn.getText();	
						String actBinStockValue                = binselect1stRow_3rdColumn.getText();
						String actBinCapcityValue              = binselect1stRow_4thColumn.getText();
						String actBinLoadValue                 = binselect1stRow_5thColumn.getText();
						String actBinFreeSpace                 = binselect1stRow_6thColumn.getText();
						String actBinFreeQty                   = binselect1stRow_7thColumn.getText();
						String actBinToBeAllocated             = binselect1stRow_8thColumn.getText();
						

						String actBinTotalQty                  = binTotalQty.getAttribute("value");
						String actBinBaseUom                   = binBaseUOM.getText();
						String actBinBalanceQty                = binBalanceTxt.getAttribute("value");
						
						String actBinSum                       = binSumInward.getText();
												
						System.err.println("1");
						
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 374, 8, actBinNameValue);
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 375, 8, actBinStockValue);
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 376, 8, actBinCapcityValue);
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 377, 8, actBinLoadValue);
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 378, 8, actBinFreeSpace);
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 379, 8, actBinFreeQty);
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 380, 8, actBinToBeAllocated);
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 381, 8, actBinTotalQty);
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 382, 8, actBinBaseUom);
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 383, 8, actBinBalanceQty);
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 384, 8, actBinSum);
						
						System.err.println("1");
						System.out.println("Second Row Stock            :  " + actBinNameValue +        "  Value Expected : "  + expBinNameValue);
						System.out.println("Second Row Capacity         :  " + actBinStockValue +       "  Value Expected : "  + expBinStockValue);
						System.out.println("Second Row Load             :  " + actBinCapcityValue +     "  Value Expected : "  + expBinCapcityValue);
						System.out.println("Second Row Free Space       :  " + actBinLoadValue +        "  Value Expected : "  + expBinLoadValue);
						System.out.println("Second Row Free Qty         :  " + actBinFreeSpace +        "  Value Expected : "  + expBinFreeSpace);
						System.out.println("Second Row To Be Allocated  :  " + actBinFreeQty +          "  Value Expected : "  + expBinFreeQty);
						System.out.println("Second Row To Be Allocated  :  " + actBinToBeAllocated +    "  Value Expected : "  + expBinToBeAllocated);
						
						
						System.out.println("Bin Total Qty               :  " +actBinTotalQty +            "  Value Expected : "  + expBinTotalQty);
						System.out.println("Bin Base Uom                :  " +actBinBaseUom +             "  Value Expected : "  + expBinBaseUom);
						System.out.println("Bin Balance Txt             :  " +actBinBalanceQty +          "  Value Expected : "  + expBinBalanceQty);
						
						System.out.println("Bin Total To Be Adjusted    :  " + actBinSum +                "  Value Expected : "  + expBinSum);
						
					
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
						binAutoAllocateBtn.click();
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
						binOkBtn.click();
						
						
	                    String actBinName=select2ndRow_17thColumn.getText();
						
						String expBinName=excelReader.getCellData("PurchaseVoucherVAT", 385, 7);
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 385, 8, actBinName);
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvRemarks));
						enter_PvRemarks.sendKeys(Keys.TAB);
								
						if(actBinNameValue.equalsIgnoreCase(expBinNameValue) && actBinStockValue.equalsIgnoreCase(expBinStockValue) 
								&& actBinCapcityValue.equalsIgnoreCase(expBinCapcityValue) && actBinLoadValue.equalsIgnoreCase(expBinLoadValue)
								&& actBinFreeSpace.equalsIgnoreCase(expBinFreeSpace) && actBinFreeQty.equalsIgnoreCase(expBinFreeQty)
								&& actBinToBeAllocated.equalsIgnoreCase(expBinToBeAllocated)
										
								&& actBinTotalQty.equalsIgnoreCase(expBinTotalQty) && actBinBaseUom.equalsIgnoreCase(expBinBaseUom) 
								&& actBinBalanceQty.equalsIgnoreCase(expBinBalanceQty)
								
								&& actBinSum.equalsIgnoreCase(expBinSum))	
	{
						    System.out.println(" Test Pass: Bin 3 is Displayed ");
						    excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 371, 9, resPass);
						    return true;
					}
					else
					{
						    System.out.println(" Test Fail: Bin 3 is  Not Displayed ");
						    excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 371, 9, resFail);
	                        return false;
					}
					
				}
			 catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 371, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				 	return false;
				}
			
			}
				
			
			
			public boolean checkTotalConsumedBinValidationInPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
						select3rdRow_1stColumn.click();
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
						enter_WarehouseTxt.click();
						
				        enter_WarehouseTxt.sendKeys(Keys.TAB);
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
						
						enter_ItemTxt.click();
						enter_ItemTxt.sendKeys(Keys.SPACE);
				        int pvvGridItemListCount=pvvGridItemList.size();
						for (int i = 0; i < pvvGridItemListCount; i++) 
						{
							String Item=pvvGridItemList.get(i).getText();
							if (Item.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 386, 6))) 
							{
								pvvGridItemList.get(i).click();
								break;
							}
						}
						enter_ItemTxt.sendKeys(Keys.TAB);	
						
						
				        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
						
				        enter_PvTaxCode.sendKeys(Keys.TAB);
				        
				        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_5thColumn));
						select3rdRow_5thColumn.click();
				        
				        
				        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_6thColumn));
						select3rdRow_6thColumn.click();
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_7thColumn));
						select3rdRow_7thColumn.click();
						
										
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_8thColumn));
						select3rdRow_8thColumn.click();
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_9thColumn));
						select3rdRow_9thColumn.click();
					
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
						enter_Quantity.click();
						enter_Quantity.clear();
						enter_Quantity.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 387, 6));
						enter_Quantity.sendKeys(Keys.TAB);
						
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
						enter_Rate.click();
						enter_Rate.clear();
						enter_Rate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 388, 6));
						enter_Rate.sendKeys(Keys.TAB);
										
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
						enter_Gross.sendKeys(Keys.TAB);
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_14thColumn));
						select3rdRow_14thColumn.click();
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvVat));
						enter_PvVat.sendKeys(Keys.TAB);
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxable));
						enter_PvTaxable.sendKeys(Keys.TAB);
						
						System.out.println(" binEmpty: "+binEmpty.getText().isEmpty());
						
						boolean EmptyData=binEmpty.getText().isEmpty();
						
						String actBinPopUp=Boolean.toString(EmptyData);
						String expBinPopUp=excelReader.getCellData("PurchaseVoucherVAT", 389, 7);
								
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 389, 8, actBinPopUp);		
								
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binCancelBtn));
						binCancelBtn.click();
						
						
					   if (actBinPopUp.equalsIgnoreCase(expBinPopUp) )
					   {
							System.out.println("Test Pass  No bins Found in Pop up  ");
							excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 386, 9, resPass);
							return true;
						}
						else
						{
							System.out.println("Test Fail Bins Found in pop up  ");
							excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 386, 9, resFail);
							return false;
						}
					 }
					 catch (Exception e) 
						{
							String exception =e.getMessage();
							excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 386, 10, exception);
							System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
						 	return false;
						}
						
				}
				
		
		
				@FindBy(xpath="//*[@id='id_transaction_bins_grid_body']")
				private static WebElement  binEmpty;
	 
				
				
				public boolean checkRowDeleteInPurchaseVoucherVAT() throws EncryptedDocumentException, InvalidFormatException, IOException
				{
					
					

					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
					try
					{
				        Thread.sleep(2000);
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(thirdRowIndex));
						thirdRowIndex.click();
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
						deleteRowBtn.click();
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
						boolean rowDelete=select3rdRow_1stColumn.getText().isEmpty();
						
						String actRowDelete=Boolean.toString(rowDelete);
						String expRowDelete= excelReader.getCellData("PurchaseVoucherVAT", 391, 7);

						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 391, 8, actRowDelete);
						
						System.out.println("*******************checkRowDeleteInPurchaseVoucherVAT**************");
						
				   
						System.out.println("actRowDelete  :  "+actRowDelete  +"  VAlue Expected :  "+expRowDelete);
						
				   if (actRowDelete.equalsIgnoreCase(expRowDelete) )
				   {
						System.out.println(" *******************Row Deleted ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 390, 9, resPass);
						return true;
					}
					else
					{
						System.out.println(" ********************No Row Deleted   ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 390, 9, resFail);
						return false;
					}
				 }
				 catch (Exception e) 
					{
						String exception =e.getMessage();
						excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 390, 10, exception);
						System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
					 	return false;
					}
				}
				
				
				
				public boolean checkChangingWareHouseAfterBinAllocatedinPurchaseVoucherVAT() throws EncryptedDocumentException, InvalidFormatException, IOException
				{
					
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
					try
					{
				        Thread.sleep(2000);
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
						select2ndRow_1stColumn.click();
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
						enter_WarehouseTxt.click();
						enter_WarehouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
						enter_WarehouseTxt.sendKeys(Keys.BACK_SPACE);
						
						enter_WarehouseTxt.sendKeys(Keys.SPACE);
					
						
						int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
						
						for (int i = 0; i < pvvGridWarehouseListCount; i++) 
						{
							String warehouse=pvvGridWarehouseList.get(i).getText();
							if (warehouse.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 392, 6))) 
							{
								pvvGridWarehouseList.get(i).click();
								break;
							}
						}
				        enter_WarehouseTxt.sendKeys(Keys.TAB);
				        
				        boolean res = getIsAlertPresent();
				        
				        if(res==true)
				        {
					        getWaitForAlert();
							
							getFluentWebDriverWait().until(ExpectedConditions.alertIsPresent());
							
							String actAlertMessageOnChangeWarehouse=getDriver().switchTo().alert().getText();
							String expAlertMessageOnChangeWarehouse= excelReader.getCellData("PurchaseVoucherVAT", 393, 7);
	
							excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 393, 8, actAlertMessageOnChangeWarehouse);
						
							getAlert().accept();
						
				        }
				        
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_17thColumn));
						boolean RowBinCol=select2ndRow_17thColumn.getText().isEmpty();
						
						String actRowBinCol=Boolean.toString(RowBinCol);
						String expRowBinCol=excelReader.getCellData("PurchaseVoucherVAT", 394, 7);

						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 394, 8, actRowBinCol);
						
						select2ndRow_17thColumn.click();
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binselect1stRow_2ndColumn));
						
						String actBinNameValue                 = binselect1stRow_2ndColumn.getText();	
						
						String expBinNameValue                 = excelReader.getCellData("PurchaseVoucherVAT", 395, 7);

						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 395, 8, actBinNameValue);
					
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binCancelBtn));
						binCancelBtn.click();
						
					
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(secondRowIndex));
						secondRowIndex.click();
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
						deleteRowBtn.click();
						
						
						if (/*actAlertMessageOnChangeWarehouse.equalsIgnoreCase(expAlertMessageOnChangeWarehouse) && */
								actRowBinCol.equalsIgnoreCase(expRowBinCol) && actBinNameValue.equalsIgnoreCase(expBinNameValue))
						   {
								System.out.println("Test Pass  Bin Col is Empty  in Row  ");
								excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 392, 9, resPass);
								return true;
							}
							else
							{
								System.out.println("Test Fail Bin Is Present in Bin Col in Row  ");
								excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 392, 9, resFail);
								return false;
							}
						 }
						 catch (Exception e) 
							{
								String exception =e.getMessage();
								excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 392, 10, exception);
								System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
							 	return false;
							}
				}

				
				
				public boolean checkRMAValidationInPurchaseVoucherVAT() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
				{
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
					try
					{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
					select2ndRow_1stColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
					enter_WarehouseTxt.click();
					
			        enter_WarehouseTxt.sendKeys(Keys.TAB);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
					enter_ItemTxt.click();
					enter_ItemTxt.sendKeys(Keys.END);
					enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
					enter_ItemTxt.sendKeys(Keys.SPACE);
			        int pvvGridItemListCount=pvvGridItemList.size();
					for (int i = 0; i < pvvGridItemListCount; i++) 
					{
						String Item=pvvGridItemList.get(i).getText();
						if (Item.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 397, 6))) 
						{
							pvvGridItemList.get(i).click();
							break;
						}
					}
					enter_ItemTxt.sendKeys(Keys.TAB);	
					
					
			        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
					
			        enter_PvTaxCode.sendKeys(Keys.TAB);
			        
			        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_5thColumn));
					select2ndRow_5thColumn.click();
			        
			        
			        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_6thColumn));
					select2ndRow_6thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_7thColumn));
					select2ndRow_7thColumn.click();
					
									
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_8thColumn));
					select2ndRow_8thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_9thColumn));
					select2ndRow_9thColumn.click();
				
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
					enter_Quantity.click();
					enter_Quantity.clear();
					enter_Quantity.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 398, 6));
					enter_Quantity.sendKeys(Keys.TAB);
					
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
					enter_Rate.click();
					enter_Rate.clear();
					enter_Rate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 399, 6));
					enter_Rate.sendKeys(Keys.TAB);
									
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
					enter_Gross.sendKeys(Keys.TAB);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_14thColumn));
					select2ndRow_14thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvVat));
					enter_PvVat.sendKeys(Keys.TAB);
					
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
					saveBtn.click();
					
					String expRmaMessage	= excelReader.getCellData("PurchaseVoucherVAT", 396, 7);
					
					
					String actRmaMessage	=checkValidationMessage(expRmaMessage);


					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 396, 8, actRmaMessage);
					
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_19thColumn));
					select2ndRow_19thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaAddBtn));
					rmaAddBtn.click();
					
					getWaitForAlert();
					
					String actAlertOnAdd = getAlert().getText();
					
					String expAlertOnAdd = excelReader.getCellData("PurchaseVoucherVAT", 397, 7);

					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 397, 8, actAlertOnAdd);
					
					getAlert().accept();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaOkBtn));
					rmaOkBtn.click();
					
					getWaitForAlert();
					
					String actAlertOnOK1=getAlert().getText();
					
					String expAlertOnOK1=excelReader.getCellData("PurchaseVoucherVAT", 398, 7);

					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 398, 8, actAlertOnOK1);
					
					getDriver().switchTo().alert().accept();
						
					getWaitForAlert();
					
					String actAlertOnOK2=getAlert().getText();
					
					String expAlertOnOK2=excelReader.getCellData("PurchaseVoucherVAT", 399, 7);

					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 399, 8, actAlertOnOK2);
					
					getAlert().accept();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaSerialNumberTxtField));
					rmaSerialNumberTxtField.click();
					rmaSerialNumberTxtField.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 400, 6));
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaAddBtn));
					rmaAddBtn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaOkBtn));
					rmaOkBtn.click();
					
					String actRmaColumn = enter_PvRMA.getAttribute("value");
					
					String expRmaColumn=excelReader.getCellData("PurchaseVoucherVAT", 400, 7);

					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 400, 8, actRmaColumn);
							
					enter_PvRMA.sendKeys(Keys.SPACE);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaTableRow1ClearBtn));
					rmaTableRow1ClearBtn.click();
					
					boolean actrmaTableRow1Column1 =rmaTableRow1Column1.getText().isEmpty();
					
					String actRmavalueR1 = Boolean.toString(actrmaTableRow1Column1);
					
					String expRmavalueR1=excelReader.getCellData("PurchaseVoucherVAT", 401, 7);

					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 401, 8, actRmavalueR1);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaClearBtn));
					rmaClearBtn.click();
					
					boolean actrmaTableRow1Column2 =rmaTableRow2Column1.getText().isEmpty();
					
					String actRmavalueR2 = Boolean.toString(actrmaTableRow1Column1);
					
					String expRmavalueR2=excelReader.getCellData("PurchaseVoucherVAT", 402, 7);

					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 402, 8, actRmavalueR2);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaSerialNumberTxtField));
					rmaSerialNumberTxtField.click();
					rmaSerialNumberTxtField.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 401, 6));
					rmaSerialNumberTxtField.sendKeys(Keys.ENTER);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaOkBtn));
					rmaOkBtn.click();
					
					getWaitForAlert();
					
					String actAlertOnOK=getAlert().getText();
					
					String expAlertOnOK=excelReader.getCellData("PurchaseVoucherVAT", 403, 7);

					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 403, 8, actAlertOnOK);
					
					getAlert().accept();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_9thColumn));
					
					String actQtyColumn = select2ndRow_9thColumn.getText();
					
					String expQtyColumn = excelReader.getCellData("PurchaseVoucherVAT", 404, 7);

					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 404, 8, actQtyColumn);
					
					
					System.out.println("***********************checkRMAValidationInPurchaseVoucherVAT*****************************************************");
					
					
					System.out.println("RmaMessage :  " + actRmaMessage +               "  Value Expected : "  + expRmaMessage);
					System.out.println("AlertOnAdd :  " + actAlertOnAdd +               "  Value Expected : "  + expAlertOnAdd);
					System.out.println("AlertOnOK1 :  " + actAlertOnOK1 +               "  Value Expected : "  + expAlertOnOK1);
					System.out.println("AlertOnOK2 :  " + actAlertOnOK2 +               "  Value Expected : "  + expAlertOnOK2);
					System.out.println("RmaColumn  :  " + actRmaColumn +                "  Value Expected : "  + expRmaColumn);
					System.out.println("RmavalueR2 :  " + actRmavalueR2 +               "  Value Expected : "  + expRmavalueR2);
					System.out.println("AlertOnOK  :  " + actAlertOnOK +                "  Value Expected : "  + expAlertOnOK);
					System.out.println("QtyColumn  :  " + actQtyColumn +                "  Value Expected : "  + expQtyColumn);
					
					
					if (actRmaMessage.equalsIgnoreCase(expRmaMessage) && actAlertOnAdd.equalsIgnoreCase(expAlertOnAdd) &&
							actAlertOnOK1.equalsIgnoreCase(expAlertOnOK1) && actAlertOnOK2.equalsIgnoreCase(expAlertOnOK2) && 
							actRmaColumn.equalsIgnoreCase(expRmaColumn) && actRmavalueR2.equalsIgnoreCase(expRmavalueR2) && 
							actAlertOnOK.equalsIgnoreCase(expAlertOnOK) && actQtyColumn.equalsIgnoreCase(expQtyColumn))
					{
						System.out.println("Test Pass  Validation Messages Are expected ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 396, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail Validation Message are not As expected  ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 396, 9, resFail);
						return false;
					}
				 }
				 catch (Exception e) 
					{
						String exception =e.getMessage();
						excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 396, 10, exception);
						System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
					 	return false;
					}
				}
				
				
				
				

				
				public boolean checkRMAValidationWithDuplicateSerialNumberInPurchaseVoucherVAT() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
				{
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
					try
					{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
					select3rdRow_1stColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
					enter_WarehouseTxt.click();
					
			        enter_WarehouseTxt.sendKeys(Keys.TAB);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
					
					enter_ItemTxt.click();
					enter_ItemTxt.sendKeys(Keys.SPACE);
			        int pvvGridItemListCount=pvvGridItemList.size();
					for (int i = 0; i < pvvGridItemListCount; i++) 
					{
						String Item=pvvGridItemList.get(i).getText();
						if (Item.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 407, 6))) 
						{
							pvvGridItemList.get(i).click();
							break;
						}
					}
					enter_ItemTxt.sendKeys(Keys.TAB);	
					
					
			        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
					
			        enter_PvTaxCode.sendKeys(Keys.TAB);
			        
			        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_5thColumn));
					select3rdRow_5thColumn.click();
			        
			        
			        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_6thColumn));
					select3rdRow_6thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_7thColumn));
					select3rdRow_7thColumn.click();
					
									
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_8thColumn));
					select3rdRow_8thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_9thColumn));
					select3rdRow_9thColumn.click();
				
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
					enter_Quantity.click();
					enter_Quantity.clear();
					enter_Quantity.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 408, 6));
					enter_Quantity.sendKeys(Keys.TAB);
					
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
					enter_Rate.click();
					enter_Rate.clear();
					enter_Rate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 409, 6));
					enter_Rate.sendKeys(Keys.TAB);
									
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
					enter_Gross.sendKeys(Keys.TAB);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_14thColumn));
					select3rdRow_14thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvVat));
					enter_PvVat.sendKeys(Keys.TAB);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxable));
					enter_PvTaxable.sendKeys(Keys.TAB);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaSerialNumberTxtField));
					rmaSerialNumberTxtField.click();
					rmaSerialNumberTxtField.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 410, 6));
					rmaSerialNumberTxtField.sendKeys(Keys.ENTER);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaOkBtn));
					rmaOkBtn.click();
					
					getWaitForAlert();
					
					String actAlertOnOK=getAlert().getText();
					
					String expAlertOnOK=excelReader.getCellData("PurchaseVoucherVAT", 406, 7);

					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 406, 8, actAlertOnOK);
					
					Thread.sleep(2000);
					
					getAlert().accept();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaSerialNumberTxtField));
					rmaSerialNumberTxtField.click();
					rmaSerialNumberTxtField.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 411, 6));
					rmaSerialNumberTxtField.sendKeys(Keys.ENTER);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaOkBtn));
					rmaOkBtn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvRMA));
					
					String actRmaColumn = enter_PvRMA.getAttribute("value");
					
					String expRmaColumn=excelReader.getCellData("PurchaseVoucherVAT", 407, 7);

					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 407, 8, actRmaColumn);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_newBtn));
					new_newBtn.click();
					
					String actAlert=getAlert().getText();
					String expAlert1=excelReader.getCellData("PurchaseVoucherVAT", 408, 7);
					String expAlert2=excelReader.getCellData("PurchaseVoucherVAT", 409, 7);
					
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 408, 8, actAlert);
					
					System.out.println("Alert On Revert Changes :  "+actAlert +"  "+expAlert1+""+expAlert2);
					
					
					System.out.println("Test Pass : Alert Displayed");
					
					getAlert().accept();
					
					
					System.out.println("************************checkRMAValidationWithDuplicateSerialNumberInPurchaseVoucherVAT************");
					
					
					System.out.println("AlertOnOK   :  "+actAlertOnOK +" Value Expected " +expAlertOnOK);
					System.out.println("RmaColumn   :  "+actRmaColumn +" Value Expected " +actRmaColumn);
					System.out.println("Alert On Revert Changes :  "+actAlert +"  "+expAlert1+""+expAlert2);
					
					if (actAlertOnOK.equalsIgnoreCase(expAlertOnOK)&& actRmaColumn.equalsIgnoreCase(expRmaColumn)&& 
							actAlert.startsWith(expAlert1)&& actAlert.endsWith(expAlert2))
					{
						System.out.println("Test Pass  Entry Page is Displayed With Empty data ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 406, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail Entry page is Not Displayed with Empty Data ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 406, 9, resFail);
						return false;
					}
				 }
				 catch (Exception e) 
					{
						String exception =e.getMessage();
						excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 406, 10, exception);
						System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
					 	return false;
					}	
				}
				
				
				
				public boolean checkPurchaseVoucherVATCopyDocumentOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
				{
					
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
					try
					{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
					String actdocNumber=documentNumberTxt.getAttribute("value");
					String expdocNumber=excelReader.getCellData("PurchaseVoucherVAT", 413, 7);

					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 413, 8, actdocNumber);
					
					System.out.println("documnet Number : "+actdocNumber+""+expdocNumber);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
					toggleBtn.click();
					
					boolean actCopydocument=copyDocumentOption.isDisplayed();
					
					boolean expCopydocument=true;
					
					
					System.out.println("******************checkPurchaseVoucherVATCopyDocumentOption***************");
					
					System.out.println("Copy Document Option : "+actCopydocument+""+expCopydocument);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(copyDocumentOption));
					
					if(actdocNumber.equalsIgnoreCase(expdocNumber) && actCopydocument==expCopydocument)
					{
						System.out.println("Test Pass : Copy Document Option Displayed");
						
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 412, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail : Copy Document Option NOT Displayed");
						
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 412, 9, resFail);
						return false;
					}
					}
					 catch (Exception e) 
					{
						String exception =e.getMessage();
						excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 412, 10, exception);
						System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
					 	return false;
					}
				}
					
				
				
				
				public boolean checkCopyDocumentOptioninPurchaseVoucherVAT() throws EncryptedDocumentException, InvalidFormatException, IOException
				{
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					

					try
					{
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(copyDocumentOption));
					copyDocumentOption.click();
					
					Thread.sleep(2000);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cd_vouchertypeTxt));
					
					boolean actcd_vouchertypeTxt=cd_vouchertypeTxt.isDisplayed();
					boolean actcd_searchOnDropdown1=cd_searchOnDropdown1.isDisplayed();
					boolean actcd_searchOnDropdown2=cd_searchOnDropdown2.isDisplayed();
					boolean actcd_searchTxt=cd_searchTxt.isDisplayed();
					boolean actcd_refreshBtn=cd_refreshBtn.isDisplayed();
					boolean actcd_filterBtn=cd_filterBtn.isDisplayed();
					boolean actcd_HeaderChkBox=cd_HeaderChkBox.isDisplayed();
					boolean actcd_FirstChkBox=cd_FirstChkBox.isDisplayed();
					boolean actcd_clubsimilarTransChkBox=cd_clubsimilarTransChkBox.isDisplayed();
					boolean actcd_SelectallBtn=cd_SelectallBtn.isDisplayed();
					boolean actcd_firstBtn=cd_firstBtn.isDisplayed();
					boolean actcd_PreviousBtn=cd_PreviousBtn.isDisplayed();
					boolean actcd_PageNo=cd_PageNo.isDisplayed();
					boolean actcd_nextBtn=cd_nextBtn.isDisplayed();
					boolean actcd_LastBtn=cd_LastBtn.isDisplayed();
					boolean actcd_OkBtn=cd_OkBtn.isDisplayed();
					boolean actcd_CancelBtn=cd_CancelBtn.isDisplayed();
					
					
					boolean expcd_vouchertypeTxt=true;
					boolean expcd_searchOnDropdown1=true;
					boolean expcd_searchOnDropdown2=true;
					boolean expcd_searchTxt=true;
					boolean expcd_refreshBtn=true;
					boolean expcd_filterBtn=true;
					boolean expcd_HeaderChkBox=true;
					boolean expcd_FirstChkBox=true;
					boolean expcd_clubsimilarTransChkBox=true;
					boolean expcd_SelectallBtn=true;
					boolean expcd_firstBtn=true;
					boolean expcd_PreviousBtn=true;
					boolean expcd_PageNo=true;
					boolean expcd_nextBtn=true;
					boolean expcd_LastBtn=true;
					boolean expcd_OkBtn=true;
					boolean expcd_CancelBtn=true;
					
					Thread.sleep(2000);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cd_FirstChkBox));
					cd_FirstChkBox.click();
					
					Thread.sleep(2000);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cd_OkBtn));
					cd_OkBtn.click();
					
					/*getWaitForAlert();
					
					getAlert().accept();
					
					getWaitForAlert();
					
					getAlert().accept();*/
					
					System.out.println("******************************checkCopyDocumentOptioninPurchaseVoucherVAT*********************************");
					
					System.out.println("Copy Document Voucher type Value Actual               : " + actcd_vouchertypeTxt+         " Value Expected  : " + expcd_vouchertypeTxt);
					System.out.println("Copy Document Search dropdown 1 Value Actual          : " + actcd_searchOnDropdown1+      " Value Expected  : " + expcd_searchOnDropdown1);
					System.out.println("Copy Document Search dropdown 2 Value Actual          : " + actcd_searchOnDropdown2+      " Value Expected  : " + expcd_searchOnDropdown2);
					System.out.println("Copy Document Search text Value Actual                : " + actcd_searchTxt+              " Value Expected  : " + expcd_searchTxt);
					System.out.println("Copy Document Refresh Value Actual                    : " + actcd_refreshBtn+             " Value Expected  : " + expcd_refreshBtn);
					System.out.println("Copy Document Filter Value Actual                     : " + actcd_filterBtn+              " Value Expected  : " + expcd_filterBtn);
					System.out.println("Copy Document Header Chk box Value Actual             : " + actcd_HeaderChkBox+           " Value Expected  : " + expcd_HeaderChkBox);
					System.out.println("Copy Document First Chk Box Value Actual              : " + actcd_FirstChkBox+            " Value Expected  : " + expcd_FirstChkBox);
					System.out.println("Copy Document Club Similar Trans Chk Box Value Actual : " + actcd_clubsimilarTransChkBox+ " Value Expected  : " + expcd_clubsimilarTransChkBox);
					System.out.println("Copy Document Select All Value Actual                 : " + actcd_SelectallBtn+           " Value Expected  : " + expcd_SelectallBtn);
					System.out.println("Copy Document first Button Value Actual               : " + actcd_firstBtn+               " Value Expected  : " + expcd_firstBtn);
					System.out.println("Copy Document Previous Button Value Actual            : " + actcd_PreviousBtn+            " Value Expected  : " + expcd_PreviousBtn);
					System.out.println("Copy Document Page No Value Actual                    : " + actcd_PageNo+                 " Value Expected  : " + expcd_PageNo);
					System.out.println("Copy Document Next Button Value Actual                : " + actcd_nextBtn+                " Value Expected  : " + expcd_nextBtn);
					System.out.println("Copy Document last Button Value Actual                : " + actcd_LastBtn+                " Value Expected  : " + expcd_LastBtn);
					System.out.println("Copy Document Ok Button Value Actual                  : " + actcd_OkBtn+                  " Value Expected  : " + expcd_OkBtn);
					System.out.println("Copy Document cancel Button Value Actual              : " + actcd_CancelBtn+              " Value Expected  : " + expcd_CancelBtn);
					
					
					
					boolean displayMethod=actcd_vouchertypeTxt==expcd_vouchertypeTxt && actcd_searchOnDropdown1==expcd_searchOnDropdown1
							&& actcd_searchOnDropdown2==expcd_searchOnDropdown2 && actcd_searchTxt==expcd_searchTxt
							&& actcd_refreshBtn==expcd_refreshBtn && actcd_filterBtn==expcd_filterBtn
							&& actcd_HeaderChkBox==expcd_HeaderChkBox && actcd_FirstChkBox==expcd_FirstChkBox
							&& actcd_clubsimilarTransChkBox==expcd_clubsimilarTransChkBox && actcd_SelectallBtn==expcd_SelectallBtn
							&& actcd_firstBtn==expcd_firstBtn && actcd_PreviousBtn==expcd_PreviousBtn
							&& actcd_PageNo==expcd_PageNo && actcd_nextBtn==expcd_nextBtn
							&& actcd_LastBtn==expcd_LastBtn && actcd_OkBtn==expcd_OkBtn && actcd_CancelBtn==expcd_CancelBtn;
					
					
					String actDisplayResult=Boolean.toString(displayMethod);
					String expDisplayResult=excelReader.getCellData("PurchaseVoucherVAT", 415, 7);

					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 415, 8, actDisplayResult);
					
					if(actDisplayResult.equalsIgnoreCase(expDisplayResult))
					{
						System.out.println("Test Pass : Copy Document Options Are As Expected");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 414, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail : Copy Document Options Are NOT As Expected");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 414, 9, resFail);
						return false;
					}
					}
					catch (Exception e) 
					{
						String exception =e.getMessage();
						excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 414, 10, exception);
						System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
					 	return false;
					}
				}

		
				@FindBy(xpath="//td[@id='doc_TagsTable_col_4-2']")
				private static WebElement  position4;
								
				@FindBy(xpath="//*[@id='doc_TagsTable_col_3-2']")
				private static WebElement  position3;


				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[14]")
				private static WebElement  select2ndRow_13thColumn;
						

				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[12]")
				private static WebElement  select10thRow_11thColumn;

				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[13]")
				private static WebElement  select10thRow_12thColumn;
						
				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[14]")
				private static WebElement  select10thRow_13thColumn;
				
				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[15]")
				private static WebElement  select10thRow_14thColumn;
				
				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[16]")
				private static WebElement  select10thRow_15thColumn;
				
				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[11]")
				private static WebElement  select12thRow_10thColumn;
				
				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[12]")
				private static WebElement  select12thRow_11thColumn;
				
				
				@FindBy(xpath="//*[@id='doc_TagsTable_col_3-1']")
				private static WebElement  masters3;
							
				@FindBy(xpath="//td[@id='doc_TagsTable_col_4-1']")
				private static WebElement  masters4;




				
				public boolean checkSavingVocuherWithAllInputsThroughCopyDocument() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
				{
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					

					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));	
					select1stRow_16thColumn.click();
						
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
					enter_Batch.click();
					enter_Batch.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 416, 6));
					enter_Batch.sendKeys(Keys.TAB);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_16thColumn));	
					select2ndRow_16thColumn.click();
						
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
					enter_Batch.click();
					enter_Batch.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 417, 6));
					enter_Batch.sendKeys(Keys.TAB);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_16thColumn));	
					select3rdRow_16thColumn.click();
						
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
					enter_Batch.click();
					enter_Batch.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 418, 6));
					enter_Batch.sendKeys(Keys.TAB);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_9thColumn));	
					select4thRow_9thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvQuantity));
					enter_PvQuantity.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 419, 6));
					enter_PvQuantity.sendKeys(Keys.TAB);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_17thColumn));	
					select4thRow_17thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));	
					binAutoAllocateBtn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));	
					binOkBtn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_17thColumn));	
					select5thRow_17thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));	
					binAutoAllocateBtn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));	
					binOkBtn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select6thRow_17thColumn));	
					select6thRow_17thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));	
					binAutoAllocateBtn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));	
					binOkBtn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select7thRow_19thColumn));	
					select7thRow_19thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaSerialNumberTxtField));
					rmaSerialNumberTxtField.click();
					rmaSerialNumberTxtField.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 420, 6));
					rmaSerialNumberTxtField.sendKeys(Keys.TAB);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaAddBtn));
					rmaAddBtn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaOkBtn));
					rmaOkBtn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select8thRow_19thColumn));	
					select8thRow_19thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaSerialNumberTxtField));
					rmaSerialNumberTxtField.click();
					rmaSerialNumberTxtField.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 421, 6));
					rmaSerialNumberTxtField.sendKeys(Keys.TAB);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaAddBtn));
					rmaAddBtn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaOkBtn));
					rmaOkBtn.click();
					
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select9thRow_19thColumn));	
					select9thRow_19thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaSerialNumberTxtField));
					rmaSerialNumberTxtField.click();
					rmaSerialNumberTxtField.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 422, 6));
					rmaSerialNumberTxtField.sendKeys(Keys.TAB);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaAddBtn));
					rmaAddBtn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaOkBtn));
					rmaOkBtn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));	
					select1stRow_11thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvRate));	
					enter_PvRate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 423, 6));
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_11thColumn));	
					select2ndRow_11thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvRate));	
					enter_PvRate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 423, 6));
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_11thColumn));	
					select3rdRow_11thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvRate));	
					enter_PvRate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 423, 6));
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_11thColumn));	
					select4thRow_11thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvRate));	
					enter_PvRate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 423, 6));
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_11thColumn));	
					select5thRow_11thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvRate));	
					enter_PvRate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 423, 6));
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select6thRow_11thColumn));	
					select6thRow_11thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvRate));	
					enter_PvRate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 423, 6));
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select7thRow_11thColumn));	
					select7thRow_11thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvRate));	
					enter_PvRate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 423, 6));
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select8thRow_11thColumn));	
					select8thRow_11thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvRate));	
					enter_PvRate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 423, 6));
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select9thRow_11thColumn));	
					select9thRow_11thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvRate));	
					enter_PvRate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 423, 6));
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select10thRow_11thColumn));	
					select10thRow_11thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvRate));	
					enter_PvRate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 423, 6));
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select11thRow_10thColumn));	
					select11thRow_10thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvRate));	
					enter_PvRate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 423, 6));
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select12thRow_11thColumn));	
					select12thRow_11thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvRate));	
					enter_PvRate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 423, 6));
						
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
					String docno=documentNumberTxt.getAttribute("value");
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));	
					saveBtn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));	
					billRefPickIcon.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));	
					Bill_OkBtn.click();
					
					
					
					   
				   boolean savingMessage=checkVoucherSavingMessage(docno);
				   
				   
				   String actSavingMessage=Boolean.toString(savingMessage);
				   String expSavingMessage=excelReader.getCellData("PurchaseVoucherVAT", 416, 7);
				   
				   excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 416, 8, actSavingMessage.toUpperCase());
				   
				   
				   
				   System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
				   
				   
				   if (savingMessage==true)
				   {
						System.out.println("Test Pass  Voucher Saved Successfully in Purchae Voucher VAT  ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 416, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail Voucher Fails in saving in Purchae Voucher VAT ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 416, 9, resFail);
						return false;
					}
				}
				
				
				
				public boolean checkSuspedingPurchaseVoucherVatVoucherOnPreviousButton() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
				{
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));	
					previousBtn.click();
					
					checkUserFriendlyMessage();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
					String docno=documentNumberTxt.getAttribute("value");
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));	
					new_SuspendBtn.click();
					
					
				   boolean savingMessage=checkVoucherSavingMessage(docno);
				   
				   
				   String actSavingMessage=Boolean.toString(savingMessage);
				   String expSavingMessage=excelReader.getCellData("PurchaseVoucherVAT", 424, 7);
				   
				   excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 424, 8, actSavingMessage.toUpperCase());
				   
				   
				   
				   System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
				   
				   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));	
				   new_CloseBtn.click();
					
					Thread.sleep(2000);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));	
					voucherhomeCloseBtn.click();
				   
				   
				   if (savingMessage==true)
				   {
						System.out.println("Test Pass  Voucher Saved Successfully in Purchae Voucher VAT  ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 424, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail Voucher Fails in saving in Purchae Voucher VAT ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 424, 9, resFail);
						return false;
					}
				}
				
				
		
		
		@FindBy(xpath="//*[@id='id_transactionentry_postingdetail_popup']/div/div/div[2]/div/div[2]/div[1]/div/div")
		private static List<WebElement>  postingDetailsDebitList; 
		
		
		@FindBy(xpath="//*[@id='id_transactionentry_postingdetail_popup']/div/div/div[2]/div/div[2]/div[1]/div/div[1]")
		private static List<WebElement>  postingDetailsDebitSecList_AccList;
		
		
		@FindBy(xpath="//*[@id='id_transactionentry_postingdetail_popup']/div/div/div[2]/div/div[2]/div[2]/div/div")
		private static List<WebElement>  postingDetailsCreditList; 
		
		
		@FindBy(xpath="//*[@id='id_transactionentry_postingdetail_popup']/div/div/div[2]/div/div[2]/div[2]/div/div[1]")
		private static List<WebElement>  postingDetailsCreditSec_AccList; 
		
		@FindBy(xpath="//*[@id='id_transactionentry_postingdetail_popup']/div/div/div[2]/div/div[3]/div[1]/div/div[2]")
		private static WebElement  postingDetailsDebitSum; 
		    	  	
		@FindBy(xpath="//*[@id='id_transactionentry_postingdetail_popup']/div/div/div[2]/div/div[3]/div[2]/div/div[2]")
		private static WebElement  postingDetailsCreditSum; 
		
		@FindBy(xpath="//div[@class='modal-header theme_background-color']//button[@class='close'][contains(text(),'×')]")
		private static WebElement  postingDetailsCloseBtn; 
		
		
		
				
		public boolean checkPostingDetailsOnInputingRateRateSameAsStandardRateDefined() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
	
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
			purchaseVouchersVat.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkUserFriendlyMessage();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys(Keys.END);
			vendorAccountTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			vendorAccountTxt.sendKeys(Keys.SPACE);
			
			int vendorcount=vendorAccountListCount.size();
			
			System.err.println(vendorcount);
			
			for(int i=0 ; i < vendorcount ;i++)
			{
				String data=vendorAccountListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 435, 6)))
				{
					vendorAccountListCount.get(i).click();
					
					break;
				}
			}
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			
			departmentTxt.sendKeys(Keys.END);
			
			departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME,Keys.BACK_SPACE);
							
			departmentTxt.sendKeys(Keys.SPACE);
			
			
	        int departmentcount=departmentListCount.size();
			
			System.err.println(departmentcount);
				
			for(int i=0 ; i < departmentcount ;i++)
			{
				String data=departmentListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 436, 6)))
				{
					departmentListCount.get(i).click();
					
					break;
				}
			}
				
			departmentTxt.sendKeys(Keys.TAB);	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
			enter_WarehouseTxt.click();
			
			enter_WarehouseTxt.sendKeys(Keys.SPACE);
		
			
			int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
			
			for (int i = 0; i < pvvGridWarehouseListCount; i++) 
			{
				String warehouse=pvvGridWarehouseList.get(i).getText();
				if (warehouse.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 437, 6))) 
				{
					pvvGridWarehouseList.get(i).click();
					break;
				}
			}
	        enter_WarehouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			
			enter_ItemTxt.click();
			enter_ItemTxt.sendKeys(Keys.SPACE);
	        int pvvGridItemListCount=pvvGridItemList.size();
			for (int i = 0; i < pvvGridItemListCount; i++) 
			{
				String Item=pvvGridItemList.get(i).getText();
				if (Item.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 438, 6))) 
				{
					pvvGridItemList.get(i).click();
					break;
				}
			}
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
	        enter_PvTaxCode.sendKeys(Keys.TAB);
	        
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvUnitTxt));
			enter_PvUnitTxt.sendKeys(Keys.END);
			enter_PvUnitTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			enter_PvUnitTxt.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 439, 6));
			Thread.sleep(1000);
			enter_PvUnitTxt.sendKeys(Keys.TAB);
	        
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
			select1stRow_7thColumn.click();
			
							
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			select1stRow_8thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
			select1stRow_9thColumn.click();
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.click();
			enter_Quantity.clear();
			enter_Quantity.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 440, 6));
			enter_Quantity.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.click();
			enter_Rate.clear();
			enter_Rate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 441, 6));
			enter_Rate.sendKeys(Keys.TAB);
							
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));	
			select1stRow_14thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String docno=documentNumberTxt.getAttribute("value");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));	
			saveBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));	
			billRefPickIcon.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));	
			Bill_OkBtn.click();
			
			
			
			   
		   boolean savingMessage=checkVoucherSavingMessage(docno);
		   
		   
		   String actSavingMessage=Boolean.toString(savingMessage);
		   String expSavingMessage=excelReader.getCellData("PurchaseVoucherVAT", 442, 7);
		   
		   excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 442, 8, actSavingMessage);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));	
			previousBtn.click();
			
			checkUserFriendlyMessage();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));	
			toggleBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(postingDetailsBtn));	
			postingDetailsBtn.click();
			
			Thread.sleep(3000);
			
			int postingDetailsDebitListCount = postingDetailsDebitList.size();
			
			 ArrayList<String> postingDetailsDebitListArray = new ArrayList<String>();
			
			for (int i=0;i<postingDetailsDebitListCount;i++)
			{
				String data = postingDetailsDebitList.get(i).getText();
				postingDetailsDebitListArray.add(data);
				
			}
			
			String actpostingDetailsDebitList = postingDetailsDebitListArray.toString();
			
			String exppostingDetailsDebitList =excelReader.getCellData("PurchaseVoucherVAT", 443, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 443, 8, actpostingDetailsDebitList);
			
			System.out.println("actpostingDetailsDebitList : "+actpostingDetailsDebitList);
			System.out.println("exppostingDetailsDebitList : "+exppostingDetailsDebitList);
			
			int postingDetailsCreditListCount = postingDetailsCreditList.size();
			
			 ArrayList<String> postingDetailsCreditListArray = new ArrayList<String>();
			
			for (int i=0;i<postingDetailsCreditListCount;i++)
			{
				String data = postingDetailsCreditList.get(i).getText();
				postingDetailsCreditListArray.add(data);
				
			}
			
			String actpostingDetailsCreditList = postingDetailsCreditListArray.toString();
			
			String exppostingDetailsCreditList =excelReader.getCellData("PurchaseVoucherVAT", 444, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 444, 8, actpostingDetailsCreditList);
			
			System.out.println("actpostingDetailsCreditList : "+actpostingDetailsCreditList);
			System.out.println("exppostingDetailsCreditList : "+exppostingDetailsCreditList);
		   
		   String actpostingDetailsDebitSum = postingDetailsDebitSum.getText();
		   String exppostingDetailsDebitSum = excelReader.getCellData("PurchaseVoucherVAT", 445, 7);
			
		   excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 445, 8, actpostingDetailsDebitSum);
			
		   String actpostingDetailsCreditSum = postingDetailsCreditSum.getText();
		   String exppostingDetailsCreditSum = excelReader.getCellData("PurchaseVoucherVAT", 446, 7);
				
		   excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 446, 8, actpostingDetailsCreditSum);
		   
		   System.out.println("postingDetailsDebitSum : "+actpostingDetailsDebitSum  +" Value Expected : "+exppostingDetailsDebitSum);
		   System.out.println("postingDetailsCreditSum : "+actpostingDetailsCreditSum+" Value Expected : "+exppostingDetailsCreditSum);
		   
		   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(postingDetailsCloseBtn));
		   postingDetailsCloseBtn.click();
		   
		   if (savingMessage==true 
				   && actpostingDetailsDebitList.equalsIgnoreCase(exppostingDetailsDebitList)
				   && actpostingDetailsCreditList.equalsIgnoreCase(exppostingDetailsCreditList)
				   
				   && actpostingDetailsDebitSum.equalsIgnoreCase(exppostingDetailsDebitSum) 
				   && actpostingDetailsCreditSum.equalsIgnoreCase(exppostingDetailsCreditSum))
		   {
				System.out.println("Test Pass  Voucher Saved Successfully in Purchae Voucher VAT  ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 434, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail Voucher Fails in saving in Purchae Voucher VAT ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 434, 9, resFail);
				return false;
			}
		}
		
				

		
		public boolean checkEdtingVocuherAsRateGreaterThanStandardRateAndCheckPostingDetails() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
			select1stRow_11thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.click();
			enter_Rate.clear();
			enter_Rate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 447, 6));
			enter_Rate.sendKeys(Keys.TAB);
							
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));	
			select1stRow_14thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String docno=documentNumberTxt.getAttribute("value");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));	
			saveBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));	
			billRefPickIcon.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));	
			Bill_OkBtn.click();
			
			
			
			   
		   boolean savingMessage=checkVoucherSavingMessage(docno);
		   
		   
		   String actSavingMessage=Boolean.toString(savingMessage);
		   String expSavingMessage=excelReader.getCellData("PurchaseVoucherVAT", 448, 7);
		   
		   excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 448, 8, actSavingMessage);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));	
			previousBtn.click();
			
			checkUserFriendlyMessage();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));	
			toggleBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(postingDetailsBtn));	
			postingDetailsBtn.click();
			
			Thread.sleep(3000);
			
			int postingDetailsDebitListCount = postingDetailsDebitList.size();
			
			 ArrayList<String> postingDetailsDebitListArray = new ArrayList<String>();
			
			for (int i=0;i<postingDetailsDebitListCount;i++)
			{
				String data = postingDetailsDebitList.get(i).getText();
				postingDetailsDebitListArray.add(data);
				
			}
			
			String actpostingDetailsDebitList = postingDetailsDebitListArray.toString();
			
			String exppostingDetailsDebitList =excelReader.getCellData("PurchaseVoucherVAT", 449, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 449, 8, actpostingDetailsDebitList);
			
			System.out.println("actpostingDetailsDebitList : "+actpostingDetailsDebitList);
			System.out.println("exppostingDetailsDebitList : "+exppostingDetailsDebitList);
			
			int postingDetailsCreditListCount = postingDetailsCreditList.size();
			
			 ArrayList<String> postingDetailsCreditListArray = new ArrayList<String>();
			
			for (int i=0;i<postingDetailsCreditListCount;i++)
			{
				String data = postingDetailsCreditList.get(i).getText();
				postingDetailsCreditListArray.add(data);
				
			}
			
			String actpostingDetailsCreditList = postingDetailsCreditListArray.toString();
			
			String exppostingDetailsCreditList =excelReader.getCellData("PurchaseVoucherVAT", 450, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 450, 8, actpostingDetailsCreditList);
			
			System.out.println("actpostingDetailsCreditList : "+actpostingDetailsCreditList);
			System.out.println("exppostingDetailsCreditList : "+exppostingDetailsCreditList);
		   
		   String actpostingDetailsDebitSum = postingDetailsDebitSum.getText();
		   String exppostingDetailsDebitSum = excelReader.getCellData("PurchaseVoucherVAT", 451, 7);
			
		   excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 451, 8, actpostingDetailsDebitSum);
			
		   String actpostingDetailsCreditSum = postingDetailsCreditSum.getText();
		   String exppostingDetailsCreditSum = excelReader.getCellData("PurchaseVoucherVAT", 452, 7);
				
		   excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 452, 8, actpostingDetailsCreditSum);
		   
		   System.out.println("postingDetailsDebitSum : "+actpostingDetailsDebitSum  +" Value Expected : "+exppostingDetailsDebitSum);
		   System.out.println("postingDetailsCreditSum : "+actpostingDetailsCreditSum+" Value Expected : "+exppostingDetailsCreditSum);
		   
		   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(postingDetailsCloseBtn));
		   postingDetailsCloseBtn.click();
		   
		   if (savingMessage==true 
				   && actpostingDetailsDebitList.equalsIgnoreCase(exppostingDetailsDebitList)
				   && actpostingDetailsCreditList.equalsIgnoreCase(exppostingDetailsCreditList)
				   
				   && actpostingDetailsDebitSum.equalsIgnoreCase(exppostingDetailsDebitSum) 
				   && actpostingDetailsCreditSum.equalsIgnoreCase(exppostingDetailsCreditSum))
		   {
				System.out.println("Test Pass  Voucher Saved Successfully in Purchae Voucher VAT  ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 447, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail Voucher Fails in saving in Purchae Voucher VAT ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 447, 9, resFail);
				return false;
			}
		}
		
		

		
		public boolean checkEdtingVocuherAsRateLessThanStandardRateAndCheckPostingDetailsAndDeleteVocuher() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
			select1stRow_11thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.click();
			enter_Rate.clear();
			enter_Rate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 453, 6));
			enter_Rate.sendKeys(Keys.TAB);
							
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));	
			select1stRow_14thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String docno=documentNumberTxt.getAttribute("value");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));	
			saveBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));	
			billRefPickIcon.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));	
			Bill_OkBtn.click();
			
			
			
			   
		   boolean savingMessage=checkVoucherSavingMessage(docno);
		   
		   
		   String actSavingMessage=Boolean.toString(savingMessage);
		   String expSavingMessage=excelReader.getCellData("PurchaseVoucherVAT", 454, 7);
		   
		   excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 454 ,8,actSavingMessage);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));	
			previousBtn.click();
			
			checkUserFriendlyMessage();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));	
			toggleBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(postingDetailsBtn));	
			postingDetailsBtn.click();
			
			Thread.sleep(3000);
			
			int postingDetailsDebitListCount = postingDetailsDebitList.size();
			
			 ArrayList<String> postingDetailsDebitListArray = new ArrayList<String>();
			
			for (int i=0;i<postingDetailsDebitListCount;i++)
			{
				String data = postingDetailsDebitList.get(i).getText();
				postingDetailsDebitListArray.add(data);
				
			}
			
			String actpostingDetailsDebitList = postingDetailsDebitListArray.toString();
			
			String exppostingDetailsDebitList =excelReader.getCellData("PurchaseVoucherVAT", 455, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 455, 8, actpostingDetailsDebitList);
			
			System.out.println("actpostingDetailsDebitList : "+actpostingDetailsDebitList);
			System.out.println("exppostingDetailsDebitList : "+exppostingDetailsDebitList);
			
			int postingDetailsCreditListCount = postingDetailsCreditList.size();
			
			 ArrayList<String> postingDetailsCreditListArray = new ArrayList<String>();
			
			for (int i=0;i<postingDetailsCreditListCount;i++)
			{
				String data = postingDetailsCreditList.get(i).getText();
				postingDetailsCreditListArray.add(data);
				
			}
			
			String actpostingDetailsCreditList = postingDetailsCreditListArray.toString();
			
			String exppostingDetailsCreditList =excelReader.getCellData("PurchaseVoucherVAT", 456, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 456, 8, actpostingDetailsCreditList);
			
			System.out.println("actpostingDetailsCreditList : "+actpostingDetailsCreditList);
			System.out.println("exppostingDetailsCreditList : "+exppostingDetailsCreditList);
		   
		   String actpostingDetailsDebitSum = postingDetailsDebitSum.getText();
		   String exppostingDetailsDebitSum = excelReader.getCellData("PurchaseVoucherVAT", 457, 7);
			
		   excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 457, 8, actpostingDetailsDebitSum);
			
		   String actpostingDetailsCreditSum = postingDetailsCreditSum.getText();
		   String exppostingDetailsCreditSum = excelReader.getCellData("PurchaseVoucherVAT", 458, 7);
				
		   excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 458, 8, actpostingDetailsCreditSum);
		   
		   System.out.println("postingDetailsDebitSum : "+actpostingDetailsDebitSum  +" Value Expected : "+exppostingDetailsDebitSum);
		   System.out.println("postingDetailsCreditSum : "+actpostingDetailsCreditSum+" Value Expected : "+exppostingDetailsCreditSum);
		   
		   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(postingDetailsCloseBtn));
		   postingDetailsCloseBtn.click();
		   
		   Thread.sleep(2000);
		   
		   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));
		   new_DeleteBtn.click();
		   
		   getWaitForAlert();
		   
		   getAlert().accept();
		   
		   checkUserFriendlyMessage();
		   
		   if (savingMessage==true 
				   && actpostingDetailsDebitList.equalsIgnoreCase(exppostingDetailsDebitList)
				   && actpostingDetailsCreditList.equalsIgnoreCase(exppostingDetailsCreditList)
				   
				   && actpostingDetailsDebitSum.equalsIgnoreCase(exppostingDetailsDebitSum) 
				   && actpostingDetailsCreditSum.equalsIgnoreCase(exppostingDetailsCreditSum))
		   {
				System.out.println("Test Pass  Voucher Saved Successfully in Purchae Voucher VAT  ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 453, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail Voucher Fails in saving in Purchae Voucher VAT ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 453, 9, resFail);
				return false;
			}
		}
		
		
		

		public boolean checkPostingDetailsForSavedPuchaseVoucher() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			documentNumberTxt.click();
			documentNumberTxt.sendKeys(Keys.END);
			documentNumberTxt.sendKeys(Keys.BACK_SPACE);
			documentNumberTxt.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 459, 6));
			Thread.sleep(2000);
			documentNumberTxt.sendKeys(Keys.TAB);
			
			checkUserFriendlyMessage();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));	
			toggleBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(postingDetailsBtn));	
			postingDetailsBtn.click();
			
			Thread.sleep(3000);
			
			int postingDetailsDebitListCount = postingDetailsDebitList.size();
			
			 ArrayList<String> postingDetailsDebitListArray = new ArrayList<String>();
			
			for (int i=0;i<postingDetailsDebitListCount;i++)
			{
				String data = postingDetailsDebitList.get(i).getText();
				postingDetailsDebitListArray.add(data);
				
			}
			
			String actpostingDetailsDebitList = postingDetailsDebitListArray.toString();
			
			String exppostingDetailsDebitList =excelReader.getCellData("PurchaseVoucherVAT", 460, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 460, 8, actpostingDetailsDebitList);
			
			System.out.println("actpostingDetailsDebitList : "+actpostingDetailsDebitList);
			System.out.println("exppostingDetailsDebitList : "+exppostingDetailsDebitList);
			
			int postingDetailsCreditListCount = postingDetailsCreditList.size();
			
			 ArrayList<String> postingDetailsCreditListArray = new ArrayList<String>();
			
			for (int i=0;i<postingDetailsCreditListCount;i++)
			{
				String data = postingDetailsCreditList.get(i).getText();
				postingDetailsCreditListArray.add(data);
				
			}
			
			String actpostingDetailsCreditList = postingDetailsCreditListArray.toString();
			
			String exppostingDetailsCreditList =excelReader.getCellData("PurchaseVoucherVAT", 461, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 461, 8, actpostingDetailsCreditList);
			
			System.out.println("actpostingDetailsCreditList : "+actpostingDetailsCreditList);
			System.out.println("exppostingDetailsCreditList : "+exppostingDetailsCreditList);
		   
		   String actpostingDetailsDebitSum = postingDetailsDebitSum.getText();
		   String exppostingDetailsDebitSum = excelReader.getCellData("PurchaseVoucherVAT", 462, 7);
			
		   excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 462, 8, actpostingDetailsDebitSum);
			
		   String actpostingDetailsCreditSum = postingDetailsCreditSum.getText();
		   String exppostingDetailsCreditSum = excelReader.getCellData("PurchaseVoucherVAT", 463, 7);
				
		   excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 463, 8, actpostingDetailsCreditSum);
		   
		   System.out.println("postingDetailsDebitSum : "+actpostingDetailsDebitSum  +" Value Expected : "+exppostingDetailsDebitSum);
		   System.out.println("postingDetailsCreditSum : "+actpostingDetailsCreditSum+" Value Expected : "+exppostingDetailsCreditSum);
		   
		   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(postingDetailsCloseBtn));
		   postingDetailsCloseBtn.click();
		   
		   Thread.sleep(2000);
		   
		   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));	
		   new_CloseBtn.click();
			
		   Thread.sleep(2000);
			
		   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));	
		   voucherhomeCloseBtn.click();
		   
		   
		   if ( actpostingDetailsDebitList.equalsIgnoreCase(exppostingDetailsDebitList)
				   && actpostingDetailsCreditList.equalsIgnoreCase(exppostingDetailsCreditList)
				   
				   && actpostingDetailsDebitSum.equalsIgnoreCase(exppostingDetailsDebitSum) 
				   && actpostingDetailsCreditSum.equalsIgnoreCase(exppostingDetailsCreditSum))
		   {
				System.out.println("Test Pass  Voucher Saved Successfully in Purchae Voucher VAT  ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 459, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail Voucher Fails in saving in Purchae Voucher VAT ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 459, 9, resFail);
				return false;
			}
		}
		
		
		
				
//pURCHASE vOUCHER VAT ENDS HERE
				
				
//Starts PV VAT View
				
				
						
				
	@FindBy(xpath="//span[contains(text(),'PV VAT View')]")
	private static WebElement  pvvatViewMenu;	
	
	
	
	public boolean checkCreatedVoucherUnderTransationinFinancial() throws EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		try 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvvatViewMenu));
			boolean PVVATViewDisplay=pvvatViewMenu.isDisplayed();
			
			String actPVVATViewDisplay=Boolean.toString(PVVATViewDisplay);
			String expPVVATViewDisplay=excelReader.getCellData("PvVatView", 10, 7);
			
			excelReader.setCellData(xlfile, xlSheetName, 10, 8, actPVVATViewDisplay);
			
			
			System.out.println(" PVVATView : "+actPVVATViewDisplay +" Value Expected : "+expPVVATViewDisplay);
			
			if (actPVVATViewDisplay.equalsIgnoreCase(expPVVATViewDisplay))
			{
				excelReader.setCellData(xlfile, "PvVatView", 9, 9, resPass);
				System.out.println(" Test Pass :  PVvat View is Displayed ");
				return true;
			}
			else
			{
				System.out.println(" Test Pass :  PVvat View is Displayed ");
				excelReader.setCellData(xlfile, "PvVatView", 9, 9, resFail);
				return false;
			}
		     }
		 catch (Exception e) 
			{
		 		 String exception =e.getMessage().substring(0, 50);
	 	         excelReader.setExceptionInExcel(xlfile, "PvVatView", 9, 10, exception);
	 	         System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
	 	         return false;
			}
	}
	
	
	
	
	
	
	public boolean checkPvVatViewHomePage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	 {
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			try 
			{
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvvatViewMenu));
			pvvatViewMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			
			boolean actHomePageNewBtn                  =newBtn.isDisplayed();
			boolean actHomePageEditBtn                 =editBtn.isDisplayed();
			boolean actHomePagePrintBtn                =printBtn.isDisplayed();
			boolean actHomePageDeleteBtn               =deleteBtn.isDisplayed();
			boolean actHomePageSuspendBtn              =suspendBtn.isDisplayed();
			boolean actHomePagePrintBarcodeBtn         =printBarCodeBtn.isDisplayed();
			boolean actHomePageExportXMLBtn            =exportToXMLBtn.isDisplayed();
			boolean actHomePageSettingsBtn             =settingsBtn.isDisplayed();
			boolean actHomePageCloseBtn                =homeCloseBtn.isDisplayed();
			boolean actHomePageGridCheckBox            =grid_HeaderChkBox.isDisplayed();
			boolean actHomePageSortingBtn              =sortingBtn.isDisplayed();
			boolean actHomePageCreateViewBn            =createViewBtn.isDisplayed();
			boolean actHomePageCustomizeBtn   		   =customizeBtn.isDisplayed();
			boolean actHomePageFilterBtn     		   =filterBtn.isDisplayed();
			boolean actHomePageRefreshBtn    		   =refreshBtn.isDisplayed();
			boolean actHomePageOptionsBtn     		   =optionsBtn.isDisplayed();
			boolean actHomePageExportBtn               =exportBtn.isDisplayed();
			
			boolean actHomePageAllVouchersView         =homePageAllVouchersView.isDisplayed();
			
			
			boolean expHomePageNewBtn                   =true;
			boolean expHomePageEditBtn                  =true;
			boolean expHomePagePrintBtn                 =true;
			boolean expHomePageDeleteBtn                =true;
			boolean expHomePageAuthorizeBtn             =true;
			boolean expHomePageSuspendBtn               =true;
			boolean expHomePagePrintBarcodeBtn          =true;
			boolean expHomePageExportXMLBtn             =true;
			boolean expHomePageSettingsBtn              =true;
			boolean expHomePageCloseBtn                 =true;
			boolean expHomePageGridCheckBox             =true;
			boolean expHomePageSortingBtn               =true;
			boolean expHomePageCreateViewBn             =true;
			boolean expHomePageCustomizeBtn             =true;
			boolean expHomePageFilterBtn                =true;
			boolean expHomePageRefreshBtn               =true;
			boolean expHomePageOptionsBtn               =true;
			boolean expHomePageExportBtn                =true;
			
			boolean expHomePageAllVouchersView          =true;
				
				
				System.out.println("************************************ checkPvVatViewNewHomePage  *****************************************************");
				System.out.println("Home Page New Btn Value Actual           :"+actHomePageNewBtn                   +"    Value Expected : "+expHomePageNewBtn);
				System.out.println("Home Page Edit Btn Value Actual          :"+actHomePageEditBtn                  +"    Value Expected : "+expHomePageEditBtn);
				System.out.println("Home Page Print Btn Value Actual         :"+actHomePagePrintBtn                 +"	 Value Expected : "+expHomePagePrintBtn);
				System.out.println("Home Page Delete Btn Value Actual        :"+actHomePageDeleteBtn                +"	 Value Expected : "+expHomePageDeleteBtn);
				System.out.println("Home Page Suspend Btn Value Actual       :"+actHomePageSuspendBtn               +"	 Value Expected : "+expHomePageSuspendBtn);
				System.out.println("Home Page Print Barcode Btn Value Actual :"+actHomePagePrintBarcodeBtn          +"	 Value Expected : "+expHomePagePrintBarcodeBtn);
				System.out.println("Home Page Export XML Btn Value Actual    :"+actHomePageExportXMLBtn             +"	 Value Expected : "+expHomePageExportXMLBtn);
				System.out.println("Home Page Settings Btn Value Actual      :"+actHomePageSettingsBtn              +"	 Value Expected : "+expHomePageSettingsBtn);
				System.out.println("Home Page Close Btn Value Actual         :"+actHomePageCloseBtn                 +"	 Value Expected : "+expHomePageCloseBtn);
				System.out.println("Home Page Grid check Value Actual        :"+actHomePageGridCheckBox             +"	 Value Expected : "+expHomePageGridCheckBox);
				System.out.println("Home Page Sorting Btn Value Actual       :"+actHomePageSortingBtn               +"	 Value Expected : "+expHomePageSortingBtn);
				System.out.println("Home Page Create View Btn Value Actual   :"+actHomePageCreateViewBn             +"	 Value Expected : "+expHomePageCreateViewBn);
				System.out.println("Home Page Customize Btn Value Actual     :"+actHomePageCustomizeBtn             +"	 Value Expected : "+expHomePageCustomizeBtn);
				System.out.println("Home Page Filter check Value Actual      :"+actHomePageFilterBtn                +"	 Value Expected : "+expHomePageFilterBtn);
				System.out.println("Home Page Refesh Btn Value Actual        :"+actHomePageRefreshBtn               +"	 Value Expected : "+expHomePageRefreshBtn);
				System.out.println("Home Page Options Btn Value Actual       :"+actHomePageOptionsBtn               +"	 Value Expected : "+expHomePageOptionsBtn);
				System.out.println("Home Page Export Btn Value Actual        :"+actHomePageExportBtn                +"	 Value Expected : "+expHomePageExportBtn);
				System.out.println("Home Page All Voucher View Value Actual  :"+actHomePageAllVouchersView          +"	 Value Expected : "+expHomePageAllVouchersView);
				
				
				boolean actMethod=actHomePageNewBtn==expHomePageNewBtn  && actHomePageEditBtn==expHomePageEditBtn && actHomePagePrintBtn==expHomePagePrintBtn
						&& actHomePageDeleteBtn==expHomePageDeleteBtn  && actHomePageSuspendBtn==expHomePageSuspendBtn 
		                && actHomePagePrintBarcodeBtn==expHomePagePrintBarcodeBtn && actHomePageExportXMLBtn==expHomePageExportXMLBtn
						&& actHomePageSettingsBtn==expHomePageSettingsBtn && actHomePageCloseBtn==expHomePageCloseBtn && actHomePageGridCheckBox==expHomePageGridCheckBox
						&& actHomePageSortingBtn==expHomePageSortingBtn && actHomePageCreateViewBn==expHomePageCreateViewBn && actHomePageCustomizeBtn==expHomePageCustomizeBtn
						&& actHomePageFilterBtn==expHomePageFilterBtn && actHomePageRefreshBtn==expHomePageRefreshBtn && actHomePageOptionsBtn==expHomePageOptionsBtn
						&& actHomePageExportBtn==expHomePageExportBtn && actHomePageAllVouchersView==expHomePageAllVouchersView;
				
				
				String actResult=Boolean.toString(actMethod);
				String expResult=excelReader.getCellData("PvVatView", 12, 7);
				
				excelReader.setCellData(xlfile, "PvVatView", 12, 8, actResult.toUpperCase());
				
				if(actMethod==true)
				{
					System.out.println("Test Pass : HomeScreen Options Are Displayed");
					excelReader.setCellData(xlfile, "PvVatView", 11, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : HomeScreen Options Are NOT Displayed");
					excelReader.setCellData(xlfile, "PvVatView", 11, 9, resFail);
					return false;
				}
	         }
	     catch (Exception e) 
		 {
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PvVatView", 11, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		 	return false;
		 }
		}
					
							
				
	public boolean checkPVVATViewNewEntryPage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		try
		{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		checkUserFriendlyMessage();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(freeFlowBtn));
		
		boolean actEntryPageJumpToHeaderSectionBtn= jumpToHeaderSectionBtn.isDisplayed();
		boolean actEntryPageJumpToBodySectionBtn  = jumpToBodySectionBtn.isDisplayed();
		boolean actEntryPageJumpToFooterBtn       = jumpToFooterBtn.isDisplayed();
		boolean actEntryPageNewBtn                = new_newBtn.isDisplayed();
		boolean actEntryPageSaveBtn               = saveBtn.isDisplayed();
		boolean actEntryPagePreviousBtn           = previousBtn.isDisplayed();
		boolean actEntryPageNextBtn               = nextBtn.isDisplayed();
		boolean actEntryPagePrintBtn              = new_PrintBtn.isDisplayed();
		boolean actEntryPageSuspendBtn            = new_SuspendBtn.isDisplayed();
		boolean actEntryPageCloseBtn              = new_CloseBtn.isDisplayed();
		boolean actEntryPageToggleBtn             = toggleBtn.isDisplayed();

		
		boolean expEntryPageJumpToHeaderSectionBtn= true;
		boolean expEntryPageJumpToBodySectionBtn  = true;
		boolean expEntryPageJumpToFooterBtn       = true;
		boolean expEntryPageNewBtn	              = true;
		boolean expEntryPageSaveBtn               = true;
		boolean expEntryPagePreviousBtn           = true;
		boolean expEntryPageNextBtn               = true;
		boolean expEntryPagePrintBtn              = true;
		boolean expEntryPageSuspendBtn            = true;
		boolean expEntryPageCloseBtn              = true;
		boolean expEntryPageToggleBtn             = true;

		
		
		System.out.println("************************************* checkPvVatViewEntryPage  ********************************************");
		
		System.out.println("Entry Page RC Jump to Header Value Actual:"+actEntryPageJumpToHeaderSectionBtn +"    Value Expected : "+expEntryPageJumpToHeaderSectionBtn);
		System.out.println("Entry Page RC Jump To Body Value Actual  :"+actEntryPageJumpToBodySectionBtn   +"    Value Expected : "+expEntryPageJumpToBodySectionBtn);
		System.out.println("Entry Page RC Jump To Footer Value Actual:"+actEntryPageJumpToFooterBtn        +"    Value Expected : "+expEntryPageJumpToFooterBtn);
		System.out.println("Entry Page RC New Btn Value Actual       :"+actEntryPageNewBtn                 +"    Value Expected : "+expEntryPageNewBtn);
		System.out.println("Entry Page RC Save Btn Value Actual      :"+actEntryPageSaveBtn                +"    Value Expected : "+expEntryPageSaveBtn);
		System.out.println("Entry Page RC Previous Btn Value Actual  :"+actEntryPagePreviousBtn            +"    Value Expected : "+expEntryPagePreviousBtn);
		System.out.println("Entry Page RC Next Btn Value Actual      :"+actEntryPageNextBtn                +"    Value Expected : "+expEntryPageNextBtn);
		System.out.println("Entry Page RC Print Btn Value Actual     :"+actEntryPagePrintBtn               +"    Value Expected : "+expEntryPagePrintBtn);
		System.out.println("Entry Page RC Suspend Btn Value Actual   :"+actEntryPageSuspendBtn             +"    Value Expected : "+expEntryPageSuspendBtn);
		System.out.println("Entry Page RC Close Btn Value Actual     :"+actEntryPageCloseBtn               +"    Value Expected : "+expEntryPageCloseBtn);
		System.out.println("Entry Page RC Toggle Btn Value Actual    :"+actEntryPageToggleBtn              +"    Value Expected : "+expEntryPageToggleBtn);
		
		
		boolean actMethod=actEntryPageJumpToHeaderSectionBtn==expEntryPageJumpToHeaderSectionBtn && actEntryPageJumpToBodySectionBtn==expEntryPageJumpToBodySectionBtn 
				&& actEntryPageJumpToFooterBtn==expEntryPageJumpToFooterBtn && actEntryPageJumpToFooterBtn==expEntryPageJumpToFooterBtn
				&& actEntryPageNewBtn==expEntryPageNewBtn && actEntryPageSaveBtn==expEntryPageSaveBtn && actEntryPagePreviousBtn==expEntryPagePreviousBtn
				&& actEntryPageNextBtn==expEntryPageNextBtn && actEntryPagePrintBtn==expEntryPagePrintBtn &&actEntryPageSuspendBtn==expEntryPageSuspendBtn 
				&& actEntryPageCloseBtn==expEntryPageCloseBtn && actEntryPageToggleBtn==expEntryPageToggleBtn;
		
		
		String actResult=Boolean.toString(actMethod);
		String expResult=excelReader.getCellData("PvVatView", 14, 7);
		
		excelReader.setCellData(xlfile, "PvVatView", 14, 8, actResult.toUpperCase());
		
		if(actResult.equalsIgnoreCase(expResult))
	
		{
			System.out.println("Test Pass : Entry Page Header Toggle  Options Are Displayed");
			excelReader.setCellData(xlfile, "PvVatView", 13, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, "PvVatView", 13, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
	{
		String exception =e.getMessage();
		excelReader.setExceptionInExcel(xlfile, "PvVatView", 13, 10, exception);
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
   	 	return false;
	}
	}

	
	
	@FindBy (xpath="//input[@id='id_header_20']")
	private static WebElement updateStockChkbox;
	                    
	@FindBy (xpath="//input[@id='id_header_67108934']")
	private static WebElement pvvatviewNarrationTxt;
	
	
	
	
	
	

	public boolean checkPvVATViewEntryPageHeaderFields() throws EncryptedDocumentException, InvalidFormatException, IOException
	{

		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		try
		{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	
		boolean actEntryPageHeaderFieldsDocNumber     =documentNumberTxt.isDisplayed();
		boolean actEntryPageHeaderFieldsDate          =dateTxt.isDisplayed();
		boolean actEntryPageHeaderFieldsPurchaseAc    =purchaseAccountTxt.isDisplayed();
		boolean actEntryPageHeaderupdateStockChkbox   =updateStockChkbox.isDisplayed();
		boolean actEntryPageHeaderFieldsVendorAc      =vendorAccountTxt.isDisplayed();
		boolean actEntryPageHeaderFieldRaiseReceipt   =voucherRaiseReceiptCheckBox.isDisplayed();
		boolean actEntryPageHeaderFieldsDepartment    =departmentTxt.isDisplayed();
		boolean actEntryPageHeaderFieldsDueDate       =voucherHeaderDueDate.isDisplayed();                                         
		boolean actEntryPageHeaderFieldsLocalExchRate =voucherHeaderLocalExchangeRate.isDisplayed();
		boolean actEntryPageHeaderFieldsCurrency      =voucherHeaderCurrency.isDisplayed();
		boolean actEntryPageHeaderFieldsExchRate      =voucherHeaderExchangeRate.isDisplayed();
		boolean actEntryPageHeaderFieldsWarehouse     =voucherHeaderCurrency.isDisplayed();
		boolean actEntryPageHeaderpvvatviewNarrationTxt=pvvatviewNarrationTxt.isDisplayed();
		
		boolean expEntryPageHeaderFieldsDocNumber     =true;
		boolean expEntryPageHeaderFieldsDate          =true;
		boolean expEntryPageHeaderFieldsPurchaseAc    =true;
		boolean expEntryPageHeaderUpdateStcokChkbox   =true;
		boolean expEntryPageHeaderFieldsVendorAc      =true;
		boolean expEntryPageHeaderFieldRaiseReceipt   =true;
		boolean expEntryPageHeaderFieldsDepartment    =true;
		boolean expEntryPageHeaderFieldsDueDate       =true;                                         
		boolean expEntryPageHeaderFieldsLocalExchRate =true;
		boolean expEntryPageHeaderFieldsCurrency      =true;
		boolean expEntryPageHeaderFieldsExchRate      =true;
		boolean expEntryPageHeaderFieldsWarehouse     =true;
        boolean expEntryPageHeaderFieldpvvatviewNarrationTxt  =true;
       
		System.out.println("************************************* checkPvVATViewEntryPageHeaderFields  *******************************************************");
		System.out.println("Entry Page Header Doc No Value Actual         :"+actEntryPageHeaderFieldsDocNumber    +"  Value Expected : "+expEntryPageHeaderFieldsDocNumber);
		System.out.println("Entry Page Header Date  Value Actual          :"+actEntryPageHeaderFieldsDate         +"  Value Expected : "+expEntryPageHeaderFieldsDate);
		System.out.println("Entry Page Header UpdateChkbox Value Actual   :"+actEntryPageHeaderupdateStockChkbox   +"  Value Expected : "+expEntryPageHeaderUpdateStcokChkbox);
		System.out.println("Entry Page Header Purchase Value Actual       :"+actEntryPageHeaderFieldsPurchaseAc   +"  Value Expected : "+expEntryPageHeaderFieldsPurchaseAc);	
		System.out.println("Entry Page Header Vendor Value Actual         :"+actEntryPageHeaderFieldsVendorAc     +"  Value Expected : "+expEntryPageHeaderFieldsVendorAc);
		System.out.println("Entry Page Header Raise Receipt Value Actual  :"+actEntryPageHeaderFieldRaiseReceipt  +"  Value Expected : "+expEntryPageHeaderFieldRaiseReceipt);
		System.out.println("Entry Page Header Department Value Actual     :"+actEntryPageHeaderFieldsDepartment   +"  Value Expected : "+expEntryPageHeaderFieldsDepartment);
		System.out.println("Entry Page Header Due Date Value Actual       :"+actEntryPageHeaderFieldsDueDate      +"  Value Expected : "+expEntryPageHeaderFieldsDueDate);	
		System.out.println("Entry Page Header Local Exch Rate Value Actual:"+actEntryPageHeaderFieldsLocalExchRate+"  Value Expected : "+expEntryPageHeaderFieldsLocalExchRate);
		System.out.println("Entry Page Header Currency Value Actual       :"+actEntryPageHeaderFieldsCurrency     +"  Value Expected : "+expEntryPageHeaderFieldsCurrency);
		System.out.println("Entry Page Header Exch Rate Value Actual      :"+actEntryPageHeaderFieldsExchRate     +"  Value Expected : "+expEntryPageHeaderFieldsExchRate);
		System.out.println("Entry Page Header Warehouse Value Actual      :"+actEntryPageHeaderFieldsWarehouse    +"  Value Expected : "+expEntryPageHeaderFieldsWarehouse);	
		System.out.println("Entry Page Header SNarrtion Value Actual:     "+actEntryPageHeaderpvvatviewNarrationTxt  +"  Value Expected : "+expEntryPageHeaderFieldpvvatviewNarrationTxt);
		
		boolean actMethod=actEntryPageHeaderFieldsDocNumber==expEntryPageHeaderFieldsDocNumber && actEntryPageHeaderFieldsDate==expEntryPageHeaderFieldsDate 
				&& actEntryPageHeaderFieldsPurchaseAc==expEntryPageHeaderFieldsPurchaseAc && actEntryPageHeaderupdateStockChkbox==expEntryPageHeaderUpdateStcokChkbox
				&& actEntryPageHeaderFieldsVendorAc==expEntryPageHeaderFieldsVendorAc && actEntryPageHeaderFieldRaiseReceipt==expEntryPageHeaderFieldRaiseReceipt
				&& actEntryPageHeaderFieldsDepartment==expEntryPageHeaderFieldsDepartment && actEntryPageHeaderFieldsDueDate==expEntryPageHeaderFieldsDueDate
				&& actEntryPageHeaderFieldsLocalExchRate==expEntryPageHeaderFieldsLocalExchRate && actEntryPageHeaderFieldsCurrency==expEntryPageHeaderFieldsCurrency
				&& actEntryPageHeaderFieldsWarehouse==expEntryPageHeaderFieldsWarehouse && actEntryPageHeaderpvvatviewNarrationTxt==expEntryPageHeaderFieldpvvatviewNarrationTxt
				&& actEntryPageHeaderFieldsExchRate==expEntryPageHeaderFieldsExchRate 
				;
	
		String actResult= Boolean.toString(actMethod);
		String expResult=excelReader.getCellData("PvVatView", 14, 7);
		
		excelReader.setCellData(xlfile, "PvVatView", 14, 8, actResult);
		
		if(actMethod==true)
		{
			System.out.println("Test Pass : entry Page Header Options Are Displayed");
			excelReader.setCellData(xlfile, "PvVatView", 13, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, "PvVatView", 13, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
	{
		String exception =e.getMessage();
		excelReader.setExceptionInExcel(xlfile, "PvVatView", 13, 10, exception);
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
   	 	return false;
	}
	
	}

	
	
	
	
	public boolean checkPVVATViewEntryPageBodyFields() throws EncryptedDocumentException, InvalidFormatException, IOException
	
	{
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));		
		
		
		int pvVatBodygridHeaderListCount = pvVatBodygridHeaderList.size();
		  
		ArrayList<String> voucherBodyGridHeaderListArray = new ArrayList<String>();
		  
		for(int i=0;i<pvVatBodygridHeaderListCount;i++)
		{
			String data = pvVatBodygridHeaderList.get(i).getText();
			
			if(data.equalsIgnoreCase("Batch"))
			{
				JavascriptExecutor js = (JavascriptExecutor) getDriver();
				js.executeScript("arguments[0].scrollIntoView();", voucherBodyRemarksName);
			}
			
			voucherBodyGridHeaderListArray.add(data);
		}	
		
		JavascriptExecutor jss = (JavascriptExecutor) getDriver();
		jss.executeScript("arguments[0].scrollIntoView();", voucherBodyHeaderIndex);
		
		String actvoucherBodyGridHeaderList=voucherBodyGridHeaderListArray.toString();
		
		String expvoucherBodyGridHeaderList=excelReader.getCellData("PvVatView", 16, 7);
		
		excelReader.setCellData(xlfile, "PvVatView", 16, 8, actvoucherBodyGridHeaderList);
		
		boolean actEntryPageBodyFieldsItem           = select1stRow_1stColumn.isDisplayed();
		boolean actEntryPageBodyFieldsUnits          = select1stRow_2ndColumn.isDisplayed();
		boolean actEntryPageBodyFieldsAvgRate0        = select1stRow_3rdColumn.isDisplayed();
		boolean actEntryPageBodyFieldsQty            = select1stRow_4thColumn.isDisplayed();
		boolean actEntryPageBodyFieldsGross          = select1stRow_5thColumn.isDisplayed();
		
		boolean expEntryPageBodyFieldsItem           = true;
		boolean expEntryPageBodyFieldsUnits          = true;
		boolean expEntryPageBodyFieldsAvgRate0       = true;
		boolean expEntryPageBodyFieldsQty            = true;
		boolean expEntryPageBodyFieldsGross          = true;
		
		
		boolean actMethod = actEntryPageBodyFieldsItem==expEntryPageBodyFieldsItem && actEntryPageBodyFieldsUnits==expEntryPageBodyFieldsUnits 
							&& actEntryPageBodyFieldsQty==expEntryPageBodyFieldsQty && actEntryPageBodyFieldsAvgRate0==expEntryPageBodyFieldsAvgRate0 
							&& actEntryPageBodyFieldsGross==expEntryPageBodyFieldsGross;

		String actResult = Boolean.toString(actMethod);

		excelReader.setCellData(xlfile, xlSheetName, 17, 8, actResult.toUpperCase());
		
		String expResult=excelReader.getCellData("PvVatView", 17, 7);
		
		
		System.out.println("Item Value Actual            : " + actEntryPageBodyFieldsItem+ "    Value Expected : " + expEntryPageBodyFieldsItem);
		System.out.println("Units Value Actual           : " + actEntryPageBodyFieldsUnits+ "   Value Expected : " + expEntryPageBodyFieldsUnits);
		System.out.println("Qty Value Actual             : " + actEntryPageBodyFieldsQty+ "     Value Expected : " + expEntryPageBodyFieldsQty);
		System.out.println("Rate Value Actual            : " + actEntryPageBodyFieldsAvgRate0+ "    Value Expected : " + expEntryPageBodyFieldsAvgRate0);	
		System.out.println("Gross Value Actual           : " + actEntryPageBodyFieldsGross+ "   Value Expected : " + expEntryPageBodyFieldsGross);	
		System.out.println("actvoucherBodyGridHeaderList : " + actvoucherBodyGridHeaderList);
		System.out.println("expvoucherBodyGridHeaderList : " + expvoucherBodyGridHeaderList);
		
		if(actMethod==true && actvoucherBodyGridHeaderList.equalsIgnoreCase(expvoucherBodyGridHeaderList))
		{
			System.out.println("Test Pass : entry Page Body Options Are Displayed");
			excelReader.setCellData(xlfile, "PvVatView", 15, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, "PvVatView", 15, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
	{
		String exception =e.getMessage().substring(0, 50);
		excelReader.setExceptionInExcel(xlfile, "PvVatView", 15, 10, e.getMessage());
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		return false;
	}
	}
  
	
	
	
	// Footer Section
		@FindBy(xpath="//input[@id='id_footer_134217779']")
		private static WebElement  pvvatFooterTXt;
		
		@FindBy(xpath="//label[@class='Flabel'][contains(text(),'Footer')]")
		private static WebElement  pvvatFooterLabel;
		
	
		
		
		
	public boolean checkPVVATViewEntryPageFooterFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		try
		{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jumpToFooterBtn));
		jumpToFooterBtn.click();
		
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(netLabel));
		
		boolean actEntryPageFooterFieldsNetLabel  =pvvatFooterLabel.isDisplayed();
		boolean actEntryPageFooterFieldsNetAmount =pvvatFooterTXt.isDisplayed();

		boolean expEntryPageFooterFieldsNetLabel  =true;
		boolean expEntryPageFooterFieldsNetAmount =true;

		System.out.println("****************************&************* checkPVVATViewEntryPageFooterFields  ***************************************************");
		System.out.println("Entry Page Footer Fields Net Label Value Actual  : "+actEntryPageFooterFieldsNetLabel+   " Value Expected : "+expEntryPageFooterFieldsNetLabel);
		System.out.println("Entry Page Footer Fields Net Amount Value Actual : "+actEntryPageFooterFieldsNetAmount+  " Value Expected : "+expEntryPageFooterFieldsNetAmount);

				
		boolean actMethod=actEntryPageFooterFieldsNetLabel==expEntryPageFooterFieldsNetLabel && actEntryPageFooterFieldsNetAmount==expEntryPageFooterFieldsNetAmount;
		
		String actResult=Boolean.toString(actMethod);
		String expresult=excelReader.getCellData("PvVatView", 18, 7);
		
		excelReader.setCellData(xlfile, "PvVatView", 18, 8, actResult.toUpperCase());
		
		
		if(actMethod==true)
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, "PvVatView", 18, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, "PvVatView", 18, 9, resFail);
			return false;
		}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PvVatView", 18, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
	   	 	return false;
		}
	}
	
	
	

	
 
	public boolean checkDocumnetNumberAndSNarrationinPVVATViewEntryPage() throws EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		try
		{
		Thread.sleep(1000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jumpToHeaderSectionBtn));
		jumpToHeaderSectionBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	
		String actdocumentNumberTxt=documentNumberTxt.getAttribute("value");
		String expdocumentNumberTxt=excelReader.getCellData("PvVatView", 20, 7);
		excelReader.setCellData(xlfile, xlSheetName, 20, 8, actdocumentNumberTxt);
			
		String actNarrationTxt=pvvatviewNarrationTxt.getAttribute("value");
		String expNarrationTxt=excelReader.getCellData("PvVatView", 21, 7);
		excelReader.setCellData(xlfile, "PvVatView", 21, 8, actNarrationTxt);
			
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bodyGridFirstColTxt));
		String actBodyGridFirstCol=bodyGridFirstColTxt.getText();
		String expBodyGridFirstCol=excelReader.getCellData("PvVatView", 19 ,7);
		excelReader.setCellData(xlfile, "PvVatView", 19, 8, actBodyGridFirstCol);
		
		
		System.out.println("BodyGridFirstCol   :  "+actBodyGridFirstCol +" Value Expected : "+expBodyGridFirstCol);
		
		
		System.out.println("documentNumberTxt  :  "+actdocumentNumberTxt +" Value Expected : "+expdocumentNumberTxt);
		System.out.println("NarrationTxt       :  "+actNarrationTxt +" Value Expected : "+expNarrationTxt);
		
		if(actdocumentNumberTxt.equalsIgnoreCase(expdocumentNumberTxt) && 
				actNarrationTxt.equalsIgnoreCase(expNarrationTxt))

		{
			excelReader.setCellData(xlfile, "PvVatView", 19, 9, resPass);
			System.out.println(" Test Pass :  PVvat View is Displayed ");
			return true;
		}
		else
		{
			System.out.println(" Test fail :  PVvat View is Displayed ");
			excelReader.setCellData(xlfile, "PvVatView", 19, 9, resFail);
			return false;
		}
	     }
	 catch (Exception e) 
		{
	 		 String exception =e.getMessage().substring(0, 50);
 	         excelReader.setExceptionInExcel(xlfile, "PvVatView", 19, 10, exception);
 	         System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
 	         return false;
		}
		
	}
	
	 @FindBy(xpath="//*[@id='id_transaction_entry_detail_table_control_heading_1']/div[1]")
	 private static WebElement bodyGridFirstColTxt;
	
	
	
	
				
	public boolean checkSNarrationWithVendorAAccountinPVVATViewEntryPage() throws EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		try
		{
		Thread.sleep(1000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
		purchaseAccountTxt.click();
		purchaseAccountTxt.sendKeys(Keys.SPACE);
		
		int count=purchaseAccountListCount.size();
		
		System.err.println(count);
		
		for(int i=0 ; i < count ;i++)
		{
			String data=purchaseAccountListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData("PvVatView", 22, 6)))
			{
				purchaseAccountListCount.get(i).click();
				
				break;
			}
		}
		
		purchaseAccountTxt.sendKeys(Keys.TAB);

        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.SPACE);
		
		int vendorcount=vendorAccountListCount.size();
		
		System.err.println(vendorcount);
		
		for(int i=0 ; i < vendorcount ;i++)
		{
			String data=vendorAccountListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData("PvVatView", 23, 6)))
			{
				vendorAccountListCount.get(i).click();
				
				break;
			}
		}
		
		vendorAccountTxt.sendKeys(Keys.TAB);
		
		String expMessage	= excelReader.getCellData("PvVatView", 24, 7);
		String actMessage	=checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, "PvVatView", 24, 8, actMessage);
		
		
		
		String actNarrationTxt=pvvatviewNarrationTxt.getAttribute("value");
		String expNarrationTxt=excelReader.getCellData("PvVatView", 25, 7);
		excelReader.setCellData(xlfile, "PvVatView", 25, 8, actNarrationTxt);
			
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bodyGridFirstColTxt));
		String actBodyGridFirstCol=bodyGridFirstColTxt.getText();
		String expBodyGridFirstCol=excelReader.getCellData("PvVatView", 26 ,7);
		excelReader.setCellData(xlfile, "PvVatView", 26, 8, actBodyGridFirstCol);
		
		
		System.out.println("BodyGridFirstCol   :  "+actBodyGridFirstCol +" Value Expected : "+expBodyGridFirstCol);
		System.out.println("NarrationTxt       :  "+actNarrationTxt +" Value Expected : "+expNarrationTxt);
		
		if(actMessage.equalsIgnoreCase(expMessage) && 
				actNarrationTxt.equalsIgnoreCase(expNarrationTxt) &&
				actBodyGridFirstCol.equalsIgnoreCase(expBodyGridFirstCol))

		{
			excelReader.setCellData(xlfile, "PvVatView", 22, 9, resPass);
			System.out.println(" Test Pass :  PVvat View is Displayed ");
			return true;
		}
		else
		{
			System.out.println(" Test fail :  PVvat View is Displayed ");
			excelReader.setCellData(xlfile, "PvVatView", 22, 9, resFail);
			return false;
		}
	     }
	 catch (Exception e) 
		{
	 		 String exception =e.getMessage().substring(0, 50);
 	         excelReader.setExceptionInExcel(xlfile, "PvVatView", 22, 10, exception);
 	         System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
 	         return false;
		}
		
	}
	
	public boolean checkSNarrationWithVendorBAccountinPVVATViewEntryPage() throws EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		try
		{
		Thread.sleep(1000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		vendorAccountTxt.sendKeys(Keys.BACK_SPACE);
		vendorAccountTxt.sendKeys(Keys.SPACE);
		
		int vendorcount=vendorAccountListCount.size();
		
		System.err.println(vendorcount);
		
		for(int i=0 ; i < vendorcount ;i++)
		{
			String data=vendorAccountListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData("PvVatView", 28, 6)))
			{
				vendorAccountListCount.get(i).click();
				
				break;
			}
		}
		
		vendorAccountTxt.sendKeys(Keys.TAB);
		
		
		
		String actNarrationTxt=pvvatviewNarrationTxt.getAttribute("value");
		String expNarrationTxt=excelReader.getCellData("PvVatView", 29, 7);
		excelReader.setCellData(xlfile, "PvVatView", 29, 8, actNarrationTxt);
			
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bodyGridFirstColTxt));
		String actBodyGridFirstCol=bodyGridFirstColTxt.getText();
		String expBodyGridFirstCol=excelReader.getCellData("PvVatView", 30 ,7);
		excelReader.setCellData(xlfile, "PvVatView", 30, 8, actBodyGridFirstCol);
		
		
		System.out.println("BodyGridFirstCol   :  "+actBodyGridFirstCol +" Value Expected : "+expBodyGridFirstCol);
		
		System.out.println("NarrationTxt       :  "+actNarrationTxt +" Value Expected : "+expNarrationTxt);
		
		if(actNarrationTxt.equalsIgnoreCase(expNarrationTxt))

		{
			excelReader.setCellData(xlfile, "PvVatView", 27, 9, resPass);
			System.out.println(" Test Pass :  PVvat View is Displayed ");
			return true;
		}
		else
		{
			System.out.println(" Test fail :  PVvat View is Displayed ");
			excelReader.setCellData(xlfile, "PvVatView", 27, 9, resFail);
			return false;
		}
	     }
	 catch (Exception e) 
		{
	 		 String exception =e.getMessage().substring(0, 50);
 	         excelReader.setExceptionInExcel(xlfile, "PvVatView", 27, 10, exception);
 	         System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
 	         return false;
		}
		
	}
	
	

	     public boolean checkSignOutFromFromSu() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
				
				
				Thread.sleep(3000);
				
			    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			    userNameDisplay.click();
			
			    
			    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			    logoutOption.click();
			 
			    
                getWaitForAlert();
			    
			    getAlert().accept();
			    
				boolean verifyFiledsStatus=true;
				
				getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(username));
				
				
				boolean actusername              = username.isDisplayed();
				boolean actpassword              = password.isDisplayed();
				boolean actcompanyDropDownList   = companyDropDownList.isDisplayed();
				boolean actsignIn                = signIn.isDisplayed();
				
				// Expected
				boolean expusername              = true;
				boolean exppassword              = true;
				boolean expcompanyDropDownList   = true;
				boolean expsignIn                = true;
				
				System.out.println("************************************* checkSignOut  *********************************");
				System.out.println("username             : "+actusername             +" Value Expected : "+expusername);
				System.out.println("password             : "+actpassword             +" Value Expected : "+exppassword);
				System.out.println("companyDropDownList  : "+actcompanyDropDownList  +" Value Expected : "+expcompanyDropDownList);
				System.out.println("signIn               : "+actsignIn               +" Value Expected : "+expsignIn);
				
				boolean actMethod=actusername==expusername && actpassword==exppassword && actcompanyDropDownList==expcompanyDropDownList
						&& actsignIn==expsignIn;
				
				
				String actResult=Boolean.toString(actMethod);
				String expResult=excelReader.getCellData("PvVatView", 32, 7);
		
				excelReader.setCellData(xlfile, "PvVatView", 32, 8, actResult.toUpperCase());
				
				
				if(actMethod==true)
				{
			
					excelReader.setCellData(xlfile, "PvVatView", 31, 9, resPass);
					return true;
				}
				else
				{
					excelReader.setCellData(xlfile, "PvVatView", 31, 9, resFail);
					return false;
			    }
			      }
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PvVatView", 31, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				return false;
			}
    }


       public boolean checkLoginIntoAuthorizeUser() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		try
		{
				
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(username));
			username.click();
			 
			 username.sendKeys(excelReader.getCellData("PvVatView", 34, 6));
			 getAction().moveToElement(username).sendKeys(Keys.TAB).perform();
			 
			 getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(password));
			 password.sendKeys(excelReader.getCellData("PvVatView", 35, 6));
			 
			 getAction().moveToElement(password).sendKeys(Keys.TAB).perform();
			  
			 getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(signIn));
			 signIn.click();
			 
			 //checkRefreshPopOnlogin();
			 
			//checkPopUpWindow();
			
			Thread.sleep(5000);
			 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			String actUserInfo=userNameDisplay.getText();
			
			System.out.println("User Info : "+actUserInfo);
			
			System.out.println("User Info Capture Text :"+userNameDisplay.getText());
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
			
			companyLogo.click();
			
			String actCompanyTxt=companyName.getText();
			String actLoginCompanyName=actCompanyTxt.substring(0, 19);
			System.out.println("company name :"+ actLoginCompanyName);
			companyLogo.click();
						    	
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
			String getDashboard=labelDashboard.getText();
				
			boolean getnoOfAlertsDisplay=noOfAlertsDisplay.isDisplayed();
					
			// Expected
			String expuserInfo="UserAllOptionsST";
			String expLoginCompanyName="Automation Company ";
			String expDashboard="Dashboard";
			boolean expnoOfAlertsDisplay=true;
			
			System.out.println("************************************* checkAlertsToSignIAsAuthorizeUser  *********************************");
			System.out.println("userNameDisplay    : "+actUserInfo              +" Value Expected : "+expuserInfo);
			System.out.println("LoginCompanyName   : "+actLoginCompanyName      +" Value Expected : "+expLoginCompanyName);
			System.out.println("labelDashboard     : "+getDashboard             +" Value Expected : "+expDashboard);
			System.out.println("noOfAlertsDisplay  : "+getnoOfAlertsDisplay     +" Value Expected : "+expnoOfAlertsDisplay);
			
			
			boolean actMethod=actUserInfo.equalsIgnoreCase(expuserInfo) && actLoginCompanyName.equalsIgnoreCase(expLoginCompanyName)
					&& getDashboard.equalsIgnoreCase(expDashboard) ;
			
			String actResult=Boolean.toString(actMethod);
			String expResult=excelReader.getCellData("PvVatView", 36, 7);
			
			excelReader.setCellData(xlfile, "PvVatView", 36, 8, actResult);
			
			
			if(actMethod==true)
			{
				System.out.println("Test Pass : Transaction Authorization is Displayed");
				excelReader.setCellData(xlfile, "PvVatView", 33, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Transaction Authorization is Displayed");
				excelReader.setCellData(xlfile, "PvVatView", 33, 9, resFail);
				return false;
			}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PvVatView", 33, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				return false;
			}
     }


	



       public boolean checkNavigateToPvVATViewinAuthorisedUser() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		try
		{
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvvatViewMenu));
			pvvatViewMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			
			boolean HomePageNewBtn                  =newBtn.isDisplayed();
			
			String actHomePageNewBtn=Boolean.toString(HomePageNewBtn);
			String expHomePageNewBtn=excelReader.getCellData("PvVatView", 38, 7);
			excelReader.setCellData(xlfile, "PvVatView", 38, 8, actHomePageNewBtn);
	
		
			if(actHomePageNewBtn.equalsIgnoreCase(expHomePageNewBtn))
			{
				excelReader.setCellData(xlfile, "PvVatView", 37, 9, resPass);
				System.out.println(" Test Pass :  PVvat View is Displayed ");
				return true;
			}
			else
			{
				System.out.println(" Test fail :  PVvat View is Displayed ");
				excelReader.setCellData(xlfile, "PvVatView", 37, 9, resFail);
				return false;
			}
		     }
		 catch (Exception e) 
			{
		 		 String exception =e.getMessage().substring(0, 50);
	 	         excelReader.setExceptionInExcel(xlfile, "PvVatView", 37, 10, exception);
	 	         System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
	 	         return false;
			}
			
		}
	
	
	
	public boolean checkEntryPagePVVATViewINAuthoriseUser() throws EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	try
	{
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
				
		checkUserFriendlyMessage();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(freeFlowBtn));
		
		boolean actEntryPageJumpToHeaderSectionBtn= jumpToHeaderSectionBtn.isDisplayed();
		boolean actEntryPageJumpToBodySectionBtn  = jumpToBodySectionBtn.isDisplayed();
		boolean actEntryPageJumpToFooterBtn       = jumpToFooterBtn.isDisplayed();
		boolean actEntryPageNewBtn                = new_newBtn.isDisplayed();
		boolean actEntryPageSaveBtn               = saveBtn.isDisplayed();
		boolean actEntryPagePreviousBtn           = previousBtn.isDisplayed();
		boolean actEntryPageNextBtn               = nextBtn.isDisplayed();
		boolean actEntryPagePrintBtn              = new_PrintBtn.isDisplayed();
		boolean actEntryPageSuspendBtn            = new_SuspendBtn.isDisplayed();
		boolean actEntryPageCloseBtn              = new_CloseBtn.isDisplayed();
		boolean actEntryPageToggleBtn             = toggleBtn.isDisplayed();

		
		boolean expEntryPageJumpToHeaderSectionBtn= true;
		boolean expEntryPageJumpToBodySectionBtn  = true;
		boolean expEntryPageJumpToFooterBtn       = true;
		boolean expEntryPageNewBtn	              = true;
		boolean expEntryPageSaveBtn               = true;
		boolean expEntryPagePreviousBtn           = true;
		boolean expEntryPageNextBtn               = true;
		boolean expEntryPagePrintBtn              = true;
		boolean expEntryPageSuspendBtn            = true;
		boolean expEntryPageCloseBtn              = true;
		boolean expEntryPageToggleBtn             = true;

		
		
		System.out.println("************************************* checkPvVatViewEntryPage  ********************************************");
		
		System.out.println("Entry Page RC Jump to Header Value Actual:"+actEntryPageJumpToHeaderSectionBtn +"    Value Expected : "+expEntryPageJumpToHeaderSectionBtn);
		System.out.println("Entry Page RC Jump To Body Value Actual  :"+actEntryPageJumpToBodySectionBtn   +"    Value Expected : "+expEntryPageJumpToBodySectionBtn);
		System.out.println("Entry Page RC Jump To Footer Value Actual:"+actEntryPageJumpToFooterBtn        +"    Value Expected : "+expEntryPageJumpToFooterBtn);
		System.out.println("Entry Page RC New Btn Value Actual       :"+actEntryPageNewBtn                 +"    Value Expected : "+expEntryPageNewBtn);
		System.out.println("Entry Page RC Save Btn Value Actual      :"+actEntryPageSaveBtn                +"    Value Expected : "+expEntryPageSaveBtn);
		System.out.println("Entry Page RC Previous Btn Value Actual  :"+actEntryPagePreviousBtn            +"    Value Expected : "+expEntryPagePreviousBtn);
		System.out.println("Entry Page RC Next Btn Value Actual      :"+actEntryPageNextBtn                +"    Value Expected : "+expEntryPageNextBtn);
		System.out.println("Entry Page RC Print Btn Value Actual     :"+actEntryPagePrintBtn               +"    Value Expected : "+expEntryPagePrintBtn);
		System.out.println("Entry Page RC Suspend Btn Value Actual   :"+actEntryPageSuspendBtn             +"    Value Expected : "+expEntryPageSuspendBtn);
		System.out.println("Entry Page RC Close Btn Value Actual     :"+actEntryPageCloseBtn               +"    Value Expected : "+expEntryPageCloseBtn);
		System.out.println("Entry Page RC Toggle Btn Value Actual    :"+actEntryPageToggleBtn              +"    Value Expected : "+expEntryPageToggleBtn);
		
		
		boolean actMethod=actEntryPageJumpToHeaderSectionBtn==expEntryPageJumpToHeaderSectionBtn && actEntryPageJumpToBodySectionBtn==expEntryPageJumpToBodySectionBtn 
				&& actEntryPageJumpToFooterBtn==expEntryPageJumpToFooterBtn && actEntryPageJumpToFooterBtn==expEntryPageJumpToFooterBtn
				&& actEntryPageNewBtn==expEntryPageNewBtn && actEntryPageSaveBtn==expEntryPageSaveBtn && actEntryPagePreviousBtn==expEntryPagePreviousBtn
				&& actEntryPageNextBtn==expEntryPageNextBtn && actEntryPagePrintBtn==expEntryPagePrintBtn &&actEntryPageSuspendBtn==expEntryPageSuspendBtn 
				&& actEntryPageCloseBtn==expEntryPageCloseBtn && actEntryPageToggleBtn==expEntryPageToggleBtn;
		
		
		String actResult=Boolean.toString(actMethod);
		String expResult=excelReader.getCellData("PvVatView", 40, 7);
		
		excelReader.setCellData(xlfile, "PvVatView", 40, 8, actResult.toUpperCase());
		
		if(actResult.equalsIgnoreCase(expResult))
	
		{
			System.out.println("Test Pass : Entry Page Header Toggle  Options Are Displayed");
			excelReader.setCellData(xlfile, "PvVatView", 39, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, "PvVatView", 39, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
	{
		String exception =e.getMessage();
		excelReader.setExceptionInExcel(xlfile, "PvVatView", 39, 10, exception);
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
   	 	return false;
	}
		
	}
	
	
	public boolean checkPvVATViewEntryPageHeaderFieldsInAuthoriseUser() throws EncryptedDocumentException, InvalidFormatException, IOException
	{

		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		try
		{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	
		boolean actEntryPageHeaderFieldsDocNumber     =documentNumberTxt.isDisplayed();
		boolean actEntryPageHeaderFieldsDate          =dateTxt.isDisplayed();
		boolean actEntryPageHeaderFieldsPurchaseAc    =purchaseAccountTxt.isDisplayed();
		boolean actEntryPageHeaderupdateStockChkbox   =updateStockChkbox.isDisplayed();
		boolean actEntryPageHeaderFieldsVendorAc      =vendorAccountTxt.isDisplayed();
		boolean actEntryPageHeaderFieldRaiseReceipt   =voucherRaiseReceiptCheckBox.isDisplayed();
		boolean actEntryPageHeaderFieldsDepartment    =departmentTxt.isDisplayed();
		boolean actEntryPageHeaderFieldsDueDate       =voucherHeaderDueDate.isDisplayed();                                         
		boolean actEntryPageHeaderFieldsLocalExchRate =voucherHeaderLocalExchangeRate.isDisplayed();
		boolean actEntryPageHeaderFieldsCurrency      =voucherHeaderCurrency.isDisplayed();
		boolean actEntryPageHeaderFieldsExchRate      =voucherHeaderExchangeRate.isDisplayed();
		boolean actEntryPageHeaderFieldsWarehouse     =voucherHeaderCurrency.isDisplayed();
		boolean actEntryPageHeaderpvvatviewNarrationTxt=pvvatviewNarrationTxt.isDisplayed();
		
		boolean expEntryPageHeaderFieldsDocNumber     =true;
		boolean expEntryPageHeaderFieldsDate          =true;
		boolean expEntryPageHeaderFieldsPurchaseAc    =true;
		boolean expEntryPageHeaderUpdateStcokChkbox   =true;
		boolean expEntryPageHeaderFieldsVendorAc      =true;
		boolean expEntryPageHeaderFieldRaiseReceipt   =true;
		boolean expEntryPageHeaderFieldsDepartment    =true;
		boolean expEntryPageHeaderFieldsDueDate       =true;                                         
		boolean expEntryPageHeaderFieldsLocalExchRate =true;
		boolean expEntryPageHeaderFieldsCurrency      =true;
		boolean expEntryPageHeaderFieldsExchRate      =true;
		boolean expEntryPageHeaderFieldsWarehouse     =true;
        boolean expEntryPageHeaderFieldpvvatviewNarrationTxt  =true;
       
		System.out.println("************************************* checkPvVATViewEntryPageHeaderFields  *******************************************************");
		System.out.println("Entry Page Header Doc No Value Actual         :"+actEntryPageHeaderFieldsDocNumber    +"  Value Expected : "+expEntryPageHeaderFieldsDocNumber);
		System.out.println("Entry Page Header Date  Value Actual          :"+actEntryPageHeaderFieldsDate         +"  Value Expected : "+expEntryPageHeaderFieldsDate);
		System.out.println("Entry Page Header UpdateChkbox Value Actual   :"+actEntryPageHeaderupdateStockChkbox   +"  Value Expected : "+expEntryPageHeaderUpdateStcokChkbox);
		System.out.println("Entry Page Header Purchase Value Actual       :"+actEntryPageHeaderFieldsPurchaseAc   +"  Value Expected : "+expEntryPageHeaderFieldsPurchaseAc);	
		System.out.println("Entry Page Header Vendor Value Actual         :"+actEntryPageHeaderFieldsVendorAc     +"  Value Expected : "+expEntryPageHeaderFieldsVendorAc);
		System.out.println("Entry Page Header Raise Receipt Value Actual  :"+actEntryPageHeaderFieldRaiseReceipt  +"  Value Expected : "+expEntryPageHeaderFieldRaiseReceipt);
		System.out.println("Entry Page Header Department Value Actual     :"+actEntryPageHeaderFieldsDepartment   +"  Value Expected : "+expEntryPageHeaderFieldsDepartment);
		System.out.println("Entry Page Header Due Date Value Actual       :"+actEntryPageHeaderFieldsDueDate      +"  Value Expected : "+expEntryPageHeaderFieldsDueDate);	
		System.out.println("Entry Page Header Local Exch Rate Value Actual:"+actEntryPageHeaderFieldsLocalExchRate+"  Value Expected : "+expEntryPageHeaderFieldsLocalExchRate);
		System.out.println("Entry Page Header Currency Value Actual       :"+actEntryPageHeaderFieldsCurrency     +"  Value Expected : "+expEntryPageHeaderFieldsCurrency);
		System.out.println("Entry Page Header Exch Rate Value Actual      :"+actEntryPageHeaderFieldsExchRate     +"  Value Expected : "+expEntryPageHeaderFieldsExchRate);
		System.out.println("Entry Page Header Warehouse Value Actual      :"+actEntryPageHeaderFieldsWarehouse    +"  Value Expected : "+expEntryPageHeaderFieldsWarehouse);	
		System.out.println("Entry Page Header SNarrtion Value Actual:     "+actEntryPageHeaderpvvatviewNarrationTxt  +"  Value Expected : "+expEntryPageHeaderFieldpvvatviewNarrationTxt);
		
		boolean actMethod=actEntryPageHeaderFieldsDocNumber==expEntryPageHeaderFieldsDocNumber && actEntryPageHeaderFieldsDate==expEntryPageHeaderFieldsDate 
				&& actEntryPageHeaderFieldsPurchaseAc==expEntryPageHeaderFieldsPurchaseAc && actEntryPageHeaderupdateStockChkbox==expEntryPageHeaderUpdateStcokChkbox
				&& actEntryPageHeaderFieldsVendorAc==expEntryPageHeaderFieldsVendorAc && actEntryPageHeaderFieldRaiseReceipt==expEntryPageHeaderFieldRaiseReceipt
				&& actEntryPageHeaderFieldsDepartment==expEntryPageHeaderFieldsDepartment && actEntryPageHeaderFieldsDueDate==expEntryPageHeaderFieldsDueDate
				&& actEntryPageHeaderFieldsLocalExchRate==expEntryPageHeaderFieldsLocalExchRate && actEntryPageHeaderFieldsCurrency==expEntryPageHeaderFieldsCurrency
				&& actEntryPageHeaderFieldsWarehouse==expEntryPageHeaderFieldsWarehouse && actEntryPageHeaderpvvatviewNarrationTxt==expEntryPageHeaderFieldpvvatviewNarrationTxt
				&& actEntryPageHeaderFieldsExchRate==expEntryPageHeaderFieldsExchRate 
				;
	
		String actResult= Boolean.toString(actMethod);
		String expResult=excelReader.getCellData("PvVatView", 42, 7);
		
		excelReader.setCellData(xlfile, "PvVatView", 42, 8, actResult);
		
		if(actMethod==true)
		{
			System.out.println("Test Pass : entry Page Header Options Are Displayed");
			excelReader.setCellData(xlfile, "PvVatView", 41, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, "PvVatView", 41, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
	{
		String exception =e.getMessage();
		excelReader.setExceptionInExcel(xlfile, "PvVatView", 41, 10, exception);
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
   	 	return false;
	}
	
	}

	
	
	
	
	public boolean checkPVVATViewEntryPageBodyFieldsInAuthoriseUser() throws EncryptedDocumentException, InvalidFormatException, IOException
	
	{
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));		
		
		
		int pvVatBodygridHeaderListCount = pvVatBodygridHeaderList.size();
		  
		ArrayList<String> voucherBodyGridHeaderListArray = new ArrayList<String>();
		  
		for(int i=0;i<pvVatBodygridHeaderListCount;i++)
		{
			String data = pvVatBodygridHeaderList.get(i).getText();
			
			if(data.equalsIgnoreCase("Gross"))
			{
				JavascriptExecutor js = (JavascriptExecutor) getDriver();
				js.executeScript("arguments[0].scrollIntoView();", voucherBodyRMAName);
			}
			
			voucherBodyGridHeaderListArray.add(data);
		}	
	
		JavascriptExecutor jss = (JavascriptExecutor) getDriver();
		jss.executeScript("arguments[0].scrollIntoView();", voucherBodyHeaderIndex);
		
		String actvoucherBodyGridHeaderList=voucherBodyGridHeaderListArray.toString();
		
		String expvoucherBodyGridHeaderList=excelReader.getCellData("PvVatView", 44, 7);
		
		excelReader.setCellData(xlfile, "PvVatView", 44, 8, actvoucherBodyGridHeaderList);
		
		boolean actEntryPageBodyFieldsItem           = select1stRow_1stColumn.isDisplayed();
		boolean actEntryPageBodyFieldsUnits          = select1stRow_2ndColumn.isDisplayed();
		boolean actEntryPageBodyFieldsAvgRate        = select1stRow_3rdColumn.isDisplayed();
		boolean actEntryPageBodyFieldsAvgRate0       = select1stRow_4thColumn.isDisplayed();
		boolean actEntryPageBodyFieldsGross          = select1stRow_5thColumn.isDisplayed();
		
		boolean expEntryPageBodyFieldsItem           = true;
		boolean expEntryPageBodyFieldsUnits          = true;
		boolean expEntryPageBodyFieldsAvgRate        = true;
		boolean expEntryPageBodyFieldsAvgRate0       = true;
		boolean expEntryPageBodyFieldsGross          = true;
		
		
		boolean actMethod = actEntryPageBodyFieldsItem==expEntryPageBodyFieldsItem && actEntryPageBodyFieldsUnits==expEntryPageBodyFieldsUnits 
							&& actEntryPageBodyFieldsAvgRate==expEntryPageBodyFieldsAvgRate && actEntryPageBodyFieldsAvgRate0==expEntryPageBodyFieldsAvgRate0 
							&& actEntryPageBodyFieldsGross==expEntryPageBodyFieldsGross;

		String actResult = Boolean.toString(actMethod);

		excelReader.setCellData(xlfile, xlSheetName, 45, 8, actResult.toUpperCase());
		
		String expResult=excelReader.getCellData("PvVatView", 45, 7);
		
		
		System.out.println("Item Value Actual            : " + actEntryPageBodyFieldsItem+ "    Value Expected : " + expEntryPageBodyFieldsItem);
		System.out.println("Units Value Actual           : " + actEntryPageBodyFieldsUnits+ "   Value Expected : " + expEntryPageBodyFieldsUnits);
		System.out.println("Qty Value Actual             : " + actEntryPageBodyFieldsAvgRate+ "     Value Expected : " + expEntryPageBodyFieldsAvgRate);
		System.out.println("Rate Value Actual            : " + actEntryPageBodyFieldsAvgRate0+ "    Value Expected : " + expEntryPageBodyFieldsAvgRate0);	
		System.out.println("Gross Value Actual           : " + actEntryPageBodyFieldsGross+ "   Value Expected : " + expEntryPageBodyFieldsGross);	
		System.out.println("actvoucherBodyGridHeaderList : " + actvoucherBodyGridHeaderList);
		System.out.println("expvoucherBodyGridHeaderList : " + expvoucherBodyGridHeaderList);
		
		if(actMethod==true && actvoucherBodyGridHeaderList.equalsIgnoreCase(expvoucherBodyGridHeaderList))
		{
			System.out.println("Test Pass : entry Page Body Options Are Displayed");
			excelReader.setCellData(xlfile, "PvVatView", 43, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, "PvVatView", 43, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
	{
		String exception =e.getMessage().substring(0, 50);
		excelReader.setExceptionInExcel(xlfile, "PvVatView", 43, 10, e.getMessage());
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		return false;
	}
	}
  
	
	
		
		
		
	public boolean checkPVVATViewEntryPageFooterFieldsInAuthoriseUser() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		try
		{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jumpToFooterBtn));
		jumpToFooterBtn.click();
		
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(netLabel));
		
		boolean actEntryPageFooterFieldsNetLabel  =pvvatFooterLabel.isDisplayed();
		boolean actEntryPageFooterFieldsNetAmount =pvvatFooterTXt.isDisplayed();

		boolean expEntryPageFooterFieldsNetLabel  =true;
		boolean expEntryPageFooterFieldsNetAmount =true;

		System.out.println("****************************&************* checkPVVATViewEntryPageFooterFields  ***************************************************");
		System.out.println("Entry Page Footer Fields Net Label Value Actual  : "+actEntryPageFooterFieldsNetLabel+   " Value Expected : "+expEntryPageFooterFieldsNetLabel);
		System.out.println("Entry Page Footer Fields Net Amount Value Actual : "+actEntryPageFooterFieldsNetAmount+  " Value Expected : "+expEntryPageFooterFieldsNetAmount);

				
		boolean actMethod=actEntryPageFooterFieldsNetLabel==expEntryPageFooterFieldsNetLabel && actEntryPageFooterFieldsNetAmount==expEntryPageFooterFieldsNetAmount;
		
		String actResult=Boolean.toString(actMethod);
		String expresult=excelReader.getCellData("PvVatView", 46, 7);
		
		excelReader.setCellData(xlfile, "PvVatView", 46, 8, actResult.toUpperCase());
		
		
		if(actMethod==true)
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, "PvVatView", 46, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, "PvVatView", 46, 9, resFail);
			return false;
		}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PvVatView", 46, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
	   	 	return false;
		}
	}
	

	
	
	
	public boolean checkDocumentNumberAndSNarrationAndDateFieldinEntryPageOfAuthoriseUser() throws EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		try
		{
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jumpToHeaderSectionBtn));
			jumpToHeaderSectionBtn.click();
			
			
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

			String actdocumentNumberTxt=documentNumberTxt.getAttribute("value");
			
			String expdocumentNumberTxt=excelReader.getCellData("PvVatView", 48, 7); 
			excelReader.setCellData(xlfile, xlSheetName, 48, 8, actdocumentNumberTxt);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvvatviewNarrationTxt));
			String actNarrationTxt=pvvatviewNarrationTxt.getAttribute("value");
			String expNarrationTxt=excelReader.getCellData("PvVatView", 49, 7);
			excelReader.setCellData(xlfile, "PvVatView", 49, 8, actNarrationTxt);
			
			
			String actDateTxt=dateTxt.getAttribute("disabled");
			
			String expDateTxt=excelReader.getCellData("PvVatView", 50 ,7);
			
			excelReader.setCellData(xlfile, "PvVatView", 50, 8, actDateTxt);
			
			System.out.println("Header Field DAte TXt   :  "+actDateTxt +" Value Expected : "+expDateTxt);
			System.out.println("documentNumberTxt  :  "+actdocumentNumberTxt +" Value Expected : "+expdocumentNumberTxt);
			System.out.println("NarrationTxt       :  "+actNarrationTxt +" Value Expected : "+expNarrationTxt);
			
			if(actdocumentNumberTxt.equalsIgnoreCase(expdocumentNumberTxt) && 
					actNarrationTxt.equalsIgnoreCase(expNarrationTxt) && actDateTxt.equalsIgnoreCase(expDateTxt))

			{
				excelReader.setCellData(xlfile, "PvVatView", 47, 9, resPass);
				System.out.println(" Test Pass :  PVvat View is Displayed ");
				return true;
			}
			else
			{
				System.out.println(" Test fail :  PVvat View is Displayed ");
				excelReader.setCellData(xlfile, "PvVatView", 47, 9, resFail);
				return false;
			}
		     }
		 catch (Exception e) 
			{
		 		 String exception =e.getMessage().substring(0, 50);
	 	         excelReader.setExceptionInExcel(xlfile, "PvVatView", 47, 10, exception);
	 	         System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
	 	         return false;
			}
			
		}

		
	
	public boolean checkFooterDefaultValueInEntryPageOfPVVATView() throws EncryptedDocumentException, InvalidFormatException, IOException
	{

		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		try
		{
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jumpToFooterBtn));
			jumpToFooterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

			String actEntryPageFooterFieldsNetAmount =pvvatFooterTXt.getAttribute("value");
			
			String expEntryPageFooterFieldsNetAmount=excelReader.getCellData("PvVatView", 51, 7); 
			excelReader.setCellData(xlfile, xlSheetName, 51, 8, actEntryPageFooterFieldsNetAmount);
			

             System.out.println("NarrationTxt       :  "+actEntryPageFooterFieldsNetAmount +" Value Expected : "+expEntryPageFooterFieldsNetAmount);
			
			if(actEntryPageFooterFieldsNetAmount.equalsIgnoreCase(expEntryPageFooterFieldsNetAmount))

			{
				excelReader.setCellData(xlfile, "PvVatView", 51, 9, resPass);
				System.out.println(" Test Pass : Footer Value As Expected  ");
				return true;
			}
			else
			{
				System.out.println(" Test fail :  Footer Value As Expected  ");
				excelReader.setCellData(xlfile, "PvVatView", 51, 9, resFail);
				return false;
			}
		     }
		 catch (Exception e) 
			{
		 		 String exception =e.getMessage().substring(0, 50);
	 	         excelReader.setExceptionInExcel(xlfile, "PvVatView", 51, 10, exception);
	 	         System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
	 	         return false;
			}
			
	}
	
	
	
	
	
	
     public boolean checkSNarrationWithVendorAAccountinPVVATViewEntryPageInAuthoriseUser() throws EncryptedDocumentException, InvalidFormatException, IOException
	 {
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	try
	{
		Thread.sleep(1000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jumpToHeaderSectionBtn));
		jumpToHeaderSectionBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
		purchaseAccountTxt.click();
		purchaseAccountTxt.sendKeys(Keys.SPACE);
		
		int count=purchaseAccountListCount.size();
		
		System.err.println(count);
		
		for(int i=0 ; i < count ;i++)
		{
		String data=purchaseAccountListCount.get(i).getText();
		
		if(data.equalsIgnoreCase(excelReader.getCellData("PvVatView", 52, 6)))
		{
			purchaseAccountListCount.get(i).click();
			
			break;
		}
		}
		
		purchaseAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.SPACE);
		
		int vendorcount=vendorAccountListCount.size();
		
		System.err.println(vendorcount);
		
		for(int i=0 ; i < vendorcount ;i++)
		{
		String data=vendorAccountListCount.get(i).getText();
		
		if(data.equalsIgnoreCase(excelReader.getCellData("PvVatView", 53, 6)))
		{
			vendorAccountListCount.get(i).click();
			
			break;
		}
		}
		
		vendorAccountTxt.sendKeys(Keys.TAB);
		
		String expMessage	= excelReader.getCellData("PvVatView", 54, 7);
		String actMessage	=checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, "PvVatView", 54, 8, actMessage);
		
		
		
		String actNarrationTxt=pvvatviewNarrationTxt.getAttribute("value");
		String expNarrationTxt=excelReader.getCellData("PvVatView", 55, 7);
		excelReader.setCellData(xlfile, "PvVatView", 55, 8, actNarrationTxt);
		
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bodyGridFirstColTxt));
		String actBodyGridFirstCol=bodyGridFirstColTxt.getText();
		String expBodyGridFirstCol=excelReader.getCellData("PvVatView", 56 ,7);
		excelReader.setCellData(xlfile, "PvVatView", 56, 8, actBodyGridFirstCol);
		
		
		System.out.println("BodyGridFirstCol   :  "+actBodyGridFirstCol +" Value Expected : "+expBodyGridFirstCol);
		System.out.println("NarrationTxt       :  "+actNarrationTxt +" Value Expected : "+expNarrationTxt);
		
		if(actMessage.equalsIgnoreCase(expMessage) && 
			actNarrationTxt.equalsIgnoreCase(expNarrationTxt) &&
			actBodyGridFirstCol.equalsIgnoreCase(expBodyGridFirstCol))
		
		{
		excelReader.setCellData(xlfile, "PvVatView", 52, 9, resPass);
		System.out.println(" Test Pass :  PVvat View is Displayed ");
		return true;
		}
		else
		{
		System.out.println(" Test fail :  PVvat View is Displayed ");
		excelReader.setCellData(xlfile, "PvVatView", 52, 9, resFail);
		return false;
		}
		}
		catch (Exception e) 
		{
			 String exception =e.getMessage().substring(0, 50);
		  excelReader.setExceptionInExcel(xlfile, "PvVatView", 52, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		  return false;
		}
		
  }

     public boolean checkSNarrationWithVendorBAccountinPVVATViewEntryPageOfAuthoriseUser() throws EncryptedDocumentException, InvalidFormatException, IOException
		{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		try
		{
		Thread.sleep(1000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		vendorAccountTxt.sendKeys(Keys.BACK_SPACE);
		vendorAccountTxt.sendKeys(Keys.SPACE);
		
		int vendorcount=vendorAccountListCount.size();
		
		System.err.println(vendorcount);
		
		for(int i=0 ; i < vendorcount ;i++)
		{
		String data=vendorAccountListCount.get(i).getText();
		
		if(data.equalsIgnoreCase(excelReader.getCellData("PvVatView", 58, 6)))
		{
			vendorAccountListCount.get(i).click();
			
			break;
		}
		}
		
		vendorAccountTxt.sendKeys(Keys.TAB);
		
		
		
		String actNarrationTxt=pvvatviewNarrationTxt.getAttribute("value");
		String expNarrationTxt=excelReader.getCellData("PvVatView", 59, 7);
		excelReader.setCellData(xlfile, "PvVatView", 59, 8, actNarrationTxt);
		
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bodyGridFirstColTxt));
		String actBodyGridFirstCol=bodyGridFirstColTxt.getText();
		String expBodyGridFirstCol=excelReader.getCellData("PvVatView", 60 ,7);
		excelReader.setCellData(xlfile, "PvVatView", 60, 8, actBodyGridFirstCol);
		
		
		System.out.println("BodyGridFirstCol   :  "+actBodyGridFirstCol +" Value Expected : "+expBodyGridFirstCol);
		
		System.out.println("NarrationTxt       :  "+actNarrationTxt +" Value Expected : "+expNarrationTxt);
		
		if(actNarrationTxt.equalsIgnoreCase(expNarrationTxt))
		
		{
		excelReader.setCellData(xlfile, "PvVatView", 57, 9, resPass);
		System.out.println(" Test Pass :  PVvat View is Displayed ");
		return true;
		}
		else
		{
		System.out.println(" Test fail :  PVvat View is Displayed ");
		excelReader.setCellData(xlfile, "PvVatView", 57, 9, resFail);
		return false;
		}
		}
		catch (Exception e) 
		{
			 String exception =e.getMessage().substring(0, 50);
		  excelReader.setExceptionInExcel(xlfile, "PvVatView", 57, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		  return false;
		}
		
    }



    public boolean checkSignOutFromFromAuthoriseUSer() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		try
		{
			
			
			Thread.sleep(3000);
			
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
		    userNameDisplay.click();
		
		    
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		    logoutOption.click();
		 
		    
		     getWaitForAlert();
		    
		    getAlert().accept();
		    
			boolean verifyFiledsStatus=true;
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(username));
			
			
			boolean actusername              = username.isDisplayed();
			boolean actpassword              = password.isDisplayed();
			boolean actcompanyDropDownList   = companyDropDownList.isDisplayed();
			boolean actsignIn                = signIn.isDisplayed();
			
			// Expected
			boolean expusername              = true;
			boolean exppassword              = true;
			boolean expcompanyDropDownList   = true;
			boolean expsignIn                = true;
			
			System.out.println("************************************* checkSignOut  *********************************");
			System.out.println("username             : "+actusername             +" Value Expected : "+expusername);
			System.out.println("password             : "+actpassword             +" Value Expected : "+exppassword);
			System.out.println("companyDropDownList  : "+actcompanyDropDownList  +" Value Expected : "+expcompanyDropDownList);
			System.out.println("signIn               : "+actsignIn               +" Value Expected : "+expsignIn);
			
			boolean actMethod=actusername==expusername && actpassword==exppassword && actcompanyDropDownList==expcompanyDropDownList
					&& actsignIn==expsignIn;
			
			
			String actResult=Boolean.toString(actMethod);
			String expResult=excelReader.getCellData("PvVatView", 62, 7);
		
			excelReader.setCellData(xlfile, "PvVatView", 62, 8, actResult.toUpperCase());
			
			
			if(actMethod==true)
			{
		
				excelReader.setCellData(xlfile, "PvVatView", 61, 9, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, "PvVatView", 61, 9, resFail);
				return false;
		    }
		      }
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PvVatView", 61, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		}
}

	
	
    public boolean checkLoginIntoSu() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	try
	{
			
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(username));
		username.click();
		 
		 username.sendKeys(excelReader.getCellData("PvVatView", 64, 6));
		 getAction().moveToElement(username).sendKeys(Keys.TAB).perform();
		 
		 getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(password));
		 password.sendKeys(excelReader.getCellData("PvVatView", 65, 6));
		 
		 getAction().moveToElement(password).sendKeys(Keys.TAB).perform();
		  
		 getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(signIn));
		 signIn.click();
		 
		 //checkRefreshPopOnlogin();
		 
		//checkPopUpWindow();
		
		Thread.sleep(5000);
		 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
		String actUserInfo=userNameDisplay.getText();
		
		System.out.println("User Info : "+actUserInfo);
		
		System.out.println("User Info Capture Text :"+userNameDisplay.getText());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
		
		companyLogo.click();
		
		String actCompanyTxt=companyName.getText();
		String actLoginCompanyName=actCompanyTxt.substring(0, 19);
		System.out.println("company name :"+ actLoginCompanyName);
		companyLogo.click();
					    	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
		String getDashboard=labelDashboard.getText();
			
		boolean getnoOfAlertsDisplay=noOfAlertsDisplay.isDisplayed();
				
		// Expected
		String expuserInfo="su";
		String expLoginCompanyName="Automation Company ";
		String expDashboard="Dashboard";
		boolean expnoOfAlertsDisplay=true;
		
		System.out.println("************************************* checkAlertsToSignIAsAuthorizeUser  *********************************");
		System.out.println("userNameDisplay    : "+actUserInfo              +" Value Expected : "+expuserInfo);
		System.out.println("LoginCompanyName   : "+actLoginCompanyName      +" Value Expected : "+expLoginCompanyName);
		System.out.println("labelDashboard     : "+getDashboard             +" Value Expected : "+expDashboard);
		System.out.println("noOfAlertsDisplay  : "+getnoOfAlertsDisplay     +" Value Expected : "+expnoOfAlertsDisplay);
		
		
		boolean actMethod=actUserInfo.equalsIgnoreCase(expuserInfo) && actLoginCompanyName.equalsIgnoreCase(expLoginCompanyName)
				&& getDashboard.equalsIgnoreCase(expDashboard) ;
		
		String actResult=Boolean.toString(actMethod);
		String expResult=excelReader.getCellData("PvVatView", 66, 7);
		
		excelReader.setCellData(xlfile, "PvVatView", 66, 8, actResult);
		
		
		if(actMethod==true)
		{
			System.out.println("Test Pass : Transaction Authorization is Displayed");
			excelReader.setCellData(xlfile, "PvVatView", 63, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Transaction Authorization is Displayed");
			excelReader.setCellData(xlfile, "PvVatView", 63, 9, resFail);
			return false;
		}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PvVatView", 63, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		}
    }

    
    
    
    public boolean checkCreatingVoucherinPvVatView() throws EncryptedDocumentException, InvalidFormatException, IOException
    {
    	
    	excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	try
	{
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();
				
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvvatViewMenu));
		pvvatViewMenu.click();
    	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
    	
		
        checkUserFriendlyMessage();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(freeFlowBtn));
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
		purchaseAccountTxt.click();
		purchaseAccountTxt.sendKeys(Keys.SPACE);
		
		int count=purchaseAccountListCount.size();
		
		System.err.println(count);
		
		for(int i=0 ; i < count ;i++)
		{
		String data=purchaseAccountListCount.get(i).getText();
		
		if(data.equalsIgnoreCase(excelReader.getCellData("PvVatView", 68, 6)))
		{
			purchaseAccountListCount.get(i).click();
			
			break;
		}
		}
		
		purchaseAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.SPACE);
		
		int vendorcount=vendorAccountListCount.size();
		
		System.err.println(vendorcount);
		
		for(int i=0 ; i < vendorcount ;i++)
		{
		String data=vendorAccountListCount.get(i).getText();
		
		if(data.equalsIgnoreCase(excelReader.getCellData("PvVatView", 69, 6)))
		{
			vendorAccountListCount.get(i).click();
			
			break;
		}
		}
		
		vendorAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
		errorMessageCloseBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
		wareHouseTxt.sendKeys(Keys.SPACE);
			
		int warehousecount=wareHouseListCount.size();
		
		System.err.println(warehousecount);
			
		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=wareHouseListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData("PvVatView", 70, 6)))
			{
				wareHouseListCount.get(i).click();
				break;
			}
		}
		
		wareHouseTxt.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		
		departmentTxt.click();
		departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME,Keys.BACK_SPACE);
		departmentTxt.sendKeys(Keys.SPACE);
		Thread.sleep(2000);
		int departmentcount=departmentListCount.size();
		
		System.err.println(departmentcount);
			
		for(int i=0 ; i < departmentcount ;i++)
		{
			String data=departmentListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData("PvVatView", 71, 6)))
			{
				departmentListCount.get(i).click();
				break;
			}
		}
			
		Thread.sleep(1000);
		
		departmentTxt.sendKeys(Keys.TAB);

		String docno=documentNumberTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount = itemListCount.size();
		
		System.err.println(itemcount);
			
		for(int i=0 ; i < itemcount ;i++)
		{
			String data = itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData("PvVatView", 72, 6)))
			{
				itemListCount.get(i).click();
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_4thColumn));
		select1stRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.click();
		enter_Quantity.clear();
		enter_Quantity.sendKeys(excelReader.getCellData("PvVatView", 73, 6));
		enter_Quantity.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys(excelReader.getCellData("PvVatView", 74, 6));
		enter_Rate.sendKeys(Keys.TAB);
		
		enter_Gross.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.click();
		enter_Batch.clear();
		enter_Batch.sendKeys(excelReader.getCellData("PvVatView", 75, 6));
		
		enter_Batch.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.TAB);
		
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Date date=new Date();
		System.out.println(df.format(date));
		
		//Actdata is current date
		
		String actBatchExpiryColumnAfterInput=select1stRow_9thColumn.getText();
		
		String expBatchExpiryColumnAfterInput=df.format(date);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
		errorMessageCloseBtn.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
		billRefNewReferenceTxt.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();
		
        String actbillRefNewReferenceTxt=billRefNewReferenceTxt.getAttribute("value");
		
		String expbillRefNewReferenceTxt=excelReader.getCellData("PvVatView", 76, 7);
		
		excelReader.setCellData(xlfile, "PvVatView", 76, 8, actbillRefNewReferenceTxt);
		

		System.out.println("actbillRefNewReferenceTxt   ; "+actbillRefNewReferenceTxt +" Value Expectd : "+expbillRefNewReferenceTxt);
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();
		
		boolean savingVoucher=checkVoucherSavingMessage(docno);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();
		
		if( savingVoucher==true  && 
				actbillRefNewReferenceTxt.equalsIgnoreCase(expbillRefNewReferenceTxt))
		{
			System.out.println("Test Pass : Voucher Saved Successfully");
			excelReader.setCellData(xlfile, "PvVatView", 67, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Voucher Saved Successfully");
			excelReader.setCellData(xlfile, "PvVatView", 67, 9, resFail);
			return false;
		}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PvVatView", 67, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		}
    }
    
    
	@FindBy (xpath="//input[@id='id_body_33554495']")
	private static WebElement enterAvgRate0;
    
	
	
	
	
	
	public boolean checkSavedVoucherInPurchaseOrderAfterSavingVoucherInPVVATView() throws EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	try
	{
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();
				
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(invTransactionsMenu));
		invTransactionsMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();
		

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
		
		boolean gridChkBox1=grid_ChkBox1.isDisplayed();
		
		String actgridChkBox1=Boolean.toString(gridChkBox1);
		String expgridChkBox1=excelReader.getCellData("PvVatView", 78, 7);
		
		excelReader.setCellData(xlfile, "PvVatView", 78, 8, actgridChkBox1);
		
		
		if(actgridChkBox1.equalsIgnoreCase(expgridChkBox1))
	
		
		{
			System.out.println("Test Pass : Voucher Displayed in Purchase Order ");
			excelReader.setCellData(xlfile, "PvVatView", 77, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Voucher  Displayed in Purchase Order");
			excelReader.setCellData(xlfile, "PvVatView", 77, 9, resFail);
			return false;
		}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PvVatView", 77, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		}
		
	}
		
		
		
	public boolean checkSavedVoucherInPurchaseOrder() throws EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	try
	{
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editBtn));
		editBtn.click();
				
		
		
		checkUserFriendlyMessage();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(documentNumberTxt));
		
		
		String actDocumentNo=documentNumberTxt.getAttribute("value");
		String expDocumentNo=excelReader.getCellData("PvVatView", 80, 7);
		
		excelReader.setCellData(xlfile, "PvVatView", 80, 8, actDocumentNo);
		
		
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Date date=new Date();
		System.out.println(df.format(date));
		
		String actVoucherDate,expVoucherDate;
		
		actVoucherDate=dateTxt.getAttribute("value");
		
		expVoucherDate=df.format(date);
		
		excelReader.setCellData(xlfile, "PvVatView", 81, 8, actVoucherDate);
		
		excelReader.setCellData(xlfile, "PvVatView", 81, 7, expVoucherDate);
		
		
		String actVendorAccount=vendorAccountTxt.getAttribute("value");
		String expVendorAccount=excelReader.getCellData("PvVatView", 82, 7);
		
		excelReader.setCellData(xlfile, "PvVatView", 82, 8, actVendorAccount);
		
		
		
		
		String actWarehouse=select1stRow_1stColumn.getText();
		String expWarehouse=excelReader.getCellData("PvVatView", 83, 7);
		
		excelReader.setCellData(xlfile, "PvVatView", 83, 8, actWarehouse);
		

		String actItem	=select1stRow_2ndColumn.getText();
		String expItem=excelReader.getCellData("PvVatView", 84, 7);
		
		excelReader.setCellData(xlfile, "PvVatView", 84, 8, actItem);
		
		
		String actUnits	=select1stRow_3rdColumn.getText();
		String expUnits=excelReader.getCellData("PvVatView", 85, 7);
		
		excelReader.setCellData(xlfile, "PvVatView", 85, 8, actUnits);
		
		String actQty	=select1stRow_4thColumn.getText();
		String expQty=excelReader.getCellData("PvVatView", 86, 7);
		
		excelReader.setCellData(xlfile, "PvVatView", 86, 8, actQty);
		
		String actRate	=select1stRow_5thColumn.getText();
		String expRate=excelReader.getCellData("PvVatView", 87, 7);
		
		excelReader.setCellData(xlfile, "PvVatView", 87, 8, actRate);
		
		
		String actGross	=select1stRow_6thColumn.getText();
		String expGross=excelReader.getCellData("PvVatView", 88, 7);
		
		excelReader.setCellData(xlfile, "PvVatView", 88, 8, actGross);
		
		System.out.println("**********************************checkSavedVoucherInPurchaseOrder**********************************");
		
		System.out.println("  Document Number  : "+actDocumentNo     +" Value Expected : "+expDocumentNo);
		System.out.println("  Vendor Account   : "+actVendorAccount  +" Value Expected : "+expVendorAccount);
		System.out.println("  Warehouse        : "+actWarehouse      +" Value Expected : "+expWarehouse);
		System.out.println("  Item             : "+actItem           +" Value Expected : "+expItem);
		System.out.println("  Units            : "+actUnits          +" Value Expected : "+expUnits);
		System.out.println("  Qunatity         : "+actQty            +" Value Expected : "+expQty);
		System.out.println("  Rate             : "+actRate           +" Value Expected : "+expRate);
		System.out.println("  Gross            : "+actGross          +" Value Expected : "+expGross);
		
		
		if(actDocumentNo.equalsIgnoreCase(expDocumentNo) &&
				actVendorAccount.equalsIgnoreCase(expVendorAccount) &&
				actWarehouse.equalsIgnoreCase(expWarehouse) &&
				actItem.equalsIgnoreCase(expItem) &&
				actUnits.equalsIgnoreCase(expUnits) &&
				actQty.equalsIgnoreCase(expQty) &&
				actRate.equalsIgnoreCase(expRate) &&
				actGross.equalsIgnoreCase(expGross))
	
		
		{
			System.out.println("Test Pass :Voucher Data As Expected ");
			excelReader.setCellData(xlfile, "PvVatView", 79, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Voucher Data As Expected ");
			excelReader.setCellData(xlfile, "PvVatView", 79, 9, resFail);
			return false;
		}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PvVatView", 79, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		}
		
	}
		
		
		
	public boolean checkCreatingVoucherinPvVatViewWithVendorB() throws EncryptedDocumentException, InvalidFormatException, IOException
    {
    	
    	excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	try
	{
		

		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();
				
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();
		

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvvatViewMenu));
		pvvatViewMenu.click();

    	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
    	
		
        checkUserFriendlyMessage();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(freeFlowBtn));
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
		purchaseAccountTxt.click();
		purchaseAccountTxt.sendKeys(Keys.SPACE);
		
		int count=purchaseAccountListCount.size();
		
		System.err.println(count);
		
		for(int i=0 ; i < count ;i++)
		{
		String data=purchaseAccountListCount.get(i).getText();
		
		if(data.equalsIgnoreCase(excelReader.getCellData("PvVatView", 90, 6)))
		{
			purchaseAccountListCount.get(i).click();
			
			break;
		}
		}
		
		purchaseAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.SPACE);
		
		int vendorcount=vendorAccountListCount.size();
		
		System.err.println(vendorcount);
		
		for(int i=0 ; i < vendorcount ;i++)
		{
		String data=vendorAccountListCount.get(i).getText();
		
		if(data.equalsIgnoreCase(excelReader.getCellData("PvVatView", 91, 6)))
		{
			vendorAccountListCount.get(i).click();
			
			break;
		}
		}
		
		vendorAccountTxt.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
		wareHouseTxt.sendKeys(Keys.SPACE);
			
		int warehousecount=wareHouseListCount.size();
		
		System.err.println(warehousecount);
			
		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=wareHouseListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData("PvVatView", 92, 6)))
			{
				wareHouseListCount.get(i).click();
				break;
			}
		}
		
		wareHouseTxt.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		
		departmentTxt.click();
		departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME,Keys.BACK_SPACE);
		departmentTxt.sendKeys(Keys.SPACE);
		Thread.sleep(2000);
		int departmentcount=departmentListCount.size();
		
		System.err.println(departmentcount);
			
		for(int i=0 ; i < departmentcount ;i++)
		{
			String data=departmentListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData("PvVatView", 93, 6)))
			{
				departmentListCount.get(i).click();
				break;
			}
		}
			
		Thread.sleep(1000);
		
		departmentTxt.sendKeys(Keys.TAB);

		String docno=documentNumberTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount = itemListCount.size();
		
		System.err.println(itemcount);
			
		for(int i=0 ; i < itemcount ;i++)
		{
			String data = itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData("PvVatView", 94, 6)))
			{
				itemListCount.get(i).click();
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_4thColumn));
		select1stRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.click();
		enter_Quantity.clear();
		enter_Quantity.sendKeys(excelReader.getCellData("PvVatView", 95, 6));
		enter_Quantity.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys(excelReader.getCellData("PvVatView", 96, 6));
		enter_Rate.sendKeys(Keys.TAB);
		
		enter_Gross.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.click();
		enter_Batch.clear();
		enter_Batch.sendKeys(excelReader.getCellData("PvVatView", 97, 6));
		
		enter_Batch.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.TAB);
		
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Date date=new Date();
		System.out.println(df.format(date));
		
		//Actdata is current date
		
		String actBatchExpiryColumnAfterInput=select1stRow_9thColumn.getText();
		
		String expBatchExpiryColumnAfterInput=df.format(date);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
		billRefNewReferenceTxt.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();
		
        String actbillRefNewReferenceTxt=billRefNewReferenceTxt.getAttribute("value");
		
		String expbillRefNewReferenceTxt=excelReader.getCellData("PvVatView", 98, 7);
		
		excelReader.setCellData(xlfile, "PvVatView", 98, 8, actbillRefNewReferenceTxt);
		

		System.out.println("actbillRefNewReferenceTxt   ; "+actbillRefNewReferenceTxt +" Value Expectd : "+expbillRefNewReferenceTxt);
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();
		
		boolean savingVoucher=checkVoucherSavingMessage(docno);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();
		
		if( savingVoucher==true  && 
				actbillRefNewReferenceTxt.equalsIgnoreCase(expbillRefNewReferenceTxt))
		{
			System.out.println("Test Pass : Voucher Saved Successfully");
			excelReader.setCellData(xlfile, "PvVatView", 89, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Voucher Saved Successfully");
			excelReader.setCellData(xlfile, "PvVatView", 89, 9, resFail);
			return false;
		}
		
		
		
	}
		
			catch (Exception e) 
	{
		String exception =e.getMessage();
		excelReader.setExceptionInExcel(xlfile, "PvVatView", 89, 10, exception);
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		return false;
	}
    }
	
	
	
	@FindBy(xpath = "//*[@id='tblBodyTransRender']/tr")
	private static List<WebElement> entryPageVoucherList;
	
	
	
	
	
	public boolean checkVoucherListInPurchaseOrderAfterSavingVoucherInPVVATViewWithVendorA() throws EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	try
	{
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();
				
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(invTransactionsMenu));
		invTransactionsMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();
		

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		
		int count	= entryPageVoucherList.size(); 
		
		
		
		String actgridChkBoxs=Integer.toString(count);
		String expgridChkBoxs=excelReader.getCellData("PvVatView", 100, 7);
		
		excelReader.setCellData(xlfile, "PvVatView", 100, 8, actgridChkBoxs);
		
		
		System.out.println("actgridChkBoxs   : "+actgridChkBoxs+" value     expected :"+expgridChkBoxs);
		
		if(actgridChkBoxs.equalsIgnoreCase(expgridChkBoxs))
		{
			System.out.println("Test Pass : One Voucher Displayed in Purchase Order ");
			excelReader.setCellData(xlfile, "PvVatView", 99, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : One Voucher  Displayed in Purchase Order");
			excelReader.setCellData(xlfile, "PvVatView", 99, 9, resFail);
			return false;
		}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PvVatView", 99, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		}
		
	}
		 

	
	
	
	public boolean checkEditinginPvvAtView() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	try
	{
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();
				
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();
		
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvvatViewMenu));
		pvvatViewMenu.click();

		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
		grid_ChkBox1.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editBtn));
		editBtn.click();
		
		
		checkUserFriendlyMessage();
		
		Thread.sleep(2000);
		
		String docno=documentNumberTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		vendorAccountTxt.sendKeys(Keys.BACK_SPACE);
		vendorAccountTxt.sendKeys(Keys.SPACE);
		
		int vendorcount=vendorAccountListCount.size();
		
		System.err.println(vendorcount);
		
		for(int i=0 ; i < vendorcount ;i++)
		{
		String data=vendorAccountListCount.get(i).getText();
		
		if(data.equalsIgnoreCase(excelReader.getCellData("PvVatView", 102, 6)))
		{
			vendorAccountListCount.get(i).click();
			
			break;
		}
		}
		
		Thread.sleep(2000);
		getWaitForAlert();
		
		Thread.sleep(2000);
		getAlert().accept();
		
		
		vendorAccountTxt.sendKeys(Keys.TAB);
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
		
		errorMessageCloseBtn.click();
		
		errorMessageCloseBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvRate));
		enter_PvRate.sendKeys(excelReader.getCellData("PvVatView", 101, 6));
		enter_PvRate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		enter_Batch.click();
		
		enter_Batch.sendKeys(Keys.TAB);
		Thread.sleep(2000);
		
		enter_Expirydate.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();
		
		boolean savingVoucher=checkVoucherSavingMessage(docno);
		
		
		if (savingVoucher==true) 
		{
			System.out.println("  Test  Pass: Voucher Edited Successfully ");
			excelReader.setCellData(xlfile, "PvVatView", 101, 9, resPass);
			return  true;
			
		} else 
		{
			System.out.println("  Test  Fail: Voucher Edited Successfully ");
			excelReader.setCellData(xlfile, "PvVatView", 101, 9, resFail);
            return false;
		}
	    }
	catch (Exception e) 
	{
		String exception =e.getMessage();
		excelReader.setExceptionInExcel(xlfile, "PvVatView", 101, 10, exception);
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		return false;
	}
		
		
		
	}
	
	
	
	

	public boolean checkVoucherListInPurchaseOrderAfterEditinginPVVATVIEW() throws EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	try
	{
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();
				
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(invTransactionsMenu));
		invTransactionsMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();
		

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();
		
		
		int count	= entryPageVoucherList.size(); 
		
		
		
		String actgridChkBoxs=Integer.toString(count);
		String expgridChkBoxs=excelReader.getCellData("PvVatView", 104, 7);
		
		excelReader.setCellData(xlfile, "PvVatView", 104, 8, actgridChkBoxs);
		
		
		System.out.println("actgridChkBoxs   : "+actgridChkBoxs+" value     expeected :"+expgridChkBoxs);
		
		if(actgridChkBoxs.equalsIgnoreCase(expgridChkBoxs))
	
		
		{
			System.out.println("Test Pass : One Voucher Displayed in Purchase Order ");
			excelReader.setCellData(xlfile, "PvVatView", 103, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : One Voucher  Displayed in Purchase Order");
			excelReader.setCellData(xlfile, "PvVatView", 103, 9, resFail);
			return false;
		}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PvVatView", 103, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		}
		
	}
		 

	
	
	public boolean checkEditinginPurchaseOrderVoucher() throws EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	try
	{
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
		grid_ChkBox1.click();
				
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editBtn));
		editBtn.click();
			
		
		checkUserFriendlyMessage();
		
		
        Thread.sleep(2000);
		
		String docno=documentNumberTxt.getAttribute("value");
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();
		

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		
		enter_Rate.sendKeys(Keys.SHIFT,Keys.HOME);
		
		enter_Rate.sendKeys(Keys.BACK_SPACE);
		
		enter_Rate.sendKeys(excelReader.getCellData("PvVatView", 106, 7));
		
		enter_Rate.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		boolean savingVoucher=checkVoucherSavingMessage(docno);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();
		
		if(savingVoucher==true)
		{
			System.out.println("Test Pass : editied Successfully in Purchase Order ");
			excelReader.setCellData(xlfile, "PvVatView", 105, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Not Able to Edited  in Purchase Order");
			excelReader.setCellData(xlfile, "PvVatView", 105, 9, resFail);
			return false;
		}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		}
	}
	
	
	
	
	@FindBy(xpath="//span[@id='id_transaction_entry_workflow_togglebutton']")
	private static WebElement  linksExpandBtn;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_1-1']//input")
	private static WebElement  linksFirstRowChkbox;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_2-1']//input")
	private static WebElement  linksSecondRowChkbox;
	
	@FindBy(xpath="//span[@class='icon-ok icon-font7']")
	private static WebElement  linksOkBtn;
	
	
	
	public boolean checkSavingPurchaseVoucherNWithPurchaseOrderLinks() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	try
	{
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
		finacinalsMenu.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();
				
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
			
		
		checkUserFriendlyMessage();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(linksExpandBtn));
		linksExpandBtn.click();
		
		boolean linkFirstRowChkbox=linksFirstRowChkbox.isDisplayed();
		
		String actlinksFirstRowChkbox=Boolean.toString(linkFirstRowChkbox);
		String explinksFirstRowChkbox=excelReader.getCellData("PvVatView", 108, 7);
		
		excelReader.setCellData(xlfile, "PvVatView", 108, 8, actlinksFirstRowChkbox);
		
		
	    boolean linkSecondRowChkbox=linksSecondRowChkbox.isDisplayed();
		
		String actlinkSecondRowChkbox=Boolean.toString(linkSecondRowChkbox);
		String explinkSecondRowChkbox=excelReader.getCellData("PvVatView", 109, 7);
		
		excelReader.setCellData(xlfile, "PvVatView", 109, 8, actlinkSecondRowChkbox);
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(linksFirstRowChkbox));
		linksFirstRowChkbox.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(linksOkBtn));
		linksOkBtn.click();
		
		Thread.sleep(2000);
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
        departmentTxt.click();
        departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME);
        departmentTxt.sendKeys(Keys.SPACE);
		
		
        int departmentListCount=openingBalDepartmentList.size();
        
        
        System.err.println("departmentListCount   : "+departmentListCount);
        
		 for (int i = 0; i < departmentListCount; i++) 
	 	 {
			String data=openingBalDepartmentList.get(i).getText();
			
			if (data.equalsIgnoreCase(excelReader.getCellData("PvVatView", 107, 6)))
				
			{
				openingBalDepartmentList.get(i).click();
				break;
			}
	 	 }
        
		 Thread.sleep(2000);
		 
		 departmentTxt.sendKeys(Keys.TAB);
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
		 wareHouseTxt.click();
		 wareHouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		 wareHouseTxt.sendKeys(Keys.SPACE);
			
			
	        int wareHouseList=wareHouseListCount.size();
	        
	        
	        System.err.println("wareHouseListCount   : "+wareHouseList);
	        
			 for (int i = 0; i < wareHouseList; i++) 
		 	 {
				String data=wareHouseListCount.get(i).getText();
				
				if (data.equalsIgnoreCase(excelReader.getCellData("PvVatView", 109, 6)))
					
				{
					wareHouseListCount.get(i).click();
					break;
				}
		 	 }
	        
			 Thread.sleep(2000);
			 
			 wareHouseTxt.sendKeys(Keys.TAB);
   
		String docno=documentNumberTxt.getAttribute("value");
		
		Thread.sleep(2000);
		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.click();
		enter_Batch.clear();
		enter_Batch.sendKeys(excelReader.getCellData("PvVatView", 108, 6));
		
		enter_Batch.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.TAB);*/
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();
		
		boolean savingVoucher=checkVoucherSavingMessage(docno);
		
		
		String actSavingVoucher=Boolean.toString(savingVoucher);
		String expSavingvoucher=excelReader.getCellData("PvVatView", 110, 7);
		
		excelReader.setCellData(xlfile, "PvVatView", 110, 8, actSavingVoucher);
		
		if(savingVoucher==true && actlinksFirstRowChkbox.equalsIgnoreCase(explinksFirstRowChkbox) && 
				actlinkSecondRowChkbox.equalsIgnoreCase(explinkSecondRowChkbox) && actSavingVoucher.equalsIgnoreCase(expSavingvoucher))
	
		
		{
			System.out.println("Test Pass : Purchase Voucher N is Saved With Pirchase OrderLinks ");
			excelReader.setCellData(xlfile, "PvVatView", 107, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Not Able to Edited  in Purchase Order");
			excelReader.setCellData(xlfile, "PvVatView", 107, 9, resFail);
			return false;
		}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		}
	}
	
	
	
	
	
	
	// Sales Invoice Vat 
	
	// Checking Credit Limit for Customer Update	
	
	@FindBy(xpath="//a[@id='2014']//span[contains(text(),'Sales')]")
	private static WebElement  financialTransactionSalesMenu;
	
	@FindBy(xpath="//span[contains(text(),'Sales invoice VAT')]")
	private static WebElement  salesInvoiceVATVoucher;
	
	public boolean checkSalesVoucherVATNewHomePage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
		finacinalsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialTransactionSalesMenu));
		financialTransactionSalesMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoicesVoucher));
		salesInvoiceVATVoucher.click();
		
		Thread.sleep(2000);
		checkDeleteLinkStatus();
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		
		boolean actHomePageNewBtn         =newBtn.isDisplayed();
		boolean actHomePageEditBtn        =editBtn.isDisplayed();
		boolean actHomePagePrintBtn       =printBtn.isDisplayed();
		boolean actHomePageDeleteBtn      =deleteBtn.isDisplayed();
		boolean actHomePageSuspendBtn     =suspendBtn.isDisplayed();
		boolean actHomePagePrintBarcodeBtn=printBarCodeBtn.isDisplayed();
		boolean actHomePageExportXMLBtn   =exportToXMLBtn.isDisplayed();
		boolean actHomePageSettingsBtn    =settingsBtn.isDisplayed();
		boolean actHomePageCloseBtn       =homeCloseBtn.isDisplayed();
		boolean actHomePageGridCheckBox   =grid_HeaderChkBox.isDisplayed();
		boolean actHomePageSortingBtn     =sortingBtn.isDisplayed();
		boolean actHomePageCreateViewBn   =createViewBtn.isDisplayed();
		boolean actHomePageCustomizeBtn   =customizeBtn.isDisplayed();
		boolean actHomePageFilterBtn      =filterBtn.isDisplayed();
		boolean actHomePageRefreshBtn     =refreshBtn.isDisplayed();
		boolean actHomePageOptionsBtn     =optionsBtn.isDisplayed();
		boolean actHomePageExportBtn      =exportBtn.isDisplayed();
		boolean actHomePageAllView        =homePageAllVouchersView.isDisplayed();
		
		
		
		boolean expHomePageNewBtn         =true;
		boolean expHomePageEditBtn        =true;
		boolean expHomePagePrintBtn       =true;
		boolean expHomePageDeleteBtn      =true;
		boolean expHomePageSuspendBtn     =true;
		boolean expHomePagePrintBarcodeBtn=true;
		boolean expHomePageExportXMLBtn   =true;
		boolean expHomePageSettingsBtn    =true;
		boolean expHomePageCloseBtn       =true;
		boolean expHomePageGridCheckBox   =true;
		boolean expHomePageSortingBtn     =true;
		boolean expHomePageCreateViewBn   =true;
		boolean expHomePageCustomizeBtn   =true;
		boolean expHomePageFilterBtn      =true;
		boolean expHomePageRefreshBtn     =true;
		boolean expHomePageOptionsBtn     =true;
		boolean expHomePageExportBtn      =true;
		boolean expHomePageAllView        =true;
		
		
		System.out.println("****************************** checkSalesInvoiceHomeScreenOptions  ********************************************");
		System.out.println("Home Page New Btn Value Actual           :"+actHomePageNewBtn+         "     Value Expected : "+expHomePageNewBtn);
		System.out.println("Home Page Edit Btn Value Actual          :"+actHomePageEditBtn+        "     Value Expected : "+expHomePageEditBtn);
		System.out.println("Home Page Print Btn Value Actual         :"+actHomePagePrintBtn+       "	 Value Expected : "+expHomePagePrintBtn);
		System.out.println("Home Page Delete Btn Value Actual        :"+actHomePageDeleteBtn+      "	 Value Expected : "+expHomePageDeleteBtn);
		System.out.println("Home Page Suspend Btn Value Actual       :"+actHomePageSuspendBtn+     "	 Value Expected : "+expHomePageSuspendBtn);
		System.out.println("Home Page Print Barcode Btn Value Actual :"+actHomePagePrintBarcodeBtn+"	 Value Expected : "+expHomePagePrintBarcodeBtn);
		System.out.println("Home Page Export XML Btn Value Actual    :"+actHomePageExportXMLBtn+   "	 Value Expected : "+expHomePageExportXMLBtn);
		System.out.println("Home Page Settings Btn Value Actual      :"+actHomePageSettingsBtn+    "	 Value Expected : "+expHomePageSettingsBtn);
		System.out.println("Home Page Close Btn Value Actual         :"+actHomePageCloseBtn+       "	 Value Expected : "+expHomePageCloseBtn);
		System.out.println("Home Page Grid check Value Actual        :"+actHomePageGridCheckBox+   "	 Value Expected : "+expHomePageGridCheckBox);
		System.out.println("Home Page Sorting Btn Value Actual       :"+actHomePageSortingBtn+     "	 Value Expected : "+expHomePageSortingBtn);
		System.out.println("Home Page Create View Btn Value Actual   :"+actHomePageCreateViewBn+   "	 Value Expected : "+expHomePageCreateViewBn);
		System.out.println("Home Page Customize Btn Value Actual     :"+actHomePageCustomizeBtn+   "	 Value Expected : "+expHomePageCustomizeBtn);
		System.out.println("Home Page Filter check Value Actual      :"+actHomePageFilterBtn+      "	 Value Expected : "+expHomePageFilterBtn);
		System.out.println("Home Page Refesh Btn Value Actual        :"+actHomePageRefreshBtn+     "	 Value Expected : "+expHomePageRefreshBtn);
		System.out.println("Home Page Options Btn Value Actual       :"+actHomePageOptionsBtn+     "	 Value Expected : "+expHomePageOptionsBtn);
		System.out.println("Home Page Export Btn Value Actual        :"+actHomePageExportBtn+      "	 Value Expected : "+expHomePageExportBtn);
		System.out.println("Home Page All View Value Actual          :"+actHomePageExportBtn+      "	 Value Expected : "+expHomePageExportBtn);
		System.out.println("Home Page Pending SO View Value Actual   :"+actHomePageExportBtn+      "	 Value Expected : "+expHomePageExportBtn);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		
		boolean actMethod = actHomePageNewBtn==expHomePageNewBtn  && actHomePageEditBtn==expHomePageEditBtn && actHomePagePrintBtn==expHomePagePrintBtn
				&& actHomePageDeleteBtn==expHomePageDeleteBtn/* && actHomePageAuthorizeBtn==expHomePageAuthorizeBtn*/ && actHomePageSuspendBtn==expHomePageSuspendBtn 
				/*&& actHomePageRejectBtn==expHomePageRejectBtn*/ && actHomePagePrintBarcodeBtn==expHomePagePrintBarcodeBtn && actHomePageExportXMLBtn==expHomePageExportXMLBtn
				&& actHomePageSettingsBtn==expHomePageSettingsBtn && actHomePageCloseBtn==expHomePageCloseBtn && actHomePageGridCheckBox==expHomePageGridCheckBox
				&& actHomePageSortingBtn==expHomePageSortingBtn && actHomePageCreateViewBn==expHomePageCreateViewBn && actHomePageCustomizeBtn==expHomePageCustomizeBtn
				&& actHomePageFilterBtn==expHomePageFilterBtn && actHomePageRefreshBtn==expHomePageRefreshBtn && actHomePageOptionsBtn==expHomePageOptionsBtn
				&& actHomePageExportBtn==expHomePageExportBtn && actHomePageAllView==expHomePageAllView;
		
		String actResult = Boolean.toString(actMethod);
		String expResult = excelReader.getCellData("SmokeSalesInvoiceVAT", 9, 7);
		
		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 9, 8, actResult);
				
		if(actResult.equalsIgnoreCase(expResult))
		{	
			System.out.println("Test Pass : HomeScreen Options Are Displayed");
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 9, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : HomeScreen Options Are NOT Displayed");
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 9, 9, resFail);
			return false;
		}
	}
	
	

	public boolean checkSalesVoucherVATNewEntryPage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		checkUserFriendlyMessage();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jumpToHeaderSectionBtn));
		
		boolean actEntryPageJumpToHeaderSectionBtn=jumpToHeaderSectionBtn.isDisplayed();
		boolean actEntryPageJumpToBodySectionBtn  =jumpToBodySectionBtn.isDisplayed();
		boolean actEntryPageJumpToFooterBtn       =jumpToFooterBtn.isDisplayed();
		boolean actEntryPageNewBtn                =new_newBtn.isDisplayed();
		boolean actEntryPageSaveBtn               =saveBtn.isDisplayed();
		boolean actEntryPagePreviousBtn           =previousBtn.isDisplayed();
		boolean actEntryPageNextBtn               =nextBtn.isDisplayed();
		boolean actEntryPagePrintBtn              =new_PrintBtn.isDisplayed();
		boolean actEntryPageSuspendBtn            =new_SuspendBtn.isDisplayed();
		boolean actEntryPageCloseBtn              =new_CloseBtn.isDisplayed();
		boolean actEntryPageToggleBtn             =toggleBtn.isDisplayed();

		
		boolean expEntryPageJumpToHeaderSectionBtn=true;
		boolean expEntryPageJumpToBodySectionBtn  =true;
		boolean expEntryPageJumpToFooterBtn       =true;
		boolean expEntryPageNewBtn	              =true;
		boolean expEntryPageSaveBtn               =true;
		boolean expEntryPagePreviousBtn           =true;
		boolean expEntryPageNextBtn               =true;
		boolean expEntryPagePrintBtn              =true;
		boolean expEntryPageSuspendBtn            =true;
		boolean expEntryPageCloseBtn              =true;
		boolean expEntryPageToggleBtn             =true;

		
		
		System.out.println("************************************* Sales Invoice Entry Page Ribbon Control Options  ********************************************");
		System.out.println("Entry Page RC Jump to Header Value Actual:"+actEntryPageJumpToHeaderSectionBtn+"  Value Expected : "+expEntryPageJumpToHeaderSectionBtn);
		System.out.println("Entry Page RC Jump To Body Value Actual  :"+actEntryPageJumpToBodySectionBtn+"    Value Expected : "+expEntryPageJumpToBodySectionBtn);
		System.out.println("Entry Page RC Jump To Footer Value Actual:"+actEntryPageJumpToFooterBtn+"         Value Expected : "+expEntryPageJumpToFooterBtn);
		System.out.println("Entry Page RC New Btn Value Actual       :"+actEntryPageNewBtn+"                  Value Expected : "+expEntryPageNewBtn);
		System.out.println("Entry Page RC Save Btn Value Actual      :"+actEntryPageSaveBtn+"                 Value Expected : "+expEntryPageSaveBtn);
		System.out.println("Entry Page RC Previous Btn Value Actual  :"+actEntryPagePreviousBtn+"             Value Expected : "+expEntryPagePreviousBtn);
		System.out.println("Entry Page RC Next Btn Value Actual      :"+actEntryPageNextBtn+"                 Value Expected : "+expEntryPageNextBtn);
		System.out.println("Entry Page RC Print Btn Value Actual     :"+actEntryPagePrintBtn+"                Value Expected : "+expEntryPagePrintBtn);
		System.out.println("Entry Page RC Suspend Btn Value Actual   :"+actEntryPageSuspendBtn+"              Value Expected : "+expEntryPageSuspendBtn);
		System.out.println("Entry Page RC Close Btn Value Actual     :"+actEntryPageCloseBtn+"                Value Expected : "+expEntryPageCloseBtn);
		System.out.println("Entry Page RC Toggle Btn Value Actual    :"+actEntryPageToggleBtn+"               Value Expected : "+expEntryPageToggleBtn);
		
		boolean actMethod = actEntryPageJumpToHeaderSectionBtn==expEntryPageJumpToHeaderSectionBtn && actEntryPageJumpToBodySectionBtn==expEntryPageJumpToBodySectionBtn 
				&& actEntryPageJumpToFooterBtn==expEntryPageJumpToFooterBtn && actEntryPageJumpToFooterBtn==expEntryPageJumpToFooterBtn
				&& actEntryPageNewBtn==expEntryPageNewBtn && actEntryPageSaveBtn==expEntryPageSaveBtn && actEntryPagePreviousBtn==expEntryPagePreviousBtn
				&& actEntryPageNextBtn==expEntryPageNextBtn && actEntryPagePrintBtn==expEntryPagePrintBtn &&actEntryPageSuspendBtn==expEntryPageSuspendBtn 
				&& actEntryPageCloseBtn==expEntryPageCloseBtn && actEntryPageToggleBtn==expEntryPageToggleBtn ;
		
		String actResult = Boolean.toString(actMethod);
		String expResult = excelReader.getCellData("SmokeSalesInvoiceVAT", 11, 7);
		
		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 11, 8, actResult);
				
		if(actResult.equalsIgnoreCase(expResult))
		{
			System.out.println("Test Pass : Entry Page  Options Are Displayed");
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 11, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Entry Page NOT Displayed");
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 11, 9, resFail);
			return false;
		}
	}
	

	@FindBy(xpath="//input[@id='id_header_67108944']")
	private static WebElement  salesInvoiceVAT_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_268435471']")
	private static WebElement  salesInvoiceVATJuridictionxt;
	
	
	@FindBy(xpath="//input[@id='id_header_268435470']")
	private static WebElement  salesInvoiceVATPlaceOFSupply;
	
	
	public boolean checkSalesVoucherVATNewEntryPageHeaderFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoSideBarMinimizeExpandBtn));
		infoSideBarMinimizeExpandBtn.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		
		// Actual
		boolean actDocumentNumberTxt         =documentNumberTxt.isDisplayed();
		boolean actDateTxt                   =dateTxt.isDisplayed();
		boolean actCustomerAccount           =customerAccountTxt.isDisplayed();
		boolean actRaiseReceipt              =voucherRaiseReceiptCheckBox.isDisplayed();
		//boolean actWarehouse                 =wareHouseTxt.isDisplayed();
		boolean actDepartment                =departmentTxt.isDisplayed();
		boolean actVoucherDueDate            =voucherHeaderDueDate.isDisplayed();
		boolean actVoucherCurrency           =voucherHeaderCurrency.isDisplayed();
		boolean actVoucherExchangeRate       =voucherHeaderExchangeRate.isDisplayed();
		boolean actVoucherLocalExchangeRate  =voucherHeaderLocalExchangeRate.isDisplayed();
		boolean actSalesInvoice_NarrationTxt =salesInvoiceVAT_NarrationTxt.isDisplayed();
		boolean actsalesInvoiceVATJuridictionxt =salesInvoiceVATJuridictionxt.isDisplayed();
		boolean actsalesInvoiceVATPlaceOFSupply =salesInvoiceVATPlaceOFSupply.isDisplayed();
		
		// Expected
		boolean expDocumentNumberTxt         =true;
		boolean expDateTxt                   =true;
		boolean expCustomerAccount           =true;
		boolean expRaiseReceipt              =true;
		boolean expWarehouse                 =true;
		boolean expDepartment                =true;
		boolean expVoucherDueDate            =true;
		boolean expVoucherCurrency           =true;
		boolean expVoucherExchangeRate       =true;
		boolean expVoucherLocalExchangeRate  =true;
		boolean expSalesInvoice_NarrationTxt =true;
		boolean expsalesInvoiceVATJuridictionxt=true;
		boolean expsalesInvoiceVATPlaceOFSupply=true;
		
		System.out.println("************************************* Sales Invoice Entry Page Ribbon Control Options  ********************************************");
		System.out.println("Entry Page Header Value Actual    :"+actDocumentNumberTxt+         " Value Expected : "+expDocumentNumberTxt);
		System.out.println("Entry Page Header Value Actual    :"+actDateTxt+                   " Value Expected : "+expDateTxt);
		System.out.println("Entry Page Header Value Actual    :"+actCustomerAccount+           " Value Expected : "+expCustomerAccount);
		System.out.println("Entry Page Header Value Actual    :"+actRaiseReceipt+              " Value Expected : "+expRaiseReceipt);
		//System.out.println("Entry Page Header Value Actual    :"+actWarehouse+                 " Value Expected : "+expWarehouse);
		System.out.println("Entry Page Header Value Actual    :"+actDepartment+                " Value Expected : "+expDepartment);
		System.out.println("Entry Page Header Value Actual    :"+actVoucherDueDate+            " Value Expected : "+expVoucherDueDate);
		System.out.println("Entry Page Header Value Actual    :"+actVoucherCurrency+           " Value Expected : "+expVoucherCurrency);
		System.out.println("Entry Page Header Value Actual    :"+actVoucherExchangeRate+       " Value Expected : "+expVoucherExchangeRate);
		System.out.println("Entry Page Header Value Actual    :"+actVoucherLocalExchangeRate+  " Value Expected : "+expVoucherLocalExchangeRate);
		System.out.println("Entry Page Header Value Actual    :"+actSalesInvoice_NarrationTxt+ " Value Expected : "+expSalesInvoice_NarrationTxt);
		System.out.println("Entry Page Header Value Actual    :"+actsalesInvoiceVATJuridictionxt+ " Value Expected : "+expsalesInvoiceVATJuridictionxt);
		System.out.println("Entry Page Header Value Actual    :"+actsalesInvoiceVATPlaceOFSupply+ " Value Expected : "+expsalesInvoiceVATPlaceOFSupply);
		
		boolean actMethod = actDocumentNumberTxt==expDocumentNumberTxt && actDateTxt==expDateTxt /*&& actSalesAccount==expSalesAccount*/
				 && actCustomerAccount==expCustomerAccount  && actRaiseReceipt==expRaiseReceipt  /*&& actWarehouse==expWarehouse*/
				 && actDepartment==expDepartment && actVoucherDueDate==expVoucherDueDate && actVoucherCurrency==expVoucherCurrency
				 && actVoucherExchangeRate==expVoucherExchangeRate && actVoucherLocalExchangeRate==expVoucherLocalExchangeRate
				 && actSalesInvoice_NarrationTxt==expSalesInvoice_NarrationTxt && actsalesInvoiceVATPlaceOFSupply==expsalesInvoiceVATPlaceOFSupply && 
				 actsalesInvoiceVATJuridictionxt==expsalesInvoiceVATJuridictionxt;
		
		String actResult = Boolean.toString(actMethod);
		String expResult = excelReader.getCellData("SmokeSalesInvoiceVAT", 12, 7);
		
		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 12, 8, actResult);
				
		if(actResult.equalsIgnoreCase(expResult))		     
		
		{
			System.out.println("Test Pass : entry Page Header Options Are Displayed");
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 12, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 12, 9, resFail);
			return false;
		}
	}

	
	@FindBy(xpath="//div[contains(text(),'Sales Account')]")
	private static WebElement voucherBodySalesAccName;
	
	@FindBy(xpath="//div[contains(text(),'AQ')]")
	private static WebElement voucherBodyAQName;
	
	@FindBy(xpath="//div[contains(text(),'FQ')]")
	private static WebElement voucherBodyFQName;
	
	@FindBy(xpath="//div[contains(text(),'Avg Rate(O)')]")
	private static WebElement voucherBodyAvgRate_o_Name;
	
	@FindBy(xpath="//div[contains(text(),'L-Sales Orders')]")
	private static WebElement voucherBodyLinkSalesOrder;
	
	@FindBy(xpath="//div[contains(text(),'Quantity to release')]")
	private static WebElement voucherBodyQtyToReleaseName;
	
	
		
	public boolean checkSalesVoucherVATEntryPageBodyFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherBodyItemName));
		
        // Actual
		boolean actvoucherBodyWareHouseName=voucherBodyWareHouseName.isDisplayed();
		boolean actBodyItemName            =voucherBodyItemName.isDisplayed();
		boolean actvoucherBodyTaxCodeName  =voucherBodyTaxCodeName.isDisplayed();
		boolean actvoucherBodySalesAccName =voucherBodySalesAccName.isDisplayed();
		boolean actBodyUnitName            =voucherBodyUnitsName.isDisplayed();
		
		
		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("arguments[0].scrollIntoView();", voucherBodyQtyName);
		
		boolean actBodyAVGRate             =voucherBodyAvgRateName.isDisplayed();
		boolean actBodyAVGRateO            =voucherBodyAvgRate_o_Name.isDisplayed();
		boolean actBodyRDName              =voucherBodyRDName.isDisplayed();
		boolean actBodyAQName              =voucherBodyAQName.isDisplayed();
		boolean actBodyFQName              =voucherBodyFQName.isDisplayed();
		boolean actBodyQtyName             =voucherBodyQtyName.isDisplayed();
		
		JavascriptExecutor js2 = (JavascriptExecutor) getDriver();
		js2.executeScript("arguments[0].scrollIntoView();", voucherBodyGrossName);
		
		boolean actBodyQtyToRelease        =voucherBodyQtyToReleaseName.isDisplayed();
		boolean actBodyRate                =voucherBodyRateName.isDisplayed();
		boolean actBodyGross               =voucherBodyGrossName.isDisplayed();
		
		
		
		 JavascriptExecutor js1 = (JavascriptExecutor) getDriver();
		 js1.executeScript("arguments[0].scrollIntoView();", voucherBodyRMAName);
		
		boolean actBodyBatch            =voucherBodyBatchName.isDisplayed();
		boolean actBodyBins             =voucherBodyBinsName.isDisplayed();
		boolean actBodyRMA              =voucherBodyRMAName.isDisplayed();
		//boolean actBodyRemarks          =voucherBodyRemarksName.isDisplayed();

		
		// Expected
		boolean expvoucherBodyWareHouseName=true;
		boolean expBodyItemName=true; 
		boolean expvoucherBodyTaxCodeName=true;
		boolean expvoucherBodySalesAccName=true;
		boolean expBodyUnitName=true;
		boolean expBodyQAName=true;
		boolean expBodyFQName=true;
		boolean expBodyRDName=true;
		boolean expBodyAVGRateName=true;
		boolean expBodyAvgRateOName=true;
		boolean expBodyQtyName=true;
		boolean expBodyQtyToReleaseName=true;
		boolean expBodyRateName=true;
		boolean expBodyGrossName=true;
		boolean expBodyBatchName=true;
		boolean expBodyBinsName=true;
		boolean expBodyRMA=true;
		boolean expBodyRemarks=true;
		
		
		System.out.println("************************************* Sales Invoice VAT Entry Page Ribbon Control Options  ********************************************");
		System.out.println("voucherBodyWareHouseName : "+actvoucherBodyWareHouseName+" Value Expected : "+expvoucherBodyWareHouseName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyItemName+ " Value Expected : "+expBodyItemName);
		System.out.println("Entry Page Body Value Actual    :"+actvoucherBodyTaxCodeName+ " Value Expected : "+expvoucherBodyTaxCodeName);
		System.out.println("Entry Page Body Value Actual    :"+actvoucherBodySalesAccName+ " Value Expected : "+expvoucherBodySalesAccName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyUnitName+ " Value Expected : "+expBodyUnitName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyAQName+   " Value Expected : "+expBodyQAName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyFQName+   " Value Expected : "+expBodyFQName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyRDName+   " Value Expected : "+expBodyRDName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyAVGRate+  " Value Expected : "+expBodyAVGRateName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyAVGRateO+ " Value Expected : "+expBodyAvgRateOName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyQtyName+  " Value Expected : "+expBodyQtyName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyRate+     " Value Expected : "+expBodyRateName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyGross+    " Value Expected : "+expBodyGrossName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyBatch+    " Value Expected : "+expBodyBatchName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyBins+     " Value Expected : "+expBodyBinsName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyRMA+      " Value Expected : "+expBodyRMA);
		//System.out.println("Entry Page Body Value Actual    :"+actBodyRemarks+  " Value Expected : "+expBodyRemarks);
		
		boolean actMethod = actBodyItemName==expBodyItemName && actBodyUnitName==expBodyUnitName && actBodyAQName==expBodyQAName && actBodyFQName==expBodyFQName
				&& actBodyRDName==expBodyRDName && actBodyAVGRate==expBodyAVGRateName && actBodyAVGRateO==expBodyAvgRateOName 
				&& actBodyQtyName==expBodyQtyName && actBodyRate==expBodyQtyName && actBodyGross==expBodyGrossName
				&& actBodyBatch==expBodyBatchName && actBodyBins==expBodyBinsName && actBodyRMA==expBodyRMA /*&& actBodyRemarks==expBodyRemarks*/ && 
				actvoucherBodySalesAccName==expvoucherBodySalesAccName && actvoucherBodyTaxCodeName==expvoucherBodyTaxCodeName 
				&& actvoucherBodyWareHouseName==expvoucherBodyWareHouseName;
		
		String actResult = Boolean.toString(actMethod);
		String expResult = excelReader.getCellData("SmokeSalesInvoiceVAT", 13, 7);
		
		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 13, 8, actResult);
				
		if(actResult.equalsIgnoreCase(expResult))
		{
			
			System.out.println(" Test Pass: Displayed Entry page Body Fileds ");
			
			js.executeScript("arguments[0].scrollIntoView();", voucherBodyHeaderIndex);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 13, 9, resPass);
			return true;
		}
		else 
		{
			System.out.println(" Test Fail:  Not Displayed Entry page Body Fileds ");
			
			js.executeScript("arguments[0].scrollIntoView();", voucherBodyHeaderIndex);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 13, 9, resFail);
			return false;
		}
			
	}

		
		


	public boolean checkSalesVoucherVATEntryPageFooterFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jumpToFooterBtn));
		jumpToFooterBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(netLabel));
		
		boolean actEntryPageFooterFieldsNetLabel  =netLabel.isDisplayed();
		boolean actEntryPageFooterFieldsNetAmount =netAmount.isDisplayed();

		boolean expEntryPageFooterFieldsNetLabel  =true;
		boolean expEntryPageFooterFieldsNetAmount =true;

		System.out.println("****************************&&7************* checkOpeningStocksNewEntryPageFooterFields  ***************************************************");
		System.out.println("Entry Page Footer Fields Net Label Value Actual  : "+actEntryPageFooterFieldsNetLabel+"   Value Expected : "+expEntryPageFooterFieldsNetLabel);
		System.out.println("Entry Page Footer Fields Net Amount Value Actual : "+actEntryPageFooterFieldsNetAmount+"  Value Expected : "+expEntryPageFooterFieldsNetAmount);

		boolean actMethod = actEntryPageFooterFieldsNetLabel==expEntryPageFooterFieldsNetLabel && actEntryPageFooterFieldsNetAmount==expEntryPageFooterFieldsNetAmount;
		
		String actResult = Boolean.toString(actMethod);
		String expResult = excelReader.getCellData("SmokeSalesInvoiceVAT", 14, 7);
		
		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 14, 8, actResult);
				
		if(actResult.equalsIgnoreCase(expResult))
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");


			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 14, 9, resFail);
			return false;
		}


	}


	public boolean checkSalesVoucherVATEntryPageDocumentNumber() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jumpToHeaderSectionBtn));
		jumpToHeaderSectionBtn.click();
		

        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();
		
		String actEntryPageGetDocumentNumberValue  =documentNumberTxt.getAttribute("value");

		String expEntryPageGetDocumentNumberValue  =excelReader.getCellData("SmokeSalesInvoiceVAT", 16, 7);
		
		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 16, 8, actEntryPageGetDocumentNumberValue);
		

		System.out.println("*************************************** checkOpeningStocksNewEntryPageDocumentNumber ****************************************************");
		System.out.println("Entry Page Document Number Value Actual  : "+actEntryPageGetDocumentNumberValue+"   Value Expected : "+expEntryPageGetDocumentNumberValue);

		
		if(actEntryPageGetDocumentNumberValue.equalsIgnoreCase(expEntryPageGetDocumentNumberValue))
		{
			System.out.println("Test Pass : Document No is 1");
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 15, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 15, 9, resFail);
			return false;
		}
	}


	
	

	public boolean checkSalesVoucherVATEntryPageInfoSideBar() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoSideBarMinimizeExpandBtn));
		infoSideBarMinimizeExpandBtn.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoSideBarCustomizeBtn));
		
		boolean InforSideBarCustomization            =infoSideBarCustomizeBtn.isDisplayed();
		String actInforSideBarCustomization   =      Boolean.toString(InforSideBarCustomization);
		
		
		boolean InforSideBarCustomizationExpandButton=infoSideBarMinimizeExpandBtn.isDisplayed();
		String actInforSideBarCustomizationExpandButton=Boolean.toString(InforSideBarCustomizationExpandButton);
		
		
		String expInforSideBarCustomization            =excelReader.getCellData("SmokeSalesInvoiceVAT", 18, 7);
		
		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 18, 8, actInforSideBarCustomization);
		
		
		String expInforSideBarCustomizationExpandButton=excelReader.getCellData("SmokeSalesInvoiceVAT", 19, 7);
		
		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 19, 8, actInforSideBarCustomizationExpandButton);
		
		System.out.println("***************************************** checkSalesVoucherNewEntryPageInfoSideBar  ***************************************************");
		System.out.println("Entry Page Open Docuemnt Number Value Actual  : "+actInforSideBarCustomization               +" Value Expected : "+expInforSideBarCustomization);
		System.out.println("Entry Page Open Docuemnt Number Value Actual  : "+actInforSideBarCustomizationExpandButton   +" Value Expected : "+expInforSideBarCustomizationExpandButton);
		
		if(actInforSideBarCustomization.equalsIgnoreCase(expInforSideBarCustomization) && 
				actInforSideBarCustomizationExpandButton.equalsIgnoreCase(expInforSideBarCustomizationExpandButton))
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 17, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 17, 9, resFail);
			return false;
		}
	}



	public boolean checkSalesVoucherVATEntryPageInfoSideBarCustomizeBtn() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoSideBarCustomizeBtn));
		
		infoSideBarCustomizeBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeSearchTxt));

		boolean actInfoCustomizationSearchTxt        =customizeSearchTxt.isDisplayed();
		boolean actInfoCustomizationSearchBtn        =customizeSearchBtn.isDisplayed();
		boolean actInfoCustomizationCloseBtn         =customizeCloseBtn.isDisplayed();
		boolean actInfoCustomizationSaveBtn          =customizeSaveBtn.isDisplayed();
		boolean actInfoCustomizationCancelBtn        =customizeCancelBtn.isDisplayed();
		boolean actInfoCustomizationGraphBtn         =graphBtn.isDisplayed();
		boolean actInfoCustomizationReportBtn        =reportBtn.isDisplayed();
		boolean actInfoCustomizationInfopanelBtn     =infoPanelBtn.isDisplayed();
		boolean actInfoCustomizationWorkFlowBtn      =workFlowBtn.isDisplayed();
		boolean actInfoCustomizationOtherDashletsBtn =otherDashlets.isDisplayed();

		boolean expInfoCustomizationSearchTxt        =true;
		boolean expInfoCustomizationSearchBtn        =true;
		boolean expInfoCustomizationCloseBtn         =true;
		boolean expInfoCustomizationSaveBtn          =true;
		boolean expInfoCustomizationCancelBtn        =true;
		boolean expInfoCustomizationGraphBtn         =true;
		boolean expInfoCustomizationReportBtn        =true;
		boolean expInfoCustomizationInfopanelBtn     =true;
		boolean expInfoCustomizationWorkFlowBtn      =true;
		boolean expInfoCustomizationOtherDashletsBtn =true;

		
		System.out.println("********************* checksalesVoucherNewEntryPageInfoSideBarCustomizeBtn  *************************************");
		
		System.out.println("Entry Page Info Panel Search Txt Value Actual : "+actInfoCustomizationSearchTxt        +" Value Expected : "+expInfoCustomizationSearchTxt);
		System.out.println("Entry Page Info Panel Search Btn Value Actual : "+actInfoCustomizationSearchBtn        +" Value Expected : "+expInfoCustomizationSearchBtn);
		System.out.println("Entry Page Info Panel Close Btn Value Actual  : "+actInfoCustomizationCloseBtn         +" Value Expected : "+expInfoCustomizationCloseBtn);
		System.out.println("Entry Page Info Panel Save Btn Value Actual   : "+actInfoCustomizationSaveBtn          +" Value Expected : "+expInfoCustomizationSaveBtn);
		System.out.println("Entry Page Info Panel Cancel Value Actual     : "+actInfoCustomizationCancelBtn        +" Value Expected : "+expInfoCustomizationCancelBtn);
		System.out.println("Entry Page Info Panel Graph Value Actual      : "+actInfoCustomizationGraphBtn         +" Value Expected : "+expInfoCustomizationGraphBtn);
		System.out.println("Entry Page Info Panel Report Value Actual     : "+actInfoCustomizationReportBtn        +" Value Expected : "+expInfoCustomizationReportBtn);
		System.out.println("Entry Page Info Panel Value Actual            : "+actInfoCustomizationInfopanelBtn     +" Value Expected : "+expInfoCustomizationInfopanelBtn);
		System.out.println("Entry Page Info Panel WorkFlow Btn Actual     : "+actInfoCustomizationWorkFlowBtn      +" Value Expected : "+expInfoCustomizationWorkFlowBtn);
		System.out.println("Entry Page Info Panel Dashlet Btn Actual      : "+actInfoCustomizationOtherDashletsBtn +" Value Expected : "+expInfoCustomizationOtherDashletsBtn);
		
		
		
		boolean actMethod=actInfoCustomizationSearchTxt==expInfoCustomizationSearchTxt && actInfoCustomizationSearchBtn==expInfoCustomizationSearchBtn && actInfoCustomizationCloseBtn==expInfoCustomizationCloseBtn 
				&& actInfoCustomizationSaveBtn==expInfoCustomizationSaveBtn && actInfoCustomizationGraphBtn==expInfoCustomizationGraphBtn
				&& actInfoCustomizationReportBtn==expInfoCustomizationReportBtn && actInfoCustomizationInfopanelBtn==expInfoCustomizationInfopanelBtn  
				&& actInfoCustomizationWorkFlowBtn==expInfoCustomizationWorkFlowBtn && actInfoCustomizationOtherDashletsBtn==expInfoCustomizationOtherDashletsBtn;
		
		
		String actDisplayResult=Boolean.toString(actMethod);
		String expDisplayResult=excelReader.getCellData("SmokeSalesInvoiceVAT", 21, 7);
		
		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 21, 8, actDisplayResult.toUpperCase());
		
		if(actDisplayResult.equalsIgnoreCase(expDisplayResult))
		{
			System.out.println("Test Pass :Info Side Custiomaztion Options Are Displayed");
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 20, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Info Side Custiomaztion Options NOT Displayed");
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 20, 9, resFail);
			return false;
		}
	}
		


	public boolean checkSalesVoucherVATEntryPageInfoSideBarGraphOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(graphBtn));
		
		graphBtn.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newGraphOption));
	
		boolean NewGraphOption       =newGraphOption.isDisplayed();
		
		String actNewGraphOption=Boolean.toString(NewGraphOption);
		
		String  expNewGraphOption       =excelReader.getCellData("SmokeSalesInvoiceVAT", 23, 7);
		
		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 23, 8, actNewGraphOption.toUpperCase());
		
		System.out.println("***************************************** checkPurchaseVoucherNewEntryPageInfoSideBarGraphOption  *****************************************");
		System.out.println("Entry Page Open Info Side Graph Value Actual  : "+actNewGraphOption               +" Value Expected : "+expNewGraphOption);
		
		if(actNewGraphOption.equalsIgnoreCase(expNewGraphOption))
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 22, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 22, 9, resFail);
			return false;
		}
	}

	
	public boolean checkSalesVoucherVATEntryPageInfoSideBarReportOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reportBtn));
		
		reportBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newReportOption));
		
		boolean NewReportOption       =newReportOption.isDisplayed();
		
		String actNewReportOption       =Boolean.toString(NewReportOption);
		
		String expNewReportOption       =excelReader.getCellData("SmokeSalesInvoiceVAT", 25, 7);
		
		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 25, 8, actNewReportOption.toUpperCase());
		
		
		System.out.println("***************************************** checkPurchaseVoucherNewEntryPageInfoSideBarReportOption  *****************************************");
		System.out.println("Entry Page Open Info Side Report Value Actual  : "+actNewReportOption               +" Value Expected : "+expNewReportOption);
		
		
		if(actNewReportOption.equalsIgnoreCase(expNewReportOption))
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 24, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 24, 9, resFail);
			return false;
		}
	}
		
	
	
	public boolean checkSalesVoucherVATEntryPageInfoSideBarInfoPanelOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoPanelBtn));
		
		infoPanelBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newInfoPanelOption));
		
		boolean NewInfoPanelOption       =newInfoPanelOption.isDisplayed();
		
		String actNewInfoPanelOption=Boolean.toString(NewInfoPanelOption);
		
		String expNewInfoPanelOption       = excelReader.getCellData("SmokeSalesInvoiceVAT", 27, 7);
		
		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 27, 8, actNewInfoPanelOption.toUpperCase());
		
		
	
		System.out.println("***************************************** checkSalesVoucherNewEntryPageInfoSideBarInfoPanelOption  *****************************************");
		System.out.println("Entry Page Open Info Side Info Panel Value Actual  : "+actNewInfoPanelOption               +" Value Expected : "+expNewInfoPanelOption);
		
		
		
		if(actNewInfoPanelOption.equalsIgnoreCase(expNewInfoPanelOption))
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 26, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 26, 9, resFail);
			return false;
		}
	}
	
	
	
	public boolean checkSalesVoucherVATEntryPageInfoSideBarWorkFlowOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowBtn));
		
		workFlowBtn.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newWorkFlowOption));
		
		boolean NewWorkFlowOption       =newWorkFlowOption.isDisplayed();
		
		String actNewWorkFlowOption=Boolean.toString(NewWorkFlowOption);
		
		
		String expNewWorkFlowOption       =excelReader.getCellData("SmokeSalesInvoiceVAT", 29, 7);
		
		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 29, 8, actNewWorkFlowOption.toUpperCase());
		
		
	
		System.out.println("***************************************** checkPurchaseVoucherNewEntryPageInfoSideBarWorkFlowOption  *****************************************");
		System.out.println("Entry Page Open Info Side Workflow Value Actual  : "+actNewWorkFlowOption               +" Value Expected : "+expNewWorkFlowOption);
		
		
		if(actNewWorkFlowOption.equalsIgnoreCase(expNewWorkFlowOption))
		{
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 28, 9, resPass);
			return true;
		}
		else
		{
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 28, 9, resFail);
			return false;
		}
	}
	
	
	
	public boolean checkSalesVoucherVATEntryPageInfoSideBarOtherDashletsOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(otherDashlets));
		
		otherDashlets.click();
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentInfo));
		
		boolean DocumentInfoInOtherDashletsOption       =documentInfo.isDisplayed();
		
		String actDocumentInfoInOtherDashletsOption=Boolean.toString(DocumentInfoInOtherDashletsOption);
		
		String expDocumentInfoInOtherDashletsOption       =excelReader.getCellData("SmokeSalesInvoiceVAT", 31, 7);
		
		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 31, 8, actDocumentInfoInOtherDashletsOption.toUpperCase());
		
	
		System.out.println("***************************************** checkSalesVoucherNewEntryPageInfoSideBarOtherDashletsOption  *****************************************");
		System.out.println("Entry Page Open Info Side Other Dashlets Value Actual  : "+actDocumentInfoInOtherDashletsOption               +" Value Expected : "+expDocumentInfoInOtherDashletsOption);

		
		if(actDocumentInfoInOtherDashletsOption.equalsIgnoreCase(expDocumentInfoInOtherDashletsOption))
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 30, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 30, 9, resFail);
			return false;
		}
	}
		

	public boolean checkSalesVoucherVATEntryPageInfoSideBarSearch() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeSearchTxt));
		customizeSearchTxt.click();
	    customizeSearchTxt.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVAT", 33, 6));
	   
	    Thread.sleep(2000);
	  
	    customizeSearchTxt.sendKeys(Keys.TAB);
	   
	     
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchDocumentInfo));
		
		boolean SearchDocumentInfo       =searchDocumentInfo.isDisplayed();
		
		String actSearchDocumentInfo=Boolean.toString(SearchDocumentInfo);
		
		String expSearchDocumentInfo       =excelReader.getCellData("SmokeSalesInvoiceVAT", 34, 7);
		
		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 34, 8, actSearchDocumentInfo.toUpperCase());
		
	
		System.out.println("***************************************** checkPurchaseVoucherNewEntryPageInfoSideBarSearch  *****************************************");
		System.out.println("Entry Page Open Info Side Search Info Value Actual  : "+actSearchDocumentInfo               +" Value Expected : "+expSearchDocumentInfo);

		
		if(actSearchDocumentInfo.equalsIgnoreCase(expSearchDocumentInfo))
		{
			System.out.println("Test Pass : Search Txt is  Displayed");
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 32, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Search Txt NOT Displayed");
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 32, 9, resFail);
			return false;
		}
	}
	
	
	
		
	
	
	
	public boolean checkSalesVoucherVATInfoPanelDashlet() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\infoPanels.exe");
		
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addCreateDashlet));
		
		boolean AddCreateDashlet          = addCreateDashlet.isDisplayed();
		
		String actAddCreateDashlet        = Boolean.toString(AddCreateDashlet);
		
		String  expAddCreateDashlet       = excelReader.getCellData("SmokeSalesInvoiceVAT", 36, 7);
		
		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 36, 8, actAddCreateDashlet.toUpperCase());
		
	
		System.out.println("***************************************** checkSalesVoucherNewInfoPanelDashlet  *****************************************");
		System.out.println("Entry Page Open Info Side Add Create Dashlet Value Actual  : "+actAddCreateDashlet               +" Value Expected : "+expAddCreateDashlet);

		
		
		if(actAddCreateDashlet.equalsIgnoreCase(expAddCreateDashlet))
		{
			System.out.println("Test Pass :Other Info Pannel  Are Displayed");
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 35, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Other Info Pannel NOT Displayed");
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 35, 9, resFail);
			return false;
		}
	}
	
	
		
	
	
	public boolean checkSalesVoucherVATSaveInfoPanelDashlet() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeSaveBtn));
		
		customizeSaveBtn.click();
			
		String expSaveInfoPanelMessage       =excelReader.getCellData("SmokeSalesInvoiceVAT", 38, 7);
		
		String validationMessage=checkValidationMessage(expSaveInfoPanelMessage);
		
		
		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 38, 8, validationMessage);
		
		System.out.println("***************************************** checkSalesVoucherNewSaveInfoPanelDashlet  *****************************************");
		System.out.println("Entry Page Open Info Side New Save Value Actual  : "+validationMessage+" Value Expected : "+expSaveInfoPanelMessage);	
		
		if(validationMessage.equalsIgnoreCase(expSaveInfoPanelMessage))
		{
			System.out.println("Test Pass : Error Message Is As Expected");
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 37, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Error Message Is NOT As Expected");
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 37, 9, resFail);
			return false;
		}	
	}
	



	public boolean checkSalesVoucherVATDateFieldLessThanCompanyAccountingDate() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();

		documentNumberTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();
		
		dateTxt.sendKeys(Keys.END);
		
		dateTxt.sendKeys(Keys.BACK_SPACE);
		Thread.sleep(2000);
		dateTxt.sendKeys(Keys.BACK_SPACE);
		
		String expSaveDateValidationMessage       =excelReader.getCellData("SmokeSalesInvoiceVAT", 40, 7);
		
				
		String validationMessage=checkValidationMessage(expSaveDateValidationMessage);
		
		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 40, 8, validationMessage);
		
		System.out.println("*********************************************** checkPurchaseVoucherNewDateFieldLessThanCompanyAccountingDate  ********************************************");
		System.out.println("Entry Page Change to Voucher Date To Less Than Accounting Date Value Actual  : "+validationMessage+" Value Expected : "+expSaveDateValidationMessage);	
		
		
		
		if(validationMessage.equalsIgnoreCase(expSaveDateValidationMessage) )
		{
			System.out.println("Test Pass : Error Message Is As Expected");
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 39, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Error Message Is NOT As Expected");
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 39, 9, resFail);
			return false;
		}	
	}
	
		
	
		
	//Mandartory Checking
	

		public boolean checkSalesVoucherVATSaveWithoutMandatoryFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			
			String expSaveMandatoryWithNoInputValidationMessage       =excelReader.getCellData("SmokeSalesInvoiceVAT", 42, 7);
			
			
			String actSaveMandatoryWithNoInputValidationMessage=checkValidationMessage(expSaveMandatoryWithNoInputValidationMessage);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 42, 8, actSaveMandatoryWithNoInputValidationMessage);
			
			
			System.out.println("*********************************************** checkSalesVoucherNewSaveWithoutMandatoryFields  ********************************************");
			System.out.println("Entry Page Save with No Mandatory Input Value Actual  : "+actSaveMandatoryWithNoInputValidationMessage  +" Value Expected : "+expSaveMandatoryWithNoInputValidationMessage);	
			
			if(actSaveMandatoryWithNoInputValidationMessage.equalsIgnoreCase(expSaveMandatoryWithNoInputValidationMessage))
			{
			
				System.out.println("Test Pass : Error Message Displayed");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 41, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail :Error Message is Not Displayed");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 41, 9, resFail);
				return false;
			}
		}

		@FindBy(xpath="//tbody[@id='id_header_3_table_body']/tr")
		private static List<WebElement> salesAccountListCount; 

	    @FindBy(xpath="//tbody[@id='id_header_4_table_body']/tr/td[2]")
		private static List<WebElement> customerAccountListCount; 
		

	   public boolean checkSalesVoucherVATCustomerOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	   {
			
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			customerAccountTxt.click();
			
			customerAccountTxt.sendKeys(Keys.SPACE);
			
			
	        int actCustomerCount = customerAccountListCount.size();
			
	        
	        System.err.println("actCustomerCount  : "+actCustomerCount);
	        
			ArrayList<String> customerListCountArray = new ArrayList<String>();
			 
			for(int i=0;i<actCustomerCount;i++)
			{
				
				String data=customerAccountListCount.get(i).getText();
				
				customerListCountArray.add(data);
			}
			
			 
			String actCustomerList=customerListCountArray.toString();
			
			String expCustomerList =excelReader.getCellData("SmokeSalesInvoiceVAT", 44, 7);
			
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 44, 8, actCustomerList);
			
			System.out.println("********************************************* checkSalesVoucherCustomerOptions  ********************************************************");
		    System.err.println("Entry Page Warehouse Masters Value Actual  : "+ actCustomerList +"  Value Expected : "+expCustomerList);
			    
		   if(actCustomerList.equalsIgnoreCase(expCustomerList))
			{
				System.out.println("Test Pass : All Customer Account Fileds are Displayed  ");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 43, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : All Customer Account Fileds are Displayed");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 43, 9, resFail);
				return false;
			}
			
		}




	public boolean checkSettingPlaceofSupplyForCustomerUpdateInPSalesInvoiceVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		try
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			
			int customercount=customerAccountListCount.size();
			
			System.err.println(customercount);
			
			for(int i=0 ; i < customercount ;i++)
			{
				String data=customerAccountListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("SmokeSalesInvoiceVAT", 45, 6)))
				{
					customerAccountListCount.get(i).click();
					
					break;
				}
			}
			
			customerAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			customerAccountTxt.click();
			
			customerAccountTxt.sendKeys(Keys.CONTROL + "e");
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vatSettingsTab));
			vatSettingsTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterplaceofSupplyTxt));
			masterplaceofSupplyTxt.click();
			masterplaceofSupplyTxt.sendKeys(Keys.END);
			masterplaceofSupplyTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			masterplaceofSupplyTxt.sendKeys(Keys.SPACE);
			
			int masterPlaceOfSupplyListCount=masterPlaceOfSupplyList.size();
			
			System.err.println(masterPlaceOfSupplyListCount);
			
			for(int i=0 ; i < masterPlaceOfSupplyListCount ;i++)
			{
				String data=masterPlaceOfSupplyList.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("SmokeSalesInvoiceVAT", 46, 6)))
				{
					masterPlaceOfSupplyList.get(i).click();
					
					break;
				}
			}
			
			masterplaceofSupplyTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(account_saveBtn));
			account_saveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_newBtn));
			new_newBtn.click();
			
			getWaitForAlert();
			
			getAlert().accept();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			customerAccountTxt.click();
			customerAccountTxt.sendKeys(Keys.END);
			customerAccountTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			customerAccountTxt.sendKeys(Keys.SPACE);
			
			
			for(int i=0 ; i < customercount ;i++)
			{
				String data=customerAccountListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("SmokeSalesInvoiceVAT", 45, 6)))
				{
					customerAccountListCount.get(i).click();
					
					break;
				}
			}
			
			customerAccountTxt.sendKeys(Keys.TAB);
	
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
			String actplaceofSupplyTxt = salesInvoiceVATPlaceOFSupply.getAttribute("value");
			String expplaceofSupplyTxt = excelReader.getCellData("SmokeSalesInvoiceVAT", 46, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 46, 8, actplaceofSupplyTxt);
			
			
			System.out.println("placeofSupplyTxt Actual   : "+actplaceofSupplyTxt);
			System.out.println("placeofSupplyTxt Expected : "+expplaceofSupplyTxt);
			
			if(actplaceofSupplyTxt.equalsIgnoreCase(expplaceofSupplyTxt)) 
			{
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 45, 9, resPass);
				System.out.println("Test Pass :Department Screen Displayed");
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 45, 9, resFail);
				System.out.println("Test Fail : Department Screen NOT Displayed");
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "SmokeSalesInvoiceVAT", 429, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
	   	 	return false;
		}
    }

		
	
	
	  public boolean checkSalesVoucherVATSaveWithCustomerInput() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	   {
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			
	        String expSaveMandatoryWithCustomerInputValidationMessage       =excelReader.getCellData("SmokeSalesInvoiceVAT", 48, 7);
			
			
			String actSaveMandatoryWithCustomerInputValidationMessage=checkValidationMessage(expSaveMandatoryWithCustomerInputValidationMessage);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 48, 8, actSaveMandatoryWithCustomerInputValidationMessage);
			
			
			
			System.out.println("*********************************************** checkSalesVoucherNewSaveWithoutMandatoryFields  ********************************************");
			System.out.println("Entry Page Save with No Mandatory Input Value Actual  : "+actSaveMandatoryWithCustomerInputValidationMessage  +" Value Expected : "+expSaveMandatoryWithCustomerInputValidationMessage);	
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoSideBarMinimizeExpandBtn));
			infoSideBarMinimizeExpandBtn.click();
			
			
			if(actSaveMandatoryWithCustomerInputValidationMessage.equalsIgnoreCase(expSaveMandatoryWithCustomerInputValidationMessage))
			{
			
			
				System.out.println("Test Pass : Error Message Displayed");
				
				
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 47, 9, resPass);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_newBtn));
				new_newBtn.click();
				
				getWaitForAlert();
				
				getAlert().accept();
				
				return true;
			}
			else
			{
				System.out.println("Test Fail : Error Message is Not Displayed ");
				
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 47, 9, resFail);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
				errorMessageCloseBtn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_newBtn));
				new_newBtn.click();
				
				getWaitForAlert();
				
				getAlert().accept();
				
				return false;
			}
		}
		


	      //Credit Days of Customer to Test Due Date (Customer with 0 Credit Days)
		   
		 public boolean checkDueDateOptionForCustomerAccountCreditDaysAs0() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
		    excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			customerAccountTxt.click();
			customerAccountTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			customerAccountTxt.sendKeys(Keys.BACK_SPACE);
			customerAccountTxt.sendKeys(Keys.SPACE);
			
			
			
			int customercount=customerAccountListCount.size();
			
			System.err.println(customercount);
			
			for(int i=0 ; i < customercount ;i++)
			{
				String data=customerAccountListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("SmokeSalesInvoiceVAT", 50, 6)))
				{
					customerAccountListCount.get(i).click();
					
					break;
				}
			}
			
			customerAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderDueDate));
			voucherHeaderDueDate.click();

	        String actdata=dateTxt.getAttribute("value");
			 
	        String expdata=voucherHeaderDueDate.getAttribute("value");
	        
	        
	        excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 51, 8, actdata);
	        
	        excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 51, 7, expdata);
	        
	    	System.out.println("*********************************************** checkSalesVoucherNewCustomer with 0 Credit Days  ********************************************");
			System.out.println("Entry Page Input Customer with 0 credit Days  : "+actdata  +" Value Expected : "+expdata);	
		

			if(actdata.equalsIgnoreCase(expdata))
			{
				System.out.println("Test Pass : Date Displayed as Current Date ");
				
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 49, 9, resPass);
				
				return true;
			}
			else
			{
				System.out.println("Test Fail : Date Displayed as Current Date");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 49, 9, resFail);
				return false;
			}
			   
		}



		// Credit Days checking with selecting credit days as 4
		 public boolean checkDueDateOptionForCustomerAccountAsCustomerDisplayCDForEachAccountThreeCreditDays4() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
		    excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			customerAccountTxt.click();
			customerAccountTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			customerAccountTxt.sendKeys(Keys.BACK_SPACE);
			customerAccountTxt.sendKeys(Keys.SPACE);
			
			int customercount=customerAccountListCount.size();
			
			System.err.println(customercount);
			
			for(int i=0 ; i < customercount ;i++)
			{
				String data=customerAccountListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("SmokeSalesInvoiceVAT", 53, 6)))
				{
					customerAccountListCount.get(i).click();
					
					break;
				}
			}
			
			customerAccountTxt.sendKeys(Keys.TAB);
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderDueDate));
			voucherHeaderDueDate.click();
		
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		    Date date=new Date();
		    System.out.println(df.format(date));
		   
		    String docdate = df.format(date);  
		    
			Calendar c = Calendar.getInstance();
		
			c.add(Calendar.DAY_OF_MONTH, 4);  
		
			String actCustomerDueDate = df.format(c.getTime());  
		
			String expCustomerDueDate=voucherHeaderDueDate.getAttribute("value");
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 54, 8, actCustomerDueDate);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 54, 8, expCustomerDueDate);
			
			
		 	System.out.println("*********************************************** checkSalesVoucherNewCustomer with 4 Credit Days  ********************************************");
			System.out.println("Entry Page Input Customer with 4 credit Days  : "+actCustomerDueDate  +" Value Expected : "+expCustomerDueDate);	

		
			if (actCustomerDueDate.equalsIgnoreCase(expCustomerDueDate)) 
			{
				System.out.println("Test Pass: Due Date is As Expected " );
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 52, 9, resPass);
				return  true;
			}
			else
			{
				System.out.println("Test Fail: Due Date is As Expected " );
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 52, 9, resFail);
				return  false;
			}	
		}
	 

				

		
		// Credit Days for the Customer equal to 3
		public boolean checkDueDateOptionForCustomerAccountAsCustomerUpdateCreditDays3() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
		    excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			customerAccountTxt.click();
			customerAccountTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			customerAccountTxt.sendKeys(Keys.BACK_SPACE);
			customerAccountTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			customerAccountTxt.sendKeys(Keys.BACK_SPACE);
			
			customerAccountTxt.sendKeys(Keys.SPACE);
			
			int customercount=customerAccountListCount.size();
			
			System.err.println(customercount);
			
			for(int i=0 ; i < customercount ;i++)
			{
				String data=customerAccountListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("SmokeSalesInvoiceVAT", 56, 6)))
				{
					
					Thread.sleep(2000);
					customerAccountListCount.get(i).click();
					Thread.sleep(2000);
					
					break;
				}
			}
			
			customerAccountTxt.sendKeys(Keys.TAB);
			
			
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderDueDate));
			voucherHeaderDueDate.click();

			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		    Date date=new Date();
		    System.out.println(df.format(date));
		   
		    String docdate = df.format(date);  
		    
			Calendar c = Calendar.getInstance();

			c.add(Calendar.DAY_OF_MONTH, 3);  
		
			String actCustomerDueDate = df.format(c.getTime());  
			String expCustomerDueDate=voucherHeaderDueDate.getAttribute("value");
		
			
	        excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 57, 8, actCustomerDueDate);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 57, 8, expCustomerDueDate);
			
			
			
			System.out.println("*********************************************** checkSalesVoucherNewCustomer with 3 Credit Days  ********************************************");
			System.out.println("Entry Page Input Customer with 4 credit Days  : "+actCustomerDueDate  +" Value Expected : "+expCustomerDueDate);	
		
		
			
			
			if (actCustomerDueDate.equalsIgnoreCase(expCustomerDueDate)) 
			{
				System.out.println("Test Pass: Due Date is As Expected " );
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 55, 9, resPass);
				return  true;
			}
			else
			{
				System.out.println("Test Fail: Due Date is As Expected " );
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 555, 9, resPass);
				return  false;
			}
		}



	     //Currency and Warehouse and Department
		
		
		 
		public boolean checkCurrencyOptioninSalesInvoiceVAT() throws EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
			voucherHeaderCurrency.click();
			voucherHeaderCurrency.sendKeys(Keys.SHIFT,Keys.HOME);
			voucherHeaderCurrency.sendKeys(Keys.SPACE);	
			
			ArrayList<String>  actvoucherHeaderCurrency= new ArrayList<String>(); 
			
	        int count=currencyListCount.size();
			
			System.err.println(count);
			
			for(int i=0 ; i < count ;i++)
			{
				String data=currencyListCount.get(i).getText();
				System.err.println("IN FOR LOOP : "+data);
				actvoucherHeaderCurrency.add(data);
				
			}
			
			System.err.println(actvoucherHeaderCurrency);
			
			voucherHeaderCurrency.sendKeys(Keys.TAB);
			
			String actCurrencyList=actvoucherHeaderCurrency.toString();
			
			String expCurrencyList=excelReader.getCellData("SmokeSalesInvoiceVAT", 59, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 59, 8, actCurrencyList);
			
			if(actCurrencyList.equalsIgnoreCase(expCurrencyList))
			{
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 58, 9, resPass);
				return true;
			}
			else
			{
				
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 58, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "SmokeSalesInvoiceVAT", 58, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
	   	 	return false;
		}
	}
			

			
		 
	
	
		public boolean checkSalesVoucherVATVouchersEntryPageNew() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			documentNumberTxt.click();
			documentNumberTxt.clear();
			documentNumberTxt.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVAT", 61, 6));
			documentNumberTxt.sendKeys(Keys.TAB);
			
			String actdata=documentNumberTxt.getAttribute("value");
			String expdata="2";
			
			System.out.println("Test Pass : Entered 2 in DOC NO");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_newBtn));
			new_newBtn.click();
			
			Thread.sleep(2000);
			
			getWaitForAlert();
			
			String actdata1=getAlert().getText();
			String expdata0=excelReader.getCellData("SmokeSalesInvoiceVAT", 62, 7);
			String expdata1=excelReader.getCellData("SmokeSalesInvoiceVAT", 63, 7);
			
			System.out.println(actdata1);
			
			getAlert().accept();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String actDocNo=documentNumberTxt.getAttribute("value");
			String expDocNo=excelReader.getCellData("SmokeSalesInvoiceVAT", 64, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 64, 8, actDocNo);

			
			if(actdata.equalsIgnoreCase(expdata) && actdata1.startsWith(expdata0) && actdata1.endsWith(expdata1) && actDocNo.equalsIgnoreCase(expDocNo))
			{
				System.out.println("Test Pass : DOC NO is 1");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 60, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail :DOC No is 1");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 60, 9, resFail);
				return false;
			}
			
		}
		
			

		 
		public boolean checkSalesVoucherVATWithCurrencyInputINR() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderDueDate));
			voucherHeaderDueDate.click();
			voucherHeaderDueDate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
			voucherHeaderCurrency.sendKeys(Keys.SPACE);
			
			
			int currencycount=currencyListCount.size();
			
			System.err.println(currencycount);
				
			for(int i=0 ; i < currencycount ;i++)
			{
				String data=currencyListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("SmokeSalesInvoiceVAT", 66, 6)))
				{
					currencyListCount.get(i).click();
					
					break;
				}
			}
				
			voucherHeaderCurrency.sendKeys(Keys.TAB);
			
			String actExchangeRate=voucherHeaderExchangeRate.getAttribute("value");
			String expExchangeRate=excelReader.getCellData("SmokeSalesInvoiceVAT", 67, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 69, 8, actExchangeRate);

			System.out.println("*********************************************** checkPurchaseVoucherNewWithCurrencyInputAndExcgRate  ********************************************");
			System.out.println("Entry Page Exchange Rate Value Actual  : "+actExchangeRate  +" Value Expected : "+expExchangeRate);	
			
			
			
			if (actExchangeRate.equalsIgnoreCase(expExchangeRate))
			{
				System.out.println("Test Pass : Exchange Rate Displayed");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 65, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Exchange Rate is Not Displayed ");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 65, 9, resFail);
				return false;
			}	
	 
		}
			
			
			

		public boolean checkExchangeRateWithCurrencyWithAED() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			voucherHeaderDueDate.click();
			voucherHeaderDueDate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
			
			voucherHeaderCurrency.sendKeys(Keys.SPACE);
				
			int currencycount=currencyListCount.size();
			
			System.err.println(currencycount);
				
			for(int i=0 ; i < currencycount ;i++)
			{
				String data=currencyListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("SmokeSalesInvoiceVAT", 69, 6)))
				{
					currencyListCount.get(i).click();
					
					break;
				}
			}
				
			voucherHeaderCurrency.sendKeys(Keys.TAB);
			
			
			voucherHeaderExchangeRate.click();
				
			String actSelectionAEDExchangeRate=voucherHeaderExchangeRate.getAttribute("value");
			String expSelectionAEDExchangeRate=excelReader.getCellData("SmokeSalesInvoiceVAT", 70, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 70, 8, actSelectionAEDExchangeRate);
			
			
			System.out.println("*********************************************** checkExchangeRateWithCurrencyWithAED  ********************************************");
			System.out.println("Entry Page AED Selection Exchange Rate Value Actual  : "+actSelectionAEDExchangeRate  +" Value Expected : "+expSelectionAEDExchangeRate);	
			
		
					
			if (actSelectionAEDExchangeRate.equalsIgnoreCase(expSelectionAEDExchangeRate) )
		   {
				System.out.println("Test Pass : Exchange Rate Is Updated ");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 68, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail :  Exchange Rate Is  NOt Updated ");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 68, 9, resFail);
				return false;
			}	
		}
		
			
			

		public boolean checkExchangeRateWithCurrencyWithUSD() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			voucherHeaderDueDate.click();
			voucherHeaderDueDate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
			
			voucherHeaderCurrency.sendKeys(Keys.SPACE);
				
			int currencycount=currencyListCount.size();
			
			System.err.println(currencycount);
				
			for(int i=0 ; i < currencycount ;i++)
			{
				String data=currencyListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("SmokeSalesInvoiceVAT", 72, 6)))
				{
					currencyListCount.get(i).click();
					
					break;
				}
			}
				
			voucherHeaderCurrency.sendKeys(Keys.TAB);
			
			
			voucherHeaderExchangeRate.click();
			
			String actSelectionUSDExchangeRate=voucherHeaderExchangeRate.getAttribute("value");
			String expSelectionUSDExchangeRate=excelReader.getCellData("SmokeSalesInvoiceVAT", 73, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 73, 8, actSelectionUSDExchangeRate);

			
			
			System.out.println("*********************************************** checkExchangeRateWithCurrencyWithUSD  ********************************************");
			System.out.println("Entry Page USD Selection Exchange Rate Value Actual  : "+actSelectionUSDExchangeRate  +" Value Expected : "+expSelectionUSDExchangeRate);	
			
		
					
			if (actSelectionUSDExchangeRate.equalsIgnoreCase(expSelectionUSDExchangeRate) )		
			{
				System.out.println("Test Pass : Exchange Rate Is Updated ");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 71, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail :  Exchange Rate Is  NOt Updated ");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 71, 9, resFail);
				return false;
			}	
		}
		
		 
		public boolean checkSalesVoucherNewDepartment() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			
			departmentTxt.sendKeys(Keys.SPACE);
			
			
			WebElement options=departmentTxt;
			
			ArrayList<String> actDepartmentList= new ArrayList<String>(); 
		
			int count=departmentListCount.size();
			
			System.err.println(count);
			
			for(int i=0 ; i < count ;i++)
			{
				String data=departmentListCount.get(i).getText();
				System.err.println("IN FOR LOOP : "+data);
				actDepartmentList.add(data);
				
			}
			
			System.err.println(actDepartmentList);
			
			
			System.out.println("actDepartmentList"+actDepartmentList);
			
			
			String actDepartmentValue=actDepartmentList.toString();
			String expDepartmentValue="[AMERICA, DUBAI, INDIA, WALES]";
			
	        excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 75, 8, actDepartmentValue);
			System.out.println("*********************************************** checkSalesVoucherNewDepartment  ********************************************");
			System.out.println("Entry Page Department Value Actual  : "+actDepartmentValue  +" Value Expected : "+expDepartmentValue);	
			
			
		   if(actDepartmentValue.equalsIgnoreCase(expDepartmentValue))
		   {
			   System.out.println("Test Pass :Department OPtions  Displayed");
			   excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 74, 9, resPass);
			   return true;
		   }
		   else
		   {
			   System.out.println("Test Fail : Department OPtions  Displayed");
			   excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 74, 9, resFail);
			   return false;
		   }
		}
		 
	 
		public boolean checkSalesExchangeRateAndLocalExchangeRatewithCurrencyAED() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			voucherHeaderDueDate.click();
			voucherHeaderDueDate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
			
			voucherHeaderCurrency.sendKeys(Keys.SPACE);
				
			int currencycount=currencyListCount.size();
			
			System.err.println(currencycount);
				
			for(int i=0 ; i < currencycount ;i++)
			{
				String data=currencyListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("SmokeSalesInvoiceVAT", 77, 6)))
				{
					currencyListCount.get(i).click();
					
					break;
				}
			}
				
			voucherHeaderCurrency.sendKeys(Keys.TAB);
			
			
			voucherHeaderExchangeRate.click();
			
			String actExchangeRate=voucherHeaderExchangeRate.getAttribute("value");
			String expExchangeRate=excelReader.getCellData("SmokeSalesInvoiceVAT", 78, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 78, 8, actExchangeRate);

			
			String actLocExchangeRate=voucherHeaderLocalExchangeRate.getAttribute("value");
			String expLocExchangeRate="1.0000000000";excelReader.getCellData("SmokeSalesInvoiceVAT", 79, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 79, 8, actLocExchangeRate);

			
			

			System.out.println("*********************************************** checkSalesExchangeRateAndLocalExchangeRatewithCurrencyAED  ********************************************");
			System.out.println("Entry Page Exchange and Local Exchnage Rate Value Actual  : "+actExchangeRate  +" Value Expected : "+expExchangeRate);	
			System.out.println("Entry Page Exchange and Local Exchnage Rate Value Actual  : "+actLocExchangeRate  +" Value Expected : "+expLocExchangeRate);
			
			if (actExchangeRate.equalsIgnoreCase(expExchangeRate) && actLocExchangeRate.equalsIgnoreCase(expLocExchangeRate) )
			{
				System.out.println("Test Pass : Exchange Rate Is Updated ");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 76, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail :  Exchange Rate Is  NOt Updated ");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 76, 9, resFail);
				return false;
			}	
		}
	 
	 
		public boolean checkSalesExchangeRateAndLocalExchangeReatewithCurrencyUSD() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			voucherHeaderDueDate.click();
			voucherHeaderDueDate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
			
			voucherHeaderCurrency.sendKeys(Keys.SPACE);
				
			int currencycount=currencyListCount.size();
			
			System.err.println(currencycount);
				
			for(int i=0 ; i < currencycount ;i++)
			{
				String data=currencyListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("SmokeSalesInvoiceVAT", 81, 6)))
				{
					currencyListCount.get(i).click();
					
					break;
				}
			}
				
			voucherHeaderCurrency.sendKeys(Keys.TAB);
			
			
			voucherHeaderExchangeRate.click();
			
			String actExchangeRate=voucherHeaderExchangeRate.getAttribute("value");
			String expExchangeRate=excelReader.getCellData("SmokeSalesInvoiceVAT", 82, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 82, 8, actExchangeRate);
			
			String actLocExchangeRate=voucherHeaderLocalExchangeRate.getAttribute("value");
			String expLocExchangeRate=excelReader.getCellData("SmokeSalesInvoiceVAT", 83, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 83, 8, actLocExchangeRate);
			

			

			System.out.println("*********************************************** checkSalesExchangeRateAndLocalExchangeRatewithCurrencyUSD  ********************************************");
			System.out.println("Entry Page Exchange and Local Exchnage Rate Value Actual  : "+actExchangeRate  +" Value Expected : "+expExchangeRate);	
			System.out.println("Entry Page Exchange and Local Exchnage Rate Value Actual  : "+actLocExchangeRate  +" Value Expected : "+expLocExchangeRate);
			
			if (actExchangeRate.equalsIgnoreCase(expExchangeRate) && actLocExchangeRate.equalsIgnoreCase(expLocExchangeRate) )
			{
			
				System.out.println("Test Pass : Exchange Rate Is Updated ");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 80, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail :  Exchange Rate Is  NOt Updated ");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 80, 9, resFail);
				return false;
			}	
		}
			

		public boolean checkSalesExchangeRateAndLocalExchangeReatewithCurrencyINR() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
		  
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			voucherHeaderDueDate.click();
			voucherHeaderDueDate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
			
			voucherHeaderCurrency.sendKeys(Keys.SPACE);
				
			int currencycount=currencyListCount.size();
			
			System.err.println(currencycount);
				
			for(int i=0 ; i < currencycount ;i++)
			{
				String data=currencyListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("SmokeSalesInvoiceVAT", 85, 6)))
				{
					currencyListCount.get(i).click();
					
					break;
				}
			}
				
			voucherHeaderCurrency.sendKeys(Keys.TAB);
			
			
			voucherHeaderExchangeRate.click();
				
			String actExchangeRate=voucherHeaderExchangeRate.getAttribute("value");
			String expExchangeRate=excelReader.getCellData("SmokeSalesInvoiceVAT", 86, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 86, 8, actExchangeRate);
			
			String actLocExchangeRate=voucherHeaderLocalExchangeRate.getAttribute("value");
			String expLocExchangeRate=excelReader.getCellData("SmokeSalesInvoiceVAT", 87, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 87, 8, actLocExchangeRate);
			
			System.out.println("*********************************************** checkSalesExchangeRateAndLocalExchangeRatewithCurrencyINR  ********************************************");
			System.out.println("Entry Page Exchange and Local Exchnage Rate Value Actual  : "+actExchangeRate  +" Value Expected : "+expExchangeRate);	
			System.out.println("Entry Page Exchange and Local Exchnage Rate Value Actual  : "+actLocExchangeRate  +" Value Expected : "+expLocExchangeRate);
			
			if (actExchangeRate.equalsIgnoreCase(expExchangeRate) && actLocExchangeRate.equalsIgnoreCase(expLocExchangeRate) )
			{
				System.out.println("Test Pass : Exchange Rate Is Updated ");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 84, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail :  Exchange Rate Is  NOt Updated ");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 84, 9, resFail);
				return false;
			}	
		}
	 
		 




		public boolean checkSalesInvoiceVATCloseOptionInEntryPage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
			Thread.sleep(3000);
						
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			
			getWaitForAlert();
			
			String actdata=getAlert().getText();
			String expdata0=excelReader.getCellData("SmokeSalesInvoiceVAT", 89, 7);
			
			
			String expdata1=excelReader.getCellData("SmokeSalesInvoiceVAT", 90, 7);
			
			
			System.out.println("*********************************************** checkSalesInvoiceNewCloseOptionInEntryPage  ********************************************");
			System.out.println("Entry Page Close Option Alert Message Value Actual  : "+actdata  +" Value Expected : "+expdata0+expdata1);	
			
	          excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 89, 8, expdata0);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 90, 8, expdata1);
			


			if(actdata.startsWith(expdata0) && actdata.endsWith(expdata1))
			{
				getAlert().accept();
				
				System.out.println("Test Pass : Alert Displayed");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 88, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Alert NOT Displayed");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 88, 9, resFail);
				return false;
			}
		}




		
		public boolean checkSavingSalesVoucherVATWithEmptyRows() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{	
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkUserFriendlyMessage();
			
			
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			 customerAccountTxt.click();
			 customerAccountTxt.sendKeys(Keys.SPACE);
			 
			 int customercount=customerAccountListCount.size();
			 
			 System.err.println(customercount);
			 
			 for(int i=0 ; i < customercount ;i++)
			 {
				 String data=customerAccountListCount.get(i).getText();
				 
				 if(data.equalsIgnoreCase(excelReader.getCellData("SmokeSalesInvoiceVAT", 91, 6)))
				 {
					 customerAccountListCount.get(i).click();
					 
					 break;
				 }
			 }
				
			 customerAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
				
			int departmentcount=departmentListCount.size();
			
			System.err.println(departmentcount);
				
			for(int i=0 ; i < departmentcount ;i++)
			{
				String data=departmentListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("SmokeSalesInvoiceVAT", 92, 6)))
				{
					departmentListCount.get(i).click();
					
					break;
				}
			}
				
			departmentTxt.sendKeys(Keys.TAB);	
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();

			String expValidationMessage=excelReader.getCellData("SmokeSalesInvoiceVAT", 92, 7);
			
			String emptyRowsMessage=checkValidationMessage(expValidationMessage);

			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 92, 8, emptyRowsMessage);
			

			System.out.println("*********************************************** checkSavingSalesVoucherNewWithEmptyRows  ********************************************");
			System.out.println("Entry Page Save Without Body Rows Message Value Actual  : "+emptyRowsMessage+" Value Expected : "+expValidationMessage);	
			
			
			if (emptyRowsMessage.equalsIgnoreCase(expValidationMessage))
			{
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 91, 9, resPass);
				return true;
			} 
			else 
			{
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 91, 9, resFail);
				return false;
			}
		}
	 



		@FindBy(xpath="//*[@id='id_body_12_table_body']/tr/td[2]")
	    private static List<WebElement> bodySalesAccountList;

		@FindBy(xpath="//input[@id='id_body_16777333']")
	    private static WebElement enterTaxcode;

		
		@FindBy(xpath="//input[@id='id_body_33554499']")
		private static WebElement  enter_VAT;
		
		@FindBy(xpath="//input[@id='id_body_33554500']")
		private static WebElement  enter_Taxable;
		
		 @FindBy(xpath="//input[@id='id_body_33554474']")
	     private static WebElement enter_AvgRate;
		 
		 @FindBy(xpath="//input[@id='id_body_33554475']")
	     private static WebElement enter_AvgRateo;
		
		 @FindBy(xpath="//input[@id='id_body_33554476']")
	     private static WebElement enter_AQTxt;
		 
		 @FindBy(xpath="//input[@id='id_body_33554477']")
	     private static WebElement enter_FQTxt;
		 
		 @FindBy(xpath="//input[@id='id_body_33554478']")
	     private static WebElement enter_RDTxt;
		
		
		 @FindBy(xpath="//tbody[@id='id_body_536870916_table_body']/tr/td[2]")
		 private static List<WebElement> pvwareHouseListCount;
		
		
		 
		public boolean checkQtyPreLoadByInputAQFQInFirstRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
			pvWareHouseTxt.sendKeys(Keys.SPACE);
			
			int pvWareHouseTxtCount=pvwareHouseListCount.size();
			
			System.err.println(pvWareHouseTxtCount);
			
			for(int i=0 ; i < pvWareHouseTxtCount ;i++)
			{
				String data=pvwareHouseListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("SmokeSalesInvoiceVAT", 93, 6)))
				{
					pvwareHouseListCount.get(i).click();
					
					break;
				}
			}
			
			pvWareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.END);
			enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemcount1=itemListCount.size();
			
			System.err.println(itemcount1);
				
			for(int i=0 ; i < itemcount1 ;i++)
			{
				String data=itemListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("SmokeSalesInvoiceVAT", 95, 6)))
				{
					itemListCount.get(i).click();
					
					break;
				}
			}
				
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			select1stRow_8thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
			enter_AQTxt.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVAT", 97, 6));
			enter_AQTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
			enter_FQTxt.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVAT", 98, 6));
			enter_FQTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
			select1stRow_11thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
			String actQtyPreload=select1stRow_11thColumn.getText();
			String expQtyPreload=excelReader.getCellData("SmokeSalesInvoiceVAT", 99, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 99, 8, actQtyPreload);
			
			
			System.out.println("*********************************************** checkQtyPreLoadByInputAQFQInFirstRow  ********************************************");
			System.out.println("Entry Page Check Qty Preload Value Actual  : "+actQtyPreload  +" Value Expected : "+expQtyPreload);	

		
			if( actQtyPreload.equalsIgnoreCase(expQtyPreload) )
			{
				System.out.println("Test Pass : Qty Preload Value is displaying Correct");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 93, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Qty Preload Value is displaying Wrong");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 93, 9, resFail);
				return false;
			}
		}
			
		
		@FindBy(xpath="//input[@id='id_body_89']")
		private static WebElement enter_QuantityToRelease;

		
		public boolean checkVoucherFirstRowInputValues() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
				
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			select1stRow_8thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
			enter_AQTxt.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVAT", 100, 6));
			enter_AQTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
			enter_FQTxt.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVAT", 101, 6));
			enter_FQTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
			select1stRow_11thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("100");
			enter_Quantity.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
			String actQtyPreload=select1stRow_11thColumn.getText();
			String expQtyPreload=excelReader.getCellData("SmokeSalesInvoiceVAT", 100, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 100, 8, actQtyPreload);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
			select1stRow_14thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.click();
			enter_Gross.sendKeys(Keys.TAB);
			
			int voucherGridBodyListCount = voucherGridBodyList.size();
			  
			ArrayList<String> voucherGridBodyListArray = new ArrayList<String>();
			  
			for(int i=0;i<voucherGridBodyListCount;i++)
			{
				String data = voucherGridBodyList.get(i).getText();
				voucherGridBodyListArray.add(data);
			}	
			
			String actvoucherGridBodyList=voucherGridBodyListArray.toString();
			
			String expvoucherGridBodyList="[1, HYDERABAD, BR COGS ITEM, Std Rate, Sales - Computers, Pcs, 0.00, 0.00, 50.00, 50.00, 0, 100.00, , 0.00, 10.00, 1,000.00, , 0.00, 1000.00, , , , , 2, , , , , , , , , , , , , , , , , , , , , , , 3, , , , , , , , , , , , , , , , , , , , , , , 4, , , , , , , , , , , , , , , , , , , , , , , 5, , , , , , , , , , , , , , , , , , , , , , ]";
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 101, 8, actvoucherGridBodyList);
			
			System.out.println("QtyPreload : "+actQtyPreload+" Value Expected : "+expQtyPreload);
			
			System.out.println("actvoucherGridBodyList : "+actvoucherGridBodyList);
			System.out.println("expvoucherGridBodyList : "+expvoucherGridBodyList);
			
			if(actQtyPreload.equalsIgnoreCase(expQtyPreload) && actvoucherGridBodyList.equalsIgnoreCase(expvoucherGridBodyList))
			{
				System.out.println("Test Pass : Data Entered in first Row");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 100, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Data NOT Entered in first Row");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 100, 9, resFail);
				return false;
			}
		}
			
		
		



		public boolean checkSaveButtonWithoutInputBatchInSalesVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			String expValidationMessageOnBatchColumnBlank=excelReader.getCellData("SmokeSalesInvoiceVAT", 104, 7);
			
			String validationMessage=checkValidationMessage(expValidationMessageOnBatchColumnBlank);
			
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 104, 8, validationMessage);
			
			System.out.println("*********************************************** checkSaveButtonWithoutInputBatchInSalesVoucher  ********************************************");
			System.out.println("Entry Page Check Qty Preload Value Actual  : "+validationMessage+" Value Expected : "+expValidationMessageOnBatchColumnBlank);	
			
			
			if(validationMessage.equalsIgnoreCase(expValidationMessageOnBatchColumnBlank))
			{
				System.out.println("Test Pass : Error Message Is As Expected");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 103, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Error Message Is NOT As Expected");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 103, 9, resPass);
				return false;
			}
		}
			
		@FindBy(xpath="//label[@id='lblitem']")
		private static WebElement batchItemName;
		
		@FindBy(xpath="//label[@id='lblTotalQty']")
		private static WebElement batchTotalQty;
		
		@FindBy(xpath="//label[@id='lblAdjustQty']")
		private static WebElement batchAdjustQty;
		
		@FindBy(xpath="//label[@id='lblBalnceQty']")
		private static WebElement batchBalance;
		
		@FindBy(xpath="//div[contains(@class,'col-xs-12 col-sm-12 col-md-12 col-lg-12 P_ingBottom')]//div[2]//input[1]")
		private static WebElement batchExipiringInRadioBtn;
		             
		@FindBy(xpath="//section[@id='page_Content']//div[@class='row']//div//div[3]//input[1]")
		private static WebElement batchExipiringAfetrRadioBtn;
		
		@FindBy(xpath="//input[@id='txtWithin']")
		private static WebElement batchWithInTxt;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_1-1']")
		private static WebElement batch_BatchNoRow1;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_1-2']")
		private static WebElement batch_BaseQtyRow1;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_1-6']")
		private static WebElement batch_ExpiryInDateRow1;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_1-7']")
		private static WebElement batch_RateRow1;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_1-8']")
		private static WebElement batch_QtyAdjustedRow1;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_1-14']")
		private static WebElement batch_PurchaseDateRow1;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_2-1']")
		private static WebElement batch_BatchNoRow2;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_2-2']")
		private static WebElement batch_BaseQtyRow2;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_2-6']")
		private static WebElement batch_ExpiryInDateRow2;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_2-7']")
		private static WebElement batch_RateRow2;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_2-8']")
		private static WebElement batch_QtyAdjustedRow2;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_2-14']")
		private static WebElement batch_PurchaseDateRow2;

		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_3-1']")
		private static WebElement batch_BatchNoRow3;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_3-2']")
		private static WebElement batch_BaseQtyRow3;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_3-6']")
		private static WebElement batch_ExpiryInDateRow3;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_3-7']")
		private static WebElement batch_RateRow3;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_3-8']")
		private static WebElement batch_QtyAdjustedRow3;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_3-14']")
		private static WebElement batch_PurchaseDateRow3;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_4-1']")
		private static WebElement batch_BatchNoRow4;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_4-2']")
		private static WebElement batch_BaseQtyRow4;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_4-6']")
		private static WebElement batch_ExpiryInDateRow4;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_4-7']")
		private static WebElement batch_RateRow4;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_4-8']")
		private static WebElement batch_QtyAdjustedRow4;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_4-14']")
		private static WebElement batch_PurchaseDateRow4;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_5-1']")
		private static WebElement batch_BatchNoRow5;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_5-2']")
		private static WebElement batch_BaseQtyRow5;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_5-6']")
		private static WebElement batch_ExpiryInDateRow5;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_5-7']")
		private static WebElement batch_RateRow5;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_5-8']")
		private static WebElement batch_QtyAdjustedRow5;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_5-14']")
		private static WebElement batch_PurchaseDateRow5;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_6-1']")
		private static WebElement batch_BatchNoRow6;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_6-2']")
		private static WebElement batch_BaseQtyRow6;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_6-6']")
		private static WebElement batch_ExpiryInDateRow6;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_6-7']")
		private static WebElement batch_RateRow6;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_6-8']")
		private static WebElement batch_QtyAdjustedRow6;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_6-14']")
		private static WebElement batch_PurchaseDateRow6;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_7-1']")
		private static WebElement batch_BatchNoRow7;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_7-2']")
		private static WebElement batch_BaseQtyRow7;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_7-6']")
		private static WebElement batch_ExpiryInDateRow7;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_7-7']")
		private static WebElement batch_RateRow7;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_7-8']")
		private static WebElement batch_QtyAdjustedRow7;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_7-14']")
		private static WebElement batch_PurchaseDateRow7;
		
		@FindBy(xpath="//i[@class='icon-refresh icon-font7']")
		private static WebElement batchRefreshBtn;
		
		@FindBy(xpath="//input[@id='Batch_Search']")
		private static WebElement batchSearchTxt;
		
		@FindBy(xpath="//input[@class='Fcheckbox batchcheck']")
		private static WebElement batchShowAllAvalibleBatches;
		
		@FindBy(xpath="//label[contains(text(),'Customization')]")
		private static WebElement batchCustomizationIcon;
		
		@FindBy(xpath="//i[@class='icon-pick icon-font5']")
		private static WebElement batchPickOnFIFOIcon;
		
		@FindBy(xpath="//i[@class='icon-ok icon-font7']")
		private static WebElement batchOkIcon;

		@FindBy(xpath="//div[@class='col-xs-12 col-sm-12 col-md-12 col-lg-12']//div[6]//label[1]")
		private static WebElement batchTotalAdjustedQtyFooter;
		
		@FindBy(xpath="//div[@class='col-xs-6 col-sm-6 col-md-1 col-lg-1 text-right']")
		private static WebElement batchTotalQtyFooter;
		
		@FindBy(xpath="//i[contains(@class,'icon-cancel icon-font7')]")
		private static WebElement batchCancelIcon;


		
		
		public boolean checkBatchPopupScreenInSalesInvoiceNew() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			select1stRow_19thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
			
			boolean actBatchName					=batchItemName.isDisplayed();
			boolean actBatchTotalQty				=batchTotalQty.isDisplayed();
			boolean actBatchAdjQty					=batchAdjustQty.isDisplayed();
			boolean actBatchBalance					=batchBalance.isDisplayed();
			boolean actBatchExpiryRadioBtn			=batchExipiringInRadioBtn.isDisplayed();
			boolean actBatchExpiryAfterRadioBtn		=batchExipiringAfetrRadioBtn.isDisplayed();
			boolean actBatchWithIn					=batchWithInTxt.isDisplayed();
			boolean actBatchNoR1					=batch_BatchNoRow1.isDisplayed();
			boolean actBatchBaseQtyR1				=batch_BaseQtyRow1.isDisplayed();
			boolean actBatchExpDateR1				=batch_ExpiryInDateRow1.isDisplayed();
			boolean actBatchRateR1					=batch_RateRow1.isDisplayed();
			boolean actBatchAdjQtyR1				=batch_QtyAdjustedRow1.isDisplayed();
			boolean actBatchRefreshBtn				=batchRefreshBtn.isDisplayed();
			boolean actBatchSearchTxt				=batchSearchTxt.isDisplayed();
			boolean actBatchShowAllAvailableBatches	=batchShowAllAvalibleBatches.isDisplayed();
			boolean actBatchCustomization			=batchCustomizationIcon.isDisplayed();
			boolean actBatchFIFO					=batchPickOnFIFOIcon.isDisplayed();
			boolean actBatchOK						=batchOkIcon.isDisplayed();
			boolean actBatchCancel					=batchCancelIcon.isDisplayed();
			boolean actBatchTotalAdjQtyFooter		=batchTotalAdjustedQtyFooter.isDisplayed();

			boolean expBatchName					=true;
			boolean expBatchTotalQty				=true;
			boolean expBatchAdjQty					=true;
			boolean expBatchBalance					=true;
			boolean expBatchExpiryRadioBtn			=true;
			boolean expBatchExpiryAfterRadioBtn		=true;
			boolean expBatchWithIn					=true;
			boolean expBatchNoR1					=true;
			boolean expBatchBaseQtyR1				=true;
			boolean expBatchExpDateR1				=true;
			boolean expBatchRateR1					=true;
			boolean expBatchAdjQtyR1				=true;
			boolean expBatchRefreshBtn				=true;
			boolean expBatchSearchTxt				=true;
			boolean expBatchShowAllAvailableBatches	=true;
			boolean expBatchCustomization			=true;
			boolean expBatchFIFO					=true;
			boolean expBatchOK						=true;
			boolean expBatchCancel					=true;
			boolean expBatchTotalAdjQtyFooter		=true;

		
			System.out.println("*********************************************** checkBatchPopupScreenInSalesInvoiceNew  ********************************************");
			System.out.println("Entry Page Batch Popup Value Actual  : "+actBatchName                    +" Value Expected : "+expBatchName);	
			System.out.println("Entry Page Batch Popup Value Actual  : "+actBatchTotalQty                +" Value Expected : "+expBatchTotalQty);
			System.out.println("Entry Page Batch Popup Value Actual  : "+actBatchAdjQty                  +" Value Expected : "+expBatchAdjQty);
			System.out.println("Entry Page Batch Popup Value Actual  : "+actBatchBalance                 +" Value Expected : "+expBatchBalance);
			System.out.println("Entry Page Batch Popup Value Actual  : "+actBatchExpiryRadioBtn          +" Value Expected : "+expBatchExpiryRadioBtn);
			System.out.println("Entry Page Batch Popup Value Actual  : "+actBatchWithIn                  +" Value Expected : "+expBatchWithIn);
			
			System.out.println("Entry Page Batch Popup Value Actual  : "+actBatchNoR1                    +" Value Expected : "+expBatchNoR1);	
			System.out.println("Entry Page Batch Popup Value Actual  : "+actBatchBaseQtyR1               +" Value Expected : "+actBatchBaseQtyR1);
			System.out.println("Entry Page Batch Popup Value Actual  : "+actBatchExpDateR1               +" Value Expected : "+expBatchExpDateR1);
			System.out.println("Entry Page Batch Popup Value Actual  : "+actBatchRateR1                  +" Value Expected : "+expBatchRateR1);
			System.out.println("Entry Page Batch Popup Value Actual  : "+actBatchAdjQtyR1                +" Value Expected : "+expBatchAdjQtyR1);
			System.out.println("Entry Page Batch Popup Value Actual  : "+actBatchRefreshBtn              +" Value Expected : "+expBatchRefreshBtn);
			
			System.out.println("Entry Page Batch Popup Value Actual  : "+actBatchSearchTxt               +" Value Expected : "+expBatchSearchTxt);	
			System.out.println("Entry Page Batch Popup Value Actual  : "+actBatchShowAllAvailableBatches +" Value Expected : "+expBatchShowAllAvailableBatches);
			System.out.println("Entry Page Batch Popup Value Actual  : "+actBatchCustomization           +" Value Expected : "+expBatchCustomization);
			System.out.println("Entry Page Batch Popup Value Actual  : "+actBatchFIFO                    +" Value Expected : "+expBatchFIFO);
			System.out.println("Entry Page Batch Popup Value Actual  : "+actBatchOK                      +" Value Expected : "+expBatchOK);
			System.out.println("Entry Page Batch Popup Value Actual  : "+actBatchCancel                  +" Value Expected : "+expBatchCancel);
			System.out.println("Entry Page Batch Popup Value Actual  : "+actBatchTotalAdjQtyFooter       +" Value Expected : "+expBatchTotalAdjQtyFooter);
			
			boolean actresult = actBatchName==expBatchName && actBatchTotalQty==expBatchTotalQty && actBatchAdjQty==expBatchAdjQty && actBatchBalance==expBatchBalance && 
					actBatchExpiryRadioBtn==expBatchExpiryRadioBtn && actBatchWithIn==expBatchWithIn && actBatchNoR1==expBatchNoR1 &&
					actBatchBaseQtyR1==expBatchBaseQtyR1 && actBatchRefreshBtn==expBatchRefreshBtn && actBatchSearchTxt==expBatchSearchTxt && 
					actBatchAdjQtyR1==expBatchAdjQtyR1 && actBatchShowAllAvailableBatches==expBatchShowAllAvailableBatches && actBatchCustomization==expBatchCustomization && 
					actBatchFIFO==expBatchFIFO && actBatchOK==expBatchOK && actBatchCancel==expBatchCancel && actBatchTotalAdjQtyFooter==expBatchTotalAdjQtyFooter;
			
			String actMethod = Boolean.toString(actresult);
			String expMethod = excelReader.getCellData("SmokeSalesInvoiceVAT", 105, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 105, 8, actMethod);
			
			System.out.println("actMethod : "+actMethod+" Value Expected : "+expMethod);
			
			if (actMethod.equalsIgnoreCase(expMethod)) 
			{
				System.out.println(" Test Pass: Batch Window is Dispalyed ");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 105, 9, resPass);
				return true;
			}
			else
			{
				System.out.println(" Test Fail: Batch Window is NOt  Dispalyed ");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 105, 9, resPass);
				return false;
			}
			
		}
		
		 @FindBy(xpath="//*[@id='Id_MRPBatch_Grid']")
		 private static WebElement  batchPopUPEmptyRows;


		public boolean checkBatchScreenPopupBatchValueBeforePickOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
	        Thread.sleep(3000);
	        
	        System.out.println("Batch Rows"+batchPopUPEmptyRows.getAttribute("data-totalrows"));
			
			String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
			String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
			
			String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
			String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
			
			String actRow3BatchNo,actRow3BaseQty,actRow3Rate,actRow3AdjustedQty,actRow3TotalAdjustedQty;
			String expRow3BatchNo,expRow3BaseQty,expRow3Rate,expRow3AdjustedQty,expRow3TotalAdjustedQty;
			
			actBatchName=batchItemName.getText();
			actTotalQty=batchTotalQty.getText();
			actAdjustedQty=batchAdjustQty.getText();
			actBalance=batchBalance.getText();
			actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
			actTotalQtyFooter=batchTotalQtyFooter.getText();
			
			
			actRow1BatchNo=batch_BatchNoRow1.getText();
			actRow1BaseQty=batch_BaseQtyRow1.getText();
			//act7=batch_ExpiryInDateRow1.getText();
			actRow1Rate=batch_RateRow1.getText();
			actRow1AdjustedQty=batch_QtyAdjustedRow1.getText();
			//act10=batch_PurchaseDateRow1.getText();

			
			actRow2BatchNo=batch_BatchNoRow2.getText();
			actRow2BaseQty=batch_BaseQtyRow2.getText();
			//act14=batch_ExpiryInDateRow2.getText();
			actRow2Rate=batch_RateRow2.getText();
			actRow2AdjustedQty=batch_QtyAdjustedRow2.getText();
			//act17=batch_PurchaseDateRow2.getText();
			
			/*actRow3BatchNo=batch_BatchNoRow3.getText();
			actRow3BaseQty=batch_BaseQtyRow3.getText();
			//act14=batch_ExpiryInDateRow2.getText();
			actRow3Rate=batch_RateRow3.getText();
			actRow3AdjustedQty=batch_QtyAdjustedRow3.getText();
			//act17=batch_PurchaseDateRow2.getText();*/


			expBatchName=excelReader.getCellData("SmokeSalesInvoiceVAT", 107, 7);
			expTotalQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 108, 7);
			expAdjustedQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 109, 7);
			expBalance=excelReader.getCellData("SmokeSalesInvoiceVAT", 110, 7);
			
			
			expTotalQtyFooter=excelReader.getCellData("SmokeSalesInvoiceVAT", 111, 7);
			expTotalAdjustedQtyFooter=excelReader.getCellData("SmokeSalesInvoiceVAT", 112, 7);
			
			
			expRow1BatchNo=excelReader.getCellData("SmokeSalesInvoiceVAT", 113, 7);
			expRow1BaseQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 114, 7);
			expRow1Rate=excelReader.getCellData("SmokeSalesInvoiceVAT", 115, 7);
			expRow1AdjustedQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 116, 7);
			
			
			
		
			expRow2BatchNo=excelReader.getCellData("SmokeSalesInvoiceVAT", 117, 7);
			expRow2BaseQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 118, 7);
			expRow2Rate=excelReader.getCellData("SmokeSalesInvoiceVAT", 119, 7);
			expRow2AdjustedQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 120, 7);
			
			/*expRow3BatchNo=excelReader.getCellData("SmokeSalesInvoiceVAT", 121, 7);
			expRow3BaseQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 122, 7);
			expRow3Rate=excelReader.getCellData("SmokeSalesInvoiceVAT", 123, 7);
			expRow3AdjustedQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 124, 7);*/
			
		
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 107, 8, actBatchName);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 108, 8, actTotalQty);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 109, 8, actAdjustedQty);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 110, 8, actBalance);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 111, 8, actTotalQtyFooter);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 112, 8, actTotalAdjustedQtyFooter);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 113, 8, actRow1BatchNo);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 114, 8, actRow1BaseQty);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 115, 8, actRow1Rate);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 116, 8, actRow1AdjustedQty);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 117, 8, actRow2BatchNo);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 118, 8, actRow2BaseQty);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 119, 8, actRow2Rate);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 120, 8, actRow2AdjustedQty);
			
			/*excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 121, 8, actRow3BatchNo);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 122, 8, actRow3BaseQty);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 123, 8, actRow3Rate);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 124, 8, actRow3AdjustedQty);*/
			
			System.out.println(actBatchName);
			System.out.println(actTotalQty);
			System.out.println(actAdjustedQty);
			System.out.println(actBalance);
				
			//First Row
			
			System.out.println(actRow1BatchNo);
			System.out.println(actRow1BaseQty);
			System.out.println(actRow1Rate);
			System.out.println(actRow1AdjustedQty);

			
			//Second Row
			
			System.out.println(actRow2BatchNo);
			System.out.println(actRow2BaseQty);
			System.out.println(actRow2Rate);
			System.out.println(actRow2AdjustedQty);

			System.out.println("*********************************************** checkBatchScreenPopupBatchValueBeforePickOption  ********************************************");
			System.out.println("Entry Page Batch Popup Value Actual  : "+actBatchName                    +" Value Expected : "+expBatchName);	
			System.out.println("Entry Page Batch Popup Value Actual  : "+actTotalQty                     +" Value Expected : "+expTotalQty);
			System.out.println("Entry Page Batch Popup Value Actual  : "+actAdjustedQty                  +" Value Expected : "+expAdjustedQty);
			System.out.println("Entry Page Batch Popup Value Actual  : "+actBalance                      +" Value Expected : "+expBalance);
			System.out.println("Entry Page Batch Popup Value Actual  : "+actTotalAdjustedQtyFooter       +" Value Expected : "+expTotalAdjustedQtyFooter);
			System.out.println("Entry Page Batch Popup Value Actual  : "+actTotalQtyFooter               +" Value Expected : "+expTotalQtyFooter);
			
			System.out.println("Entry Page Batch Popup Value Actual  : "+actRow1BatchNo                  +" Value Expected : "+expRow1BatchNo);	
			System.out.println("Entry Page Batch Popup Value Actual  : "+actRow1BaseQty                  +" Value Expected : "+expRow1BaseQty);
			System.out.println("Entry Page Batch Popup Value Actual  : "+actRow1Rate                     +" Value Expected : "+expRow1Rate);
			System.out.println("Entry Page Batch Popup Value Actual  : "+actRow1AdjustedQty              +" Value Expected : "+expRow1AdjustedQty);
			
			System.out.println("Entry Page Batch Popup Value Actual  : "+actRow2BatchNo                  +" Value Expected : "+expRow2BatchNo);	
			System.out.println("Entry Page Batch Popup Value Actual  : "+actRow2BaseQty                  +" Value Expected : "+actRow2BaseQty);
			System.out.println("Entry Page Batch Popup Value Actual  : "+actRow2Rate                     +" Value Expected : "+expRow2Rate);
			System.out.println("Entry Page Batch Popup Value Actual  : "+actRow2AdjustedQty              +" Value Expected : "+expRow2AdjustedQty);
			
			/*System.out.println("Entry Page Batch Popup Value Actual  : "+actRow3BatchNo                  +" Value Expected : "+expRow3BatchNo);	
			System.out.println("Entry Page Batch Popup Value Actual  : "+actRow3BaseQty                  +" Value Expected : "+actRow3BaseQty);
			System.out.println("Entry Page Batch Popup Value Actual  : "+actRow3Rate                     +" Value Expected : "+expRow3Rate);
			System.out.println("Entry Page Batch Popup Value Actual  : "+actRow3AdjustedQty              +" Value Expected : "+expRow3AdjustedQty);*/

			if(actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
					&& actBalance.equalsIgnoreCase(expBalance) 
					
					&& actTotalAdjustedQtyFooter.equalsIgnoreCase(expTotalAdjustedQtyFooter) && actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) 
					
					&& actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow1BaseQty.equalsIgnoreCase(expRow1BaseQty) && actRow1Rate.equalsIgnoreCase(expRow1Rate) 
					&& actRow1AdjustedQty.equalsIgnoreCase(expRow1AdjustedQty) 
					
					&& actRow2BatchNo.equalsIgnoreCase(expRow2BatchNo) && actRow2BaseQty.equalsIgnoreCase(expRow2BaseQty) && actRow2Rate.equalsIgnoreCase(expRow2Rate) 
					&& actRow2AdjustedQty.equalsIgnoreCase(expRow2AdjustedQty)
					
					/*&& actRow3BatchNo.equalsIgnoreCase(expRow3BatchNo) && actRow3BaseQty.equalsIgnoreCase(expRow3BaseQty) && actRow3Rate.equalsIgnoreCase(expRow3Rate) 
					&& actRow3AdjustedQty.equalsIgnoreCase(expRow3AdjustedQty)*/)
				
			{
				System.out.println("Test Pass : Batch fields are As expected ");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 106, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Batch fields are As Not  expected ");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 106, 9, resFail);
				return false;
			}
			
			
		}


			



		public boolean checkClickOnOkButtonInBatchPupupScreenWithoutInputOfQtyAdjustment() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
		
			
			getFluentWebDriverWait().until(ExpectedConditions.alertIsPresent());
			
			String actdata=getDriver().switchTo().alert().getText();
			String expdata=excelReader.getCellData("SmokeSalesInvoiceVAT", 126, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 126, 8, actdata);
		
			System.out.println("*********************************************** checkClickOnOkButtonInBatchPupupScreenWithoutInputOfQtyAdjustment  ********************************************");
			System.out.println("Entry Page Click On Ok in Batch Popup Value Actual  : "+actdata                    +" Value Expected : "+expdata);	
		
						
			if(actdata.equalsIgnoreCase(expdata))
			{
				System.out.println("Test Pass : Alert  Message Displayed");
				getFluentWebDriverWait().until(ExpectedConditions.alertIsPresent());
				getAlert().dismiss();
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 125, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test fail : Alert Message NOT Displayed");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 125, 9, resFail);
				return false;
			}
		}

		@FindBy(xpath="//input[@id='MRPBatch_AdjBatchQty']")
		private static WebElement batch_EnterQtyAdjsuted;
		
		
		//Giving the Batch Qty as more than available qty (new changes are modified)
		public boolean checkyInputMoreQtyInAdjustedQtyThanVoucherQtyInBatchPopUp() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
	        
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batch_QtyAdjustedRow1));
	        batch_QtyAdjustedRow1.click();
	        
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batch_EnterQtyAdjsuted));
	        batch_EnterQtyAdjsuted.click();
	        
	        batch_EnterQtyAdjsuted.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVAT", 128, 6));
	        
	        batch_EnterQtyAdjsuted.sendKeys(Keys.TAB);
	        
			String expdata=excelReader.getCellData("SmokeSalesInvoiceVAT", 129, 7);
			
			String validationMessage=checkValidationMessage(expdata);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 129, 8, validationMessage);
			
			System.out.println("*********************************************** checkyInputMoreQtyInAdjustedQtyThanVoucherQtyInBatchPopUp  ********************************************");
			System.out.println("Entry Page Click On Ok in Batch Popup Value Actual  : "+validationMessage+" Value Expected : "+expdata);	
		
			
			if(validationMessage.equalsIgnoreCase(expdata))
			{
				System.out.println("Test Pass : Error Message Is As Expected");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 127, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Error Message Is NOT As Expected");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 127, 9, resPass);
				return false;
			}
		}
			
		

		public boolean checkClickOnRefreshOptionInSalesBatchPopupScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
	         
	        
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchRefreshBtn));
	        batchRefreshBtn.click();
	        
	        Thread.sleep(2000);
	        
			System.out.println("Batch Rows"+batchPopUPEmptyRows.getAttribute("data-totalrows"));

			String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
			String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
			
			String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
			String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
			
			String actRow3BatchNo,actRow3BaseQty,actRow3Rate,actRow3AdjustedQty,actRow3TotalAdjustedQty;
			String expRow3BatchNo,expRow3BaseQty,expRow3Rate,expRow3AdjustedQty,expRow3TotalAdjustedQty;
			
			actBatchName=batchItemName.getText();
			actTotalQty=batchTotalQty.getText();
			actAdjustedQty=batchAdjustQty.getText();
			actBalance=batchBalance.getText();
			actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
			actTotalQtyFooter=batchTotalQtyFooter.getText();
			
			
			actRow1BatchNo=batch_BatchNoRow1.getText();
			actRow1BaseQty=batch_BaseQtyRow1.getText();
			//act7=batch_ExpiryInDateRow1.getText();
			actRow1Rate=batch_RateRow1.getText();
			actRow1AdjustedQty=batch_QtyAdjustedRow1.getText();
			//act10=batch_PurchaseDateRow1.getText();

			
			actRow2BatchNo=batch_BatchNoRow2.getText();
			actRow2BaseQty=batch_BaseQtyRow2.getText();
			//act14=batch_ExpiryInDateRow2.getText();
			actRow2Rate=batch_RateRow2.getText();
			actRow2AdjustedQty=batch_QtyAdjustedRow2.getText();
			//act17=batch_PurchaseDateRow2.getText();
			
			/*actRow3BatchNo=batch_BatchNoRow3.getText();
			actRow3BaseQty=batch_BaseQtyRow3.getText();
			//act14=batch_ExpiryInDateRow2.getText();
			actRow3Rate=batch_RateRow3.getText();
			actRow3AdjustedQty=batch_QtyAdjustedRow3.getText();
			//act17=batch_PurchaseDateRow2.getText();*/


			expBatchName=excelReader.getCellData("SmokeSalesInvoiceVAT", 131, 7);
			expTotalQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 132, 7);
			expAdjustedQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 133, 7);
			expBalance=excelReader.getCellData("SmokeSalesInvoiceVAT", 134, 7);
			
			
			expTotalQtyFooter=excelReader.getCellData("SmokeSalesInvoiceVAT", 135, 7);
			expTotalAdjustedQtyFooter=excelReader.getCellData("SmokeSalesInvoiceVAT", 136, 7);
			
			
			expRow1BatchNo=excelReader.getCellData("SmokeSalesInvoiceVAT", 137, 7);
			expRow1BaseQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 138, 7);
			expRow1Rate=excelReader.getCellData("SmokeSalesInvoiceVAT", 139, 7);
			expRow1AdjustedQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 140, 7);
			
			
			
		
			expRow2BatchNo=excelReader.getCellData("SmokeSalesInvoiceVAT", 141, 7);
			expRow2BaseQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 142, 7);
			expRow2Rate=excelReader.getCellData("SmokeSalesInvoiceVAT", 143, 7);
			expRow2AdjustedQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 144, 7);
			
			/*expRow3BatchNo=excelReader.getCellData("SmokeSalesInvoiceVAT", 145, 7);
			expRow3BaseQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 146, 7);
			expRow3Rate=excelReader.getCellData("SmokeSalesInvoiceVAT", 147, 7);
			expRow3AdjustedQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 148, 7);*/
			
		
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 131, 8, actBatchName);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 132, 8, actTotalQty);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 133, 8, actAdjustedQty);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 134, 8, actBalance);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 135, 8, actTotalQtyFooter);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 136, 8, actTotalAdjustedQtyFooter);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 137, 8, actRow1BatchNo);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 138, 8, actRow1BaseQty);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 139, 8, actRow1Rate);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 140, 8, actRow1AdjustedQty);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 141, 8, actRow2BatchNo);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 142, 8, actRow2BaseQty);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 143, 8, actRow2Rate);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 144, 8, actRow2AdjustedQty);
			
			/*excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 145, 8, actRow3BatchNo);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 146, 8, actRow3BaseQty);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 147, 8, actRow3Rate);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 148, 8, actRow3AdjustedQty);*/
			
			System.out.println(actBatchName);
			System.out.println(actTotalQty);
			System.out.println(actAdjustedQty);
			System.out.println(actBalance);
				
			//First Row
			
			System.out.println(actRow1BatchNo);
			System.out.println(actRow1BaseQty);
			System.out.println(actRow1Rate);
			System.out.println(actRow1AdjustedQty);

			
			//Second Row
			
			System.out.println(actRow2BatchNo);
			System.out.println(actRow2BaseQty);
			System.out.println(actRow2Rate);
			System.out.println(actRow2AdjustedQty);

			System.out.println("*********************************************** checkBatchScreenPopupBatchValueBeforePickOption  ********************************************");
			System.out.println("Entry Page Batch Popup Value Actual  : "+actBatchName                    +" Value Expected : "+expBatchName);	
			System.out.println("Entry Page Batch Popup Value Actual  : "+actTotalQty                     +" Value Expected : "+expTotalQty);
			System.out.println("Entry Page Batch Popup Value Actual  : "+actAdjustedQty                  +" Value Expected : "+expAdjustedQty);
			System.out.println("Entry Page Batch Popup Value Actual  : "+actBalance                      +" Value Expected : "+expBalance);
			System.out.println("Entry Page Batch Popup Value Actual  : "+actTotalAdjustedQtyFooter       +" Value Expected : "+expTotalAdjustedQtyFooter);
			System.out.println("Entry Page Batch Popup Value Actual  : "+actTotalQtyFooter               +" Value Expected : "+expTotalQtyFooter);
			
			System.out.println("Entry Page Batch Popup Value Actual  : "+actRow1BatchNo                  +" Value Expected : "+expRow1BatchNo);	
			System.out.println("Entry Page Batch Popup Value Actual  : "+actRow1BaseQty                  +" Value Expected : "+expRow1BaseQty);
			System.out.println("Entry Page Batch Popup Value Actual  : "+actRow1Rate                     +" Value Expected : "+expRow1Rate);
			System.out.println("Entry Page Batch Popup Value Actual  : "+actRow1AdjustedQty              +" Value Expected : "+expRow1AdjustedQty);
			
			System.out.println("Entry Page Batch Popup Value Actual  : "+actRow2BatchNo                  +" Value Expected : "+expRow2BatchNo);	
			System.out.println("Entry Page Batch Popup Value Actual  : "+actRow2BaseQty                  +" Value Expected : "+actRow2BaseQty);
			System.out.println("Entry Page Batch Popup Value Actual  : "+actRow2Rate                     +" Value Expected : "+expRow2Rate);
			System.out.println("Entry Page Batch Popup Value Actual  : "+actRow2AdjustedQty              +" Value Expected : "+expRow2AdjustedQty);
			
			/*System.out.println("Entry Page Batch Popup Value Actual  : "+actRow3BatchNo                  +" Value Expected : "+expRow3BatchNo);	
			System.out.println("Entry Page Batch Popup Value Actual  : "+actRow3BaseQty                  +" Value Expected : "+actRow3BaseQty);
			System.out.println("Entry Page Batch Popup Value Actual  : "+actRow3Rate                     +" Value Expected : "+expRow3Rate);
			System.out.println("Entry Page Batch Popup Value Actual  : "+actRow3AdjustedQty              +" Value Expected : "+expRow3AdjustedQty);*/

			if(actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
					&& actBalance.equalsIgnoreCase(expBalance) 
					
					&& actTotalAdjustedQtyFooter.equalsIgnoreCase(expTotalAdjustedQtyFooter) && actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) 
					
					&& actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow1BaseQty.equalsIgnoreCase(expRow1BaseQty) && actRow1Rate.equalsIgnoreCase(expRow1Rate) 
					&& actRow1AdjustedQty.equalsIgnoreCase(expRow1AdjustedQty) 
					
					&& actRow2BatchNo.equalsIgnoreCase(expRow2BatchNo) && actRow2BaseQty.equalsIgnoreCase(expRow2BaseQty) && actRow2Rate.equalsIgnoreCase(expRow2Rate) 
					&& actRow2AdjustedQty.equalsIgnoreCase(expRow2AdjustedQty)
					
					/*&& actRow3BatchNo.equalsIgnoreCase(expRow3BatchNo) && actRow3BaseQty.equalsIgnoreCase(expRow3BaseQty) && actRow3Rate.equalsIgnoreCase(expRow3Rate) 
					&& actRow3AdjustedQty.equalsIgnoreCase(expRow3AdjustedQty)*/)


			{
				System.out.println("Test Pass : Batch fields are As expected ");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 130, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Batch fields are As Not  expected ");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 130, 9, resFail);
				return false;
			}
			
			
		}
		
		
		// Alert Not Displaying someTimes Error Message Displaying Should Check it 
		public boolean checkClickOnOkButtonInBatchPupupScreenWithoutInputOfQtyAdjustmentAfterRefresh() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
		
			
			if(getIsAlertPresent()==true)
			{
				String actdata=getAlert().getText();
				String expdata=excelReader.getCellData("SmokeSalesInvoiceVAT", 150, 7);
				
				
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 150, 8, actdata);
				
				System.out.println("*********************************************** checkClickOnOkButtonInBatchPupupScreenWithoutInputOfQtyAdjustmentAfterRefresh  ********************************************");
				System.out.println("Entry Page Click On Ok after Refresh in Batch Popup Value Actual  : "+actdata                    +" Value Expected : "+expdata);	
			
							
				if(actdata.equalsIgnoreCase(expdata))
				{
					System.out.println("Test Pass : Alert  Message Displayed");
					getFluentWebDriverWait().until(ExpectedConditions.alertIsPresent());
					getAlert().dismiss();
					excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 149, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test fail : Alert Message NOT Displayed");
					excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 149, 9, resFail);
					return false;
				}
			}
			else
			{
				System.out.println("Test fail : Alert Message NOT Displayed");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 149, 9, resFail);
				return false;
			}
			
		} 


			
		
		public boolean checkClickOnCancelButtonInBatchWisePopupScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
			batchCancelIcon.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			 
				
			boolean actResult=select1stRow_19thColumn.getText().isEmpty();
			
			String actdata = Boolean.toString(actResult);
			
			
			String expdata=excelReader.getCellData("SmokeSalesInvoiceVAT", 152, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 152, 8, actdata);
			
			System.out.println("*********************************************** checkClickOnCancelButtonInBatchWisePopupScreen  ********************************************");
			System.out.println("Entry Page Click On Cancel in Batch Popup Value Actual  : "+actdata                    +" Value Expected : "+expdata);	
			
			Thread.sleep(2000);	
				
			if (actdata.equalsIgnoreCase(expdata)) 
			{	 
				
				System.out.println(" Test Pass: Batch Screen is Closed and Voucher Dispalyed ");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 151, 9, resPass);
				return true;
			}
			else
			{
				System.out.println(" Test Fail: Batch Screen is not Closed and Voucher is not  Dispalyed ");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 151, 9, resFail);
				return false;
			}
			
		}
			

		
		
		//Here as of now Total adjusted qty is displaying as 0 instead after pick right value
		 public boolean checkBatchWiseScreenPopupWithPickOnFIFO() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
			 
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";		
			 
			 Thread.sleep(2000);
			
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
			 select1stRow_14thColumn.click();
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			 enter_Rate.clear();
			 enter_Rate.sendKeys(Keys.TAB);
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			 enter_Gross.sendKeys(Keys.TAB);
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			 select1stRow_19thColumn.click();
			 
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
			 batchPickOnFIFOIcon.click();
			 
		     Thread.sleep(3000);
		     
		     System.out.println("Batch Rows"+batchPopUPEmptyRows.getAttribute("data-totalrows"));
		     
			
		     String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
		     String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
				
			String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
			String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
			
			String actRow3BatchNo,actRow3BaseQty,actRow3Rate,actRow3AdjustedQty,actRow3TotalAdjustedQty;
			String expRow3BatchNo,expRow3BaseQty,expRow3Rate,expRow3AdjustedQty,expRow3TotalAdjustedQty;
			
			actBatchName=batchItemName.getText();
			actTotalQty=batchTotalQty.getText();
			actAdjustedQty=batchAdjustQty.getText();
			actBalance=batchBalance.getText();
			actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
			actTotalQtyFooter=batchTotalQtyFooter.getText();
			
			
			actRow1BatchNo=batch_BatchNoRow1.getText();
			actRow1BaseQty=batch_BaseQtyRow1.getText();
			//act7=batch_ExpiryInDateRow1.getText();
			actRow1Rate=batch_RateRow1.getText();
			actRow1AdjustedQty=batch_QtyAdjustedRow1.getText();
			//act10=batch_PurchaseDateRow1.getText();

			
			actRow2BatchNo=batch_BatchNoRow2.getText();
			actRow2BaseQty=batch_BaseQtyRow2.getText();
			//act14=batch_ExpiryInDateRow2.getText();
			actRow2Rate=batch_RateRow2.getText();
			actRow2AdjustedQty=batch_QtyAdjustedRow2.getText();
			//act17=batch_PurchaseDateRow2.getText();
			
			/*actRow3BatchNo=batch_BatchNoRow3.getText();
			actRow3BaseQty=batch_BaseQtyRow3.getText();
			//act14=batch_ExpiryInDateRow2.getText();
			actRow3Rate=batch_RateRow3.getText();
			actRow3AdjustedQty=batch_QtyAdjustedRow3.getText();
			//act17=batch_PurchaseDateRow2.getText();*/


			expBatchName=excelReader.getCellData("SmokeSalesInvoiceVAT", 154, 7);
			expTotalQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 155, 7);
			expAdjustedQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 156, 7);
			expBalance=excelReader.getCellData("SmokeSalesInvoiceVAT", 157, 7);
			
			
			expTotalQtyFooter=excelReader.getCellData("SmokeSalesInvoiceVAT", 158, 7);
			expTotalAdjustedQtyFooter=excelReader.getCellData("SmokeSalesInvoiceVAT", 159, 7);
			
			
			expRow1BatchNo=excelReader.getCellData("SmokeSalesInvoiceVAT", 160, 7);
			expRow1BaseQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 161, 7);
			expRow1Rate=excelReader.getCellData("SmokeSalesInvoiceVAT", 162, 7);
			expRow1AdjustedQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 163, 7);
			
			
			
		
			expRow2BatchNo=excelReader.getCellData("SmokeSalesInvoiceVAT", 164, 7);
			expRow2BaseQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 165, 7);
			expRow2Rate=excelReader.getCellData("SmokeSalesInvoiceVAT", 166, 7);
			expRow2AdjustedQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 167, 7);
			
			/*expRow3BatchNo=excelReader.getCellData("SmokeSalesInvoiceVAT", 168, 7);
			expRow3BaseQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 169, 7);
			expRow3Rate=excelReader.getCellData("SmokeSalesInvoiceVAT", 170, 7);
			expRow3AdjustedQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 171, 7);*/
			
		
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 154, 8, actBatchName);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 155, 8, actTotalQty);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 156, 8, actAdjustedQty);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 157, 8, actBalance);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 158, 8, actTotalQtyFooter);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 159, 8, actTotalAdjustedQtyFooter);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 160, 8, actRow1BatchNo);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 161, 8, actRow1BaseQty);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 162, 8, actRow1Rate);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 163, 8, actRow1AdjustedQty);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 164, 8, actRow2BatchNo);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 165, 8, actRow2BaseQty);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 166, 8, actRow2Rate);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 167, 8, actRow2AdjustedQty);
			
			/*excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 168, 8, actRow3BatchNo);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 169, 8, actRow3BaseQty);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 170, 8, actRow3Rate);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 171, 8, actRow3AdjustedQty);*/
			
			System.out.println(actBatchName);
			System.out.println(actTotalQty);
			System.out.println(actAdjustedQty);
			System.out.println(actBalance);
			
			
			System.out.println(actTotalAdjustedQtyFooter);
			System.out.println(actTotalQtyFooter);
				
			//First Row
			
			System.out.println(actRow1BatchNo);
			System.out.println(actRow1BaseQty);
			System.out.println(actRow1Rate);
			System.out.println(actRow1AdjustedQty);

			
			//Second Row
			
			System.out.println(actRow2BatchNo);
			System.out.println(actRow2BaseQty);
			System.out.println(actRow2Rate);
			System.out.println(actRow2AdjustedQty);
		
			System.out.println("*********************************************** checkBatchWiseScreenPopupWithPickOnFIFO  ********************************************");
			System.out.println("Entry Page Batch Popup Batch Name Value Actual          : "+actBatchName              + " Value Expected : "+expBatchName);	
			System.out.println("Entry Page Batch Popup Total Qty Value Actual           : "+actTotalQty               + " Value Expected : "+expTotalQty);
			System.out.println("Entry Page Batch Popup Adjusted Qty Value Actual        : "+actAdjustedQty            + " Value Expected : "+expAdjustedQty);
			System.out.println("Entry Page Batch Popup Balance Value Actual             : "+actBalance                + " Value Expected : "+expBalance);
			System.out.println("Entry Page Batch Popup Adjusted Qty Footer Value Actual : "+actTotalAdjustedQtyFooter + " Value Expected : "+expTotalAdjustedQtyFooter);
			System.out.println("Entry Page Batch Popup Total Qty Footer Value Actual    : "+actTotalQtyFooter         + " Value Expected : "+expTotalQtyFooter);
			
			System.out.println("Entry Page Batch Popup Row1 Batch No Value Actual       : "+actRow1BatchNo            + " Value Expected : "+expRow1BatchNo);	
			System.out.println("Entry Page Batch Popup Row1 Base Qty Value Actual       : "+actRow1BaseQty            + " Value Expected : "+expRow1BaseQty);
			System.out.println("Entry Page Batch Popup Row1 Rate Value Actual           : "+actRow1Rate               + " Value Expected : "+expRow1Rate);
			System.out.println("Entry Page Batch Popup Row1 Adjusted Qty Value Actual   : "+actRow1AdjustedQty        + " Value Expected : "+expRow1AdjustedQty);
			
			System.out.println("Entry Page Batch Popup Row2 Batch No Value Actual       : "+actRow2BatchNo            + " Value Expected : "+expRow2BatchNo);	
			System.out.println("Entry Page Batch Popup Row2 Base Qty Value Actual       : "+actRow2BaseQty            + " Value Expected : "+expRow2BaseQty);
			System.out.println("Entry Page Batch Popup Row2 Rate Value Actual           : "+actRow2Rate               + " Value Expected : "+expRow2Rate);
			System.out.println("Entry Page Batch Popup Row2 Adjusted Qty Value Actual   : "+actRow2AdjustedQty        + " Value Expected : "+expRow2AdjustedQty);

			/*System.out.println("Entry Page Batch Popup Value Actual  : "+actRow3BatchNo                  +" Value Expected : "+expRow3BatchNo);	
			System.out.println("Entry Page Batch Popup Value Actual  : "+actRow3BaseQty                  +" Value Expected : "+expRow3BaseQty);
			System.out.println("Entry Page Batch Popup Value Actual  : "+actRow3Rate                     +" Value Expected : "+expRow3Rate);
			System.out.println("Entry Page Batch Popup Value Actual  : "+actRow3AdjustedQty              +" Value Expected : "+expRow3AdjustedQty);*/

			if(actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
					&& actBalance.equalsIgnoreCase(expBalance) 
					
					&& actTotalAdjustedQtyFooter.equalsIgnoreCase(expTotalAdjustedQtyFooter) && actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) 
					
					&& actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow1BaseQty.equalsIgnoreCase(expRow1BaseQty) && actRow1Rate.equalsIgnoreCase(expRow1Rate) 
					&& actRow1AdjustedQty.equalsIgnoreCase(expRow1AdjustedQty) 
					
					&& actRow2BatchNo.equalsIgnoreCase(expRow2BatchNo) && actRow2BaseQty.equalsIgnoreCase(expRow2BaseQty) && actRow2Rate.equalsIgnoreCase(expRow2Rate) 
					&& actRow2AdjustedQty.equalsIgnoreCase(expRow2AdjustedQty)
					
					/*&& actRow3BatchNo.equalsIgnoreCase(expRow3BatchNo) && actRow3BaseQty.equalsIgnoreCase(expRow3BaseQty) && actRow3Rate.equalsIgnoreCase(expRow3Rate) 
					&& actRow3AdjustedQty.equalsIgnoreCase(expRow3AdjustedQty)*/)
			{
				System.out.println("Test Pass : Batch fields are As expected ");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 153, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Batch fields are As Not  expected ");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 153, 9, resFail);
				return false;
			}
	   }
		 
		 
		 
			 
		 public boolean checkFirstRowByClickOnOkButtonInBatchWisePopupScreenPickingBatch() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";		
			 
			 Thread.sleep(2000);
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
	    	 batchOkIcon.click();
	    	 
	    	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
	    	 
	    	 int voucherGridBodyListCount = voucherGridBodyList.size();
				
	    	 ArrayList<String> voucherGridBodyListArray = new ArrayList<String>();
				
	    	 for(int i=0;i<voucherGridBodyListCount;i++)
	    	 {
	    		 
	    		 String data = voucherGridBodyList.get(i).getText();
	    		 
	    		 
	    		 voucherGridBodyListArray.add(data);
	    	 }	
					
	    	 
	    	 String actvoucherGridBodyList = voucherGridBodyListArray.toString();
				
	    	 String expvoucherGridBodyList = excelReader.getCellData("SmokeSalesInvoiceVAT", 172, 7);
	    	 
	    	 excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 172, 8, actvoucherGridBodyList);
				
	    	 System.out.println("voucherGridBodyList Actual    : " + actvoucherGridBodyList);
	    	 System.out.println("voucherGridBodyList Expected  : " + expvoucherGridBodyList);
	    	 
			 
			 if(actvoucherGridBodyList.equalsIgnoreCase(expvoucherGridBodyList))
			 {
				 System.out.println("Test Pass : Data Is As Expected");
				 excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 172, 9, resPass);
				 return true;
			 }
			 else
			 {
				 System.out.println("Test Fail : Data Is NOT As Expected");
				 excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 172, 9, resFail);
				 return false;
			 }
			 
		 }
		 
		 
		 
		 public boolean CheckInputingAqAndFqForBatchSplittingInSecondandThirdRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
			 
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";		
			 
             
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
				select2ndRow_1stColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
				pvWareHouseTxt.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
				enter_ItemTxt.sendKeys(Keys.END);
				enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
				enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
				enter_ItemTxt.sendKeys(Keys.SPACE);
				
				int itemcount1=itemListCount.size();
				
				System.err.println(itemcount1);
					
				for(int i=0 ; i < itemcount1 ;i++)
				{
					String data=itemListCount.get(i).getText();
					
					if(data.equalsIgnoreCase(excelReader.getCellData("SmokeSalesInvoiceVAT", 174, 6)))
					{
						itemListCount.get(i).click();
						
						break;
					}
				}
					
				enter_ItemTxt.sendKeys(Keys.TAB);	
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_5thColumn));
				select2ndRow_5thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
				enter_UnitTxt.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_8thColumn));
				select2ndRow_8thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
				enter_AQTxt.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVAT", 175, 6));
				enter_AQTxt.sendKeys(Keys.TAB);
							
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
				enter_FQTxt.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVAT", 176, 6));
				enter_FQTxt.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_11thColumn));
				select2ndRow_11thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
				enter_Quantity.sendKeys("140");
				enter_Quantity.sendKeys(Keys.TAB);
							
				Thread.sleep(3000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_11thColumn));
				String actQtyInput=select2ndRow_11thColumn.getText();
				String expQtyInput=excelReader.getCellData("SmokeSalesInvoiceVAT", 177, 7);
				
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 177, 8, actQtyInput);
	

				 System.out.println("*********************************** checkSecondRowQtyOnInputOfAQ  ************************************");
				 System.out.println("Entry Page Qty Change Batch Column Value Actual   : "+actQtyInput  +" Value Expected : "+expQtyInput);	
		
					if(actQtyInput.equalsIgnoreCase(expQtyInput))	
					{
						System.out.println("Test Pass : Batch Column is displaying Blank on Updating the Qty");
						excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 173, 9, resPass);
						 return true;
					}
					else
					{
						System.out.println("Test Pass : Batch Column is not displaying Blank on Updating Qty ");
						excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 173, 9, resFail);
						 return false;
					}
				
			
			}
		 
		 
		 
		 
		 public boolean checkBatchWisePopupBeforePickFIFOInSecondRowOfBatchColumn() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";		
			             
			 
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_19thColumn));
			 select2ndRow_19thColumn.click();
				
			 Thread.sleep(3000);
				
				
			 System.out.println("Batch Rows"+batchPopUPEmptyRows.getAttribute("data-totalrows"));
				
			 String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
		     String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
				
			String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
			String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
			
			String actRow3BatchNo,actRow3BaseQty,actRow3Rate,actRow3AdjustedQty,actRow3TotalAdjustedQty;
			String expRow3BatchNo,expRow3BaseQty,expRow3Rate,expRow3AdjustedQty,expRow3TotalAdjustedQty;
			
			actBatchName=batchItemName.getText();
			actTotalQty=batchTotalQty.getText();
			actAdjustedQty=batchAdjustQty.getText();
			actBalance=batchBalance.getText();
			actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
			actTotalQtyFooter=batchTotalQtyFooter.getText();
			
			
			actRow1BatchNo=batch_BatchNoRow1.getText();
			actRow1BaseQty=batch_BaseQtyRow1.getText();
			//act7=batch_ExpiryInDateRow1.getText();
			actRow1Rate=batch_RateRow1.getText();
			actRow1AdjustedQty=batch_QtyAdjustedRow1.getText();
			//act10=batch_PurchaseDateRow1.getText();

			
			actRow2BatchNo=batch_BatchNoRow2.getText();
			actRow2BaseQty=batch_BaseQtyRow2.getText();
			//act14=batch_ExpiryInDateRow2.getText();
			actRow2Rate=batch_RateRow2.getText();
			actRow2AdjustedQty=batch_QtyAdjustedRow2.getText();
			//act17=batch_PurchaseDateRow2.getText();
			


			expBatchName=excelReader.getCellData("SmokeSalesInvoiceVAT", 179, 7);
			expTotalQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 180, 7);
			expAdjustedQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 181, 7);
			expBalance=excelReader.getCellData("SmokeSalesInvoiceVAT", 182, 7);
			
			
			expTotalQtyFooter=excelReader.getCellData("SmokeSalesInvoiceVAT", 183, 7);
			expTotalAdjustedQtyFooter=excelReader.getCellData("SmokeSalesInvoiceVAT", 184, 7);
			
			
			expRow1BatchNo=excelReader.getCellData("SmokeSalesInvoiceVAT", 185, 7);
			expRow1BaseQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 186, 7);
			expRow1Rate=excelReader.getCellData("SmokeSalesInvoiceVAT", 187, 7);
			expRow1AdjustedQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 188, 7);
			
		
			expRow2BatchNo=excelReader.getCellData("SmokeSalesInvoiceVAT", 189, 7);
			expRow2BaseQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 190, 7);
			expRow2Rate=excelReader.getCellData("SmokeSalesInvoiceVAT", 191, 7);
			expRow2AdjustedQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 192, 7);
			
			
		
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 179, 8, actBatchName);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 180, 8, actTotalQty);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 181, 8, actAdjustedQty);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 182, 8, actBalance);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 183, 8, actTotalQtyFooter);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 184, 8, actTotalAdjustedQtyFooter);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 185, 8, actRow1BatchNo);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 186, 8, actRow1BaseQty);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 187, 8, actRow1Rate);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 188, 8, actRow1AdjustedQty);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 189, 8, actRow2BatchNo);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 190, 8, actRow2BaseQty);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 191, 8, actRow2Rate);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 192, 8, actRow2AdjustedQty);
			
			
			System.out.println(actBatchName);
			System.out.println(actTotalQty);
			System.out.println(actAdjustedQty);
			System.out.println(actBalance);
			
			
			System.out.println(actTotalAdjustedQtyFooter);
			System.out.println(actTotalQtyFooter);
				
			//First Row
			
			System.out.println(actRow1BatchNo);
			System.out.println(actRow1BaseQty);
			System.out.println(actRow1Rate);
			System.out.println(actRow1AdjustedQty);

			
			//Second Row
			
			System.out.println(actRow2BatchNo);
			System.out.println(actRow2BaseQty);
			System.out.println(actRow2Rate);
			System.out.println(actRow2AdjustedQty);
		
			System.out.println("*********************************************** checkBatchWiseScreenPopupWithPickOnFIFO  ********************************************");
			System.out.println("Entry Page Batch Popup Batch Name Value Actual          : "+actBatchName              + " Value Expected : "+expBatchName);	
			System.out.println("Entry Page Batch Popup Total Qty Value Actual           : "+actTotalQty               + " Value Expected : "+expTotalQty);
			System.out.println("Entry Page Batch Popup Adjusted Qty Value Actual        : "+actAdjustedQty            + " Value Expected : "+expAdjustedQty);
			System.out.println("Entry Page Batch Popup Balance Value Actual             : "+actBalance                + " Value Expected : "+expBalance);
			System.out.println("Entry Page Batch Popup Adjusted Qty Footer Value Actual : "+actTotalAdjustedQtyFooter + " Value Expected : "+expTotalAdjustedQtyFooter);
			System.out.println("Entry Page Batch Popup Total Qty Footer Value Actual    : "+actTotalQtyFooter         + " Value Expected : "+expTotalQtyFooter);
			
			System.out.println("Entry Page Batch Popup Row1 Batch No Value Actual       : "+actRow1BatchNo            + " Value Expected : "+expRow1BatchNo);	
			System.out.println("Entry Page Batch Popup Row1 Base Qty Value Actual       : "+actRow1BaseQty            + " Value Expected : "+expRow1BaseQty);
			System.out.println("Entry Page Batch Popup Row1 Rate Value Actual           : "+actRow1Rate               + " Value Expected : "+expRow1Rate);
			System.out.println("Entry Page Batch Popup Row1 Adjusted Qty Value Actual   : "+actRow1AdjustedQty        + " Value Expected : "+expRow1AdjustedQty);
			
			System.out.println("Entry Page Batch Popup Row2 Batch No Value Actual       : "+actRow2BatchNo            + " Value Expected : "+expRow2BatchNo);	
			System.out.println("Entry Page Batch Popup Row2 Base Qty Value Actual       : "+actRow2BaseQty            + " Value Expected : "+expRow2BaseQty);
			System.out.println("Entry Page Batch Popup Row2 Rate Value Actual           : "+actRow2Rate               + " Value Expected : "+expRow2Rate);
			System.out.println("Entry Page Batch Popup Row2 Adjusted Qty Value Actual   : "+actRow2AdjustedQty        + " Value Expected : "+expRow2AdjustedQty);


			if(actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
					&& actBalance.equalsIgnoreCase(expBalance) 
					
					&& actTotalAdjustedQtyFooter.equalsIgnoreCase(expTotalAdjustedQtyFooter) && actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) 
					
					&& actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow1BaseQty.equalsIgnoreCase(expRow1BaseQty) && actRow1Rate.equalsIgnoreCase(expRow1Rate) 
					&& actRow1AdjustedQty.equalsIgnoreCase(expRow1AdjustedQty) 
					
					&& actRow2BatchNo.equalsIgnoreCase(expRow2BatchNo) && actRow2BaseQty.equalsIgnoreCase(expRow2BaseQty) && actRow2Rate.equalsIgnoreCase(expRow2Rate) 
					&& actRow2AdjustedQty.equalsIgnoreCase(expRow2AdjustedQty))
				{
					System.out.println("Test Pass : Batch fields are As expected ");
					excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 178, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Batch fields are As Not  expected ");
					excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 178, 9, resFail);
					return false;
				}
			 
		 }
		 
		 
		 
		 
		 
		 public boolean checkBatchWisePopupAfterPickFIFOInSecondRowOfBatchColumn() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {

			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";		
			 
			 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
			batchPickOnFIFOIcon.click();
			 
		    Thread.sleep(2000);
				
		    System.out.println("Batch Rows"+batchPopUPEmptyRows.getAttribute("data-totalrows"));
		    
		    String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
		     String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
				
			String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
			String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
			
			String actRow3BatchNo,actRow3BaseQty,actRow3Rate,actRow3AdjustedQty,actRow3TotalAdjustedQty;
			String expRow3BatchNo,expRow3BaseQty,expRow3Rate,expRow3AdjustedQty,expRow3TotalAdjustedQty;
			
			actBatchName=batchItemName.getText();
			actTotalQty=batchTotalQty.getText();
			actAdjustedQty=batchAdjustQty.getText();
			actBalance=batchBalance.getText();
			actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
			actTotalQtyFooter=batchTotalQtyFooter.getText();
			
			
			actRow1BatchNo=batch_BatchNoRow1.getText();
			actRow1BaseQty=batch_BaseQtyRow1.getText();
			//act7=batch_ExpiryInDateRow1.getText();
			actRow1Rate=batch_RateRow1.getText();
			actRow1AdjustedQty=batch_QtyAdjustedRow1.getText();
			//act10=batch_PurchaseDateRow1.getText();

			
			actRow2BatchNo=batch_BatchNoRow2.getText();
			actRow2BaseQty=batch_BaseQtyRow2.getText();
			//act14=batch_ExpiryInDateRow2.getText();
			actRow2Rate=batch_RateRow2.getText();
			actRow2AdjustedQty=batch_QtyAdjustedRow2.getText();
			//act17=batch_PurchaseDateRow2.getText();
			


			expBatchName=excelReader.getCellData("SmokeSalesInvoiceVAT", 194, 7);
			expTotalQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 195, 7);
			expAdjustedQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 196, 7);
			expBalance=excelReader.getCellData("SmokeSalesInvoiceVAT", 197, 7);
			
			
			expTotalQtyFooter=excelReader.getCellData("SmokeSalesInvoiceVAT", 198, 7);
			expTotalAdjustedQtyFooter=excelReader.getCellData("SmokeSalesInvoiceVAT", 199, 7);
			
			
			expRow1BatchNo=excelReader.getCellData("SmokeSalesInvoiceVAT", 200, 7);
			expRow1BaseQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 201, 7);
			expRow1Rate=excelReader.getCellData("SmokeSalesInvoiceVAT", 202, 7);
			expRow1AdjustedQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 203, 7);
			
		
			expRow2BatchNo=excelReader.getCellData("SmokeSalesInvoiceVAT", 204, 7);
			expRow2BaseQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 205, 7);
			expRow2Rate=excelReader.getCellData("SmokeSalesInvoiceVAT", 206, 7);
			expRow2AdjustedQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 207, 7);
			
			
		
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 194, 8, actBatchName);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 195, 8, actTotalQty);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 196, 8, actAdjustedQty);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 197, 8, actBalance);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 198, 8, actTotalQtyFooter);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 199, 8, actTotalAdjustedQtyFooter);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 200, 8, actRow1BatchNo);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 201, 8, actRow1BaseQty);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 202, 8, actRow1Rate);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 203, 8, actRow1AdjustedQty);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 204, 8, actRow2BatchNo);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 205, 8, actRow2BaseQty);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 206, 8, actRow2Rate);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 207, 8, actRow2AdjustedQty);
			
			
			System.out.println(actBatchName);
			System.out.println(actTotalQty);
			System.out.println(actAdjustedQty);
			System.out.println(actBalance);
			
			
			System.out.println(actTotalAdjustedQtyFooter);
			System.out.println(actTotalQtyFooter);
				
			//First Row
			
			System.out.println(actRow1BatchNo);
			System.out.println(actRow1BaseQty);
			System.out.println(actRow1Rate);
			System.out.println(actRow1AdjustedQty);

			
			//Second Row
			
			System.out.println(actRow2BatchNo);
			System.out.println(actRow2BaseQty);
			System.out.println(actRow2Rate);
			System.out.println(actRow2AdjustedQty);
		
			System.out.println("*********************************************** checkBatchWiseScreenPopupWithPickOnFIFO  ********************************************");
			System.out.println("Entry Page Batch Popup Batch Name Value Actual          : "+actBatchName              + " Value Expected : "+expBatchName);	
			System.out.println("Entry Page Batch Popup Total Qty Value Actual           : "+actTotalQty               + " Value Expected : "+expTotalQty);
			System.out.println("Entry Page Batch Popup Adjusted Qty Value Actual        : "+actAdjustedQty            + " Value Expected : "+expAdjustedQty);
			System.out.println("Entry Page Batch Popup Balance Value Actual             : "+actBalance                + " Value Expected : "+expBalance);
			System.out.println("Entry Page Batch Popup Adjusted Qty Footer Value Actual : "+actTotalAdjustedQtyFooter + " Value Expected : "+expTotalAdjustedQtyFooter);
			System.out.println("Entry Page Batch Popup Total Qty Footer Value Actual    : "+actTotalQtyFooter         + " Value Expected : "+expTotalQtyFooter);
			
			System.out.println("Entry Page Batch Popup Row1 Batch No Value Actual       : "+actRow1BatchNo            + " Value Expected : "+expRow1BatchNo);	
			System.out.println("Entry Page Batch Popup Row1 Base Qty Value Actual       : "+actRow1BaseQty            + " Value Expected : "+expRow1BaseQty);
			System.out.println("Entry Page Batch Popup Row1 Rate Value Actual           : "+actRow1Rate               + " Value Expected : "+expRow1Rate);
			System.out.println("Entry Page Batch Popup Row1 Adjusted Qty Value Actual   : "+actRow1AdjustedQty        + " Value Expected : "+expRow1AdjustedQty);
			
			System.out.println("Entry Page Batch Popup Row2 Batch No Value Actual       : "+actRow2BatchNo            + " Value Expected : "+expRow2BatchNo);	
			System.out.println("Entry Page Batch Popup Row2 Base Qty Value Actual       : "+actRow2BaseQty            + " Value Expected : "+actRow2BaseQty);
			System.out.println("Entry Page Batch Popup Row2 Rate Value Actual           : "+expRow2Rate               + " Value Expected : "+actRow2Rate);
			System.out.println("Entry Page Batch Popup Row2 Adjusted Qty Value Actual   : "+actRow2AdjustedQty        + " Value Expected : "+expRow2AdjustedQty);


			if(actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
					&& actBalance.equalsIgnoreCase(expBalance) 
					
					&& actTotalAdjustedQtyFooter.equalsIgnoreCase(expTotalAdjustedQtyFooter) && actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) 
					
					&& actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow1BaseQty.equalsIgnoreCase(expRow1BaseQty) && actRow1Rate.equalsIgnoreCase(expRow1Rate) 
					&& actRow1AdjustedQty.equalsIgnoreCase(expRow1AdjustedQty) 
					
					&& actRow2BatchNo.equalsIgnoreCase(expRow2BatchNo) && actRow2BaseQty.equalsIgnoreCase(expRow2BaseQty) && actRow2Rate.equalsIgnoreCase(expRow2Rate) 
					&& actRow2AdjustedQty.equalsIgnoreCase(expRow2AdjustedQty))
				{
					System.out.println("Test Pass : Batch fields are As expected ");
					excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 193, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Batch fields are As Not  expected ");
					excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 193, 9, resFail);
					return false;
				}
			 
		 }
		 
		 
		

		 
		 public boolean checkBatchSplittingAfterClickOnOKinBatchPopUpScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
				 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			     xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
			     
				    
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		    	 batchOkIcon.click();
		    	 
				 Thread.sleep(3000);
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		    	 
		    	 int voucherGridBodyListCount = voucherGridBodyList.size();
					
		    	 ArrayList<String> voucherGridBodyListArray = new ArrayList<String>();
					
		    	 for(int i=0;i<voucherGridBodyListCount;i++)
		    	 {
		    		 
		    		 String data = voucherGridBodyList.get(i).getText();
		    		 
		    		 
		    		 voucherGridBodyListArray.add(data);
		    	 }	
						
		    	 
		    	 String actvoucherGridBodyList = voucherGridBodyListArray.toString();
					
		    	 String expvoucherGridBodyList = excelReader.getCellData("SmokeSalesInvoiceVAT", 208, 7);
		    	 
		    	 excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 208, 8, actvoucherGridBodyList);
					
		    	 System.out.println("voucherGridBodyList Actual    : " + actvoucherGridBodyList);
		    	 System.out.println("voucherGridBodyList Expected  : " + expvoucherGridBodyList);
		    	 
				 
				 if(actvoucherGridBodyList.equalsIgnoreCase(expvoucherGridBodyList))
				 {
					 System.out.println("Test Pass : Data Is As Expected");
					 excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 208, 9, resPass);
					 return true;
				 }
				 else
				 {
					 System.out.println("Test Fail : Data Is NOT As Expected");
					 excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 208, 9, resFail);
					 return false;
				 }
					    
			}
		 
		 
		 
		 
		 public boolean checkBatchPopUpDisplayasEmptyAfteFullConsumeOfBatch() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
			 
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_1stColumn));
			 select4thRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
			pvWareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.END);
			enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemcount1=itemListCount.size();
			
			System.err.println(itemcount1);
				
			for(int i=0 ; i < itemcount1 ;i++)
			{
				String data=itemListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("SmokeSalesInvoiceVAT", 210, 6)))
				{
					itemListCount.get(i).click();
					
					break;
				}
			}
				
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_5thColumn));
			select4thRow_5thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_8thColumn));
			select4thRow_8thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
			enter_AQTxt.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVAT", 211, 6));
			enter_AQTxt.sendKeys(Keys.TAB);
			
			/*String expMessage = excelReader.getCellData("SmokeSalesInvoiceVAT", 211, 7);
			String actMessage = checkValidationMessage(expMessage);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 211, 8, actMessage);*/
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_11thColumn));
			select4thRow_11thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("1");
			enter_Quantity.sendKeys(Keys.TAB);
			
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_11thColumn));
			String actQtyInput=select4thRow_11thColumn.getText();
			String expQtyInput=excelReader.getCellData("SmokeSalesInvoiceVAT", 212, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 212, 8, actQtyInput);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_19thColumn));
			select4thRow_19thColumn.click();
			
			String actBatchScreenRowCnt=batchPopUPEmptyRows.getAttribute("data-totalrows");
			String expBatchScreenRowCnt=excelReader.getCellData("SmokeSalesInvoiceVAT", 213, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 213, 8, actQtyInput);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
			batchCancelIcon.click();

			 System.out.println("*********************************** checkSecondRowQtyOnInputOfAQ  ************************************");
			 //System.out.println("Message : "+actMessage+" Value Expected : "+expMessage);
			 System.out.println("Entry Page Qty Change Batch Column Value Actual   : "+actQtyInput  +" Value Expected : "+expQtyInput);
			 System.out.println("BatchScreenRowCnt : "+actBatchScreenRowCnt+" Value Expected : "+expBatchScreenRowCnt);
	
			 if(/*actMessage.equalsIgnoreCase(expMessage) &&*/ actQtyInput.equalsIgnoreCase(expQtyInput) && actBatchScreenRowCnt.equalsIgnoreCase(expBatchScreenRowCnt))	
			 {
				 System.out.println("Test Pass : Batch Column is displaying Blank on Updating the Qty");
				 excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 209, 9, resPass);
				 return true;
			 }
			 else
			 {
				 	System.out.println("Test Pass : Batch Column is not displaying Blank on Updating Qty ");
				 	excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 209, 9, resFail);
				 	return false;
			 }
		}
		 
		 
		 @FindBy(xpath="//textarea[@id='id_body_16777297']")
		 private static WebElement SalesInvoiceVatRemarks;
		 
		 public boolean checkDeleteRowAndSaveSalesVoucherWithBatchItem() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
			 
			 
			 SalesInvoiceVatRemarks.sendKeys(Keys.CONTROL+ "D");
			 
			/* getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fourthRowIndex));
			 fourthRowIndex.click();
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
			 deleteRowBtn.click();*/
			 
			 String docno=documentNumberTxt.getAttribute("value");
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			
			
			boolean savingVoucher=checkVoucherSavingMessage(docno);
			
			
			String actSavingVoucher=Boolean.toString(savingVoucher);
			String expSavingVoucher=excelReader.getCellData("SmokeSalesInvoiceVAT", 214, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 214, 8, actSavingVoucher);
			
			

			System.out.println("*********************************************** checkSavingSalesVoucherNewWithEmptyRows  ********************************************");
			System.out.println("Transaction Saving   Message  : "+actSavingVoucher+" Value Expected : "+expSavingVoucher);	
			
			
			if (actSavingVoucher.equalsIgnoreCase(expSavingVoucher) )
			{
				System.out.println("Test Pass : Qty Preload Value is displaying Correct");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 214, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Qty Preload Value is displaying Wrong");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 214, 9, resFail);
				return false;
			}
		}
		 
		 
		 
		 public boolean checkBatchPopUpDisplayasEmptyAfteFullConsumeOfBatchInPreviousVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
			 
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			 customerAccountTxt.click();
			 customerAccountTxt.sendKeys(Keys.SPACE);
			 
			 int customercount=customerAccountListCount.size();
			 
			 System.err.println(customercount);
			 
			 for(int i=0 ; i < customercount ;i++)
			 {
				 String data=customerAccountListCount.get(i).getText();
				 
				 if(data.equalsIgnoreCase(excelReader.getCellData("SmokeSalesInvoiceVAT", 215, 6)))
				 {
					 customerAccountListCount.get(i).click();
					 
					 break;
				 }
			 }
				
			 customerAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
				
			int departmentcount=departmentListCount.size();
			
			System.err.println(departmentcount);
				
			for(int i=0 ; i < departmentcount ;i++)
			{
				String data=departmentListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("SmokeSalesInvoiceVAT", 216, 6)))
				{
					departmentListCount.get(i).click();
					
					break;
				}
			}
				
			departmentTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
			pvWareHouseTxt.sendKeys(Keys.SPACE);
			
			int pvWareHouseTxtCount=pvwareHouseListCount.size();
			
			System.err.println(pvWareHouseTxtCount);
			
			for(int i=0 ; i < pvWareHouseTxtCount ;i++)
			{
				String data=pvwareHouseListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("SmokeSalesInvoiceVAT", 217, 6)))
				{
					pvwareHouseListCount.get(i).click();
					
					break;
				}
			}
			
			pvWareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.END);
			enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemcount1=itemListCount.size();
			
			System.err.println(itemcount1);
				
			for(int i=0 ; i < itemcount1 ;i++)
			{
				String data=itemListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("SmokeSalesInvoiceVAT", 218, 6)))
				{
					itemListCount.get(i).click();
					
					break;
				}
			}
				
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			select1stRow_8thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
			enter_AQTxt.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVAT", 219, 6));
			enter_AQTxt.sendKeys(Keys.TAB);
			
			/*String expMessage = excelReader.getCellData("SmokeSalesInvoiceVAT", 219, 7);
			String actMessage = checkValidationMessage(expMessage);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 219, 8, actMessage);*/
						
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
			select1stRow_11thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("1");
			enter_Quantity.sendKeys(Keys.TAB);
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
			String actQtyInput=select1stRow_11thColumn.getText();
			String expQtyInput=excelReader.getCellData("SmokeSalesInvoiceVAT", 220, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 220, 8, actQtyInput);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			select1stRow_19thColumn.click();
			
			String actBatchScreenRowCnt=batchPopUPEmptyRows.getAttribute("data-totalrows");
			String expBatchScreenRowCnt=excelReader.getCellData("SmokeSalesInvoiceVAT", 221, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 221, 8, actQtyInput);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
			batchCancelIcon.click();

			 System.out.println("*********************************** checkBatchPopUpDisplayasEmptyAfteFullConsumeOfBatchInPreviousVoucher  ************************************");
			//System.out.println("Message : "+actMessage+" Value Expected : "+expMessage);
			 System.out.println("Entry Page Qty Change Batch Column Value Actual   : "+actQtyInput  +" Value Expected : "+expQtyInput);
			 System.out.println("BatchScreenRowCnt : "+actBatchScreenRowCnt+" Value Expected : "+expBatchScreenRowCnt);
	
			 if(/*actMessage.equalsIgnoreCase(expMessage) &&*/ actQtyInput.equalsIgnoreCase(expQtyInput) && actBatchScreenRowCnt.equalsIgnoreCase(expBatchScreenRowCnt))	
			 {
				 System.out.println("Test Pass : Batch Column is displaying Blank on Updating the Qty");
				 excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 215, 9, resPass);
				 return true;
			 }
			 else
			 {
				 	System.out.println("Test Pass : Batch Column is not displaying Blank on Updating Qty ");
				 	excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 215, 9, resFail);
				 	return false;
			 }
		}
		 
		 
		 
		 
		 public boolean checkSavedVoucherOnPreviousButton() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
			 previousBtn.click();
			 
			 getWaitForAlert();
			 
			 String actAlert = getAlert().getText();
			 String expAlert1 = excelReader.getCellData("SmokeSalesInvoiceVAT", 222, 7);
			 String expAlert2 = excelReader.getCellData("SmokeSalesInvoiceVAT", 223, 7);
			 
			 excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 222, 8, actAlert);
			 
			 getAlert().accept();
			 
			 checkUserFriendlyMessage();
			 
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			 customerAccountTxt.click();
			 
			 String actcustomerAccountTxt = customerAccountTxt.getAttribute("value");
			 String expcustomerAccountTxt = excelReader.getCellData("SmokeSalesInvoiceVAT", 224, 7);
			 
			 excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 224, 8, actcustomerAccountTxt);
			 
			 
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			
			String actdepartmentTxt = departmentTxt.getAttribute("value");
			String expdepartmentTxt = excelReader.getCellData("SmokeSalesInvoiceVAT", 225, 7);
			 
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 225, 8, actdepartmentTxt);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
	    	 
	    	 int voucherGridBodyListCount = voucherGridBodyList.size();
				
	    	 ArrayList<String> voucherGridBodyListArray = new ArrayList<String>();
				
	    	 for(int i=0;i<voucherGridBodyListCount;i++)
	    	 {
	    		 
	    		 String data = voucherGridBodyList.get(i).getText();
	    		 
	    		 
	    		 voucherGridBodyListArray.add(data);
	    	 }	
					
	    	 
	    	 String actvoucherGridBodyList = voucherGridBodyListArray.toString();
				
	    	 String expvoucherGridBodyList = excelReader.getCellData("SmokeSalesInvoiceVAT", 226, 7);
	    	 
	    	 excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 226, 8, actvoucherGridBodyList);
				
	    	 System.out.println("voucherGridBodyList Actual    : " + actvoucherGridBodyList);
	    	 System.out.println("voucherGridBodyList Expected  : " + expvoucherGridBodyList);
			

			 System.out.println("*********************************** checkSecondRowQtyOnInputOfAQ  ************************************");
			 System.out.println("Alert : "+actAlert+" Value Expected : "+expAlert1+expAlert2);
			 System.out.println("customerAccountTxt   : "+actcustomerAccountTxt  +" Value Expected : "+expcustomerAccountTxt);
			 System.out.println("departmentTxt : "+actdepartmentTxt+" Value Expected : "+expdepartmentTxt);
	
			 if(actAlert.startsWith(expAlert1)	 && actAlert.endsWith(expAlert2) && actcustomerAccountTxt.equalsIgnoreCase(expcustomerAccountTxt)
					 && actdepartmentTxt.equalsIgnoreCase(expdepartmentTxt) && actvoucherGridBodyList.equalsIgnoreCase(expvoucherGridBodyList))
			 {
				 System.out.println("Test Pass : Batch Column is displaying Blank on Updating the Qty");
				 excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 222, 9, resPass);
				 return true;
			 }
			 else
			 {
				 	System.out.println("Test Pass : Batch Column is not displaying Blank on Updating Qty ");
				 	excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 222, 9, resFail);
				 	return false;
			 }
		}
		 
		 
		 public boolean checkBatchPopUpDisplayasEmptyInSavedVoucherAfterFullConsuming() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
			 
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_1stColumn));
			 select4thRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
			pvWareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.END);
			enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemcount1=itemListCount.size();
			
			System.err.println(itemcount1);
				
			for(int i=0 ; i < itemcount1 ;i++)
			{
				String data=itemListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("SmokeSalesInvoiceVAT", 228, 6)))
				{
					itemListCount.get(i).click();
					
					break;
				}
			}
				
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_5thColumn));
			select4thRow_5thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_8thColumn));
			select4thRow_8thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
			enter_AQTxt.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVAT", 229, 6));
			enter_AQTxt.sendKeys(Keys.TAB);
			
			/*String expMessage = excelReader.getCellData("SmokeSalesInvoiceVAT", 229, 7);
			String actMessage = checkValidationMessage(expMessage);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 229, 8, actMessage);*/
						
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_11thColumn));
			select4thRow_11thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("1");
			enter_Quantity.sendKeys(Keys.TAB);
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_11thColumn));
			String actQtyInput=select4thRow_11thColumn.getText();
			String expQtyInput=excelReader.getCellData("SmokeSalesInvoiceVAT", 230, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 230, 8, actQtyInput);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_19thColumn));
			select4thRow_19thColumn.click();
			
			String actBatchScreenRowCnt=batchPopUPEmptyRows.getAttribute("data-totalrows");
			String expBatchScreenRowCnt=excelReader.getCellData("SmokeSalesInvoiceVAT", 231, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 231, 8, actQtyInput);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
			batchCancelIcon.click();

			 System.out.println("*********************************** checkSecondRowQtyOnInputOfAQ  ************************************");
			 //System.out.println("Message : "+actMessage+" Value Expected : "+expMessage);
			 System.out.println("Entry Page Qty Change Batch Column Value Actual   : "+actQtyInput  +" Value Expected : "+expQtyInput);
			 System.out.println("BatchScreenRowCnt : "+actBatchScreenRowCnt+" Value Expected : "+expBatchScreenRowCnt);
			 
			 for(int i=1;i<=3;i++)
			 {
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(secondRowIndex));
				 secondRowIndex.click();
				 
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
				 deleteRowBtn.click();
			 }
	
			 if(/*actMessage.equalsIgnoreCase(expMessage) &&*/ actQtyInput.equalsIgnoreCase(expQtyInput) && actBatchScreenRowCnt.equalsIgnoreCase(expBatchScreenRowCnt))	
			 {
				 System.out.println("Test Pass : Batch Column is displaying Blank on Updating the Qty");
				 excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 227, 9, resPass);
				 return true;
			 }
			 else
			 {
				 	System.out.println("Test Pass : Batch Column is not displaying Blank on Updating Qty ");
				 	excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 227, 9, resFail);
				 	return false;
			 }
		}
		 
		 
		 
		 
		 
		 public boolean checkBatchPopUpValuesAfterDeletingSecondAndThirdRows() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
			 
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";		
			 
            try
            {
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
				select2ndRow_1stColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
				pvWareHouseTxt.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
				enter_ItemTxt.sendKeys(Keys.END);
				enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
				enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
				enter_ItemTxt.sendKeys(Keys.SPACE);
				
				int itemcount1=itemListCount.size();
				
				System.err.println(itemcount1);
					
				for(int i=0 ; i < itemcount1 ;i++)
				{
					String data=itemListCount.get(i).getText();
					
					if(data.equalsIgnoreCase(excelReader.getCellData("SmokeSalesInvoiceVAT", 233, 6)))
					{
						itemListCount.get(i).click();
						
						break;
					}
				}
					
				enter_ItemTxt.sendKeys(Keys.TAB);	
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_5thColumn));
				select2ndRow_5thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
				enter_UnitTxt.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_8thColumn));
				select2ndRow_8thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
				enter_AQTxt.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVAT", 234, 6));
				enter_AQTxt.sendKeys(Keys.TAB);
							
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
				enter_FQTxt.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVAT", 235, 6));
				enter_FQTxt.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_11thColumn));
				select2ndRow_11thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
				enter_Quantity.sendKeys("20");
				enter_Quantity.sendKeys(Keys.TAB);
				
				Thread.sleep(3000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_11thColumn));
				String actQtyInput=select2ndRow_11thColumn.getText();
				String expQtyInput=excelReader.getCellData("SmokeSalesInvoiceVAT", 236, 7);
				
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 236, 8, actQtyInput);
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_19thColumn));
				select2ndRow_19thColumn.click();
					
				 Thread.sleep(3000);
					
					
				 System.out.println("Batch Rows"+batchPopUPEmptyRows.getAttribute("data-totalrows"));
					
				 String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
			     String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
					
				String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
				String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
				
				String actRow3BatchNo,actRow3BaseQty,actRow3Rate,actRow3AdjustedQty,actRow3TotalAdjustedQty;
				String expRow3BatchNo,expRow3BaseQty,expRow3Rate,expRow3AdjustedQty,expRow3TotalAdjustedQty;
				
				actBatchName=batchItemName.getText();
				actTotalQty=batchTotalQty.getText();
				actAdjustedQty=batchAdjustQty.getText();
				actBalance=batchBalance.getText();
				actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
				actTotalQtyFooter=batchTotalQtyFooter.getText();
				
				
				actRow1BatchNo=batch_BatchNoRow1.getText();
				actRow1BaseQty=batch_BaseQtyRow1.getText();
				//act7=batch_ExpiryInDateRow1.getText();
				actRow1Rate=batch_RateRow1.getText();
				actRow1AdjustedQty=batch_QtyAdjustedRow1.getText();
				//act10=batch_PurchaseDateRow1.getText();
	
				
				actRow2BatchNo=batch_BatchNoRow2.getText();
				actRow2BaseQty=batch_BaseQtyRow2.getText();
				//act14=batch_ExpiryInDateRow2.getText();
				actRow2Rate=batch_RateRow2.getText();
				actRow2AdjustedQty=batch_QtyAdjustedRow2.getText();
				//act17=batch_PurchaseDateRow2.getText();
				
	
	
				expBatchName=excelReader.getCellData("SmokeSalesInvoiceVAT", 237, 7);
				expTotalQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 238, 7);
				expAdjustedQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 239, 7);
				expBalance=excelReader.getCellData("SmokeSalesInvoiceVAT", 240, 7);
				
				
				expTotalQtyFooter=excelReader.getCellData("SmokeSalesInvoiceVAT", 241, 7);
				expTotalAdjustedQtyFooter=excelReader.getCellData("SmokeSalesInvoiceVAT", 242, 7);
				
				
				expRow1BatchNo=excelReader.getCellData("SmokeSalesInvoiceVAT", 243, 7);
				expRow1BaseQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 244, 7);
				expRow1Rate=excelReader.getCellData("SmokeSalesInvoiceVAT", 245, 7);
				expRow1AdjustedQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 246, 7);
				
			
				expRow2BatchNo=excelReader.getCellData("SmokeSalesInvoiceVAT", 247, 7);
				expRow2BaseQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 248, 7);
				expRow2Rate=excelReader.getCellData("SmokeSalesInvoiceVAT", 249, 7);
				expRow2AdjustedQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 250, 7);
				
				
			
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 237, 8, actBatchName);
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 238, 8, actTotalQty);
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 239, 8, actAdjustedQty);
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 240, 8, actBalance);
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 241, 8, actTotalQtyFooter);
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 242, 8, actTotalAdjustedQtyFooter);
				
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 243, 8, actRow1BatchNo);
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 244, 8, actRow1BaseQty);
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 245, 8, actRow1Rate);
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 246, 8, actRow1AdjustedQty);
				
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 247, 8, actRow2BatchNo);
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 248, 8, actRow2BaseQty);
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 249, 8, actRow2Rate);
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 250, 8, actRow2AdjustedQty);
				
				
				System.out.println(actBatchName);
				System.out.println(actTotalQty);
				System.out.println(actAdjustedQty);
				System.out.println(actBalance);
				
				
				System.out.println(actTotalAdjustedQtyFooter);
				System.out.println(actTotalQtyFooter);
					
				//First Row
				
				System.out.println(actRow1BatchNo);
				System.out.println(actRow1BaseQty);
				System.out.println(actRow1Rate);
				System.out.println(actRow1AdjustedQty);
	
				
				//Second Row
				
				System.out.println(actRow2BatchNo);
				System.out.println(actRow2BaseQty);
				System.out.println(actRow2Rate);
				System.out.println(actRow2AdjustedQty);
			
				System.out.println("*********************************************** checkBatchWiseScreenPopupWithPickOnFIFO  ********************************************");
				System.out.println("Entry Page Qty Change Batch Column Value Actual   : "+actQtyInput  +" Value Expected : "+expQtyInput);
				
				System.out.println("Entry Page Batch Popup Batch Name Value Actual          : "+actBatchName              + " Value Expected : "+expBatchName);	
				System.out.println("Entry Page Batch Popup Total Qty Value Actual           : "+actTotalQty               + " Value Expected : "+expTotalQty);
				System.out.println("Entry Page Batch Popup Adjusted Qty Value Actual        : "+actAdjustedQty            + " Value Expected : "+expAdjustedQty);
				System.out.println("Entry Page Batch Popup Balance Value Actual             : "+actBalance                + " Value Expected : "+expBalance);
				System.out.println("Entry Page Batch Popup Adjusted Qty Footer Value Actual : "+actTotalAdjustedQtyFooter + " Value Expected : "+expTotalAdjustedQtyFooter);
				System.out.println("Entry Page Batch Popup Total Qty Footer Value Actual    : "+actTotalQtyFooter         + " Value Expected : "+expTotalQtyFooter);
				
				System.out.println("Entry Page Batch Popup Row1 Batch No Value Actual       : "+actRow1BatchNo            + " Value Expected : "+expRow1BatchNo);	
				System.out.println("Entry Page Batch Popup Row1 Base Qty Value Actual       : "+actRow1BaseQty            + " Value Expected : "+expRow1BaseQty);
				System.out.println("Entry Page Batch Popup Row1 Rate Value Actual           : "+actRow1Rate               + " Value Expected : "+expRow1Rate);
				System.out.println("Entry Page Batch Popup Row1 Adjusted Qty Value Actual   : "+actRow1AdjustedQty        + " Value Expected : "+expRow1AdjustedQty);
				
				System.out.println("Entry Page Batch Popup Row2 Batch No Value Actual       : "+actRow2BatchNo            + " Value Expected : "+expRow2BatchNo);	
				System.out.println("Entry Page Batch Popup Row2 Base Qty Value Actual       : "+actRow2BaseQty            + " Value Expected : "+actRow2BaseQty);
				System.out.println("Entry Page Batch Popup Row2 Rate Value Actual           : "+expRow2Rate               + " Value Expected : "+actRow2Rate);
				System.out.println("Entry Page Batch Popup Row2 Adjusted Qty Value Actual   : "+actRow2AdjustedQty        + " Value Expected : "+expRow2AdjustedQty);
	
				
				
	
				if(actQtyInput.equalsIgnoreCase(expQtyInput)
						
						&& actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
						&& actBalance.equalsIgnoreCase(expBalance) 
						
						&& actTotalAdjustedQtyFooter.equalsIgnoreCase(expTotalAdjustedQtyFooter) && actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) 
						
						&& actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow1BaseQty.equalsIgnoreCase(expRow1BaseQty) && actRow1Rate.equalsIgnoreCase(expRow1Rate) 
						&& actRow1AdjustedQty.equalsIgnoreCase(expRow1AdjustedQty) 
						
						&& actRow2BatchNo.equalsIgnoreCase(expRow2BatchNo) && actRow2BaseQty.equalsIgnoreCase(expRow2BaseQty) && actRow2Rate.equalsIgnoreCase(expRow2Rate) 
						&& actRow2AdjustedQty.equalsIgnoreCase(expRow2AdjustedQty))
	
	
				{
					System.out.println("Test Pass : Batch Column is displaying Blank on Updating the Qty");
					excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 232, 9, resPass);
					 return true;
				}
				else
				{
					System.out.println("Test Pass : Batch Column is not displaying Blank on Updating Qty ");
					excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 232, 9, resFail);
					 return false;
				}
            }
            catch(Exception e)
            {
            	
            	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
				batchCancelIcon.click();
				
				Thread.sleep(2000);
				
				SalesInvoiceVatRemarks.sendKeys(Keys.CONTROL+"d");
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
				saveBtn.click();
				
				checkUserFriendlyMessage();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
				previousBtn.click();
				
				checkUserFriendlyMessage();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
				select2ndRow_1stColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
				pvWareHouseTxt.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
				enter_ItemTxt.sendKeys(Keys.END);
				enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
				enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
				enter_ItemTxt.sendKeys(Keys.SPACE);
				
				int itemcount1=itemListCount.size();
				
				System.err.println(itemcount1);
					
				for(int i=0 ; i < itemcount1 ;i++)
				{
					String data=itemListCount.get(i).getText();
					
					if(data.equalsIgnoreCase(excelReader.getCellData("SmokeSalesInvoiceVAT", 233, 6)))
					{
						itemListCount.get(i).click();
						
						break;
					}
				}
					
				enter_ItemTxt.sendKeys(Keys.TAB);	
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_5thColumn));
				select2ndRow_5thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
				enter_UnitTxt.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_8thColumn));
				select2ndRow_8thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
				enter_AQTxt.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVAT", 234, 6));
				enter_AQTxt.sendKeys(Keys.TAB);
							
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
				enter_FQTxt.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVAT", 235, 6));
				enter_FQTxt.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_11thColumn));
				select2ndRow_11thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
				enter_Quantity.sendKeys("20");
				enter_Quantity.sendKeys(Keys.TAB);
				
				Thread.sleep(3000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_11thColumn));
				String actQtyInput=select2ndRow_11thColumn.getText();
				String expQtyInput=excelReader.getCellData("SmokeSalesInvoiceVAT", 236, 7);
				
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 236, 8, actQtyInput);
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_19thColumn));
				select2ndRow_19thColumn.click();
            	
            	
            	String exception = e.getMessage();
            	System.out.println("Exception : "+exception);
            	System.out.println("Test Pass : Batch Column is not displaying Blank on Updating Qty ");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 232,10, exception);
				 return false;
            }
		}
	 
		 
		 @FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_1-0']")
		 private static WebElement batch_IndexRow1;
		 
		 @FindBy(xpath="//tbody[@id='Id_MRPBatch_Grid_body']/tr/td[2]")
		 private static List<WebElement> batch_BatchnameList;
		 
		 @FindBy(xpath="//tbody[@id='Id_MRPBatch_Grid_body']/tr/td[1]")
		 private static List<WebElement> batch_BatchIndex;
		 
		 public boolean checkBatchConsumingOnDoubleClickInBatchPopUpScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
			 
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";		
			 
            try
            {
            	
            	int batch_BatchnameListCount = batch_BatchnameList.size();
            	
            	for(int i=0;i<batch_BatchnameListCount;i++)
            	{
            		String data = batch_BatchnameList.get(i).getText();
            		
            		if(data.equalsIgnoreCase("PVHYDBR1"))
            		{
            			getAction().doubleClick(batch_BatchIndex.get(i)).build().perform();
            			
            			break;
            		}
            	}
            	
					
				 Thread.sleep(3000);
					
					
				 System.out.println("Batch Rows"+batchPopUPEmptyRows.getAttribute("data-totalrows"));
					
				 String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
			     String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
					
				String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
				String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
				
				String actRow3BatchNo,actRow3BaseQty,actRow3Rate,actRow3AdjustedQty,actRow3TotalAdjustedQty;
				String expRow3BatchNo,expRow3BaseQty,expRow3Rate,expRow3AdjustedQty,expRow3TotalAdjustedQty;
				
				actBatchName=batchItemName.getText();
				actTotalQty=batchTotalQty.getText();
				actAdjustedQty=batchAdjustQty.getText();
				actBalance=batchBalance.getText();
				actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
				actTotalQtyFooter=batchTotalQtyFooter.getText();
				
				
				actRow1BatchNo=batch_BatchNoRow1.getText();
				actRow1BaseQty=batch_BaseQtyRow1.getText();
				//act7=batch_ExpiryInDateRow1.getText();
				actRow1Rate=batch_RateRow1.getText();
				actRow1AdjustedQty=batch_QtyAdjustedRow1.getText();
				//act10=batch_PurchaseDateRow1.getText();
	
				
				actRow2BatchNo=batch_BatchNoRow2.getText();
				actRow2BaseQty=batch_BaseQtyRow2.getText();
				//act14=batch_ExpiryInDateRow2.getText();
				actRow2Rate=batch_RateRow2.getText();
				actRow2AdjustedQty=batch_QtyAdjustedRow2.getText();
				//act17=batch_PurchaseDateRow2.getText();
				
	
	
				expBatchName=excelReader.getCellData("SmokeSalesInvoiceVAT", 251, 7);
				expTotalQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 252, 7);
				expAdjustedQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 253, 7);
				expBalance=excelReader.getCellData("SmokeSalesInvoiceVAT", 254, 7);
				
				
				expTotalQtyFooter=excelReader.getCellData("SmokeSalesInvoiceVAT", 255, 7);
				expTotalAdjustedQtyFooter=excelReader.getCellData("SmokeSalesInvoiceVAT", 256, 7);
				
				
				expRow1BatchNo=excelReader.getCellData("SmokeSalesInvoiceVAT", 257, 7);
				expRow1BaseQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 258, 7);
				expRow1Rate=excelReader.getCellData("SmokeSalesInvoiceVAT", 259, 7);
				expRow1AdjustedQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 260, 7);
				
			
				expRow2BatchNo=excelReader.getCellData("SmokeSalesInvoiceVAT", 261, 7);
				expRow2BaseQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 262, 7);
				expRow2Rate=excelReader.getCellData("SmokeSalesInvoiceVAT", 263, 7);
				expRow2AdjustedQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 264, 7);
				
				
			
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 251, 8, actBatchName);
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 252, 8, actTotalQty);
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 253, 8, actAdjustedQty);
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 254, 8, actBalance);
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 255, 8, actTotalQtyFooter);
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 256, 8, actTotalAdjustedQtyFooter);
				
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 257, 8, actRow1BatchNo);
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 258, 8, actRow1BaseQty);
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 259, 8, actRow1Rate);
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 260, 8, actRow1AdjustedQty);
				
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 261, 8, actRow2BatchNo);
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 262, 8, actRow2BaseQty);
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 263, 8, actRow2Rate);
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 264, 8, actRow2AdjustedQty);
				
				
				System.out.println(actBatchName);
				System.out.println(actTotalQty);
				System.out.println(actAdjustedQty);
				System.out.println(actBalance);
				
				
				System.out.println(actTotalAdjustedQtyFooter);
				System.out.println(actTotalQtyFooter);
					
				//First Row
				
				System.out.println(actRow1BatchNo);
				System.out.println(actRow1BaseQty);
				System.out.println(actRow1Rate);
				System.out.println(actRow1AdjustedQty);
	
				
				//Second Row
				
				System.out.println(actRow2BatchNo);
				System.out.println(actRow2BaseQty);
				System.out.println(actRow2Rate);
				System.out.println(actRow2AdjustedQty);
			
				System.out.println("*********************************************** checkBatchWiseScreenPopupWithPickOnFIFO  ********************************************");
				
				System.out.println("Entry Page Batch Popup Batch Name Value Actual          : "+actBatchName              + " Value Expected : "+expBatchName);	
				System.out.println("Entry Page Batch Popup Total Qty Value Actual           : "+actTotalQty               + " Value Expected : "+expTotalQty);
				System.out.println("Entry Page Batch Popup Adjusted Qty Value Actual        : "+actAdjustedQty            + " Value Expected : "+expAdjustedQty);
				System.out.println("Entry Page Batch Popup Balance Value Actual             : "+actBalance                + " Value Expected : "+expBalance);
				System.out.println("Entry Page Batch Popup Adjusted Qty Footer Value Actual : "+actTotalAdjustedQtyFooter + " Value Expected : "+expTotalAdjustedQtyFooter);
				System.out.println("Entry Page Batch Popup Total Qty Footer Value Actual    : "+actTotalQtyFooter         + " Value Expected : "+expTotalQtyFooter);
				
				System.out.println("Entry Page Batch Popup Row1 Batch No Value Actual       : "+actRow1BatchNo            + " Value Expected : "+expRow1BatchNo);	
				System.out.println("Entry Page Batch Popup Row1 Base Qty Value Actual       : "+actRow1BaseQty            + " Value Expected : "+expRow1BaseQty);
				System.out.println("Entry Page Batch Popup Row1 Rate Value Actual           : "+actRow1Rate               + " Value Expected : "+expRow1Rate);
				System.out.println("Entry Page Batch Popup Row1 Adjusted Qty Value Actual   : "+actRow1AdjustedQty        + " Value Expected : "+expRow1AdjustedQty);
				
				System.out.println("Entry Page Batch Popup Row2 Batch No Value Actual       : "+actRow2BatchNo            + " Value Expected : "+expRow2BatchNo);	
				System.out.println("Entry Page Batch Popup Row2 Base Qty Value Actual       : "+actRow2BaseQty            + " Value Expected : "+expRow2BaseQty);
				System.out.println("Entry Page Batch Popup Row2 Rate Value Actual           : "+actRow2Rate               + " Value Expected : "+expRow2Rate);
				System.out.println("Entry Page Batch Popup Row2 Adjusted Qty Value Actual   : "+actRow2AdjustedQty        + " Value Expected : "+expRow2AdjustedQty);
	
				
				
	
				if(actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
						&& actBalance.equalsIgnoreCase(expBalance) 
						
						&& actTotalAdjustedQtyFooter.equalsIgnoreCase(expTotalAdjustedQtyFooter) && actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) 
						
						&& actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow1BaseQty.equalsIgnoreCase(expRow1BaseQty) && actRow1Rate.equalsIgnoreCase(expRow1Rate) 
						&& actRow1AdjustedQty.equalsIgnoreCase(expRow1AdjustedQty) 
						
						&& actRow2BatchNo.equalsIgnoreCase(expRow2BatchNo) && actRow2BaseQty.equalsIgnoreCase(expRow2BaseQty) && actRow2Rate.equalsIgnoreCase(expRow2Rate) 
						&& actRow2AdjustedQty.equalsIgnoreCase(expRow2AdjustedQty))
	
	
				{
					System.out.println("Test Pass : Batch Column is displaying Blank on Updating the Qty");
					excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 251, 9, resPass);
					 return true;
				}
				else
				{
					System.out.println("Test Pass : Batch Column is not displaying Blank on Updating Qty ");
					excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 251, 9, resFail);
					 return false;
				}
            }
            catch(Exception e)
            {
            	String exception = e.getMessage();
            	System.out.println("Exception : "+exception);
            	System.out.println("Test Pass : Batch Column is not displaying Blank on Updating Qty ");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 251,10, exception);
				 return false;
            }
		}
		 
		 
		 
		 
		 public boolean checkSecondRowByClickOnOkButtonInBatchWisePopupScreenPickingBatchOnDoubleClick() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";		
			 
			 Thread.sleep(2000);
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
	    	 batchOkIcon.click();
	    	 
	    	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
	    	 
	    	 int voucherGridBodyListCount = voucherGridBodyList.size();
				
	    	 ArrayList<String> voucherGridBodyListArray = new ArrayList<String>();
				
	    	 for(int i=0;i<voucherGridBodyListCount;i++)
	    	 {
	    		 
	    		 String data = voucherGridBodyList.get(i).getText();
	    		 
	    		 
	    		 voucherGridBodyListArray.add(data);
	    	 }	
					
	    	 
	    	 String actvoucherGridBodyList = voucherGridBodyListArray.toString();
				
	    	 String expvoucherGridBodyList = excelReader.getCellData("SmokeSalesInvoiceVAT", 265, 7);
	    	 
	    	 excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 265, 8, actvoucherGridBodyList);
				
	    	 System.out.println("voucherGridBodyList Actual    : " + actvoucherGridBodyList);
	    	 System.out.println("voucherGridBodyList Expected  : " + expvoucherGridBodyList);
	    	 
			 
			 if(actvoucherGridBodyList.equalsIgnoreCase(expvoucherGridBodyList))
			 {
				 System.out.println("Test Pass : Data Is As Expected");
				 excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 265, 9, resPass);
				 return true;
			 }
			 else
			 {
				 System.out.println("Test Fail : Data Is NOT As Expected");
				 excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 265, 9, resFail);
				 return false;
			 }
			 
		 }
		 
		 
		 
		 public boolean checkBatchPopUpScreenByInputingQtytoCheckManualBatchAllocation() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
			 
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";		
			 
            try
            {
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
				select3rdRow_1stColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
				pvWareHouseTxt.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
				enter_ItemTxt.sendKeys(Keys.END);
				enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
				enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
				enter_ItemTxt.sendKeys(Keys.SPACE);
				
				int itemcount1=itemListCount.size();
				
				System.err.println(itemcount1);
					
				for(int i=0 ; i < itemcount1 ;i++)
				{
					String data=itemListCount.get(i).getText();
					
					if(data.equalsIgnoreCase(excelReader.getCellData("SmokeSalesInvoiceVAT", 267, 6)))
					{
						itemListCount.get(i).click();
						
						break;
					}
				}
					
				enter_ItemTxt.sendKeys(Keys.TAB);	
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_5thColumn));
				select3rdRow_5thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
				enter_UnitTxt.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_8thColumn));
				select3rdRow_8thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
				enter_AQTxt.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVAT", 268, 6));
				enter_AQTxt.sendKeys(Keys.TAB);
							
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
				enter_FQTxt.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVAT", 269, 6));
				enter_FQTxt.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_11thColumn));
				select3rdRow_11thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
				enter_Quantity.sendKeys("120");
				enter_Quantity.sendKeys(Keys.TAB);
				
				Thread.sleep(3000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_11thColumn));
				String actQtyInput=select3rdRow_11thColumn.getText();
				String expQtyInput=excelReader.getCellData("SmokeSalesInvoiceVAT", 270, 7);
				
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 270, 8, actQtyInput);
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_19thColumn));
				select3rdRow_19thColumn.click();
					
				 Thread.sleep(3000);
					
					
				 System.out.println("Batch Rows"+batchPopUPEmptyRows.getAttribute("data-totalrows"));
					
				 String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
			     String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
					
				String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
				String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
				
				String actRow3BatchNo,actRow3BaseQty,actRow3Rate,actRow3AdjustedQty,actRow3TotalAdjustedQty;
				String expRow3BatchNo,expRow3BaseQty,expRow3Rate,expRow3AdjustedQty,expRow3TotalAdjustedQty;
				
				actBatchName=batchItemName.getText();
				actTotalQty=batchTotalQty.getText();
				actAdjustedQty=batchAdjustQty.getText();
				actBalance=batchBalance.getText();
				actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
				actTotalQtyFooter=batchTotalQtyFooter.getText();
				
				
				actRow1BatchNo=batch_BatchNoRow1.getText();
				actRow1BaseQty=batch_BaseQtyRow1.getText();
				//act7=batch_ExpiryInDateRow1.getText();
				actRow1Rate=batch_RateRow1.getText();
				actRow1AdjustedQty=batch_QtyAdjustedRow1.getText();
				//act10=batch_PurchaseDateRow1.getText();
	
				
				actRow2BatchNo=batch_BatchNoRow2.getText();
				actRow2BaseQty=batch_BaseQtyRow2.getText();
				//act14=batch_ExpiryInDateRow2.getText();
				actRow2Rate=batch_RateRow2.getText();
				actRow2AdjustedQty=batch_QtyAdjustedRow2.getText();
				//act17=batch_PurchaseDateRow2.getText();
				
	
	
				expBatchName=excelReader.getCellData("SmokeSalesInvoiceVAT", 271, 7);
				expTotalQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 272, 7);
				expAdjustedQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 273, 7);
				expBalance=excelReader.getCellData("SmokeSalesInvoiceVAT", 274, 7);
				
				
				expTotalQtyFooter=excelReader.getCellData("SmokeSalesInvoiceVAT", 275, 7);
				expTotalAdjustedQtyFooter=excelReader.getCellData("SmokeSalesInvoiceVAT", 276, 7);
				
				
				expRow1BatchNo=excelReader.getCellData("SmokeSalesInvoiceVAT", 277, 7);
				expRow1BaseQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 278, 7);
				expRow1Rate=excelReader.getCellData("SmokeSalesInvoiceVAT", 279, 7);
				expRow1AdjustedQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 280, 7);
				
			
				expRow2BatchNo=excelReader.getCellData("SmokeSalesInvoiceVAT", 281, 7);
				expRow2BaseQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 282, 7);
				expRow2Rate=excelReader.getCellData("SmokeSalesInvoiceVAT", 283, 7);
				expRow2AdjustedQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 284, 7);
				
				
			
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 271, 8, actBatchName);
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 272, 8, actTotalQty);
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 273, 8, actAdjustedQty);
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 274, 8, actBalance);
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 275, 8, actTotalQtyFooter);
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 276, 8, actTotalAdjustedQtyFooter);
				
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 277, 8, actRow1BatchNo);
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 278, 8, actRow1BaseQty);
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 279, 8, actRow1Rate);
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 280, 8, actRow1AdjustedQty);
				
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 281, 8, actRow2BatchNo);
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 282, 8, actRow2BaseQty);
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 283, 8, actRow2Rate);
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 284, 8, actRow2AdjustedQty);
				
				
				System.out.println(actBatchName);
				System.out.println(actTotalQty);
				System.out.println(actAdjustedQty);
				System.out.println(actBalance);
				
				
				System.out.println(actTotalAdjustedQtyFooter);
				System.out.println(actTotalQtyFooter);
					
				//First Row
				
				System.out.println(actRow1BatchNo);
				System.out.println(actRow1BaseQty);
				System.out.println(actRow1Rate);
				System.out.println(actRow1AdjustedQty);
	
				
				//Second Row
				
				System.out.println(actRow2BatchNo);
				System.out.println(actRow2BaseQty);
				System.out.println(actRow2Rate);
				System.out.println(actRow2AdjustedQty);
			
				System.out.println("*********************************************** checkBatchWiseScreenPopupWithPickOnFIFO  ********************************************");
				System.out.println("Entry Page Qty Change Batch Column Value Actual   : "+actQtyInput  +" Value Expected : "+expQtyInput);
				
				System.out.println("Entry Page Batch Popup Batch Name Value Actual          : "+actBatchName              + " Value Expected : "+expBatchName);	
				System.out.println("Entry Page Batch Popup Total Qty Value Actual           : "+actTotalQty               + " Value Expected : "+expTotalQty);
				System.out.println("Entry Page Batch Popup Adjusted Qty Value Actual        : "+actAdjustedQty            + " Value Expected : "+expAdjustedQty);
				System.out.println("Entry Page Batch Popup Balance Value Actual             : "+actBalance                + " Value Expected : "+expBalance);
				System.out.println("Entry Page Batch Popup Adjusted Qty Footer Value Actual : "+actTotalAdjustedQtyFooter + " Value Expected : "+expTotalAdjustedQtyFooter);
				System.out.println("Entry Page Batch Popup Total Qty Footer Value Actual    : "+actTotalQtyFooter         + " Value Expected : "+expTotalQtyFooter);
				
				System.out.println("Entry Page Batch Popup Row1 Batch No Value Actual       : "+actRow1BatchNo            + " Value Expected : "+expRow1BatchNo);	
				System.out.println("Entry Page Batch Popup Row1 Base Qty Value Actual       : "+actRow1BaseQty            + " Value Expected : "+expRow1BaseQty);
				System.out.println("Entry Page Batch Popup Row1 Rate Value Actual           : "+actRow1Rate               + " Value Expected : "+expRow1Rate);
				System.out.println("Entry Page Batch Popup Row1 Adjusted Qty Value Actual   : "+actRow1AdjustedQty        + " Value Expected : "+expRow1AdjustedQty);
				
				System.out.println("Entry Page Batch Popup Row2 Batch No Value Actual       : "+actRow2BatchNo            + " Value Expected : "+expRow2BatchNo);	
				System.out.println("Entry Page Batch Popup Row2 Base Qty Value Actual       : "+actRow2BaseQty            + " Value Expected : "+actRow2BaseQty);
				System.out.println("Entry Page Batch Popup Row2 Rate Value Actual           : "+expRow2Rate               + " Value Expected : "+actRow2Rate);
				System.out.println("Entry Page Batch Popup Row2 Adjusted Qty Value Actual   : "+actRow2AdjustedQty        + " Value Expected : "+expRow2AdjustedQty);
	
				
				
	
				if(actQtyInput.equalsIgnoreCase(expQtyInput)
						
						&& actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
						&& actBalance.equalsIgnoreCase(expBalance) 
						
						&& actTotalAdjustedQtyFooter.equalsIgnoreCase(expTotalAdjustedQtyFooter) && actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) 
						
						&& actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow1BaseQty.equalsIgnoreCase(expRow1BaseQty) && actRow1Rate.equalsIgnoreCase(expRow1Rate) 
						&& actRow1AdjustedQty.equalsIgnoreCase(expRow1AdjustedQty) 
						
						&& actRow2BatchNo.equalsIgnoreCase(expRow2BatchNo) && actRow2BaseQty.equalsIgnoreCase(expRow2BaseQty) && actRow2Rate.equalsIgnoreCase(expRow2Rate) 
						&& actRow2AdjustedQty.equalsIgnoreCase(expRow2AdjustedQty))
	
	
				{
					System.out.println("Test Pass : Batch Column is displaying Blank on Updating the Qty");
					excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 266, 9, resPass);
					 return true;
				}
				else
				{
					System.out.println("Test Pass : Batch Column is not displaying Blank on Updating Qty ");
					excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 266, 9, resFail);
					 return false;
				}
            }
            catch(Exception e)
            {
            	String exception = e.getMessage();
            	System.out.println("Exception : "+exception);
            	System.out.println("Test Pass : Batch Column is not displaying Blank on Updating Qty ");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 266,10, exception);
				 return false;
            }
		}
	 
		 
	public boolean checkManualInputingInBatchPopUpScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
 	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
        
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batch_QtyAdjustedRow1));
        batch_QtyAdjustedRow1.click();
        
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batch_EnterQtyAdjsuted));
        batch_EnterQtyAdjsuted.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVAT", 285, 6));
        batch_EnterQtyAdjsuted.sendKeys(Keys.TAB);
        
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batch_EnterQtyAdjsuted));
        batch_EnterQtyAdjsuted.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVAT", 286, 6));
        batch_EnterQtyAdjsuted.sendKeys(Keys.TAB);
		
        Thread.sleep(3000);
		
		
		 System.out.println("Batch Rows"+batchPopUPEmptyRows.getAttribute("data-totalrows"));
			
		 String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
	     String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
			
		String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
		String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
		
		String actRow3BatchNo,actRow3BaseQty,actRow3Rate,actRow3AdjustedQty,actRow3TotalAdjustedQty;
		String expRow3BatchNo,expRow3BaseQty,expRow3Rate,expRow3AdjustedQty,expRow3TotalAdjustedQty;
		
		System.err.println("Getting data from Browser");
		
		actBatchName=batchItemName.getText();
		actTotalQty=batchTotalQty.getText();
		actAdjustedQty=batchAdjustQty.getText();
		actBalance=batchBalance.getText();
		actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
		actTotalQtyFooter=batchTotalQtyFooter.getText();
		
		
		actRow1BatchNo=batch_BatchNoRow1.getText();
		actRow1BaseQty=batch_BaseQtyRow1.getText();
		//act7=batch_ExpiryInDateRow1.getText();
		actRow1Rate=batch_RateRow1.getText();
		actRow1AdjustedQty=batch_QtyAdjustedRow1.getText();
		//act10=batch_PurchaseDateRow1.getText();

		
		actRow2BatchNo=batch_BatchNoRow2.getText();
		actRow2BaseQty=batch_BaseQtyRow2.getText();
		//act14=batch_ExpiryInDateRow2.getText();
		actRow2Rate=batch_RateRow2.getText();
		actRow2AdjustedQty=batch_QtyAdjustedRow2.getText();
		//act17=batch_PurchaseDateRow2.getText();
		
		System.err.println("Getting data from Excel");

		expBatchName=excelReader.getCellData("SmokeSalesInvoiceVAT", 287, 7);
		expTotalQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 288, 7);
		expAdjustedQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 289, 7);
		expBalance=excelReader.getCellData("SmokeSalesInvoiceVAT", 290, 7);
		
		
		expTotalQtyFooter=excelReader.getCellData("SmokeSalesInvoiceVAT", 291, 7);
		expTotalAdjustedQtyFooter=excelReader.getCellData("SmokeSalesInvoiceVAT", 292, 7);
		
		
		expRow1BatchNo=excelReader.getCellData("SmokeSalesInvoiceVAT", 293, 7);
		expRow1BaseQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 294, 7);
		expRow1Rate=excelReader.getCellData("SmokeSalesInvoiceVAT", 295, 7);
		expRow1AdjustedQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 296, 7);
		
	
		expRow2BatchNo=excelReader.getCellData("SmokeSalesInvoiceVAT", 297, 7);
		expRow2BaseQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 298, 7);
		expRow2Rate=excelReader.getCellData("SmokeSalesInvoiceVAT", 299, 7);
		expRow2AdjustedQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 300, 7);
		
		
	
		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 287, 8, actBatchName);
		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 288, 8, actTotalQty);
		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 289, 8, actAdjustedQty);
		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 290, 8, actBalance);
		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 291, 8, actTotalQtyFooter);
		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 292, 8, actTotalAdjustedQtyFooter);
		
		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 293, 8, actRow1BatchNo);
		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 294, 8, actRow1BaseQty);
		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 295, 8, actRow1Rate);
		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 296, 8, actRow1AdjustedQty);
		
		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 297, 8, actRow2BatchNo);
		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 298, 8, actRow2BaseQty);
		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 299, 8, actRow2Rate);
		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 300, 8, actRow2AdjustedQty);
		
		
		System.out.println(actBatchName);
		System.out.println(actTotalQty);
		System.out.println(actAdjustedQty);
		System.out.println(actBalance);
		
		
		System.out.println(actTotalAdjustedQtyFooter);
		System.out.println(actTotalQtyFooter);
			
		//First Row
		
		System.out.println(actRow1BatchNo);
		System.out.println(actRow1BaseQty);
		System.out.println(actRow1Rate);
		System.out.println(actRow1AdjustedQty);

		
		//Second Row
		
		System.out.println(actRow2BatchNo);
		System.out.println(actRow2BaseQty);
		System.out.println(actRow2Rate);
		System.out.println(actRow2AdjustedQty);
	
		System.out.println("*********************************************** checkBatchWiseScreenPopupWithPickOnFIFO  ********************************************");
		
		System.out.println("Entry Page Batch Popup Batch Name Value Actual          : "+actBatchName              + " Value Expected : "+expBatchName);	
		System.out.println("Entry Page Batch Popup Total Qty Value Actual           : "+actTotalQty               + " Value Expected : "+expTotalQty);
		System.out.println("Entry Page Batch Popup Adjusted Qty Value Actual        : "+actAdjustedQty            + " Value Expected : "+expAdjustedQty);
		System.out.println("Entry Page Batch Popup Balance Value Actual             : "+actBalance                + " Value Expected : "+expBalance);
		System.out.println("Entry Page Batch Popup Adjusted Qty Footer Value Actual : "+actTotalAdjustedQtyFooter + " Value Expected : "+expTotalAdjustedQtyFooter);
		System.out.println("Entry Page Batch Popup Total Qty Footer Value Actual    : "+actTotalQtyFooter         + " Value Expected : "+expTotalQtyFooter);
		
		System.out.println("Entry Page Batch Popup Row1 Batch No Value Actual       : "+actRow1BatchNo            + " Value Expected : "+expRow1BatchNo);	
		System.out.println("Entry Page Batch Popup Row1 Base Qty Value Actual       : "+actRow1BaseQty            + " Value Expected : "+expRow1BaseQty);
		System.out.println("Entry Page Batch Popup Row1 Rate Value Actual           : "+actRow1Rate               + " Value Expected : "+expRow1Rate);
		System.out.println("Entry Page Batch Popup Row1 Adjusted Qty Value Actual   : "+actRow1AdjustedQty        + " Value Expected : "+expRow1AdjustedQty);
		
		System.out.println("Entry Page Batch Popup Row2 Batch No Value Actual       : "+actRow2BatchNo            + " Value Expected : "+expRow2BatchNo);	
		System.out.println("Entry Page Batch Popup Row2 Base Qty Value Actual       : "+actRow2BaseQty            + " Value Expected : "+actRow2BaseQty);
		System.out.println("Entry Page Batch Popup Row2 Rate Value Actual           : "+expRow2Rate               + " Value Expected : "+actRow2Rate);
		System.out.println("Entry Page Batch Popup Row2 Adjusted Qty Value Actual   : "+actRow2AdjustedQty        + " Value Expected : "+expRow2AdjustedQty);

		
		

		if(actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
				&& actBalance.equalsIgnoreCase(expBalance) 
				
				&& actTotalAdjustedQtyFooter.equalsIgnoreCase(expTotalAdjustedQtyFooter) && actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) 
				
				&& actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow1BaseQty.equalsIgnoreCase(expRow1BaseQty) && actRow1Rate.equalsIgnoreCase(expRow1Rate) 
				&& actRow1AdjustedQty.equalsIgnoreCase(expRow1AdjustedQty) 
				
				&& actRow2BatchNo.equalsIgnoreCase(expRow2BatchNo) && actRow2BaseQty.equalsIgnoreCase(expRow2BaseQty) && actRow2Rate.equalsIgnoreCase(expRow2Rate) 
				&& actRow2AdjustedQty.equalsIgnoreCase(expRow2AdjustedQty))
		{
			System.out.println("Test Pass : Error Message Is As Expected");
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 285, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Error Message Is NOT As Expected");
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 285, 9, resFail);
			return false;
		}
	}	
		 
		 
	
	 public boolean checkVocuherGridBatchSplittingOnManualEntryInBatchPopUpScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	 {
		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";		
		 
		 Thread.sleep(2000);
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
    	 batchOkIcon.click();
    	 
    	 if(getIsAlertPresent())
    	 {
    		 getAlert().accept();
    	 }
    	 
    	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
    	 
    	 int voucherGridBodyListCount = voucherGridBodyList.size();
			
    	 ArrayList<String> voucherGridBodyListArray = new ArrayList<String>();
			
    	 for(int i=0;i<voucherGridBodyListCount;i++)
    	 {
    		 
    		 String data = voucherGridBodyList.get(i).getText();
    		 
    		 
    		 voucherGridBodyListArray.add(data);
    	 }	
				
    	 
    	 String actvoucherGridBodyList = voucherGridBodyListArray.toString();
			
    	 String expvoucherGridBodyList = excelReader.getCellData("SmokeSalesInvoiceVAT", 301, 7);
    	 
    	 excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 301, 8, actvoucherGridBodyList);
			
    	 System.out.println("voucherGridBodyList Actual    : " + actvoucherGridBodyList);
    	 System.out.println("voucherGridBodyList Expected  : " + expvoucherGridBodyList);
    	 
		 
		 if(actvoucherGridBodyList.equalsIgnoreCase(expvoucherGridBodyList))
		 {
			 System.out.println("Test Pass : Data Is As Expected");
			 excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 301, 9, resPass);
			 return true;
		 }
		 else
		 {
			 System.out.println("Test Fail : Data Is NOT As Expected");
			 excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 301, 9, resFail);
			 return false;
		 }
		 
	 }
	
	
		 public boolean checkinputingAqFqRateAndRateAndClickSaveToDisplayBillRefernceScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
			 
			 for(int i=1;i<=3;i++)
			 {
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(secondRowIndex));
				 secondRowIndex.click();
				 
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
				 deleteRowBtn.click();
			 }
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			 select1stRow_8thColumn.click();
				
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
			 enter_AQTxt.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVAT", 302, 6));
			 enter_AQTxt.sendKeys(Keys.TAB);
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
			 enter_FQTxt.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVAT", 303, 6));
			 enter_FQTxt.sendKeys(Keys.TAB);
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
			 select1stRow_11thColumn.click();
				
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			 enter_Quantity.sendKeys("60");
			 enter_Quantity.sendKeys(Keys.TAB);
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
			 select1stRow_14thColumn.click();
				
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			 enter_Rate.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVAT", 304, 6));
			 enter_Rate.sendKeys(Keys.TAB);
			 
			 String docno=documentNumberTxt.getAttribute("value");
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
			
			// Actual
			boolean actbillRefPaymentsBillReferenceLabel=billRefPaymentsBillReferenceLabel.isDisplayed();
			boolean actbillRefNewReferenceTxt=billRefNewReferenceTxt.isDisplayed();
			boolean actbillRefTxtOnAccount=billRefTxtOnAccount.isDisplayed();
			boolean actbillRefSearchTxt=billRefSearchTxt.isDisplayed();
			boolean actbillRefNewReferenceDropdown=billRefNewReferenceDropdown.isDisplayed();
			boolean actbillRefShowBillsDropdown=billRefShowBillsDropdown.isDisplayed();
			boolean actbillRefAdjustOnFIFOBtn=billRefAdjustOnFIFOBtn.isDisplayed();
			boolean actbillRefPickIcon=billRefPickIcon.isDisplayed();
			boolean actbillRefOkBtn=billRefOkBtn.isDisplayed();
			boolean actbillRefcancel=billRefcancel.isDisplayed();
			
			// Expected
			boolean expbillRefPaymentsBillReferenceLabel=true;
			boolean expbillRefNewReferenceTxt=true;
			boolean expbillRefTxtOnAccount=true;
			boolean expbillRefSearchTxt=true;
			boolean expbillRefNewReferenceDropdown=true;
			boolean expbillRefShowBillsDropdown=true;
			boolean expbillRefAdjustOnFIFOBtn=true;
			boolean expbillRefPickIcon=true;
			boolean expbillRefOkBtn=true;
			boolean expbillRefcancel=true;
			
			boolean res= actbillRefPaymentsBillReferenceLabel==expbillRefPaymentsBillReferenceLabel && actbillRefNewReferenceTxt==expbillRefNewReferenceTxt
					&& actbillRefTxtOnAccount==expbillRefTxtOnAccount && actbillRefSearchTxt==expbillRefSearchTxt
					&& actbillRefNewReferenceDropdown==expbillRefNewReferenceDropdown && actbillRefShowBillsDropdown==expbillRefShowBillsDropdown
					&& actbillRefAdjustOnFIFOBtn==expbillRefAdjustOnFIFOBtn && actbillRefPickIcon==expbillRefPickIcon
					&& actbillRefOkBtn==expbillRefOkBtn && actbillRefcancel==expbillRefcancel;
			
			String actResult = Boolean.toString(res);
			String expResult = excelReader.getCellData("SmokeSalesInvoiceVAT", 302, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 302, 8, actResult);
			
			System.out.println("************************************* checkSaveButtontoDisplayBillRefereneceScreenPopupInSalesInvoice  *********************************");
			
			System.out.println("Bill Reference Screen Lable : "+actbillRefPaymentsBillReferenceLabel +"  Value Expected : "+expbillRefPaymentsBillReferenceLabel);
			System.out.println("New refernce Text Filed 	: "+actbillRefNewReferenceTxt			 +"  Value Expected : "+expbillRefNewReferenceTxt);
			System.out.println("On Account Text Filed 		: "+actbillRefTxtOnAccount				 +"  Value Expected : "+expbillRefTxtOnAccount);
			System.out.println("Search Text Filed 			: "+actbillRefSearchTxt					 +"  Value Expected : "+expbillRefSearchTxt);
			System.out.println("Adjust Bills Drop Down		: "+actbillRefNewReferenceDropdown		 +"  Value Expected : "+expbillRefNewReferenceDropdown);
			System.out.println("Show Bills Drop Down 		: "+actbillRefShowBillsDropdown			 +"  Value Expected : "+expbillRefShowBillsDropdown);
			System.out.println("Adjsut On FIFO 				: "+actbillRefAdjustOnFIFOBtn			 +"  Value Expected : "+expbillRefAdjustOnFIFOBtn);
			System.out.println("Pick Option 				: "+actbillRefPickIcon					 +"  Value Expected : "+expbillRefPickIcon);
			System.out.println("Ok Button 					: "+actbillRefOkBtn						 +"  Value Expected : "+expbillRefOkBtn);
			System.out.println("Cancel Button 				: "+actbillRefcancel					 +"  Value Expected : "+expbillRefcancel);
			
			if (actResult.equalsIgnoreCase(expResult))  
			{
				System.out.println("Test Pass : Qty Preload Value is displaying Correct");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 302, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Qty Preload Value is displaying Wrong");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 302, 9, resFail);
				return false;
			}
		}
		 
		  
	     public boolean checkClickOnOkButtonWithoutPickButtonInSalesInvoiceBillwiseScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	     {
	    	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	    	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		 		
	    	 Thread.sleep(2000);
	    	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
	    	 Bill_OkBtn.click();
	    	 
	    	 
			 String expErrorMessage=excelReader.getCellData("SmokeSalesInvoiceVAT", 305, 7);
			 
			 String validationMessage=checkValidationMessage(expErrorMessage);
				
			 excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 305, 8, expErrorMessage);
			 
			 System.out.println("************************************* checkClickOnOkButtonWithoutPickButtonInSalesInvoiceBillwiseScreen  *********************************");
			 System.out.println("error Message  :  "+validationMessage+" Value Expected : "+expErrorMessage);
			 
			 if (validationMessage.equalsIgnoreCase(expErrorMessage))
	    	 {
	    		 System.out.println("Test Pass : Error Message is Displayed ");
	    		 excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 305, 9, resPass);
	    		 return true;
	    	 }
	    	 else
	    	 {
	    		 System.out.println("Test Fail :  Error Message is  not Displayed ");
	    		 excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 305, 9, resFail);
	    		 return false;
	    	 }
	     }
		  
		  
		 	
	 	public boolean checkClickOnCancelButtonInBillwiseScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	 	{
	 		excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	 		
	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefcancel));	
	 	
	 		billRefcancel.click();
	 		
	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(netLabel));
			
			boolean actEntryPageFooterFieldsNetLabel  =netLabel.isDisplayed();
			boolean actEntryPageFooterFieldsNetAmount =netAmount.isDisplayed();

			boolean expEntryPageFooterFieldsNetLabel  =true;
			boolean expEntryPageFooterFieldsNetAmount =true;
			
			boolean res= actEntryPageFooterFieldsNetLabel==expEntryPageFooterFieldsNetLabel && actEntryPageFooterFieldsNetAmount==expEntryPageFooterFieldsNetAmount;
			
			String actResult = Boolean.toString(res);
			String expResult = excelReader.getCellData("SmokeSalesInvoiceVAT", 306, 7);
			 
			 excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 306, 8, actResult);

			System.out.println("***************************************** checkClickOnCancelButtonInBillwiseScreen  ***************************************************");
			System.out.println("Entry Page Footer Fields Net Label Value Actual  : "+actEntryPageFooterFieldsNetLabel+   " Value Expected : "+expEntryPageFooterFieldsNetLabel);
			System.out.println("Entry Page Footer Fields Net Amount Value Actual : "+actEntryPageFooterFieldsNetAmount+  " Value Expected : "+expEntryPageFooterFieldsNetAmount);

					
			if(actResult.equalsIgnoreCase(expResult))
	 		{
	 			System.out.println(" Test Pass: Cancel option in Bill Referenece ");
	 			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 306, 9, resPass);
	 			return true;
	 		}
	 		else
	 		{
	 			System.out.println(" Test Fail: Cancel option in Bill Referenece ");
	 			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 306, 9, resFail);
	 			return false;
	 		}
	 	}
		 	
	 	
	 	

		
		public boolean checkSaveVoucherOnPickingInBillReferenceScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
							
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String docno=documentNumberTxt.getAttribute("value");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
	 		saveBtn.click();
	 		
	 		Thread.sleep(2000);

	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(breakUpByTagTab));
	 		breakUpByTagTab.click();
	 		
	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
	 		billRefNewReferenceTxt.click();
	 		
	 		Thread.sleep(2000);
	 		
	 		String actBillNewReference,actBillAmtAdjAgainstNewRefInOtherVouchers,actBillTransactionCurrency,actBillBaseCurrency,actBillLocalCurrency,actBillBalanceNewRefAmount,actBillBreakUpByTagDepartment,actBillBreakUpByTagBaseCurrency,actBillBreakUpByTagBillCurrency,actBillBreakUpByTagLocalCurrency,actBillAmtAdjustedInTransactionCurrency,actBillBalanceAmtToBeAdjustedInTransactionCurrency,act13;
	 		String expBillNewReference,expBillAmtAdjAgainstNewRefInOtherVouchers,expBillTransactionCurrency,expBillBaseCurrency,expBillLocalCurrency,expBillBalanceNewRefAmount,expBillBreakUpByTagDepartment,expBillBreakUpByTagBaseCurrency,expBillBreakUpByTagBillCurrency,expBillBreakUpByTagLocalCurrency,expBillAmtAdjustedInTransactionCurrency,expBillBalanceAmtToBeAdjustedInTransactionCurrency;
	 		
	 		actBillNewReference									=billRefNewReferenceTxt.getAttribute("value");
	 		actBillAmtAdjAgainstNewRefInOtherVouchers			=amtAdjustedAgainstNewREfinOtherVouchers.getText();
	 		actBillTransactionCurrency							=transactionCurency.getText();
	 		actBillBaseCurrency									=baseCurrency.getText();
	 		actBillLocalCurrency								=localCurrencyDhs.getText();
	 		
	 		actBillBalanceNewRefAmount							=balanceNewReferenceAmt.getText();
	 		
	 		actBillBreakUpByTagDepartment						=breakUpByTagDepartment.getText();
	 		actBillBreakUpByTagBaseCurrency						=breakUpByTagBaseCurrency.getText();
	 		actBillBreakUpByTagBillCurrency						=breakUpByTagBillCurrency.getText();
	 		
	 		actBillBreakUpByTagLocalCurrency					=breakUpByTagBaseLocalCurrency.getText();
	 		actBillAmtAdjustedInTransactionCurrency				=billRefAdjustAmountInTransCurency.getText();
	 		actBillBalanceAmtToBeAdjustedInTransactionCurrency	=billRefBalanceAmountAdjustInTrnasCurrency.getText();
	 		
	 		
	 		expBillNewReference									=excelReader.getCellData("SmokeSalesInvoiceVAT", 307, 7);
	 		expBillAmtAdjAgainstNewRefInOtherVouchers			=excelReader.getCellData("SmokeSalesInvoiceVAT", 308, 7);
	 		expBillTransactionCurrency							=excelReader.getCellData("SmokeSalesInvoiceVAT", 309, 7);
	 		expBillBaseCurrency									=excelReader.getCellData("SmokeSalesInvoiceVAT", 310, 7);
	 		expBillLocalCurrency								=excelReader.getCellData("SmokeSalesInvoiceVAT", 311, 7);
	 		
	 		expBillBalanceNewRefAmount							=excelReader.getCellData("SmokeSalesInvoiceVAT", 312, 7);
	 		
	 		expBillBreakUpByTagDepartment						=excelReader.getCellData("SmokeSalesInvoiceVAT", 313, 7);
	 		expBillBreakUpByTagBillCurrency						=excelReader.getCellData("SmokeSalesInvoiceVAT", 314, 7);
	 		expBillBreakUpByTagBaseCurrency						=excelReader.getCellData("SmokeSalesInvoiceVAT", 315, 7);
	 		
	 		
	 		expBillBreakUpByTagLocalCurrency					=excelReader.getCellData("SmokeSalesInvoiceVAT", 316, 7);
	 		expBillAmtAdjustedInTransactionCurrency				=excelReader.getCellData("SmokeSalesInvoiceVAT", 317, 7);
	 		expBillBalanceAmtToBeAdjustedInTransactionCurrency	=excelReader.getCellData("SmokeSalesInvoiceVAT", 318, 7);
	 		
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 307, 8, actBillNewReference);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 308, 8, actBillAmtAdjAgainstNewRefInOtherVouchers);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 309, 8, actBillTransactionCurrency);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 310, 8, actBillBaseCurrency);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 311, 8, actBillLocalCurrency);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 312, 8, actBillBalanceNewRefAmount);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 313, 8, actBillBreakUpByTagDepartment);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 314, 8, actBillBreakUpByTagBaseCurrency);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 315, 8, actBillBreakUpByTagBillCurrency);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 316, 8, actBillBreakUpByTagLocalCurrency);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 317, 8, actBillAmtAdjustedInTransactionCurrency);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 318, 8, actBillBalanceAmtToBeAdjustedInTransactionCurrency);
	 	
	 		System.out.println("*********************************** checkCancelBinPopupScreenDeleteRowAndSaveVoucher  ************************************");


	 		System.out.println("actBillNewReference								   : "+ actBillNewReference									+" Value Expected : "+expBillNewReference);
	 		System.out.println("actBillAmtAdjAgainstNewRefInOtherVouchers		   : "+actBillAmtAdjAgainstNewRefInOtherVouchers			+" Value Expected : "+expBillAmtAdjAgainstNewRefInOtherVouchers);
	 		System.out.println("actBillTransactionCurrency						   : "+actBillTransactionCurrency							+" Value Expected : "+expBillTransactionCurrency);
	 		System.out.println("actBillBaseCurrency								   : "+actBillBaseCurrency									+" Value Expected : "+ expBillBaseCurrency);
	 		System.out.println("actBillLocalCurrency							   : "+actBillLocalCurrency									+" Value Expected : "+expBillLocalCurrency);
	 		System.out.println("actBillBalanceNewRefAmount						   : "+ actBillBalanceNewRefAmount							+" Value Expected : "+expBillBalanceNewRefAmount);
	        System.out.println("actBillBreakUpByTagDepartment					   : "+actBillBreakUpByTagDepartment						+" Value Expected : "+expBillBreakUpByTagDepartment);
	 		System.out.println("actBillBreakUpByTagBaseCurrency				       : "+actBillBreakUpByTagBaseCurrency						+" Value Expected : "+expBillBreakUpByTagBaseCurrency);
	 		System.out.println("actBillBreakUpByTagBillCurrency 				   : "+actBillBreakUpByTagBillCurrency						+" Value Expected : "+expBillBreakUpByTagBillCurrency);
	 		System.out.println("actBillBreakUpByTagLocalCurrency				   : "+actBillBreakUpByTagLocalCurrency						+" Value Expected : "+expBillBreakUpByTagLocalCurrency);
	 		System.out.println("actBillAmtAdjustedInTransactionCurrency			   : "+actBillAmtAdjustedInTransactionCurrency				+" Value Expected : "+expBillAmtAdjustedInTransactionCurrency);
	 		System.out.println("actBillBalanceAmtToBeAdjustedInTransactionCurrency : "+actBillBalanceAmtToBeAdjustedInTransactionCurrency	+" Value Expected : "+expBillBalanceAmtToBeAdjustedInTransactionCurrency);
	 		
	 	    Thread.sleep(2000);
		   
	 	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		    billRefPickIcon.click();
		   
		    //pick button is click
		   
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(breakUpByTagTab));
	 		breakUpByTagTab.click();
	 		
	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
	 		billRefNewReferenceTxt.click();
	 		
	 		
	 		String actBillNewReferencePick,actBillAmtAdjAgainstNewRefInOtherVouchersPick,actBillTransactionCurrencyPick,actBillBaseCurrencyPick,actBillLocalCurrencyPick,actBillBalanceNewRefAmountPick,actBillBreakUpByTagDepartmentPick,actBillBreakUpByTagBaseCurrencyPick,actBillBreakUpByTagBillCurrencyPick,actBillBreakUpByTagLocalCurrencyPick,actBillAmtAdjustedInTransactionCurrencyPick,actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick;
	 		String expBillNewReferencePick,expBillAmtAdjAgainstNewRefInOtherVouchersPick,expBillTransactionCurrencyPick,expBillBaseCurrencyPick,expBillLocalCurrencyPick,expBillBalanceNewRefAmountPick,expBillBreakUpByTagDepartmentPick,expBillBreakUpByTagBaseCurrencyPick,expBillBreakUpByTagBillCurrencyPick,expBillBreakUpByTagLocalCurrencyPick,expBillAmtAdjustedInTransactionCurrencyPick,expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick;
	 		
	 		actBillNewReferencePick									=billRefNewReferenceTxt.getAttribute("value");
	 		actBillAmtAdjAgainstNewRefInOtherVouchersPick			=amtAdjustedAgainstNewREfinOtherVouchers.getText();
	 		actBillTransactionCurrencyPick							=transactionCurency.getText();
	 		actBillBaseCurrencyPick									=baseCurrency.getText();
	 		actBillLocalCurrencyPick								=localCurrencyDhs.getText();
	 		
	 		actBillBalanceNewRefAmountPick							=balanceNewReferenceAmt.getText();
	 		
	 		actBillBreakUpByTagDepartmentPick						=breakUpByTagDepartment.getText();
	 		actBillBreakUpByTagBaseCurrencyPick						=breakUpByTagBaseCurrency.getText();
	 		actBillBreakUpByTagBillCurrencyPick						=breakUpByTagBillCurrency.getText();
	 		
	 		actBillBreakUpByTagLocalCurrencyPick					=breakUpByTagBaseLocalCurrency.getText();
	 		actBillAmtAdjustedInTransactionCurrencyPick				=billRefAdjustAmountInTransCurency.getText();
	 		actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	=billRefBalanceAmountAdjustInTrnasCurrency.getText();
	 		
	 		
	 		expBillNewReferencePick									=excelReader.getCellData("SmokeSalesInvoiceVAT", 320, 7);
	 		expBillAmtAdjAgainstNewRefInOtherVouchersPick			=excelReader.getCellData("SmokeSalesInvoiceVAT", 321, 7);
	 		expBillTransactionCurrencyPick							=excelReader.getCellData("SmokeSalesInvoiceVAT", 322, 7);
	 		expBillBaseCurrencyPick									=excelReader.getCellData("SmokeSalesInvoiceVAT", 323, 7);
	 		expBillLocalCurrencyPick								=excelReader.getCellData("SmokeSalesInvoiceVAT", 324, 7);
	 		
	 		expBillBalanceNewRefAmountPick							=excelReader.getCellData("SmokeSalesInvoiceVAT", 325, 7);
	 		
	 		expBillBreakUpByTagDepartmentPick						=excelReader.getCellData("SmokeSalesInvoiceVAT", 326, 7);
	 		expBillBreakUpByTagBillCurrencyPick						=excelReader.getCellData("SmokeSalesInvoiceVAT", 327, 7);
	 		expBillBreakUpByTagBaseCurrencyPick						=excelReader.getCellData("SmokeSalesInvoiceVAT", 328, 7);
	 		
	 		
	 		expBillBreakUpByTagLocalCurrencyPick					=excelReader.getCellData("SmokeSalesInvoiceVAT", 329, 7);
	 		expBillAmtAdjustedInTransactionCurrencyPick				=excelReader.getCellData("SmokeSalesInvoiceVAT", 330, 7);
	 		expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	=excelReader.getCellData("SmokeSalesInvoiceVAT", 331, 7);
	 		
	 		
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 320, 8, actBillNewReferencePick);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 321, 8, actBillAmtAdjAgainstNewRefInOtherVouchersPick);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 322, 8, actBillTransactionCurrencyPick);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 323, 8, actBillBaseCurrencyPick);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 324, 8, actBillLocalCurrencyPick);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 325, 8, actBillBalanceNewRefAmountPick);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 326, 8, actBillBreakUpByTagDepartmentPick);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 327, 8, actBillBreakUpByTagBaseCurrencyPick);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 328, 8, actBillBreakUpByTagBillCurrencyPick);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 329, 8, actBillBreakUpByTagLocalCurrencyPick);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 330, 8, actBillAmtAdjustedInTransactionCurrencyPick);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 331, 8, actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick);

	 		System.out.println("actBillNewReferencePick 								: "+actBillNewReferencePick									+ " Value Expected : "+expBillNewReferencePick);
	 		System.out.println("actBillAmtAdjAgainstNewRefInOtherVouchersPick			: " + actBillAmtAdjAgainstNewRefInOtherVouchersPick			+ "	Value Expected : "+expBillAmtAdjAgainstNewRefInOtherVouchersPick);
	 		System.out.println("actBillTransactionCurrencyPick							: "+ actBillTransactionCurrencyPick							+ " Value Expected : "+expBillTransactionCurrencyPick);
	 		System.out.println("actBillBaseCurrencyPick									: "+ actBillBaseCurrencyPick								+ " Value Expected : "+expBillBaseCurrencyPick);
	 		System.out.println("actBillLocalCurrencyPick								: "+ actBillLocalCurrencyPick								+ " Value Expected : "+expBillLocalCurrencyPick);
	 		System.out.println("actBillBalanceNewRefAmountPick							: "+ actBillBalanceNewRefAmountPick							+ " Value Expected : "+expBillBalanceNewRefAmountPick);
	        System.out.println("actBillBreakUpByTagDepartmentPick						: "+ actBillBreakUpByTagDepartmentPick						+ " Value Expected : "+expBillBreakUpByTagDepartmentPick);
	 		System.out.println("actBillBreakUpByTagBaseCurrencyPick						: "+ actBillBreakUpByTagBaseCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagBaseCurrencyPick);
	 		System.out.println("actBillBreakUpByTagBillCurrencyPick						: "+ actBillBreakUpByTagBillCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagBillCurrencyPick);
	 		System.out.println("actBillBreakUpByTagLocalCurrencyPick					: "+ actBillBreakUpByTagLocalCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagLocalCurrencyPick);
	 		System.out.println("actBillAmtAdjustedInTransactionCurrencyPick				: "+ actBillAmtAdjustedInTransactionCurrencyPick			+ " Value Expected : "+expBillAmtAdjustedInTransactionCurrencyPick);
	 		System.out.println("actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick  : "+ actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	+ " Value Expected : "+expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick);
	 			    
	 		
	 	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		    Bill_OkBtn.click();
		   
		    boolean savingMessage=checkVoucherSavingMessage(docno);
		    
		    String actMessage = Boolean.toString(savingMessage);
		    
		    String expMessage = excelReader.getCellData("SmokeSalesInvoiceVAT", 332, 7);
			
		    System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage);
		    
		   
			
			if(actMessage.equalsIgnoreCase(expMessage) && 
					
			        actBillNewReference.equalsIgnoreCase(expBillNewReference) &&
	 				actBillAmtAdjAgainstNewRefInOtherVouchers.equalsIgnoreCase(expBillAmtAdjAgainstNewRefInOtherVouchers) &&
	 				actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 				
	 				actBillBaseCurrency.equalsIgnoreCase(actBillBaseCurrency) &&
	 				actBillLocalCurrency.equalsIgnoreCase(actBillLocalCurrency) &&
	 				actBillBalanceNewRefAmount.equalsIgnoreCase(actBillBalanceNewRefAmount) &&
	 				actBillBreakUpByTagDepartment.equalsIgnoreCase(actBillBreakUpByTagDepartment) &&
	 				actBillBreakUpByTagBaseCurrency.equalsIgnoreCase(actBillBreakUpByTagBaseCurrency) &&
	 				actBillBreakUpByTagBillCurrency.equalsIgnoreCase(actBillBreakUpByTagBillCurrency) &&
	 				actBillBreakUpByTagLocalCurrency.equalsIgnoreCase(actBillBreakUpByTagLocalCurrency) &&
	 				actBillAmtAdjustedInTransactionCurrency.equalsIgnoreCase(actBillAmtAdjustedInTransactionCurrency) &&
	 				actBillBalanceAmtToBeAdjustedInTransactionCurrency.equalsIgnoreCase(actBillBalanceAmtToBeAdjustedInTransactionCurrency) &&
			
	 				
	 				actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) &&
	 				actBillAmtAdjAgainstNewRefInOtherVouchersPick.equalsIgnoreCase(expBillAmtAdjAgainstNewRefInOtherVouchersPick) &&
	 				actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) &&
	 				actBillBaseCurrencyPick.equalsIgnoreCase(actBillBaseCurrencyPick) &&
	 				actBillLocalCurrencyPick.equalsIgnoreCase(actBillLocalCurrencyPick) &&
	 				actBillBalanceNewRefAmountPick.equalsIgnoreCase(actBillBalanceNewRefAmountPick) &&
	 				actBillBreakUpByTagDepartmentPick.equalsIgnoreCase(actBillBreakUpByTagDepartmentPick) &&
	 				actBillBreakUpByTagBaseCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagBaseCurrencyPick) &&
	 				actBillBreakUpByTagBillCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagBillCurrencyPick) &&
	 				actBillBreakUpByTagLocalCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagLocalCurrencyPick) &&
	 				actBillAmtAdjustedInTransactionCurrencyPick.equalsIgnoreCase(actBillAmtAdjustedInTransactionCurrencyPick) &&
	 				actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick.equalsIgnoreCase(actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick))
			{
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 307, 9, resPass);
				return true;
				
			}
			else
			{
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 307, 9, resFail);
				return false;
			}
			
		}
	 	
		
		public boolean checkBatchPopUpValuesAfterAllocatingOnPreviousButton() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
			 
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";		
			 
			 Thread.sleep(2000);
			
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
			 previousBtn.click();
			 
			 checkUserFriendlyMessage();
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			 select1stRow_19thColumn.click();
			 
		     Thread.sleep(3000);
		     
		     System.out.println("Batch Rows"+batchPopUPEmptyRows.getAttribute("data-totalrows"));
		     
			
		     String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
		     String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
				
			String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
			String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
			
			String actRow3BatchNo,actRow3BaseQty,actRow3Rate,actRow3AdjustedQty,actRow3TotalAdjustedQty;
			String expRow3BatchNo,expRow3BaseQty,expRow3Rate,expRow3AdjustedQty,expRow3TotalAdjustedQty;
			
			actBatchName=batchItemName.getText();
			actTotalQty=batchTotalQty.getText();
			actAdjustedQty=batchAdjustQty.getText();
			actBalance=batchBalance.getText();
			actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
			actTotalQtyFooter=batchTotalQtyFooter.getText();
			
			
			actRow1BatchNo=batch_BatchNoRow1.getText();
			actRow1BaseQty=batch_BaseQtyRow1.getText();
			//act7=batch_ExpiryInDateRow1.getText();
			actRow1Rate=batch_RateRow1.getText();
			actRow1AdjustedQty=batch_QtyAdjustedRow1.getText();
			//act10=batch_PurchaseDateRow1.getText();

			
			actRow2BatchNo=batch_BatchNoRow2.getText();
			actRow2BaseQty=batch_BaseQtyRow2.getText();
			//act14=batch_ExpiryInDateRow2.getText();
			actRow2Rate=batch_RateRow2.getText();
			actRow2AdjustedQty=batch_QtyAdjustedRow2.getText();
			//act17=batch_PurchaseDateRow2.getText();
			
			/*actRow3BatchNo=batch_BatchNoRow3.getText();
			actRow3BaseQty=batch_BaseQtyRow3.getText();
			//act14=batch_ExpiryInDateRow2.getText();
			actRow3Rate=batch_RateRow3.getText();
			actRow3AdjustedQty=batch_QtyAdjustedRow3.getText();
			//act17=batch_PurchaseDateRow2.getText();*/


			expBatchName=excelReader.getCellData("SmokeSalesInvoiceVAT", 334, 7);
			expTotalQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 335, 7);
			expAdjustedQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 336, 7);
			expBalance=excelReader.getCellData("SmokeSalesInvoiceVAT", 337, 7);
			
			
			expTotalQtyFooter=excelReader.getCellData("SmokeSalesInvoiceVAT", 339, 7);
			expTotalAdjustedQtyFooter=excelReader.getCellData("SmokeSalesInvoiceVAT", 338, 7);
			
			
			expRow1BatchNo=excelReader.getCellData("SmokeSalesInvoiceVAT", 340, 7);
			expRow1BaseQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 341, 7);
			expRow1Rate=excelReader.getCellData("SmokeSalesInvoiceVAT", 342, 7);
			expRow1AdjustedQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 343, 7);
			
			
			
		
			expRow2BatchNo=excelReader.getCellData("SmokeSalesInvoiceVAT", 344, 7);
			expRow2BaseQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 345, 7);
			expRow2Rate=excelReader.getCellData("SmokeSalesInvoiceVAT", 346, 7);
			expRow2AdjustedQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 347, 7);
			
			/*expRow3BatchNo=excelReader.getCellData("SmokeSalesInvoiceVAT", 348, 7);
			expRow3BaseQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 349, 7);
			expRow3Rate=excelReader.getCellData("SmokeSalesInvoiceVAT", 350, 7);
			expRow3AdjustedQty=excelReader.getCellData("SmokeSalesInvoiceVAT", 351, 7);*/
			
		
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 334, 8, actBatchName);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 335, 8, actTotalQty);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 336, 8, actAdjustedQty);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 337, 8, actBalance);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 339, 8, actTotalQtyFooter);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 338, 8, actTotalAdjustedQtyFooter);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 340, 8, actRow1BatchNo);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 341, 8, actRow1BaseQty);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 342, 8, actRow1Rate);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 343, 8, actRow1AdjustedQty);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 344, 8, actRow2BatchNo);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 345, 8, actRow2BaseQty);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 346, 8, actRow2Rate);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 347, 8, actRow2AdjustedQty);
			
			/*excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 348, 8, actRow3BatchNo);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 349, 8, actRow3BaseQty);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 350, 8, actRow3Rate);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 351, 8, actRow3AdjustedQty);*/
			
			System.out.println(actBatchName);
			System.out.println(actTotalQty);
			System.out.println(actAdjustedQty);
			System.out.println(actBalance);
			
			
			System.out.println(actTotalAdjustedQtyFooter);
			System.out.println(actTotalQtyFooter);
				
			//First Row
			
			System.out.println(actRow1BatchNo);
			System.out.println(actRow1BaseQty);
			System.out.println(actRow1Rate);
			System.out.println(actRow1AdjustedQty);

			
			//Second Row
			
			System.out.println(actRow2BatchNo);
			System.out.println(actRow2BaseQty);
			System.out.println(actRow2Rate);
			System.out.println(actRow2AdjustedQty);
		
			System.out.println("*********************************************** checkBatchWiseScreenPopupWithPickOnFIFO  ********************************************");
			System.out.println("Entry Page Batch Popup Batch Name Value Actual          : "+actBatchName              + " Value Expected : "+expBatchName);	
			System.out.println("Entry Page Batch Popup Total Qty Value Actual           : "+actTotalQty               + " Value Expected : "+expTotalQty);
			System.out.println("Entry Page Batch Popup Adjusted Qty Value Actual        : "+actAdjustedQty            + " Value Expected : "+expAdjustedQty);
			System.out.println("Entry Page Batch Popup Balance Value Actual             : "+actBalance                + " Value Expected : "+expBalance);
			System.out.println("Entry Page Batch Popup Adjusted Qty Footer Value Actual : "+actTotalAdjustedQtyFooter + " Value Expected : "+expTotalAdjustedQtyFooter);
			System.out.println("Entry Page Batch Popup Total Qty Footer Value Actual    : "+actTotalQtyFooter         + " Value Expected : "+expTotalQtyFooter);
			
			System.out.println("Entry Page Batch Popup Row1 Batch No Value Actual       : "+actRow1BatchNo            + " Value Expected : "+expRow1BatchNo);	
			System.out.println("Entry Page Batch Popup Row1 Base Qty Value Actual       : "+actRow1BaseQty            + " Value Expected : "+expRow1BaseQty);
			System.out.println("Entry Page Batch Popup Row1 Rate Value Actual           : "+actRow1Rate               + " Value Expected : "+expRow1Rate);
			System.out.println("Entry Page Batch Popup Row1 Adjusted Qty Value Actual   : "+actRow1AdjustedQty        + " Value Expected : "+expRow1AdjustedQty);
			
			System.out.println("Entry Page Batch Popup Row2 Batch No Value Actual       : "+actRow2BatchNo            + " Value Expected : "+expRow2BatchNo);	
			System.out.println("Entry Page Batch Popup Row2 Base Qty Value Actual       : "+actRow2BaseQty            + " Value Expected : "+actRow2BaseQty);
			System.out.println("Entry Page Batch Popup Row2 Rate Value Actual           : "+expRow2Rate               + " Value Expected : "+actRow2Rate);
			System.out.println("Entry Page Batch Popup Row2 Adjusted Qty Value Actual   : "+actRow2AdjustedQty        + " Value Expected : "+expRow2AdjustedQty);

			/*System.out.println("Entry Page Batch Popup Value Actual  : "+actRow3BatchNo                  +" Value Expected : "+expRow3BatchNo);	
			System.out.println("Entry Page Batch Popup Value Actual  : "+actRow3BaseQty                  +" Value Expected : "+actRow3BaseQty);
			System.out.println("Entry Page Batch Popup Value Actual  : "+actRow3Rate                     +" Value Expected : "+expRow3Rate);
			System.out.println("Entry Page Batch Popup Value Actual  : "+actRow3AdjustedQty              +" Value Expected : "+expRow3AdjustedQty);*/
			
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
			 batchCancelIcon.click();
			 
			 Thread.sleep(2000);
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			 new_CloseBtn.click();

			if(actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
					&& actBalance.equalsIgnoreCase(expBalance) 
					
					&& actTotalAdjustedQtyFooter.equalsIgnoreCase(expTotalAdjustedQtyFooter) && actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) 
					
					&& actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow1BaseQty.equalsIgnoreCase(expRow1BaseQty) && actRow1Rate.equalsIgnoreCase(expRow1Rate) 
					&& actRow1AdjustedQty.equalsIgnoreCase(expRow1AdjustedQty) 
					
					&& actRow2BatchNo.equalsIgnoreCase(expRow2BatchNo) && actRow2BaseQty.equalsIgnoreCase(expRow2BaseQty) && actRow2Rate.equalsIgnoreCase(expRow2Rate) 
					&& actRow2AdjustedQty.equalsIgnoreCase(expRow2AdjustedQty)
					
					/*&& actRow3BatchNo.equalsIgnoreCase(expRow3BatchNo) && actRow3BaseQty.equalsIgnoreCase(expRow3BaseQty) && actRow3Rate.equalsIgnoreCase(expRow3Rate) 
					&& actRow3AdjustedQty.equalsIgnoreCase(expRow3AdjustedQty)*/)
			{
				System.out.println("Test Pass : Batch fields are As expected ");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 153, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Batch fields are As Not  expected ");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 153, 9, resFail);
				return false;
			}
	   }
		 
	 	
	 	
		public boolean checkSecondRowBinInputAndClickSaveWithoutBin() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
			getAction().doubleClick(grid_ChkBox1).build().perform();
			
			boolean loading=checkLoadingMessage();
			
			System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
		
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
			select2ndRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
			pvWareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.END);
			enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
			//enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemcount1=itemListCount.size();
			
			System.err.println(itemcount1);
				
			for(int i=0 ; i < itemcount1 ;i++)
			{
				String data=itemListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("SmokeSalesInvoiceVAT", 399, 6)))
				{
					itemListCount.get(i).click();
					
					break;
				}
			}
				
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_5thColumn));
			select2ndRow_5thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_8thColumn));
			select2ndRow_8thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
			enter_AQTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
			enter_FQTxt.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVAT", 400, 6));
			enter_FQTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_11thColumn));
			select2ndRow_11thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("4");
			enter_Quantity.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_11thColumn));
			String ActData=select2ndRow_11thColumn.getText();
			String Expdata=excelReader.getCellData("SmokeSalesInvoiceVAT", 399, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 399, 8, ActData);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_14thColumn));
			select2ndRow_14thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVAT", 401, 6));
			enter_Rate.sendKeys(Keys.TAB);
			

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.click();
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			String expValidationMessageOnBinColumnBlank=excelReader.getCellData("SmokeSalesInvoiceVAT", 400, 7);
			
			String validationMessage=checkValidationMessage(expValidationMessageOnBinColumnBlank);
			
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 400, 8, validationMessage);
			
			System.out.println("*********************************************** checkSecondRowBinInputAndClickSaveWithoutBin  ********************************************");
			System.out.println("Quantity : "+ActData+" Value Expected : "+Expdata);
			System.out.println("Entry Page Check Qty Preload Value Actual  : "+validationMessage+" Value Expected : "+expValidationMessageOnBinColumnBlank);	
			
			
			if(ActData.equalsIgnoreCase(Expdata) && validationMessage.equalsIgnoreCase(expValidationMessageOnBinColumnBlank))
			{
				System.out.println("Test Pass : Error Message Is As Expected");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 399, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Error Message Is NOT As Expected");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 399, 9, resPass);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefcancel));
				billRefcancel.click();
				
				return false;
			}
		}
	     
		public boolean checkDisplayBinOutWardPopUpScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_20thColumn));
			select2ndRow_20thColumn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchBtn));
			binSearchBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchTxt));
			
			// Actual
			boolean actbinSearchTxt						=binSearchTxt.isDisplayed();
			boolean actbinSearchBtn						=binSearchBtn.isDisplayed();
			boolean actbinAutoAllocateBtn				=binAutoAllocateBtn.isDisplayed();
			boolean actbinPickBtn						=binPickBtn.isDisplayed();
			boolean actbinCancelBtn						=binCancelBtn.isDisplayed();
			boolean actbinAutoAllocateWithinGroupBtn	=binAutoAllocateWithinGroupBtn.isDisplayed();
			
			// Expected			
			boolean expbinSearchTxt						=true;
			boolean expbinSearchBtn						=true;
			boolean expbinAutoAllocateBtn				=true;
			boolean expbinPickBtn						=true;
			boolean expbinCancelBtn						=true;
			boolean expbinAutoAllocateWithinGroupBtn	=true;
			
			boolean res = actbinSearchTxt==expbinSearchTxt && actbinSearchBtn==expbinSearchBtn && actbinAutoAllocateBtn==expbinAutoAllocateBtn
					&& actbinPickBtn==expbinPickBtn && actbinCancelBtn==expbinCancelBtn && actbinAutoAllocateWithinGroupBtn==expbinAutoAllocateWithinGroupBtn;
			
			String actResult = Boolean.toString(res);
			String expResult = excelReader.getCellData("SmokeSalesInvoiceVAT", 402, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 402, 8, actResult);
			
			System.out.println("************* Bin Out Ward Pop Up Screen************");
			
			System.out.println("binSearchTxt       					: "+actbinSearchTxt   				 +"   Value Expected :  "+expbinSearchTxt);
			System.out.println("binSearchBtn        				: "+actbinSearchBtn   				 +"   Value Expected :  "+expbinSearchBtn);
			System.out.println("binAutoAllocateBtn        			: "+actbinAutoAllocateBtn   		 +"   Value Expected :  "+expbinAutoAllocateBtn);
			System.out.println("binPickBtn        					: "+actbinPickBtn   				 +"   Value Expected :  "+expbinPickBtn);
			System.out.println("binCancelBtn        				: "+actbinCancelBtn   				 +"   Value Expected :  "+expbinCancelBtn);
			System.out.println("binAutoAllocateWithinGroupBtn       : "+actbinAutoAllocateWithinGroupBtn +"   Value Expected :  "+expbinAutoAllocateWithinGroupBtn);
			
			
			if(actResult.equalsIgnoreCase(expResult))
			{
				System.out.println("Test Pass : Bin Pop Displayed");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 402, 9, resPass);
				return true;
				
			}
			else
			{
				System.out.println("Test Fail : Data NOT Entered in Second Row");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 402, 9, resFail);
				return false;
			}
		}
		
		@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[13]")
		private static WebElement  binoutwardRowTotalToBePicked;


		@FindBy(xpath="//*[@id='id_bins_ok']")
		private static WebElement  binOkButtonStatus;
		
		
		public boolean checkBinValuesInSalesInvoiceBinPopupScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
							
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchTxt));
		
			// Actual
			String actbinTotalQty					=binTotalQty.getAttribute("value");
			String actbinBaseUOM					=binBaseUOM.getText();
			//String actbinBalanceTxt					=binBalanceTxt.getAttribute("value");
			
			
			String actbinoutwardRowTotalToBePicked	=binoutwardRowTotalToBePicked.getText();
			
			
			int binInwardGridListCount = binInwardGridList.size();
			
			ArrayList<String> binInwardGridListArray = new ArrayList<String>();
			
			for(int i=0;i<binInwardGridListCount;i++)
			{
				String data = binInwardGridList.get(i).getText();
				binInwardGridListArray.add(data);
			}
			
			
			String actbinInwardGridList=binInwardGridListArray.toString();
			
			String expbinInwardGridList=excelReader.getCellData("SmokeSalesInvoiceVAT", 407, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 407, 8, actbinInwardGridList);
			
			System.out.println("ActbinInwardGridList : " + actbinInwardGridList);
			System.out.println("ExpbinInwardGridList : " + expbinInwardGridList);
			
			// Expected
			String expbinTotalQty					=excelReader.getCellData("SmokeSalesInvoiceVAT", 403, 7);
			String expbinBaseUOM					=excelReader.getCellData("SmokeSalesInvoiceVAT", 404, 7);
			//String expbinBalanceTxt					=excelReader.getCellData("SmokeSalesInvoiceVAT", 405, 7);
			
			
			String expbinoutwardRowTotalToBePicked	=excelReader.getCellData("SmokeSalesInvoiceVAT", 406, 7);
			
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 403, 8, actbinTotalQty);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 404, 8, actbinBaseUOM);
			//excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 405, 8, actbinBalanceTxt);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 406, 8, actbinoutwardRowTotalToBePicked);
			
			
			System.out.println("*********************************** checkBinValuesInSalesInvoiceBinPopupScreen  ************************************");
			
			System.out.println("binTotalQty              	 : "+actbinTotalQty					+"  Value Expected :  "+expbinTotalQty);	
			System.out.println("binBaseUOM                	 : "+actbinBaseUOM					+"  Value Expected :  "+expbinBaseUOM);	
			//System.out.println("binBalanceTxt            	 : "+actbinBalanceTxt				+"  Value Expected :  "+expbinBalanceTxt);	
			
			
			System.out.println("binoutwardRowTotalToBePicked :"+actbinoutwardRowTotalToBePicked +"  Value Expected :  "+expbinoutwardRowTotalToBePicked);
			
			
			if(actbinTotalQty.equalsIgnoreCase(expbinTotalQty) && actbinBaseUOM.equalsIgnoreCase(expbinBaseUOM)
					/*&& actbinBalanceTxt.equalsIgnoreCase(expbinBalanceTxt)*/
					
					&& actbinInwardGridList.equalsIgnoreCase(expbinInwardGridList)
					
					
					&& actbinoutwardRowTotalToBePicked.equalsIgnoreCase(expbinoutwardRowTotalToBePicked))
			{
				System.out.println("Values Are As Expected");;
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 403, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Values Are Not As Expected");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 403, 9, resFail);
				return false;
			}
		}
		
		

		public boolean checkOkWithoutSelectingAnyBin() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			String actbinOkButtonStatus		=binOkButtonStatus.getAttribute("disabled");
			
			String expbinOkButtonStatus		=excelReader.getCellData("SmokeSalesInvoiceVAT", 408, 7);
			
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 408, 8, actbinOkButtonStatus);
			
			System.out.println("*********************************** checkOkWithoutSelectingAnyBin  ************************************");
			
			System.out.println("binOkButtonStatus  : "+actbinOkButtonStatus+" Values Expected : "+expbinOkButtonStatus);

			
			if(actbinOkButtonStatus.equalsIgnoreCase(expbinOkButtonStatus))
			{
				System.out.println("Values Are As Expected");

				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 408, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Values Are Not As Expected");

				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 408, 9, resFail);
				return false;
			}
			
		}
	     
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-12']")
		private static WebElement  binoutwardRow1ToBePicked;	
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-12']")
		private static WebElement  binoutwardRow2ToBePicked;
		
		public boolean checkOkAfterAutoAllocatingBin() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
			binAutoAllocateBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
			// Actual
			boolean res						        =binOkBtn.isDisplayed();
			String actbinOkBtn                      = Boolean.toString(res);
			String actbinoutwardRow1ToBePicked		=binoutwardRow1ToBePicked.getText();
			String actbinoutwardRow2ToBePicked		=binoutwardRow2ToBePicked.getText();
			String actbinoutwardRowTotalToBePicked	=binoutwardRowTotalToBePicked.getText();
			
			// Expected
			String expbinOkBtn						=excelReader.getCellData("SmokeSalesInvoiceVAT", 409, 7);
			String expbinoutwardRow1ToBePicked		=excelReader.getCellData("SmokeSalesInvoiceVAT", 410, 7);
			String expbinoutwardRow2ToBePicked		=excelReader.getCellData("SmokeSalesInvoiceVAT", 411, 7);
			String expbinoutwardRowTotalToBePicked	=excelReader.getCellData("SmokeSalesInvoiceVAT", 412, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 409, 8, actbinOkBtn);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 410, 8, actbinoutwardRow1ToBePicked);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 411, 8, actbinoutwardRow2ToBePicked);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 412, 8, actbinoutwardRowTotalToBePicked);
			
			System.out.println("*********************************** checkOkAfterAutoAllocatingBin  ************************************");
			
			System.out.println("binOkBtn       				  : "+actbinOkBtn						+" Value Expected : "+expbinOkBtn);
			System.out.println("binoutwardRow1ToBePicked      : "+actbinoutwardRow1ToBePicked		+" Value Expected : "+expbinoutwardRow1ToBePicked);
			System.out.println("binoutwardRow2ToBePicked      : "+actbinoutwardRow2ToBePicked		+" Value Expected : "+expbinoutwardRow2ToBePicked);
			System.out.println("binoutwardRowTotalToBePicked  : "+actbinoutwardRowTotalToBePicked   +" Value Expected : "+expbinoutwardRowTotalToBePicked);
			
			
			
			if(actbinOkBtn.equalsIgnoreCase(expbinOkBtn) && actbinoutwardRow1ToBePicked.equalsIgnoreCase(expbinoutwardRow1ToBePicked)
					&& actbinoutwardRow2ToBePicked.equalsIgnoreCase(expbinoutwardRow2ToBePicked) 
					&& actbinoutwardRowTotalToBePicked.equalsIgnoreCase(expbinoutwardRowTotalToBePicked))
			{
				System.out.println("Values Are As Expected");

				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 409, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Values Are Not As Expected");

				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 409, 9, resFail);
				return false;
			}
		}
			
			
		public boolean checkBinColumnInVoucherAfterClickingOkInBinPopUpScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
			binOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_20thColumn));
			
			String actBinColumn	=select2ndRow_20thColumn.getText();
			
			String expBinColumn	=excelReader.getCellData("SmokeSalesInvoiceVAT", 413, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 413, 8, actBinColumn);
			
			System.out.println("*********************************** checkBinColumnInVoucherAfterClickingOkInBinPopUpScreen  ************************************");
			
			System.out.println("BinColumn     : "+actBinColumn+" Value Expected : "+expBinColumn);
			
			if(actBinColumn.equalsIgnoreCase(expBinColumn))
			{
				System.out.println("Values Are As Expected");

				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 413, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Values Are Not As Expected");

				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 413, 9, resFail);
				return false;
			}
		}
			
		
		

		
		public boolean checkBinCapcityInNextRowAfterAllocatingBin() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
			select3rdRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
			pvWareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.END);
			enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemcount1=itemListCount.size();
			
			System.err.println(itemcount1);
				
			for(int i=0 ; i < itemcount1 ;i++)
			{
				String data=itemListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("SmokeSalesInvoiceVAT", 414, 6)))
				{
					itemListCount.get(i).click();
					
					break;
				}
			}
				
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_5thColumn));
			select3rdRow_5thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_8thColumn));
			select3rdRow_8thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
			enter_AQTxt.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVAT", 415, 6));
			enter_AQTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
			enter_FQTxt.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVAT", 416, 6));
			enter_FQTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_11thColumn));
			select3rdRow_11thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("20");
			enter_Quantity.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
						
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_14thColumn));
			select3rdRow_14thColumn.click();
						
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVAT", 417, 6));
			enter_Rate.sendKeys(Keys.TAB);
						
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.click();
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_20thColumn));
			select3rdRow_20thColumn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchBtn));
			binSearchBtn.click();
			
			Thread.sleep(2000);
			
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchTxt));
			
			// Actual
			boolean actbinSearchTxt						=binSearchTxt.isDisplayed();
			boolean actbinSearchBtn						=binSearchBtn.isDisplayed();
			boolean actbinAutoAllocateBtn				=binAutoAllocateBtn.isDisplayed();
			boolean actbinPickBtn						=binPickBtn.isDisplayed();
			boolean actbinCancelBtn						=binCancelBtn.isDisplayed();
			boolean actbinAutoAllocateWithinGroupBtn	=binAutoAllocateWithinGroupBtn.isDisplayed();
			
			// Expected			
			boolean expbinSearchTxt						=true;
			boolean expbinSearchBtn						=true;
			boolean expbinAutoAllocateBtn				=true;
			boolean expbinPickBtn						=true;
			boolean expbinCancelBtn						=true;
			boolean expbinAutoAllocateWithinGroupBtn	=true;
			
			boolean res = actbinSearchTxt==expbinSearchTxt && actbinSearchBtn==expbinSearchBtn && actbinAutoAllocateBtn==expbinAutoAllocateBtn
					&& actbinPickBtn==expbinPickBtn && actbinCancelBtn==expbinCancelBtn && actbinAutoAllocateWithinGroupBtn==expbinAutoAllocateWithinGroupBtn;
			
			String actResult = Boolean.toString(res);
			String expResult = excelReader.getCellData("SmokeSalesInvoiceVAT", 414, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 414, 8, actResult);
			
			System.out.println("Result : "+actResult+" Value Expected : "+expResult);
			
			
			// Actual
			String actbinTotalQty						=binTotalQty.getAttribute("value");
			String actbinBaseUOM						=binBaseUOM.getText();
			//String actbinBalanceTxt						=binBalanceTxt.getAttribute("value");
			
			
			String actbinoutwardRowTotalToBePicked		=binoutwardRowTotalToBePicked.getText();
			
			int binInwardGridListCount = binInwardGridList.size();
			
			ArrayList<String> binInwardGridListArray = new ArrayList<String>();
			
			for(int i=0;i<binInwardGridListCount;i++)
			{
				String data = binInwardGridList.get(i).getText();
				binInwardGridListArray.add(data);
			}
			
			
			String actbinInwardGridList=binInwardGridListArray.toString();
			
			String expbinInwardGridList=excelReader.getCellData("SmokeSalesInvoiceVAT", 419, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 419, 8, actbinInwardGridList);
			
			System.out.println("ActbinInwardGridList : " + actbinInwardGridList);
			System.out.println("ExpbinInwardGridList : " + expbinInwardGridList);
			
			// Expected
			String expbinTotalQty					=excelReader.getCellData("SmokeSalesInvoiceVAT", 415, 7);
			String expbinBaseUOM					=excelReader.getCellData("SmokeSalesInvoiceVAT", 416, 7);
			//String expbinBalanceTxt					=excelReader.getCellData("SmokeSalesInvoiceVAT", 417, 7);
			
			
			String expbinoutwardRowTotalToBePicked	=excelReader.getCellData("SmokeSalesInvoiceVAT", 418, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 415, 8, actbinTotalQty);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 416, 8, actbinBaseUOM);
			//excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 417, 8, actbinBalanceTxt);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 418, 8, actbinoutwardRowTotalToBePicked);
			
			
			System.out.println("************* Bin Out Ward Pop Up Screen************");
			
			System.out.println("binSearchTxt       					: "+actbinSearchTxt   				 +"  Value Expected : "+expbinSearchTxt);
			System.out.println("binSearchBtn        				: "+actbinSearchBtn   				 +"  Value Expected : "+expbinSearchBtn);
			System.out.println("binAutoAllocateBtn        			: "+actbinAutoAllocateBtn   		 +"  Value Expected : "+expbinAutoAllocateBtn);
			System.out.println("binPickBtn        					: "+actbinPickBtn   				 +"  Value Expected : "+expbinPickBtn);
			System.out.println("binCancelBtn        				: "+actbinCancelBtn   				 +"  Value Expected : "+expbinCancelBtn);
			System.out.println("binAutoAllocateWithinGroupBtn       : "+actbinAutoAllocateWithinGroupBtn +"  Value Expected : "+expbinAutoAllocateWithinGroupBtn);
			
			
			System.out.println("binTotalQty              	 : "+actbinTotalQty					+"  Value Expected : "+expbinTotalQty);	
			System.out.println("binBaseUOM                	 : "+actbinBaseUOM					+"  Value Expected : "+expbinBaseUOM);	
			//System.out.println("binBalanceTxt            	 : "+actbinBalanceTxt				+"  Value Expected : "+expbinBalanceTxt);	
			
			
			System.out.println("binoutwardRowTotalToBePicked :"+actbinoutwardRowTotalToBePicked +"  Value Expected : "+expbinoutwardRowTotalToBePicked);
			
			
			if(actResult.equalsIgnoreCase(expResult)
					
					&& actbinTotalQty.equalsIgnoreCase(expbinTotalQty) && actbinBaseUOM.equalsIgnoreCase(expbinBaseUOM)
					/*&& actbinBalanceTxt.equalsIgnoreCase(expbinBalanceTxt)*/
					
					
					&& actbinoutwardRowTotalToBePicked.equalsIgnoreCase(expbinoutwardRowTotalToBePicked))
			{
								
				System.out.println("Test Pass : Bin Pop Displayed");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 414, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Data NOT Entered in Second Row");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 414, 9, resFail);
				return false;
			}
		}
	     
		
		public boolean checkBinSplittingOnAutoAllocateButton() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
			binAutoAllocateBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
			// Actual
			boolean res						        =binOkBtn.isDisplayed();
			String actbinOkBtn                      = Boolean.toString(res);
			String actbinoutwardRow1ToBePicked		=binoutwardRow1ToBePicked.getText();
			String actbinoutwardRow2ToBePicked		=binoutwardRow2ToBePicked.getText();
			String actbinoutwardRowTotalToBePicked	=binoutwardRowTotalToBePicked.getText();
			
			// Expected
			String expbinOkBtn						=excelReader.getCellData("SmokeSalesInvoiceVAT", 420, 7);
			String expbinoutwardRow1ToBePicked		=excelReader.getCellData("SmokeSalesInvoiceVAT", 421, 7);
			String expbinoutwardRow2ToBePicked		=excelReader.getCellData("SmokeSalesInvoiceVAT", 422, 7);
			String expbinoutwardRowTotalToBePicked	=excelReader.getCellData("SmokeSalesInvoiceVAT", 423, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 420, 8, actbinOkBtn);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 421, 8, actbinoutwardRow1ToBePicked);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 422, 8, actbinoutwardRow2ToBePicked);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 423, 8, actbinoutwardRowTotalToBePicked);
			
			System.out.println("*********************************** checkOkAfterAutoAllocatingBin  ************************************");
			
			System.out.println("binOkBtn       				  : "+actbinOkBtn						+" Value Expected : "+expbinOkBtn);
			System.out.println("binoutwardRow1ToBePicked      : "+actbinoutwardRow1ToBePicked		+" Value Expected : "+expbinoutwardRow1ToBePicked);
			System.out.println("binoutwardRow2ToBePicked      : "+actbinoutwardRow2ToBePicked		+" Value Expected : "+expbinoutwardRow2ToBePicked);
			System.out.println("binoutwardRowTotalToBePicked  : "+actbinoutwardRowTotalToBePicked   +" Value Expected : "+expbinoutwardRowTotalToBePicked);
			
			
			
			if(actbinOkBtn.equalsIgnoreCase(expbinOkBtn) && actbinoutwardRow1ToBePicked.equalsIgnoreCase(expbinoutwardRow1ToBePicked)
					&& actbinoutwardRow2ToBePicked.equalsIgnoreCase(expbinoutwardRow2ToBePicked) 
					&& actbinoutwardRowTotalToBePicked.equalsIgnoreCase(expbinoutwardRowTotalToBePicked))
			{
				System.out.println("Values Are As Expected");

				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 420, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Values Are Not As Expected");

				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 420, 9, resFail);
				return false;
			}
		}
			
		
		
		public boolean checkBinColumnInVoucherAfterClickingOkInBinPopUpScreenToCheckSplitting() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
			binOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_20thColumn));
			
			String actBinColumnRow3	=select3rdRow_20thColumn.getText();
			String expBinColumnRow3	=excelReader.getCellData("SmokeSalesInvoiceVAT", 424, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 424, 8, actBinColumnRow3);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_20thColumn));
			
			String actBinColumnRow4	=select4thRow_20thColumn.getText();
			String expBinColumnRow4	=excelReader.getCellData("SmokeSalesInvoiceVAT", 425, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 425, 8, actBinColumnRow4);
			
			System.out.println("*********************************** checkBinColumnInVoucherAfterClickingOkInBinPopUpScreen  ************************************");
			
			System.out.println("BinColumnRow3     : "+actBinColumnRow3+" Value Expected : "+expBinColumnRow3);
			System.out.println("BinColumnRow4     : "+actBinColumnRow4+" Value Expected : "+expBinColumnRow4);
			
			if(actBinColumnRow3.equalsIgnoreCase(expBinColumnRow3) && actBinColumnRow4.equalsIgnoreCase(expBinColumnRow4))
			{
				System.out.println("Values Are As Expected");

				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 424, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Values Are Not As Expected");

				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 424, 9, resFail);
				return false;
			}
		}
		
		
		 public boolean CheckBinPopUpEmptyAfterFullConsumeInPreviousRows() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
			 
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_1stColumn));
			 select5thRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
			pvWareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.END);
			enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemcount1=itemListCount.size();
			
			System.err.println(itemcount1);
				
			for(int i=0 ; i < itemcount1 ;i++)
			{
				String data=itemListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("SmokeSalesInvoiceVAT", 427, 6)))
				{
					itemListCount.get(i).click();
					
					break;
				}
			}
				
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_5thColumn));
			select5thRow_5thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_8thColumn));
			select5thRow_8thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
			enter_AQTxt.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVAT", 428, 6));
			enter_AQTxt.sendKeys(Keys.TAB);
			
			/*String expMessage = excelReader.getCellData("SmokeSalesInvoiceVAT", 428, 7);
			String actMessage = checkValidationMessage(expMessage);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 428, 8, actMessage);*/
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_11thColumn));
			select5thRow_11thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("1");
			enter_Quantity.sendKeys(Keys.TAB);
			
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_11thColumn));
			String actQtyInput=select5thRow_11thColumn.getText();
			String expQtyInput=excelReader.getCellData("SmokeSalesInvoiceVAT", 429, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 429, 8, actQtyInput);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_20thColumn));
			select5thRow_20thColumn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchBtn));
			binSearchBtn.click();
			
			Thread.sleep(2000);
			
			boolean res=binEmpty.getText().isEmpty();
			
			String actbinEmpty = Boolean.toString(res);
			String expbinEmpty=excelReader.getCellData("SmokeSalesInvoiceVAT", 430, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 430, 8, actQtyInput);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binCancelBtn));
			binCancelBtn.click();

			 System.out.println("*********************************** checkSecondRowQtyOnInputOfAQ  ************************************");
			 //System.out.println("Message : "+actMessage+" Value Expected : "+expMessage);
			 System.out.println("Entry Page Qty Change Batch Column Value Actual   : "+actQtyInput  +" Value Expected : "+expQtyInput);
			 System.out.println("binEmpty : "+actbinEmpty+" Value Expected : "+expbinEmpty);
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_8thColumn));
			 select5thRow_8thColumn.click();
				
			 enter_AQTxt.sendKeys(Keys.CONTROL+"d");
	
			 if(/*actMessage.equalsIgnoreCase(expMessage) && */actQtyInput.equalsIgnoreCase(expQtyInput) && actbinEmpty.equalsIgnoreCase(expbinEmpty))	
			 {
				 System.out.println("Test Pass : Batch Column is displaying Blank on Updating the Qty");
				 excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 426, 9, resPass);
				 return true;
			 }
			 else
			 {
				 	System.out.println("Test Pass : Batch Column is not displaying Blank on Updating Qty ");
				 	excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 426, 9, resFail);
				 	return false;
			 }
		}
		
		
		 public boolean checkPreviousRowBinPopUpAllocated() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
			 
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_20thColumn));
			 select4thRow_20thColumn.click();
			 
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Bin));
			enter_Bin.sendKeys(Keys.SPACE);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchBtn));
			binSearchBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchTxt));
			
			// Actual
			boolean actbinSearchTxt						=binSearchTxt.isDisplayed();
			boolean actbinSearchBtn						=binSearchBtn.isDisplayed();
			boolean actbinAutoAllocateBtn				=binAutoAllocateBtn.isDisplayed();
			boolean actbinPickBtn						=binPickBtn.isDisplayed();
			boolean actbinCancelBtn						=binCancelBtn.isDisplayed();
			boolean actbinAutoAllocateWithinGroupBtn	=binAutoAllocateWithinGroupBtn.isDisplayed();
			
			// Expected			
			boolean expbinSearchTxt						=true;
			boolean expbinSearchBtn						=true;
			boolean expbinAutoAllocateBtn				=true;
			boolean expbinPickBtn						=true;
			boolean expbinCancelBtn						=true;
			boolean expbinAutoAllocateWithinGroupBtn	=true;
			
			boolean res = actbinSearchTxt==expbinSearchTxt && actbinSearchBtn==expbinSearchBtn && actbinAutoAllocateBtn==expbinAutoAllocateBtn
					&& actbinPickBtn==expbinPickBtn && actbinCancelBtn==expbinCancelBtn && actbinAutoAllocateWithinGroupBtn==expbinAutoAllocateWithinGroupBtn;
			
			String actResult = Boolean.toString(res);
			String expResult = excelReader.getCellData("SmokeSalesInvoiceVAT", 431, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 431, 8, actResult);
			
			System.out.println("Result : "+actResult+" Value Expected : "+expResult);
			
			
			// Actual
			String actbinTotalQty						=binTotalQty.getAttribute("value");
			String actbinBaseUOM						=binBaseUOM.getText();
			//String actbinBalanceTxt						=binBalanceTxt.getAttribute("value");
			
			
			String actbinoutwardRowTotalToBePicked		=binoutwardRowTotalToBePicked.getText();
			
			int binInwardGridListCount = binInwardGridList.size();
			
			ArrayList<String> binInwardGridListArray = new ArrayList<String>();
			
			for(int i=0;i<binInwardGridListCount;i++)
			{
				String data = binInwardGridList.get(i).getText();
				binInwardGridListArray.add(data);
			}
			
			
			String actbinInwardGridList=binInwardGridListArray.toString();
			
			String expbinInwardGridList=excelReader.getCellData("SmokeSalesInvoiceVAT", 436, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 436, 8, actbinInwardGridList);
			
			System.out.println("ActbinInwardGridList : " + actbinInwardGridList);
			System.out.println("ExpbinInwardGridList : " + expbinInwardGridList);
			
			// Expected
			String expbinTotalQty					=excelReader.getCellData("SmokeSalesInvoiceVAT", 432, 7);
			String expbinBaseUOM					=excelReader.getCellData("SmokeSalesInvoiceVAT", 433, 7);
			//String expbinBalanceTxt					=excelReader.getCellData("SmokeSalesInvoiceVAT", 434, 7);
			
			
			String expbinoutwardRowTotalToBePicked	=excelReader.getCellData("SmokeSalesInvoiceVAT", 435, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 432, 8, actbinTotalQty);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 433, 8, actbinBaseUOM);
			//excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 434, 8, actbinBalanceTxt);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 435, 8, actbinoutwardRowTotalToBePicked);
			
			
			System.out.println("************* Bin Out Ward Pop Up Screen************");
			
			System.out.println("binSearchTxt       					: "+actbinSearchTxt   				 +"  Value Expected : "+expbinSearchTxt);
			System.out.println("binSearchBtn        				: "+actbinSearchBtn   				 +"  Value Expected : "+expbinSearchBtn);
			System.out.println("binAutoAllocateBtn        			: "+actbinAutoAllocateBtn   		 +"  Value Expected : "+expbinAutoAllocateBtn);
			System.out.println("binPickBtn        					: "+actbinPickBtn   				 +"  Value Expected : "+expbinPickBtn);
			System.out.println("binCancelBtn        				: "+actbinCancelBtn   				 +"  Value Expected : "+expbinCancelBtn);
			System.out.println("binAutoAllocateWithinGroupBtn       : "+actbinAutoAllocateWithinGroupBtn +"  Value Expected : "+expbinAutoAllocateWithinGroupBtn);
			
			
			System.out.println("binTotalQty              	 : "+actbinTotalQty					+"  Value Expected : "+expbinTotalQty);	
			System.out.println("binBaseUOM                	 : "+actbinBaseUOM					+"  Value Expected : "+expbinBaseUOM);	
			//System.out.println("binBalanceTxt            	 : "+actbinBalanceTxt				+"  Value Expected : "+expbinBalanceTxt);	
			
			
			System.out.println("binoutwardRowTotalToBePicked :"+actbinoutwardRowTotalToBePicked +"  Value Expected : "+expbinoutwardRowTotalToBePicked);
			
			
			if(actResult.equalsIgnoreCase(expResult)
					
					&& actbinTotalQty.equalsIgnoreCase(expbinTotalQty) && actbinBaseUOM.equalsIgnoreCase(expbinBaseUOM)
					/*&& actbinBalanceTxt.equalsIgnoreCase(expbinBalanceTxt)*/
					
					
					&& actbinoutwardRowTotalToBePicked.equalsIgnoreCase(expbinoutwardRowTotalToBePicked))
			{
								
				System.out.println("Test Pass : Bin Pop Displayed");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 431, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Data NOT Entered in Second Row");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 431, 9, resFail);
				return false;
			}
			
			
		}
		
		
		public boolean checkCancelBinPopupScreenDeleteRowAndSaveVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
							
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binCancelBtn));
			binCancelBtn.click();
			
			Thread.sleep(2000);
			
			thirdRowIndex.click();
			
			Thread.sleep(2000);
			
			deleteRowBtn.click();
			
			Thread.sleep(2000);
			
			thirdRowIndex.click();
			
			Thread.sleep(2000);
			
			deleteRowBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String docno=documentNumberTxt.getAttribute("value");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
	 		saveBtn.click();
	 		
	 		Thread.sleep(2000);

	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(breakUpByTagTab));
	 		breakUpByTagTab.click();
	 		
	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
	 		billRefNewReferenceTxt.click();
	 		
	 		Thread.sleep(2000);
	 		
	 		String actBillNewReference,actBillAmtAdjAgainstNewRefInOtherVouchers,actBillTransactionCurrency,actBillBaseCurrency,actBillLocalCurrency,actBillBalanceNewRefAmount,actBillBreakUpByTagDepartment,actBillBreakUpByTagBaseCurrency,actBillBreakUpByTagBillCurrency,actBillBreakUpByTagLocalCurrency,actBillAmtAdjustedInTransactionCurrency,actBillBalanceAmtToBeAdjustedInTransactionCurrency,act13;
	 		String expBillNewReference,expBillAmtAdjAgainstNewRefInOtherVouchers,expBillTransactionCurrency,expBillBaseCurrency,expBillLocalCurrency,expBillBalanceNewRefAmount,expBillBreakUpByTagDepartment,expBillBreakUpByTagBaseCurrency,expBillBreakUpByTagBillCurrency,expBillBreakUpByTagLocalCurrency,expBillAmtAdjustedInTransactionCurrency,expBillBalanceAmtToBeAdjustedInTransactionCurrency;
	 		
	 		actBillNewReference									=billRefNewReferenceTxt.getAttribute("value");
	 		actBillAmtAdjAgainstNewRefInOtherVouchers			=amtAdjustedAgainstNewREfinOtherVouchers.getText();
	 		actBillTransactionCurrency							=transactionCurency.getText();
	 		actBillBaseCurrency									=baseCurrency.getText();
	 		actBillLocalCurrency								=localCurrencyDhs.getText();
	 		
	 		actBillBalanceNewRefAmount							=balanceNewReferenceAmt.getText();
	 		
	 		actBillBreakUpByTagDepartment						=breakUpByTagDepartment.getText();
	 		actBillBreakUpByTagBaseCurrency						=breakUpByTagBaseCurrency.getText();
	 		actBillBreakUpByTagBillCurrency						=breakUpByTagBillCurrency.getText();
	 		
	 		actBillBreakUpByTagLocalCurrency					=breakUpByTagBaseLocalCurrency.getText();
	 		actBillAmtAdjustedInTransactionCurrency				=billRefAdjustAmountInTransCurency.getText();
	 		actBillBalanceAmtToBeAdjustedInTransactionCurrency	=billRefBalanceAmountAdjustInTrnasCurrency.getText();
	 		
	 		
	 		expBillNewReference									=excelReader.getCellData("SmokeSalesInvoiceVAT", 437, 7);
	 		expBillAmtAdjAgainstNewRefInOtherVouchers			=excelReader.getCellData("SmokeSalesInvoiceVAT", 438, 7);
	 		expBillTransactionCurrency							=excelReader.getCellData("SmokeSalesInvoiceVAT", 439, 7);
	 		expBillBaseCurrency									=excelReader.getCellData("SmokeSalesInvoiceVAT", 440, 7);
	 		expBillLocalCurrency								=excelReader.getCellData("SmokeSalesInvoiceVAT", 441, 7);
	 		
	 		expBillBalanceNewRefAmount							=excelReader.getCellData("SmokeSalesInvoiceVAT", 442, 7);
	 		
	 		expBillBreakUpByTagDepartment						=excelReader.getCellData("SmokeSalesInvoiceVAT", 443, 7);
	 		expBillBreakUpByTagBillCurrency						=excelReader.getCellData("SmokeSalesInvoiceVAT", 444, 7);
	 		expBillBreakUpByTagBaseCurrency						=excelReader.getCellData("SmokeSalesInvoiceVAT", 445, 7);
	 		
	 		
	 		expBillBreakUpByTagLocalCurrency					=excelReader.getCellData("SmokeSalesInvoiceVAT", 446, 7);
	 		expBillAmtAdjustedInTransactionCurrency				=excelReader.getCellData("SmokeSalesInvoiceVAT", 447, 7);
	 		expBillBalanceAmtToBeAdjustedInTransactionCurrency	=excelReader.getCellData("SmokeSalesInvoiceVAT", 448, 7);
	 		
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 437, 8, actBillNewReference);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 438, 8, actBillAmtAdjAgainstNewRefInOtherVouchers);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 439, 8, actBillTransactionCurrency);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 440, 8, actBillBaseCurrency);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 441, 8, actBillLocalCurrency);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 442, 8, actBillBalanceNewRefAmount);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 443, 8, actBillBreakUpByTagDepartment);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 444, 8, actBillBreakUpByTagBaseCurrency);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 445, 8, actBillBreakUpByTagBillCurrency);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 446, 8, actBillBreakUpByTagLocalCurrency);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 447, 8, actBillAmtAdjustedInTransactionCurrency);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 448, 8, actBillBalanceAmtToBeAdjustedInTransactionCurrency);
	 	
	 		System.out.println("*********************************** checkCancelBinPopupScreenDeleteRowAndSaveVoucher  ************************************");


	 		System.out.println("actBillNewReference								   : "+ actBillNewReference									+" Value Expected : "+expBillNewReference);
	 		System.out.println("actBillAmtAdjAgainstNewRefInOtherVouchers		   : "+actBillAmtAdjAgainstNewRefInOtherVouchers			+" Value Expected : "+expBillAmtAdjAgainstNewRefInOtherVouchers);
	 		System.out.println("actBillTransactionCurrency						   : "+actBillTransactionCurrency							+" Value Expected : "+expBillTransactionCurrency);
	 		System.out.println("actBillBaseCurrency								   : "+actBillBaseCurrency									+" Value Expected : "+expBillBaseCurrency);
	 		System.out.println("actBillLocalCurrency							   : "+actBillLocalCurrency									+" Value Expected : "+expBillLocalCurrency);
	 		System.out.println("actBillBalanceNewRefAmount						   : "+ actBillBalanceNewRefAmount							+" Value Expected : "+expBillBalanceNewRefAmount);
	        System.out.println("actBillBreakUpByTagDepartment					   : "+actBillBreakUpByTagDepartment						+" Value Expected : "+expBillBreakUpByTagDepartment);
	 		System.out.println("actBillBreakUpByTagBaseCurrency				       : "+actBillBreakUpByTagBaseCurrency						+" Value Expected : "+expBillBreakUpByTagBaseCurrency);
	 		System.out.println("actBillBreakUpByTagBillCurrency 				   : "+actBillBreakUpByTagBillCurrency						+" Value Expected : "+expBillBreakUpByTagBillCurrency);
	 		System.out.println("actBillBreakUpByTagLocalCurrency				   : "+actBillBreakUpByTagLocalCurrency						+" Value Expected : "+expBillBreakUpByTagLocalCurrency);
	 		System.out.println("actBillAmtAdjustedInTransactionCurrency			   : "+actBillAmtAdjustedInTransactionCurrency				+" Value Expected : "+expBillAmtAdjustedInTransactionCurrency);
	 		System.out.println("actBillBalanceAmtToBeAdjustedInTransactionCurrency : "+actBillBalanceAmtToBeAdjustedInTransactionCurrency	+" Value Expected : "+expBillBalanceAmtToBeAdjustedInTransactionCurrency);
	 		
	 	    Thread.sleep(2000);
		   
	 	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		    billRefPickIcon.click();
		   
		    //pick button is click
		   
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(breakUpByTagTab));
	 		breakUpByTagTab.click();
	 		
	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
	 		billRefNewReferenceTxt.click();
	 		
	 		
	 		String actBillNewReferencePick,actBillAmtAdjAgainstNewRefInOtherVouchersPick,actBillTransactionCurrencyPick,actBillBaseCurrencyPick,actBillLocalCurrencyPick,actBillBalanceNewRefAmountPick,actBillBreakUpByTagDepartmentPick,actBillBreakUpByTagBaseCurrencyPick,actBillBreakUpByTagBillCurrencyPick,actBillBreakUpByTagLocalCurrencyPick,actBillAmtAdjustedInTransactionCurrencyPick,actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick;
	 		String expBillNewReferencePick,expBillAmtAdjAgainstNewRefInOtherVouchersPick,expBillTransactionCurrencyPick,expBillBaseCurrencyPick,expBillLocalCurrencyPick,expBillBalanceNewRefAmountPick,expBillBreakUpByTagDepartmentPick,expBillBreakUpByTagBaseCurrencyPick,expBillBreakUpByTagBillCurrencyPick,expBillBreakUpByTagLocalCurrencyPick,expBillAmtAdjustedInTransactionCurrencyPick,expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick;
	 		
	 		actBillNewReferencePick									=billRefNewReferenceTxt.getAttribute("value");
	 		actBillAmtAdjAgainstNewRefInOtherVouchersPick			=amtAdjustedAgainstNewREfinOtherVouchers.getText();
	 		actBillTransactionCurrencyPick							=transactionCurency.getText();
	 		actBillBaseCurrencyPick									=baseCurrency.getText();
	 		actBillLocalCurrencyPick								=localCurrencyDhs.getText();
	 		
	 		actBillBalanceNewRefAmountPick							=balanceNewReferenceAmt.getText();
	 		
	 		actBillBreakUpByTagDepartmentPick						=breakUpByTagDepartment.getText();
	 		actBillBreakUpByTagBaseCurrencyPick						=breakUpByTagBaseCurrency.getText();
	 		actBillBreakUpByTagBillCurrencyPick						=breakUpByTagBillCurrency.getText();
	 		
	 		actBillBreakUpByTagLocalCurrencyPick					=breakUpByTagBaseLocalCurrency.getText();
	 		actBillAmtAdjustedInTransactionCurrencyPick				=billRefAdjustAmountInTransCurency.getText();
	 		actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	=billRefBalanceAmountAdjustInTrnasCurrency.getText();
	 		
	 		
	 		expBillNewReferencePick									=excelReader.getCellData("SmokeSalesInvoiceVAT", 450, 7);
	 		expBillAmtAdjAgainstNewRefInOtherVouchersPick			=excelReader.getCellData("SmokeSalesInvoiceVAT", 451, 7);
	 		expBillTransactionCurrencyPick							=excelReader.getCellData("SmokeSalesInvoiceVAT", 452, 7);
	 		expBillBaseCurrencyPick									=excelReader.getCellData("SmokeSalesInvoiceVAT", 453, 7);
	 		expBillLocalCurrencyPick								=excelReader.getCellData("SmokeSalesInvoiceVAT", 454, 7);
	 		
	 		expBillBalanceNewRefAmountPick							=excelReader.getCellData("SmokeSalesInvoiceVAT", 455, 7);
	 		
	 		expBillBreakUpByTagDepartmentPick						=excelReader.getCellData("SmokeSalesInvoiceVAT", 456, 7);
	 		expBillBreakUpByTagBillCurrencyPick						=excelReader.getCellData("SmokeSalesInvoiceVAT", 457, 7);
	 		expBillBreakUpByTagBaseCurrencyPick						=excelReader.getCellData("SmokeSalesInvoiceVAT", 458, 7);
	 		
	 		
	 		expBillBreakUpByTagLocalCurrencyPick					=excelReader.getCellData("SmokeSalesInvoiceVAT", 459, 7);
	 		expBillAmtAdjustedInTransactionCurrencyPick				=excelReader.getCellData("SmokeSalesInvoiceVAT", 460, 7);
	 		expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	=excelReader.getCellData("SmokeSalesInvoiceVAT", 461, 7);
	 		
	 		
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 450, 8, actBillNewReferencePick);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 451, 8, actBillAmtAdjAgainstNewRefInOtherVouchersPick);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 452, 8, actBillTransactionCurrencyPick);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 453, 8, actBillBaseCurrencyPick);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 454, 8, actBillLocalCurrencyPick);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 455, 8, actBillBalanceNewRefAmountPick);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 456, 8, actBillBreakUpByTagDepartmentPick);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 457, 8, actBillBreakUpByTagBaseCurrencyPick);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 458, 8, actBillBreakUpByTagBillCurrencyPick);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 459, 8, actBillBreakUpByTagLocalCurrencyPick);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 460, 8, actBillAmtAdjustedInTransactionCurrencyPick);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 461, 8, actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick);

	 		System.out.println("actBillNewReferencePick 								: "+actBillNewReferencePick									+ " Value Expected : "+expBillNewReferencePick);
	 		System.out.println("actBillAmtAdjAgainstNewRefInOtherVouchersPick			: " + actBillAmtAdjAgainstNewRefInOtherVouchersPick			+ "	Value Expected : "+expBillAmtAdjAgainstNewRefInOtherVouchersPick);
	 		System.out.println("actBillTransactionCurrencyPick							: "+ actBillTransactionCurrencyPick							+ " Value Expected : "+expBillTransactionCurrencyPick);
	 		System.out.println("actBillBaseCurrencyPick									: "+ actBillBaseCurrencyPick								+ " Value Expected : "+expBillBaseCurrencyPick);
	 		System.out.println("actBillLocalCurrencyPick								: "+ actBillLocalCurrencyPick								+ " Value Expected : "+expBillLocalCurrencyPick);
	 		System.out.println("actBillBalanceNewRefAmountPick							: "+ actBillBalanceNewRefAmountPick							+ " Value Expected : "+expBillBalanceNewRefAmountPick);
	        System.out.println("actBillBreakUpByTagDepartmentPick						: "+ actBillBreakUpByTagDepartmentPick						+ " Value Expected : "+expBillBreakUpByTagDepartmentPick);
	 		System.out.println("actBillBreakUpByTagBaseCurrencyPick						: "+ actBillBreakUpByTagBaseCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagBaseCurrencyPick);
	 		System.out.println("actBillBreakUpByTagBillCurrencyPick						: "+ actBillBreakUpByTagBillCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagBillCurrencyPick);
	 		System.out.println("actBillBreakUpByTagLocalCurrencyPick					: "+ actBillBreakUpByTagLocalCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagLocalCurrencyPick);
	 		System.out.println("actBillAmtAdjustedInTransactionCurrencyPick				: "+ actBillAmtAdjustedInTransactionCurrencyPick			+ " Value Expected : "+expBillAmtAdjustedInTransactionCurrencyPick);
	 		System.out.println("actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick  : "+ actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	+ " Value Expected : "+expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick);
	 			    
	 		
	 	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		    Bill_OkBtn.click();
		    Thread.sleep(2000);
		    boolean savingMessage=checkVoucherSavingMessage(docno);
		    
		    String actMessage = Boolean.toString(savingMessage);
		    
		    String expMessage = excelReader.getCellData("SmokeSalesInvoiceVAT", 462, 7);
			
		    System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage);
			
			if(actMessage.equalsIgnoreCase(expMessage) &&
					
			        actBillNewReference.equalsIgnoreCase(expBillNewReference) &&
	 				actBillAmtAdjAgainstNewRefInOtherVouchers.equalsIgnoreCase(expBillAmtAdjAgainstNewRefInOtherVouchers) &&
	 				actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 				
	 				actBillBaseCurrency.equalsIgnoreCase(actBillBaseCurrency) &&
	 				actBillLocalCurrency.equalsIgnoreCase(actBillLocalCurrency) &&
	 				actBillBalanceNewRefAmount.equalsIgnoreCase(actBillBalanceNewRefAmount) &&
	 				actBillBreakUpByTagDepartment.equalsIgnoreCase(actBillBreakUpByTagDepartment) &&
	 				actBillBreakUpByTagBaseCurrency.equalsIgnoreCase(actBillBreakUpByTagBaseCurrency) &&
	 				actBillBreakUpByTagBillCurrency.equalsIgnoreCase(actBillBreakUpByTagBillCurrency) &&
	 				actBillBreakUpByTagLocalCurrency.equalsIgnoreCase(actBillBreakUpByTagLocalCurrency) &&
	 				actBillAmtAdjustedInTransactionCurrency.equalsIgnoreCase(actBillAmtAdjustedInTransactionCurrency) &&
	 				actBillBalanceAmtToBeAdjustedInTransactionCurrency.equalsIgnoreCase(actBillBalanceAmtToBeAdjustedInTransactionCurrency) &&
			
	 				
	 				actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) &&
	 				actBillAmtAdjAgainstNewRefInOtherVouchersPick.equalsIgnoreCase(expBillAmtAdjAgainstNewRefInOtherVouchersPick) &&
	 				actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) &&
	 				actBillBaseCurrencyPick.equalsIgnoreCase(actBillBaseCurrencyPick) &&
	 				actBillLocalCurrencyPick.equalsIgnoreCase(actBillLocalCurrencyPick) &&
	 				actBillBalanceNewRefAmountPick.equalsIgnoreCase(actBillBalanceNewRefAmountPick) &&
	 				actBillBreakUpByTagDepartmentPick.equalsIgnoreCase(actBillBreakUpByTagDepartmentPick) &&
	 				actBillBreakUpByTagBaseCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagBaseCurrencyPick) &&
	 				actBillBreakUpByTagBillCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagBillCurrencyPick) &&
	 				actBillBreakUpByTagLocalCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagLocalCurrencyPick) &&
	 				actBillAmtAdjustedInTransactionCurrencyPick.equalsIgnoreCase(actBillAmtAdjustedInTransactionCurrencyPick) &&
	 				actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick.equalsIgnoreCase(actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick))
			{
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 437, 9, resPass);
				return true;
				
			}
			else
			{
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 437, 9, resFail);
				return false;
			}
		}
			
		
		
		 
		 public boolean checkBinPopUpValuesInNewVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
			 
			 Thread.sleep(4000);
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			 customerAccountTxt.click();
			 customerAccountTxt.sendKeys(Keys.SPACE);
			 
			 int customercount=customerAccountListCount.size();
			 
			 System.err.println(customercount);
			 
			 for(int i=0 ; i < customercount ;i++)
			 {
				 String data=customerAccountListCount.get(i).getText();
				 
				 if(data.equalsIgnoreCase(excelReader.getCellData("SmokeSalesInvoiceVAT", 463, 6)))
				 {
					 customerAccountListCount.get(i).click();
					 
					 break;
				 }
			 }
				
			 customerAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
				
			int departmentcount=departmentListCount.size();
			
			System.err.println(departmentcount);
				
			for(int i=0 ; i < departmentcount ;i++)
			{
				String data=departmentListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("SmokeSalesInvoiceVAT", 464, 6)))
				{
					departmentListCount.get(i).click();
					
					break;
				}
			}
				
			departmentTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
			pvWareHouseTxt.sendKeys(Keys.SPACE);
			
			int pvWareHouseTxtCount=pvwareHouseListCount.size();
			
			System.err.println(pvWareHouseTxtCount);
			
			for(int i=0 ; i < pvWareHouseTxtCount ;i++)
			{
				String data=pvwareHouseListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("SmokeSalesInvoiceVAT", 465, 6)))
				{
					pvwareHouseListCount.get(i).click();
					
					break;
				}
			}
			
			pvWareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.END);
			enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemcount1=itemListCount.size();
			
			System.err.println(itemcount1);
				
			for(int i=0 ; i < itemcount1 ;i++)
			{
				String data=itemListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("SmokeSalesInvoiceVAT", 466, 6)))
				{
					itemListCount.get(i).click();
					
					break;
				}
			}
				
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			select1stRow_8thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
			enter_AQTxt.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVAT", 467, 6));
			enter_AQTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
			select1stRow_11thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("8");
			enter_Quantity.sendKeys(Keys.TAB);
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_20thColumn));
			select1stRow_20thColumn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchBtn));
			binSearchBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchTxt));
			
			// Actual
			boolean actbinSearchTxt						=binSearchTxt.isDisplayed();
			boolean actbinSearchBtn						=binSearchBtn.isDisplayed();
			boolean actbinAutoAllocateBtn				=binAutoAllocateBtn.isDisplayed();
			boolean actbinPickBtn						=binPickBtn.isDisplayed();
			boolean actbinCancelBtn						=binCancelBtn.isDisplayed();
			boolean actbinAutoAllocateWithinGroupBtn	=binAutoAllocateWithinGroupBtn.isDisplayed();
			
			// Expected			
			boolean expbinSearchTxt						=true;
			boolean expbinSearchBtn						=true;
			boolean expbinAutoAllocateBtn				=true;
			boolean expbinPickBtn						=true;
			boolean expbinCancelBtn						=true;
			boolean expbinAutoAllocateWithinGroupBtn	=true;
			
			boolean res = actbinSearchTxt==expbinSearchTxt && actbinSearchBtn==expbinSearchBtn && actbinAutoAllocateBtn==expbinAutoAllocateBtn
					&& actbinPickBtn==expbinPickBtn && actbinCancelBtn==expbinCancelBtn && actbinAutoAllocateWithinGroupBtn==expbinAutoAllocateWithinGroupBtn;
			
			String actResult = Boolean.toString(res);
			String expResult = excelReader.getCellData("SmokeSalesInvoiceVAT", 466, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 466, 8, actResult);
			
			System.out.println("Result : "+actResult+" Value Expected : "+expResult);
			
			
			// Actual
			String actbinTotalQty						=binTotalQty.getAttribute("value");
			String actbinBaseUOM						=binBaseUOM.getText();
			//String actbinBalanceTxt						=binBalanceTxt.getAttribute("value");
			
			
			String actbinoutwardRowTotalToBePicked		=binoutwardRowTotalToBePicked.getText();
			
			int binInwardGridListCount = binInwardGridList.size();
			
			ArrayList<String> binInwardGridListArray = new ArrayList<String>();
			
			for(int i=0;i<binInwardGridListCount;i++)
			{
				String data = binInwardGridList.get(i).getText();
				binInwardGridListArray.add(data);
			}
			
			
			String actbinInwardGridList=binInwardGridListArray.toString();
			
			String expbinInwardGridList=excelReader.getCellData("SmokeSalesInvoiceVAT", 471, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 471, 8, actbinInwardGridList);
			
			System.out.println("ActbinInwardGridList : " + actbinInwardGridList);
			System.out.println("ExpbinInwardGridList : " + expbinInwardGridList);
			
			// Expected
			String expbinTotalQty					=excelReader.getCellData("SmokeSalesInvoiceVAT", 467, 7);
			String expbinBaseUOM					=excelReader.getCellData("SmokeSalesInvoiceVAT", 468, 7);
			//String expbinBalanceTxt					=excelReader.getCellData("SmokeSalesInvoiceVAT", 469, 7);
			
			
			String expbinoutwardRowTotalToBePicked	=excelReader.getCellData("SmokeSalesInvoiceVAT", 470, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 467, 8, actbinTotalQty);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 468, 8, actbinBaseUOM);
			//excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 469, 8, actbinBalanceTxt);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 470, 8, actbinoutwardRowTotalToBePicked);
			
			
			System.out.println("************* Bin Out Ward Pop Up Screen************");
			
			System.out.println("binSearchTxt       					: "+actbinSearchTxt   				 +"  Value Expected : "+expbinSearchTxt);
			System.out.println("binSearchBtn        				: "+actbinSearchBtn   				 +"  Value Expected : "+expbinSearchBtn);
			System.out.println("binAutoAllocateBtn        			: "+actbinAutoAllocateBtn   		 +"  Value Expected : "+expbinAutoAllocateBtn);
			System.out.println("binPickBtn        					: "+actbinPickBtn   				 +"  Value Expected : "+expbinPickBtn);
			System.out.println("binCancelBtn        				: "+actbinCancelBtn   				 +"  Value Expected : "+expbinCancelBtn);
			System.out.println("binAutoAllocateWithinGroupBtn       : "+actbinAutoAllocateWithinGroupBtn +"  Value Expected : "+expbinAutoAllocateWithinGroupBtn);
			
			
			System.out.println("binTotalQty              	 : "+actbinTotalQty					+"  Value Expected : "+expbinTotalQty);	
			System.out.println("binBaseUOM                	 : "+actbinBaseUOM					+"  Value Expected : "+expbinBaseUOM);	
			//System.out.println("binBalanceTxt            	 : "+actbinBalanceTxt				+"  Value Expected : "+expbinBalanceTxt);	
			
			
			System.out.println("binoutwardRowTotalToBePicked :"+actbinoutwardRowTotalToBePicked +"  Value Expected : "+expbinoutwardRowTotalToBePicked);
			
			
			if(actResult.equalsIgnoreCase(expResult)
					
					&& actbinTotalQty.equalsIgnoreCase(expbinTotalQty) && actbinBaseUOM.equalsIgnoreCase(expbinBaseUOM)
					/*&& actbinBalanceTxt.equalsIgnoreCase(expbinBalanceTxt)*/
					
					&& actbinInwardGridList.equalsIgnoreCase(actbinInwardGridList)
					 
					&& actbinoutwardRowTotalToBePicked.equalsIgnoreCase(expbinoutwardRowTotalToBePicked))
			{
								
				System.out.println("Test Pass : Bin Pop Displayed");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 463, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Data NOT Entered in Second Row");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 463, 9, resFail);
				return false;
			}
		}
		 
		 
		 

		public boolean checkPickOptionInBinScreenWithoutSelection()  throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	 	{
	 		
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	 		
	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binPickBtn));
	 		binPickBtn.click();
	 		
			String expErrorMessage	=excelReader.getCellData("SmokeSalesInvoiceVAT", 472, 7);
			
			String validationMessage=checkValidationMessage(expErrorMessage);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 472, 8, validationMessage);
			
			System.out.println("*********************************** checkPickOptionInBinScreenWithoutSelection  ************************************");
			
			System.out.println("error Message  :  "+validationMessage+" value Expected : "+expErrorMessage);
			
			if(validationMessage.equalsIgnoreCase(expErrorMessage))
	 		{
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 472, 9, resPass);
	 			return true;
	 		}
	 		else
	 		{
	 			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 472, 9, resFail);
	 			return false;
	 		}
	 	}

		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-0']")
		private static WebElement  binoutwardRow1Index;
		
		public boolean chekBinValuesClickOnPickWithSelectingInNewVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binoutwardRow1Index));
			binoutwardRow1Index.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binPickBtn));
	 		binPickBtn.click();
	 		
	 		Thread.sleep(2000);
	 		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binTotalQty));
	 			
	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchTxt));
			
			// Actual
			boolean actbinSearchTxt						=binSearchTxt.isDisplayed();
			boolean actbinSearchBtn						=binSearchBtn.isDisplayed();
			boolean actbinAutoAllocateBtn				=binAutoAllocateBtn.isDisplayed();
			boolean actbinPickBtn						=binPickBtn.isDisplayed();
			boolean actbinCancelBtn						=binCancelBtn.isDisplayed();
			boolean actbinAutoAllocateWithinGroupBtn	=binAutoAllocateWithinGroupBtn.isDisplayed();
			
			// Expected			
			boolean expbinSearchTxt						=true;
			boolean expbinSearchBtn						=true;
			boolean expbinAutoAllocateBtn				=true;
			boolean expbinPickBtn						=true;
			boolean expbinCancelBtn						=true;
			boolean expbinAutoAllocateWithinGroupBtn	=true;
			
			boolean res = actbinSearchTxt==expbinSearchTxt && actbinSearchBtn==expbinSearchBtn && actbinAutoAllocateBtn==expbinAutoAllocateBtn
					&& actbinPickBtn==expbinPickBtn && actbinCancelBtn==expbinCancelBtn && actbinAutoAllocateWithinGroupBtn==expbinAutoAllocateWithinGroupBtn;
			
			String actResult = Boolean.toString(res);
			String expResult = excelReader.getCellData("SmokeSalesInvoiceVAT", 473, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 473, 8, actResult);
			
			System.out.println("Result : "+actResult+" Value Expected : "+expResult);
			
			
			// Actual
			String actbinTotalQty						=binTotalQty.getAttribute("value");
			String actbinBaseUOM						=binBaseUOM.getText();
			//String actbinBalanceTxt						=binBalanceTxt.getAttribute("value");
			
			
			String actbinoutwardRowTotalToBePicked		=binoutwardRowTotalToBePicked.getText();
			
			int binInwardGridListCount = binInwardGridList.size();
			
			ArrayList<String> binInwardGridListArray = new ArrayList<String>();
			
			for(int i=0;i<binInwardGridListCount;i++)
			{
				String data = binInwardGridList.get(i).getText();
				binInwardGridListArray.add(data);
			}
			
			
			String actbinInwardGridList=binInwardGridListArray.toString();
			
			String expbinInwardGridList=excelReader.getCellData("SmokeSalesInvoiceVAT", 478, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 478, 8, actbinInwardGridList);
			
			System.out.println("ActbinInwardGridList : " + actbinInwardGridList);
			System.out.println("ExpbinInwardGridList : " + expbinInwardGridList);
			
			// Expected
			String expbinTotalQty					=excelReader.getCellData("SmokeSalesInvoiceVAT", 474, 7);
			String expbinBaseUOM					=excelReader.getCellData("SmokeSalesInvoiceVAT", 475, 7);
			//String expbinBalanceTxt					=excelReader.getCellData("SmokeSalesInvoiceVAT", 476, 7);
			
			
			String expbinoutwardRowTotalToBePicked	=excelReader.getCellData("SmokeSalesInvoiceVAT", 477, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 474, 8, actbinTotalQty);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 475, 8, actbinBaseUOM);
			//excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 476, 8, actbinBalanceTxt);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 477, 8, actbinoutwardRowTotalToBePicked);
			
			
			System.out.println("************* Bin Out Ward Pop Up Screen************");
			
			System.out.println("binSearchTxt       					: "+actbinSearchTxt   				 +"  Value Expected : "+expbinSearchTxt);
			System.out.println("binSearchBtn        				: "+actbinSearchBtn   				 +"  Value Expected : "+expbinSearchBtn);
			System.out.println("binAutoAllocateBtn        			: "+actbinAutoAllocateBtn   		 +"  Value Expected : "+expbinAutoAllocateBtn);
			System.out.println("binPickBtn        					: "+actbinPickBtn   				 +"  Value Expected : "+expbinPickBtn);
			System.out.println("binCancelBtn        				: "+actbinCancelBtn   				 +"  Value Expected : "+expbinCancelBtn);
			System.out.println("binAutoAllocateWithinGroupBtn       : "+actbinAutoAllocateWithinGroupBtn +"  Value Expected : "+expbinAutoAllocateWithinGroupBtn);
			
			
			System.out.println("binTotalQty              	 : "+actbinTotalQty					+"  Value Expected : "+expbinTotalQty);	
			System.out.println("binBaseUOM                	 : "+actbinBaseUOM					+"  Value Expected : "+expbinBaseUOM);	
			//System.out.println("binBalanceTxt            	 : "+actbinBalanceTxt				+"  Value Expected : "+expbinBalanceTxt);	
			
			
			System.out.println("binoutwardRowTotalToBePicked :"+actbinoutwardRowTotalToBePicked +"  Value Expected : "+expbinoutwardRowTotalToBePicked);
			
			
			if(actResult.equalsIgnoreCase(expResult)
					
					&& actbinTotalQty.equalsIgnoreCase(expbinTotalQty) && actbinBaseUOM.equalsIgnoreCase(expbinBaseUOM)
					/*&& actbinBalanceTxt.equalsIgnoreCase(expbinBalanceTxt)*/
					
					&& actbinInwardGridList.equalsIgnoreCase(actbinInwardGridList)
					 
					&& actbinoutwardRowTotalToBePicked.equalsIgnoreCase(expbinoutwardRowTotalToBePicked))
			{
				System.out.println("Values Are As Expected");;
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 473, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Values Are Not As Expected");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 473, 9, resFail);
				return false;
			}
				
		}
		
		

		public boolean checkOkButtonUsingPickOptionInBinScreenToDisplayBinInVoucherBinColumn() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
			binOkBtn.click();
			
			Thread.sleep(3000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_20thColumn));
			
			String actBinColumn		=select1stRow_20thColumn.getText();
			
			String expBinColumn		=excelReader.getCellData("SmokeSalesInvoiceVAT", 479, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 479, 8, actBinColumn);
			
			
			System.out.println("*********************************** checkOkButtonUsingPickOptionInBinScreenToDisplayBinInVoucherBinColumn  ************************************");
			
			System.out.println("BinColumn 	 : "+actBinColumn+"  Value Expected :  "+expBinColumn);
			
			if(actBinColumn.equalsIgnoreCase(expBinColumn))
			{
				System.out.println("Values Are As Expected");

				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 479, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Values Are Not As Expected");

				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 479, 9, resFail);
				return false;
			}
		}


		 public boolean checkBalanceInBinPopUpScreenToAllocateOnManual() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
			select2ndRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
			pvWareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.END);
			enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemcount1=itemListCount.size();
			
			System.err.println(itemcount1);
				
			for(int i=0 ; i < itemcount1 ;i++)
			{
				String data=itemListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("SmokeSalesInvoiceVAT", 481, 6)))
				{
					itemListCount.get(i).click();
					
					break;
				}
			}
				
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_5thColumn));
			select2ndRow_5thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_8thColumn));
			select2ndRow_8thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
			enter_AQTxt.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVAT", 482, 6));
			enter_AQTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_11thColumn));
			select2ndRow_11thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("12");
			enter_Quantity.sendKeys(Keys.TAB);
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_20thColumn));
			select2ndRow_20thColumn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchBtn));
			binSearchBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchTxt));
			
			// Actual
			boolean actbinSearchTxt						=binSearchTxt.isDisplayed();
			boolean actbinSearchBtn						=binSearchBtn.isDisplayed();
			boolean actbinAutoAllocateBtn				=binAutoAllocateBtn.isDisplayed();
			boolean actbinPickBtn						=binPickBtn.isDisplayed();
			boolean actbinCancelBtn						=binCancelBtn.isDisplayed();
			boolean actbinAutoAllocateWithinGroupBtn	=binAutoAllocateWithinGroupBtn.isDisplayed();
			
			// Expected			
			boolean expbinSearchTxt						=true;
			boolean expbinSearchBtn						=true;
			boolean expbinAutoAllocateBtn				=true;
			boolean expbinPickBtn						=true;
			boolean expbinCancelBtn						=true;
			boolean expbinAutoAllocateWithinGroupBtn	=true;
			
			boolean res = actbinSearchTxt==expbinSearchTxt && actbinSearchBtn==expbinSearchBtn && actbinAutoAllocateBtn==expbinAutoAllocateBtn
					&& actbinPickBtn==expbinPickBtn && actbinCancelBtn==expbinCancelBtn && actbinAutoAllocateWithinGroupBtn==expbinAutoAllocateWithinGroupBtn;
			
			String actResult = Boolean.toString(res);
			String expResult = excelReader.getCellData("SmokeSalesInvoiceVAT", 481, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 481, 8, actResult);
			
			System.out.println("Result : "+actResult+" Value Expected : "+expResult);
			
			
			// Actual
			String actbinTotalQty						=binTotalQty.getAttribute("value");
			String actbinBaseUOM						=binBaseUOM.getText();
			//String actbinBalanceTxt						=binBalanceTxt.getAttribute("value");
			
			
			String actbinoutwardRowTotalToBePicked		=binoutwardRowTotalToBePicked.getText();
			
			int binInwardGridListCount = binInwardGridList.size();
			
			ArrayList<String> binInwardGridListArray = new ArrayList<String>();
			
			for(int i=0;i<binInwardGridListCount;i++)
			{
				String data = binInwardGridList.get(i).getText();
				binInwardGridListArray.add(data);
			}
			
			
			String actbinInwardGridList=binInwardGridListArray.toString();
			
			String expbinInwardGridList=excelReader.getCellData("SmokeSalesInvoiceVAT", 486, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 486, 8, actbinInwardGridList);
			
			System.out.println("ActbinInwardGridList : " + actbinInwardGridList);
			System.out.println("ExpbinInwardGridList : " + expbinInwardGridList);
			
			// Expected
			String expbinTotalQty					=excelReader.getCellData("SmokeSalesInvoiceVAT", 482, 7);
			String expbinBaseUOM					=excelReader.getCellData("SmokeSalesInvoiceVAT", 483, 7);
			//String expbinBalanceTxt					=excelReader.getCellData("SmokeSalesInvoiceVAT", 484, 7);
			
			
			String expbinoutwardRowTotalToBePicked	=excelReader.getCellData("SmokeSalesInvoiceVAT", 485, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 482, 8, actbinTotalQty);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 483, 8, actbinBaseUOM);
			//excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 484, 8, actbinBalanceTxt);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 485, 8, actbinoutwardRowTotalToBePicked);
			
			
			System.out.println("************* Bin Out Ward Pop Up Screen************");
			
			System.out.println("binSearchTxt       					: "+actbinSearchTxt   				 +"  Value Expected : "+expbinSearchTxt);
			System.out.println("binSearchBtn        				: "+actbinSearchBtn   				 +"  Value Expected : "+expbinSearchBtn);
			System.out.println("binAutoAllocateBtn        			: "+actbinAutoAllocateBtn   		 +"  Value Expected : "+expbinAutoAllocateBtn);
			System.out.println("binPickBtn        					: "+actbinPickBtn   				 +"  Value Expected : "+expbinPickBtn);
			System.out.println("binCancelBtn        				: "+actbinCancelBtn   				 +"  Value Expected : "+expbinCancelBtn);
			System.out.println("binAutoAllocateWithinGroupBtn       : "+actbinAutoAllocateWithinGroupBtn +"  Value Expected : "+expbinAutoAllocateWithinGroupBtn);
			
			
			System.out.println("binTotalQty              	 : "+actbinTotalQty					+"  Value Expected : "+expbinTotalQty);	
			System.out.println("binBaseUOM                	 : "+actbinBaseUOM					+"  Value Expected : "+expbinBaseUOM);	
			//System.out.println("binBalanceTxt            	 : "+actbinBalanceTxt				+"  Value Expected : "+expbinBalanceTxt);	
			
			
			System.out.println("binoutwardRowTotalToBePicked :"+actbinoutwardRowTotalToBePicked +"  Value Expected : "+expbinoutwardRowTotalToBePicked);
			
			
			if(actResult.equalsIgnoreCase(expResult)
					
					&& actbinTotalQty.equalsIgnoreCase(expbinTotalQty) && actbinBaseUOM.equalsIgnoreCase(expbinBaseUOM)
					/*&& actbinBalanceTxt.equalsIgnoreCase(expbinBalanceTxt)*/
					
					&& actbinInwardGridList.equalsIgnoreCase(actbinInwardGridList)
					 
					&& actbinoutwardRowTotalToBePicked.equalsIgnoreCase(expbinoutwardRowTotalToBePicked))
			{
								
				System.out.println("Test Pass : Bin Pop Displayed");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 480, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Data NOT Entered in Second Row");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 480, 9, resFail);
				return false;
			}
		}
		
		
		
	    public boolean checkBinOutwardToBePickedInputManualWithLessThanQty() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binoutwardRow1ToBePicked));
			binoutwardRow1ToBePicked.click();
			
			binoutwardToInputInToBePicked.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVAT", 487, 6));			
			binoutwardToInputInToBePicked.sendKeys(Keys.TAB);
			
			Thread.sleep(3000);
			
			
			// Actual 
			String actbinoutwardRowTotalToBePicked	=binoutwardRowTotalToBePicked.getText();
			//String actbinBalanceTxt					=binBalanceTxt.getAttribute("value");
			String actbinOkButtonStatus				=binOkButtonStatus.getAttribute("disabled");
			
			// Expected
			String expbinoutwardRowTotalToBePicked	=excelReader.getCellData("SmokeSalesInvoiceVAT", 488, 7);
			//String expbinBalanceTxt					=excelReader.getCellData("SmokeSalesInvoiceVAT", 489, 7);
			String expbinOkButtonStatus				=excelReader.getCellData("SmokeSalesInvoiceVAT", 490, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 488, 8, actbinoutwardRowTotalToBePicked);
			//excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 489, 8, actbinBalanceTxt);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 490, 8, actbinOkButtonStatus);
			
			
			System.out.println("*********************************** checkBinOutwardToBePickedInputManualWithLessThanQty  ************************************");
			
			System.out.println("binoutwardRowTotalToBePicked : "+actbinoutwardRowTotalToBePicked +"  Value Expected : "+expbinoutwardRowTotalToBePicked);
			//System.out.println("binBalanceTxt    			 : "+actbinBalanceTxt				 +"  Value Expected : "+expbinBalanceTxt);
			System.out.println("binOkButtonStatus   		 : "+actbinOkButtonStatus			 +"  Value Expected : "+expbinOkButtonStatus);
			
			if(actbinoutwardRowTotalToBePicked.equalsIgnoreCase(expbinoutwardRowTotalToBePicked) /*&& actbinBalanceTxt.equalsIgnoreCase(expbinBalanceTxt)*/
					&& actbinOkButtonStatus.equalsIgnoreCase(expbinOkButtonStatus))
			   
			{
				System.out.println("Values Are As Expected");

				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 487, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Values Are Not As Expected");

				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 487, 9, resFail);
				return false;
			}
		}
			
		
		@FindBy(xpath="//input[@id='id_transaction_bins_grid_control_heading_ctrl_12']")
		private static WebElement  binoutwardToInputInToBePicked;
		
	    public boolean checkBinOutwardToBePickedInputManualWithGreaterThanQty() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binoutwardRow1ToBePicked));
			binoutwardRow1ToBePicked.click();
			
			binoutwardToInputInToBePicked.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVAT", 491, 6));			
			binoutwardToInputInToBePicked.sendKeys(Keys.TAB);
			
			Thread.sleep(3000);
			
			// Actual 
			String actbinoutwardRowTotalToBePicked	=binoutwardRowTotalToBePicked.getText();
			//String actbinBalanceTxt					=binBalanceTxt.getAttribute("value");
			String actbinOkButtonStatus				=binOkButtonStatus.getAttribute("disabled");
			
			// Expected
			String expbinoutwardRowTotalToBePicked	=excelReader.getCellData("SmokeSalesInvoiceVAT", 492, 7);
			//String expbinBalanceTxt					=excelReader.getCellData("SmokeSalesInvoiceVAT", 493, 7);
			String expbinOkButtonStatus				=excelReader.getCellData("SmokeSalesInvoiceVAT", 494, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 492, 8, actbinoutwardRowTotalToBePicked);
			//excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 493, 8, actbinBalanceTxt);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 494, 8, actbinOkButtonStatus);
			
			System.out.println("*********************************** checkBinOutwardToBePickedInputManualWithGreaterThanQty  ************************************");
			
			System.out.println("binoutwardRowTotalToBePicked : "+actbinoutwardRowTotalToBePicked +"  Value Expected : "+expbinoutwardRowTotalToBePicked);
			//System.out.println("binBalanceTxt    			 : "+actbinBalanceTxt				 +"  Value Expected : "+expbinBalanceTxt);
			System.out.println("binOkButtonStatus   		 : "+actbinOkButtonStatus			 +"  Value Expected : "+expbinOkButtonStatus);
			
			if(actbinoutwardRowTotalToBePicked.equalsIgnoreCase(expbinoutwardRowTotalToBePicked) /*&& actbinBalanceTxt.equalsIgnoreCase(expbinBalanceTxt)*/
					&& actbinOkButtonStatus.equalsIgnoreCase(expbinOkButtonStatus))
			   
			{
				System.out.println("Values Are As Expected");

				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 491, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Values Are Not As Expected");

				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 491, 9, resFail);
				return false;
			}
		}
			
			
		
		
	    public boolean checkBinOutwardToBePickedInputManualWithEqualQty() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binoutwardRow1ToBePicked));
			binoutwardRow1ToBePicked.click();
			
			binoutwardToInputInToBePicked.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVAT", 495, 6));			
			binoutwardToInputInToBePicked.sendKeys(Keys.TAB);
			
			Thread.sleep(3000);
			
			// Actual 
			String actbinoutwardRowTotalToBePicked	=binoutwardRowTotalToBePicked.getText();
			//String actbinBalanceTxt					=binBalanceTxt.getAttribute("value");
			
			// Expected
			String expbinoutwardRowTotalToBePicked	=excelReader.getCellData("SmokeSalesInvoiceVAT", 496, 7);
			//String expbinBalanceTxt					=excelReader.getCellData("SmokeSalesInvoiceVAT", 497, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 496, 8, actbinoutwardRowTotalToBePicked);
			//excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 497, 8, expbinBalanceTxt);
			
			System.out.println("*********************************** checkBinOutwardToBePickedInputManualWithEqualQty  ************************************");
			
			System.out.println("binoutwardRowTotalToBePicked : "+actbinoutwardRowTotalToBePicked +"  Value Expected : "+expbinoutwardRowTotalToBePicked);
			//System.out.println("binBalanceTxt    			 : "+actbinBalanceTxt				 +"  Value Expected : "+expbinBalanceTxt);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
			binOkBtn.click();
			
			String actBinColumnValue=select2ndRow_20thColumn.getText();
			
			String expBinColumnValue=excelReader.getCellData("SmokeSalesInvoiceVAT", 498, 7);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 498, 8, actBinColumnValue);
			
			
			System.out.println("BinColumnValue  : "+actBinColumnValue+"  Value Expected : "+expBinColumnValue);
			
			if(actbinoutwardRowTotalToBePicked.equalsIgnoreCase(expbinoutwardRowTotalToBePicked) /*&& actbinBalanceTxt.equalsIgnoreCase(expbinBalanceTxt)*/
					&& actBinColumnValue.equalsIgnoreCase(expBinColumnValue))
			{
				System.out.println("test pass : Bin 5 Displayed in Voucher");
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
				previousBtn.click();
				
				if(getIsAlertPresent())
				{
					getAlert().accept();
				}
				
				checkUserFriendlyMessage();
				
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 495, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("test fail : Bin 5 NOT Displayed in Voucher");
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
				previousBtn.click();
				
				if(getIsAlertPresent())
				{
					getAlert().accept();
				}
				
				checkUserFriendlyMessage();
				
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 495, 9, resFail);
				return false;
			}
		}
			
			
		
	    
	 // RMA Outward POpup Window
		
		
		@FindBy (xpath="//input[@id='txtSerialNo']")
		private static WebElement rmaoutwardSerialNumberTxtField;

		@FindBy (xpath="//input[@id='txtQuantity']")
		private static WebElement rmaoutwardQuantityTxtField;
		
		@FindBy (xpath="//i[@class='icon icon-add icon-font6']")
		private static WebElement rmaoutwardAddBtn;
			
		@FindBy (xpath="//div[contains(@class,'col-xs-12 col-sm-5 padding-left-Right')]")
		private static WebElement rmaoutwardNumberofItemsLabel;
		
		@FindBy (xpath="//th[@id='RMA_Table_control_heading_1']")
		private static WebElement rmaoutwardTableHeadingRMA;
		
		@FindBy (xpath="//th[@id='RMA_Table_control_heading_2']")
		private static WebElement rmaoutwardTableHeadingDocumentNo;
		
		@FindBy (xpath="//th[@id='RMA_Table_control_heading_3']")
		private static WebElement rmaoutwardTableHeadingDocumentDate;
		
		@FindBy (xpath="//label[contains(text(),'Ok')]")
		private static WebElement rmaoutwardOkBtn;
		
		@FindBy (xpath="//label[contains(text(),'Cancel')]")
		private static WebElement rmaoutwardCancelBtn;
		
		@FindBy (xpath="//i[@id='btnSearch']")
		private static WebElement rmaoutwardExpandBtn;
		
		// Search Rma popUp
				
		@FindBy (xpath="//input[@id='Search_txtSearchBox']")
		private static WebElement searchRMASearchTxtField;
		
		@FindBy (xpath="//i[@id='btn_RMASsearch_Search']")
		private static WebElement searchRMASearchBtn;
		
		@FindBy (xpath="//input[@id='Search_txtQuantity']")
		private static WebElement searchRMAQuantityTxtField;
		
		@FindBy (xpath="//label[@id='Search_lblItems']")
		private static WebElement searchRMANoOfItemsTxt;
		
		// Header Of Grid
		
		@FindBy (xpath="//input[@id='chkSelectALL']")
		private static WebElement searchRMAHeaderChkBox;
		
		@FindBy (xpath="//table[@id='RMASearchTable']/thead/tr/td[2]")
		private static WebElement searchRMATableHeadingSerialNo;
		
		@FindBy (xpath="//table[@id='RMASearchTable']/thead/tr/td[3]")
		private static WebElement searchRMATableHeadingDocNo;
		
		@FindBy (xpath="//table[@id='RMASearchTable']/thead/tr/td[4]")
		private static WebElement searchRMATableHeadingDate;
		
		
		// Grid Body
		
		@FindBy (xpath="//*[@id='RMASearchTable']/tbody/tr[1]/td[1]/input")
		private static WebElement searchRMA1ChkBox;
		
		@FindBy (xpath="//*[@id='RMASearchTable']/tbody/tr[2]/td[1]/input")
		private static WebElement searchRMA2ChkBox;
		
		@FindBy (xpath="//*[@id='RMASearchTable']/tbody/tr[3]/td[1]/input")
		private static WebElement searchRMA3ChkBox;
		
		@FindBy (xpath="//*[@id='RMASearchTable']/tbody/tr[4]/td[1]/input")
		private static WebElement searchRMA4ChkBox;
		
		@FindBy (xpath="//*[@id='RMASearchTable']/tbody/tr[5]/td[1]/input")
		private static WebElement searchRMA5ChkBox;
		
		@FindBy (xpath="//*[@id='RMASearchTable']/tbody/tr[6]/td[1]/input")
		private static WebElement searchRMA6ChkBox;
		
		@FindBy (xpath="//div[@id='id_transaction_entry_container_others']//tbody//tr[1]//td[2]")
		private static WebElement searchRMARow1SerialNo;
		
		@FindBy (xpath="//div[@id='id_transaction_entry_container_others']//tbody//tr[2]//td[2]")
		private static WebElement searchRMARow2SerialNo;
		
		@FindBy (xpath="//div[@id='id_transaction_entry_container_others']//tbody//tr[3]//td[2]")
		private static WebElement searchRMARow3SerialNo;
		
		@FindBy (xpath="//div[@id='id_transaction_entry_container_others']//tbody//tr[14]//td[2]")
		private static WebElement searchRMARow4SerialNo;
		
		@FindBy (xpath="//*[@id='SearchModal_Content']/div[3]/div/div[1]/label")
		private static WebElement searchRMAOkBtn;
		
		@FindBy (xpath="//*[@id='SearchModal_Content']/div[3]/div/div[2]/label")
		private static WebElement searchRMACancelBtn;
		
		@FindBy (xpath="//*[@id='SearchModal_Content']/div[1]/div[2]/span/i")
		private static WebElement searchRMACloseBtn;
		
		
		@FindBy(xpath="//*[@id='RMASearchTable']/tbody/tr[1]")
		private static WebElement rmaSearchTableBodyIfBlankRows;
		
		

		

		
		public boolean checkRMAIsMandatoryWithoutInputTheQty() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			//Comment this code 
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
			getAction().doubleClick(grid_ChkBox1).build().perform();
			
			checkUserFriendlyMessage();*/
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
			select3rdRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
			pvWareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.END);
			enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemcount1=itemListCount.size();
			
			System.err.println(itemcount1);
				
			for(int i=0 ; i < itemcount1 ;i++)
			{
				String data=itemListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("SmokeSalesInvoiceVAT", 550, 6)))
				{
					itemListCount.get(i).click();
					
					break;
				}
			}
				
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_5thColumn));
			select3rdRow_5thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));	
			saveBtn.click();
			
			
            String expErrorMessage	=excelReader.getCellData("SmokeSalesInvoiceVAT", 551, 7);
			
			String validationMessage=checkValidationMessage(expErrorMessage);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 551, 8, validationMessage);
			
			System.out.println("*********************************** checkRMAIsMandatoryWithoutInputTheQty  ************************************");
			
			System.out.println("error Message  :  "+validationMessage+" value Expected : "+expErrorMessage);
			
			if(validationMessage.equalsIgnoreCase(expErrorMessage))
			{
				System.out.println("Test Pass : data is As Expected");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 549, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : data is NOT As Expected");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 549, 9, resFail);
				return false;
			}
		}
		
			
		
		
		public boolean checkRMAPopUpScreenWithoutInputTheQty() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		   
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_8thColumn));
			select3rdRow_8thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
			enter_AQTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
			enter_FQTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_14thColumn));
			select3rdRow_14thColumn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVAT", 553, 6));
			enter_Rate.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.click();
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_21thColumn));
			select3rdRow_21thColumn.click();
			
			String expErrorMessage	=excelReader.getCellData("SmokeSalesInvoiceVAT", 554, 7);
				
			String validationMessage=checkValidationMessage(expErrorMessage);
				
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 554, 8, validationMessage);
			
			// Actual 
			boolean actrmaoutwardSerialNumberTxtField		=rmaoutwardSerialNumberTxtField.isDisplayed();
			String actrmaoutwardQuantityTxtField			=rmaoutwardQuantityTxtField.getAttribute("value");
			String actrmaoutwardNumberofItemsLabel			=rmaoutwardNumberofItemsLabel.getText();
			boolean actrmaoutwardTableHeadingRMA			=rmaoutwardTableHeadingRMA.isDisplayed();
			boolean actrmaoutwardTableHeadingDocumentNo		=rmaoutwardTableHeadingDocumentNo.isDisplayed();
			boolean actrmaoutwardTableHeadingDocumentDate	=rmaoutwardTableHeadingDocumentDate.isDisplayed();
			boolean actrmaoutwardOkBtn						=rmaoutwardOkBtn.isDisplayed();
			boolean actrmaoutwardCancelBtn					=rmaoutwardCancelBtn.isDisplayed();
			boolean actrmaoutwardExpandBtn					=rmaoutwardExpandBtn.isDisplayed();
			
			// Expected
			boolean exprmaoutwardSerialNumberTxtField		=true;
			String exprmaoutwardQuantityTxtField			="0";
			String exprmaoutwardNumberofItemsLabel			="0";
			boolean exprmaoutwardTableHeadingRMA			=true;
			boolean exprmaoutwardTableHeadingDocumentNo		=true;
			boolean exprmaoutwardTableHeadingDocumentDate	=true;
			boolean exprmaoutwardOkBtn						=true;
			boolean exprmaoutwardCancelBtn					=true;
			boolean exprmaoutwardExpandBtn					=true;
			
			
			System.out.println("*********************************** checkRMAPopUpScreenWithoutInputTheQty  ************************************");
			
			System.out.println("error Message                      :  "+validationMessage 					  +" value Expected : "+expErrorMessage);
			System.out.println("rmaoutwardSerialNumberTxtField 	   :  "+actrmaoutwardSerialNumberTxtField     +" value Expected : "+exprmaoutwardSerialNumberTxtField);
			System.out.println("rmaoutwardQuantityTxtField    	   :  "+actrmaoutwardQuantityTxtField		  +" value Expected : "+exprmaoutwardQuantityTxtField);
			System.out.println("rmaoutwardNumberofItemsLabel 	   :  "+actrmaoutwardNumberofItemsLabel 	  +" value Expected : "+exprmaoutwardNumberofItemsLabel);
			System.out.println("rmaoutwardTableHeadingRMA          :  "+actrmaoutwardTableHeadingRMA		  +" value Expected : "+exprmaoutwardTableHeadingRMA);
			System.out.println("rmaoutwardTableHeadingDocumentNo   :  "+actrmaoutwardTableHeadingDocumentNo   +" value Expected : "+exprmaoutwardTableHeadingDocumentNo);
			System.out.println("rmaoutwardTableHeadingDocumentDate :  "+actrmaoutwardTableHeadingDocumentDate +" value Expected : "+exprmaoutwardTableHeadingDocumentDate);
			System.out.println("rmaoutwardOkBtn 				   :  "+actrmaoutwardOkBtn					  +" value Expected : "+exprmaoutwardOkBtn);
			System.out.println("rmaoutwardCancelBtn  			   :  "+actrmaoutwardCancelBtn				  +" value Expected : "+exprmaoutwardCancelBtn);
			System.out.println("rmaoutwardExpandBtn 			   :  "+actrmaoutwardExpandBtn				  +" value Expected : "+exprmaoutwardExpandBtn);
			
			
			boolean actMethod = actrmaoutwardSerialNumberTxtField==exprmaoutwardSerialNumberTxtField && actrmaoutwardQuantityTxtField.equalsIgnoreCase(exprmaoutwardQuantityTxtField)
					&& actrmaoutwardNumberofItemsLabel.equalsIgnoreCase(exprmaoutwardNumberofItemsLabel) && actrmaoutwardTableHeadingRMA==exprmaoutwardTableHeadingRMA
					&& actrmaoutwardTableHeadingDocumentNo==exprmaoutwardTableHeadingDocumentNo && actrmaoutwardTableHeadingDocumentDate==exprmaoutwardTableHeadingDocumentDate
					&& actrmaoutwardOkBtn==exprmaoutwardOkBtn && actrmaoutwardCancelBtn==exprmaoutwardCancelBtn && actrmaoutwardExpandBtn==exprmaoutwardExpandBtn;

			String actDisplayingResult =Boolean.toString(actMethod);
			String elementsIsDisplay = actDisplayingResult.toUpperCase();
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 555, 8, elementsIsDisplay);
			
			
			System.out.println("Display Stsus : "+actDisplayingResult  +" Value Expected : "+elementsIsDisplay);
			
			if(validationMessage.equalsIgnoreCase(expErrorMessage)
					
					&& actDisplayingResult.equalsIgnoreCase(elementsIsDisplay))
			{
				System.out.println("Test Pass : data is As Expected");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 552, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : data is NOT As Expected");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 552, 9, resFail);
				return false;
			}
		}
		
		
		public boolean checkAddButtonInRMAwithNoQty() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardAddBtn));
			rmaoutwardAddBtn.click();
			
					
			getWaitForAlert();
			
			String actAlert	=getAlert().getText();
			
			String expAlert	=excelReader.getCellData("SmokeSalesInvoiceVAT", 557, 7);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 557, 8, actAlert);
			
			System.out.println("************************************* checkAddButtonInRMAwithNoQty  *********************************");
			
			System.out.println("Alert : "+actAlert+"  Value Expected : "+expAlert);
			
			if(actAlert.equalsIgnoreCase(expAlert))
			{
				System.out.println("Test Pass : Alert Displayed");
				
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 556, 9, resPass);
				getAlert().accept();
				
				return true;
			}
			else
			{
				System.out.println("Test Fail : Alert NOT Displayed");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 556, 9, resFail);
				return false;
			}
		}
		
			
		
		

		public boolean checkOkButtonInRMAwithNoQty() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardOkBtn));
			rmaoutwardOkBtn.click();
			
			getWaitForAlert();
						
			String actAlert	=getAlert().getText();
			
			String expAlert	=excelReader.getCellData("SmokeSalesInvoiceVAT", 559, 7);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 559, 8, actAlert);
			
			System.out.println("************************************* checkOkButtonInRMAwithNoQty  *********************************");
			
			System.out.println("Alert : "+actAlert+"  Value Expected : "+expAlert);
			
			if(actAlert.equalsIgnoreCase(expAlert))
			{
				System.out.println("Test Pass : Alert Displayed");
				
				getAlert().accept();
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 558, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Alert NOT Displayed");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 558, 9, resFail);
				return false;
			}
		}
		
		
		
		public boolean checkRmaSearchPopupOnRmaExpansion() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardExpandBtn));
			rmaoutwardExpandBtn.click();
			
			Thread.sleep(3000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMASearchTxtField));
			
			// Actual 
			boolean actsearchRMASearchTxtField			=searchRMASearchTxtField.isDisplayed();
			boolean actsearchRMASearchBtn				=searchRMASearchBtn.isDisplayed();
			String actsearchRMAQuantityTxtField			=searchRMAQuantityTxtField.getAttribute("value");
			String actsearchRMANoOfItemsTxt				=searchRMANoOfItemsTxt.getText();
			
			boolean actsearchRMAHeaderChkBox			=searchRMAHeaderChkBox.isDisplayed();
			boolean actsearchRMATableHeadingSerialNo	=searchRMATableHeadingSerialNo.isDisplayed();
			boolean actsearchRMATableHeadingDocNo		=searchRMATableHeadingDocNo.isDisplayed();
			boolean actsearchRMATableHeadingDate		=searchRMATableHeadingDate.isDisplayed();
			boolean actsearchRMAOkBtn					=searchRMAOkBtn.isDisplayed();
			boolean actsearchRMACancelBtn				=searchRMACancelBtn.isDisplayed();
			
			// Expected
			boolean expsearchRMASearchTxtField			=true;
			boolean expsearchRMASearchBtn				=true;
			String expsearchRMAQuantityTxtField			="0";
			String expsearchRMANoOfItemsTxt				="0";
			
			boolean expsearchRMAHeaderChkBox			=true;
			boolean expsearchRMATableHeadingSerialNo	=true;
			boolean expsearchRMATableHeadingDocNo		=true;
			boolean expsearchRMATableHeadingDate		=true;
			boolean expsearchRMAOkBtn					=true;
			boolean expsearchRMACancelBtn				=true;
			
			System.out.println("************************************* checkRmaSearchPopupOnRmaExpansion  *********************************");
			
			System.out.println("searchRMASearchTxtField       : "+actsearchRMASearchTxtField		+"  Value Expected : "+expsearchRMASearchTxtField);
			System.out.println("searchRMASearchBtn            : "+actsearchRMASearchBtn				+"  Value Expected : "+expsearchRMASearchBtn);
			System.out.println("searchRMAQuantityTxtField     : "+actsearchRMAQuantityTxtField		+"  Value Expected : "+expsearchRMAQuantityTxtField);
			System.out.println("searchRMANoOfItemsTxt         : "+actsearchRMANoOfItemsTxt			+"  Value Expected : "+expsearchRMANoOfItemsTxt);
			System.out.println("searchRMAHeaderChkBox         : "+actsearchRMAHeaderChkBox			+"  Value Expected : "+expsearchRMAHeaderChkBox);
			System.out.println("searchRMATableHeadingSerialNo : "+actsearchRMATableHeadingSerialNo  +"  Value Expected : "+expsearchRMATableHeadingSerialNo);
			System.out.println("searchRMATableHeadingDocNo    : "+actsearchRMATableHeadingDocNo		+"  Value Expected : "+expsearchRMATableHeadingDocNo);
			System.out.println("searchRMATableHeadingDate  	  : "+actsearchRMATableHeadingDate		+"  Value Expected : "+expsearchRMATableHeadingDate);
			System.out.println("searchRMAOkBtn   			  : "+actsearchRMAOkBtn					+"  Value Expected : "+expsearchRMAOkBtn);
			System.out.println("searchRMACancelBtn   		  : "+actsearchRMACancelBtn				+"  Value Expected : "+expsearchRMACancelBtn);
			
			

           boolean actMethod = actsearchRMASearchTxtField==expsearchRMASearchTxtField && actsearchRMASearchBtn==expsearchRMASearchBtn 
					&& actsearchRMAQuantityTxtField.equalsIgnoreCase(expsearchRMAQuantityTxtField) && actsearchRMANoOfItemsTxt.equalsIgnoreCase(expsearchRMANoOfItemsTxt)
					&& actsearchRMAHeaderChkBox==expsearchRMAHeaderChkBox && actsearchRMATableHeadingSerialNo==expsearchRMATableHeadingSerialNo
					&& actsearchRMATableHeadingDocNo==expsearchRMATableHeadingDocNo && actsearchRMATableHeadingDate==expsearchRMATableHeadingDate 
					&& actsearchRMAOkBtn==expsearchRMAOkBtn && actsearchRMACancelBtn==expsearchRMACancelBtn;

		    String actDisplayingResult =Boolean.toString(actMethod);
			String elementsIsDisplay = actDisplayingResult.toUpperCase();
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 561, 8, elementsIsDisplay);
			
			
			System.out.println("Display Stsus : "+actDisplayingResult  +" Value Expected : "+elementsIsDisplay);
			
			if(actDisplayingResult.equalsIgnoreCase(elementsIsDisplay))
			{
				System.out.println("Test Pass : Search Rma Pop Up Displayed");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 560, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Search Rma Pop Up NOT Displayed");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 560, 9, resFail);
				return false;
			}
		}

		
		public boolean checkOkButtonInSearchRMAwithNoQty() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAOkBtn));
			searchRMAOkBtn.click();
			
			getWaitForAlert();
			
			String actAlert	=getAlert().getText();
			
			String expAlert	=excelReader.getCellData("SmokeSalesInvoiceVAT", 563, 7);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 563, 8, actAlert);

			
			System.out.println("************************************* checkOkButtonInSearchRMAwithNoQty  *********************************");
			
			System.out.println("Alert : "+actAlert+"  Value Expected : "+expAlert);
			
			if(actAlert.equalsIgnoreCase(expAlert))
			{
				System.out.println("Test Pass : Alert Displayed");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 562, 9, resPass);
				getAlert().accept();
				
				return true;
			}
			else
			{
				System.out.println("Test Fail : Alert NOT Displayed");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 562, 9, resFail);
				return false;
			}
		}

		
		public boolean checkFirstSerialNumberWithNoQty() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMA1ChkBox));
			searchRMA1ChkBox.click();
			
			
			getWaitForAlert();
			
			String actAlert	=getAlert().getText();
			
			String expAlert	=excelReader.getCellData("SmokeSalesInvoiceVAT", 565, 7);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 565, 8, actAlert);

			
			System.out.println("************************************* checkFirstSerialNumberWithNoQty  *********************************");
			
			System.out.println("Alert : "+actAlert+"  Value Expected : "+expAlert);
						
			if(actAlert.equalsIgnoreCase(expAlert))
			{
				System.out.println("Test Pass : Qty And no Of items Are As Expected");
				
				getAlert().accept();
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 564, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Qty And no Of items Are NOT As Expected");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 564, 9, resFail);
				return false;
			}
		}
		
			
		
		public boolean checkQtyAndNumnerOfItemOnSelectingHeaderCheckBox() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAHeaderChkBox));
			searchRMAHeaderChkBox.click();
			
			Thread.sleep(2000);
			
			String actsearchRMAQuantityTxtField		=searchRMAQuantityTxtField.getAttribute("value");
			String actsearchRMANoOfItemsTxt			=searchRMANoOfItemsTxt.getText();
			
			String expsearchRMAQuantityTxtField		=excelReader.getCellData("SmokeSalesInvoiceVAT", 567, 7);
			String expsearchRMANoOfItemsTxt			=excelReader.getCellData("SmokeSalesInvoiceVAT", 568, 7);
			
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 567, 8, actsearchRMAQuantityTxtField);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 568, 8, actsearchRMANoOfItemsTxt);
			
			
			System.out.println("************************************* checkQtyAndNumnerOfItemOnSelectingHeaderCheckBox  *********************************");
			
			System.out.println("searchRMAQuantityTxtField : "+actsearchRMAQuantityTxtField  +"  Value Expected : "+expsearchRMAQuantityTxtField);
			System.out.println("searchRMANoOfItemsTxt     : "+actsearchRMANoOfItemsTxt		+"  Value Expected : "+expsearchRMANoOfItemsTxt);
						
			if(actsearchRMAQuantityTxtField.equalsIgnoreCase(expsearchRMAQuantityTxtField) && actsearchRMANoOfItemsTxt.equalsIgnoreCase(expsearchRMANoOfItemsTxt))
			{
				System.out.println("Test Pass : Qty And no Of items Are As Expected");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 566, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Qty And no Of items Are NOT As Expected");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 566, 9, resFail);
				return false;
			}
		}
		
			
		// Reported Issue
		public boolean checkQtyAndNumnerOfItemOnUncheckingHeaderCheckBox() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAHeaderChkBox));
			searchRMAHeaderChkBox.click();
			
			Thread.sleep(2000);
			
			String actsearchRMAQuantityTxtField		=searchRMAQuantityTxtField.getAttribute("value");
			String actsearchRMANoOfItemsTxt			=searchRMANoOfItemsTxt.getText();
			
			String expsearchRMAQuantityTxtField		=excelReader.getCellData("SmokeSalesInvoiceVAT", 570, 7);
			String expsearchRMANoOfItemsTxt			=excelReader.getCellData("SmokeSalesInvoiceVAT", 571, 7);
			
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 570, 8, actsearchRMAQuantityTxtField);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 571, 8, actsearchRMANoOfItemsTxt);
			
			
			System.out.println("************************************* checkQtyAndNumnerOfItemOnUncheckingHeaderCheckBox  *********************************");
			
			System.out.println("searchRMAQuantityTxtField : "+actsearchRMAQuantityTxtField  +"  Value Expected : "+expsearchRMAQuantityTxtField);
			System.out.println("searchRMANoOfItemsTxt     : "+actsearchRMANoOfItemsTxt		+"  Value Expected : "+expsearchRMANoOfItemsTxt);
						
			if(actsearchRMAQuantityTxtField.equalsIgnoreCase(expsearchRMAQuantityTxtField) && actsearchRMANoOfItemsTxt.equalsIgnoreCase(expsearchRMANoOfItemsTxt))
			{
				System.out.println("Test Pass : Qty And no Of items Are As Expected");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 569, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Qty And no Of items Are NOT As Expected");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 569, 9, resFail);
				return false;
			}
		}
		


		public boolean checkFirstSerialNumberWithNoQtyAfterCheckingAndUncheckingAllSerialNumber() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMA1ChkBox));
			searchRMA1ChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAOkBtn));
			searchRMAOkBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMARow1SerialNo));
			
			String actSerialno		=searchRMARow1SerialNo.getText();
			
			String expSerialno		=excelReader.getCellData("SmokeSalesInvoiceVAT", 573, 7);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 573, 8, actSerialno);
			
			
			System.out.println(actSerialno);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardOkBtn));
			rmaoutwardOkBtn.click();
			
			Thread.sleep(4000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
			enter_RMA.sendKeys(Keys.TAB);
			
			String actRma		=select3rdRow_21thColumn.getText();
			
			String expRma		=excelReader.getCellData("SmokeSalesInvoiceVAT", 574, 7);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 574, 8, actRma);
			
			
			System.out.println("************************************* checkFirstSerialNumberWithNoQtyAfterCheckingAndUncheckingAllSerialNumber  *********************************");
			
			System.out.println("Serialno : "+actSerialno  +"  Value Expected : "+expSerialno);
			System.out.println("Rma      : "+actRma		  +"  Value Expected : "+expRma);
			
						
			if(actSerialno.equalsIgnoreCase(expSerialno) && actRma.equalsIgnoreCase(expRma))
			{
				System.out.println("Test Pass : Qty And no Of items Are As Expected");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 572, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Qty And no Of items Are NOT As Expected");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 572, 9, resPass);
				return false;
			}
		}
			
		
		
		public boolean checkSavingWithRmaQtyAndNumbersNotEqual() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			String expErrorMessage	=excelReader.getCellData("SmokeSalesInvoiceVAT", 576, 7);
			
			String validationMessage=checkValidationMessage(expErrorMessage);
				
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 576, 8, validationMessage);
			
			System.out.println("*********************************** checkSavingWithRmaQtyAndNumbersNotEqual  ************************************");
			
			System.out.println("error Message  :  "+validationMessage+" value Expected : "+expErrorMessage);
			
			if(validationMessage.equalsIgnoreCase(expErrorMessage))
			{
				System.out.println("***Test Pass: Error Message RMA numbers and quantity do not match is Displaying***");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 575, 9, resPass);
				
				
				return true;
			}
			else
			{
				System.out.println("***Test Fail: Error Message RMA numbers and quantity do not match is NOT Displaying***");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 575, 9, resFail);
				
				
				billRefcancel.click();
			
				return false;
			}
		}
		
		
		
		public boolean checkRMAAsMandatoryByInputQtyWithOutRMAAndClickOnSaveButton() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			Thread.sleep(3000);
			
			
			thirdRowIndex.click();
			
			deleteRowBtn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
			select3rdRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
			pvWareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.END);
			enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemcount1=itemListCount.size();
			
			System.err.println(itemcount1);
				
			for(int i=0 ; i < itemcount1 ;i++)
			{
				String data=itemListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("SmokeSalesInvoiceVAT", 578, 6)))
				{
					itemListCount.get(i).click();
					
					break;
				}
			}
				
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_5thColumn));
			select3rdRow_5thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_8thColumn));
			select3rdRow_8thColumn.click();

			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
			enter_AQTxt.click();
			enter_AQTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
			enter_FQTxt.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVAT", 579, 6));
			enter_FQTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_11thColumn));
			select3rdRow_11thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("4");
			enter_Quantity.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_14thColumn));
			select3rdRow_14thColumn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.click();
			enter_Rate.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
            String expErrorMessage	=excelReader.getCellData("SmokeSalesInvoiceVAT", 580, 7);
			
			String validationMessage=checkValidationMessage(expErrorMessage);
				
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 580, 8, validationMessage);
			
			System.out.println("*********************************** checkRMAAsMandatoryByInputQtyWithOutRMAAndClickOnSaveButton  ************************************");
			
			System.out.println("error Message  :  "+validationMessage+" value Expected : "+expErrorMessage);
			
			if(validationMessage.equalsIgnoreCase(expErrorMessage))
			{
				System.out.println("***Test Pass: Error Message RMA numbers and quantity do not match is Displaying***");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 577, 9, resPass);
				
				
				return true;
			}
			else
			{
				System.out.println("***Test Fail: Error Message RMA numbers and quantity do not match is NOT Displaying***");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 577, 9, resFail);
				return false;
			}
		}
		
		
		

		public boolean checkRMAPopUpScreenByInputQty() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_14thColumn));
			select3rdRow_14thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVAT", 582, 6));
			Thread.sleep(2000);
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.click();
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_21thColumn));
			select3rdRow_21thColumn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardSerialNumberTxtField));
			
			// Actual 
			boolean actrmaoutwardSerialNumberTxtField		=rmaoutwardSerialNumberTxtField.isDisplayed();
			String actrmaoutwardQuantityTxtField			=rmaoutwardQuantityTxtField.getAttribute("value");
			String actrmaoutwardNumberofItemsLabel			=rmaoutwardNumberofItemsLabel.getText();
			boolean actrmaoutwardTableHeadingRMA			=rmaoutwardTableHeadingRMA.isDisplayed();
			boolean actrmaoutwardTableHeadingDocumentNo		=rmaoutwardTableHeadingDocumentNo.isDisplayed();
			boolean actrmaoutwardTableHeadingDocumentDate	=rmaoutwardTableHeadingDocumentDate.isDisplayed();
			boolean actrmaoutwardOkBtn						=rmaoutwardOkBtn.isDisplayed();
			boolean actrmaoutwardCancelBtn					=rmaoutwardCancelBtn.isDisplayed();
			boolean actrmaoutwardExpandBtn					=rmaoutwardExpandBtn.isDisplayed();
			
			// Expected
			boolean exprmaoutwardSerialNumberTxtField		=true;
			String exprmaoutwardQuantityTxtField			="4";
			String exprmaoutwardNumberofItemsLabel			="0";
			boolean exprmaoutwardTableHeadingRMA			=true;
			boolean exprmaoutwardTableHeadingDocumentNo		=true;
			boolean exprmaoutwardTableHeadingDocumentDate	=true;
			boolean exprmaoutwardOkBtn						=true;
			boolean exprmaoutwardCancelBtn					=true;
			boolean exprmaoutwardExpandBtn					=true;
			
			
			System.out.println("*********************************** checkRMAPopUpScreenByInputQty  ************************************");
			
			System.out.println("rmaoutwardSerialNumberTxtField 	   :  "+actrmaoutwardSerialNumberTxtField     +" value Expected : "+exprmaoutwardSerialNumberTxtField);
			System.out.println("rmaoutwardQuantityTxtField    	   :  "+actrmaoutwardQuantityTxtField		  +" value Expected : "+exprmaoutwardQuantityTxtField);
			System.out.println("rmaoutwardNumberofItemsLabel 	   :  "+actrmaoutwardNumberofItemsLabel 	  +" value Expected : "+exprmaoutwardNumberofItemsLabel);
			System.out.println("rmaoutwardTableHeadingRMA          :  "+actrmaoutwardTableHeadingRMA		  +" value Expected : "+exprmaoutwardTableHeadingRMA);
			System.out.println("rmaoutwardTableHeadingDocumentNo   :  "+actrmaoutwardTableHeadingDocumentNo   +" value Expected : "+exprmaoutwardTableHeadingDocumentNo);
			System.out.println("rmaoutwardTableHeadingDocumentDate :  "+actrmaoutwardTableHeadingDocumentDate +" value Expected : "+exprmaoutwardTableHeadingDocumentDate);
			System.out.println("rmaoutwardOkBtn 				   :  "+actrmaoutwardOkBtn					  +" value Expected : "+exprmaoutwardOkBtn);
			System.out.println("rmaoutwardCancelBtn  			   :  "+actrmaoutwardCancelBtn				  +" value Expected : "+exprmaoutwardCancelBtn);
			System.out.println("rmaoutwardExpandBtn 			   :  "+actrmaoutwardExpandBtn				  +" value Expected : "+exprmaoutwardExpandBtn);
			
			boolean actMethod = actrmaoutwardSerialNumberTxtField==exprmaoutwardSerialNumberTxtField && actrmaoutwardQuantityTxtField.equalsIgnoreCase(exprmaoutwardQuantityTxtField)
					&& actrmaoutwardNumberofItemsLabel.equalsIgnoreCase(exprmaoutwardNumberofItemsLabel) && actrmaoutwardTableHeadingRMA==exprmaoutwardTableHeadingRMA
					&& actrmaoutwardTableHeadingDocumentNo==exprmaoutwardTableHeadingDocumentNo && actrmaoutwardTableHeadingDocumentDate==exprmaoutwardTableHeadingDocumentDate
					&& actrmaoutwardOkBtn==exprmaoutwardOkBtn && actrmaoutwardCancelBtn==exprmaoutwardCancelBtn && actrmaoutwardExpandBtn==exprmaoutwardExpandBtn;

			String actDisplayingResult =Boolean.toString(actMethod);
			String elementsIsDisplay = actDisplayingResult.toUpperCase();
				
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 583, 8, elementsIsDisplay);
				
				
			System.out.println("Display Stsus : "+actDisplayingResult  +" Value Expected : "+elementsIsDisplay);
			
			
			if(actDisplayingResult.equalsIgnoreCase(elementsIsDisplay))
			{
				System.out.println("Test Pass : data is As Expected");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 581, 9, resPass);
				return true;
			}
			else
			{
			
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 581, 9, resFail);
				return false;
			}
		}
		

		public boolean checkOkButtonInRMAPopUpScreenWithoutSelectingRMA() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardOkBtn));
			rmaoutwardOkBtn.click();
			
			getWaitForAlert();
			
			String actAlert		=getAlert().getText();
			
			String expAlert		=excelReader.getCellData("SmokeSalesInvoiceVAT", 585, 7);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 585, 8, actAlert);

		
	        System.out.println("Test Pass : alert Dipalyed");
	        
	        getAlert().accept();
			
	        getWaitForAlert();
				
			String actAlert1	=getAlert().getText();
			
			String expAlert1	=excelReader.getCellData("SmokeSalesInvoiceVAT", 586, 7);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 586, 8, actAlert1);	
			
			System.out.println("************************************* checkOkButtonInRMAPopUpScreenWithoutSelectingRMA  *********************************");
			
			System.out.println("Alert On Clicking Ok With Empty Inputs   : "+actAlert  +"  Value Expected : "+expAlert);
			
			System.out.println("Alert On Clicking Ok With Empty Inputs   : "+actAlert1 +"  Value Expected : "+expAlert1);
			

			if(actAlert.equalsIgnoreCase(expAlert) && actAlert1.equalsIgnoreCase(expAlert1))
			{
				System.out.println("Alert Displayed");
				getAlert().accept();
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 584, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Alert Not Displayed");
				excelReader.setCellData(xlfile, "Sheet6", 144, 9, resFail);
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 584, 9, resFail);
				return false;
			}
		}
		

		
		public boolean checkAddButtonInRMAWithQtyInVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardAddBtn));
			rmaoutwardAddBtn.click();
			
			getWaitForAlert();
			
			String actAlert		=getAlert().getText();
			
			String expAlert		=excelReader.getCellData("SmokeSalesInvoiceVAT", 588, 7);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 588, 8, actAlert);

			
			System.out.println("************************************* checkAddButtonInRMAWithQtyInVoucher  *********************************");
			
			System.out.println("Alert   : "+actAlert+"  Value Expected : "+expAlert);
			
			if(actAlert.equalsIgnoreCase(expAlert))
			{
				System.out.println("Test Pass : Alert Displayed");
				
				getAlert().accept();
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 587, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Alert NOT Displayed");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 587, 9, resFail);
				return false;
			}
		}
			

		public boolean checkRMASearchPopupOnRMAExpansionWithQtyInVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardExpandBtn));
			rmaoutwardExpandBtn.click();
			
			Thread.sleep(3000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardSerialNumberTxtField));
			
			// Actual 
			boolean actrmaoutwardSerialNumberTxtField		=rmaoutwardSerialNumberTxtField.isDisplayed();
			String actrmaoutwardQuantityTxtField			=rmaoutwardQuantityTxtField.getAttribute("value");
			String actrmaoutwardNumberofItemsLabel			=rmaoutwardNumberofItemsLabel.getText();
			boolean actrmaoutwardTableHeadingRMA			=rmaoutwardTableHeadingRMA.isDisplayed();
			boolean actrmaoutwardTableHeadingDocumentNo		=rmaoutwardTableHeadingDocumentNo.isDisplayed();
			boolean actrmaoutwardTableHeadingDocumentDate	=rmaoutwardTableHeadingDocumentDate.isDisplayed();
			boolean actrmaoutwardOkBtn						=rmaoutwardOkBtn.isDisplayed();
			boolean actrmaoutwardCancelBtn					=rmaoutwardCancelBtn.isDisplayed();
			boolean actrmaoutwardExpandBtn					=rmaoutwardExpandBtn.isDisplayed();
			
			// Expected
			boolean exprmaoutwardSerialNumberTxtField		=true;
			String exprmaoutwardQuantityTxtField			="4";
			String exprmaoutwardNumberofItemsLabel			="0";
			boolean exprmaoutwardTableHeadingRMA			=true;
			boolean exprmaoutwardTableHeadingDocumentNo		=true;
			boolean exprmaoutwardTableHeadingDocumentDate	=true;
			boolean exprmaoutwardOkBtn						=true;
			boolean exprmaoutwardCancelBtn					=true;
			boolean exprmaoutwardExpandBtn					=true;
			
			
			ArrayList<String> actRMAListValues= new ArrayList<String>();
			
	        for (int i = 1; i < 11; i++)
	        {
	        	WebElement options=getDriver().findElement(By.xpath("//*[@id='RMASearchTable']/tbody/tr["+i+"]/td[2]"));
	        	actRMAListValues.add(options.getText());
	        	
	        }
	        
	        System.out.println("actRMA  : "+actRMAListValues);
	        
	        String actList = actRMAListValues.toString();
	        String expList = excelReader.getCellData("SmokeSalesInvoiceVAT", 590, 7);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 590, 8, actList);
			
	        System.out.println("actList  : "+actList);
	        System.out.println("expList  : "+expList);
	        
	        
	        /*boolean rma=actRMAListValues.equals(expRMAListValues);*/
			
	        System.out.println("************************************* checkRMASearchPopupOnRMAExpansionWithQtyInVoucher  *********************************");
			
			System.out.println("rmaoutwardSerialNumberTxtField 	   :  "+actrmaoutwardSerialNumberTxtField     +" value Expected : "+exprmaoutwardSerialNumberTxtField);
			System.out.println("rmaoutwardQuantityTxtField    	   :  "+actrmaoutwardQuantityTxtField		  +" value Expected : "+exprmaoutwardQuantityTxtField);
			System.out.println("rmaoutwardNumberofItemsLabel 	   :  "+actrmaoutwardNumberofItemsLabel 	  +" value Expected : "+exprmaoutwardNumberofItemsLabel);
			System.out.println("rmaoutwardTableHeadingRMA          :  "+actrmaoutwardTableHeadingRMA		  +" value Expected : "+exprmaoutwardTableHeadingRMA);
			System.out.println("rmaoutwardTableHeadingDocumentNo   :  "+actrmaoutwardTableHeadingDocumentNo   +" value Expected : "+exprmaoutwardTableHeadingDocumentNo);
			System.out.println("rmaoutwardTableHeadingDocumentDate :  "+actrmaoutwardTableHeadingDocumentDate +" value Expected : "+exprmaoutwardTableHeadingDocumentDate);
			System.out.println("rmaoutwardOkBtn 				   :  "+actrmaoutwardOkBtn					  +" value Expected : "+exprmaoutwardOkBtn);
			System.out.println("rmaoutwardCancelBtn  			   :  "+actrmaoutwardCancelBtn				  +" value Expected : "+exprmaoutwardCancelBtn);
			System.out.println("rmaoutwardExpandBtn 			   :  "+actrmaoutwardExpandBtn				  +" value Expected : "+exprmaoutwardExpandBtn);
			//System.out.println("Rma In Search Rma Table            : "+rma                                    +"  Value Expected : "+"True");
		    
	        if(/*rma==true*/actList.equalsIgnoreCase(expList) && actrmaoutwardSerialNumberTxtField==exprmaoutwardSerialNumberTxtField && actrmaoutwardQuantityTxtField.equalsIgnoreCase(exprmaoutwardQuantityTxtField)
					&& actrmaoutwardNumberofItemsLabel.equalsIgnoreCase(exprmaoutwardNumberofItemsLabel) && actrmaoutwardTableHeadingRMA==exprmaoutwardTableHeadingRMA
					&& actrmaoutwardTableHeadingDocumentNo==exprmaoutwardTableHeadingDocumentNo && actrmaoutwardTableHeadingDocumentDate==exprmaoutwardTableHeadingDocumentDate
					&& actrmaoutwardOkBtn==exprmaoutwardOkBtn && actrmaoutwardCancelBtn==exprmaoutwardCancelBtn && actrmaoutwardExpandBtn==exprmaoutwardExpandBtn)
	        {
	        	excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 589, 9, resPass);
	        	return true;
	        }
	        else
	        {
	        	excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 589, 9, resFail);
	        	return false;
	        }
		        
			
			
		}
		
		
		public boolean checkOkButtonInSearchRMAWithQtyInVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAOkBtn));
			searchRMAOkBtn.click();
			
			getWaitForAlert();
			
			String actAlert		=getAlert().getText();
			
			String expAlert		=excelReader.getCellData("SmokeSalesInvoiceVAT", 592, 7);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 592, 8, actAlert);
			
			
			System.out.println("************************************* checkOkButtonInSearchRMAWithQtyInVoucher  *********************************");
			
			System.out.println("Alert   : "+actAlert+"  Value Expected : "+expAlert);
			
			if(actAlert.equalsIgnoreCase(expAlert))
			{
				System.out.println("Test Pass : Alert Displayed");
				
				getAlert().accept();
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 590, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Alert NOT Displayed");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 590, 9, resFail);
				return false;
			}
		}
		
		
		
		
		

		public boolean checkSearchBoxByInputRMANumber() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMASearchTxtField));
			searchRMASearchTxtField.click();
			searchRMASearchTxtField.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVAT", 594, 6));
			Thread.sleep(2000);
			searchRMASearchTxtField.sendKeys(Keys.TAB);
			
			String expSearchRMAFirstRow		=excelReader.getCellData("SmokeSalesInvoiceVAT", 595, 7);
			String expSearchRMASecondRow	=excelReader.getCellData("SmokeSalesInvoiceVAT", 596, 7);
		
	        String searchRMAFirstRow=getDriver().findElement(By.xpath("//*[@id='RMASearchTable']/tbody/tr[1]/td[2]")).getText();
	        String searchRMASecondRow=getDriver().findElement(By.xpath("//*[@id='RMASearchTable']/tbody/tr[10]/td[2]")).getText();
	        	
	        
	        excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 595, 8, searchRMAFirstRow);
	        excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 596, 8, searchRMASecondRow);
	        
	        
	        System.out.println("************************************* checkSearchBoxByInputRMANumber  *********************************");
	        System.out.println("expSearchRMAFirstRow  : "+ expSearchRMAFirstRow  +"  Value Expected : "+ searchRMAFirstRow);
	        System.out.println("expSearchRMASecondRow : "+ expSearchRMASecondRow +"  Value Expected : "+ searchRMASecondRow);
	        
	        if(expSearchRMAFirstRow.equalsIgnoreCase(searchRMAFirstRow) && expSearchRMASecondRow.equalsIgnoreCase(searchRMASecondRow))
	        {
	        	excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 593, 9, resPass);
	        	return true;
	        }
	        else
	        {
	        	excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 593, 9, resFail);
	        	return false;
	        }
	        
		}
		
		 //////2nd
		
		public boolean checkQtyAndNumberOfItemsByInputSearchRMAInSearchPopupScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAHeaderChkBox));
			searchRMAHeaderChkBox.click();
			
			Thread.sleep(2000);
			
			String actsearchRMAQuantityTxtField		=searchRMAQuantityTxtField.getAttribute("value");
			String actsearchRMANoOfItemsTxt			=searchRMANoOfItemsTxt.getText();
			
			String expsearchRMAQuantityTxtField		=excelReader.getCellData("SmokeSalesInvoiceVAT", 598, 7);
			String expsearchRMANoOfItemsTxt			=excelReader.getCellData("SmokeSalesInvoiceVAT", 599, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 598, 8, actsearchRMAQuantityTxtField);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 599, 8, actsearchRMANoOfItemsTxt);
			
			
			System.out.println("************************************* checkQtyAndNumberOfItemsByInputSearchRMAInSearchPopupScreen  *********************************");
			
			System.out.println("searchRMAQuantityTxtField : "+actsearchRMAQuantityTxtField  +"  Value Expected : "+expsearchRMAQuantityTxtField);
			System.out.println("searchRMANoOfItemsTxt     : "+actsearchRMANoOfItemsTxt		+"  Value Expected : "+expsearchRMANoOfItemsTxt);
						
			if(actsearchRMAQuantityTxtField.equalsIgnoreCase(expsearchRMAQuantityTxtField) && actsearchRMANoOfItemsTxt.equalsIgnoreCase(expsearchRMANoOfItemsTxt))
			{
				System.out.println("Test Pass : Qty And no Of items Are As Expected");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 597, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Qty And no Of items Are NOT As Expected");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 597, 9, resPass);
				return false;
			}
		}
		
		
		
		

		public boolean checkQtyAndNumberOfItemsInRMAPopupScreenBySelectingSearchRMA() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAOkBtn));
			searchRMAOkBtn.click();
			
			Thread.sleep(2000);
			
			String actsearchRMAQuantityTxtField=searchRMAQuantityTxtField.getAttribute("value");
			String actsearchRMANoOfItemsTxt=searchRMANoOfItemsTxt.getText();
			
			ArrayList<String>  expRMA= new ArrayList<String>(); 
	         
			expRMA.add("HYD_OS@Rma1");
			expRMA.add("HYD_OS@Rma10");
			
			
			ArrayList<String> actRMA= new ArrayList<>();
			
	        for (int i = 1; i < 3; i++)
	        {
	        	WebElement a=getDriver().findElement(By.xpath("//*[@id='RMA_Table']/tbody/tr["+i+"]/td[2]"));
	        	Thread.sleep(2000);
	        	actRMA.add(a.getText());
	        	Thread.sleep(2000);
	        	System.out.println(a.getText());
	        }
	        
	        System.out.println("************************************* checkQtyAndNumberOfItemsInRMAPopupScreenBySelectingSearchRMA  *********************************");
			
	        System.out.println("searchRMAQuantityTxtField : "+actsearchRMAQuantityTxtField);
			System.out.println("searchRMANoOfItemsTxt     : "+actsearchRMANoOfItemsTxt);
	        
	        System.out.println("actualrmaequals  : "+actRMA.equals(expRMA));
	        
	        System.out.println("actualcontains   : "+actRMA.contains(expRMA));
	     
	        
	        String actualrma=actRMA.toString();
	        
	        String expectedrma=expRMA.toString();
	        
	        
	        excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 601, 7, expectedrma);
	        excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 601, 8, actualrma);
	        
	        if(actRMA.equals(expRMA))
	        {
	        	excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 602, 9, resPass);
	        	 return true;
	        }
	        else
	        {
	        	excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 602, 9, resFail);
	        	return false;
	        }
		}
		
		


		public boolean checkOKButtonInRmaPopUpScreenBySelectingLessSerialNumbersToVoucherQty() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardOkBtn));
			rmaoutwardOkBtn.click();
			
			getWaitForAlert();
					
			String actAlert		=getAlert().getText();
			
			String expAlert		=excelReader.getCellData("SmokeSalesInvoiceVAT", 603, 7);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 603, 8, actAlert);

			
			System.out.println("************************************* checkOKButtonInRmaPopUpScreenBySelectingLessSerialNumbersToVoucherQty  *********************************");
			
			System.out.println("Alert   : "+actAlert+"  Value Expected : "+expAlert);
			
			if(actAlert.equalsIgnoreCase(expAlert))
			{
			
			System.out.println("Test Pass : checkOKButtonInRmaPopUpScreenBySelectingLessSerialNumbersToVoucherQty");
			
			getAlert().dismiss();
				
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 602, 9, resPass);
			return true;
			
			
			}
			else
			{
				System.out.println("Test Fail : checkOKButtonInRmaPopUpScreenBySelectingLessSerialNumbersToVoucherQty");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 602, 9, resFail);
				return false;
			}
		}

		
		public boolean checkRMAPopUpScreenOnClickCancelButtonInTheAlert() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardSerialNumberTxtField));

			// Actual 
			boolean actrmaoutwardSerialNumberTxtField		=rmaoutwardSerialNumberTxtField.isDisplayed();
			String actrmaoutwardQuantityTxtField			=rmaoutwardQuantityTxtField.getAttribute("value");
			String actrmaoutwardNumberofItemsLabel			=rmaoutwardNumberofItemsLabel.getText();
			boolean actrmaoutwardTableHeadingRMA			=rmaoutwardTableHeadingRMA.isDisplayed();
			boolean actrmaoutwardTableHeadingDocumentNo		=rmaoutwardTableHeadingDocumentNo.isDisplayed();
			boolean actrmaoutwardTableHeadingDocumentDate	=rmaoutwardTableHeadingDocumentDate.isDisplayed();
			boolean actrmaoutwardOkBtn						=rmaoutwardOkBtn.isDisplayed();
			boolean actrmaoutwardCancelBtn					=rmaoutwardCancelBtn.isDisplayed();
			boolean actrmaoutwardExpandBtn					=rmaoutwardExpandBtn.isDisplayed();
			
			// Expected
			boolean exprmaoutwardSerialNumberTxtField		=true;
			String exprmaoutwardQuantityTxtField			="4";
			String exprmaoutwardNumberofItemsLabel			="2";
			boolean exprmaoutwardTableHeadingRMA			=true;
			boolean exprmaoutwardTableHeadingDocumentNo		=true;
			boolean exprmaoutwardTableHeadingDocumentDate	=true;
			boolean exprmaoutwardOkBtn						=true;
			boolean exprmaoutwardCancelBtn					=true;
			boolean exprmaoutwardExpandBtn					=true;
			
			ArrayList<String>  expRMA= new ArrayList<String>(); 
	         		
			expRMA.add("HYD_OS@Rma1");
			expRMA.add("HYD_OS@Rma10");
			
			ArrayList<String> actRMA= new ArrayList<>();
			
	        for (int i = 1; i < 3; i++)
	        {
	        	WebElement a=getDriver().findElement(By.xpath("//*[@id='RMA_Table']/tbody/tr["+i+"]/td[2]"));
	        	actRMA.add(a.getText());
	        }
	        
	        System.out.println("************************************* checkRMAPopUpScreenOnClickCancelButtonInTheAlert  *********************************");
	        
	        System.out.println("actRMA  : "+actRMA);
	        System.out.println("expRMA  : "+expRMA);
	        
	        
	        String actualrma=actRMA.toString();
	        
	        String expectedrma=expRMA.toString();
	        
	        
	        excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 605, 7, expectedrma);
	        excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 605, 8, actualrma);
	        
	        System.out.println("actualrma  : "+actualrma +" Value Expected : "+expectedrma);
	        
	        
	        boolean rma=actRMA.equals(expRMA);
			
			System.out.println("rmaoutwardSerialNumberTxtField 	   :  "+actrmaoutwardSerialNumberTxtField     +" value Expected : "+exprmaoutwardSerialNumberTxtField);
			System.out.println("rmaoutwardQuantityTxtField    	   :  "+actrmaoutwardQuantityTxtField		  +" value Expected : "+exprmaoutwardQuantityTxtField);
			System.out.println("rmaoutwardNumberofItemsLabel 	   :  "+actrmaoutwardNumberofItemsLabel 	  +" value Expected : "+exprmaoutwardNumberofItemsLabel);
			System.out.println("rmaoutwardTableHeadingRMA          :  "+actrmaoutwardTableHeadingRMA		  +" value Expected : "+exprmaoutwardTableHeadingRMA);
			System.out.println("rmaoutwardTableHeadingDocumentNo   :  "+actrmaoutwardTableHeadingDocumentNo   +" value Expected : "+exprmaoutwardTableHeadingDocumentNo);
			System.out.println("rmaoutwardTableHeadingDocumentDate :  "+actrmaoutwardTableHeadingDocumentDate +" value Expected : "+exprmaoutwardTableHeadingDocumentDate);
			System.out.println("rmaoutwardOkBtn 				   :  "+actrmaoutwardOkBtn					  +" value Expected : "+exprmaoutwardOkBtn);
			System.out.println("rmaoutwardCancelBtn  			   :  "+actrmaoutwardCancelBtn				  +" value Expected : "+exprmaoutwardCancelBtn);
			System.out.println("rmaoutwardExpandBtn 			   :  "+actrmaoutwardExpandBtn				  +" value Expected : "+exprmaoutwardExpandBtn);
			System.out.println("Rma In Search Rma Table            : "+rma                                    +" Value Expected :"+"True");
		    
			System.out.println(actRMA.equals(expRMA));
		       
	       if(rma==true && actrmaoutwardSerialNumberTxtField==exprmaoutwardSerialNumberTxtField && actrmaoutwardQuantityTxtField.equalsIgnoreCase(exprmaoutwardQuantityTxtField)
					&& actrmaoutwardNumberofItemsLabel.equalsIgnoreCase(exprmaoutwardNumberofItemsLabel) && actrmaoutwardTableHeadingRMA==exprmaoutwardTableHeadingRMA
					&& actrmaoutwardTableHeadingDocumentNo==exprmaoutwardTableHeadingDocumentNo && actrmaoutwardTableHeadingDocumentDate==exprmaoutwardTableHeadingDocumentDate
					&& actrmaoutwardOkBtn==exprmaoutwardOkBtn && actrmaoutwardCancelBtn==exprmaoutwardCancelBtn && actrmaoutwardExpandBtn==exprmaoutwardExpandBtn)
	        {
	    	   excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 604, 9, resPass);
	        	return true;
	        }
	        else
	        {
	        	excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 604, 9, resFail);
	        	return false;
	        }
		}
		
		
		
		
		
		
		public boolean checkAddButtonByInputOfInvalidRMANumber() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardSerialNumberTxtField));
			rmaoutwardSerialNumberTxtField.click();
			rmaoutwardSerialNumberTxtField.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVAT", 607, 6));
			
			Thread.sleep(2000);
			
			rmaoutwardSerialNumberTxtField.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardAddBtn));
			rmaoutwardAddBtn.click();
		
			if(getIsAlertPresent()==true)
			{
				getWaitForAlert();
			
				String actAlert		=getAlert().getText();
				
				String expAlert		=excelReader.getCellData("SmokeSalesInvoiceVAT", 608, 7);
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 608, 8, actAlert);

				
			
				getAlert().accept();
				
				Thread.sleep(2000);
			
				//checking this for click on Ok button in the alert should display rma pop up screen
				
				String actrmaoutwardQuantityTxtField	=rmaoutwardQuantityTxtField.getAttribute("value");
				String actrmaoutwardNumberofItemsLabel	=rmaoutwardNumberofItemsLabel.getText();
				
				String exprmaoutwardQuantityTxtField	="4";
				String exprmaoutwardNumberofItemsLabel	="2";
				
				ArrayList<String>  expRMA= new ArrayList<String>(); 
			     
				
				expRMA.add("HYD_OS@Rma1");
				expRMA.add("HYD_OS@Rma10");
				
				ArrayList<String> actRMA= new ArrayList<>();
				
			    for (int i = 1; i < 3; i++) 
			    {
			    	WebElement a=getDriver().findElement(By.xpath("//*[@id='RMA_Table']/tbody/tr["+i+"]/td[2]"));
			    	actRMA.add(a.getText());
			    }
			    
			    System.out.println("************************************* checkAddButtonByInputOfInvalidRMANumber  *********************************");
			    
			    System.out.println("Alert  : "+actAlert +"  Value Expected : "+expAlert);
			    
			    System.out.println("actRMA  : "+actRMA);
			    System.out.println("expRMA  : "+expRMA);
			    
			    
			    
		        String actualrma=actRMA.toString();
		        
		        String expectedrma=expRMA.toString();
		        
		        
		        excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 609, 7, expectedrma);
		        excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 609, 8, actualrma);
		        
		        System.out.println("actualrma  : "+actualrma +" Value Expected : "+expectedrma);
			    
			    
			    boolean rma=actRMA.equals(expRMA);
			
			    System.out.println("rmaoutwardQuantityTxtField       : "+actrmaoutwardQuantityTxtField          +"  Value Expected : "+exprmaoutwardQuantityTxtField);
				System.out.println("rmaoutwardNumberofItemsLabel     : "+actrmaoutwardNumberofItemsLabel		+"  Value Expected : "+exprmaoutwardNumberofItemsLabel);
				
				System.out.println("Rma In Search Rma Table : "+rma);
	        
		        if(actAlert.equalsIgnoreCase(expAlert) && actRMA.equals(expRMA) && actrmaoutwardQuantityTxtField.equalsIgnoreCase(exprmaoutwardQuantityTxtField) 
		        		&& actrmaoutwardNumberofItemsLabel.equalsIgnoreCase(exprmaoutwardNumberofItemsLabel))
		        {
		        	
		        	
		        	excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 606, 9, resPass);
		        	return true;
		        }
		        else
		        {
		        	excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 606, 9, resFail);
		        	return false;
		        }
			}
			else
			{
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 606, 9, resFail);
				System.out.println("Test Fail : Alert NOT Displayed");
				return false;
			}
		
		}
		
			
		
		public boolean checkAddButtonByInputOfValidRMANumberWhichIsAlreadySelectedThroughSearch() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardSerialNumberTxtField));
			rmaoutwardSerialNumberTxtField.click();
			rmaoutwardSerialNumberTxtField.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVAT", 611, 6)	);
			
			Thread.sleep(2000);
			
			rmaoutwardSerialNumberTxtField.sendKeys(Keys.TAB);	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardAddBtn));
			rmaoutwardAddBtn.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardSerialNumberTxtField));
			rmaoutwardSerialNumberTxtField.click();
			rmaoutwardSerialNumberTxtField.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVAT", 612, 6)	);
			
			Thread.sleep(2000);
			
			rmaoutwardSerialNumberTxtField.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardAddBtn));
			rmaoutwardAddBtn.click();
			
			if(getIsAlertPresent()==true)
			{
				
				getWaitForAlert();
				
				String actAlert		=getAlert().getText();
				
				String expAlert		=excelReader.getCellData("SmokeSalesInvoiceVAT", 613, 7);
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 613, 8, actAlert);

				
				System.out.println(actAlert);
				
				System.out.println("************************************* checkAddButtonByInputOfValidRMANumberWhichIsAlreadySelectedThroughSearch  *********************************");
		        
		        System.out.println("Alert  : "+actAlert +"  Value Expected : "+expAlert);
				
				if(actAlert.equalsIgnoreCase(expAlert))
				{
				   System.out.println("Test Pass : Alert Displayed");
				   excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 610, 9, resPass);
					getAlert().accept();
					
					return true;

				}
				else
				{
					excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 610, 9, resPass);
					System.out.println("Test Fail : Alert NOT Displayed");
					return false;
				}
			}
			else
			{
				
				System.out.println("Alert Is not Present  : checkAddButtonByInputOfValidRMANumberWhichIsAlreadySelectedThroughSearch");
				return false;
			}
		}
		
		
		
		
		public boolean checkInputRMANumberForValidationOfRMAWhichIsAlreadySelect() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			Thread.sleep(2000);
			
			//checking this for click on Ok button in the alert should display rma pop up screen
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardSerialNumberTxtField));
			
			// Actual 
			boolean actrmaoutwardSerialNumberTxtField			=rmaoutwardSerialNumberTxtField.isDisplayed();
			String actrmaoutwardQuantityTxtField				=rmaoutwardQuantityTxtField.getAttribute("value");
			String actrmaoutwardNumberofItemsLabel				=rmaoutwardNumberofItemsLabel.getText();
			boolean actrmaoutwardTableHeadingRMA				=rmaoutwardTableHeadingRMA.isDisplayed();
			boolean actrmaoutwardTableHeadingDocumentNo			=rmaoutwardTableHeadingDocumentNo.isDisplayed();
			boolean actrmaoutwardTableHeadingDocumentDate		=rmaoutwardTableHeadingDocumentDate.isDisplayed();
			boolean actrmaoutwardOkBtn							=rmaoutwardOkBtn.isDisplayed();
			boolean actrmaoutwardCancelBtn						=rmaoutwardCancelBtn.isDisplayed();
			boolean actrmaoutwardExpandBtn             			=rmaoutwardExpandBtn.isDisplayed();
			
			// Expected
			boolean exprmaoutwardSerialNumberTxtField           =true;
			String exprmaoutwardQuantityTxtField                ="4";
			String exprmaoutwardNumberofItemsLabel              ="3";
			boolean exprmaoutwardTableHeadingRMA                =true;
			boolean exprmaoutwardTableHeadingDocumentNo         =true;
			boolean exprmaoutwardTableHeadingDocumentDate       =true;
			boolean exprmaoutwardOkBtn                          =true;
			boolean exprmaoutwardCancelBtn                      =true;
			boolean exprmaoutwardExpandBtn                      =true;
			
			ArrayList<String>  expRMA= new ArrayList<String>(); 
	         
			expRMA.add("HYD_OS@Rma1");
			expRMA.add("HYD_OS@Rma10");
			expRMA.add("HYD_OS@Rma3");

			ArrayList<String> actRMA= new ArrayList<>();
			
	        for (int i = 1; i < 4; i++) {
	        	WebElement a=getDriver().findElement(By.xpath("//*[@id='RMA_Table']/tbody/tr["+i+"]/td[2]"));
	        	actRMA.add(a.getText());
	        }
	        
	        System.out.println("************************************* checkInputRMANumberForValidationOfRMAWhichIsAlreadySelect  *********************************");
	        
	        System.out.println("actRMA  : "+actRMA);
	        System.out.println("expRMA  : "+expRMA);
	        
	        
	        String actualrma=actRMA.toString();
	        
	        String expectedrma=expRMA.toString();
	        
	        
	        excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 615, 7, expectedrma);
	        excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 615, 8, actualrma);
	        
	        System.out.println("actualrma  : "+actualrma +" Value Expected : "+expectedrma);
	        
	        
	        boolean rma=actRMA.equals(expRMA);

	   		System.out.println("rmaoutwardSerialNumberTxtField 	   :  "+actrmaoutwardSerialNumberTxtField     +" value Expected : "+exprmaoutwardSerialNumberTxtField);
	   		System.out.println("rmaoutwardQuantityTxtField    	   :  "+actrmaoutwardQuantityTxtField		  +" value Expected : "+exprmaoutwardQuantityTxtField);
	   		System.out.println("rmaoutwardNumberofItemsLabel 	   :  "+actrmaoutwardNumberofItemsLabel 	  +" value Expected : "+exprmaoutwardNumberofItemsLabel);
	   		System.out.println("rmaoutwardTableHeadingRMA          :  "+actrmaoutwardTableHeadingRMA		  +" value Expected : "+exprmaoutwardTableHeadingRMA);
	   		System.out.println("rmaoutwardTableHeadingDocumentNo   :  "+actrmaoutwardTableHeadingDocumentNo   +" value Expected : "+exprmaoutwardTableHeadingDocumentNo);
	   		System.out.println("rmaoutwardTableHeadingDocumentDate :  "+actrmaoutwardTableHeadingDocumentDate +" value Expected : "+exprmaoutwardTableHeadingDocumentDate);
	   		System.out.println("rmaoutwardOkBtn 				   :  "+actrmaoutwardOkBtn					  +" value Expected : "+exprmaoutwardOkBtn);
	   		System.out.println("rmaoutwardCancelBtn  			   :  "+actrmaoutwardCancelBtn				  +" value Expected : "+exprmaoutwardCancelBtn);
	   		System.out.println("rmaoutwardExpandBtn 			   :  "+actrmaoutwardExpandBtn				  +" value Expected : "+exprmaoutwardExpandBtn);
	   		System.out.println("Rma In Search Rma Table            : "+rma                                    +" Value Expected :"+"True");
	        
	        if(rma==true && actrmaoutwardSerialNumberTxtField==exprmaoutwardSerialNumberTxtField && actrmaoutwardQuantityTxtField.equalsIgnoreCase(exprmaoutwardQuantityTxtField)
					&& actrmaoutwardNumberofItemsLabel.equalsIgnoreCase(exprmaoutwardNumberofItemsLabel) && actrmaoutwardTableHeadingRMA==exprmaoutwardTableHeadingRMA
					&& actrmaoutwardTableHeadingDocumentNo==exprmaoutwardTableHeadingDocumentNo && actrmaoutwardTableHeadingDocumentDate==exprmaoutwardTableHeadingDocumentDate
					&& actrmaoutwardOkBtn==exprmaoutwardOkBtn && actrmaoutwardCancelBtn==exprmaoutwardCancelBtn && actrmaoutwardExpandBtn==exprmaoutwardExpandBtn)
	        {
	        	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardSerialNumberTxtField));
				rmaoutwardSerialNumberTxtField.click();
				rmaoutwardSerialNumberTxtField.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVAT", 616, 6));
				
				Thread.sleep(2000);
				
				rmaoutwardSerialNumberTxtField.sendKeys(Keys.TAB);
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardAddBtn));
				rmaoutwardAddBtn.click();
				
				return true;
	        }
	        else
	        {
	        	return false;
	        }
		}
		
		
		public boolean checkOkButtonByUsingSelectionOfRMAThroughSearch() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			Thread.sleep(2000);
			
			//checking this for click on Ok button in the alert should display rma pop up screen
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardSerialNumberTxtField));
			
			// Actual 
			boolean actrmaoutwardSerialNumberTxtField		=rmaoutwardSerialNumberTxtField.isDisplayed();
			String actrmaoutwardQuantityTxtField			=rmaoutwardQuantityTxtField.getAttribute("value");
			String actrmaoutwardNumberofItemsLabel			=rmaoutwardNumberofItemsLabel.getText();
			boolean actrmaoutwardTableHeadingRMA			=rmaoutwardTableHeadingRMA.isDisplayed();
			boolean actrmaoutwardTableHeadingDocumentNo		=rmaoutwardTableHeadingDocumentNo.isDisplayed();
			boolean actrmaoutwardTableHeadingDocumentDate	=rmaoutwardTableHeadingDocumentDate.isDisplayed();
			boolean actrmaoutwardOkBtn						=rmaoutwardOkBtn.isDisplayed();
			boolean actrmaoutwardCancelBtn					=rmaoutwardCancelBtn.isDisplayed();
			boolean actrmaoutwardExpandBtn					=rmaoutwardExpandBtn.isDisplayed();
			
			// Expected
			boolean exprmaoutwardSerialNumberTxtField		=true;
			String exprmaoutwardQuantityTxtField			="4";
			String exprmaoutwardNumberofItemsLabel			="4";
			boolean exprmaoutwardTableHeadingRMA			=true;
			boolean exprmaoutwardTableHeadingDocumentNo		=true;
			boolean exprmaoutwardTableHeadingDocumentDate	=true;
			boolean exprmaoutwardOkBtn						=true;
			boolean exprmaoutwardCancelBtn					=true;
			boolean exprmaoutwardExpandBtn					=true;
			
			ArrayList<String>  expRMA= new ArrayList<String>(); 
	         
			expRMA.add("HYD_OS@Rma1"); 
			expRMA.add("HYD_OS@Rma10");
			expRMA.add("HYD_OS@Rma3");
			expRMA.add("HYD_OS@Rma2");
			
			ArrayList<String> actRMA= new ArrayList<>();
			
	        for (int i = 1; i < 5; i++) 
	        {
	        	WebElement a=getDriver().findElement(By.xpath("//*[@id='RMA_Table']/tbody/tr["+i+"]/td[2]"));
	        	actRMA.add(a.getText());
	        }
	        
	        System.out.println("************************************* checkOkButtonByUsingSelectionOfRMAThroughSearch  *********************************");
	        
	        System.out.println("actRMA  : "+actRMA);
	        System.out.println("expRMA  : "+expRMA);
	        
	        
            String actualrma=actRMA.toString();
	        
	        String expectedrma=expRMA.toString();
	        
	        
	        excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 618, 7, expectedrma);
	        excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 618, 8, actualrma);
	        
	        System.out.println("actualrma  : "+actualrma +" Value Expected : "+expectedrma);
	        
	        
	        
	        boolean rma=actRMA.equals(expRMA);
	       		
	   		System.out.println("rmaoutwardSerialNumberTxtField 	   :  "+actrmaoutwardSerialNumberTxtField     +" value Expected : "+exprmaoutwardSerialNumberTxtField);
	   		System.out.println("rmaoutwardQuantityTxtField    	   :  "+actrmaoutwardQuantityTxtField		  +" value Expected : "+exprmaoutwardQuantityTxtField);
	   		System.out.println("rmaoutwardNumberofItemsLabel 	   :  "+actrmaoutwardNumberofItemsLabel 	  +" value Expected : "+exprmaoutwardNumberofItemsLabel);
	   		System.out.println("rmaoutwardTableHeadingRMA          :  "+actrmaoutwardTableHeadingRMA		  +" value Expected : "+exprmaoutwardTableHeadingRMA);
	   		System.out.println("rmaoutwardTableHeadingDocumentNo   :  "+actrmaoutwardTableHeadingDocumentNo   +" value Expected : "+exprmaoutwardTableHeadingDocumentNo);
	   		System.out.println("rmaoutwardTableHeadingDocumentDate :  "+actrmaoutwardTableHeadingDocumentDate +" value Expected : "+exprmaoutwardTableHeadingDocumentDate);
	   		System.out.println("rmaoutwardOkBtn 				   :  "+actrmaoutwardOkBtn					  +" value Expected : "+exprmaoutwardOkBtn);
	   		System.out.println("rmaoutwardCancelBtn  			   :  "+actrmaoutwardCancelBtn				  +" value Expected : "+exprmaoutwardCancelBtn);
	   		System.out.println("rmaoutwardExpandBtn 			   :  "+actrmaoutwardExpandBtn				  +" value Expected : "+exprmaoutwardExpandBtn);
	   		System.out.println("Rma In Search Rma Table            : "+rma                                    +" Value Expected :"+"True");
	        
	        if(rma==true && actrmaoutwardSerialNumberTxtField==exprmaoutwardSerialNumberTxtField && actrmaoutwardQuantityTxtField.equalsIgnoreCase(exprmaoutwardQuantityTxtField)
					&& actrmaoutwardNumberofItemsLabel.equalsIgnoreCase(exprmaoutwardNumberofItemsLabel) && actrmaoutwardTableHeadingRMA==exprmaoutwardTableHeadingRMA
					&& actrmaoutwardTableHeadingDocumentNo==exprmaoutwardTableHeadingDocumentNo && actrmaoutwardTableHeadingDocumentDate==exprmaoutwardTableHeadingDocumentDate
					&& actrmaoutwardOkBtn==exprmaoutwardOkBtn && actrmaoutwardCancelBtn==exprmaoutwardCancelBtn && actrmaoutwardExpandBtn==exprmaoutwardExpandBtn)
	        {
	        	
	        	Thread.sleep(2000);
	        	
	        	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardOkBtn));
	        	rmaoutwardOkBtn.click();
	        	
	        	excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 617, 9, resPass);
				
				return true;
	        }
	        else
	        {
	        	
	        	
	        	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardCancelBtn));
	        	rmaoutwardCancelBtn.click();
	        	
	        	Thread.sleep(2000);
	        	
	        	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_21thColumn));
	        	select3rdRow_21thColumn.click();
	        	
	        	
	        	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardExpandBtn));
	        	rmaoutwardExpandBtn.click();
	        	
	        	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMASearchTxtField));
	        	searchRMASearchTxtField.click();
	        	searchRMASearchTxtField.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVAT", 619, 6));
	        	Thread.sleep(2000);
	        	searchRMASearchTxtField.sendKeys(Keys.TAB);
	        	
	        	Thread.sleep(2000);
	        	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAHeaderChkBox));
	        	searchRMAHeaderChkBox.click();
	        	
	        	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAOkBtn));
	        	searchRMAOkBtn.click();
	        	
	        	Thread.sleep(2000);
	        	
	        	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardSerialNumberTxtField));
	        	rmaoutwardSerialNumberTxtField.click();
	        	rmaoutwardSerialNumberTxtField.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVAT", 620, 6));
	        	Thread.sleep(2000);
	        	rmaoutwardSerialNumberTxtField.sendKeys(Keys.TAB);
	        	
	        	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardAddBtn));
	        	rmaoutwardAddBtn.click();
	        	
	        	Thread.sleep(2000);
	        	
	        	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardSerialNumberTxtField));
	        	rmaoutwardSerialNumberTxtField.click();
	        	rmaoutwardSerialNumberTxtField.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVAT", 621, 6));
	        	Thread.sleep(2000);
	        	rmaoutwardSerialNumberTxtField.sendKeys(Keys.TAB);
	        	
	        	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardAddBtn));
	        	rmaoutwardAddBtn.click();
	        	
	        	Thread.sleep(2000);
	        	
	        	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardOkBtn));
	        	rmaoutwardOkBtn.click();
	        	
	        	return false;
	        }
		}
		
		
		
		
		public boolean checkRMAColumnInTheVoucherBodyonClickOnOkButton() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
			enter_RMA.sendKeys(Keys.TAB);
				
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_21thColumn));
			String actRmaColumn		=select3rdRow_21thColumn.getText();
			
			String expRmaColumn		=excelReader.getCellData("SmokeSalesInvoiceVAT", 623, 7);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 623, 8, actRmaColumn);

			
			System.out.println("************************************* checkRMAColumnInTheVoucherBodyonClickOnOkButton  *********************************");
			
			System.out.println("Rma Column in Voucher      : "+actRmaColumn+"  Value Expected : "+expRmaColumn);
			
			if(actRmaColumn.equalsIgnoreCase(expRmaColumn))
			{
				System.out.println("Test Pass: Serial no Series Displaying in RMA Column");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 622, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail: Serial no Series NOT Displaying in RMA Column");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 622, 9, resFail);
				return false;
			}
		}
		
			
		
		public boolean checkSaveSalesInvoiceWithEditingRMAInVoucherTwoThirdRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String docno=documentNumberTxt.getAttribute("value");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
	 		saveBtn.click();
	 		
	 		Thread.sleep(2000);
		
	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(breakUpByTagTab));
	 		breakUpByTagTab.click();
	 		
	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
	 		billRefNewReferenceTxt.click();
	 		
	 		String actBillNewReference,actBillAmtAdjAgainstNewRefInOtherVouchers,actBillTransactionCurrency,actBillBaseCurrency,actBillLocalCurrency,actBillBalanceNewRefAmount,actBillBreakUpByTagDepartment,actBillBreakUpByTagBaseCurrency,actBillBreakUpByTagBillCurrency,actBillBreakUpByTagLocalCurrency,actBillAmtAdjustedInTransactionCurrency,actBillBalanceAmtToBeAdjustedInTransactionCurrency,act13;
	 		String expBillNewReference,expBillAmtAdjAgainstNewRefInOtherVouchers,expBillTransactionCurrency,expBillBaseCurrency,expBillLocalCurrency,expBillBalanceNewRefAmount,expBillBreakUpByTagDepartment,expBillBreakUpByTagBaseCurrency,expBillBreakUpByTagBillCurrency,expBillBreakUpByTagLocalCurrency,expBillAmtAdjustedInTransactionCurrency,expBillBalanceAmtToBeAdjustedInTransactionCurrency;
	 		
	 		actBillNewReference									=billRefNewReferenceTxt.getAttribute("value");
	 		actBillAmtAdjAgainstNewRefInOtherVouchers			=amtAdjustedAgainstNewREfinOtherVouchers.getText();
	 		actBillTransactionCurrency							=transactionCurency.getText();
	 		actBillBaseCurrency									=baseCurrency.getText();
	 		actBillLocalCurrency								=localCurrencyDhs.getText();
	 		
	 		actBillBalanceNewRefAmount							=balanceNewReferenceAmt.getText();
	 		
	 		actBillBreakUpByTagDepartment						=breakUpByTagDepartment.getText();
	 		actBillBreakUpByTagBaseCurrency						=breakUpByTagBaseCurrency.getText();
	 		actBillBreakUpByTagBillCurrency						=breakUpByTagBillCurrency.getText();
	 		
	 		actBillBreakUpByTagLocalCurrency					=breakUpByTagBaseLocalCurrency.getText();
	 		actBillAmtAdjustedInTransactionCurrency				=billRefAdjustAmountInTransCurency.getText();
	 		actBillBalanceAmtToBeAdjustedInTransactionCurrency	=billRefBalanceAmountAdjustInTrnasCurrency.getText();
	 		
	 		
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 625, 8, actBillNewReference);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 626, 8, actBillAmtAdjAgainstNewRefInOtherVouchers);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 627, 8, actBillTransactionCurrency);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 628, 8, actBillBaseCurrency);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 629, 8, actBillLocalCurrency);
	 		
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 630, 8, actBillBalanceNewRefAmount);
	 		
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 631, 8, actBillBreakUpByTagDepartment);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 632, 8, actBillBreakUpByTagBaseCurrency);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 633, 8, actBillBreakUpByTagBillCurrency);
	 		
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 634, 8, actBillBreakUpByTagLocalCurrency);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 635, 8, actBillAmtAdjustedInTransactionCurrency);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 636, 8, actBillBalanceAmtToBeAdjustedInTransactionCurrency);
	 		
	 		
	 		
	 		
	 		
	 		expBillNewReference									=excelReader.getCellData("SmokeSalesInvoiceVAT", 625, 7);
	 		expBillAmtAdjAgainstNewRefInOtherVouchers			=excelReader.getCellData("SmokeSalesInvoiceVAT", 626, 7);
	 		expBillTransactionCurrency							=excelReader.getCellData("SmokeSalesInvoiceVAT", 627, 7);
	 		expBillBaseCurrency									=excelReader.getCellData("SmokeSalesInvoiceVAT", 628, 7);
	 		expBillLocalCurrency								=excelReader.getCellData("SmokeSalesInvoiceVAT", 629, 7);
	 		
	 		expBillBalanceNewRefAmount							=excelReader.getCellData("SmokeSalesInvoiceVAT", 630, 7);
	 		
	 		expBillBreakUpByTagDepartment						=excelReader.getCellData("SmokeSalesInvoiceVAT", 631, 7);
	 		expBillBreakUpByTagBillCurrency						=excelReader.getCellData("SmokeSalesInvoiceVAT", 632, 7);
	 		expBillBreakUpByTagBaseCurrency						=excelReader.getCellData("SmokeSalesInvoiceVAT", 633, 7);
	 		
	 		
	 		expBillBreakUpByTagLocalCurrency					=excelReader.getCellData("SmokeSalesInvoiceVAT", 634, 7);
	 		expBillAmtAdjustedInTransactionCurrency				=excelReader.getCellData("SmokeSalesInvoiceVAT", 635, 7);
	 		expBillBalanceAmtToBeAdjustedInTransactionCurrency	=excelReader.getCellData("SmokeSalesInvoiceVAT", 636, 7);
	 	

	 		System.out.println("*********************************** checkSaveSalesInvoiceWithEditingRMAInVoucherTwoSecondRow  ************************************");

	 		System.out.println("actBillNewReference								   : "+ actBillNewReference									+" Value Expected : "+expBillNewReference);
	 		System.out.println("actBillAmtAdjAgainstNewRefInOtherVouchers		   : "+actBillAmtAdjAgainstNewRefInOtherVouchers			+" Value Expected : "+expBillAmtAdjAgainstNewRefInOtherVouchers);
	 		System.out.println("actBillTransactionCurrency						   : "+actBillTransactionCurrency							+" Value Expected : "+expBillTransactionCurrency);
	 		System.out.println("actBillBaseCurrency								   : "+actBillBaseCurrency									+" Value Expected : "+ expBillBaseCurrency);
	 		System.out.println("actBillLocalCurrency							   : "+actBillLocalCurrency									+" Value Expected : "+expBillLocalCurrency);
	 		System.out.println("actBillBalanceNewRefAmount						   : "+ actBillBalanceNewRefAmount							+" Value Expected : "+expBillBalanceNewRefAmount);
	        System.out.println("actBillBreakUpByTagDepartment					   : "+actBillBreakUpByTagDepartment						+" Value Expected : "+expBillBreakUpByTagDepartment);
	 		System.out.println("actBillBreakUpByTagBaseCurrency				       : "+actBillBreakUpByTagBaseCurrency						+" Value Expected : "+expBillBreakUpByTagBaseCurrency);
	 		System.out.println("actBillBreakUpByTagBillCurrency 				   : "+actBillBreakUpByTagBillCurrency						+" Value Expected : "+expBillBreakUpByTagBillCurrency);
	 		System.out.println("actBillBreakUpByTagLocalCurrency				   : "+actBillBreakUpByTagLocalCurrency						+" Value Expected : "+expBillBreakUpByTagLocalCurrency);
	 		System.out.println("actBillAmtAdjustedInTransactionCurrency			   : "+actBillAmtAdjustedInTransactionCurrency				+" Value Expected : "+expBillAmtAdjustedInTransactionCurrency);
	 		System.out.println("actBillBalanceAmtToBeAdjustedInTransactionCurrency : "+actBillBalanceAmtToBeAdjustedInTransactionCurrency	+" Value Expected : "+expBillBalanceAmtToBeAdjustedInTransactionCurrency);
	 		
	 		   
	 	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		    billRefPickIcon.click();
		   
		    //pick button is click
		   
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(breakUpByTagTab));
	 		breakUpByTagTab.click();
	 		
	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
	 		billRefNewReferenceTxt.click();
	 		
	 		
	 		String actBillNewReferencePick,actBillAmtAdjAgainstNewRefInOtherVouchersPick,actBillTransactionCurrencyPick,actBillBaseCurrencyPick,actBillLocalCurrencyPick,actBillBalanceNewRefAmountPick,actBillBreakUpByTagDepartmentPick,actBillBreakUpByTagBaseCurrencyPick,actBillBreakUpByTagBillCurrencyPick,actBillBreakUpByTagLocalCurrencyPick,actBillAmtAdjustedInTransactionCurrencyPick,actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick;
	 		String expBillNewReferencePick,expBillAmtAdjAgainstNewRefInOtherVouchersPick,expBillTransactionCurrencyPick,expBillBaseCurrencyPick,expBillLocalCurrencyPick,expBillBalanceNewRefAmountPick,expBillBreakUpByTagDepartmentPick,expBillBreakUpByTagBaseCurrencyPick,expBillBreakUpByTagBillCurrencyPick,expBillBreakUpByTagLocalCurrencyPick,expBillAmtAdjustedInTransactionCurrencyPick,expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick;
	 		
	 		actBillNewReferencePick									=billRefNewReferenceTxt.getAttribute("value");
	 		actBillAmtAdjAgainstNewRefInOtherVouchersPick			=amtAdjustedAgainstNewREfinOtherVouchers.getText();
	 		actBillTransactionCurrencyPick							=transactionCurency.getText();
	 		actBillBaseCurrencyPick									=baseCurrency.getText();
	 		actBillLocalCurrencyPick								=localCurrencyDhs.getText();
	 		
	 		actBillBalanceNewRefAmountPick							=balanceNewReferenceAmt.getText();
	 		
	 		actBillBreakUpByTagDepartmentPick						=breakUpByTagDepartment.getText();
	 		actBillBreakUpByTagBaseCurrencyPick						=breakUpByTagBaseCurrency.getText();
	 		actBillBreakUpByTagBillCurrencyPick						=breakUpByTagBillCurrency.getText();
	 		
	 		actBillBreakUpByTagLocalCurrencyPick					=breakUpByTagBaseLocalCurrency.getText();
	 		actBillAmtAdjustedInTransactionCurrencyPick				=billRefAdjustAmountInTransCurency.getText();
	 		actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	=billRefBalanceAmountAdjustInTrnasCurrency.getText();
	 		
	 		
	 		
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 638, 8, actBillNewReferencePick);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 639, 8, actBillAmtAdjAgainstNewRefInOtherVouchersPick);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 640, 8, actBillTransactionCurrencyPick);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 641, 8, actBillBaseCurrencyPick);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 642, 8, actBillLocalCurrencyPick);
	 		
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 643, 8, actBillBalanceNewRefAmountPick);
	 		
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 644, 8, actBillBreakUpByTagDepartmentPick);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 645, 8, actBillBreakUpByTagBaseCurrencyPick);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 646, 8, actBillBreakUpByTagBillCurrencyPick);
	 		
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 647, 8, actBillBreakUpByTagLocalCurrencyPick);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 648, 8, actBillAmtAdjustedInTransactionCurrencyPick);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 649, 8, actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick);
	 		
	 		
	 		expBillNewReferencePick									=excelReader.getCellData("SmokeSalesInvoiceVAT", 638, 7);
	 		expBillAmtAdjAgainstNewRefInOtherVouchersPick			=excelReader.getCellData("SmokeSalesInvoiceVAT", 639, 7);
	 		expBillTransactionCurrencyPick							=excelReader.getCellData("SmokeSalesInvoiceVAT", 640, 7);
	 		expBillBaseCurrencyPick									=excelReader.getCellData("SmokeSalesInvoiceVAT", 641, 7);
	 		expBillLocalCurrencyPick								=excelReader.getCellData("SmokeSalesInvoiceVAT", 642, 7);
	 		
	 		expBillBalanceNewRefAmountPick							=excelReader.getCellData("SmokeSalesInvoiceVAT", 643, 7);
	 		
	 		expBillBreakUpByTagDepartmentPick						=excelReader.getCellData("SmokeSalesInvoiceVAT", 644, 7);
	 		expBillBreakUpByTagBillCurrencyPick						=excelReader.getCellData("SmokeSalesInvoiceVAT", 645, 7);
	 		expBillBreakUpByTagBaseCurrencyPick						=excelReader.getCellData("SmokeSalesInvoiceVAT", 646, 7);
	 		
	 		
	 		expBillBreakUpByTagLocalCurrencyPick					=excelReader.getCellData("SmokeSalesInvoiceVAT", 647, 7);
	 		expBillAmtAdjustedInTransactionCurrencyPick				=excelReader.getCellData("SmokeSalesInvoiceVAT", 648, 7);
	 		expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	=excelReader.getCellData("SmokeSalesInvoiceVAT", 649, 7);

	 		System.out.println("actBillNewReferencePick 								: "+actBillNewReferencePick									+ " Value Expected : "+expBillNewReferencePick);
	 		System.out.println("actBillAmtAdjAgainstNewRefInOtherVouchersPick			: " + actBillAmtAdjAgainstNewRefInOtherVouchersPick			+ "	Value Expected : "+expBillAmtAdjAgainstNewRefInOtherVouchersPick);
	 		System.out.println("actBillTransactionCurrencyPick							: "+ actBillTransactionCurrencyPick							+ " Value Expected : "+expBillTransactionCurrencyPick);
	 		System.out.println("actBillBaseCurrencyPick									: "+ actBillBaseCurrencyPick								+ " Value Expected : "+expBillBaseCurrencyPick);
	 		System.out.println("actBillLocalCurrencyPick								: "+ actBillLocalCurrencyPick								+ " Value Expected : "+expBillLocalCurrencyPick);
	 		System.out.println("actBillBalanceNewRefAmountPick							: "+ actBillBalanceNewRefAmountPick							+ " Value Expected : "+expBillBalanceNewRefAmountPick);
	        System.out.println("actBillBreakUpByTagDepartmentPick						: "+ actBillBreakUpByTagDepartmentPick						+ " Value Expected : "+expBillBreakUpByTagDepartmentPick);
	 		System.out.println("actBillBreakUpByTagBaseCurrencyPick						: "+ actBillBreakUpByTagBaseCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagBaseCurrencyPick);
	 		System.out.println("actBillBreakUpByTagBillCurrencyPick						: "+ actBillBreakUpByTagBillCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagBillCurrencyPick);
	 		System.out.println("actBillBreakUpByTagLocalCurrencyPick					: "+ actBillBreakUpByTagLocalCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagLocalCurrencyPick);
	 		System.out.println("actBillAmtAdjustedInTransactionCurrencyPick				: "+ actBillAmtAdjustedInTransactionCurrencyPick			+ " Value Expected : "+expBillAmtAdjustedInTransactionCurrencyPick);
	 		System.out.println("actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick  : "+ actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	+ " Value Expected : "+expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick);
	 			    
	 			    
	 	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		    Bill_OkBtn.click();
		   
		    boolean savingMessage=checkVoucherSavingMessage(docno);
			
		    System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
		    
		    
/*
			String actSavingVoucher=Boolean.toString(savingMessage);
			String expSavingVoucher=excelReader.getCellData("SmokeSalesInvoiceVAT", 650, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 650, 8, actSavingVoucher);
			*/
			
			if(savingMessage==true &&
					
			        actBillNewReference.equalsIgnoreCase(expBillNewReference) &&
	 				actBillAmtAdjAgainstNewRefInOtherVouchers.equalsIgnoreCase(expBillAmtAdjAgainstNewRefInOtherVouchers) &&
	 				actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 				
	 				actBillBaseCurrency.equalsIgnoreCase(actBillBaseCurrency) &&
	 				actBillLocalCurrency.equalsIgnoreCase(actBillLocalCurrency) &&
	 				actBillBalanceNewRefAmount.equalsIgnoreCase(actBillBalanceNewRefAmount) &&
	 				actBillBreakUpByTagDepartment.equalsIgnoreCase(actBillBreakUpByTagDepartment) &&
	 				actBillBreakUpByTagBaseCurrency.equalsIgnoreCase(actBillBreakUpByTagBaseCurrency) &&
	 				actBillBreakUpByTagBillCurrency.equalsIgnoreCase(actBillBreakUpByTagBillCurrency) &&
	 				actBillBreakUpByTagLocalCurrency.equalsIgnoreCase(actBillBreakUpByTagLocalCurrency) &&
	 				actBillAmtAdjustedInTransactionCurrency.equalsIgnoreCase(actBillAmtAdjustedInTransactionCurrency) &&
	 				actBillBalanceAmtToBeAdjustedInTransactionCurrency.equalsIgnoreCase(actBillBalanceAmtToBeAdjustedInTransactionCurrency) &&
			
	 				
	 				actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) &&
	 				actBillAmtAdjAgainstNewRefInOtherVouchersPick.equalsIgnoreCase(expBillAmtAdjAgainstNewRefInOtherVouchersPick) &&
	 				actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) &&
	 				actBillBaseCurrencyPick.equalsIgnoreCase(actBillBaseCurrencyPick) &&
	 				actBillLocalCurrencyPick.equalsIgnoreCase(actBillLocalCurrencyPick) &&
	 				actBillBalanceNewRefAmountPick.equalsIgnoreCase(actBillBalanceNewRefAmountPick) &&
	 				actBillBreakUpByTagDepartmentPick.equalsIgnoreCase(actBillBreakUpByTagDepartmentPick) &&
	 				actBillBreakUpByTagBaseCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagBaseCurrencyPick) &&
	 				actBillBreakUpByTagBillCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagBillCurrencyPick) &&
	 				actBillBreakUpByTagLocalCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagLocalCurrencyPick) &&
	 				actBillAmtAdjustedInTransactionCurrencyPick.equalsIgnoreCase(actBillAmtAdjustedInTransactionCurrencyPick) &&
	 				actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick.equalsIgnoreCase(actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick))
			{
			
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 624, 9, resPass);
				return true;
				
			}
			else
			{
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 624, 9, resPass);
				return false;
			}
		}
			
		
		
		
		
		@FindBy(xpath="//tbody[@id='id_header_1_table_body']/tr")
		private static List<WebElement> docnoListCount; 
		 
		 public boolean checkDisplayRMASerialNumbersRemainingInVoucherOneFourthRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			  
			 Thread.sleep(2000);
			    
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			 documentNumberTxt.click();
			 documentNumberTxt.sendKeys(Keys.BACK_SPACE);
				
				
			 int docnocount=docnoListCount.size();
			 
			 System.err.println(docnocount);
			 
			 for(int i=0 ; i < docnocount ;i++)
			 {
				 String data=docnoListCount.get(i).getAttribute("data-svoucherno");
				 
				 if(data.equalsIgnoreCase(excelReader.getCellData("SmokeSalesInvoiceVAT", 651, 6)))
				 {
					 docnoListCount.get(i).click();
					 
					 break;
				 }
			 }
					
			 documentNumberTxt.sendKeys(Keys.TAB);	
			 
			 boolean loading=checkLoadingMessage();
				
			 System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
			 
			 Thread.sleep(5000);
			 
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_1stColumn));
			 select4thRow_1stColumn.click();
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
			 pvWareHouseTxt.sendKeys(Keys.TAB);
				
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			 enter_ItemTxt.sendKeys(Keys.END);
			 enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			 enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
			 enter_ItemTxt.sendKeys(Keys.SPACE);
			 
			 int itemcount1=itemListCount.size();
			 
			 System.err.println(itemcount1);
			 
			 for(int i=0 ; i < itemcount1 ;i++)
			 {
				 String data=itemListCount.get(i).getText();
				 
				 if(data.equalsIgnoreCase(excelReader.getCellData("SmokeSalesInvoiceVAT", 652, 6)))
				 {
					 itemListCount.get(i).click();
					 
					 break;
				 }
			 }
					
			 enter_ItemTxt.sendKeys(Keys.TAB);	
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_5thColumn));
			 select4thRow_5thColumn.click();
				
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			 enter_UnitTxt.sendKeys(Keys.TAB);
			 
			 
			 Thread.sleep(2000);
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_8thColumn));
			 select4thRow_8thColumn.click();
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
			 enter_AQTxt.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVAT", 653, 6));
			 enter_AQTxt.sendKeys(Keys.TAB);
			 
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
			 enter_FQTxt.click();
			 enter_FQTxt.clear();
			 enter_FQTxt.sendKeys(Keys.TAB);
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_11thColumn));
			 select4thRow_11thColumn.click();
				
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			 enter_Quantity.sendKeys("16");
			 enter_Quantity.sendKeys(Keys.TAB);
			 
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_14thColumn));
			 select4thRow_14thColumn.click();
				
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			 enter_Rate.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVAT", 654, 6));
			 
			 enter_Rate.sendKeys(Keys.TAB);
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			 enter_Gross.sendKeys(Keys.TAB);
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_21thColumn));
			 select4thRow_21thColumn.click();
			 
			 Thread.sleep(3000);
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardSerialNumberTxtField));
			 
			// Actual 
			boolean actrmaoutwardSerialNumberTxtField		=rmaoutwardSerialNumberTxtField.isDisplayed();
			String actrmaoutwardQuantityTxtField			=rmaoutwardQuantityTxtField.getAttribute("value");
			String actrmaoutwardNumberofItemsLabel			=rmaoutwardNumberofItemsLabel.getText();
			boolean actrmaoutwardTableHeadingRMA			=rmaoutwardTableHeadingRMA.isDisplayed();
			boolean actrmaoutwardTableHeadingDocumentNo		=rmaoutwardTableHeadingDocumentNo.isDisplayed();
			boolean actrmaoutwardTableHeadingDocumentDate	=rmaoutwardTableHeadingDocumentDate.isDisplayed();
			boolean actrmaoutwardOkBtn						=rmaoutwardOkBtn.isDisplayed();
			boolean actrmaoutwardCancelBtn					=rmaoutwardCancelBtn.isDisplayed();
			boolean actrmaoutwardExpandBtn					=rmaoutwardExpandBtn.isDisplayed();
			
			// Expected
			boolean exprmaoutwardSerialNumberTxtField		=true;
			String exprmaoutwardQuantityTxtField			="16";
			String exprmaoutwardNumberofItemsLabel			="0";
			boolean exprmaoutwardTableHeadingRMA			=true;
			boolean exprmaoutwardTableHeadingDocumentNo		=true;
			boolean exprmaoutwardTableHeadingDocumentDate	=true;
			boolean exprmaoutwardOkBtn						=true;
			boolean exprmaoutwardCancelBtn					=true;
			boolean exprmaoutwardExpandBtn					=true;
			
			
			System.out.println("*********************************** checkDisplayRMASerialNumbersRemainingInVoucherOneThirdRow  ************************************");
			
			System.out.println("rmaoutwardSerialNumberTxtField 	   :  "+actrmaoutwardSerialNumberTxtField     +" value Expected : "+exprmaoutwardSerialNumberTxtField);
			System.out.println("rmaoutwardQuantityTxtField    	   :  "+actrmaoutwardQuantityTxtField		  +" value Expected : "+exprmaoutwardQuantityTxtField);
			System.out.println("rmaoutwardNumberofItemsLabel 	   :  "+actrmaoutwardNumberofItemsLabel 	  +" value Expected : "+exprmaoutwardNumberofItemsLabel);
			System.out.println("rmaoutwardTableHeadingRMA          :  "+actrmaoutwardTableHeadingRMA		  +" value Expected : "+exprmaoutwardTableHeadingRMA);
			System.out.println("rmaoutwardTableHeadingDocumentNo   :  "+actrmaoutwardTableHeadingDocumentNo   +" value Expected : "+exprmaoutwardTableHeadingDocumentNo);
			System.out.println("rmaoutwardTableHeadingDocumentDate :  "+actrmaoutwardTableHeadingDocumentDate +" value Expected : "+exprmaoutwardTableHeadingDocumentDate);
			System.out.println("rmaoutwardOkBtn 				   :  "+actrmaoutwardOkBtn					  +" value Expected : "+exprmaoutwardOkBtn);
			System.out.println("rmaoutwardCancelBtn  			   :  "+actrmaoutwardCancelBtn				  +" value Expected : "+exprmaoutwardCancelBtn);
			System.out.println("rmaoutwardExpandBtn 			   :  "+actrmaoutwardExpandBtn				  +" value Expected : "+exprmaoutwardExpandBtn);
			
			

             boolean actMethod = actrmaoutwardSerialNumberTxtField==exprmaoutwardSerialNumberTxtField 
 					&& actrmaoutwardTableHeadingRMA==exprmaoutwardTableHeadingRMA
 					&& actrmaoutwardTableHeadingDocumentNo==exprmaoutwardTableHeadingDocumentNo && actrmaoutwardTableHeadingDocumentDate==exprmaoutwardTableHeadingDocumentDate
 					&& actrmaoutwardOkBtn==exprmaoutwardOkBtn && actrmaoutwardCancelBtn==exprmaoutwardCancelBtn && actrmaoutwardExpandBtn==exprmaoutwardExpandBtn;

		    String actDisplayingResult =Boolean.toString(actMethod);
			String elementsIsDisplay = actDisplayingResult.toUpperCase();
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 655, 8, elementsIsDisplay);
			
			
			System.out.println("Display Stsus : "+actDisplayingResult  +" Value Expected : "+elementsIsDisplay);
			
			
			if(actrmaoutwardQuantityTxtField.equalsIgnoreCase(exprmaoutwardQuantityTxtField)
					&& actrmaoutwardNumberofItemsLabel.equalsIgnoreCase(exprmaoutwardNumberofItemsLabel)
					&& actDisplayingResult.equalsIgnoreCase(elementsIsDisplay))
			 {
				 System.out.println("Test Pass : data is As Expected");
				 excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 650, 9, resPass);
				 return true;
			 }
			 else
			 {
				 System.out.println("Test Fail : data is NOT As Expected");
				 excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 650, 9, resFail);
				 return false;
			 }				
		 }
		 
			 
			
		 
		 public boolean checkRmaSearchPopupOnRMAExpansionInVoucherOneFourthRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardExpandBtn));
			 rmaoutwardExpandBtn.click();
			 
			 Thread.sleep(3000);
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMASearchTxtField));
			 
			 // Actual 
			 boolean actsearchRMASearchTxtField			=searchRMASearchTxtField.isDisplayed();
			 boolean actsearchRMASearchBtn				=searchRMASearchBtn.isDisplayed();
			 String actsearchRMAQuantityTxtField		=searchRMAQuantityTxtField.getAttribute("value");
			 String actsearchRMANoOfItemsTxt			=searchRMANoOfItemsTxt.getText();
			 
			 boolean actsearchRMAHeaderChkBox			=searchRMAHeaderChkBox.isDisplayed();
			 boolean actsearchRMATableHeadingSerialNo	=searchRMATableHeadingSerialNo.isDisplayed();
			 boolean actsearchRMATableHeadingDocNo		=searchRMATableHeadingDocNo.isDisplayed();
			 boolean actsearchRMATableHeadingDate		=searchRMATableHeadingDate.isDisplayed();
			 boolean actsearchRMAOkBtn					=searchRMAOkBtn.isDisplayed();
			 boolean actsearchRMACancelBtn				=searchRMACancelBtn.isDisplayed();
			 
			 // Expected
			 boolean expsearchRMASearchTxtField			=true;
			 boolean expsearchRMASearchBtn				=true;
			 String expsearchRMAQuantityTxtField		="16";
			 String expsearchRMANoOfItemsTxt			="0";
			 
			 boolean expsearchRMAHeaderChkBox			=true;
			 boolean expsearchRMATableHeadingSerialNo	=true;
			 boolean expsearchRMATableHeadingDocNo		=true;
			 boolean expsearchRMATableHeadingDate		=true;
			 boolean expsearchRMAOkBtn					=true;
			 boolean expsearchRMACancelBtn				=true;
			 
			
			 
			 ArrayList<String> actRMA= new ArrayList<>();
			 
			 for (int i = 1; i < 17; i++)
			 {
				 WebElement a=getDriver().findElement(By.xpath("//*[@id='RMASearchTable']/tbody/tr["+i+"]/td[2]"));
				 Thread.sleep(2000);
				 actRMA.add(a.getText());
			 }	
		        
			 System.out.println("actRMA  : "+actRMA);
			 
			 String actList = actRMA.toString();
			 String expList = excelReader.getCellData("SmokeSalesInvoiceVAT", 657, 7);
		     excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 657, 8, actList);

	        
			 
			 System.out.println("actList  : "+actList);
			 System.out.println("expList  : "+expList);
			 
		
			 
			
	         System.out.println("************************************* checkRMASearchPopupOnRMAExpansionWithQtyInVoucher  *********************************");
		 	
	         System.out.println("searchRMASearchTxtField       : "+actsearchRMASearchTxtField		+"  Value Expected : "+expsearchRMASearchTxtField);
	         System.out.println("searchRMASearchBtn            : "+actsearchRMASearchBtn			+"  Value Expected : "+expsearchRMASearchBtn);
		 	 System.out.println("searchRMAQuantityTxtField     : "+actsearchRMAQuantityTxtField		+"  Value Expected : "+expsearchRMAQuantityTxtField);
		 	 System.out.println("searchRMANoOfItemsTxt         : "+actsearchRMANoOfItemsTxt			+"  Value Expected : "+expsearchRMANoOfItemsTxt);
		 	 System.out.println("searchRMAHeaderChkBox         : "+actsearchRMAHeaderChkBox			+"  Value Expected : "+expsearchRMAHeaderChkBox);
		 	 System.out.println("searchRMATableHeadingSerialNo : "+actsearchRMATableHeadingSerialNo +"  Value Expected : "+expsearchRMATableHeadingSerialNo);
		 	 System.out.println("searchRMATableHeadingDocNo    : "+actsearchRMATableHeadingDocNo	+"  Value Expected : "+expsearchRMATableHeadingDocNo);
		 	 System.out.println("searchRMATableHeadingDate     : "+actsearchRMATableHeadingDate		+"  Value Expected : "+expsearchRMATableHeadingDate);
		 	 System.out.println("searchRMAOkBtn   			   : "+actsearchRMAOkBtn				+"  Value Expected : "+expsearchRMAOkBtn);
		 	 System.out.println("searchRMACancelBtn   		   : "+actsearchRMACancelBtn			+"  Value Expected : "+expsearchRMACancelBtn);
		 	 //System.out.println("Rma In Search Rma Table       : "+rma                              +"  Value Expected : "+"True");
				 
			 if(/*rma==true */ actList.equalsIgnoreCase(expList) && actsearchRMASearchTxtField==expsearchRMASearchTxtField && actsearchRMASearchBtn==expsearchRMASearchBtn 
					 && actsearchRMAQuantityTxtField.equalsIgnoreCase(expsearchRMAQuantityTxtField) && actsearchRMANoOfItemsTxt.equalsIgnoreCase(expsearchRMANoOfItemsTxt)
					 && actsearchRMAHeaderChkBox==expsearchRMAHeaderChkBox && actsearchRMATableHeadingSerialNo==expsearchRMATableHeadingSerialNo
					 && actsearchRMATableHeadingDocNo==expsearchRMATableHeadingDocNo && actsearchRMATableHeadingDate==expsearchRMATableHeadingDate 
					 && actsearchRMAOkBtn==expsearchRMAOkBtn && actsearchRMACancelBtn==expsearchRMACancelBtn)
			 {
				 excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 656, 9, resPass);
				 return true;
			 }	
			 else	
			 {
				 excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 656, 9, resFail);
				 return false;
			 }
		
			
		 }
		 
		 
		 
		 
		 public boolean checkSelectTheRMANumbersThroughCheckBoxInVoucherOneFourthRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				 excelReader=new ExcelReader(POJOUtility.getExcelPath());
				 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAHeaderChkBox));
				searchRMAHeaderChkBox.click();
				
				 Thread.sleep(3000);
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMASearchTxtField));
				 
				 // Actual 
				 boolean actsearchRMASearchTxtField			=searchRMASearchTxtField.isDisplayed();
				 boolean actsearchRMASearchBtn				=searchRMASearchBtn.isDisplayed();
				 String actsearchRMAQuantityTxtField		=searchRMAQuantityTxtField.getAttribute("value");
				 String actsearchRMANoOfItemsTxt			=searchRMANoOfItemsTxt.getText();
				 
				 boolean actsearchRMAHeaderChkBox			=searchRMAHeaderChkBox.isDisplayed();
				 boolean actsearchRMATableHeadingSerialNo	=searchRMATableHeadingSerialNo.isDisplayed();
				 boolean actsearchRMATableHeadingDocNo		=searchRMATableHeadingDocNo.isDisplayed();
				 boolean actsearchRMATableHeadingDate		=searchRMATableHeadingDate.isDisplayed();
				 boolean actsearchRMAOkBtn					=searchRMAOkBtn.isDisplayed();
				 boolean actsearchRMACancelBtn				=searchRMACancelBtn.isDisplayed();
				 
				 // Expected
				 boolean expsearchRMASearchTxtField			=true;
				 boolean expsearchRMASearchBtn				=true;
				 String expsearchRMAQuantityTxtField		="16";
				 String expsearchRMANoOfItemsTxt			="16";
				 
				 boolean expsearchRMAHeaderChkBox			=true;
				 boolean expsearchRMATableHeadingSerialNo	=true;
				 boolean expsearchRMATableHeadingDocNo		=true;
				 boolean expsearchRMATableHeadingDate		=true;
				 boolean expsearchRMAOkBtn					=true;
				 boolean expsearchRMACancelBtn				=true;
				 
				 System.out.println("************************************* checkSelectTheRMANumbersThroughCheckBoxInVoucherOneThirdRow  *********************************");
				 
				 System.out.println("searchRMASearchTxtField       : "+actsearchRMASearchTxtField		+"  Value Expected : "+expsearchRMASearchTxtField);
				 System.out.println("searchRMASearchBtn            : "+actsearchRMASearchBtn			+"  Value Expected : "+expsearchRMASearchBtn);
				 System.out.println("searchRMAQuantityTxtField     : "+actsearchRMAQuantityTxtField		+"  Value Expected : "+expsearchRMAQuantityTxtField);
				 System.out.println("searchRMANoOfItemsTxt         : "+actsearchRMANoOfItemsTxt			+"  Value Expected : "+expsearchRMANoOfItemsTxt);
				 System.out.println("searchRMAHeaderChkBox         : "+actsearchRMAHeaderChkBox			+"  Value Expected : "+expsearchRMAHeaderChkBox);
				 System.out.println("searchRMATableHeadingSerialNo : "+actsearchRMATableHeadingSerialNo +"  Value Expected : "+expsearchRMATableHeadingSerialNo);
				 System.out.println("searchRMATableHeadingDocNo    : "+actsearchRMATableHeadingDocNo	+"  Value Expected : "+expsearchRMATableHeadingDocNo);
				 System.out.println("searchRMATableHeadingDate     : "+actsearchRMATableHeadingDate		+"  Value Expected : "+expsearchRMATableHeadingDate);
				 System.out.println("searchRMAOkBtn   			   : "+actsearchRMAOkBtn				+"  Value Expected : "+expsearchRMAOkBtn);
				 System.out.println("searchRMACancelBtn   		   : "+actsearchRMACancelBtn			+"  Value Expected : "+expsearchRMACancelBtn);
				 
				 
				 
				 
				 boolean actMethod = actsearchRMASearchTxtField==expsearchRMASearchTxtField && actsearchRMASearchBtn==expsearchRMASearchBtn 
						 && actsearchRMAHeaderChkBox==expsearchRMAHeaderChkBox && actsearchRMATableHeadingSerialNo==expsearchRMATableHeadingSerialNo
						 && actsearchRMATableHeadingDocNo==expsearchRMATableHeadingDocNo && actsearchRMATableHeadingDate==expsearchRMATableHeadingDate 
						 && actsearchRMAOkBtn==expsearchRMAOkBtn && actsearchRMACancelBtn==expsearchRMACancelBtn;

				    String actDisplayingResult =Boolean.toString(actMethod);
					String elementsIsDisplay = actDisplayingResult.toUpperCase();
					
					excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 659, 8, elementsIsDisplay);
					
					
					System.out.println("Display Stsus : "+actDisplayingResult  +" Value Expected : "+elementsIsDisplay);
				 
				 
				 if( actsearchRMAQuantityTxtField.equalsIgnoreCase(expsearchRMAQuantityTxtField) && actsearchRMANoOfItemsTxt.equalsIgnoreCase(expsearchRMANoOfItemsTxt)
						  && actDisplayingResult.equalsIgnoreCase(elementsIsDisplay))
				{
					System.out.println("Test Pass : Qty And no Of items Are As Expected");
					excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 658, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Qty And no Of items Are NOT As Expected");
					excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 658, 9, resFail);
					return false;
				}
			}
			
			public boolean checkOkButtonInRMAPopupScreenInVoucherOneFourthRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				 excelReader=new ExcelReader(POJOUtility.getExcelPath());
				 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAOkBtn));
				searchRMAOkBtn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardSerialNumberTxtField));
				
				// Actual 
				boolean actrmaoutwardSerialNumberTxtField		=rmaoutwardSerialNumberTxtField.isDisplayed();
				String actrmaoutwardQuantityTxtField			=rmaoutwardQuantityTxtField.getAttribute("value");
				String actrmaoutwardNumberofItemsLabel			=rmaoutwardNumberofItemsLabel.getText();
				boolean actrmaoutwardTableHeadingRMA			=rmaoutwardTableHeadingRMA.isDisplayed();
				boolean actrmaoutwardTableHeadingDocumentNo		=rmaoutwardTableHeadingDocumentNo.isDisplayed();
				boolean actrmaoutwardTableHeadingDocumentDate	=rmaoutwardTableHeadingDocumentDate.isDisplayed();
				boolean actrmaoutwardOkBtn						=rmaoutwardOkBtn.isDisplayed();
				boolean actrmaoutwardCancelBtn					=rmaoutwardCancelBtn.isDisplayed();
				boolean actrmaoutwardExpandBtn					=rmaoutwardExpandBtn.isDisplayed();
				
				// Expected
				boolean exprmaoutwardSerialNumberTxtField		=true;
				String exprmaoutwardQuantityTxtField			="16";
				String exprmaoutwardNumberofItemsLabel			="16";
				boolean exprmaoutwardTableHeadingRMA			=true;
				boolean exprmaoutwardTableHeadingDocumentNo		=true;
				boolean exprmaoutwardTableHeadingDocumentDate	=true;
				boolean exprmaoutwardOkBtn						=true;
				boolean exprmaoutwardCancelBtn					=true;
				boolean exprmaoutwardExpandBtn					=true;
				
				
				System.out.println("*********************************** checkOkButtonInRMAPopupScreenInVoucherOneThirdRow  ************************************");
				
				System.out.println("rmaoutwardSerialNumberTxtField 	   :  "+actrmaoutwardSerialNumberTxtField     +" value Expected : "+exprmaoutwardSerialNumberTxtField);
				System.out.println("rmaoutwardQuantityTxtField    	   :  "+actrmaoutwardQuantityTxtField		  +" value Expected : "+exprmaoutwardQuantityTxtField);
				System.out.println("rmaoutwardNumberofItemsLabel 	   :  "+actrmaoutwardNumberofItemsLabel 	  +" value Expected : "+exprmaoutwardNumberofItemsLabel);
				System.out.println("rmaoutwardTableHeadingRMA          :  "+actrmaoutwardTableHeadingRMA		  +" value Expected : "+exprmaoutwardTableHeadingRMA);
				System.out.println("rmaoutwardTableHeadingDocumentNo   :  "+actrmaoutwardTableHeadingDocumentNo   +" value Expected : "+exprmaoutwardTableHeadingDocumentNo);
				System.out.println("rmaoutwardTableHeadingDocumentDate :  "+actrmaoutwardTableHeadingDocumentDate +" value Expected : "+exprmaoutwardTableHeadingDocumentDate);
				System.out.println("rmaoutwardOkBtn 				   :  "+actrmaoutwardOkBtn					  +" value Expected : "+exprmaoutwardOkBtn);
				System.out.println("rmaoutwardCancelBtn  			   :  "+actrmaoutwardCancelBtn				  +" value Expected : "+exprmaoutwardCancelBtn);
				System.out.println("rmaoutwardExpandBtn 			   :  "+actrmaoutwardExpandBtn				  +" value Expected : "+exprmaoutwardExpandBtn);
				
				
				 
				 boolean actMethod =actrmaoutwardSerialNumberTxtField==exprmaoutwardSerialNumberTxtField && 
							actrmaoutwardTableHeadingRMA==exprmaoutwardTableHeadingRMA
							&& actrmaoutwardTableHeadingDocumentNo==exprmaoutwardTableHeadingDocumentNo && actrmaoutwardTableHeadingDocumentDate==exprmaoutwardTableHeadingDocumentDate
							&& actrmaoutwardOkBtn==exprmaoutwardOkBtn && actrmaoutwardCancelBtn==exprmaoutwardCancelBtn && actrmaoutwardExpandBtn==exprmaoutwardExpandBtn;

				    String actDisplayingResult =Boolean.toString(actMethod);
					String elementsIsDisplay = actDisplayingResult.toUpperCase();
					
					excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 661, 8, elementsIsDisplay);
					
					
					System.out.println("Display Stsus : "+actDisplayingResult  +" Value Expected : "+elementsIsDisplay);
				 
				
				if( actrmaoutwardQuantityTxtField.equalsIgnoreCase(exprmaoutwardQuantityTxtField)
						&& actrmaoutwardNumberofItemsLabel.equalsIgnoreCase(exprmaoutwardNumberofItemsLabel)  && 
						actDisplayingResult.equalsIgnoreCase(elementsIsDisplay))
				{
					System.out.println("Test Pass : Qty And no Of items Are As Expected");
					excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 660, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Qty And no Of items Are NOT As Expected");
					excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 660, 9, resFail);
					return false;
				}
			}
			
			public boolean checkRMAColumnRMANumbersInVoucherOneFourthRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				 excelReader=new ExcelReader(POJOUtility.getExcelPath());
				 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardOkBtn));
				 rmaoutwardOkBtn.click();
				 
				 Thread.sleep(3000);
				 
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
				 enter_RMA.sendKeys(Keys.TAB);
				 
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_21thColumn));
				 String actRmaColumn	=select4thRow_21thColumn.getText();
				 
				 String expRmaColumn	=excelReader.getCellData("SmokeSalesInvoiceVAT", 663, 7);
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 663, 8, actRmaColumn);
				 
				 System.out.println("*********************************** checkRMAColumnRMANumbersInVoucherOneThirdRow  ************************************");
					
				 System.out.println("RmaColumn 	   :  "+actRmaColumn+" value Expected : "+expRmaColumn);
				 
				 if(actRmaColumn.equalsIgnoreCase(expRmaColumn))
				 {
					 System.out.println("Test Pass: Serial no Series Displaying in RMA Column");
					 excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 662, 9, resPass);
					 return true;
				 }
				 else
				 {
					 System.out.println("Test Fail: Serial no Series NOT Displaying in RMA Column");
					 excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 662, 9, resFail);
					 return false;
				 }
			}

				
		 

			
			public boolean checkDisplayRMASerialNumbersRemainingInVoucherOneFifthRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				  
				   
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_1stColumn));
				select5thRow_1stColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
				pvWareHouseTxt.sendKeys(Keys.TAB);
					
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
				enter_ItemTxt.sendKeys(Keys.END);
				enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
				enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
				enter_ItemTxt.sendKeys(Keys.SPACE);
				
				int itemcount1=itemListCount.size();
				
				System.err.println(itemcount1);
					
				for(int i=0 ; i < itemcount1 ;i++)
				{
					String data=itemListCount.get(i).getText();
					
					if(data.equalsIgnoreCase(excelReader.getCellData("SmokeSalesInvoiceVAT", 665, 6)))
					{
						itemListCount.get(i).click();
						
						break;
					}
				}
					
				enter_ItemTxt.sendKeys(Keys.TAB);	
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_5thColumn));
				select5thRow_5thColumn.click();
					
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
				enter_UnitTxt.sendKeys(Keys.TAB);
				
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_8thColumn));
				select5thRow_8thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
				enter_AQTxt.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVAT", 666, 6));
				enter_AQTxt.sendKeys(Keys.TAB);
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
				enter_FQTxt.sendKeys(Keys.TAB);	
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_11thColumn));
				select5thRow_11thColumn.click();
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
				enter_Quantity.sendKeys("1");
				enter_Quantity.sendKeys(Keys.TAB);
					
				
				/*String expErrorMessage	=excelReader.getCellData("SmokeSalesInvoiceVAT", 667, 7);
				
				String validationMessage=checkValidationMessage(expErrorMessage);
					
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 667, 8, validationMessage);*/
				
								
				Thread.sleep(9000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_14thColumn));
				select5thRow_14thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
				enter_Rate.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
				enter_Gross.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_21thColumn));
				select5thRow_21thColumn.click();
				
				Thread.sleep(3000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardSerialNumberTxtField));
				// Actual 
				boolean actrmaoutwardSerialNumberTxtField=rmaoutwardSerialNumberTxtField.isDisplayed();
				String actrmaoutwardQuantityTxtField=rmaoutwardQuantityTxtField.getAttribute("value");
				String actrmaoutwardNumberofItemsLabel=rmaoutwardNumberofItemsLabel.getText();
				boolean actrmaoutwardTableHeadingRMA=rmaoutwardTableHeadingRMA.isDisplayed();
				boolean actrmaoutwardTableHeadingDocumentNo=rmaoutwardTableHeadingDocumentNo.isDisplayed();
				boolean actrmaoutwardTableHeadingDocumentDate=rmaoutwardTableHeadingDocumentDate.isDisplayed();
				boolean actrmaoutwardOkBtn=rmaoutwardOkBtn.isDisplayed();
				boolean actrmaoutwardCancelBtn=rmaoutwardCancelBtn.isDisplayed();
				boolean actrmaoutwardExpandBtn=rmaoutwardExpandBtn.isDisplayed();
				
				// Expected
				boolean exprmaoutwardSerialNumberTxtField=true;
				String exprmaoutwardQuantityTxtField="1";
				String exprmaoutwardNumberofItemsLabel="0";
				boolean exprmaoutwardTableHeadingRMA=true;
				boolean exprmaoutwardTableHeadingDocumentNo=true;
				boolean exprmaoutwardTableHeadingDocumentDate=true;
				boolean exprmaoutwardOkBtn=true;
				boolean exprmaoutwardCancelBtn=true;
				boolean exprmaoutwardExpandBtn=true;
				
				
				System.out.println("*********************************** checkDisplayRMASerialNumbersRemainingInVoucherOneFifthRow  ************************************");
				
				//System.out.println("Error Message                      : "+validationMessage                        +" Value Expected : "+ expErrorMessage);
				System.out.println("rmaoutwardSerialNumberTxtField 	   :  "+actrmaoutwardSerialNumberTxtField     +" value Expected : "+exprmaoutwardSerialNumberTxtField);
				System.out.println("rmaoutwardQuantityTxtField    	   :  "+actrmaoutwardQuantityTxtField		  +" value Expected : "+exprmaoutwardQuantityTxtField);
				System.out.println("rmaoutwardNumberofItemsLabel 	   :  "+actrmaoutwardNumberofItemsLabel 	  +" value Expected : "+exprmaoutwardNumberofItemsLabel);
				System.out.println("rmaoutwardTableHeadingRMA          :  "+actrmaoutwardTableHeadingRMA		  +" value Expected : "+exprmaoutwardTableHeadingRMA);
				System.out.println("rmaoutwardTableHeadingDocumentNo   :  "+actrmaoutwardTableHeadingDocumentNo   +" value Expected : "+exprmaoutwardTableHeadingDocumentNo);
				System.out.println("rmaoutwardTableHeadingDocumentDate :  "+actrmaoutwardTableHeadingDocumentDate +" value Expected : "+exprmaoutwardTableHeadingDocumentDate);
				System.out.println("rmaoutwardOkBtn 				   :  "+actrmaoutwardOkBtn					  +" value Expected : "+exprmaoutwardOkBtn);
				System.out.println("rmaoutwardCancelBtn  			   :  "+actrmaoutwardCancelBtn				  +" value Expected : "+exprmaoutwardCancelBtn);
				System.out.println("rmaoutwardExpandBtn 			   :  "+actrmaoutwardExpandBtn				  +" value Expected : "+exprmaoutwardExpandBtn);
				
				
				if(/*validationMessage.equalsIgnoreCase(expErrorMessage) &&*/ actrmaoutwardSerialNumberTxtField==exprmaoutwardSerialNumberTxtField && actrmaoutwardQuantityTxtField.equalsIgnoreCase(exprmaoutwardQuantityTxtField)
						&& actrmaoutwardNumberofItemsLabel.equalsIgnoreCase(exprmaoutwardNumberofItemsLabel) && actrmaoutwardTableHeadingRMA==exprmaoutwardTableHeadingRMA
						&& actrmaoutwardTableHeadingDocumentNo==exprmaoutwardTableHeadingDocumentNo && actrmaoutwardTableHeadingDocumentDate==exprmaoutwardTableHeadingDocumentDate
						&& actrmaoutwardOkBtn==exprmaoutwardOkBtn && actrmaoutwardCancelBtn==exprmaoutwardCancelBtn && actrmaoutwardExpandBtn==exprmaoutwardExpandBtn)
				{	
					System.out.println("Test Pass : data is As Expected");
					excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 664, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : data is NOT As Expected");
					excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 664, 9, resFail);
					return false;
				}			
			}


		      

			
			      
			
			public boolean checkRMASearchInAnEmptyRowsExitsVoucherOneFifthRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardExpandBtn));
				 rmaoutwardExpandBtn.click();
				
				 Thread.sleep(3000);
				 
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMASearchTxtField));
				
				 // Actual 
				 boolean actsearchRMASearchTxtField=searchRMASearchTxtField.isDisplayed();
				 boolean actsearchRMASearchBtn=searchRMASearchBtn.isDisplayed();
				 String actsearchRMAQuantityTxtField=searchRMAQuantityTxtField.getAttribute("value");
				 String actsearchRMANoOfItemsTxt=searchRMANoOfItemsTxt.getText();
				 boolean actsearchRMAHeaderChkBox=searchRMAHeaderChkBox.isDisplayed();
				 boolean actsearchRMATableHeadingSerialNo=searchRMATableHeadingSerialNo.isDisplayed();
				 boolean actsearchRMATableHeadingDocNo=searchRMATableHeadingDocNo.isDisplayed();
				 boolean actsearchRMATableHeadingDate=searchRMATableHeadingDate.isDisplayed();
				 boolean actsearchRMAOkBtn=searchRMAOkBtn.isDisplayed();
				 boolean actsearchRMACancelBtn=searchRMACancelBtn.isDisplayed();
				 
				 // Expected
				 boolean expsearchRMASearchTxtField=true;
				 boolean expsearchRMASearchBtn=true;
				 String expsearchRMAQuantityTxtField="1";
				 String expsearchRMANoOfItemsTxt="0";
				 boolean expsearchRMAHeaderChkBox=true;
				 boolean expsearchRMATableHeadingSerialNo=true;
				 boolean expsearchRMATableHeadingDocNo=true;
				 boolean expsearchRMATableHeadingDate=true;
				 boolean expsearchRMAOkBtn=true;
				 boolean expsearchRMACancelBtn=true;
				 
				 
				 String actrmaSearchTableBodyIfBlankRows=rmaSearchTableBodyIfBlankRows.getAttribute("data-prevrma");
				 
				 String exprmaSearchTableBodyIfBlankRows=excelReader.getCellData("SmokeSalesInvoiceVAT", 669, 7);
					excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 669, 8, actrmaSearchTableBodyIfBlankRows);

				
				 
				 System.out.println("************************************* checkRMASearchInAnEmptyRowsExitsVoucherOneFifthRow  *********************************");
				 
				 System.out.println("searchRMASearchTxtField       : "+actsearchRMASearchTxtField		+"  Value Expected : "+expsearchRMASearchTxtField);
				 System.out.println("searchRMASearchBtn            : "+actsearchRMASearchBtn			+"  Value Expected : "+expsearchRMASearchBtn);
				 System.out.println("searchRMAQuantityTxtField     : "+actsearchRMAQuantityTxtField		+"  Value Expected : "+expsearchRMAQuantityTxtField);
				 System.out.println("searchRMANoOfItemsTxt         : "+actsearchRMANoOfItemsTxt			+"  Value Expected : "+expsearchRMANoOfItemsTxt);
				 System.out.println("searchRMAHeaderChkBox         : "+actsearchRMAHeaderChkBox			+"  Value Expected : "+expsearchRMAHeaderChkBox);
				 System.out.println("searchRMATableHeadingSerialNo : "+actsearchRMATableHeadingSerialNo +"  Value Expected : "+expsearchRMATableHeadingSerialNo);
				 System.out.println("searchRMATableHeadingDocNo    : "+actsearchRMATableHeadingDocNo	+"  Value Expected : "+expsearchRMATableHeadingDocNo);
				 System.out.println("searchRMATableHeadingDate     : "+actsearchRMATableHeadingDate		+"  Value Expected : "+expsearchRMATableHeadingDate);
				 System.out.println("searchRMAOkBtn   			   : "+actsearchRMAOkBtn				+"  Value Expected : "+expsearchRMAOkBtn);
				 System.out.println("searchRMACancelBtn   		   : "+actsearchRMACancelBtn			+"  Value Expected : "+expsearchRMACancelBtn);
				 System.out.println("rmaSearchTableBodyIfBlankRows : "+actrmaSearchTableBodyIfBlankRows	+"  Value Expected : "+exprmaSearchTableBodyIfBlankRows);
				 
				 
				 if(actrmaSearchTableBodyIfBlankRows.equalsIgnoreCase(exprmaSearchTableBodyIfBlankRows) 
						 
						 && actsearchRMASearchTxtField==expsearchRMASearchTxtField && actsearchRMASearchBtn==expsearchRMASearchBtn 
						 && actsearchRMAQuantityTxtField.equalsIgnoreCase(expsearchRMAQuantityTxtField) && actsearchRMANoOfItemsTxt.equalsIgnoreCase(expsearchRMANoOfItemsTxt)
						 && actsearchRMAHeaderChkBox==expsearchRMAHeaderChkBox && actsearchRMATableHeadingSerialNo==expsearchRMATableHeadingSerialNo
						 && actsearchRMATableHeadingDocNo==expsearchRMATableHeadingDocNo && actsearchRMATableHeadingDate==expsearchRMATableHeadingDate 
						 && actsearchRMAOkBtn==expsearchRMAOkBtn && actsearchRMACancelBtn==expsearchRMACancelBtn)
				{
					
					System.out.println("Test Fail : Search Rma Pop Up NOT Displayed");
					excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 668, 9, resPass);
					return true;
			       
			        
				}
				else
				{
					System.out.println("Test Fail : Search Rma Pop Up NOT Displayed");
					excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 668, 9, resFail);
					return false;
				}
					
			}
			
			
		
		public boolean checkDeleteRowAndRMASearchByEditingToLessQtyInVoucherOneThirdRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMACancelBtn));
			searchRMACancelBtn.click();
			 
			Thread.sleep(3000);
			 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardCancelBtn));
			rmaoutwardCancelBtn.click();
		
			Thread.sleep(2000);
			
			fourthRowIndex.click();
			
			Thread.sleep(2000);
			
			deleteRowBtn.click();
			
			Thread.sleep(2000);
			
			fourthRowIndex.click();
			
			Thread.sleep(2000);
			
			deleteRowBtn.click();
			
			
			
			 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_8thColumn));
			select3rdRow_8thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
			enter_AQTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
			enter_FQTxt.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVAT", 671, 6));
			enter_FQTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_11thColumn));
			select3rdRow_11thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("3");
			enter_Quantity.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_14thColumn));
			select3rdRow_14thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVAT", 672, 6));
			enter_Rate.sendKeys(Keys.TAB);
			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
			enter_Discount.sendKeys(Keys.TAB);*/
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_21thColumn));
			select3rdRow_21thColumn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
			enter_RMA.sendKeys(Keys.SPACE);
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardSerialNumberTxtField));
			// Actual 
			boolean actrmaoutwardSerialNumberTxtField=rmaoutwardSerialNumberTxtField.isDisplayed();
			String actrmaoutwardQuantityTxtField=rmaoutwardQuantityTxtField.getAttribute("value");
			String actrmaoutwardNumberofItemsLabel=rmaoutwardNumberofItemsLabel.getText();
			boolean actrmaoutwardTableHeadingRMA=rmaoutwardTableHeadingRMA.isDisplayed();
			boolean actrmaoutwardTableHeadingDocumentNo=rmaoutwardTableHeadingDocumentNo.isDisplayed();
			boolean actrmaoutwardTableHeadingDocumentDate=rmaoutwardTableHeadingDocumentDate.isDisplayed();
			boolean actrmaoutwardOkBtn=rmaoutwardOkBtn.isDisplayed();
			boolean actrmaoutwardCancelBtn=rmaoutwardCancelBtn.isDisplayed();
			boolean actrmaoutwardExpandBtn=rmaoutwardExpandBtn.isDisplayed();
			
			// Expected
			boolean exprmaoutwardSerialNumberTxtField=true;
			String exprmaoutwardQuantityTxtField="3";
			String exprmaoutwardNumberofItemsLabel="20";
			boolean exprmaoutwardTableHeadingRMA=true;
			boolean exprmaoutwardTableHeadingDocumentNo=true;
			boolean exprmaoutwardTableHeadingDocumentDate=true;
			boolean exprmaoutwardOkBtn=true;
			boolean exprmaoutwardCancelBtn=true;
			boolean exprmaoutwardExpandBtn=true;
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardExpandBtn));
			rmaoutwardExpandBtn.click();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMASearchTxtField));
			// Actual 
			boolean actsearchRMASearchTxtField=searchRMASearchTxtField.isDisplayed();
			boolean actsearchRMASearchBtn=searchRMASearchBtn.isDisplayed();
			String actsearchRMAQuantityTxtField=searchRMAQuantityTxtField.getAttribute("value");
			String actsearchRMANoOfItemsTxt=searchRMANoOfItemsTxt.getText();
			boolean actsearchRMAHeaderChkBox=searchRMAHeaderChkBox.isDisplayed();
			boolean actsearchRMATableHeadingSerialNo=searchRMATableHeadingSerialNo.isDisplayed();
			boolean actsearchRMATableHeadingDocNo=searchRMATableHeadingDocNo.isDisplayed();
			boolean actsearchRMATableHeadingDate=searchRMATableHeadingDate.isDisplayed();
			boolean actsearchRMAOkBtn=searchRMAOkBtn.isDisplayed();
			boolean actsearchRMACancelBtn=searchRMACancelBtn.isDisplayed();
			
			// Expected
			boolean expsearchRMASearchTxtField=true;
			boolean expsearchRMASearchBtn=true;
			String expsearchRMAQuantityTxtField="3";
			String expsearchRMANoOfItemsTxt="3";
			boolean expsearchRMAHeaderChkBox=true;
			boolean expsearchRMATableHeadingSerialNo=true;
			boolean expsearchRMATableHeadingDocNo=true;
			boolean expsearchRMATableHeadingDate=true;
			boolean expsearchRMAOkBtn=true;
			boolean expsearchRMACancelBtn=true;
			
			
			ArrayList<String> actRMA= new ArrayList<>();
			
			for (int i = 1; i < 21; i++)
			{
				WebElement a=getDriver().findElement(By.xpath("//*[@id='RMASearchTable']/tbody/tr["+i+"]/td[2]"));
				Thread.sleep(2000);
				actRMA.add(a.getText());
			}
					        
			
			String actList=actRMA.toString();
			String expList=excelReader.getCellData("SmokeSalesInvoiceVAT", 673, 7);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 673, 8, actList);

			
			System.out.println("actList  : "+actList);
			System.out.println("expList  : "+expList);
			
			// Actual
			boolean actsearchRMA1ChkBox=searchRMA1ChkBox.isSelected();
			boolean actsearchRMA2ChkBox=searchRMA2ChkBox.isSelected();
			boolean actsearchRMA3ChkBox=searchRMA3ChkBox.isSelected();
			boolean actsearchRMA4ChkBox=searchRMA4ChkBox.isSelected();
			boolean actsearchRMA6ChkBox=searchRMA6ChkBox.isSelected();
			
			// Expected
			boolean expsearchRMA1ChkBox=true;
			boolean expsearchRMA2ChkBox=true;
			boolean expsearchRMA3ChkBox=true;
			boolean expsearchRMA4ChkBox=false;
			boolean expsearchRMA6ChkBox=false;
			
			
			
			System.out.println("*********************************** checkUpdateRMANumbersByDecreaseQtyInVoucherOne  ************************************");
			
			System.out.println("rmaoutwardSerialNumberTxtField 	   :  "+actrmaoutwardSerialNumberTxtField     +" value Expected : "+exprmaoutwardSerialNumberTxtField);
			System.out.println("rmaoutwardQuantityTxtField    	   :  "+actrmaoutwardQuantityTxtField		  +" value Expected : "+exprmaoutwardQuantityTxtField);
			System.out.println("rmaoutwardNumberofItemsLabel 	   :  "+actrmaoutwardNumberofItemsLabel 	  +" value Expected : "+exprmaoutwardNumberofItemsLabel);
			System.out.println("rmaoutwardTableHeadingRMA          :  "+actrmaoutwardTableHeadingRMA		  +" value Expected : "+exprmaoutwardTableHeadingRMA);
			System.out.println("rmaoutwardTableHeadingDocumentNo   :  "+actrmaoutwardTableHeadingDocumentNo   +" value Expected : "+exprmaoutwardTableHeadingDocumentNo);
			System.out.println("rmaoutwardTableHeadingDocumentDate :  "+actrmaoutwardTableHeadingDocumentDate +" value Expected : "+exprmaoutwardTableHeadingDocumentDate);
			System.out.println("rmaoutwardOkBtn 				   :  "+actrmaoutwardOkBtn					  +" value Expected : "+exprmaoutwardOkBtn);
			System.out.println("rmaoutwardCancelBtn  			   :  "+actrmaoutwardCancelBtn				  +" value Expected : "+exprmaoutwardCancelBtn);
			System.out.println("rmaoutwardExpandBtn 			   :  "+actrmaoutwardExpandBtn				  +" value Expected : "+exprmaoutwardExpandBtn);
			
			System.out.println("searchRMASearchTxtField           : "+actsearchRMASearchTxtField			  +"  Value Expected : "+expsearchRMASearchTxtField);
			System.out.println("searchRMASearchBtn          	  : "+actsearchRMASearchBtn					  +"  Value Expected : "+expsearchRMASearchBtn);
			System.out.println("searchRMAQuantityTxtField    	  : "+actsearchRMAQuantityTxtField			  +"  Value Expected : "+expsearchRMAQuantityTxtField);
			System.out.println("searchRMANoOfItemsTxt        	  : "+actsearchRMANoOfItemsTxt			      +"  Value Expected : "+expsearchRMANoOfItemsTxt);
			System.out.println("searchRMAHeaderChkBox         	  : "+actsearchRMAHeaderChkBox		      	  +"  Value Expected : "+expsearchRMAHeaderChkBox);
			System.out.println("searchRMATableHeadingSerialNo 	  : "+actsearchRMATableHeadingSerialNo        +"  Value Expected : "+expsearchRMATableHeadingSerialNo);
			System.out.println("searchRMATableHeadingDocNo        : "+actsearchRMATableHeadingDocNo	          +"  Value Expected : "+expsearchRMATableHeadingDocNo);
			System.out.println("searchRMATableHeadingDate         : "+actsearchRMATableHeadingDate	  	      +"  Value Expected : "+expsearchRMATableHeadingDate);
			System.out.println("searchRMAOkBtn   			      : "+actsearchRMAOkBtn				          +"  Value Expected : "+expsearchRMAOkBtn);
			System.out.println("searchRMACancelBtn   		      : "+actsearchRMACancelBtn			          +"  Value Expected : "+expsearchRMACancelBtn);
			
			
			System.out.println("searchRMA1ChkBox                  : "+actsearchRMA1ChkBox                     +"  Value Expected : "+expsearchRMA1ChkBox);
			System.out.println("searchRMA2ChkBox                  : "+actsearchRMA2ChkBox                     +"  Value Expected : "+expsearchRMA2ChkBox);
			System.out.println("searchRMA3ChkBox                  : "+actsearchRMA3ChkBox                     +"  Value Expected : "+expsearchRMA3ChkBox);
			System.out.println("searchRMA4ChkBox                  : "+actsearchRMA4ChkBox                     +"  Value Expected : "+expsearchRMA4ChkBox);
			System.out.println("searchRMA6ChkBox                  : "+actsearchRMA6ChkBox                     +"  Value Expected : "+expsearchRMA6ChkBox);
			
			
			
			
			if(/*rma==true && actRMA9.equalsIgnoreCase(expRMA9)*/ actList.equalsIgnoreCase(expList) && actsearchRMA1ChkBox==expsearchRMA1ChkBox  && actsearchRMA2ChkBox==expsearchRMA2ChkBox 
					&& actsearchRMA3ChkBox==expsearchRMA3ChkBox && actsearchRMA4ChkBox==expsearchRMA4ChkBox && actsearchRMA6ChkBox==expsearchRMA6ChkBox
					
					&& actrmaoutwardSerialNumberTxtField==exprmaoutwardSerialNumberTxtField && actrmaoutwardQuantityTxtField.equalsIgnoreCase(exprmaoutwardQuantityTxtField)
					&& actrmaoutwardNumberofItemsLabel.equalsIgnoreCase(exprmaoutwardNumberofItemsLabel) && actrmaoutwardTableHeadingRMA==exprmaoutwardTableHeadingRMA
					&& actrmaoutwardTableHeadingDocumentNo==exprmaoutwardTableHeadingDocumentNo && actrmaoutwardTableHeadingDocumentDate==exprmaoutwardTableHeadingDocumentDate
					&& actrmaoutwardOkBtn==exprmaoutwardOkBtn && actrmaoutwardCancelBtn==exprmaoutwardCancelBtn && actrmaoutwardExpandBtn==exprmaoutwardExpandBtn
					
					&& actsearchRMASearchTxtField==expsearchRMASearchTxtField && actsearchRMASearchBtn==expsearchRMASearchBtn 
					&& actsearchRMAQuantityTxtField.equalsIgnoreCase(expsearchRMAQuantityTxtField) && actsearchRMANoOfItemsTxt.equalsIgnoreCase(expsearchRMANoOfItemsTxt)
					&& actsearchRMAHeaderChkBox==expsearchRMAHeaderChkBox && actsearchRMATableHeadingSerialNo==expsearchRMATableHeadingSerialNo
					&& actsearchRMATableHeadingDocNo==expsearchRMATableHeadingDocNo && actsearchRMATableHeadingDate==expsearchRMATableHeadingDate 
					&& actsearchRMAOkBtn==expsearchRMAOkBtn && actsearchRMACancelBtn==expsearchRMACancelBtn)
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAOkBtn));
				searchRMAOkBtn.click();
				
				Thread.sleep(2000);
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 670, 9, resPass);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardOkBtn));
				rmaoutwardOkBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAOkBtn));
				searchRMAOkBtn.click();
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 670, 9, resPass);
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardOkBtn));
				rmaoutwardOkBtn.click();
				return false;
			}
		}
					
			 
		 
		public boolean checkSavingSalesInvoiceVoucherWithUpadtedRMA() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
			enter_RMA.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String docno=documentNumberTxt.getAttribute("value");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(breakUpByTagTab));
			breakUpByTagTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
			billRefNewReferenceTxt.click();
			
			
			String actBillNewReference,actBillAmtAdjAgainstNewRefInOtherVouchers,actBillTransactionCurrency,actBillBaseCurrency,actBillLocalCurrency,actBillBalanceNewRefAmount,actBillBreakUpByTagDepartment,actBillBreakUpByTagBaseCurrency,actBillBreakUpByTagBillCurrency,actBillBreakUpByTagLocalCurrency,actBillAmtAdjustedInTransactionCurrency,actBillBalanceAmtToBeAdjustedInTransactionCurrency,act13;
			String expBillNewReference,expBillAmtAdjAgainstNewRefInOtherVouchers,expBillTransactionCurrency,expBillBaseCurrency,expBillLocalCurrency,expBillBalanceNewRefAmount,expBillBreakUpByTagDepartment,expBillBreakUpByTagBaseCurrency,expBillBreakUpByTagBillCurrency,expBillBreakUpByTagLocalCurrency,expBillAmtAdjustedInTransactionCurrency,expBillBalanceAmtToBeAdjustedInTransactionCurrency;
			
			actBillNewReference									=billRefNewReferenceTxt.getAttribute("value");
	 		actBillAmtAdjAgainstNewRefInOtherVouchers			=amtAdjustedAgainstNewREfinOtherVouchers.getText();
	 		actBillTransactionCurrency							=transactionCurency.getText();
	 		actBillBaseCurrency									=baseCurrency.getText();
	 		actBillLocalCurrency								=localCurrencyDhs.getText();
	 		
	 		actBillBalanceNewRefAmount							=balanceNewReferenceAmt.getText();
	 		
	 		actBillBreakUpByTagDepartment						=breakUpByTagDepartment.getText();
	 		actBillBreakUpByTagBaseCurrency						=breakUpByTagBaseCurrency.getText();
	 		actBillBreakUpByTagBillCurrency						=breakUpByTagBillCurrency.getText();
	 		
	 		actBillBreakUpByTagLocalCurrency					=breakUpByTagBaseLocalCurrency.getText();
	 		actBillAmtAdjustedInTransactionCurrency				=billRefAdjustAmountInTransCurency.getText();
	 		actBillBalanceAmtToBeAdjustedInTransactionCurrency	=billRefBalanceAmountAdjustInTrnasCurrency.getText();
			
			
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 675, 8, actBillNewReference);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 676, 8, actBillAmtAdjAgainstNewRefInOtherVouchers);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 677, 8, actBillTransactionCurrency);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 678, 8, actBillBaseCurrency);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 679, 8, actBillLocalCurrency);
	 		
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 680, 8, actBillBalanceNewRefAmount);
	 		
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 631, 8, actBillBreakUpByTagDepartment);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 682, 8, actBillBreakUpByTagBaseCurrency);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 683, 8, actBillBreakUpByTagBillCurrency);
	 		
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 684, 8, actBillBreakUpByTagLocalCurrency);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 685, 8, actBillAmtAdjustedInTransactionCurrency);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 686, 8, actBillBalanceAmtToBeAdjustedInTransactionCurrency);
	 		
	 		
	 		
	 		
	 		
	 		expBillNewReference									=excelReader.getCellData("SmokeSalesInvoiceVAT", 675, 7);
	 		expBillAmtAdjAgainstNewRefInOtherVouchers			=excelReader.getCellData("SmokeSalesInvoiceVAT", 676, 7);
	 		expBillTransactionCurrency							=excelReader.getCellData("SmokeSalesInvoiceVAT", 677, 7);
	 		expBillBaseCurrency									=excelReader.getCellData("SmokeSalesInvoiceVAT", 678, 7);
	 		expBillLocalCurrency								=excelReader.getCellData("SmokeSalesInvoiceVAT", 679, 7);
	 		
	 		expBillBalanceNewRefAmount							=excelReader.getCellData("SmokeSalesInvoiceVAT", 680, 7);
	 		
	 		expBillBreakUpByTagDepartment						=excelReader.getCellData("SmokeSalesInvoiceVAT", 681, 7);
	 		expBillBreakUpByTagBillCurrency						=excelReader.getCellData("SmokeSalesInvoiceVAT", 682, 7);
	 		expBillBreakUpByTagBaseCurrency						=excelReader.getCellData("SmokeSalesInvoiceVAT", 683, 7);
	 		
	 		
	 		expBillBreakUpByTagLocalCurrency					=excelReader.getCellData("SmokeSalesInvoiceVAT", 684, 7);
	 		expBillAmtAdjustedInTransactionCurrency				=excelReader.getCellData("SmokeSalesInvoiceVAT", 685, 7);
	 		expBillBalanceAmtToBeAdjustedInTransactionCurrency	=excelReader.getCellData("SmokeSalesInvoiceVAT", 686, 7);
	 	

			
				
			System.out.println("*********************************** checkSavingSalesInvoiceVoucherWithUpadtedRMA  ************************************");
					
			System.out.println("actBillNewReference								   : "+ actBillNewReference									+" Value Expected : "+expBillNewReference);
	 		System.out.println("actBillAmtAdjAgainstNewRefInOtherVouchers		   : "+actBillAmtAdjAgainstNewRefInOtherVouchers			+" Value Expected : "+expBillAmtAdjAgainstNewRefInOtherVouchers);
	 		System.out.println("actBillTransactionCurrency						   : "+actBillTransactionCurrency							+" Value Expected : "+expBillTransactionCurrency);
	 		System.out.println("actBillBaseCurrency								   : "+actBillBaseCurrency									+" Value Expected : "+ expBillBaseCurrency);
	 		System.out.println("actBillLocalCurrency							   : "+actBillLocalCurrency									+" Value Expected : "+expBillLocalCurrency);
	 		System.out.println("actBillBalanceNewRefAmount						   : "+ actBillBalanceNewRefAmount							+" Value Expected : "+expBillBalanceNewRefAmount);
	        System.out.println("actBillBreakUpByTagDepartment					   : "+actBillBreakUpByTagDepartment						+" Value Expected : "+expBillBreakUpByTagDepartment);
	 		System.out.println("actBillBreakUpByTagBaseCurrency				       : "+actBillBreakUpByTagBaseCurrency						+" Value Expected : "+expBillBreakUpByTagBaseCurrency);
	 		System.out.println("actBillBreakUpByTagBillCurrency 				   : "+actBillBreakUpByTagBillCurrency						+" Value Expected : "+expBillBreakUpByTagBillCurrency);
	 		System.out.println("actBillBreakUpByTagLocalCurrency				   : "+actBillBreakUpByTagLocalCurrency						+" Value Expected : "+expBillBreakUpByTagLocalCurrency);
	 		System.out.println("actBillAmtAdjustedInTransactionCurrency			   : "+actBillAmtAdjustedInTransactionCurrency				+" Value Expected : "+expBillAmtAdjustedInTransactionCurrency);
	 		System.out.println("actBillBalanceAmtToBeAdjustedInTransactionCurrency : "+actBillBalanceAmtToBeAdjustedInTransactionCurrency	+" Value Expected : "+expBillBalanceAmtToBeAdjustedInTransactionCurrency);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			//pick button is click
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(breakUpByTagTab));
			breakUpByTagTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
			billRefNewReferenceTxt.click();
			
			
			String actBillNewReferencePick,actBillAmtAdjAgainstNewRefInOtherVouchersPick,actBillTransactionCurrencyPick,actBillBaseCurrencyPick,actBillLocalCurrencyPick,actBillBalanceNewRefAmountPick,actBillBreakUpByTagDepartmentPick,actBillBreakUpByTagBaseCurrencyPick,actBillBreakUpByTagBillCurrencyPick,actBillBreakUpByTagLocalCurrencyPick,actBillAmtAdjustedInTransactionCurrencyPick,actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick;
			String expBillNewReferencePick,expBillAmtAdjAgainstNewRefInOtherVouchersPick,expBillTransactionCurrencyPick,expBillBaseCurrencyPick,expBillLocalCurrencyPick,expBillBalanceNewRefAmountPick,expBillBreakUpByTagDepartmentPick,expBillBreakUpByTagBaseCurrencyPick,expBillBreakUpByTagBillCurrencyPick,expBillBreakUpByTagLocalCurrencyPick,expBillAmtAdjustedInTransactionCurrencyPick,expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick;
			
			actBillNewReferencePick									=billRefNewReferenceTxt.getAttribute("value");
	 		actBillAmtAdjAgainstNewRefInOtherVouchersPick			=amtAdjustedAgainstNewREfinOtherVouchers.getText();
	 		actBillTransactionCurrencyPick							=transactionCurency.getText();
	 		actBillBaseCurrencyPick									=baseCurrency.getText();
	 		actBillLocalCurrencyPick								=localCurrencyDhs.getText();
	 		
	 		actBillBalanceNewRefAmountPick							=balanceNewReferenceAmt.getText();
	 		
	 		actBillBreakUpByTagDepartmentPick						=breakUpByTagDepartment.getText();
	 		actBillBreakUpByTagBaseCurrencyPick						=breakUpByTagBaseCurrency.getText();
	 		actBillBreakUpByTagBillCurrencyPick						=breakUpByTagBillCurrency.getText();
	 		
	 		actBillBreakUpByTagLocalCurrencyPick					=breakUpByTagBaseLocalCurrency.getText();
	 		actBillAmtAdjustedInTransactionCurrencyPick				=billRefAdjustAmountInTransCurency.getText();
	 		actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	=billRefBalanceAmountAdjustInTrnasCurrency.getText();
			
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 688, 8, actBillNewReferencePick);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 689, 8, actBillAmtAdjAgainstNewRefInOtherVouchersPick);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 690, 8, actBillTransactionCurrencyPick);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 691, 8, actBillBaseCurrencyPick);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 692, 8, actBillLocalCurrencyPick);
	 		
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 693, 8, actBillBalanceNewRefAmountPick);
	 		
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 694, 8, actBillBreakUpByTagDepartmentPick);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 695, 8, actBillBreakUpByTagBaseCurrencyPick);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 696, 8, actBillBreakUpByTagBillCurrencyPick);
	 		
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 697, 8, actBillBreakUpByTagLocalCurrencyPick);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 698, 8, actBillAmtAdjustedInTransactionCurrencyPick);
	 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 699, 8, actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick);
	 		
	 		
	 		expBillNewReferencePick									=excelReader.getCellData("SmokeSalesInvoiceVAT", 688, 7);
	 		expBillAmtAdjAgainstNewRefInOtherVouchersPick			=excelReader.getCellData("SmokeSalesInvoiceVAT", 689, 7);
	 		expBillTransactionCurrencyPick							=excelReader.getCellData("SmokeSalesInvoiceVAT", 690, 7);
	 		expBillBaseCurrencyPick									=excelReader.getCellData("SmokeSalesInvoiceVAT", 691, 7);
	 		expBillLocalCurrencyPick								=excelReader.getCellData("SmokeSalesInvoiceVAT", 692, 7);
	 		
	 		expBillBalanceNewRefAmountPick							=excelReader.getCellData("SmokeSalesInvoiceVAT", 693, 7);
	 		
	 		expBillBreakUpByTagDepartmentPick						=excelReader.getCellData("SmokeSalesInvoiceVAT", 694, 7);
	 		expBillBreakUpByTagBillCurrencyPick						=excelReader.getCellData("SmokeSalesInvoiceVAT", 695, 7);
	 		expBillBreakUpByTagBaseCurrencyPick						=excelReader.getCellData("SmokeSalesInvoiceVAT", 696, 7);
	 		
	 		
	 		expBillBreakUpByTagLocalCurrencyPick					=excelReader.getCellData("SmokeSalesInvoiceVAT", 697, 7);
	 		expBillAmtAdjustedInTransactionCurrencyPick				=excelReader.getCellData("SmokeSalesInvoiceVAT", 698, 7);
	 		expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	=excelReader.getCellData("SmokeSalesInvoiceVAT", 699, 7);
	
			System.out.println("actBillNewReferencePick 								: "+actBillNewReferencePick									+ " Value Expected : "+expBillNewReferencePick);
	 		System.out.println("actBillAmtAdjAgainstNewRefInOtherVouchersPick			: " + actBillAmtAdjAgainstNewRefInOtherVouchersPick			+ "	Value Expected : "+expBillAmtAdjAgainstNewRefInOtherVouchersPick);
	 		System.out.println("actBillTransactionCurrencyPick							: "+ actBillTransactionCurrencyPick							+ " Value Expected : "+expBillTransactionCurrencyPick);
	 		System.out.println("actBillBaseCurrencyPick									: "+ actBillBaseCurrencyPick								+ " Value Expected : "+expBillBaseCurrencyPick);
	 		System.out.println("actBillLocalCurrencyPick								: "+ actBillLocalCurrencyPick								+ " Value Expected : "+expBillLocalCurrencyPick);
	 		System.out.println("actBillBalanceNewRefAmountPick							: "+ actBillBalanceNewRefAmountPick							+ " Value Expected : "+expBillBalanceNewRefAmountPick);
	        System.out.println("actBillBreakUpByTagDepartmentPick						: "+ actBillBreakUpByTagDepartmentPick						+ " Value Expected : "+expBillBreakUpByTagDepartmentPick);
	 		System.out.println("actBillBreakUpByTagBaseCurrencyPick						: "+ actBillBreakUpByTagBaseCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagBaseCurrencyPick);
	 		System.out.println("actBillBreakUpByTagBillCurrencyPick						: "+ actBillBreakUpByTagBillCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagBillCurrencyPick);
	 		System.out.println("actBillBreakUpByTagLocalCurrencyPick					: "+ actBillBreakUpByTagLocalCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagLocalCurrencyPick);
	 		System.out.println("actBillAmtAdjustedInTransactionCurrencyPick				: "+ actBillAmtAdjustedInTransactionCurrencyPick			+ " Value Expected : "+expBillAmtAdjustedInTransactionCurrencyPick);
	 		System.out.println("actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick  : "+ actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	+ " Value Expected : "+expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			boolean savingMessage=checkVoucherSavingMessage(docno);
			
			


			String actSavingVoucher=Boolean.toString(savingMessage);
			String expSavingVoucher=excelReader.getCellData("SmokeSalesInvoiceVAT", 700, 7);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 700, 8, actSavingVoucher);
			
			
			System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
			
			if(savingMessage==true &&
					
					actBillNewReference.equalsIgnoreCase(expBillNewReference) &&
					actBillAmtAdjAgainstNewRefInOtherVouchers.equalsIgnoreCase(expBillAmtAdjAgainstNewRefInOtherVouchers) &&
					actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 				
					actBillBaseCurrency.equalsIgnoreCase(actBillBaseCurrency) &&
					actBillLocalCurrency.equalsIgnoreCase(actBillLocalCurrency) &&
					actBillBalanceNewRefAmount.equalsIgnoreCase(actBillBalanceNewRefAmount) &&
					actBillBreakUpByTagDepartment.equalsIgnoreCase(actBillBreakUpByTagDepartment) &&
					actBillBreakUpByTagBaseCurrency.equalsIgnoreCase(actBillBreakUpByTagBaseCurrency) &&
					actBillBreakUpByTagBillCurrency.equalsIgnoreCase(actBillBreakUpByTagBillCurrency) &&
					actBillBreakUpByTagLocalCurrency.equalsIgnoreCase(actBillBreakUpByTagLocalCurrency) &&
					actBillAmtAdjustedInTransactionCurrency.equalsIgnoreCase(actBillAmtAdjustedInTransactionCurrency) &&
					actBillBalanceAmtToBeAdjustedInTransactionCurrency.equalsIgnoreCase(actBillBalanceAmtToBeAdjustedInTransactionCurrency) &&
					
					
					actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) &&
					actBillAmtAdjAgainstNewRefInOtherVouchersPick.equalsIgnoreCase(expBillAmtAdjAgainstNewRefInOtherVouchersPick) &&
					actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) &&
					actBillBaseCurrencyPick.equalsIgnoreCase(actBillBaseCurrencyPick) &&
					actBillLocalCurrencyPick.equalsIgnoreCase(actBillLocalCurrencyPick) &&
					actBillBalanceNewRefAmountPick.equalsIgnoreCase(actBillBalanceNewRefAmountPick) &&
					actBillBreakUpByTagDepartmentPick.equalsIgnoreCase(actBillBreakUpByTagDepartmentPick) &&
					actBillBreakUpByTagBaseCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagBaseCurrencyPick) &&
					actBillBreakUpByTagBillCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagBillCurrencyPick) &&
					actBillBreakUpByTagLocalCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagLocalCurrencyPick) &&
					actBillAmtAdjustedInTransactionCurrencyPick.equalsIgnoreCase(actBillAmtAdjustedInTransactionCurrencyPick) &&
					actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick.equalsIgnoreCase(actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick))
			{
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));	
				new_CloseBtn.click();
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 674, 9, resPass);
				return true;
					
			}
			else
			{
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));	
				new_CloseBtn.click();
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 674, 9, resFail);
				return false;	
			}
		}
		
		
		
		
		
		// Stock Item
		
	@FindBy(xpath="//input[@id='id_body_33554473']")
	private static WebElement enter_Discount;
		
	 public boolean checkInputingStockItemInFourthRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	 {
			
		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	     xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
	     
	    //Comment this code 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
		getAction().doubleClick(grid_ChkBox1).build().perform();
		checkUserFriendlyMessage();
	     	 
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_1stColumn));
	    select4thRow_1stColumn.click();
	 
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
	    pvWareHouseTxt.sendKeys(Keys.TAB);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData("SmokeSalesInvoiceVAT", 749, 6)))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
			
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_5thColumn));
		select4thRow_5thColumn.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_8thColumn));
		select4thRow_8thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVAT", 750, 6));
		enter_AQTxt.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVAT", 751, 6));
		enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_11thColumn));
		select4thRow_11thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("60");
		enter_Quantity.sendKeys(Keys.TAB);
		
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_14thColumn));
		select4thRow_14thColumn.click();
		
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVAT", 752, 6));
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_21thColumn));
		select4thRow_21thColumn.click();
	 		
		int voucherGridBodyListCount = voucherGridBodyList.size();
		 
		 ArrayList<String> voucherGridBodyListArray = new ArrayList<String>();
		 
		 for(int i=0;i<voucherGridBodyListCount;i++)
		 {
			 String data = voucherGridBodyList.get(i).getText();
			 voucherGridBodyListArray.add(data);
		 }
		 
		 String actvoucherGridBodyList=voucherGridBodyListArray.toString();
		 
		 String expvoucherGridBodyList="[1, HYDERABAD, BR COGS ITEM, Std Rate, Sales - Computers, Pcs, 0.83, 0.83, 30.00, 30.00, 0.00, 60.00, , , 1.00, 60.00, 0.00, 0.00, 60.00, OSH_COGS1, , , , 2, HYDERABAD, FIFO COGS ITEM, Zero Rate, Sales - Computers, Pcs, 8.33, 8.33, 0.00, 4.00, 0.00, 4.00, , , 10.00, 40.00, 0.00, 0.00, 40.00, , Bin4, , , 3, HYDERABAD, WA COGS ITEM, Std Rate, Sales - Computers, Pcs, 26.13, 26.13, 0.00, 3.00, 0.00, 3.00, , , 10.00, 30.00, 0.00, 0.00, 30.00, , , HYD_OS@Rma1,HYD_OS@Rma2,HYD_OS@Rma3, , 4, HYDERABAD, STD RATE COGS ITEM, Std Rate, Sales - Computers, Pcs, 10.00, 10.00, 30.00, 30.00, 0, 60.00, , 0.00, 1.00, 60.00, 0.00, 5.00, 60.00, , , , , 5, , , , , , , , , , , , , , , , , , , , , , ]";
		 
		 excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 749, 8, actvoucherGridBodyList);
		 
		 System.out.println("voucherGridBodyList Actual   : " + actvoucherGridBodyList);
		 System.out.println("voucherGridBodyList Expected : " + expvoucherGridBodyList);
		 
 		 if(actvoucherGridBodyList.equalsIgnoreCase(expvoucherGridBodyList))
 		 {
 			System.out.println("Test Pass : Voucher Saved Successfully");
 			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 749, 9, resPass);
 		    return true;
 		 }
 		 else
 		 {
 			System.out.println("Test fail :  Voucher   Not Saved Successfully");
 			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 749, 9, resFail);
 		    return false;
 		  }
	 }
	 
	 
	 
	public boolean checkSavingVoucherWithRateMoreThanCreditLimit() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_17thColumn));
		select1stRow_17thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_17thColumn));
		select2ndRow_17thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_17thColumn));
		select3rdRow_17thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_17thColumn));
		select4thRow_17thColumn.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		String expValidationMessage=excelReader.getCellData("SmokeSalesInvoiceVAT", 753, 7);
		 
		String emptyRowsMessage=checkValidationMessage(expValidationMessage);

		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 753, 8, expValidationMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefcancel));
		billRefcancel.click();
		

		System.out.println("*********************************************** checkSavingSalesVoucherNewWithEmptyRows  ********************************************");
		System.out.println("Entry Page Save Without Body Rows Message Value Actual  : "+emptyRowsMessage+" Value Expected : "+expValidationMessage);	
		
		
		if (emptyRowsMessage.equalsIgnoreCase(expValidationMessage))
		{
			System.out.println("Test Pass : Qty Preload Value is displaying Correct");
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 753, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Qty Preload Value is displaying Wrong");
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 753, 9, resFail);
			return false;
		}
	}
		
		
	@FindBy(xpath="//*[@id='id_transactionentry_summary_static']/div/div/label")
	private static List<WebElement> newFooterList;
	
	
	public boolean checkFooterFieldsBeforeInputingDiscount() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_footerExpandBtn));
		new_footerExpandBtn.click();
		
		
		Thread.sleep(2000);
		
		int newFooterListCount = newFooterList.size();
		
		System.err.println("newFooterList : "+newFooterListCount);
		
		ArrayList<String> newFooterListArray = new ArrayList<String>();
		
		
		for (int i=0;i<newFooterListCount;i++)
		{
			String data = newFooterList.get(i).getText();
			newFooterListArray.add(data);
					
		}
		
		
		
		String actnewFooterList = newFooterListArray.toString();
		String expnewFooterList = excelReader.getCellData("SmokeSalesInvoiceVAT", 754, 7);
		
		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT",	 754, 8	, actnewFooterList);

		System.out.println("*********************************************** checkSavingSalesVoucherNewWithEmptyRows  ********************************************");
		System.out.println("newFooterList  : "+actnewFooterList+" Value Expected : "+expnewFooterList);	
		
		
		if (actnewFooterList.equalsIgnoreCase(expnewFooterList))
		{
			System.out.println("Test Pass : Qty Preload Value is displaying Correct");
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 754, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Qty Preload Value is displaying Wrong");
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 754, 9, resFail);
			return false;
		}
	}
	
	
	public boolean checkFooterFieldsOnInputingDiscountForStockItem() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_16thColumn));
		select4thRow_16thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVAT", 755, 6));
		enter_Discount.sendKeys(Keys.TAB);
		
		
		Thread.sleep(2000);
		
		int newFooterListCount = newFooterList.size();
		
		System.err.println("newFooterList : "+newFooterListCount);
		
		ArrayList<String> newFooterListArray = new ArrayList<String>();
		
		
		for (int i=0;i<newFooterListCount;i++)
		{
			String data = newFooterList.get(i).getText();
			newFooterListArray.add(data);
					
		}
		
		
		
		String actnewFooterList = newFooterListArray.toString();
		String expnewFooterList = excelReader.getCellData("SmokeSalesInvoiceVAT", 755, 7);
		
		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT",	 755, 8	, actnewFooterList);

		System.out.println("*********************************************** checkSavingSalesVoucherNewWithEmptyRows  ********************************************");
		System.out.println("newFooterList  : "+actnewFooterList+" Value Expected : "+expnewFooterList);	
		
		
		if (actnewFooterList.equalsIgnoreCase(expnewFooterList))
		{
			System.out.println("Test Pass : Qty Preload Value is displaying Correct");
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 755, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Qty Preload Value is displaying Wrong");
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 755, 9, resFail);
			return false;
		}
	}
	
	
	public boolean checkSavingSalesInvoiceVoucherWithStockItemAndCreditLimitFull() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(breakUpByTagTab));
		breakUpByTagTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
		billRefNewReferenceTxt.click();
		
		
		String actBillNewReference,actBillAmtAdjAgainstNewRefInOtherVouchers,actBillTransactionCurrency,actBillBaseCurrency,actBillLocalCurrency,actBillBalanceNewRefAmount,actBillBreakUpByTagDepartment,actBillBreakUpByTagBaseCurrency,actBillBreakUpByTagBillCurrency,actBillBreakUpByTagLocalCurrency,actBillAmtAdjustedInTransactionCurrency,actBillBalanceAmtToBeAdjustedInTransactionCurrency,act13;
		String expBillNewReference,expBillAmtAdjAgainstNewRefInOtherVouchers,expBillTransactionCurrency,expBillBaseCurrency,expBillLocalCurrency,expBillBalanceNewRefAmount,expBillBreakUpByTagDepartment,expBillBreakUpByTagBaseCurrency,expBillBreakUpByTagBillCurrency,expBillBreakUpByTagLocalCurrency,expBillAmtAdjustedInTransactionCurrency,expBillBalanceAmtToBeAdjustedInTransactionCurrency;
		
		actBillNewReference									=billRefNewReferenceTxt.getAttribute("value");
 		actBillAmtAdjAgainstNewRefInOtherVouchers			=amtAdjustedAgainstNewREfinOtherVouchers.getText();
 		actBillTransactionCurrency							=transactionCurency.getText();
 		actBillBaseCurrency									=baseCurrency.getText();
 		actBillLocalCurrency								=localCurrencyDhs.getText();
 		
 		actBillBalanceNewRefAmount							=balanceNewReferenceAmt.getText();
 		
 		actBillBreakUpByTagDepartment						=breakUpByTagDepartment.getText();
 		actBillBreakUpByTagBaseCurrency						=breakUpByTagBaseCurrency.getText();
 		actBillBreakUpByTagBillCurrency						=breakUpByTagBillCurrency.getText();
 		
 		actBillBreakUpByTagLocalCurrency					=breakUpByTagBaseLocalCurrency.getText();
 		actBillAmtAdjustedInTransactionCurrency				=billRefAdjustAmountInTransCurency.getText();
 		actBillBalanceAmtToBeAdjustedInTransactionCurrency	=billRefBalanceAmountAdjustInTrnasCurrency.getText();
 		
 		
 		expBillNewReference									=excelReader.getCellData("SmokeSalesInvoiceVAT", 756, 7);
 		expBillAmtAdjAgainstNewRefInOtherVouchers			=excelReader.getCellData("SmokeSalesInvoiceVAT", 757, 7);
 		expBillTransactionCurrency							=excelReader.getCellData("SmokeSalesInvoiceVAT", 758, 7);
 		expBillBaseCurrency									=excelReader.getCellData("SmokeSalesInvoiceVAT", 759, 7);
 		expBillLocalCurrency								=excelReader.getCellData("SmokeSalesInvoiceVAT", 760, 7);
 		
 		expBillBalanceNewRefAmount							=excelReader.getCellData("SmokeSalesInvoiceVAT", 761, 7);
 		
 		expBillBreakUpByTagDepartment						=excelReader.getCellData("SmokeSalesInvoiceVAT", 762, 7);
 		expBillBreakUpByTagBillCurrency						=excelReader.getCellData("SmokeSalesInvoiceVAT", 763, 7);
 		expBillBreakUpByTagBaseCurrency						=excelReader.getCellData("SmokeSalesInvoiceVAT", 764, 7);
 		
 		
 		expBillBreakUpByTagLocalCurrency					=excelReader.getCellData("SmokeSalesInvoiceVAT", 765, 7);
 		expBillAmtAdjustedInTransactionCurrency				=excelReader.getCellData("SmokeSalesInvoiceVAT", 766, 7);
 		expBillBalanceAmtToBeAdjustedInTransactionCurrency	=excelReader.getCellData("SmokeSalesInvoiceVAT", 767, 7);
 		
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 756, 8, actBillNewReference);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 757, 8, actBillAmtAdjAgainstNewRefInOtherVouchers);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 758, 8, actBillTransactionCurrency);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 759, 8, actBillBaseCurrency);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 760, 8, actBillLocalCurrency);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 761, 8, actBillBalanceNewRefAmount);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 762, 8, actBillBreakUpByTagDepartment);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 763, 8, actBillBreakUpByTagBaseCurrency);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 764, 8, actBillBreakUpByTagBillCurrency);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 765, 8, actBillBreakUpByTagLocalCurrency);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 766, 8, actBillAmtAdjustedInTransactionCurrency);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 767, 8, actBillBalanceAmtToBeAdjustedInTransactionCurrency);
 	
 		System.out.println("*********************************** checkCancelBinPopupScreenDeleteRowAndSaveVoucher  ************************************");


 		System.out.println("actBillNewReference								   : "+ actBillNewReference									+" Value Expected : "+expBillNewReference);
 		System.out.println("actBillAmtAdjAgainstNewRefInOtherVouchers		   : "+actBillAmtAdjAgainstNewRefInOtherVouchers			+" Value Expected : "+expBillAmtAdjAgainstNewRefInOtherVouchers);
 		System.out.println("actBillTransactionCurrency						   : "+actBillTransactionCurrency							+" Value Expected : "+expBillTransactionCurrency);
 		System.out.println("actBillBaseCurrency								   : "+actBillBaseCurrency									+" Value Expected : "+ expBillBaseCurrency);
 		System.out.println("actBillLocalCurrency							   : "+actBillLocalCurrency									+" Value Expected : "+expBillLocalCurrency);
 		System.out.println("actBillBalanceNewRefAmount						   : "+ actBillBalanceNewRefAmount							+" Value Expected : "+expBillBalanceNewRefAmount);
        System.out.println("actBillBreakUpByTagDepartment					   : "+actBillBreakUpByTagDepartment						+" Value Expected : "+expBillBreakUpByTagDepartment);
 		System.out.println("actBillBreakUpByTagBaseCurrency				       : "+actBillBreakUpByTagBaseCurrency						+" Value Expected : "+expBillBreakUpByTagBaseCurrency);
 		System.out.println("actBillBreakUpByTagBillCurrency 				   : "+actBillBreakUpByTagBillCurrency						+" Value Expected : "+expBillBreakUpByTagBillCurrency);
 		System.out.println("actBillBreakUpByTagLocalCurrency				   : "+actBillBreakUpByTagLocalCurrency						+" Value Expected : "+expBillBreakUpByTagLocalCurrency);
 		System.out.println("actBillAmtAdjustedInTransactionCurrency			   : "+actBillAmtAdjustedInTransactionCurrency				+" Value Expected : "+expBillAmtAdjustedInTransactionCurrency);
 		System.out.println("actBillBalanceAmtToBeAdjustedInTransactionCurrency : "+actBillBalanceAmtToBeAdjustedInTransactionCurrency	+" Value Expected : "+expBillBalanceAmtToBeAdjustedInTransactionCurrency);
 		
 	    Thread.sleep(2000);
	   
 	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
	    billRefPickIcon.click();
	   
	    //pick button is click
	   
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(breakUpByTagTab));
 		breakUpByTagTab.click();
 		
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
 		billRefNewReferenceTxt.click();
 		
 		
 		String actBillNewReferencePick,actBillAmtAdjAgainstNewRefInOtherVouchersPick,actBillTransactionCurrencyPick,actBillBaseCurrencyPick,actBillLocalCurrencyPick,actBillBalanceNewRefAmountPick,actBillBreakUpByTagDepartmentPick,actBillBreakUpByTagBaseCurrencyPick,actBillBreakUpByTagBillCurrencyPick,actBillBreakUpByTagLocalCurrencyPick,actBillAmtAdjustedInTransactionCurrencyPick,actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick;
 		String expBillNewReferencePick,expBillAmtAdjAgainstNewRefInOtherVouchersPick,expBillTransactionCurrencyPick,expBillBaseCurrencyPick,expBillLocalCurrencyPick,expBillBalanceNewRefAmountPick,expBillBreakUpByTagDepartmentPick,expBillBreakUpByTagBaseCurrencyPick,expBillBreakUpByTagBillCurrencyPick,expBillBreakUpByTagLocalCurrencyPick,expBillAmtAdjustedInTransactionCurrencyPick,expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick;
 		
 		actBillNewReferencePick									=billRefNewReferenceTxt.getAttribute("value");
 		actBillAmtAdjAgainstNewRefInOtherVouchersPick			=amtAdjustedAgainstNewREfinOtherVouchers.getText();
 		actBillTransactionCurrencyPick							=transactionCurency.getText();
 		actBillBaseCurrencyPick									=baseCurrency.getText();
 		actBillLocalCurrencyPick								=localCurrencyDhs.getText();
 		
 		actBillBalanceNewRefAmountPick							=balanceNewReferenceAmt.getText();
 		
 		actBillBreakUpByTagDepartmentPick						=breakUpByTagDepartment.getText();
 		actBillBreakUpByTagBaseCurrencyPick						=breakUpByTagBaseCurrency.getText();
 		actBillBreakUpByTagBillCurrencyPick						=breakUpByTagBillCurrency.getText();
 		
 		actBillBreakUpByTagLocalCurrencyPick					=breakUpByTagBaseLocalCurrency.getText();
 		actBillAmtAdjustedInTransactionCurrencyPick				=billRefAdjustAmountInTransCurency.getText();
 		actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	=billRefBalanceAmountAdjustInTrnasCurrency.getText();
 		
 		
 		expBillNewReferencePick									=excelReader.getCellData("SmokeSalesInvoiceVAT", 769, 7);
 		expBillAmtAdjAgainstNewRefInOtherVouchersPick			=excelReader.getCellData("SmokeSalesInvoiceVAT", 770, 7);
 		expBillTransactionCurrencyPick							=excelReader.getCellData("SmokeSalesInvoiceVAT", 771, 7);
 		expBillBaseCurrencyPick									=excelReader.getCellData("SmokeSalesInvoiceVAT", 772, 7);
 		expBillLocalCurrencyPick								=excelReader.getCellData("SmokeSalesInvoiceVAT", 773, 7);
 		
 		expBillBalanceNewRefAmountPick							=excelReader.getCellData("SmokeSalesInvoiceVAT", 774, 7);
 		
 		expBillBreakUpByTagDepartmentPick						=excelReader.getCellData("SmokeSalesInvoiceVAT", 775, 7);
 		expBillBreakUpByTagBillCurrencyPick						=excelReader.getCellData("SmokeSalesInvoiceVAT", 776, 7);
 		expBillBreakUpByTagBaseCurrencyPick						=excelReader.getCellData("SmokeSalesInvoiceVAT", 777, 7);
 		
 		
 		expBillBreakUpByTagLocalCurrencyPick					=excelReader.getCellData("SmokeSalesInvoiceVAT", 778, 7);
 		expBillAmtAdjustedInTransactionCurrencyPick				=excelReader.getCellData("SmokeSalesInvoiceVAT", 779, 7);
 		expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	=excelReader.getCellData("SmokeSalesInvoiceVAT", 780, 7);
 		
 		
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 769, 8, actBillNewReferencePick);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 770, 8, actBillAmtAdjAgainstNewRefInOtherVouchersPick);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 771, 8, actBillTransactionCurrencyPick);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 772, 8, actBillBaseCurrencyPick);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 773, 8, actBillLocalCurrencyPick);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 774, 8, actBillBalanceNewRefAmountPick);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 775, 8, actBillBreakUpByTagDepartmentPick);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 776, 8, actBillBreakUpByTagBaseCurrencyPick);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 777, 8, actBillBreakUpByTagBillCurrencyPick);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 778, 8, actBillBreakUpByTagLocalCurrencyPick);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 779, 8, actBillAmtAdjustedInTransactionCurrencyPick);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 780, 8, actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick);
			
		System.out.println("actBillNewReferencePick 								: "+actBillNewReferencePick									+ " Value Expected : "+expBillNewReferencePick);
 		System.out.println("actBillAmtAdjAgainstNewRefInOtherVouchersPick			: " + actBillAmtAdjAgainstNewRefInOtherVouchersPick			+ "	Value Expected : "+expBillAmtAdjAgainstNewRefInOtherVouchersPick);
 		System.out.println("actBillTransactionCurrencyPick							: "+ actBillTransactionCurrencyPick							+ " Value Expected : "+expBillTransactionCurrencyPick);
 		System.out.println("actBillBaseCurrencyPick									: "+ actBillBaseCurrencyPick								+ " Value Expected : "+expBillBaseCurrencyPick);
 		System.out.println("actBillLocalCurrencyPick								: "+ actBillLocalCurrencyPick								+ " Value Expected : "+expBillLocalCurrencyPick);
 		System.out.println("actBillBalanceNewRefAmountPick							: "+ actBillBalanceNewRefAmountPick							+ " Value Expected : "+expBillBalanceNewRefAmountPick);
        System.out.println("actBillBreakUpByTagDepartmentPick						: "+ actBillBreakUpByTagDepartmentPick						+ " Value Expected : "+expBillBreakUpByTagDepartmentPick);
 		System.out.println("actBillBreakUpByTagBaseCurrencyPick						: "+ actBillBreakUpByTagBaseCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagBaseCurrencyPick);
 		System.out.println("actBillBreakUpByTagBillCurrencyPick						: "+ actBillBreakUpByTagBillCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagBillCurrencyPick);
 		System.out.println("actBillBreakUpByTagLocalCurrencyPick					: "+ actBillBreakUpByTagLocalCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagLocalCurrencyPick);
 		System.out.println("actBillAmtAdjustedInTransactionCurrencyPick				: "+ actBillAmtAdjustedInTransactionCurrencyPick			+ " Value Expected : "+expBillAmtAdjustedInTransactionCurrencyPick);
 		System.out.println("actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick  : "+ actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	+ " Value Expected : "+expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		boolean savingMessage=checkVoucherSavingMessage(docno);
		
		System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
		
		if(savingMessage==true &&
				
				actBillNewReference.equalsIgnoreCase(expBillNewReference) &&
				actBillAmtAdjAgainstNewRefInOtherVouchers.equalsIgnoreCase(expBillAmtAdjAgainstNewRefInOtherVouchers) &&
				actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 				
				actBillBaseCurrency.equalsIgnoreCase(actBillBaseCurrency) &&
				actBillLocalCurrency.equalsIgnoreCase(actBillLocalCurrency) &&
				actBillBalanceNewRefAmount.equalsIgnoreCase(actBillBalanceNewRefAmount) &&
				actBillBreakUpByTagDepartment.equalsIgnoreCase(actBillBreakUpByTagDepartment) &&
				actBillBreakUpByTagBaseCurrency.equalsIgnoreCase(actBillBreakUpByTagBaseCurrency) &&
				actBillBreakUpByTagBillCurrency.equalsIgnoreCase(actBillBreakUpByTagBillCurrency) &&
				actBillBreakUpByTagLocalCurrency.equalsIgnoreCase(actBillBreakUpByTagLocalCurrency) &&
				actBillAmtAdjustedInTransactionCurrency.equalsIgnoreCase(actBillAmtAdjustedInTransactionCurrency) &&
				actBillBalanceAmtToBeAdjustedInTransactionCurrency.equalsIgnoreCase(actBillBalanceAmtToBeAdjustedInTransactionCurrency) &&
				
				
				actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) &&
				actBillAmtAdjAgainstNewRefInOtherVouchersPick.equalsIgnoreCase(expBillAmtAdjAgainstNewRefInOtherVouchersPick) &&
				actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) &&
				actBillBaseCurrencyPick.equalsIgnoreCase(actBillBaseCurrencyPick) &&
				actBillLocalCurrencyPick.equalsIgnoreCase(actBillLocalCurrencyPick) &&
				actBillBalanceNewRefAmountPick.equalsIgnoreCase(actBillBalanceNewRefAmountPick) &&
				actBillBreakUpByTagDepartmentPick.equalsIgnoreCase(actBillBreakUpByTagDepartmentPick) &&
				actBillBreakUpByTagBaseCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagBaseCurrencyPick) &&
				actBillBreakUpByTagBillCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagBillCurrencyPick) &&
				actBillBreakUpByTagLocalCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagLocalCurrencyPick) &&
				actBillAmtAdjustedInTransactionCurrencyPick.equalsIgnoreCase(actBillAmtAdjustedInTransactionCurrencyPick) &&
				actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick.equalsIgnoreCase(actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick))
		{
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 756, 9, resPass);
			return true;
				
		}
		else
		{
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 756, 9, resFail);	
			return false;	
		}
	}
	
		
	public boolean checkSavedVoucherWithFullCreditLimitOnPreviousButton() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();
		
		checkUserFriendlyMessage();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		
		String actcustomerAccountTxt = customerAccountTxt.getAttribute("value");
		String expcustomerAccountTxt = excelReader.getCellData("SmokeSalesInvoiceVAT", 782, 7);
		
		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 782, 8, actcustomerAccountTxt);
		
		System.out.println("customerAccountTxt : "+actcustomerAccountTxt+" Value Expected : "+expcustomerAccountTxt);
		
		String actdepartmentTxt = departmentTxt.getAttribute("value");
		String expdepartmentTxt = excelReader.getCellData("SmokeSalesInvoiceVAT", 783, 7);
		
		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 783, 8, actdepartmentTxt);
		
		System.out.println("departmentTxt : "+actdepartmentTxt+" Value Expected : "+expdepartmentTxt);
		
		String actjurisdictionTxt = jurisdictionTxt.getAttribute("value");
		String expjurisdictionTxt = excelReader.getCellData("SmokeSalesInvoiceVAT", 784, 7);
		
		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 784, 8, actjurisdictionTxt);
		
		System.out.println("jurisdictionTxt : "+actjurisdictionTxt+" Value Expected : "+expjurisdictionTxt);
		
		String actplaceofSupplyTxt = placeofSupplyTxt.getAttribute("value");
		String expplaceofSupplyTxt = excelReader.getCellData("SmokeSalesInvoiceVAT", 785, 7);
		
		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 785, 8, actplaceofSupplyTxt);
		
		System.out.println("placeofSupplyTxt : "+actplaceofSupplyTxt+" Value Expected : "+expplaceofSupplyTxt);
		
		int voucherGridBodyListCount = voucherGridBodyList.size();
		 
		 ArrayList<String> voucherGridBodyListArray = new ArrayList<String>();
		 
		 for(int i=0;i<voucherGridBodyListCount;i++)
		 {
			 String data = voucherGridBodyList.get(i).getText();
			 voucherGridBodyListArray.add(data);
		 }
		 
		 String actvoucherGridBodyList=voucherGridBodyListArray.toString();
		 
		 String expvoucherGridBodyList=excelReader.getCellData("SmokeSalesInvoiceVAT", 786, 7);
		 
		 excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 786, 8, actvoucherGridBodyList);
		 
		 System.out.println("voucherGridBodyList Actual   : " + actvoucherGridBodyList);
		 System.out.println("voucherGridBodyList Expected : " + expvoucherGridBodyList);
				
		if (actdepartmentTxt.equalsIgnoreCase(expdepartmentTxt) && actcustomerAccountTxt.equalsIgnoreCase(expcustomerAccountTxt)
				&& actjurisdictionTxt.equalsIgnoreCase(expjurisdictionTxt) && actplaceofSupplyTxt.equalsIgnoreCase(expplaceofSupplyTxt)
				&& actvoucherGridBodyList.equalsIgnoreCase(expvoucherGridBodyList))
		{
			System.out.println("Test Pass : Qty Preload Value is displaying Correct");
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 782, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Qty Preload Value is displaying Wrong");
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 782, 9, resFail);
			return false;
		}
	}
	
	
	
	public boolean checkVoucherDataOnCopyAndPasteFromClipBoard() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
		toggleBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(copytoClipboardBtn));
		copytoClipboardBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_newBtn));
		new_newBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
		toggleBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pastefromClipboardBtn));
		pastefromClipboardBtn.click();
		
		checkUserFriendlyMessage();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		
		String actcustomerAccountTxt = customerAccountTxt.getAttribute("value");
		String expcustomerAccountTxt = excelReader.getCellData("SmokeSalesInvoiceVAT", 787, 7);
		
		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 787, 8, actcustomerAccountTxt);
		
		System.out.println("customerAccountTxt : "+actcustomerAccountTxt+" Value Expected : "+expcustomerAccountTxt);
		
		String actdepartmentTxt = departmentTxt.getAttribute("value");
		String expdepartmentTxt = excelReader.getCellData("SmokeSalesInvoiceVAT", 788, 7);
		
		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 788, 8, actdepartmentTxt);
		
		System.out.println("departmentTxt : "+actdepartmentTxt+" Value Expected : "+expdepartmentTxt);
		
		String actjurisdictionTxt = jurisdictionTxt.getAttribute("value");
		String expjurisdictionTxt = excelReader.getCellData("SmokeSalesInvoiceVAT", 789, 7);
		
		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 789, 8, actjurisdictionTxt);
		
		System.out.println("jurisdictionTxt : "+actjurisdictionTxt+" Value Expected : "+expjurisdictionTxt);
		
		String actplaceofSupplyTxt = placeofSupplyTxt.getAttribute("value");
		String expplaceofSupplyTxt = excelReader.getCellData("SmokeSalesInvoiceVAT", 790, 7);
		
		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 790, 8, actplaceofSupplyTxt);
		
		System.out.println("placeofSupplyTxt : "+actplaceofSupplyTxt+" Value Expected : "+expplaceofSupplyTxt);
		
		int voucherGridBodyListCount = voucherGridBodyList.size();
		 
		 ArrayList<String> voucherGridBodyListArray = new ArrayList<String>();
		 
		 for(int i=0;i<voucherGridBodyListCount;i++)
		 {
			 String data = voucherGridBodyList.get(i).getText();
			 voucherGridBodyListArray.add(data);
		 }
		 
		 String actvoucherGridBodyList=voucherGridBodyListArray.toString();
		 
		 String expvoucherGridBodyList="[1, HYDERABAD, BR COGS ITEM, Std Rate, Sales - Computers, Pcs, 0.00, 0.00, 30.00, 30.00, 0, 60.00, , , 1.00, 60.00, 0.00, 5.00, 60.00, , , , , 2, HYDERABAD, FIFO COGS ITEM, Zero Rate, Sales - Computers, Pcs, 8.33, 8.33, 0.00, 4.00, 0, 4.00, , , 10.00, 40.00, 0.00, 0.00, 40.00, , , , , 3, HYDERABAD, WA COGS ITEM, Std Rate, Sales - Computers, Pcs, 26.13, 26.13, 0.00, 3.00, 0, 3.00, , , 10.00, 30.00, 0.00, 5.00, 30.00, , , , , 4, HYDERABAD, STD RATE COGS ITEM, Std Rate, Sales - Computers, Pcs, 10.00, 10.00, 30.00, 30.00, 0, 60.00, , , 1.00, 60.00, 7.50, 5.00, 60.00, , , , , 5, , , , , , , , , , , , , , , , , , , , , , ]";
		 
		 excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 791, 8, actvoucherGridBodyList);
		 
		 System.out.println("voucherGridBodyList Actual   : " + actvoucherGridBodyList);
		 System.out.println("voucherGridBodyList Expected : " + expvoucherGridBodyList);
				
		if (actdepartmentTxt.equalsIgnoreCase(expdepartmentTxt) && actcustomerAccountTxt.equalsIgnoreCase(expcustomerAccountTxt)
				&& actjurisdictionTxt.equalsIgnoreCase(expjurisdictionTxt) && actplaceofSupplyTxt.equalsIgnoreCase(expplaceofSupplyTxt)
				&& actvoucherGridBodyList.equalsIgnoreCase(expvoucherGridBodyList))
		{
			System.out.println("Test Pass : Qty Preload Value is displaying Correct");
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 787, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Qty Preload Value is displaying Wrong");
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 787, 9, resFail);
			return false;
		}
	}
	
	
	public boolean checkSavingVocuherForCreditLimitConsumedCustomerWithInputinhMandate() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_20thColumn));
		select2ndRow_20thColumn.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchBtn));
		binSearchBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
		binAutoAllocateBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
		binOkBtn.click();
		
		Thread.sleep(2000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_21thColumn));
		select3rdRow_21thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardExpandBtn));
		rmaoutwardExpandBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAHeaderChkBox));
		searchRMAHeaderChkBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAOkBtn));
		searchRMAOkBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardOkBtn));
		rmaoutwardOkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
				
		String expValidationMessage=excelReader.getCellData("SmokeSalesInvoiceVAT", 792, 7);
		
		String emptyRowsMessage=checkValidationMessage(expValidationMessage);
		
		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 792, 8, expValidationMessage);

		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefcancel));
		billRefcancel.click();
		

		System.out.println("*********************************************** checkSavingSalesVoucherNewWithEmptyRows  ********************************************");
		System.out.println("Entry Page Save Without Body Rows Message Value Actual  : "+emptyRowsMessage+" Value Expected : "+expValidationMessage);	
		
		
		if (emptyRowsMessage.equalsIgnoreCase(expValidationMessage))
		{
			System.out.println("Test Pass : Qty Preload Value is displaying Correct");
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 792, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Qty Preload Value is displaying Wrong");
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 792, 9, resFail);
			return false;
		}
	}
	
	
	
	
	public boolean checkSavingSalesInvoiceVoucherWithCustomerChange() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		 customerAccountTxt.click();
		 customerAccountTxt.sendKeys(Keys.END);
		 customerAccountTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		 Thread.sleep(2000);
		 customerAccountTxt.sendKeys(Keys.SPACE);
		 
		 int customercount=customerAccountListCount.size();
		 
		 System.err.println(customercount);
		 
		 for(int i=0 ; i < customercount ;i++)
		 {
			 String data=customerAccountListCount.get(i).getText();
			 
			 if(data.equalsIgnoreCase(excelReader.getCellData("SmokeSalesInvoiceVAT", 793, 6)))
			 {
				 customerAccountListCount.get(i).click();
				 
				 break;
			 }
		 }
			
		 customerAccountTxt.sendKeys(Keys.TAB);
		 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_20thColumn));
		select2ndRow_20thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Bin));
		enter_Bin.sendKeys(Keys.SPACE);
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchBtn));
		binSearchBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
		binAutoAllocateBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
		binOkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_21thColumn));
		select3rdRow_21thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
		enter_RMA.sendKeys(Keys.SPACE);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardExpandBtn));
		rmaoutwardExpandBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAHeaderChkBox));
		searchRMAHeaderChkBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAOkBtn));
		searchRMAOkBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardOkBtn));
		rmaoutwardOkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(breakUpByTagTab));
		breakUpByTagTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
		billRefNewReferenceTxt.click();
		
		
		String actBillNewReference,actBillAmtAdjAgainstNewRefInOtherVouchers,actBillTransactionCurrency,actBillBaseCurrency,actBillLocalCurrency,actBillBalanceNewRefAmount,actBillBreakUpByTagDepartment,actBillBreakUpByTagBaseCurrency,actBillBreakUpByTagBillCurrency,actBillBreakUpByTagLocalCurrency,actBillAmtAdjustedInTransactionCurrency,actBillBalanceAmtToBeAdjustedInTransactionCurrency,act13;
		String expBillNewReference,expBillAmtAdjAgainstNewRefInOtherVouchers,expBillTransactionCurrency,expBillBaseCurrency,expBillLocalCurrency,expBillBalanceNewRefAmount,expBillBreakUpByTagDepartment,expBillBreakUpByTagBaseCurrency,expBillBreakUpByTagBillCurrency,expBillBreakUpByTagLocalCurrency,expBillAmtAdjustedInTransactionCurrency,expBillBalanceAmtToBeAdjustedInTransactionCurrency;
		
		actBillNewReference									=billRefNewReferenceTxt.getAttribute("value");
 		actBillAmtAdjAgainstNewRefInOtherVouchers			=amtAdjustedAgainstNewREfinOtherVouchers.getText();
 		actBillTransactionCurrency							=transactionCurency.getText();
 		actBillBaseCurrency									=baseCurrency.getText();
 		actBillLocalCurrency								=localCurrencyDhs.getText();
 		
 		actBillBalanceNewRefAmount							=balanceNewReferenceAmt.getText();
 		
 		actBillBreakUpByTagDepartment						=breakUpByTagDepartment.getText();
 		actBillBreakUpByTagBaseCurrency						=breakUpByTagBaseCurrency.getText();
 		actBillBreakUpByTagBillCurrency						=breakUpByTagBillCurrency.getText();
 		
 		actBillBreakUpByTagLocalCurrency					=breakUpByTagBaseLocalCurrency.getText();
 		actBillAmtAdjustedInTransactionCurrency				=billRefAdjustAmountInTransCurency.getText();
 		actBillBalanceAmtToBeAdjustedInTransactionCurrency	=billRefBalanceAmountAdjustInTrnasCurrency.getText();
 		
 		
 		expBillNewReference									=excelReader.getCellData("SmokeSalesInvoiceVAT", 793, 7);
 		expBillAmtAdjAgainstNewRefInOtherVouchers			=excelReader.getCellData("SmokeSalesInvoiceVAT", 794, 7);
 		expBillTransactionCurrency							=excelReader.getCellData("SmokeSalesInvoiceVAT", 795, 7);
 		expBillBaseCurrency									=excelReader.getCellData("SmokeSalesInvoiceVAT", 796, 7);
 		expBillLocalCurrency								=excelReader.getCellData("SmokeSalesInvoiceVAT", 797, 7);
 		
 		expBillBalanceNewRefAmount							=excelReader.getCellData("SmokeSalesInvoiceVAT", 798, 7);
 		
 		expBillBreakUpByTagDepartment						=excelReader.getCellData("SmokeSalesInvoiceVAT", 799, 7);
 		expBillBreakUpByTagBillCurrency						=excelReader.getCellData("SmokeSalesInvoiceVAT", 800, 7);
 		expBillBreakUpByTagBaseCurrency						=excelReader.getCellData("SmokeSalesInvoiceVAT", 801, 7);
 		
 		
 		expBillBreakUpByTagLocalCurrency					=excelReader.getCellData("SmokeSalesInvoiceVAT", 802, 7);
 		expBillAmtAdjustedInTransactionCurrency				=excelReader.getCellData("SmokeSalesInvoiceVAT", 803, 7);
 		expBillBalanceAmtToBeAdjustedInTransactionCurrency	=excelReader.getCellData("SmokeSalesInvoiceVAT", 804, 7);
 		
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 793, 8, actBillNewReference);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 794, 8, actBillAmtAdjAgainstNewRefInOtherVouchers);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 795, 8, actBillTransactionCurrency);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 796, 8, actBillBaseCurrency);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 797, 8, actBillLocalCurrency);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 798, 8, actBillBalanceNewRefAmount);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 799, 8, actBillBreakUpByTagDepartment);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 800, 8, actBillBreakUpByTagBaseCurrency);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 801, 8, actBillBreakUpByTagBillCurrency);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 802, 8, actBillBreakUpByTagLocalCurrency);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 803, 8, actBillAmtAdjustedInTransactionCurrency);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 804, 8, actBillBalanceAmtToBeAdjustedInTransactionCurrency);
 	
 		System.out.println("*********************************** checkCancelBinPopupScreenDeleteRowAndSaveVoucher  ************************************");


 		System.out.println("actBillNewReference								   : "+ actBillNewReference									+" Value Expected : "+expBillNewReference);
 		System.out.println("actBillAmtAdjAgainstNewRefInOtherVouchers		   : "+actBillAmtAdjAgainstNewRefInOtherVouchers			+" Value Expected : "+expBillAmtAdjAgainstNewRefInOtherVouchers);
 		System.out.println("actBillTransactionCurrency						   : "+actBillTransactionCurrency							+" Value Expected : "+expBillTransactionCurrency);
 		System.out.println("actBillBaseCurrency								   : "+actBillBaseCurrency									+" Value Expected : "+ expBillBaseCurrency);
 		System.out.println("actBillLocalCurrency							   : "+actBillLocalCurrency									+" Value Expected : "+expBillLocalCurrency);
 		System.out.println("actBillBalanceNewRefAmount						   : "+ actBillBalanceNewRefAmount							+" Value Expected : "+expBillBalanceNewRefAmount);
        System.out.println("actBillBreakUpByTagDepartment					   : "+actBillBreakUpByTagDepartment						+" Value Expected : "+expBillBreakUpByTagDepartment);
 		System.out.println("actBillBreakUpByTagBaseCurrency				       : "+actBillBreakUpByTagBaseCurrency						+" Value Expected : "+expBillBreakUpByTagBaseCurrency);
 		System.out.println("actBillBreakUpByTagBillCurrency 				   : "+actBillBreakUpByTagBillCurrency						+" Value Expected : "+expBillBreakUpByTagBillCurrency);
 		System.out.println("actBillBreakUpByTagLocalCurrency				   : "+actBillBreakUpByTagLocalCurrency						+" Value Expected : "+expBillBreakUpByTagLocalCurrency);
 		System.out.println("actBillAmtAdjustedInTransactionCurrency			   : "+actBillAmtAdjustedInTransactionCurrency				+" Value Expected : "+expBillAmtAdjustedInTransactionCurrency);
 		System.out.println("actBillBalanceAmtToBeAdjustedInTransactionCurrency : "+actBillBalanceAmtToBeAdjustedInTransactionCurrency	+" Value Expected : "+expBillBalanceAmtToBeAdjustedInTransactionCurrency);
 		
 	    Thread.sleep(2000);
	   
 	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
	    billRefPickIcon.click();
	   
	    //pick button is click
	   
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(breakUpByTagTab));
 		breakUpByTagTab.click();
 		
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
 		billRefNewReferenceTxt.click();
 		
 		
 		String actBillNewReferencePick,actBillAmtAdjAgainstNewRefInOtherVouchersPick,actBillTransactionCurrencyPick,actBillBaseCurrencyPick,actBillLocalCurrencyPick,actBillBalanceNewRefAmountPick,actBillBreakUpByTagDepartmentPick,actBillBreakUpByTagBaseCurrencyPick,actBillBreakUpByTagBillCurrencyPick,actBillBreakUpByTagLocalCurrencyPick,actBillAmtAdjustedInTransactionCurrencyPick,actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick;
 		String expBillNewReferencePick,expBillAmtAdjAgainstNewRefInOtherVouchersPick,expBillTransactionCurrencyPick,expBillBaseCurrencyPick,expBillLocalCurrencyPick,expBillBalanceNewRefAmountPick,expBillBreakUpByTagDepartmentPick,expBillBreakUpByTagBaseCurrencyPick,expBillBreakUpByTagBillCurrencyPick,expBillBreakUpByTagLocalCurrencyPick,expBillAmtAdjustedInTransactionCurrencyPick,expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick;
 		
 		actBillNewReferencePick									=billRefNewReferenceTxt.getAttribute("value");
 		actBillAmtAdjAgainstNewRefInOtherVouchersPick			=amtAdjustedAgainstNewREfinOtherVouchers.getText();
 		actBillTransactionCurrencyPick							=transactionCurency.getText();
 		actBillBaseCurrencyPick									=baseCurrency.getText();
 		actBillLocalCurrencyPick								=localCurrencyDhs.getText();
 		
 		actBillBalanceNewRefAmountPick							=balanceNewReferenceAmt.getText();
 		
 		actBillBreakUpByTagDepartmentPick						=breakUpByTagDepartment.getText();
 		actBillBreakUpByTagBaseCurrencyPick						=breakUpByTagBaseCurrency.getText();
 		actBillBreakUpByTagBillCurrencyPick						=breakUpByTagBillCurrency.getText();
 		
 		actBillBreakUpByTagLocalCurrencyPick					=breakUpByTagBaseLocalCurrency.getText();
 		actBillAmtAdjustedInTransactionCurrencyPick				=billRefAdjustAmountInTransCurency.getText();
 		actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	=billRefBalanceAmountAdjustInTrnasCurrency.getText();
 		
 		
 		expBillNewReferencePick									=excelReader.getCellData("SmokeSalesInvoiceVAT", 806, 7);
 		expBillAmtAdjAgainstNewRefInOtherVouchersPick			=excelReader.getCellData("SmokeSalesInvoiceVAT", 807, 7);
 		expBillTransactionCurrencyPick							=excelReader.getCellData("SmokeSalesInvoiceVAT", 808, 7);
 		expBillBaseCurrencyPick									=excelReader.getCellData("SmokeSalesInvoiceVAT", 809, 7);
 		expBillLocalCurrencyPick								=excelReader.getCellData("SmokeSalesInvoiceVAT", 810, 7);
 		
 		expBillBalanceNewRefAmountPick							=excelReader.getCellData("SmokeSalesInvoiceVAT", 811, 7);
 		
 		expBillBreakUpByTagDepartmentPick						=excelReader.getCellData("SmokeSalesInvoiceVAT", 812, 7);
 		expBillBreakUpByTagBillCurrencyPick						=excelReader.getCellData("SmokeSalesInvoiceVAT", 813, 7);
 		expBillBreakUpByTagBaseCurrencyPick						=excelReader.getCellData("SmokeSalesInvoiceVAT", 814, 7);
 		
 		
 		expBillBreakUpByTagLocalCurrencyPick					=excelReader.getCellData("SmokeSalesInvoiceVAT", 815, 7);
 		expBillAmtAdjustedInTransactionCurrencyPick				=excelReader.getCellData("SmokeSalesInvoiceVAT", 816, 7);
 		expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	=excelReader.getCellData("SmokeSalesInvoiceVAT", 817, 7);
 		
 		
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 806, 8, actBillNewReferencePick);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 807, 8, actBillAmtAdjAgainstNewRefInOtherVouchersPick);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 808, 8, actBillTransactionCurrencyPick);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 809, 8, actBillBaseCurrencyPick);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 810, 8, actBillLocalCurrencyPick);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 811, 8, actBillBalanceNewRefAmountPick);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 812, 8, actBillBreakUpByTagDepartmentPick);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 813, 8, actBillBreakUpByTagBaseCurrencyPick);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 814, 8, actBillBreakUpByTagBillCurrencyPick);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 815, 8, actBillBreakUpByTagLocalCurrencyPick);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 816, 8, actBillAmtAdjustedInTransactionCurrencyPick);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 817, 8, actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick);
			
		System.out.println("actBillNewReferencePick 								: "+actBillNewReferencePick									+ " Value Expected : "+expBillNewReferencePick);
 		System.out.println("actBillAmtAdjAgainstNewRefInOtherVouchersPick			: " + actBillAmtAdjAgainstNewRefInOtherVouchersPick			+ "	Value Expected : "+expBillAmtAdjAgainstNewRefInOtherVouchersPick);
 		System.out.println("actBillTransactionCurrencyPick							: "+ actBillTransactionCurrencyPick							+ " Value Expected : "+expBillTransactionCurrencyPick);
 		System.out.println("actBillBaseCurrencyPick									: "+ actBillBaseCurrencyPick								+ " Value Expected : "+expBillBaseCurrencyPick);
 		System.out.println("actBillLocalCurrencyPick								: "+ actBillLocalCurrencyPick								+ " Value Expected : "+expBillLocalCurrencyPick);
 		System.out.println("actBillBalanceNewRefAmountPick							: "+ actBillBalanceNewRefAmountPick							+ " Value Expected : "+expBillBalanceNewRefAmountPick);
        System.out.println("actBillBreakUpByTagDepartmentPick						: "+ actBillBreakUpByTagDepartmentPick						+ " Value Expected : "+expBillBreakUpByTagDepartmentPick);
 		System.out.println("actBillBreakUpByTagBaseCurrencyPick						: "+ actBillBreakUpByTagBaseCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagBaseCurrencyPick);
 		System.out.println("actBillBreakUpByTagBillCurrencyPick						: "+ actBillBreakUpByTagBillCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagBillCurrencyPick);
 		System.out.println("actBillBreakUpByTagLocalCurrencyPick					: "+ actBillBreakUpByTagLocalCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagLocalCurrencyPick);
 		System.out.println("actBillAmtAdjustedInTransactionCurrencyPick				: "+ actBillAmtAdjustedInTransactionCurrencyPick			+ " Value Expected : "+expBillAmtAdjustedInTransactionCurrencyPick);
 		System.out.println("actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick  : "+ actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	+ " Value Expected : "+expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		boolean savingMessage=checkVoucherSavingMessage(docno);
		
		System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
		
		if(savingMessage==true &&
				
				actBillNewReference.equalsIgnoreCase(expBillNewReference) &&
				actBillAmtAdjAgainstNewRefInOtherVouchers.equalsIgnoreCase(expBillAmtAdjAgainstNewRefInOtherVouchers) &&
				actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 				
				actBillBaseCurrency.equalsIgnoreCase(actBillBaseCurrency) &&
				actBillLocalCurrency.equalsIgnoreCase(actBillLocalCurrency) &&
				actBillBalanceNewRefAmount.equalsIgnoreCase(actBillBalanceNewRefAmount) &&
				actBillBreakUpByTagDepartment.equalsIgnoreCase(actBillBreakUpByTagDepartment) &&
				actBillBreakUpByTagBaseCurrency.equalsIgnoreCase(actBillBreakUpByTagBaseCurrency) &&
				actBillBreakUpByTagBillCurrency.equalsIgnoreCase(actBillBreakUpByTagBillCurrency) &&
				actBillBreakUpByTagLocalCurrency.equalsIgnoreCase(actBillBreakUpByTagLocalCurrency) &&
				actBillAmtAdjustedInTransactionCurrency.equalsIgnoreCase(actBillAmtAdjustedInTransactionCurrency) &&
				actBillBalanceAmtToBeAdjustedInTransactionCurrency.equalsIgnoreCase(actBillBalanceAmtToBeAdjustedInTransactionCurrency) &&
				
				
				actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) &&
				actBillAmtAdjAgainstNewRefInOtherVouchersPick.equalsIgnoreCase(expBillAmtAdjAgainstNewRefInOtherVouchersPick) &&
				actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) &&
				actBillBaseCurrencyPick.equalsIgnoreCase(actBillBaseCurrencyPick) &&
				actBillLocalCurrencyPick.equalsIgnoreCase(actBillLocalCurrencyPick) &&
				actBillBalanceNewRefAmountPick.equalsIgnoreCase(actBillBalanceNewRefAmountPick) &&
				actBillBreakUpByTagDepartmentPick.equalsIgnoreCase(actBillBreakUpByTagDepartmentPick) &&
				actBillBreakUpByTagBaseCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagBaseCurrencyPick) &&
				actBillBreakUpByTagBillCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagBillCurrencyPick) &&
				actBillBreakUpByTagLocalCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagLocalCurrencyPick) &&
				actBillAmtAdjustedInTransactionCurrencyPick.equalsIgnoreCase(actBillAmtAdjustedInTransactionCurrencyPick) &&
				actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick.equalsIgnoreCase(actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick))
		{
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 793, 9, resPass);
			return true;
				
		}
		else
		{
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 793, 9, resPass);
			return false;	
		}
	}
	
	
	
	
	public boolean checkEntryPageDeleteOptionOnPreviousButtonInSalesInvoice() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();
		
		checkUserFriendlyMessage();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));
		new_DeleteBtn.click();
		
		
		getWaitForAlert();
		
		String actAlert=getAlert().getText();
		
		String expAlert=excelReader.getCellData("SmokeSalesInvoiceVAT", 819, 7);
		
		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 819, 8, actAlert);
		
		getAlert().accept();
		
		Thread.sleep(2000);
		
		boolean deleteMessage=checkEntryPageDeleteMessage();
		
		String actdeleteMessage = Boolean.toString(deleteMessage);
		
		String expdeleteMessage=excelReader.getCellData("SmokeSalesInvoiceVAT", 820, 7);
		
		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 820, 8, actdeleteMessage);
		
		System.out.println("************************************* checkEntryPageDeleteOptionOnPreviousButtonInSalesInvoice  *********************************");
        
        System.out.println("Alert          : "+actAlert         +"  Value Expected : "+expAlert);
		
		System.out.println("error Message  :  "+actdeleteMessage +" value Expected : "+expdeleteMessage);
		
		if(actAlert.equalsIgnoreCase(expAlert) && actdeleteMessage.equalsIgnoreCase(expdeleteMessage))
		{
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 819, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Not Deleted");
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 819, 9, resPass);
			return false;
		}
	}

	
	
	

	public boolean checkSavingSalesInvoiceVoucherWithCopyDocumentOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
		toggleBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(copyDocumentOption));
		copyDocumentOption.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cd_FirstChkBox));
		cd_FirstChkBox.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cd_OkBtn));
		cd_OkBtn.click();
		
		
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		 customerAccountTxt.click();
		 customerAccountTxt.sendKeys(Keys.END);
		 customerAccountTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		 Thread.sleep(2000);
		 customerAccountTxt.sendKeys(Keys.SPACE);
		 
		 int customercount=customerAccountListCount.size();
		 
		 System.err.println(customercount);
		 
		 for(int i=0 ; i < customercount ;i++)
		 {
			 String data=customerAccountListCount.get(i).getText();
			 
			 if(data.equalsIgnoreCase(excelReader.getCellData("SmokeSalesInvoiceVAT", 821, 6)))
			 {
				 customerAccountListCount.get(i).click();
				 
				 break;
			 }
		 }
			
		 customerAccountTxt.sendKeys(Keys.TAB);
		 
		 Thread.sleep(2000);
		 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_20thColumn));
		select2ndRow_20thColumn.click();
		
		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Bin));
		enter_Bin.sendKeys(Keys.SPACE);*/
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchBtn));
		binSearchBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
		binAutoAllocateBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
		binOkBtn.click();
		
		Thread.sleep(2000);
		
		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
		select3rdRow_1stColumn.click();*/
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_21thColumn));
		select3rdRow_21thColumn.click();
		
		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
		enter_RMA.sendKeys(Keys.SPACE);*/
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardExpandBtn));
		rmaoutwardExpandBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAHeaderChkBox));
		searchRMAHeaderChkBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAOkBtn));
		searchRMAOkBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardOkBtn));
		rmaoutwardOkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(breakUpByTagTab));
		breakUpByTagTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
		billRefNewReferenceTxt.click();
		
		
		String actBillNewReference,actBillAmtAdjAgainstNewRefInOtherVouchers,actBillTransactionCurrency,actBillBaseCurrency,actBillLocalCurrency,actBillBalanceNewRefAmount,actBillBreakUpByTagDepartment,actBillBreakUpByTagBaseCurrency,actBillBreakUpByTagBillCurrency,actBillBreakUpByTagLocalCurrency,actBillAmtAdjustedInTransactionCurrency,actBillBalanceAmtToBeAdjustedInTransactionCurrency,act13;
		String expBillNewReference,expBillAmtAdjAgainstNewRefInOtherVouchers,expBillTransactionCurrency,expBillBaseCurrency,expBillLocalCurrency,expBillBalanceNewRefAmount,expBillBreakUpByTagDepartment,expBillBreakUpByTagBaseCurrency,expBillBreakUpByTagBillCurrency,expBillBreakUpByTagLocalCurrency,expBillAmtAdjustedInTransactionCurrency,expBillBalanceAmtToBeAdjustedInTransactionCurrency;
		
		actBillNewReference									=billRefNewReferenceTxt.getAttribute("value");
 		actBillAmtAdjAgainstNewRefInOtherVouchers			=amtAdjustedAgainstNewREfinOtherVouchers.getText();
 		actBillTransactionCurrency							=transactionCurency.getText();
 		actBillBaseCurrency									=baseCurrency.getText();
 		actBillLocalCurrency								=localCurrencyDhs.getText();
 		
 		actBillBalanceNewRefAmount							=balanceNewReferenceAmt.getText();
 		
 		actBillBreakUpByTagDepartment						=breakUpByTagDepartment.getText();
 		actBillBreakUpByTagBaseCurrency						=breakUpByTagBaseCurrency.getText();
 		actBillBreakUpByTagBillCurrency						=breakUpByTagBillCurrency.getText();
 		
 		actBillBreakUpByTagLocalCurrency					=breakUpByTagBaseLocalCurrency.getText();
 		actBillAmtAdjustedInTransactionCurrency				=billRefAdjustAmountInTransCurency.getText();
 		actBillBalanceAmtToBeAdjustedInTransactionCurrency	=billRefBalanceAmountAdjustInTrnasCurrency.getText();
 		
 		
 		expBillNewReference									=excelReader.getCellData("SmokeSalesInvoiceVAT", 821, 7);
 		expBillAmtAdjAgainstNewRefInOtherVouchers			=excelReader.getCellData("SmokeSalesInvoiceVAT", 822, 7);
 		expBillTransactionCurrency							=excelReader.getCellData("SmokeSalesInvoiceVAT", 823, 7);
 		expBillBaseCurrency									=excelReader.getCellData("SmokeSalesInvoiceVAT", 824, 7);
 		expBillLocalCurrency								=excelReader.getCellData("SmokeSalesInvoiceVAT", 825, 7);
 		
 		expBillBalanceNewRefAmount							=excelReader.getCellData("SmokeSalesInvoiceVAT", 826, 7);
 		
 		expBillBreakUpByTagDepartment						=excelReader.getCellData("SmokeSalesInvoiceVAT", 827, 7);
 		expBillBreakUpByTagBillCurrency						=excelReader.getCellData("SmokeSalesInvoiceVAT", 828, 7);
 		expBillBreakUpByTagBaseCurrency						=excelReader.getCellData("SmokeSalesInvoiceVAT", 829, 7);
 		
 		
 		expBillBreakUpByTagLocalCurrency					=excelReader.getCellData("SmokeSalesInvoiceVAT", 830, 7);
 		expBillAmtAdjustedInTransactionCurrency				=excelReader.getCellData("SmokeSalesInvoiceVAT", 831, 7);
 		expBillBalanceAmtToBeAdjustedInTransactionCurrency	=excelReader.getCellData("SmokeSalesInvoiceVAT", 832, 7);
 		
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 821, 8, actBillNewReference);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 822, 8, actBillAmtAdjAgainstNewRefInOtherVouchers);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 823, 8, actBillTransactionCurrency);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 824, 8, actBillBaseCurrency);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 825, 8, actBillLocalCurrency);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 826, 8, actBillBalanceNewRefAmount);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 827, 8, actBillBreakUpByTagDepartment);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 828, 8, actBillBreakUpByTagBaseCurrency);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 829, 8, actBillBreakUpByTagBillCurrency);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 830, 8, actBillBreakUpByTagLocalCurrency);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 831, 8, actBillAmtAdjustedInTransactionCurrency);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 832, 8, actBillBalanceAmtToBeAdjustedInTransactionCurrency);
 	
 		System.out.println("*********************************** checkCancelBinPopupScreenDeleteRowAndSaveVoucher  ************************************");


 		System.out.println("actBillNewReference								   : "+ actBillNewReference									+" Value Expected : "+expBillNewReference);
 		System.out.println("actBillAmtAdjAgainstNewRefInOtherVouchers		   : "+actBillAmtAdjAgainstNewRefInOtherVouchers			+" Value Expected : "+expBillAmtAdjAgainstNewRefInOtherVouchers);
 		System.out.println("actBillTransactionCurrency						   : "+actBillTransactionCurrency							+" Value Expected : "+expBillTransactionCurrency);
 		System.out.println("actBillBaseCurrency								   : "+actBillBaseCurrency									+" Value Expected : "+ expBillBaseCurrency);
 		System.out.println("actBillLocalCurrency							   : "+actBillLocalCurrency									+" Value Expected : "+expBillLocalCurrency);
 		System.out.println("actBillBalanceNewRefAmount						   : "+ actBillBalanceNewRefAmount							+" Value Expected : "+expBillBalanceNewRefAmount);
        System.out.println("actBillBreakUpByTagDepartment					   : "+actBillBreakUpByTagDepartment						+" Value Expected : "+expBillBreakUpByTagDepartment);
 		System.out.println("actBillBreakUpByTagBaseCurrency				       : "+actBillBreakUpByTagBaseCurrency						+" Value Expected : "+expBillBreakUpByTagBaseCurrency);
 		System.out.println("actBillBreakUpByTagBillCurrency 				   : "+actBillBreakUpByTagBillCurrency						+" Value Expected : "+expBillBreakUpByTagBillCurrency);
 		System.out.println("actBillBreakUpByTagLocalCurrency				   : "+actBillBreakUpByTagLocalCurrency						+" Value Expected : "+expBillBreakUpByTagLocalCurrency);
 		System.out.println("actBillAmtAdjustedInTransactionCurrency			   : "+actBillAmtAdjustedInTransactionCurrency				+" Value Expected : "+expBillAmtAdjustedInTransactionCurrency);
 		System.out.println("actBillBalanceAmtToBeAdjustedInTransactionCurrency : "+actBillBalanceAmtToBeAdjustedInTransactionCurrency	+" Value Expected : "+expBillBalanceAmtToBeAdjustedInTransactionCurrency);
 		
 	    Thread.sleep(2000);
	   
 	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
	    billRefPickIcon.click();
	   
	    //pick button is click
	   
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(breakUpByTagTab));
 		breakUpByTagTab.click();
 		
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
 		billRefNewReferenceTxt.click();
 		
 		
 		String actBillNewReferencePick,actBillAmtAdjAgainstNewRefInOtherVouchersPick,actBillTransactionCurrencyPick,actBillBaseCurrencyPick,actBillLocalCurrencyPick,actBillBalanceNewRefAmountPick,actBillBreakUpByTagDepartmentPick,actBillBreakUpByTagBaseCurrencyPick,actBillBreakUpByTagBillCurrencyPick,actBillBreakUpByTagLocalCurrencyPick,actBillAmtAdjustedInTransactionCurrencyPick,actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick;
 		String expBillNewReferencePick,expBillAmtAdjAgainstNewRefInOtherVouchersPick,expBillTransactionCurrencyPick,expBillBaseCurrencyPick,expBillLocalCurrencyPick,expBillBalanceNewRefAmountPick,expBillBreakUpByTagDepartmentPick,expBillBreakUpByTagBaseCurrencyPick,expBillBreakUpByTagBillCurrencyPick,expBillBreakUpByTagLocalCurrencyPick,expBillAmtAdjustedInTransactionCurrencyPick,expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick;
 		
 		actBillNewReferencePick									=billRefNewReferenceTxt.getAttribute("value");
 		actBillAmtAdjAgainstNewRefInOtherVouchersPick			=amtAdjustedAgainstNewREfinOtherVouchers.getText();
 		actBillTransactionCurrencyPick							=transactionCurency.getText();
 		actBillBaseCurrencyPick									=baseCurrency.getText();
 		actBillLocalCurrencyPick								=localCurrencyDhs.getText();
 		
 		actBillBalanceNewRefAmountPick							=balanceNewReferenceAmt.getText();
 		
 		actBillBreakUpByTagDepartmentPick						=breakUpByTagDepartment.getText();
 		actBillBreakUpByTagBaseCurrencyPick						=breakUpByTagBaseCurrency.getText();
 		actBillBreakUpByTagBillCurrencyPick						=breakUpByTagBillCurrency.getText();
 		
 		actBillBreakUpByTagLocalCurrencyPick					=breakUpByTagBaseLocalCurrency.getText();
 		actBillAmtAdjustedInTransactionCurrencyPick				=billRefAdjustAmountInTransCurency.getText();
 		actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	=billRefBalanceAmountAdjustInTrnasCurrency.getText();
 		
 		
 		expBillNewReferencePick									=excelReader.getCellData("SmokeSalesInvoiceVAT", 834, 7);
 		expBillAmtAdjAgainstNewRefInOtherVouchersPick			=excelReader.getCellData("SmokeSalesInvoiceVAT", 835, 7);
 		expBillTransactionCurrencyPick							=excelReader.getCellData("SmokeSalesInvoiceVAT", 836, 7);
 		expBillBaseCurrencyPick									=excelReader.getCellData("SmokeSalesInvoiceVAT", 837, 7);
 		expBillLocalCurrencyPick								=excelReader.getCellData("SmokeSalesInvoiceVAT", 838, 7);
 		
 		expBillBalanceNewRefAmountPick							=excelReader.getCellData("SmokeSalesInvoiceVAT", 839, 7);
 		
 		expBillBreakUpByTagDepartmentPick						=excelReader.getCellData("SmokeSalesInvoiceVAT", 840, 7);
 		expBillBreakUpByTagBillCurrencyPick						=excelReader.getCellData("SmokeSalesInvoiceVAT", 841, 7);
 		expBillBreakUpByTagBaseCurrencyPick						=excelReader.getCellData("SmokeSalesInvoiceVAT", 842, 7);
 		
 		
 		expBillBreakUpByTagLocalCurrencyPick					=excelReader.getCellData("SmokeSalesInvoiceVAT", 843, 7);
 		expBillAmtAdjustedInTransactionCurrencyPick				=excelReader.getCellData("SmokeSalesInvoiceVAT", 844, 7);
 		expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	=excelReader.getCellData("SmokeSalesInvoiceVAT", 845, 7);
 		
 		
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 834, 8, actBillNewReferencePick);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 835, 8, actBillAmtAdjAgainstNewRefInOtherVouchersPick);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 836, 8, actBillTransactionCurrencyPick);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 837, 8, actBillBaseCurrencyPick);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 838, 8, actBillLocalCurrencyPick);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 839, 8, actBillBalanceNewRefAmountPick);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 840, 8, actBillBreakUpByTagDepartmentPick);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 841, 8, actBillBreakUpByTagBaseCurrencyPick);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 842, 8, actBillBreakUpByTagBillCurrencyPick);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 843, 8, actBillBreakUpByTagLocalCurrencyPick);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 844, 8, actBillAmtAdjustedInTransactionCurrencyPick);
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 845, 8, actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick);
			
		System.out.println("actBillNewReferencePick 								: "+actBillNewReferencePick									+ " Value Expected : "+expBillNewReferencePick);
 		System.out.println("actBillAmtAdjAgainstNewRefInOtherVouchersPick			: " + actBillAmtAdjAgainstNewRefInOtherVouchersPick			+ "	Value Expected : "+expBillAmtAdjAgainstNewRefInOtherVouchersPick);
 		System.out.println("actBillTransactionCurrencyPick							: "+ actBillTransactionCurrencyPick							+ " Value Expected : "+expBillTransactionCurrencyPick);
 		System.out.println("actBillBaseCurrencyPick									: "+ actBillBaseCurrencyPick								+ " Value Expected : "+expBillBaseCurrencyPick);
 		System.out.println("actBillLocalCurrencyPick								: "+ actBillLocalCurrencyPick								+ " Value Expected : "+expBillLocalCurrencyPick);
 		System.out.println("actBillBalanceNewRefAmountPick							: "+ actBillBalanceNewRefAmountPick							+ " Value Expected : "+expBillBalanceNewRefAmountPick);
        System.out.println("actBillBreakUpByTagDepartmentPick						: "+ actBillBreakUpByTagDepartmentPick						+ " Value Expected : "+expBillBreakUpByTagDepartmentPick);
 		System.out.println("actBillBreakUpByTagBaseCurrencyPick						: "+ actBillBreakUpByTagBaseCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagBaseCurrencyPick);
 		System.out.println("actBillBreakUpByTagBillCurrencyPick						: "+ actBillBreakUpByTagBillCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagBillCurrencyPick);
 		System.out.println("actBillBreakUpByTagLocalCurrencyPick					: "+ actBillBreakUpByTagLocalCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagLocalCurrencyPick);
 		System.out.println("actBillAmtAdjustedInTransactionCurrencyPick				: "+ actBillAmtAdjustedInTransactionCurrencyPick			+ " Value Expected : "+expBillAmtAdjustedInTransactionCurrencyPick);
 		System.out.println("actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick  : "+ actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	+ " Value Expected : "+expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		boolean savingMessage=checkVoucherSavingMessage(docno);
		
		System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
		
		if(savingMessage==true &&
				
				actBillNewReference.equalsIgnoreCase(expBillNewReference) &&
				actBillAmtAdjAgainstNewRefInOtherVouchers.equalsIgnoreCase(expBillAmtAdjAgainstNewRefInOtherVouchers) &&
				actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 				
				actBillBaseCurrency.equalsIgnoreCase(actBillBaseCurrency) &&
				actBillLocalCurrency.equalsIgnoreCase(actBillLocalCurrency) &&
				actBillBalanceNewRefAmount.equalsIgnoreCase(actBillBalanceNewRefAmount) &&
				actBillBreakUpByTagDepartment.equalsIgnoreCase(actBillBreakUpByTagDepartment) &&
				actBillBreakUpByTagBaseCurrency.equalsIgnoreCase(actBillBreakUpByTagBaseCurrency) &&
				actBillBreakUpByTagBillCurrency.equalsIgnoreCase(actBillBreakUpByTagBillCurrency) &&
				actBillBreakUpByTagLocalCurrency.equalsIgnoreCase(actBillBreakUpByTagLocalCurrency) &&
				actBillAmtAdjustedInTransactionCurrency.equalsIgnoreCase(actBillAmtAdjustedInTransactionCurrency) &&
				actBillBalanceAmtToBeAdjustedInTransactionCurrency.equalsIgnoreCase(actBillBalanceAmtToBeAdjustedInTransactionCurrency) &&
				
				
				actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) &&
				actBillAmtAdjAgainstNewRefInOtherVouchersPick.equalsIgnoreCase(expBillAmtAdjAgainstNewRefInOtherVouchersPick) &&
				actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) &&
				actBillBaseCurrencyPick.equalsIgnoreCase(actBillBaseCurrencyPick) &&
				actBillLocalCurrencyPick.equalsIgnoreCase(actBillLocalCurrencyPick) &&
				actBillBalanceNewRefAmountPick.equalsIgnoreCase(actBillBalanceNewRefAmountPick) &&
				actBillBreakUpByTagDepartmentPick.equalsIgnoreCase(actBillBreakUpByTagDepartmentPick) &&
				actBillBreakUpByTagBaseCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagBaseCurrencyPick) &&
				actBillBreakUpByTagBillCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagBillCurrencyPick) &&
				actBillBreakUpByTagLocalCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagLocalCurrencyPick) &&
				actBillAmtAdjustedInTransactionCurrencyPick.equalsIgnoreCase(actBillAmtAdjustedInTransactionCurrencyPick) &&
				actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick.equalsIgnoreCase(actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick))
		{
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 821, 9, resPass);
			return true;
				
		}
		else
		{
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 821, 9, resPass);	
			return false;	
		}
	}
	
	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[1]/table[1]/tbody[1]/tr[1]/td[11]")
	private static WebElement salesInvoicesuspendStatusRow1;
	
	public boolean checkEntryPageSuspendOptionOnPreviousButtonInSalesInvoice() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();
		
		boolean loading=checkLoadingMessage();
		
		System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
		
		Thread.sleep(5000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	    String docno=documentNumberTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();
		
		boolean savingMessage=checkVoucherSavingMessage(docno);
		
		String actsavingMessage = Boolean.toString(savingMessage);
		String expsavingMessage = excelReader.getCellData("SmokeSalesInvoiceVAT", 847, 7);
 		
 		
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 847, 8, actsavingMessage);
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoicesuspendStatusRow1));
		
		String actSuspendedStatus=salesInvoicesuspendStatusRow1.getText();
		
		String expSuspendedStatus=excelReader.getCellData("SmokeSalesInvoiceVAT", 848, 7);
 		
 		
 		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 848, 8, actSuspendedStatus);
 		
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
		voucherhomeCloseBtn.click();
		
		System.out.println("*********************************** checkEntryPageSuspendOptionOnPreviousButtonInSalesInvoice  ************************************");
		
		
		System.out.println("SavingMessage  	  :  "+savingMessage 		   +" Value Expected : "+"TRUE");
		
		System.out.println("SuspendedStatus   : "+actSuspendedStatus       +" value Expected : "+expSuspendedStatus);
		
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(userNameDisplay));
	    userNameDisplay.click();
	
	    Thread.sleep(2000);
	    
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
	    logoutOption.click();
		
		if(savingMessage==true && actSuspendedStatus.equalsIgnoreCase(expSuspendedStatus))
		{
				
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 847, 9, resPass);
				
			return true;
			
		}
		else
		{
			System.out.println("Test Fail : Voucher NOT Suspended Successfully");
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVAT", 847, 9, resFail);
			
			return false;
		}
	}

	
	
	
	
	
	
	
	// Sales Orders
	
	@FindBy(xpath="//*[@id='140']/span")
	private static WebElement  inventoryTransactionsSalesMenu; 
	
	//Sales Order Voucher Starts
		//Reservations
		
		@FindBy(xpath="//a[@class='transaction_viewname_anchor font-5']")
		private static WebElement  homepagePendingSalesQuotations;
		
		@FindBy(xpath="//div[contains(text(),'Reserve')]")
		private static WebElement voucherBodyReserveColumnName;
		
		@FindBy(xpath="//div[contains(text(),'L-Sales Quotations')]")
		private static WebElement voucherBodyLinkSalesQuotationsColumnName;
		
		@FindBy(xpath="//div[contains(text(),'Warehouse')]")
		private static WebElement  salesOrderWarehouseLabel;
		
		@FindBy(xpath="//div[contains(text(),'Quantity')]")
		private static WebElement  salesOrderQtyLabel;
		
		@FindBy(xpath="//label[contains(text(),'Quantity')]")
		private static WebElement  voucherFooterQtyLabel;
		
		@FindBy(xpath="//label[contains(text(),'RD :')]")
		private static WebElement  voucherFooterRDLabel;
		
		@FindBy(xpath="//label[contains(text(),'AQ :')]")
		private static WebElement  voucherFooterAQLabel;
		
		@FindBy(xpath="//label[contains(text(),'FQ :')]")
		private static WebElement  voucherFooterFQLabel;
		
		@FindBy(xpath="//label[contains(text(),'Gross :')]")
		private static WebElement  voucherFooterGrossLabel;
		
		@FindBy(xpath="//*[@id='id_transactionentry_footer_panel_summary_value_net_group']/label[1]")
		private static WebElement  voucherFooterNetLabel;
		
		@FindBy(xpath="//span[@class='icon-left-and-right-panel-icon icon-font6 no_padding_left_right']")
		private static WebElement  voucherMinimizeInfoSideBar;
		



	   //Stock Reservation Pop Up Window Elements

		@FindBy(xpath="//label[@class='modal-title theme_background-color theme_color font-4']")
		private static WebElement stockReservationLabel;
		
		@FindBy(xpath="//button[@class='close icon-close icon-font6 theme_icon-color']")
		private static WebElement stockReservationHeaderCloseBtn; 
		
		// Left Panel Header
		
		
		@FindBy(xpath="//th[@id='Id_Reservation_FGrid_control_heading_1']")
		private static WebElement res_LeftPanelWareHouse; 
		
		@FindBy(xpath="//th[@id='Id_Reservation_FGrid_control_heading_2']")
		private static WebElement res_LeftPanelItemCode; 
		
		@FindBy(xpath="//th[@id='Id_Reservation_FGrid_control_heading_3']")
		private static WebElement res_LeftPanelItemName; 
		
		@FindBy(xpath="//th[@id='Id_Reservation_FGrid_control_heading_4']")
		private static WebElement res_LeftPanelItemQty; 
		
		@FindBy(xpath="//th[@id='Id_Reservation_FGrid_control_heading_5']")
		private static WebElement res_LeftPanelDueDate; 
		
		@FindBy(xpath="//th[@id='Id_Reservation_FGrid_control_heading_6']")
		private static WebElement res_LeftPanelBaseUnit; 
		
		// Left Panel Grid
		
		//Row1
		@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_1-1']")
		private static WebElement res_LeftPanelWareHouseRow1; 
		
		@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_1-2']")
		private static WebElement res_LeftPanelItemCodeRow1; 
		
		@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_1-3']")
		private static WebElement res_LeftPanelItemNameRow1; 
		
		@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_1-4']")
		private static WebElement res_LeftPanelItemQtyRow1; 
		
		@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_1-5']")
		private static WebElement res_LeftPanelDueDateRow1; 
		
		@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_1-6']")
		private static WebElement res_LeftPanelBaseUnitRow1; 
		
		//Row2
		@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_2-1']")
		private static WebElement res_LeftPanelWareHouseRow2; 
		
		@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_2-2']")
		private static WebElement res_LeftPanelItemCodeRow2; 
		
		@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_2-3']")
		private static WebElement res_LeftPanelItemNameRow2; 
		
		@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_2-4']")
		private static WebElement res_LeftPanelItemQtyRow2; 
		
		@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_2-5']")
		private static WebElement res_LeftPanelDueDateRow2; 
		
		@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_2-6']")
		private static WebElement res_LeftPanelBaseUnitRow2; 
		
		//Row3
		@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_3-1']")
		private static WebElement res_LeftPanelWareHouseRow3; 
		
		@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_3-2']")
		private static WebElement res_LeftPanelItemCodeRow3; 
		
		@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_3-3']")
		private static WebElement res_LeftPanelItemNameRow3; 
		
		@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_3-4']")
		private static WebElement res_LeftPanelItemQtyRow3; 
		
		@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_3-5']")
		private static WebElement res_LeftPanelDueDateRow3; 
		
		@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_3-6']")
		private static WebElement res_LeftPanelBaseUnitRow3; 
		
		//Row 4
		@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_4-1']")
		private static WebElement res_LeftPanelWareHouseRow4; 
		
		@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_4-2']")
		private static WebElement res_LeftPanelItemCodeRow4; 
		
		@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_4-3']")
		private static WebElement res_LeftPanelItemNameRow4; 
		
		@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_4-4']")
		private static WebElement res_LeftPanelItemQtyRow4; 
		
		@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_4-5']")
		private static WebElement res_LeftPanelDueDateRow4; 
		
		@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_4-6']")
		private static WebElement res_LeftPanelBaseUnitRow4; 
			
			
		// Body Header for Bin Reservation Screen for Zero Qty
		
		@FindBy(xpath="//th[@id='Id_StockReservation_FGrid_control_heading_2']//div[contains(text(),'Warehouse')]")
		private static WebElement binResNull_BodyWareHouse; 
		
		@FindBy(xpath="//th[@id='Id_StockReservation_FGrid_control_heading_3']//div[contains(text(),'Voucher No')]")
		private static WebElement binResNull_BodyVoucherNo; 
		
		@FindBy(xpath="//th[@id='Id_StockReservation_FGrid_control_heading_4']//div[contains(text(),'Qty to Reserve')]")
		private static WebElement binResNull_BodyQtyToReserve;
		
		@FindBy(xpath="//th[@id='Id_StockReservation_FGrid_control_heading_5']//div[contains(text(),'Available Qty')]")
		private static WebElement binResNull_BodyAvailableQty;
		
		@FindBy(xpath="//th[@id='Id_StockReservation_FGrid_control_heading_6']//div[contains(text(),'Cur Ord Res Qty')]")
		private static WebElement binResNull_BodyCurOrderResQty;
		
		@FindBy(xpath="//th[@id='Id_StockReservation_FGrid_control_heading_7']//div[contains(text(),'Quantity')]")
		private static WebElement binResNull_BodyQty;
		
		@FindBy(xpath="//div[contains(text(),'Pending Order Qty')]")
		private static WebElement binResNull_BodyPendingOrderQty;
		
		@FindBy(xpath="//th[@id='Id_StockReservation_FGrid_control_heading_9']//div[contains(text(),'Released Qty')]")
		private static WebElement binResNull_BodyReleasedQty;
		
		// Body Grid
		// Row1 for Bin Reservation
		
		@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_1-2']")
		private static WebElement binResNull_WarehouseRow1; 
		
		@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_1-3']")
		private static WebElement binResNull_VoucherNoRow1; 
		
		@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_1-4']")
		private static WebElement binResNull_QtyToReserveRow1; 
		
		@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_1-5']")
		private static WebElement binResNull_AvailableQtyRow1; 
		
		@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_1-6']")
		private static WebElement binResNull_CurOrdResQtyRow1; 
		
		@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_1-7']")
		private static WebElement binResNull_QtyRow1; 
		
		@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_1-8']")
		private static WebElement binResNull_PendingOrderQtyRow1; 
		
		@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_1-9']")
		private static WebElement binResNull_ReleasedQtyRow1; 
		
		
		
		
		// Footer
		
		@FindBy(xpath="//li[@id='btnPickQuantity']")
		private static WebElement res_PickBtn;
		
		@FindBy(xpath="//div[contains(text(),'Discard')]")
		private static WebElement res_DiscardBtn;
		
		@FindBy(xpath="//div[@class='col-sm-12 footer_button_image']//span[@class='icon-ok icon-font6']")
		private static WebElement res_OkBtn;
		
		@FindBy(xpath="//div[@class='col-sm-12 footer_button_image']//span[@class='icon-close icon-font6']")
		private static WebElement res_CloseBtn;
		
		
		
		
		
		

		// Body Header for Bin Reservation Screen

		@FindBy(xpath="//th[@id='Id_BinReservation_FGrid_control_heading_2']//div[contains(text(),'Warehouse')]")
		private static WebElement binRes_BodyWareHouse; 
		
		@FindBy(xpath="//th[@id='Id_BinReservation_FGrid_control_heading_3']//div[contains(text(),'Qty to Reserve')]")
		private static WebElement binRes_BodyQtyToReserve;

		@FindBy(xpath="//th[@id='Id_BinReservation_FGrid_control_heading_4']//div[contains(text(),'Bin')]")
		private static WebElement binRes_BodyBin; 
		
		@FindBy(xpath="//th[@id='Id_BinReservation_FGrid_control_heading_5']//div[contains(text(),'Available Qty')]")
		private static WebElement binRes_BodyAvailableQty;
		
		@FindBy(xpath="//th[@id='Id_BinReservation_FGrid_control_heading_6']//div[contains(text(),'Released Qty')]")
		private static WebElement binRes_BodyReleasedQty;
		
		@FindBy(xpath="//div[contains(text(),'Total Reserved Qty')]")
		private static WebElement binRes_BodyTotalReservedQty;
		
		@FindBy(xpath="//div[contains(text(),'Bin Qty')]")
		private static WebElement binRes_BodyBinQty;
		
		@FindBy(xpath="//th[@id='Id_BinReservation_FGrid_control_heading_9']//div[contains(text(),'Skid Id')]")
		private static WebElement binRes_BodySkidId;
		
		@FindBy(xpath="//th[@id='Id_BinReservation_FGrid_control_heading_10']//div[@class='no-select'][contains(text(),'Allocation Status')]")
		private static WebElement binRes_BodyAllocStatus;
		
		@FindBy(xpath="//div[contains(text(),'Inv Status')]")
		private static WebElement binRes_BodyInvStatus;
		
		@FindBy(xpath="//th[@id='Id_BinReservation_FGrid_control_heading_12']//div[@class='no-select'][contains(text(),'Lot No')]")
		private static WebElement binRes_BodyLotNo;
		
		// Body Grid
		// Row1 for Bin Reservation
		
		@FindBy(xpath="//*[@id='Id_BinReservation_FGrid_col_1-2']")
		private static WebElement binRes_WarehouseRow1; 
		
		@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_1-3']")
		private static WebElement binRes_QtyToReserveRow1; 
		
		@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_1-4']")
		private static WebElement binRes_BinNoRow1;
		
		@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_1-5']")
		private static WebElement binRes_AvailableQtyRow1; 
		
		@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_1-6']")
		private static WebElement binRes_ReleaseQtyRow1;
		
		@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_1-7']")
		private static WebElement binRes_TotalreservedQtyRow1; 
		
		@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_1-8']")
		private static WebElement binRes_BinQtyRow1; 
		
		@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_1-9']")
		private static WebElement binRes_SkidIdRow1;
		
		@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_1-10']")
		private static WebElement binRes_AllocStatusRow1; 
		
		@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_1-11']")
		private static WebElement binRes_InvStatusRow1;
		
		@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_1-12']")
		private static WebElement binRes_LotNoRow1;
		
		// Row 2
		
		@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_2-2']")
		private static WebElement binRes_WarehouseRow2; 
		
		@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_2-3']")
		private static WebElement binRes_QtyToReserveRow2; 
		
		@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_2-4']")
		private static WebElement binRes_BinNoRow2;
		
		@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_2-5']")
		private static WebElement binRes_AvailableQtyRow2; 
		
		@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_2-6']")
		private static WebElement binRes_ReleaseQtyRow2;
		
		@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_2-7']")
		private static WebElement binRes_TotalreservedQtyRow2; 
		
		@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_2-8']")
		private static WebElement binRes_BinQtyRow2; 
		
		@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_2-9']")
		private static WebElement binRes_SkidIdRow2;
		
		@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_2-10']")
		private static WebElement binRes_AllocStatusRow2; 
		
		@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_2-11']")
		private static WebElement binRes_InvStatusRow2;
		
		@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_2-12']")
		private static WebElement binRes_LotNoRow2;
		
		
		
		// Batch Reservation Body Header
		
		@FindBy(xpath="//th[@id='Id_BatchReservation_FGrid_control_heading_2']")
		private static WebElement batchRes_BodyQtyToReserve; 
		
		@FindBy(xpath="//th[@id='Id_BatchReservation_FGrid_control_heading_3']")
		private static WebElement batchRes_BodyBatchNo;
		
		@FindBy(xpath="//th[@id='Id_BatchReservation_FGrid_control_heading_4']")
		private static WebElement batchRes_BodyWareHouse; 
		
		@FindBy(xpath="//th[@id='Id_BatchReservation_FGrid_control_heading_5']")
		private static WebElement batchRes_BodyAvailableQty;
		
		@FindBy(xpath="//th[@id='Id_BatchReservation_FGrid_control_heading_6']")
		private static WebElement batchRes_BodyRelesaseQty;
		
		@FindBy(xpath="//th[@id='Id_BatchReservation_FGrid_control_heading_7']")
		private static WebElement batchRes_BodyCurOrdResQty;
		
		@FindBy(xpath="//th[@id='Id_BatchReservation_FGrid_control_heading_8']")
		private static WebElement batchRes_BodyMfgDate;
		
		@FindBy(xpath="//th[@id='Id_BatchReservation_FGrid_control_heading_9']")
		private static WebElement batchRes_BodyExpDate;
		
		@FindBy(xpath="//th[@id='Id_BatchReservation_FGrid_control_heading_10']")
		private static WebElement batchRes_BodyBatchQty;
			
		// Body Grid
		// Row1
		
		@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_1-1']")
		private static WebElement batchRes_Row1Index; 
		
		@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_1-2']")
		private static WebElement batchRes_QtyToReserveRow1; 
		
		@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_1-3']")
		private static WebElement batchRes_BatchNoRow1;
		
		@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_1-4']")
		private static WebElement batchRes_WareHouseRow1; 
		
		@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_1-5']")
		private static WebElement batchRes_AvailableQtyRow1;
		
		@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_1-6']")
		private static WebElement batchRes_RelesaseQtyRow1;
		
		@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_1-7']")
		private static WebElement batchRes_CurOrdResQtyRow1;
		
		@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_1-8']")
		private static WebElement batchRes_MfgDateRow1;
		
		@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_1-9']")
		private static WebElement batchRes_ExpDateRow1;
		
		@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_1-10']")
		private static WebElement batchRes_BatchQtyRow1;
		
		// Row 2
		
		@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_2-1']")
		private static WebElement batchRes_Row2Index; 
		
		@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_2-2']")
		private static WebElement batchRes_QtyToReserveRow2; 

		@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_2-3']")
		private static WebElement batchRes_BatchNoRow2;
		
		@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_2-4']")
		private static WebElement batchRes_WareHouseRow2; 
		
		@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_2-5']")
		private static WebElement batchRes_AvailableQtyRow2;
		
		@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_2-6']")
		private static WebElement batchRes_RelesaseQtyRow2;
		
		@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_2-7']")
		private static WebElement batchRes_CurOrdResQtyRow2;
		
		@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_2-8']")
		private static WebElement batchRes_MfgDateRow2;
		
		@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_2-9']")
		private static WebElement batchRes_ExpDateRow2;
		
		@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_2-10']")
		private static WebElement batchRes_BatchQtyRow2;
		
		// Row 3
		
		
		@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_3-1']")
		private static WebElement batchRes_Row3Index; 
		
		@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_3-2']")
		private static WebElement batchRes_QtyToReserveRow3; 

		@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_3-3']")
		private static WebElement batchRes_BatchNoRow3;
		
		@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_3-4']")
		private static WebElement batchRes_WareHouseRow3; 
		
		@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_3-5']")
		private static WebElement batchRes_AvailableQtyRow3;
		
		@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_3-6']")
		private static WebElement batchRes_RelesaseQtyRow3;
		
		@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_3-7']")
		private static WebElement batchRes_CurOrdResQtyRow3;
		
		@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_3-8']")
		private static WebElement batchRes_MfgDateRow3;
		
		@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_3-9']")
		private static WebElement batchRes_ExpDateRow3;
		
		@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_3-10']")
		private static WebElement batchRes_BatchQtyRow3;

		
		// Row 4
		
		@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_4-1']")
		private static WebElement batchRes_Row4Index; 
		
		@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_4-2']")
		private static WebElement batchRes_QtyToReserveRow4; 

		@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_4-3']")
		private static WebElement batchRes_BatchNoRow4;
		
		@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_4-4']")
		private static WebElement batchRes_WareHouseRow4; 
		
		@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_4-5']")
		private static WebElement batchRes_AvailableQtyRow4;
		
		@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_4-6']")
		private static WebElement batchRes_RelesaseQtyRow4;
		
		@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_4-7']")
		private static WebElement batchRes_CurOrdResQtyRow4;
		
		@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_4-8']")
		private static WebElement batchRes_MfgDateRow4;
		
		@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_4-9']")
		private static WebElement batchRes_ExpDateRow4;
		
		@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_4-10']")
		private static WebElement batchRes_BatchQtyRow4;
		
		// Row 5
		
		@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_5-1']")
		private static WebElement batchRes_Row5Index; 
		
		@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_5-2']")
		private static WebElement batchRes_QtyToReserveRow5; 

		@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_5-3']")
		private static WebElement batchRes_BatchNoRow5;
		
		@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_5-4']")
		private static WebElement batchRes_WareHouseRow5; 
		
		@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_5-5']")
		private static WebElement batchRes_AvailableQtyRow5;
		
		@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_5-6']")
		private static WebElement batchRes_RelesaseQtyRow5;
		
		@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_5-7']")
		private static WebElement batchRes_CurOrdResQtyRow5;
		
		@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_5-8']")
		private static WebElement batchRes_MfgDateRow5;
		
		@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_5-9']")
		private static WebElement batchRes_ExpDateRow5;
		
		@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_5-10']")
		private static WebElement batchRes_BatchQtyRow5;
		
		// RMA Reservation Body Header
		
		@FindBy(xpath="//th[@id='Id_RMAReservation_FGrid_control_heading_2']//div[contains(text(),'Warehouse')]")
		private static WebElement rmaRes_BodyWarehouse; 
		
		@FindBy(xpath="//div[contains(text(),'RMA no')]")
		private static WebElement rmaRes_BodyRMANo;
		
		@FindBy(xpath="//div[contains(text(),'Selected')]")
		private static WebElement rmaRes_BodySelected; 

		// RMA Body Grid Row1
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_1-1']")
		private static WebElement rmaRes_Row1Index; 
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_1-2']")
		private static WebElement rmaRes_WarehouseRow1; 
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_1-3']")
		private static WebElement rmaRes_RmaNoRow1;
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_1-4']//input")
		private static WebElement rmaRes_SelectedRow1; 
		
		// Row 2
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_2-1']")
		private static WebElement rmaRes_Row2Index; 
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_2-2']")
		private static WebElement rmaRes_WarehouseRow2; 
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_2-3']")
		private static WebElement rmaRes_RmaNoRow2;
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_2-4']//input")
		private static WebElement rmaRes_SelectedRow2; 
		
		
		
		
		// RMA Body Grid Row3
		
			@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_3-1']")
			private static WebElement rmaRes_Row3Index; 
			
			@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_3-2']")
			private static WebElement rmaRes_WarehouseRow3; 
			
			@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_3-3']")
			private static WebElement rmaRes_RmaNoRow3;
			
			@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_3-4']//input")
			private static WebElement rmaRes_SelectedRow3; 
			
			// Row 4
			
			@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_4-1']")
			private static WebElement rmaRes_Row4Index; 
			
			@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_4-2']")
			private static WebElement rmaRes_WarehouseRow4; 
			
			@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_4-3']")
			private static WebElement rmaRes_RmaNoRow4;
			
			@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_4-4']//input")
			private static WebElement rmaRes_SelectedRow4; 
			
			
			// RMA Body Grid Row5
			
			@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_5-1']")
			private static WebElement rmaRes_Row5Index; 
			
			@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_5-2']")
			private static WebElement rmaRes_WarehouseRow5; 
			
			@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_5-3']")
			private static WebElement rmaRes_RmaNoRow5;
			
			@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_5-4']//input")
			private static WebElement rmaRes_SelectedRow5; 
			
			// Row 6
			
			@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_6-1']")
			private static WebElement rmaRes_Row6Index; 
			
			@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_6-2']")
			private static WebElement rmaRes_WarehouseRow6; 
			
			@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_6-3']")
			private static WebElement rmaRes_RmaNoRow6;
			
			@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_6-4']//input")
			private static WebElement rmaRes_SelectedRow6; 
			
			// Row 7
			
			@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_7-1']")
			private static WebElement rmaRes_Row7Index; 
			
			@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_7-2']")
			private static WebElement rmaRes_WarehouseRow7; 
			
			@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_7-3']")
			private static WebElement rmaRes_RmaNoRow7;
			
			@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_7-4']//input")
			private static WebElement rmaRes_SelectedRow7; 
			
			// Row 8
			
			@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_8-1']")
			private static WebElement rmaRes_Row8Index; 
			
			@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_8-2']")
			private static WebElement rmaRes_WarehouseRow8; 
			
			@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_8-3']")
			private static WebElement rmaRes_RmaNoRow8;
			
			@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_8-4']//input")
			private static WebElement rmaRes_SelectedRow8; 

			// Row 9
			
			@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_9-1']")
			private static WebElement rmaRes_Row9Index; 
			
			@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_9-2']")
			private static WebElement rmaRes_WarehouseRow9; 
			
			@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_9-3']")
			private static WebElement rmaRes_RmaNoRow9;
			
			@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_9-4']//input")
			private static WebElement rmaRes_SelectedRow9; 
			
			// Row 10
			
			@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_10-1']")
			private static WebElement rmaRes_Row10Index; 
			
			@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_10-2']")
			private static WebElement rmaRes_WarehouseRow10; 
			
			@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_10-3']")
			private static WebElement rmaRes_RmaNoRow10;
			
			@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_10-4']//input")
			private static WebElement rmaRes_SelectedRow10; 
			
			// Row 11
			
			@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_11-1']")
			private static WebElement rmaRes_Row11Index; 
			
			@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_11-2']")
			private static WebElement rmaRes_WarehouseRow11; 
			
			@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_11-3']")
			private static WebElement rmaRes_RmaNoRow11;
			
			@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_11-4']//input")
			private static WebElement rmaRes_SelectedRow11; 
			
			// Row 12
			
			@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_12-1']")
			private static WebElement rmaRes_Row12Index; 
			
			@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_12-2']")
			private static WebElement rmaRes_WarehouseRow12; 
			
			@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_12-3']")
			private static WebElement rmaRes_RmaNoRow12;
			
			@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_12-4']//input")
			private static WebElement rmaRes_SelectedRow12; 
		
		// Stock item Reservation Body Header
		

		@FindBy(xpath="//th[@id='Id_StockReservation_FGrid_control_heading_2']//div[contains(text(),'Warehouse')]")
		private static WebElement stockRes_BodyWareHouse; 
		
		@FindBy(xpath="//th[@id='Id_StockReservation_FGrid_control_heading_3']//div[contains(text(),'Voucher No')]")
		private static WebElement stockRes_BodyVoucherNo;

		@FindBy(xpath="//th[@id='Id_StockReservation_FGrid_control_heading_4']//div[contains(text(),'Qty to Reserve')]")
		private static WebElement stockRes_BodyQtyToReserve; 
		
		@FindBy(xpath="//th[@id='Id_StockReservation_FGrid_control_heading_5']//div[contains(text(),'Available Qty')]")
		private static WebElement stockRes_BodyAvailableQty;
		
		@FindBy(xpath="//th[@id='Id_StockReservation_FGrid_control_heading_6']//div[contains(text(),'Cur Ord Res Qty')]")
		private static WebElement stockRes_BodyCurOrdResQty;
		
		@FindBy(xpath="//th[@id='Id_StockReservation_FGrid_control_heading_7']//div[contains(text(),'Quantity')]")
		private static WebElement stockRes_BodyQty;
		
		@FindBy(xpath="//div[contains(text(),'Pending Order Qty')]")
		private static WebElement stockRes_BodyPendingOrderQty;
		
		@FindBy(xpath="//th[@id='Id_StockReservation_FGrid_control_heading_9']//div[contains(text(),'Released Qty')]")
		private static WebElement stockRes_BodyReleasedQty;
		
		// Stock Item Reservation Body  Grid
		// Row1
		@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_1-1']")
		private static WebElement stockRes_Row1Index; 
		
		@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_1-2']")
		private static WebElement stockRes_WareHouseRow1; 

		@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_1-3']")
		private static WebElement stockRes_VoucherNoRow1;
		
		@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_1-4']")
		private static WebElement stockRes_QtyToReserveRow1; 
		
		@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_1-5']")
		private static WebElement stockRes_AvailableQtyRow1;
		
		@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_1-6']")
		private static WebElement stockRes_CurOrdResQtyRow1;
		
		@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_1-7']")
		private static WebElement stockRes_QtyRow1;
		
		@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_1-8']")
		private static WebElement stockRes_PendingOrderQtyRow1;
		
		@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_1-9']")
		private static WebElement stockRes_ReleasedQtyRow1;
		
		// Row 2
		
		@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_2-1']")
		private static WebElement stockRes_Row2Index; 
		
		@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_2-2']")
		private static WebElement stockRes_WareHouseRow2; 

		@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_2-3']")
		private static WebElement stockRes_VoucherNoRow2;
		
		@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_2-4']")
		private static WebElement stockRes_QtyToReserveRow2; 
		
		@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_2-5']")
		private static WebElement stockRes_AvailableQtyRow2;
		
		@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_2-6']")
		private static WebElement stockRes_CurOrdResQtyRow2;
		
		@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_2-7']")
		private static WebElement stockRes_QtyRow2;
		
		@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_2-8']")
		private static WebElement stockRes_PendingOrderQtyRow2;
		
		@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_2-9']")
		private static WebElement stockRes_ReleasedQtyRow2;
		
		@FindBy(xpath="//input[@id='txtQtyToReserve']")
		private static WebElement enter_QtyToReserve;

	@FindBy(xpath="//input[@id='id_body_22']")
		private static WebElement enter_Reserve;

		@FindBy(xpath="//div[@id='id_transactionentry_summary_static']//div[1]//div[2]")
		private static WebElement  so_footerQty;
		
		@FindBy(xpath="//div[@id='id_transactionentry_summary']//div[2]//div[2]")
		private static WebElement  so_footerRDField;
		
		@FindBy(xpath="//div[@id='id_transactionentry_summary']//div[3]//div[2]")
		private static WebElement  so_footerAQ;
		
		@FindBy(xpath="//div[@id='id_transactionentry_summary']//div[4]//div[2]")
		private static WebElement  so_footerFQ;
		
		@FindBy(xpath="//div[@id='id_transactionentry_summary']//div[5]//div[2]")
		private static WebElement  so_footerGross;
		
		@FindBy(xpath="//*[@id='id_transactionentry_footer_panel_summary_value_net']/span[2]")
		private static WebElement  so_footerNet;
		
		@FindBy(xpath="//span[@class='col-xs-6 icon-font6 no_padding_left_right theme_color-inverse icon-collepse']")
		private static WebElement  new_footerMinimizeBtn;
		
		

	//Checking Purchase Order Voucher to use the Option Convert Link, First Use First Row as Close Link
		
		@FindBy(xpath="//select[@id='id_list_popup_list']")
		private static WebElement  convertPopupList;
		
		@FindBy(xpath="//option[contains(text(),'Purchases Vouchers')]")
		private static WebElement  convertPopupListPurchaseVoucher;
		
		@FindBy(xpath="//option[contains(text(),'Purchase Vouchers N')]")
		private static WebElement  convertPopupListPurchaseVoucherN;
		
		@FindBy(xpath="//div[@class='col-xs-4']//input[1]")
		private static WebElement  convertPopupListOkButton;
		
		@FindBy(xpath="//div[@id='id_transactionentry_container_body_others']//input[2]")
		private static WebElement  convertPopupListCancelButton;
		
		@FindBy(xpath="//span[@class='icon-transaction-close-link icon-font7']")
		private static WebElement  closeLinksOption;
		
		@FindBy(xpath="//label[contains(text(),'Open Link')]")
		private static WebElement  openLinksOption;
		
		@FindBy(xpath="//label[contains(text(),'Partial')]")
		private static WebElement  partialLinksOption;
		

			
			
	
  public VoucherSalesPage(WebDriver driver)
  {
    PageFactory.initElements(driver, this);	
  }
		
	
}
