package com.focus.Pages;

import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import javax.swing.Action;

import org.apache.commons.lang3.Validate;
import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.xerces.impl.validation.ValidationManager;
import org.openqa.grid.web.servlet.Grid1HeartbeatServlet;
import org.openqa.selenium.Alert;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.testng.Assert;
import org.testng.annotations.Test;
import org.yaml.snakeyaml.tokens.DocumentEndToken;

import com.focus.base.BaseEngine;
import com.focus.supporters.ExcelReader;
import com.focus.utilities.POJOUtility;
import com.google.errorprone.annotations.Var;
import com.mongodb.util.JSON;
import com.sun.codemodel.util.ClassNameComparator;
import com.sun.tools.xjc.api.ClassNameAllocator;
import com.sun.xml.bind.v2.runtime.output.FastInfosetStreamWriterOutput;

import bsh.ParseException;

public class VouchersExcessAndShortagesPage extends BaseEngine
{
	//Vouchers Home Page Ribbon Control
		@FindBy(xpath="//div[@id='myNavbar']//span[@class='icon-new icon-font6']")
		private static WebElement  newBtn;
		
		@FindBy(xpath="//div[@id='id_transaction_homescreen_edit']//span[@class='icon-edit icon-font6 ImagesinArabic']")
		private static WebElement  editBtn;

		@FindBy(xpath="//span[@class='icon-print icon-font6']")
		private static WebElement  printBtn;
		
		@FindBy(xpath="//div[@id='id_transaction_homescreen_Delete']//span[@class='icon-delete icon-font6']")
		private static WebElement  deleteBtn;
		
		@FindBy(xpath="//span[@class='icon-authorize icon-font6']")
		private static WebElement  authorizeBtn;
		
		@FindBy(xpath="//span[@class='icon-suspend icon-font6']")
		private static WebElement  suspendBtn;
		
		@FindBy(xpath="//span[@class='icon-reject2 icon-font6']")
		private static WebElement  rejectBtn;
		
		@FindBy(xpath="//span[@class='icon-cheque icon-font6']")
		private static WebElement  chequeReturnBtn;
		
		@FindBy(xpath="//span[@class='icon-printbarcode icon-font6']")
		private static WebElement  printBarCodeBtn;
		
		@FindBy(xpath="//span[@class='icon-convert icon-font6']")
		private static WebElement  convertBtn;
		
		@FindBy(xpath="//span[@class='icon-export icon-font6']")
		private static WebElement  exportToXMLBtn;  
			
		@FindBy(xpath="//div[@id='myNavbar']//span[@class='icon-settings icon-font6']")
		private static WebElement  settingsBtn;
		
		@FindBy(xpath="//div[@id='dvHomeTransClose']//span[@class='icon-close icon-font6']")  
		private static WebElement  homeCloseBtn;
				
		//Vouchers Home Page Options
		@FindBy(xpath="//a[@class='transaction_viewname_anchor theme_color-inverse font-5']")
		private static WebElement  allVouchersOption;
		
		@FindBy(xpath="//a[@class='transaction_viewname_anchor font-5']")
		private static WebElement  pendingBillsOption;
		
		@FindBy(xpath="//input[@id='SelectDefaultView']")
		private static WebElement  selectDefaultViewChkBox;
			
		@FindBy(xpath="//span[@class='icon-sorting icon-font6 toolbar_button_image theme_button_color dropdown-toggle']")
		private static WebElement  sortingBtn;
		
	    @FindBy(xpath="//div[@id='btnCreateView']//span[@class='icon-new icon-font6']")
	    private static WebElement  createViewBtn;

	    @FindBy(xpath="//div[@id='btnCustomize']//span[@class='icon-settings icon-font6']")
	    private static WebElement  customizeBtn;
	   
	    @FindBy(xpath="//span[@class='icon-filter icon-font6']")
	    private static WebElement  filterBtn;
	   
	    @FindBy(xpath="//span[@id='transhomeRefresh']")
	    private static WebElement  refreshBtn;
	   
	    @FindBy(xpath="//i[@class='icon-font6 icon-export']")
	    private static WebElement  exportBtn;
	   
	 
		// Options Button  (Display Option)	
	    @FindBy(xpath="//span[@id='transOptions']")
	    private static WebElement  optionsBtn;
	   
	    @FindBy(xpath="//a[contains(text(),'Auto Adjust Width')]")
	    private static WebElement  autoAdjustWidthBtn;
	   
	    @FindBy(xpath="//a[contains(text(),'Fit To Screen')]")
	    private static WebElement  fitToScreenBtn;
	   
	    @FindBy(xpath="//a[contains(text(),'Normal')]")
	    private static WebElement  normalBtn;
	   
					
		//Voucher Home Page Grid Header Columns
		@FindBy(xpath="//input[@id='HeaderChkBox']")
		private static WebElement  grid_HeaderChkBox;	
		
		@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[3]")
		private static WebElement  grid_Header_Date;
		
		@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[4]")
		private static WebElement  grid_Header_VoucherNumber;
		
		@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[5]")
		private static WebElement  grid_Header_CreatedBy;
		
		@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[6]")
		private static WebElement  grid_Header_ModifiedBy;
		
		@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[7]")
		private static WebElement  grid_Header_CreatedDate;
		
		@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[8]")
		private static WebElement  grid_Header_ModifiedDate;
		
		@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[9]")
		private static WebElement  grid_Header_CreatedTime;
		
		@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[10]")
		private static WebElement  grid_Header_ModifiedTime;
		
		@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[11]")
		private static WebElement  grid_Header_Suspended;
		
		@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[12]")
		private static WebElement  grid_Header_Cancelled;
		
		@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[13]")
		private static WebElement  grid_Header_AuthorizationStatus;
		
		
		//Grid Voucher DetailsBtn
		@FindBy(xpath="//tr[@id='trRender_1']//i[@class='icon-info icon-font7']")
		private static WebElement  grid_VoucherDetailsBtn1;
		
		@FindBy(xpath="//tr[@id='trRender_2']//i[@class='icon-info icon-font7']")
		private static WebElement  grid_VoucherDetailsBtn2;
		
		
		//Grid CheckBox 1 And 2
		
		@FindBy(xpath="//tr[@id='trRender_1']//td//input")
		private static WebElement  grid_ChkBox1;
		
		@FindBy(xpath="//tr[@id='trRender_2']//td//input")
		private static WebElement  grid_ChkBox2;
		
		@FindBy(xpath="//tr[@id='trRender_3']//td//input")
		private static WebElement  grid_ChkBox3;
		
		@FindBy(xpath="//tr[@id='trRender_4']//td//input")
		private static WebElement  grid_ChkBox4;
		
		
		// Vouchers Home Page Footer
		@FindBy(xpath="//div[@id='tblFooterReportRender']//input[@id='txtSearch']")
		private static WebElement  searchField;
								
		@FindBy(xpath="//button[@id='frstPage']")
		private static WebElement  firstPageBtn;

		@FindBy(xpath="//button[@id='id_previousPage']")
		private static WebElement  previousPageBtn;

		@FindBy(xpath="//button[@id='id_pagenumber']")
		private static WebElement  currentPageNo;

		@FindBy(xpath="//button[@id='id_nextPage']")
		private static WebElement  nextPageBtn;

		@FindBy(xpath="//button[@id='lstPage']")
		private static WebElement  lastPageBtn;
		
		
		
		//Vouchers Entry Page Ribbon Control Options
		@FindBy(xpath="//span[@class='icon-scroll icon-font6']")
		private static WebElement  freeFlowBtn;
		
		@FindBy(xpath="//span[@class='icon-header icon-font6']")
		private static WebElement  jumpToHeaderSectionBtn;
		
		@FindBy(xpath="//span[@class='icon-panel icon-font6']")
		private static WebElement  jumpToBodySectionBtn;
		
		@FindBy(xpath="//span[@class='icon-footer icon-font6']")
		private static WebElement  jumpToFooterBtn;
		
		@FindBy(xpath="//*[@id='id_transactionentry_new']")
		private static WebElement  new_newBtn;
		
		@FindBy(xpath="//*[@id='id_transactionentry_save']")
		private static WebElement  saveBtn;
		
		@FindBy(xpath="//*[@id='id_transactionentry_previous']")
		private static WebElement  previousBtn;
		
		@FindBy(xpath="//*[@id='id_transactionentry_next']")
		private static WebElement  nextBtn;
		
		@FindBy(xpath="//*[@id='id_transactionentry_print']")
		private static WebElement  new_PrintBtn;
		
		@FindBy(xpath="//*[@id='id_transactionentry_suspend']")
		private static WebElement  new_SuspendBtn;
		
		@FindBy(xpath="//*[@id='id_transactionentry_close']")
		private static WebElement  new_CloseBtn;
		
		@FindBy(xpath="//div[@id='id_transactionentry_delete']//span[contains(@class,'icon-delete icon-font6')]")
		private static WebElement  new_DeleteBtn;
		
		@FindBy(xpath="//span[@class='icon-menu icon-font4']")
		private static WebElement  toggleBtn;
		
		@FindBy(xpath="//*[@id='id_transactionentry_copydocument']")
		private static WebElement  copyDocumentOption;
		
		@FindBy(xpath="//*[@id='id_transactionentry_copytoclipboard']")
		private static WebElement  copyToClipBoardOption;
		
		@FindBy(xpath="//*[@id='id_transactionentry_pastefromclipboard']")
		private static WebElement  pasteFromClipBoardOption;
		
		@FindBy(xpath="//*[@id='id_transactionentry_raisechequereturn']")
		private static WebElement  raiseCheckReturnOption;
		
		@FindBy(xpath="//*[@id='id_transactionentry_addtostock']")
		private static WebElement  addToStockOption;
		
		@FindBy(xpath="//*[@id='id_transactionentry_markconvert']")
		private static WebElement  markConvertedOption;
		
		@FindBy(xpath="//*[@id='id_transactionentry_bominput']")
		private static WebElement  bOMinputOption;
		
		@FindBy(xpath="//*[@id='id_transactionentry_autoallocate']")
		private static WebElement  autoAllocateOption;
		
		@FindBy(xpath="//*[@id='id_transactionentry_reverseentry']")
		private static WebElement  reverseEntryOption;
		
		@FindBy(xpath="//*[@id='id_transactionentry_printbarcode']")
		private static WebElement  printBarCodeOption;
		
		@FindBy(xpath="//*[@id='id_transactionentry_postingdetails']")
		private static WebElement  postingDetailsOption;
		
		@FindBy(xpath="//*[@id='id_transactionentry_exporttoxml']")
		private static WebElement  exportToXMLOption;
		
		@FindBy(xpath="//*[@id='id_transactionentry_settings']")
		private static WebElement  settingsOption;
		
		
		
		//Voucher Entry Page Header Fields
		@FindBy(xpath="//input[@id='id_header_1']")
		private static WebElement  documentNumberTxt;
		
		@FindBy(xpath="//*[@id='id_header_1_input_image']/span")
		private static WebElement  documentNumberdropdown_ExpansionBtn;
		
		@FindBy(xpath="//input[@id='id_header_2']")
		private static WebElement  dateTxt;
		
		@FindBy(xpath="//td[@id='id_header_2_input_image']//span[@class='icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow']")
		private static WebElement  dateTxt_CalenderBtn;
		
		@FindBy(xpath="//tr[@id='id_header_2_day_today']//span[@class='theme_color-inverse'][contains(text(),'Today')]")
		private static WebElement  calender_TodayBtn;
		
		@FindBy(xpath="//input[@id='id_header_4']")
		private static WebElement  caskBankAccountTxt;
		
		@FindBy(xpath="//*[@id='id_header_4_input_image']/span")
		private static WebElement  caskBankAccount_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='id_header_4_input_settings']/span")
		private static WebElement  cashBankAccount_SettingsBtn;

			@FindBy(xpath="//div[@id='id_header_4_customize_popup_container']")
			private static WebElement  cashBankAccount_Settings_Container;
									
			@FindBy(xpath="//div[@id='id_header_4_customize_popup_footer']//input[1]")
			private static WebElement  cashBankAccount_Settings_StandardFieldsBtn;
									
						@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_list']")
						private static WebElement  cashBankAccount_Settings_StandardFieldsBtn_Fielddropdown;
															
						@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_header']")
						private static WebElement  cashBankAccount_Settings_StandardFieldsBtn_HeaderTxt;
														
						@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_alignment']")
						private static WebElement  cashBankAccount_Settings_StandardFieldsBtn_Alignmentdropdown;
															
						@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_width']")
						private static WebElement  cashBankAccount_Settings_StandardFieldsBtn_WidthTxt;
															
						@FindBy(xpath="//div[@class='panel']//input[3]")
						private static WebElement  cashBankAccount_Settings_StandardFieldsBtn_OkBtn;
															
						@FindBy(xpath="//div[@class='panel']//input[4]")
						private static WebElement  cashBankAccount_Settings_StandardFieldsBtn_CancelBtn;
									
									
			@FindBy(xpath="//div[@id='id_header_4_search_container']//input[2]")
			private static WebElement  cashBankAccount_Settings_DeleteColumnBtn;
									
			@FindBy(xpath="//div[@class='panel']//input[3]")
			private static WebElement  cashBankAccount_Settings_OkBtn;
							
			@FindBy(xpath="//div[@class='panel']//input[4]")
			private static WebElement  cashBankAccount_Settings_CancelBtn;
				
		@FindBy(xpath="//input[@id='id_header_268435459']")
		private static WebElement  departmentTxt;
		
		@FindBy(xpath="//*[@id='id_header_268435459_input_image']/span")
		private static WebElement  department_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='id_header_268435459_input_settings']/span")
		private static WebElement  department_SettingsBtn;

			@FindBy(xpath="//div[@id='id_header_268435459_customize_popup_container']")
			private static WebElement  department_Settings_Container;
									
			@FindBy(xpath="//div[@id='id_header_268435459_customize_popup_footer']//input[1]")
			private static WebElement  department_Settings_StandardFieldsBtn;
							
				@FindBy(xpath="//select[@id='id_header_268435459_customize_popup_standardfields_list']")
				private static WebElement  department_Settings_StandardFieldsBtn_Fielddropdown;
													
				@FindBy(xpath="//input[@id='id_header_268435459_customize_popup_standardfields_header']")
				private static WebElement  department_Settings_StandardFieldsBtn_HeaderTxt;
												
				@FindBy(xpath="//select[@id='id_header_268435459_customize_popup_standardfields_alignment']")
				private static WebElement  department_Settings_StandardFieldsBtn_Alignmentdropdown;
													
				@FindBy(xpath="//input[@id='id_header_268435459_customize_popup_standardfields_width']")
				private static WebElement  department_Settings_StandardFieldsBtn_WidthTxt;
													
				@FindBy(xpath="//div[@class='panel']//input[3]")
				private static WebElement  department_Settings_StandardFieldsBtn_OkBtn;
													
				@FindBy(xpath="//div[@class='panel']//input[4]")
				private static WebElement  department_Settings_StandardFieldsBtn_CancelBtn;
							
									
			@FindBy(xpath="//div[@id='id_header_268435459_search_container']//input[2]")
			private static WebElement  department_Settings_DeleteColumnBtn;
									
			@FindBy(xpath="//div[@class='panel']//input[3]")
			private static WebElement  department_Settings_OkBtn;
							
			@FindBy(xpath="//div[@class='panel']//input[4]")
			private static WebElement  department_Settings_CancelBtn;

		@FindBy(xpath="//*[@id='id_header_6']")
		private static WebElement  maturityDateTxt;
		
		@FindBy(xpath="//*[@id='id_header_6_input_image']/span']")
		private static WebElement  maturityDateTxt_CalenderBtn;
		
		@FindBy(xpath="//input[@id='id_header_3']")
		private static WebElement  purchaseAccountTxt;
		
		@FindBy(xpath="//*[@id='id_header_3_input_image']/span")
		private static WebElement  purchaseAccount_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='id_header_3_input_settings']/span")
		private static WebElement  purchaseAccount_SettingsBtn;

			@FindBy(xpath="//div[@id='id_header_3_customize_popup_container']")
			private static WebElement  purchaseAccount_Settings_Container;
									
			@FindBy(xpath="//div[@id='id_header_3_customize_popup_footer']//input[1]")
			private static WebElement  purchaseAccount_Settings_StandardFieldsBtn;
							
				@FindBy(xpath="//select[@id='id_header_3_customize_popup_standardfields_list']")
				private static WebElement  purchaseAccount_Settings_StandardFieldsBtn_Fielddropdown;
													
				@FindBy(xpath="//input[@id='id_header_3_customize_popup_standardfields_header']")
				private static WebElement  purchaseAccount_Settings_StandardFieldsBtn_HeaderTxt;
												
				@FindBy(xpath="//select[@id='id_header_3_customize_popup_standardfields_alignment']")
				private static WebElement  purchaseAccount_Settings_StandardFieldsBtn_Alignmentdropdown;
													
				@FindBy(xpath="//input[@id='id_header_3_customize_popup_standardfields_width']")
				private static WebElement  purchaseAccount_Settings_StandardFieldsBtn_WidthTxt;
													
				@FindBy(xpath="//div[@class='panel']//input[3]")
				private static WebElement  purchaseAccount_Settings_StandardFieldsBtn_OkBtn;
													
				@FindBy(xpath="//div[@class='panel']//input[4]")
				private static WebElement  purchaseAccount_Settings_StandardFieldsBtn_CancelBtn;
									
									
			@FindBy(xpath="//div[@id='id_header_3_search_container']//input[2]")
			private static WebElement  purchaseAccount_Settings_DeleteColumnBtn;
									
			@FindBy(xpath="//div[@class='panel']//input[3]")
			private static WebElement  purchaseAccount_Settings_OkBtn;
							
			@FindBy(xpath="//div[@class='panel']//input[4]")
			private static WebElement  purchaseAccount_Settings_CancelBtn;


	@FindBy(xpath="//input[@id='id_header_4']")
	private static WebElement  vendorAccountTxt;

	@FindBy(xpath="//*[@id='id_header_4_input_image']/span")
	private static WebElement  vendorAccount_ExpansionBtn;

	@FindBy(xpath="//*[@id='id_header_4_input_settings']/span")
	private static WebElement  vendorAccount_SettingsBtn;

			@FindBy(xpath="//div[@id='id_header_4_customize_popup_container']")
			private static WebElement  vendorAccount_Settings_Container;
									
			@FindBy(xpath="//div[@id='id_header_4_customize_popup_footer']//input[1]")
			private static WebElement  vendorAccount_Settings_StandardFieldsBtn;
									
						@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_list']")
						private static WebElement  vendorAccount_Settings_StandardFieldsBtn_Fielddropdown;
															
						@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_header']")
						private static WebElement  vendorAccount_Settings_StandardFieldsBtn_HeaderTxt;
														
						@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_alignment']")
						private static WebElement  vendorAccount_Settings_StandardFieldsBtn_Alignmentdropdown;
															
						@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_width']")
						private static WebElement  vendorAccount_Settings_StandardFieldsBtn_WidthTxt;
															
						@FindBy(xpath="//div[@class='panel']//input[3]")
						private static WebElement  vendorAccount_Settings_StandardFieldsBtn_OkBtn;
															
						@FindBy(xpath="//div[@class='panel']//input[4]")
						private static WebElement  vendorAccount_Settings_StandardFieldsBtn_CancelBtn;
									
									
			@FindBy(xpath="//div[@id='id_header_4_search_container']//input[2]")
			private static WebElement  vendorAccount_Settings_DeleteColumnBtn;
									
			@FindBy(xpath="//div[@class='panel']//input[3]")
			private static WebElement  vendorAccount_Settings_OkBtn;
							
			@FindBy(xpath="//div[@class='panel']//input[4]")
			private static WebElement  vendorAccount_Settings_CancelBtn;

	@FindBy(xpath="//input[@id='id_header_3']")
	private static WebElement  salesAccountTxt;

	@FindBy(xpath="//*[@id='id_header_3_input_image']/span")
	private static WebElement  salesAccount_ExpansionBtn;

	@FindBy(xpath="//*[@id='id_header_3_input_settings']/span")
	private static WebElement  salesAccount_SettingsBtn;

			@FindBy(xpath="//div[@id='id_header_3_customize_popup_container']")
			private static WebElement  salesAccount_Settings_Container;
									
			@FindBy(xpath="//div[@id='id_header_3_customize_popup_footer']//input[1]")
			private static WebElement  salesAccount_Settings_StandardFieldsBtn;
									
						@FindBy(xpath="//select[@id='id_header_3_customize_popup_standardfields_list']")
						private static WebElement  salesAccount_Settings_StandardFieldsBtn_Fielddropdown;
															
						@FindBy(xpath="//input[@id='id_header_3_customize_popup_standardfields_header']")
						private static WebElement  salesAccount_Settings_StandardFieldsBtn_HeaderTxt;
														
						@FindBy(xpath="//select[@id='id_header_3_customize_popup_standardfields_alignment']")
						private static WebElement  salesAccount_Settings_StandardFieldsBtn_Alignmentdropdown;
															
						@FindBy(xpath="//input[@id='id_header_3_customize_popup_standardfields_width']")
						private static WebElement  salesAccount_Settings_StandardFieldsBtn_WidthTxt;
															
						@FindBy(xpath="//div[@class='panel']//input[3]")
						private static WebElement  salesAccount_Settings_StandardFieldsBtn_OkBtn;
															
						@FindBy(xpath="//div[@class='panel']//input[4]")
						private static WebElement  salesAccount_Settings_StandardFieldsBtn_CancelBtn;
									
									
			@FindBy(xpath="//div[@id='id_header_3_search_container']//input[2]")
			private static WebElement  salesAccount_Settings_DeleteColumnBtn;
									
			@FindBy(xpath="//div[@class='panel']//input[3]")
			private static WebElement  salesAccount_Settings_OkBtn;
							
			@FindBy(xpath="//div[@class='panel']//input[4]")
			private static WebElement  salesAccount_Settings_CancelBtn;

		@FindBy(xpath="//input[@id='id_header_4']")
		private static WebElement  customerAccountTxt;
		
		@FindBy(xpath="//*[@id='id_header_4_input_image']/span")
		private static WebElement  customerAccount_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='id_header_4_input_settings']/span")
		private static WebElement  customerAccount_SettingsBtn;

			@FindBy(xpath="//div[@id='id_header_4_customize_popup_container']")
			private static WebElement  customerAccount_Settings_Container;
									
			@FindBy(xpath="//div[@id='id_header_4_customize_popup_footer']//input[1]")
			private static WebElement  customerAccount_Settings_StandardFieldsBtn;
									
						@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_list']")
						private static WebElement  customerAccount_Settings_StandardFieldsBtn_Fielddropdown;
															
						@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_header']")
						private static WebElement  customerAccount_Settings_StandardFieldsBtn_HeaderTxt;
														
						@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_alignment']")
						private static WebElement  customerAccount_Settings_StandardFieldsBtn_Alignmentdropdown;
															
						@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_width']")
						private static WebElement  customerAccount_Settings_StandardFieldsBtn_WidthTxt;
															
						@FindBy(xpath="//div[@class='panel']//input[3]")
						private static WebElement  customerAccount_Settings_StandardFieldsBtn_OkBtn;
															
						@FindBy(xpath="//div[@class='panel']//input[4]")
						private static WebElement  customerAccount_Settings_StandardFieldsBtn_CancelBtn;
									
									
			@FindBy(xpath="//div[@id='id_header_4_search_container']//input[2]")
			private static WebElement  customerAccount_Settings_DeleteColumnBtn;
									
			@FindBy(xpath="//div[@class='panel']//input[3]")
			private static WebElement  customerAccount_Settings_OkBtn;
							
			@FindBy(xpath="//div[@class='panel']//input[4]")
			private static WebElement  customerAccount_Settings_CancelBtn;
		
		@FindBy(xpath="//input[@id='id_header_12']")
		private static WebElement  accountTxt;
		
		@FindBy(xpath="//*[@id='id_header_12_input_image']/span")
		private static WebElement  account_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='id_header_4_input_settings']/span")
		private static WebElement  account_SettingsBtn;

			@FindBy(xpath="//div[@id='id_header_4_customize_popup_container']")
			private static WebElement  account_Settings_Container;
									
			@FindBy(xpath="//div[@id='id_header_4_customize_popup_footer']//input[1]")
			private static WebElement  account_Settings_StandardFieldsBtn;
									
				@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_list']")
				private static WebElement  account_Settings_StandardFieldsBtn_Fielddropdown;
													
				@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_header']")
				private static WebElement  account_Settings_StandardFieldsBtn_HeaderTxt;
												
				@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_alignment']")
				private static WebElement  account_Settings_StandardFieldsBtn_Alignmentdropdown;
													
				@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_width']")
				private static WebElement  account_Settings_StandardFieldsBtn_WidthTxt;
													
				@FindBy(xpath="//div[@class='panel']//input[3]")
				private static WebElement  account_Settings_StandardFieldsBtn_OkBtn;
													
				@FindBy(xpath="//div[@class='panel']//input[4]")
				private static WebElement  account_Settings_StandardFieldsBtn_CancelBtn;
									
									
			@FindBy(xpath="//div[@id='id_header_4_search_container']//input[2]")
			private static WebElement  account_Settings_DeleteColumnBtn;
									
			@FindBy(xpath="//div[@class='panel']//input[3]")
			private static WebElement  account_Settings_OkBtn;
							
			@FindBy(xpath="//div[@class='panel']//input[4]")
			private static WebElement  account_Settings_CancelBtn;
		
		@FindBy(xpath="//input[@id='id_header_31']")
		private static WebElement  issuesReceiptsTxt;
		
		@FindBy(xpath="//input[@id='id_header_268435460']")
		private static WebElement  wareHouseTxt;
		
		@FindBy(xpath="//*[@id='id_header_268435460_input_image']/span")
		private static WebElement  wareHouse_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='id_header_268435460_input_settings']/span")
		private static WebElement  wareHouse_SettingsBtn;

			@FindBy(xpath="//div[@id='id_header_268435460_customize_popup_container']")
			private static WebElement  wareHouse_Settings_Container;
									
			@FindBy(xpath="//div[@id='id_header_268435460_customize_popup_footer']//input[1]")
			private static WebElement  wareHouse_Settings_StandardFieldsBtn;
									
				@FindBy(xpath="//select[@id='id_header_268435460_customize_popup_standardfields_list']")
				private static WebElement  wareHouse_Settings_StandardFieldsBtn_Fielddropdown;
													
				@FindBy(xpath="//input[@id='id_header_268435460_customize_popup_standardfields_header']")
				private static WebElement  wareHouse_Settings_StandardFieldsBtn_HeaderTxt;
												
				@FindBy(xpath="//select[@id='id_header_268435460_customize_popup_standardfields_alignment']")
				private static WebElement  wareHouse_Settings_StandardFieldsBtn_Alignmentdropdown;
													
				@FindBy(xpath="//input[@id='id_header_268435460_customize_popup_standardfields_width']")
				private static WebElement  wareHouse_Settings_StandardFieldsBtn_WidthTxt;
													
				@FindBy(xpath="//div[@class='panel']//input[3]")
				private static WebElement  wareHouse_Settings_StandardFieldsBtn_OkBtn;
													
				@FindBy(xpath="//div[@class='panel']//input[4]")
				private static WebElement  wareHouse_Settings_StandardFieldsBtn_CancelBtn;
									
			@FindBy(xpath="//div[@id='id_header_268435460_search_container']//input[2]")
			private static WebElement  wareHouse_Settings_DeleteColumnBtn;
									
			@FindBy(xpath="//div[@class='panel']//input[3]")
			private static WebElement  wareHouse_Settings_OkBtn;
							
			@FindBy(xpath="//div[@class='panel']//input[4]")
			private static WebElement  wareHouse_Settings_CancelBtn;
		
		@FindBy(xpath="//span[contains(text(),'sName')]")
		private static WebElement  customize_sName;
		
		@FindBy(xpath="//span[@class='vcenter'][contains(text(),'Code')]")
		private static WebElement  customize_sCode;
		
		@FindBy(xpath="//span[contains(text(),'Alias')]")
		private static WebElement  customize_Alias;
		
		@FindBy(xpath="//span[@class='vcenter'][contains(text(),'Group')]")
		private static WebElement  customize_bGroup;
		
		@FindBy(xpath="//span[contains(@class,'vcenter')][contains(text(),'Balance')]")
		private static WebElement  customize_Balance;
		
		@FindBy(xpath="//input[@id='id_header_67108920']")
		private static WebElement  appropriateBasedOndropdown;
		
		@FindBy(xpath="//input[@id='id_header_67108921']")
		private static WebElement  additionalValueTxt;
		
		@FindBy(xpath="//input[@id='id_header_21']")
		private static WebElement  raiseReceiptsChkBox;
		
		@FindBy(xpath="//input[@id='id_header_67108865']")
		private static WebElement  receipts_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108868']")
		private static WebElement  payments_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108871']")
		private static WebElement  pettyCash_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108874']")
		private static WebElement  postDatedReceipts_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108865']")
		private static WebElement  postDatedPayments_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108880']")
		private static WebElement  purchaseVouchers_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108881']")
		private static WebElement  purchaseReturns_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108884']")
		private static WebElement  salesInvoice_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108886']")
		private static WebElement  salesOrder_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108928']")
		private static WebElement  salesInvoiceNewNarrationTxt;
		
		
		@FindBy(xpath="//input[@id='id_header_67108885']")
		private static WebElement  salesReturns_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108913']")
		private static WebElement  cashSales_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108914']")
		private static WebElement  hirePurchaseSales_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108890']")
		private static WebElement  journalEntries_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108916']")
		private static WebElement  forexJV_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108910']")
		private static WebElement  interDepartmentalJV_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108888']")
		private static WebElement  nonStandardJournalEntries_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108892']")
		private static WebElement  debitNotes_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108911']")
		private static WebElement  debitNotesLineWise_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108893']")
		private static WebElement  creditNotes_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108912']")
		private static WebElement  creditNotesLineWisePayroll_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108894']")
		private static WebElement  openingBalance_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108891']")
		private static WebElement  fixedAssetDepreciationVoucher_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108909']")
		private static WebElement  requestForQuote_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108903']")
		private static WebElement  purchasesQuotations_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108882']")
		private static WebElement  purchasesOrders_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108882']")
		private static WebElement  materialReceiptsNotes_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108904']")
		private static WebElement  salesQuotationss_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108887']")
		private static WebElement  deliveryNotes_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108917']")
		private static WebElement  posSales_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108918']")
		private static WebElement  productionOrder_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108886']")
		private static WebElement  salesOrders_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108895']")
		private static WebElement  shortagesinStock_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108896']")
		private static WebElement  excessesinStocks_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108897']")
		private static WebElement  stockTransfers_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108898']")
		private static WebElement  openingStocks_NarrationTxt;
		
		/*@FindBy(xpath="//input[@id='id_header_67108927']")
		private static WebElement  openingStocksNEW_NarrationTxt;*/
		
		@FindBy(xpath="//input[@id='id_header_67108923']")
		private static WebElement  openingStocksNEW_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108908']")
		private static WebElement  materialRequisition_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108866']")
		private static WebElement  receipts_ChequeNoTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108869']")
		private static WebElement  payments_ChequeNoTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108872']")
		private static WebElement  pettyCash_ChequeNoTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108875']")
		private static WebElement  postDatedReceipts_ChequeNoTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108878']")
		private static WebElement  postDatedPayments_ChequeNoTxt;



		//Voucher Entry Page Body Fields
		
		@FindBy(xpath="//input[@id='id_body_536870916']")
		private static WebElement  pvWareHouseTxt;
		
		@FindBy(xpath="//td[@id='id_body_536870916_input_image']//span[@class='icon-down-arrow optioncontrol_arrow_margin']")
		private static WebElement  pvWareHouse_ExpansionBtn;
		
		@FindBy(xpath="//td[@id='id_body_536870916_input_settings']//span[@class='icon-settings optioncontrol_settings_margin']")
		private static WebElement  pvWareHouse_SettingsBtn;

			@FindBy(xpath="//div[@id='id_body_536870916_customize_popup_container']")
			private static WebElement  pvWareHouse_Settings_Container;
									
			@FindBy(xpath="//div[@id='id_body_536870916_customize_popup_footer']//input[1]")
			private static WebElement  pvWareHouse_Settings_StandardFieldsBtn;
									
				@FindBy(xpath="//select[@id='id_body_536870916_customize_popup_standardfields_list']")
				private static WebElement  pvWareHouse_Settings_StandardFieldsBtn_Fielddropdown;
													
				@FindBy(xpath="//input[@id='id_body_536870916_customize_popup_standardfields_header']")
				private static WebElement  pvWareHouse_Settings_StandardFieldsBtn_HeaderTxt;
												
				@FindBy(xpath="//select[@id='id_body_536870916_customize_popup_standardfields_alignment']")
				private static WebElement  pvWareHouse_Settings_StandardFieldsBtn_Alignmentdropdown;
													
				@FindBy(xpath="//input[@id='id_body_536870916_customize_popup_standardfields_width']")
				private static WebElement  pvWareHouse_Settings_StandardFieldsBtn_WidthTxt;
													
				@FindBy(xpath="//div[@class='panel']//input[3]")
				private static WebElement  pvWareHouse_Settings_StandardFieldsBtn_OkBtn;
													
				@FindBy(xpath="//div[@class='panel']//input[4]")
				private static WebElement  pvWareHouse_Settings_StandardFieldsBtn_CancelBtn;
									
			@FindBy(xpath="//div[@id='id_body_536870916_search_container']//input[2]")
			private static WebElement  pvWareHouse_Settings_DeleteColumnBtn;
									
			@FindBy(xpath="//div[@class='panel']//input[3]")
			private static WebElement  pvWareHouse_Settings_OkBtn;
							
			@FindBy(xpath="//div[@class='panel']//input[4]")
			private static WebElement  pvWareHouse_Settings_CancelBtn;
		
		// Grid Elements
		@FindBy(xpath="//th[@id='id_transaction_entry_detail_table_control_heading_1']")
		private static WebElement  grid_Header_Account;
		
		@FindBy(xpath="//th[@id='id_transaction_entry_detail_table_control_heading_1']")
		private static WebElement  grid_Header_Item;
		
		@FindBy(xpath="//th[@id='id_transaction_entry_detail_table_control_heading_1']")
		private static WebElement  grid_Header_DebitAC;
		
		@FindBy(xpath="//th[@id='id_transaction_entry_detail_table_control_heading_2']")
		private static WebElement  grid_Header_CreditAC;



		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[1]")
		private static WebElement  firstRowIndex;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[1]")
		private static WebElement  secondRowIndex;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[1]")
		private static WebElement  thirdRowIndex;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[1]")
		private static WebElement  fourthRowIndex;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[1]")
		private static WebElement  fifthRowIndex;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[1]")
		private static WebElement  sixthRowIndex;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[1]")
		private static WebElement  seventhRowIndex;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[1]")
		private static WebElement  eigthRowIndex;
		
		@FindBy(xpath="//span[@class='icon-delete icon-font8']")
		private static WebElement  deleteRowBtn;
		
		@FindBy(xpath="//span[@class='icon-insertrow icon-font8']")
		private static WebElement  insertRowBtn;
		
		@FindBy(xpath="//span[@class='icon-selectall icon-font8']")
		private static WebElement  selectRowBtn;
		
		@FindBy(xpath="//span[@class='icon-unselectall1 icon-font8']")
		private static WebElement  unSelectRowBtn;
		
		@FindBy(xpath="//span[@class='icon-clone icon-font8']")
		private static WebElement  duplicateRowBtn;

		
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[2]")
		private static WebElement  select1stRow_1stColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[3]")
		private static WebElement  select1stRow_2ndColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[4]")
		private static WebElement  select1stRow_3rdColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[5]")
		private static WebElement  select1stRow_4thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[6]")
		private static WebElement  select1stRow_5thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[7]")
		private static WebElement  select1stRow_6thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[8]")
		private static WebElement  select1stRow_7thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[9]")
		private static WebElement  select1stRow_8thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[10]")
		private static WebElement  select1stRow_9thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[11]")
		private static WebElement  select1stRow_10thColumn;

		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[12]")
		private static WebElement  select1stRow_11thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[13]")
		private static WebElement  select1stRow_12thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[14]")
		private static WebElement  select1stRow_13thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[15]")
		private static WebElement  select1stRow_14thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[16]")
		private static WebElement  select1stRow_15thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[17]")
		private static WebElement  select1stRow_16thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[18]")
		private static WebElement  select1stRow_17thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[19]")
		private static WebElement  select1stRow_18thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[20]")
		private static WebElement  select1stRow_19thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[21]")
		private static WebElement  select1stRow_20thColumn;
		
		
		
		
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[2]")
		private static WebElement  select2ndRow_1stColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[3]")
		private static WebElement  select2ndRow_2ndColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[4]")
		private static WebElement  select2ndRow_3rdColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[5]")
		private static WebElement  select2ndRow_4thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[6]")
		private static WebElement  select2ndRow_5thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[7]")
		private static WebElement  select2ndRow_6thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[8]")
		private static WebElement  select2ndRow_7thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[9]")
		private static WebElement  select2ndRow_8thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[10]")
		private static WebElement  select2ndRow_9thColumn;

		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[12]")
		private static WebElement  select2ndRow_11thColumn;

		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[13]")
		private static WebElement  select2ndRow_12thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[11]")
		private static WebElement  select2ndRow_10thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[15]")
		private static WebElement  select2ndRow_14thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[16]")
		private static WebElement  select2ndRow_15thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[17]")
		private static WebElement  select2ndRow_16thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[18]")
		private static WebElement  select2ndRow_17thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[19]")
		private static WebElement  select2ndRow_18thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[20]")
		private static WebElement  select2ndRow_19thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[21]")
		private static WebElement  select2ndRow_20thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[22]")
		private static WebElement  select2ndRow_21thColumn;

		
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[2]")
		private static WebElement  select3rdRow_1stColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[3]")
		private static WebElement  select3rdRow_2ndColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[4]")
		private static WebElement  select3rdRow_3rdColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[5]")
		private static WebElement  select3rdRow_4thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[6]")
		private static WebElement  select3rdRow_5thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[7]")
		private static WebElement  select3rdRow_6thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[8]")
		private static WebElement  select3rdRow_7thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[9]")
		private static WebElement  select3rdRow_8thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[10]")
		private static WebElement  select3rdRow_9thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[11]")
		private static WebElement  select3rdRow_10thColumn;

	    @FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[12]")
		private static WebElement  select3rdRow_11thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[13]")
		private static WebElement  select3rdRow_12thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[14]")
		private static WebElement  select3rdRow_13thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[15]")
		private static WebElement  select3rdRow_14thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[16]")
		private static WebElement  select3rdRow_15thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[17]")
		private static WebElement  select3rdRow_16thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[18]")
		private static WebElement  select3rdRow_17thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[19]")
		private static WebElement  select3rdRow_18thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[20]")
		private static WebElement  select3rdRow_19thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[21]")
		private static WebElement  select3rdRow_20thColumn;

		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[22]")
		private static WebElement  select3rdRow_21thColumn;





		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[2]")
		private static WebElement  select4thRow_1stColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[3]")
		private static WebElement  select4thRow_2ndColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[4]")
		private static WebElement  select4thRow_3rdColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[5]")
		private static WebElement  select4thRow_4thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[6]")
		private static WebElement  select4thRow_5thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[7]")
		private static WebElement  select4thRow_6thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[8]")
		private static WebElement  select4thRow_7thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[9]")
		private static WebElement  select4thRow_8thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[10]")
		private static WebElement  select4thRow_9thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[11]")
		private static WebElement  select4thRow_10thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[12]")
		private static WebElement  select4thRow_11thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[13]")
		private static WebElement  select4thRow_12thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[14]")
		private static WebElement  select4thRow_13thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[15]")
		private static WebElement  select4thRow_14thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[16]")
		private static WebElement  select4thRow_15thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[17]")
		private static WebElement  select4thRow_16thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[18]")
		private static WebElement  select4thRow_17thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[19]")
		private static WebElement  select4thRow_18thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[20]")
		private static WebElement  select4thRow_19thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[21]")
		private static WebElement  select4thRow_20thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[22]")
		private static WebElement  select4thRow_21thColumn;



		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[2]")
		private static WebElement  select5thRow_1stColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[3]")
		private static WebElement  select5thRow_2ndColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[4]")
		private static WebElement  select5thRow_3rdColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[5]")
		private static WebElement  select5thRow_4thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[6]")
		private static WebElement  select5thRow_5thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[7]")
		private static WebElement  select5thRow_6thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[8]")
		private static WebElement  select5thRow_7thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[9]")
		private static WebElement  select5thRow_8thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[10]")
		private static WebElement  select5thRow_9thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[11]")
		private static WebElement  select5thRow_10thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[12]")
		private static WebElement  select5thRow_11thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[13]")
		private static WebElement  select5thRow_12thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[14]")
		private static WebElement  select5thRow_13thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[15]")
		private static WebElement  select5thRow_14thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[16]")
		private static WebElement  select5thRow_15thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[17]")
		private static WebElement  select5thRow_16thColumn;




		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[2]")
		private static WebElement  select6thRow_1stColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[3]")
		private static WebElement  select6thRow_2ndColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[4]")
		private static WebElement  select6thRow_3rdColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[5]")
		private static WebElement  select6thRow_4thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[6]")
		private static WebElement  select6thRow_5thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[7]")
		private static WebElement  select6thRow_6thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[8]")
		private static WebElement  select6thRow_7thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[9]")
		private static WebElement  select6thRow_8thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[10]")
		private static WebElement  select6thRow_9thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[11]")
		private static WebElement  select6thRow_10thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[12]")
		private static WebElement  select6thRow_11thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[13]")
		private static WebElement  select6thRow_12thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[14]")
		private static WebElement  select6thRow_13thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[15]")
		private static WebElement  select6thRow_14thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[16]")
		private static WebElement  select6thRow_15thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[17]")
		private static WebElement  select6thRow_16thColumn;


		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[2]")
		private static WebElement  select7thRow_1stColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[3]")
		private static WebElement  select7thRow_2ndColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[4]")
		private static WebElement  select7thRow_3rdColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[5]")
		private static WebElement  select7thRow_4thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[6]")
		private static WebElement  select7thRow_5thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[7]")
		private static WebElement  select7thRow_6thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[8]")
		private static WebElement  select7thRow_7thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[9]")
		private static WebElement  select7thRow_8thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[10]")
		private static WebElement  select7thRow_9thColumn;



		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[2]")
		private static WebElement  select8thRow_1stColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[3]")
		private static WebElement  select8thRow_2ndColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[4]")
		private static WebElement  select8thRow_3rdColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[5]")
		private static WebElement  select8thRow_4thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[6]")
		private static WebElement  select8thRow_5thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[7]")
		private static WebElement  select8thRow_6thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[8]")
		private static WebElement  select8thRow_7thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[9]")
		private static WebElement  select8thRow_8thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[10]")
		private static WebElement  select8thRow_9thColumn;


		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[2]")
		private static WebElement  select9thRow_1stColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[3]")
		private static WebElement  select9thRow_2ndColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[4]")
		private static WebElement  select9thRow_3rdColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[5]")
		private static WebElement  select9thRow_4thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[6]")
		private static WebElement  select9thRow_5thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[7]")
		private static WebElement  select9thRow_6thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[8]")
		private static WebElement  select9thRow_7thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[9]")
		private static WebElement  select9thRow_8thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[10]")
		private static WebElement  select9thRow_9thColumn;



		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[2]")
		private static WebElement  select10thRow_1stColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[3]")
		private static WebElement  select10thRow_2ndColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[4]")
		private static WebElement  select10thRow_3rdColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[5]")
		private static WebElement  select10thRow_4thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[6]")
		private static WebElement  select10thRow_5thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[7]")
		private static WebElement  select10thRow_6thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[8]")
		private static WebElement  select10thRow_7thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[9]")
		private static WebElement  select10thRow_8thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[10]")
		private static WebElement  select10thRow_9thColumn;


		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[2]")
		private static WebElement  select11thRow_1stColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[3]")
		private static WebElement  select11thRow_2ndColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[4]")
		private static WebElement  select11thRow_3rdColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[5]")
		private static WebElement  select11thRow_4thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[6]")
		private static WebElement  select11thRow_5thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[7]")
		private static WebElement  select11thRow_6thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[8]")
		private static WebElement  select11thRow_7thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[9]")
		private static WebElement  select11thRow_8thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[10]")
		private static WebElement  select11thRow_9thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[2]")
		private static WebElement  select12thRow_1stColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[3]")
		private static WebElement  select12thRow_2ndColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[4]")
		private static WebElement  select12thRow_3rdColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[5]")
		private static WebElement  select12thRow_4thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[6]")
		private static WebElement  select12thRow_5thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[7]")
		private static WebElement  select12thRow_6thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[8]")
		private static WebElement  select12thRow_7thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[9]")
		private static WebElement  select12thRow_8thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[10]")
		private static WebElement  select12thRow_9thColumn;

		@FindBy(xpath="//input[@id='id_body_12']")
		private static WebElement  enter_AccountTxt;
		
		@FindBy(xpath="//*[@id='id_body_12_input_image']/span")
		private static WebElement  enter_Account_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='id_body_12_input_settings']/span")
		private static WebElement  enter_Account_SettingsBtn;

			@FindBy(xpath="//div[@id='id_header_12_customize_popup_container']")
			private static WebElement  enter_Account_Settings_Container;
									
			@FindBy(xpath="//div[@id='id_header_12_customize_popup_footer']//input[1]")
			private static WebElement  enter_Account_Settings_StandardFieldsBtn;
									
						@FindBy(xpath="//select[@id='id_header_12_customize_popup_standardfields_list']")
						private static WebElement  enter_Account_Settings_StandardFieldsBtn_Fielddropdown;
															
						@FindBy(xpath="//input[@id='id_header_12_customize_popup_standardfields_header']")
						private static WebElement  enter_Account_Settings_StandardFieldsBtn_HeaderTxt;
														
						@FindBy(xpath="//select[@id='id_header_12_customize_popup_standardfields_alignment']")
						private static WebElement  enter_Account_Settings_StandardFieldsBtn_Alignmentdropdown;
															
						@FindBy(xpath="//input[@id='id_header_12_customize_popup_standardfields_width']")
						private static WebElement  enter_Account_Settings_StandardFieldsBtn_WidthTxt;
															
						@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
						private static WebElement  enter_Account_Settings_StandardFieldsBtn_OkBtn;
															
						@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
						private static WebElement  enter_Account_Settings_StandardFieldsBtn_CancelBtn;
									
			@FindBy(xpath="//div[@id='id_header_12_search_container']//input[2]")
			private static WebElement  enter_Account_Settings_DeleteColumnBtn;
									
			@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
			private static WebElement  enter_Account_Settings_OkBtn;
							
			@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
			private static WebElement  enter_Account_Settings_CancelBtn;

		@FindBy(xpath="//input[@id='id_body_16']")
		private static WebElement  enter_Amount;
		
		@FindBy(xpath="//textarea[@id='id_body_16777219']")
		private static WebElement  enter_Receipts_Remarks;
		
		@FindBy(xpath="//textarea[@id='id_body_16777222']")
		private static WebElement  enter_Payments_Remarks;
		
		@FindBy(xpath="//textarea[@id='id_body_16777225']")
		private static WebElement  enter_PettyCash_Remarks;
		
		@FindBy(xpath="//textarea[@id='id_body_16777228']")
		private static WebElement  enter_PostDatedReceipts_Remarks;
		
		@FindBy(xpath="//textarea[@id='id_body_16777231']")
		private static WebElement  enter_PostDatedPaymentss_Remarks;
		
		@FindBy(xpath="//input[@id='id_body_23']")
		private static WebElement  enter_ItemTxt;
		
		@FindBy(xpath="//*[@id='id_body_23_input_image']/span")
		private static WebElement  item_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='id_body_23_input_settings']/span")
		private static WebElement  item_SettingsBtn;

			@FindBy(xpath="//div[@id='id_body_23_customize_popup_container']")
			private static WebElement  item_Settings_Container;
									
			@FindBy(xpath="//div[@id='id_body_23_customize_popup_footer']//input[1]")
			private static WebElement  item_Settings_StandardFieldsBtn;
									
				@FindBy(xpath="//select[@id='id_body_23_customize_popup_standardfields_list']")
				private static WebElement  item_Settings_StandardFieldsBtn_Fielddropdown;
													
				@FindBy(xpath="//input[@id='id_body_23_customize_popup_standardfields_header']")
				private static WebElement  item_Settings_StandardFieldsBtn_HeaderTxt;
												
				@FindBy(xpath="//select[@id='id_body_23_customize_popup_standardfields_alignment']")
				private static WebElement  item_Settings_StandardFieldsBtn_Alignmentdropdown;
													
				@FindBy(xpath="//input[@id='id_body_23_customize_popup_standardfields_width']")
				private static WebElement  item_Settings_StandardFieldsBtn_WidthTxt;
													
				@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
				private static WebElement  item_Settings_StandardFieldsBtn_OkBtn;
													
				@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
				private static WebElement  item_Settings_StandardFieldsBtn_CancelBtn;
									
			@FindBy(xpath="//div[@id='id_body_23_search_container']//input[2]")
			private static WebElement  item_Settings_DeleteColumnBtn;
									
			@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
			private static WebElement  item_Settings_OkBtn;
							
			@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
			private static WebElement  item_Settings_CancelBtn;

		@FindBy(xpath="//input[@id='id_body_24']")
		private static WebElement  enter_UnitTxt;
		
		@FindBy(xpath="//*[@id='id_body_24_input_image']/span")
		private static WebElement  unit_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='id_body_24_input_settings']/span")
		private static WebElement  unit_SettingsBtn;

			@FindBy(xpath="//div[@id='id_body_24_customize_popup_container']")
			private static WebElement  unit_Settings_Container;
									
			@FindBy(xpath="//div[@id='id_body_24_customize_popup_footer']//input[1]")
			private static WebElement  unit_Settings_StandardFieldsBtn;
									
				@FindBy(xpath="//select[@id='id_body_24_customize_popup_standardfields_list']")
				private static WebElement  unit_Settings_StandardFieldsBtn_Fielddropdown;
													
				@FindBy(xpath="//input[@id='id_body_24_customize_popup_standardfields_header']")
				private static WebElement  unit_Settings_StandardFieldsBtn_HeaderTxt;
												
				@FindBy(xpath="//select[@id='id_body_24_customize_popup_standardfields_alignment']")
				private static WebElement  unit_Settings_StandardFieldsBtn_Alignmentdropdown;
													
				@FindBy(xpath="//input[@id='id_body_24_customize_popup_standardfields_width']")
				private static WebElement  unit_Settings_StandardFieldsBtn_WidthTxt;
													
				@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
				private static WebElement  unit_Settings_StandardFieldsBtn_OkBtn;
													
				@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
				private static WebElement  unit_Settings_StandardFieldsBtn_CancelBtn;
									
			@FindBy(xpath="//div[@id='id_body_24_search_container']//input[2]")
			private static WebElement  unit_Settings_DeleteColumnBtn;
									
			@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
			private static WebElement  unit_Settings_OkBtn;
							
			@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
			private static WebElement  unit_Settings_CancelBtn;

				
		@FindBy(xpath="//input[@id='id_body_26']")
		private static WebElement  enter_Quantity;
		
		@FindBy(xpath="//input[@id='id_body_27']")
		private static WebElement  enter_Rate;
		
		@FindBy(xpath="//input[@id='id_body_28']")
		private static WebElement  enter_Gross;
		
		@FindBy(xpath="//input[@id='id_body_13']")
		private static WebElement  enter_Batch;
		
		@FindBy(xpath="//input[@id='id_body_12']")
		private static WebElement  enter_DebitACTxt;
		
		@FindBy(xpath="//*[@id='id_body_12_input_image']/span")
		private static WebElement  enter_DebitAC_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='id_body_12_input_settings']/span")
		private static WebElement  enter_DebitAC_SettingsBtn;

			@FindBy(xpath="//div[@id='id_header_12_customize_popup_container']")
			private static WebElement  enter_DebitAC_Settings_Container;
									
			@FindBy(xpath="//div[@id='id_header_12_customize_popup_footer']//input[1]")
			private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn;
									
				@FindBy(xpath="//select[@id='id_header_12_customize_popup_standardfields_list']")
				private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_Fielddropdown;
													
				@FindBy(xpath="//input[@id='id_header_12_customize_popup_standardfields_header']")
				private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_HeaderTxt;
												
				@FindBy(xpath="//select[@id='id_header_12_customize_popup_standardfields_alignment']")
				private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_Alignmentdropdown;
													
				@FindBy(xpath="//input[@id='id_header_12_customize_popup_standardfields_width']")
				private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_WidthTxt;
													
				@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
				private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_OkBtn;
													
				@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
				private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_CancelBtn;
									
			@FindBy(xpath="//div[@id='id_header_12_search_container']//input[2]")
			private static WebElement  enter_DebitAC_Settings_DeleteColumnBtn;
									
			@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
			private static WebElement  enter_DebitAC_Settings_OkBtn;
							
			@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
			private static WebElement  enter_DebitAC_Settings_CancelBtn;

		@FindBy(xpath="//input[@id='id_body_39']")
		private static WebElement  enter_CreditACTxt;
		
		@FindBy(xpath="//*[@id='id_body_39_input_image']/span")
		private static WebElement  enter_CreditAC_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='id_body_39_input_settings']/span")
		private static WebElement  enter_CreditAC_SettingsBtn;

			@FindBy(xpath="//div[@id='id_header_39_customize_popup_container']")
			private static WebElement  enter_CreditAC_Settings_Container;
									
			@FindBy(xpath="//div[@id='id_header_39_customize_popup_footer']//input[1]")
			private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn;
									
				@FindBy(xpath="//select[@id='id_header_39_customize_popup_standardfields_list']")
				private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_Fielddropdown;
													
				@FindBy(xpath="//input[@id='id_header_39_customize_popup_standardfields_header']")
				private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_HeaderTxt;
												
				@FindBy(xpath="//select[@id='id_header_39_customize_popup_standardfields_alignment']")
				private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_Alignmentdropdown;
													
				@FindBy(xpath="//input[@id='id_header_39_customize_popup_standardfields_width']")
				private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_WidthTxt;
													
				@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
				private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_OkBtn;
													
				@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
				private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_CancelBtn;
									
			@FindBy(xpath="//div[@id='id_header_39_search_container']//input[2]")
			private static WebElement  enter_CreditAC_Settings_DeleteColumnBtn;
									
			@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
			private static WebElement  enter_CreditAC_Settings_OkBtn;
							
			@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
			private static WebElement  enter_CreditAC_Settings_CancelBtn;

		@FindBy(xpath="//input[@id='id_body_18']")
		private static WebElement  enter_DebitTxt;
		
		@FindBy(xpath="//input[@id='id_body_19']")
		private static WebElement  enter_CreditTxt;
		
		@FindBy(xpath="//textarea[@id='id_body_16777241']")
		private static WebElement  enter_NonStandardJournalEntries_RemarksTxt;
		
		@FindBy(xpath="//input[@id='id_body_87']")
		private static WebElement  enter_BodyWarehouse2Txt;
		
		@FindBy(xpath="//*[@id='id_body_87_input_image']/span")
		private static WebElement  enter_Warehouse2_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='id_body_87_input_settings']/span")
		private static WebElement  enter_Warehouse2_SettingsBtn;

			@FindBy(xpath="//div[@id='id_header_87_customize_popup_container']")
			private static WebElement  enter_WareHouse2_Settings_Container;
									
			@FindBy(xpath="//div[@id='id_header_87_customize_popup_footer']//input[1]")
			private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn;
									
				@FindBy(xpath="//select[@id='id_header_87_customize_popup_standardfields_list']")
				private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_Fielddropdown;
													
				@FindBy(xpath="//input[@id='id_header_87_customize_popup_standardfields_header']")
				private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_HeaderTxt;
												
				@FindBy(xpath="//select[@id='id_header_87_customize_popup_standardfields_alignment']")
				private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_Alignmentdropdown;
													
				@FindBy(xpath="//input[@id='id_header_87_customize_popup_standardfields_width']")
				private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_WidthTxt;
													
				@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
				private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_OkBtn;
													
				@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
				private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_CancelBtn;
									
			@FindBy(xpath="//div[@id='id_header_87_search_container']//input[2]")
			private static WebElement  enter_WareHouse2_Settings_DeleteColumnBtn;
									
			@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
			private static WebElement  enter_WareHouse2_Settings_OkBtn;
							
			@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
			private static WebElement  enter_WareHouse2_Settings_CancelBtn;
			
		@FindBy(xpath="//input[@id='id_header_86']")
		private static WebElement  stockTransferheaderWarehouse1Txt;
		


		// Right Panel InfoSide Bar	
		@FindBy(xpath="//*[@id='id_transactionentry_infopanel_container']/div[1]/div[2]/span")
		private static WebElement  infoSideBarCustomizeBtn;

			@FindBy(xpath="//*[@id='id_transactionentry_infopanel_container']/div[1]/div[2]/span")
			private static WebElement  customizeCloseBtn;
			
			/*@FindBy(xpath="//div[@id='id_transactionentry_infopanel_customize_container']//li[@id='Dash_Save']")
			private static WebElement  customizeSaveBtn;*/
			

			@FindBy(xpath="//span[@class='noWrap clsBlueColor'][contains(text(),'Cancel')]")
			private static WebElement  customizeCancelBtn;
			
			
			
			@FindBy(xpath="//li[@id='Trans_Dash_Save']//span[text()='Save']")
			private static WebElement  customizeSaveBtn;
			
			/*@FindBy(xpath="//div[@id='id_transactionentry_infopanel_customize_container']//li[@id='Dash_Close']")
			private static WebElement  customizeCancelBtn;*/
			
			@FindBy(xpath="//input[@id='searchBoxTrans']")
			private static WebElement  customizeSearchTxt;
						
			@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//i[@class='icon-search searchicon']")
			private static WebElement  customizeSearchBtn;
						
			@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//i[@id='g']")
			private static WebElement  graphBtn;
						
				@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//li[@id='Newgraph']")
				private static WebElement  newGraphOption;
					
			@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//i[@id='r']")
			private static WebElement  reportBtn;
				
				@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//li[@id='NewReport']")
				private static WebElement  newReportOption;
						
			@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//i[@id='i']")
			private static WebElement  infoPanelBtn;
						
				@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//li[@id='NewInfopanel']")
				private static WebElement  newInfoPanelOption;
				
			@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//i[@id='w']")
			private static WebElement  workFlowBtn;
						
				@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//li[@id='NewWorkflow']")
				private static WebElement  newWorkFlowOption;
						
			@FindBy(xpath="//a[@id='DocumentInfoOption']")
			private static WebElement  otherDashlets;
						
				@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//label[contains(@class,'theme_icon-color')][contains(text(),'Document Info')]")
				private static WebElement  documentInfo;

		@FindBy(xpath="//span[contains(@class,'icon-left-and-right-panel-icon icon-font6 no_padding_left_right')]")
		private static WebElement  infoSideBarMinimizeExpandBtn;		
				
		@FindBy(xpath="//span[@class='icon-left-and-right-panel-icon icon-font6 no_padding_left_right']")
		private static WebElement  infoSideBarExpandBtn;


		// Footer Section
		@FindBy(xpath="//label[@id='id_transactionentry_footer_panel_summary_value_net']")
		private static WebElement  netLabel;
		
		@FindBy(xpath="//*[@id='id_transactionentry_footer_panel_summary_value_net']/span[2]")
		private static WebElement  netAmount;


		
		//Navigation of Voucher Menus
		
		// Financial Menu and Sub Menus
		@FindBy(xpath="//span[@class='icon-financial icon-font1']")
		private static WebElement  finacinalsMenu;
		
			@FindBy(xpath="//a[@id='61']//span[contains(text(),'Transactions')]")
			private static WebElement  transactionsExpandBtn;
				
				@FindBy(xpath="//a[@id='2007']//span[contains(text(),'Purchases')]")
				private static WebElement  purchasesExpandBtn;
				
				@FindBy(xpath="//span[contains(text(),'Purchases Vouchers')]")
				private static WebElement  purchaseVouchersBtn;
				
	    //Inventory Menu and Sub Menus		
		@FindBy(xpath="//div[contains(text(),'Inventory')]")
		private static WebElement  inventoryMenu; 
		
			@FindBy(xpath="//a[@id='137']//span[contains(text(),'Transactions')]")
			private static WebElement  inventoryTransactionsMenu; 
				
				@FindBy(xpath="//*[@id='139']/span")
				private static WebElement  inventoryTransactionsPurchasesMenu; 
			
					@FindBy(xpath="//*[@id='2010']/span")
					private static WebElement  requestForQuoteVoucher;
					
					@FindBy(xpath="//*[@id='2011']/span")
					private static WebElement  purchasesQuotationsVoucher;
						
					@FindBy(xpath="//*[@id='2012']/span")
					private static WebElement  purchasesOrdersVoucher;
				
					@FindBy(xpath="//*[@id='2013']/span")
					private static WebElement  materialReceiptNotesVoucher;
						
				@FindBy(xpath="//*[@id='140']/span")
				private static WebElement  inventoryTransactionsSalesMenu; 
					
					@FindBy(xpath="//*[@id='2018']/span")
					private static WebElement  salesQuotationsVoucher;
					
					@FindBy(xpath="//*[@id='2019']/span")
					private static WebElement  deliveryNotesVoucher;
					
					@FindBy(xpath="//*[@id='2022']/span")
					private static WebElement  posSalesVoucher;
					
					@FindBy(xpath="//*[@id='2045']/span")
					private static WebElement  productionOrdersVoucher;
					
					@FindBy(xpath="//*[@id='2017']/span")
					private static WebElement  salesOrdersVoucher;
								
				@FindBy(xpath="//a[@id='2033']//span[contains(text(),'Stocks')]")
				private static WebElement  inventoryTransactionsStocksMenu; 
					
					@FindBy(xpath="//span[contains(text(),'Shortages in Stock')]")
					private static WebElement  shortagesInStockVoucher;
					
					@FindBy(xpath="//span[contains(text(),'Excesses in Stocks')]")
					private static WebElement  excessesInStocksVoucher;
						
					@FindBy(xpath="//span[contains(text(),'Stock Transfers')]")
					private static WebElement  stockTransfersVoucher;
					
					@FindBy(xpath="//a[@id='2037']//span[contains(text(),'Opening Stocks')]")
					private static WebElement  openingStocksVoucher;
					
					@FindBy(xpath="//a[@id='2049']//span[contains(text(),'Opening Stocks New')]")
					private static WebElement  openingStocksNewVoucher;
					
					@FindBy(xpath="//*[@id='2038']/span")
					private static WebElement  materialRequisitionVoucher;
							
					@FindBy(xpath="//*[@id='2049']/span")
					private static WebElement  stockAdjustmentVoucher;
						
				@FindBy(xpath="//*[@id='164']/span")
				private static WebElement  holdAndUnholdStockVoucher;
				
				@FindBy(xpath="//*[@id='93']/span")
				private static WebElement  stockReconciliation;
				
				@FindBy(xpath="//*[@id='99']/span")
				private static WebElement  stockAllocation;
			
				
	    //Validation and Confirmation messages
		@FindBy(xpath="//div[@class='theme_color font-6']")
		public static WebElement errorMessage;
						
		@FindBy(xpath="//span[@class='icon-reject2 theme_color']")
		public static WebElement errorMessageCloseBtn;
		
		//Dash board Page
		@FindBy(xpath="//*[@id='dashName']")
	    private static WebElement labelDashboard ;
		
		@FindBy(xpath="//*[@id='Select_dash']")
		private static WebElement selectDashboard ;
			
		@FindBy(xpath="//*[@id='Dashboard_AddDash']")
	    private static WebElement newAddDashBoard;
		 
	    @FindBy(xpath="//*[@id='Dashboard_Dash_Config']")
	    private static WebElement dashboardCustomizationSettings;
				
			   
			    
	    //Vouchers Settings Options
		@FindBy(xpath="//span[@id='updateButton']")
		private static WebElement  updateBtn;
		
		@FindBy(xpath="//i[@class='icon-close icon-font6']")
		private static WebElement  settings_closeBtn;
						
			//Documents Tab
			@FindBy(xpath="//div[@class='font-5 theme_background-color-inverse theme_color-inverse']")
			private static WebElement  documentsTab;
			
			@FindBy(xpath="//li[@id='navigationtab1']")
			private static WebElement  documentsTabForMaterialReceiptNotes;
			
			@FindBy(xpath="//span[@id='DocumentLoadMasterPopupBtn']")
			private static WebElement  loadMastersBtn;
				
				@FindBy(xpath="//select[@id='doc_voucherDropDown']")
				private static WebElement  loadmasterDropDown;
				
				@FindBy(xpath="//button[@id='btnSelectDependMaster']")
				private static WebElement  selectAllBtn;
				
				@FindBy(xpath="//button[contains(text(),'Reset')]")
				private static WebElement  resetBtn;
				
				@FindBy(xpath="//button[@class='Fbutton pull-right'][contains(text(),'Ok')]")
				private static WebElement  okBtn;
				
				@FindBy(xpath="//*[@id='editScreen_CustomizeButtons']/span[1]")
				private static WebElement  deleteTagBtn;
				
				@FindBy(xpath="//span[@id='DocumentAddGroupPopupBtn']")
				private static WebElement  addGroupBtn;
				
					@FindBy(xpath="//input[@id='doc_GroupName']")
					private static WebElement  groupNameTXt;
					
					@FindBy(xpath="//button[contains(text(),'Add')]")
					private static WebElement  addBtn;
					
					@FindBy(xpath="//div[@class='col-xs-12 form-group']//button[@id='btnCancel']")
					private static WebElement  cancelBtn;

				@FindBy(xpath="//div[@id='voucherTabContent']//span[2]")
				private static WebElement  deletegroupBtn;
				
				@FindBy(xpath="//input[@id='doc_title']")
				private static WebElement  titleTxt;
				
				@FindBy(xpath="//input[@id='doc_baseDocument']")
				private static WebElement  baseDocumentTxt;
				
				@FindBy(xpath="//input[@id='txtbox_doc_Accountdepandency']")
				private static WebElement  accountDependencyTxt;
				
					@FindBy(xpath="//span[contains(text(),'iExchangeAdjustmentGainAC')]")
					private static WebElement  iExchangeAdjustmentGainACChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iExchangeAdjustmentLossAC')]")
					private static WebElement  iExchangeAdjustmentLossACChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iPrimaryAccount')]")
					private static WebElement  iPrimaryAccountChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iCity')]")
					private static WebElement  iCityChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iDeliveryCity')]")
					private static WebElement  iDeliverycityChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iBankAc')]")
					private static WebElement  iBankACChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iPDCDiscountedAC')]")
					private static WebElement  iPDCDiscountedACChkBox;
							
				@FindBy(xpath="//input[@id='txtbox_doc_Productdepandency']")
				private static WebElement  itemDependencyTxt;
				
					@FindBy(xpath="//span[contains(text(),'Outlet__')]")
					private static WebElement  outletChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iCostofShortageStockAC')]")
					private static WebElement  iCostofShortageStockACChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iCostofExcessStockAC')]")
					private static WebElement  iCostofExcessStockACChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iCostofSaleReturnAC')]")
					private static WebElement  iCostofSaleReturnACChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iPurchaseVarianceAC')]")
					private static WebElement  iPurchaseVarianceACChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iDefaultBaseUnit')]")
					private static WebElement  iDefaultBaseUnitChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iDefaultSalesUnit')]")
					private static WebElement  iDefaultSalesUnitChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iDefaultPurchaseUnit')]")
					private static WebElement  iDefaultPurchaseUnitChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iCostOfIssueAccount')]")
					private static WebElement  iCostOfIssueAccountChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iStocksAccount')]")
					private static WebElement  iStocksAccountChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iSalesAccount')]")
					private static WebElement  iSalesAccountChkBox;
					
					@FindBy(xpath="//li[12]//div[1]//label[1]//span[1]")
					private static WebElement  otherdetails1Box;
					
					@FindBy(xpath="//li[13]//div[1]//label[1]//span[1]")
					private static WebElement  replenishment1ChkBox;
					
					@FindBy(xpath="//span[contains(text(),'Reorder__')]")
					private static WebElement  reorderChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iCategory')]")
					private static WebElement  iCategoryChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iWIPAccount')]")
					private static WebElement  iWIPAccountChkBox;
					
					@FindBy(xpath="//span[contains(text(),'Classification__')]")
					private static WebElement  classificationChkBox;
					
					@FindBy(xpath="//li[18]//div[1]//label[1]//span[1]")
					private static WebElement  repelenishment2ChkBox;
					
					@FindBy(xpath="//li[19]//div[1]//label[1]//span[1]")
					private static WebElement  otherDetails2ChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iBin')]")
					private static WebElement  iBinChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iAlternateCategory')]")
					private static WebElement  iAlternateCategoryChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iTaxCode')]")
					private static WebElement  iTaxCodeChkBox;
				
				@FindBy(xpath="//select[@id='doc_Accountdepandency_Filter']")
				private static WebElement  accountfilterDropdown;
				
				@FindBy(xpath="//select[@id='doc_Itemdepandency_Filter']")
				private static WebElement  itemfilterDropdown;
				
				
				// Documents Tab Grid Elements
				
			    // first row 
				
				@FindBy(xpath="//td[@id='doc_TagsTable_col_1-0']")
				private static WebElement  firstrow;
				
				@FindBy(xpath="//div[contains(text(),'Delete Row')]")
				private static WebElement  doc_deleterowBtn;
				
				@FindBy(xpath="//div[contains(text(),'Insert Row')]")
				private static WebElement  doc_insertRowBtn;
				
				@FindBy(xpath="//td[@id='doc_TagsTable_col_1-1']")
				private static WebElement  masters1;
				
				@FindBy(xpath="//td[@id='doc_TagsTable_col_1-2']")
				private static WebElement  position1;
				
				@FindBy(xpath="//td[@id='doc_TagsTable_col_1-3']")
				private static WebElement  showDependency1;
				
				@FindBy(xpath="//td[@id='doc_TagsTable_col_1-4']")
				private static WebElement  group1;
				
				@FindBy(xpath="//td[@id='doc_TagsTable_col_1-5']")
				private static WebElement  filter1;
				
				@FindBy(xpath="//td[@id='doc_TagsTable_col_1-6']")
				private static WebElement  mandatory1;
				
				
				// Second Row // Delete and Insert row are same
				
				@FindBy(xpath="//td[@id='doc_TagsTable_col_2-0']")
				private static WebElement  secondRow;
				
				@FindBy(xpath="//td[@id='doc_TagsTable_col_2-1']")
				private static WebElement  masters2;
				
				@FindBy(xpath="//td[@id='doc_TagsTable_col_2-2']")
				private static WebElement  position2;
				
				@FindBy(xpath="//td[@id='doc_TagsTable_col_2-3']")
				private static WebElement  showDependency2;
				
				@FindBy(xpath="//td[@id='doc_TagsTable_col_2-4']")
				private static WebElement  group2;
				
				@FindBy(xpath="//td[@id='doc_TagsTable_col_2-5']")
				private static WebElement  filter2;
				
				@FindBy(xpath="//td[@id='doc_TagsTable_col_2-6']")
				private static WebElement  mandatory2;
				
				// After clicking // Properties Changes which are same for all rows
				
				@FindBy(xpath="//select[@id='doc_TagsTableMasterDropDown']")
				private static WebElement  masterDropDown;
				
				@FindBy(xpath="//select[@id='doc_TagsPositionDropDown']")
				private static WebElement  positionDropdown;
				
				@FindBy(xpath="//input[@id='txtbox_doc_TagsDepedencyDropDown']")
				private static WebElement  showDependencyDropdown;
				
				@FindBy(xpath="//input[@id='doc_TagsGroupTxtbox']")
				private static WebElement  groupTxt;
				
				@FindBy(xpath="//select[@id='docFilter']")
				private static WebElement  filterDropdown;
				
				@FindBy(xpath="//select[@id='doc_MandatoryDropDown']")
				private static WebElement  mandatoryDropDown;
				
			    
				
				
				
				
				
				
				
				
				
				
		 //Views Tab
		@FindBy(xpath="//span[@class='icon-views'")
		private static WebElement  viewsTab;
			
		//Export Fields 
		@FindBy(xpath="//span[contains(text(),'Export Fields')]")
		private static WebElement exportFieldsTab;
			
		//Triggers
		@FindBy(xpath="//span[@class='icon-trigger icon-font7']")
		private static WebElement  triggersTab;	
			
		//Document Numbering
		@FindBy(xpath="//span[contains(text(),'Document Numbering')]")
		private static WebElement  documentNumberingTab;
			
		//Hire Purchase	
		@FindBy(xpath="//span[contains(text(),'Hire Purchase')]")
		private static WebElement hirePurchasetab;
			
		//Reports Tab	
		@FindBy(xpath="//span[@class='icon-text70 icon-font7']")
		private static WebElement  reportsTab;	
		
		//Schemes
		@FindBy(xpath="//span[contains(text(),'Schemes')]")
		private static WebElement schemestab;	
		
		
		// Bin Inward Elements
		
			@FindBy (xpath="//input[@id='id_bins_totalquantity']")
			private static WebElement binTotalQty;
			
			@FindBy (xpath="//div[@class='modal-body']//div[4]")
			private static WebElement binBaseUOM;
			
			@FindBy (xpath="//input[@id='srch_bin']")
			private static WebElement binSearchTxt;
			
			@FindBy (xpath="//button[contains(text(),'Search')]")
			private static WebElement binSearchBtn; 
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-0']")
			private static WebElement  binselect1stRow_1stColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-1']")
			private static WebElement  binselect1stRow_2ndColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-3']")
			private static WebElement  binselect1stRow_3rdColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-5']")
			private static WebElement  binselect1stRow_4thColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-6']")
			private static WebElement  binselect1stRow_5thColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-7']")
			private static WebElement  binselect1stRow_6thColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-8']")
			private static WebElement  binselect1stRow_7thColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-12']")
			private static WebElement  binselect1stRow_8thColumn;
			
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-0']")
			private static WebElement  binselect2ndRow_1stColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-1']")
			private static WebElement  binselect2ndRow_2ndColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-3']")
			private static WebElement  binselect2ndRow_3rdColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-5']")
			private static WebElement  binselect2ndRow_4thColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-6']")
			private static WebElement  binselect2ndRow_5thColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-7']")
			private static WebElement  binselect2ndRow_6thColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-8']")
			private static WebElement  binselect2ndRow_7thColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-12']")
			private static WebElement  binselect2ndRow_8thColumn;
			
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-0']")
			private static WebElement  binselect3rdRow_1stColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-1']")
			private static WebElement  binselect3rdRow_2ndColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-3']")
			private static WebElement  binselect3rdRow_3rdColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-5']")
			private static WebElement  binselect3rdRow_4thColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-6']")
			private static WebElement  binselect3rdRow_5thColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-7']")
			private static WebElement  binselect3rdRow_6thColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-8']")
			private static WebElement  binselect3rdRow_7thColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-12']")
			private static WebElement  binselect3rdRow_8thColumn;
			
			
			@FindBy(xpath="//span[@class='icon-sum']")
			private static WebElement  binRowSum;
			
			@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[2]")
			private static WebElement  binRowSum_2ndColumn;
			
			@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[4]")
			private static WebElement  binSelect4htRow_3rdColumn;
			
			@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[6]")
			private static WebElement  binRowSum_4thColumn;
			
			@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[7]")
			private static WebElement  binRowSum_5thColumn;
			
			@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[8]")
			private static WebElement  binRowSum_6thColumn;
			
			@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[9]")
			private static WebElement  binRowSum_7thColumn;
			
			@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[12]")
			private static WebElement  binRowSum_8thColumn;
			
			
			@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[13]")
			private static WebElement  binSumInward;
			
			
			
			@FindBy (xpath="//input[@id='id_bins_balance']")
			private static WebElement binBalanceTxt;
			
			@FindBy (xpath="//div[@id='id_btnalternatecategorycheck']//div[@class='toolbar_button_image']")
			private static WebElement binAlternateCategoryCheckBtn;
			
			@FindBy (xpath="//div[@id='id_btnautoallocate']//div[@class='toolbar_button_image']")
			private static WebElement binAutoAllocateBtn;
			
			@FindBy (xpath="//span[@class='icon-pick icon-font4']")
			private static WebElement binPickBtn; 
			
			@FindBy (xpath="//div[@id='id_btnautoallocategroup']//div[@class='toolbar_button_image']")
			private static WebElement binAutoAllocateWithinGroupBtn;
			
			@FindBy (xpath="//div[@id='id_bins_ok']//span[@class='icon-ok icon-font6']")
			private static WebElement binOkBtn;
			
			@FindBy (xpath="//div[@class='col-xs-9 pull-right']//span[@class='icon-close icon-font6']")
			private static WebElement binCancelBtn;

			
			// RMA POpup Window
			@FindBy (xpath="//div[@id='Modal_Header']/div[1]")
			private static WebElement rmaScreenTitle;
			
			@FindBy (xpath="//input[@id='txtSerialNo']")
			private static WebElement rmaSerialNumberTxtField;

			@FindBy (xpath="//input[@id='txtQuantity']")
			private static WebElement rmaQuantityTxtField;
			
			@FindBy (xpath="//div[@id='img_add']/div/span")
			private static WebElement rmaAddBtn;
				
			@FindBy (xpath="//div[@id='Modal_Search_Body']/div[3]/label")
			private static WebElement rmaNumberofItemsLabel;
			
			@FindBy (xpath="//th[@id='RMA_Table_control_heading_1']/div")
			private static WebElement rmaTableHeadingRMA;
			
			@FindBy (xpath="//th[@id='RMA_Table_control_heading_2']/div")
			private static WebElement rmaTableHeadingDocumentNo;
			
			@FindBy (xpath="//th[@id='RMA_Table_control_heading_3']/div")
			private static WebElement rmaTableHeadingDocumentDate;
			
			@FindBy (xpath="//div[@id='RMAModel_Bottom']/div[1]/label")
			private static WebElement rmaClearBtn;
			
			@FindBy (xpath="//div[@id='RMAModel_Bottom']/div[2]/label")
			private static WebElement rmaOkBtn;
			
			@FindBy (xpath="//div[@id='RMAModel_Bottom']/div[3]/label")
			private static WebElement rmaCancelBtn;
			
			@FindBy (xpath="//div[@id='Modal_Header']/div[2]/span/i")
			private static WebElement rmaCloseBtn;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_1-1']")
			private static WebElement rmaTableRow1Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_2-1']")
			private static WebElement rmaTableRow2Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_3-1']")
			private static WebElement rmaTableRow3Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_4-1']")
			private static WebElement rmaTableRow4Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_5-1']")
			private static WebElement rmaTableRow5Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_6-1']")
			private static WebElement rmaTableRow6Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_7-1']")
			private static WebElement rmaTableRow7Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_8-1']")
			private static WebElement rmaTableRow8Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_9-1']")
			private static WebElement rmaTableRow9Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_10-1']")
			private static WebElement rmaTableRow10Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_11-1']")
			private static WebElement rmaTableRow11Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_12-1']")
			private static WebElement rmaTableRow12Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_13-1']")
			private static WebElement rmaTableRow13Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_14-1']")
			private static WebElement rmaTableRow14Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_15-1']")
			private static WebElement rmaTableRow15Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_16-1']")
			private static WebElement rmaTableRow16Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_17-1']")
			private static WebElement rmaTableRow17Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_18-1']")
			private static WebElement rmaTableRow18Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_19-1']")
			private static WebElement rmaTableRow19Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_20-1']")
			private static WebElement rmaTableRow20Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_1-2']")
			private static WebElement rmaTableRow1Column2;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_1-3']")
			private static WebElement rmaTableRow1Column3;
			
			@FindBy (xpath="//td[@id='id_body_38_input_image']/img")
			private static WebElement rmaExpansionBtn;
			
			
			//----------------------------------------------------------------------------------------------------------    
		    // Edit Screen Tab     
					    
		    @FindBy(xpath="//span[contains(text(),'Edit Screen')]")
		   	private static WebElement  editScreenTab; 
			
			@FindBy(xpath="//i[@class='icon-add icon-font7']")
			private static WebElement editScreenaddBtn;

			@FindBy(xpath="//a[contains(text(),'Field Details')]")
			private static WebElement editScreenFieldDetailsTab;
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_Caption']")
			private static WebElement  editScreenCaptionTxt;

			@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_DataType']")
			private static WebElement  editScreenCaptionDataTypeDropdown;
			
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_DefaultValue']")
			private static WebElement editScreenDefaultValueTxt;
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_noofDecimals']")
			private static WebElement editScreenNoOfDecimalsDropdown;
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_toolTip']")
			private static WebElement editScreenToolTipTxt;
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_bannerText']")
			private static WebElement editScreenBannerTextTxt;
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_MinValue']")
			private static WebElement editScreenMinimunValueTxt;
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_MaxValue']")
			private static WebElement editScreenMaximunValueTxt;
		   
			@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_behaviour']")
			private static WebElement editScreenAddFieldsBehaviourDropdown;
			
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_Formula_textbox']")
			private static WebElement  editScreenAddBehaviourformulaTxt;
			
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_Formula_Ok']")
			private static WebElement  editScreenAddBehaviourFormulaokBtn;
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_PreLoad_textbox']")
			private static WebElement editScreenPreloadTxt;
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_PreLoad_textbox']")
			private static WebElement editScreenRestrictformulaTxt;
		   
			@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_RoundOff']")
			private static WebElement editScreenRoundOffsDropdown;
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_RoundOffTo']")
			private static WebElement editScreenRoundOffToTxt;
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_RestrictMsg']")
			private static WebElement editScreenRestrictMessageTxt;
		   
			@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_AddToNet']")
			private static WebElement editScreenAddToNetDropdown;
		   
			@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_AddToStock']")
			private static WebElement editScreenAddToStockDropDown;

			@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_Position']")
			private static WebElement editScreenpositionDropdown;  
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_Columnwidth']")
			private static WebElement editScreenColumnWidthTxt;  
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkValinBaseCurency']")
			private static WebElement editScreenValueInBaseCurrencyChkBox;  
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkValinBaseCurency']")
			private static WebElement editScreenHideFromSummaryChkBox;  
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkPostToAcc']")
			private static WebElement editScreenPostToAccountChkBox;  
		 
			@FindBy(xpath="//input[@id='acc1-1']")
			private static WebElement editScreenAccount1Radio;  
					   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_defaultAcc1']")
			private static WebElement editScreenAccount1Txt;  
		   
			@FindBy(xpath="//*[@id='editScreen_FieldsCustomization_defaultAcc1_input_image']/span")
			private static WebElement editScreenAccount1ExpandBtn;  
		   
			@FindBy(xpath="//*[@id='editScreen_FieldsCustomization_defaultAcc1_input_settings']/span")
			private static WebElement editScreenAccount1SettingsBtn;  
					   
			    @FindBy(xpath="//div[@id='editScreen_FieldsCustomization_defaultAcc1_customize_popup_container']")
				private static WebElement editScreenAccount1Container;  
			    
			    @FindBy(xpath="//div[@id='editScreen_FieldsCustomization_defaultAcc1_customize_popup_footer']//input[1]")
				private static WebElement editScreenAccount1StandardFiledsBtn;  
								    
				    @FindBy(xpath="//select[@id='editScreen_FieldsCustomization_defaultAcc1_customize_popup_standardfields_list']")
					private static WebElement editScreenAccount1StandardFiledsDropdown;  
				    
				    @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_defaultAcc1_customize_popup_standardfields_header']")
					private static WebElement editScreenAccount1StandardFiledsHeaderTxt;  
				    
				    @FindBy(xpath="//select[@id='editScreen_FieldsCustomization_defaultAcc1_customize_popup_standardfields_alignment']")
					private static WebElement editScreenAccount1StandardFiledsAllignmentDropdown; 
				    
				    @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_defaultAcc1_customize_popup_standardfields_width']")
					private static WebElement editScreenAccount1StandardFiledsWidthTxt;  
				    
				    @FindBy(xpath="//section[@id='page_Content']//input[3]")
					private static WebElement editScreenAccount1StandardFiledsokBtn;  
				    
				    @FindBy(xpath="//section[@id='page_Content']//input[4]")
					private static WebElement editScreenAccount1StandardFiledscancelBtn;  
								    
			    @FindBy(xpath="//div[@id='editScreen_FieldsCustomization_defaultAcc1_search_container']//input[2]")
				private static WebElement editScreenAccount1deleteColumnBtn;
			    
			    @FindBy(xpath="//section[@id='page_Content']//input[3]")
			   	private static WebElement editScreenAccount1okBtn;  
			       
			    @FindBy(xpath="//section[@id='page_Content']//input[4]")
			   	private static WebElement editScreenAccount1cancelBtn;
					
			@FindBy(xpath="//input[@id='acc2-2']")
			private static WebElement editScreenAccount2Radio;  
			    
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_defaultAcc2']")
			private static WebElement editScreenAccount2Txt;  
			    
			@FindBy(xpath="//*[@id='editScreen_FieldsCustomization_defaultAcc2_input_image']/span")
			private static WebElement editScreenAccount2ExpandBtn;
		  
		    @FindBy(xpath="//*[@id='editScreen_FieldsCustomization_defaultAcc2_input_settings']/span")
		  	private static WebElement editScreenAccount2SettingsBtn;  
					      
			    @FindBy(xpath="//div[@id='editScreen_FieldsCustomization_defaultAcc2_customize_popup_container']")
				private static WebElement editScreenAccount2Container;  
			    
			    @FindBy(xpath="//div[@id='editScreen_FieldsCustomization_defaultAcc2_customize_popup_footer']//input[1]")
				private static WebElement editScreenAccount2StandardFiledsBtn;  
					  			    
				    @FindBy(xpath="//select[@id='editScreen_FieldsCustomization_defaultAcc2_customize_popup_standardfields_list']")
					private static WebElement editScreenAccount2StandardFiledsDropdown;  
				    
				    @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_defaultAcc2_customize_popup_standardfields_header']")
					private static WebElement editScreenAccount2StandardFiledsHeaderTxt;  
				    
				    @FindBy(xpath="//select[@id='editScreen_FieldsCustomization_defaultAcc2_customize_popup_standardfields_alignment']")
					private static WebElement editScreenAccount2StandardFiledsAllignmentDropdown; 
				    
				    @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_defaultAcc2_customize_popup_standardfields_width']")
					private static WebElement editScreenAccount2StandardFiledsWidthTxt;  
				    
				    @FindBy(xpath="//section[@id='page_Content']//input[3]")
					private static WebElement editScreenAccount2StandardFiledsokBtn;  
				    
				    @FindBy(xpath="//section[@id='page_Content']//input[4]")
					private static WebElement editScreenAccount2StandardFiledscancelBtn;  
					  			    
			    @FindBy(xpath="//div[@id='editScreen_FieldsCustomization_defaultAcc2_search_container']//input[2]")
				private static WebElement editScreenAccount2deleteColumnBtn;
			    
			    @FindBy(xpath="//section[@id='page_Content']//input[3]")
			   	private static WebElement editScreenAccount2okBtn;  
			       
			       @FindBy(xpath="//section[@id='page_Content']//input[4]")
			   	private static WebElement editScreenAccount2cancelBtn;
		   
		   @FindBy(xpath="//input[@id='acc1-3']")
		   private static WebElement editScreenAccount1VariableRadio; 
		  
		   @FindBy(xpath="//input[@id='Account_1Var']")
		   private static WebElement editScreenAccount1VariableTxt;
		   
		   @FindBy(xpath="//input[@id='acc2-4']")
		   private static WebElement editScreenAccount2VariableRadio; 
		  
		   @FindBy(xpath="//input[@id='Account_2Var']")
		   private static WebElement editScreenAccount2VariableTxt;
		   
		   @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_RegularExpr']")
		   private static WebElement editScreenRegularExpTxt; 
		   
		   @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_ErrorMsg']")
		   private static WebElement editScreenerrorMessageTxt; 

		 // properties  
		   
		  @FindBy(xpath="//a[contains(text(),'Properties')]")
		  private static WebElement editScreenPropertiesTab;  
		     
		  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkAuditTrail']")
		  private static WebElement editScreenauditTrailChkBox;  
		     
		  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkCantExprt']")
		  private static WebElement editScreencantExportChkBox;  
		  
		  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkCantImprt']")
		  private static WebElement editScreencantImportChkbox; 
		     
		  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkHidden']")
		  private static WebElement editScreenhiddenChkbox;  
		  
		  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkMandatory']")
		  private static WebElement editScreenmandatorychkBox; 
		     
		  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkNotAvailForReports']")
		  private static WebElement editScreennotAvailableForReportsChkBox;  
		     
		  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkReadOnly']")
		  private static WebElement editScreenreadOnlyChkBox;  
		 
		     
		  @FindBy(xpath="//span[contains(text(),'Apply')]")
		  private static WebElement editScreenApplyBtn;  
		     
		  @FindBy(xpath="//span[@id='editScreen_FieldsCustomization_Close']")
		  private static WebElement editScreencloseBtn;  
		  

		 
		  @FindBy(xpath="//a[@href='#editScreen_FieldsCustomization_ExternalModules']")
		  private static WebElement editScreenExternalModulesTab; 
					
			// External Module Tab is named As EFES And ELV For Each Screen (ReceiptsEFES,ReceiptsELV )
		    // External Functions(External Fields) Changes From Screen to Screen
		
			// Formatting Tab
					  
		    @FindBy(xpath="//*[@id='editScreen_FieldsCustomization_tabs']/li[3]/a")
		    private static WebElement editScreenformattingTab;

			@FindBy(xpath="//*[@id='fontFamily_editScreen_FieldsCustomization_FontCtrl']")
		    private static WebElement editScreenFontFamilyDropdown;
			
		    @FindBy(xpath="//*[@id='fontStyle_editScreen_FieldsCustomization_FontCtrl']")
		    private static WebElement editScreenFontStyleDropdown;

		    @FindBy(xpath="//*[@id='fontWeight_editScreen_FieldsCustomization_FontCtrl']")
		    private static WebElement editScreenFontWeightDropdown;

			@FindBy(xpath="//*[@id='fontSizes_editScreen_FieldsCustomization_FontCtrl']")
			private static WebElement editScreenFontSizeDropdown;
			
			@FindBy(xpath="//*[@id='fontForeColor_editScreen_FieldsCustomization_FontCtrl']")
			private static WebElement editScreenForeColourDropdown;
			
			@FindBy(xpath="//*[@id='fontBackColor_editScreen_FieldsCustomization_FontCtrl']")
			private static WebElement editScreenBackColourDropdown;
			
			@FindBy(xpath="//*[@id='chkBaseline_editScreen_FieldsCustomization_FontCtrl']")
			private static WebElement editScreenBaseLineCheckbox;
			
			@FindBy(xpath="//*[@id='chkOverLine_editScreen_FieldsCustomization_FontCtrl']")
			private static WebElement editScreenOverLineCheckbox;
			
			@FindBy(xpath="//*[@id='chkStrikeThrough_editScreen_FieldsCustomization_FontCtrl']")
			private static WebElement EditScreenStrikeThroughCheckbox;
			
			@FindBy(xpath="//*[@id='chkUnderline_editScreen_FieldsCustomization_FontCtrl']")
			private static WebElement editScreenUnderlineCheckbox;
			
			@FindBy(xpath="//*[@id='previewfont_editScreen_FieldsCustomization_FontCtrl']")
			private static WebElement editScreenFontPreviewTxt;
			
			@FindBy(xpath="//*[@id='editScreen_FieldsCustomization_Formatting_chkenableFont']")
			private static WebElement editScreenenableFontChkbox;
					
			  @FindBy(xpath="//i[@class='icon-copyfields icon-font7']")
			  private static WebElement editScreenLoadFieldsBtn;  
			     
			  @FindBy(xpath="//select[@id='editScreen_voucherDropDown']")
			  private static WebElement editScreenLoadFieldsDropdown;  
			     
			  @FindBy(xpath="//*[@id='editScreen_copyFieldsDiv']/div[3]/button[1]")
			  private static WebElement editScreenselectAllBtn;  
			  
			  @FindBy(xpath="//div[@id='editScreen_copyFieldsDiv']//button[@class='Fbutton pull-right'][contains(text(),'Ok')]")
			  private static WebElement editScreenokBtn;  
			     
			  @FindBy(xpath="//input[@id='searchlayout2']")
			  private static WebElement editScreenSearchTxt;  
			     
			  @FindBy(xpath="//button[@id='btnEditScreenPrev']")
			  private static WebElement editScreenPreviousBtn;  
			     
			  @FindBy(xpath="//button[@id='btnEditScreenNext']")
			  private static WebElement editScreenNextBtn;  
			  
			  @FindBy(xpath="//*[@id='editScreen_tabContent']/label")
				private static WebElement editScreenRatePreloadLabel;
			  
			  @FindBy(xpath="//select[@id='cmbBehaviour']")
			  private static WebElement editScreenBehaviourDropdown;
			  
			  @FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_textbox']")
			  private static WebElement editScreenQuantityPreloadedTxt;
			  	  
			  @FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_formulaText']")
			  private static WebElement  formulaTxt;
				
			  @FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_expandedFormula']")
			  private static WebElement  expandeFormula;
						
		     // Grid Elements 
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_1-2']//span[@class='icon-collepse icon-font8']")
			private static WebElement  editScreenTransactionExpandBtn;
					
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_2-2']")
				private static WebElement  editScreenQuantity;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_2-3']")
				private static WebElement  editScreenqty;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_3-2']")
				private static WebElement  editScreenRate;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_3-3']")
				private static WebElement  editScreenrt;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_4-2']")
				private static WebElement  editScreenAlternateQty;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_4-3']")
				private static WebElement  editScreenqtya;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_5-2']")
				private static WebElement  editScreengrossAmount;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_5-3']")
				private static WebElement  editScreengr;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_6-2']")
				private static WebElement  editScreenStockValue;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_6-3']")
				private static WebElement  editScreenstkv;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_7-2']")
				private static WebElement  editScreenAccount;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_7-3']")
				private static WebElement  EditScreenacc;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_8-2']")
				private static WebElement  editScreenAccount2;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_8-3']")
				private static WebElement  editScreenacc2;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_9-2']")
				private static WebElement  editScreenExchangeRate;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_9-3']")
				private static WebElement  editScreenexrt;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_10-2']")
				private static WebElement  editScreenqtyinBaseUnit;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_10-3']")
				private static WebElement  editScreenqtyb;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_11-2']")
				private static WebElement  editScreenCurrency;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_11-3']")
				private static WebElement  editScreencrn;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_12-2']")
				private static WebElement  editScreenValueOfThetagMasterIDofTheTag;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_12-3']")
				private static WebElement  editScreentgval;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_13-2']")
				private static WebElement  editScreenNetAmount;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_13-3']")
				private static WebElement  EditScreennet;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_14-2']")
				private static WebElement  editScreenNetAmountInOriginalCurrency;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_14-3']")
				private static WebElement  editScreenneto;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_15-2']")
				private static WebElement  editScreenTotalQuantity;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_15-3']")
				private static WebElement  editScreentqty;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_16-2']")
				private static WebElement  editScreenTotalGross;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_16-3']")
				private static WebElement  editScreentgr;
								
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_17-2']//span[@class='icon-expand icon-font8']")
			private static WebElement  screenFiledExpandBtn;
					
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_18-2']")
				private static WebElement  mrnQtyInput;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_18-3']")
				private static WebElement  sb1;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_19-2']")
				private static WebElement  mrnQtyCalculatedValue;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_19-3']")
				private static WebElement  sbo1;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_20-2']")
				private static WebElement  qtyBalancedInput;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_20-3']")
				private static WebElement  sb2;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_21-2']")
				private static WebElement  qtyCalculatedValue;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_21-3']")
				private static WebElement  sbO2;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_22-2']")
				private static WebElement  averagerateInput;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_22-3']")
				private static WebElement  sb3;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_23-2']")
				private static WebElement  avreageRateCalculatedValue;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_23-3']")
				private static WebElement  sbO3;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_24-2']")
				private static WebElement  addValueInput;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_24-3']")
				private static WebElement  sb4;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_25-2']")
				private static WebElement  addValueInputCalculatedValue;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_25-3']")
				private static WebElement  sbO4;
					
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_26-2']//span[@class='icon-collepse icon-font8']")
			private static WebElement  layoutFieldExpandBtn;
			
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_27-2']")
				private static WebElement  appropriateBasedOnInput;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_27-3']")
				private static WebElement  lh0;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_28-2']")
				private static WebElement  additionalValueInput;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_28-3']")
				private static WebElement  lh1;
								
		    //Grid Completed
			
			@FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_availableVariables']")
			private static WebElement  editScreenqtyFormulaSearchTxt;
			
			@FindBy(xpath="//button[@id='editScreen_qtyPreLoaded_PlusOpt']")
			private static WebElement  editScreenqtyPlusBtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'-')]")
			private static WebElement  editScreenqtyMinusBtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded']//button[3]")
			private static WebElement  editScreenqtyDivideBtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'*')]")
			private static WebElement  editScreenqtyMultiplyBtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded']//button[5]")
			private static WebElement  editScreenqtyBrackets1Btn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded']//button[6]")
			private static WebElement  editScreenqtyBrackets2Btn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'~')]")
			private static WebElement  editScreenqtyTildeBtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'&')]")
			private static WebElement  editScreenqtyAndBtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'%')]")
			private static WebElement  editScreenqtyPercentBtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//div[@id='operationButtons']//button[@class='btn btn-link'][contains(text(),']')]")
			private static WebElement  editScreenqtySquarebracketBtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'|')]")
			private static WebElement  editScreenqtyVerticalBarBtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'\')]")
			private static WebElement  editScreenqtyBackSlashBtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'<')]")
			private static WebElement  editScreenqtyLessThanbtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'>')]")
			private static WebElement  editScreenqtyGreaterThanBtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'=')]")
			private static WebElement  editScreenqtyExclamationBtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'=')]")
			private static WebElement  editScreenqtyEqualBtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'?:')]")
			private static WebElement  editScreenqtyQuestionBtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'^')]")
			private static WebElement  editScreenqtyCaretBtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'DateDiff()')]")
			private static WebElement  editScreenqtyDateDiffBtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'Cond()')]")
			private static WebElement  editScreenqtyCondBtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'Min()')]")
			private static WebElement  editScreenqtyMinBtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'Max()')]")
			private static WebElement  editScreenqtyMaxBtn;
			
			@FindBy(xpath="//button[@id='editScreen_qtyPreLoaded_Ok']")
			private static WebElement  editScreenqtyConditionokBtn;
			
			@FindBy(xpath="//button[@id='editScreen_qtyPreLoaded_Cancel']")
			private static WebElement  editScreenqtyConditioncancelBtn;
					
					
			@FindBy(xpath="//*[@id='editScreen_qtyFormula_textbox']")
			private static WebElement  editScreenformulaTxt;
			
			
			// CustomizeGrid
			
			@FindBy(xpath="//i[@class='icon-custamize icon-font7']")
			private static WebElement editScreencustomizeGridBtn;  
			  
			@FindBy(xpath="//span[contains(text(),'Apportion')")
			private static WebElement editScreenApportionBtn;
			     
			@FindBy(xpath="//span[contains(text(),'Audit Trial')]")
			private static WebElement editScreenAuditTrialBtn;  
			    
			@FindBy(xpath="//span[contains(text(),'Back color')]")
			private static WebElement editScreenbackColorBtn;  
			     
			@FindBy(xpath="//span[contains(text(),'Banner text')]")
			private static WebElement editScreenbannerTextBtn;  
			 
			  @FindBy(xpath="//span[contains(text(),'Cannot be exported')]")
			  private static WebElement editScreencannotBeExportedBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'Cannot be imported')]")
			  private static WebElement editScreencannotBeImportedBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'Column Span')]")
			  private static WebElement editScreencolumnSpanBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'Copy from Parent')]")
			  private static WebElement editScreencopyFromParentBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'DataType')]")
			  private static WebElement editScreendataTypeBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'Default Value')]")
			  private static WebElement editScreenDefaultValueBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'Error message')]")
			  private static WebElement editScreenerrorMessageBtn;  
			 
			  @FindBy(xpath="//span[contains(text(),'External module attached')]")
			  private static WebElement editScreenExternalModuleAttachedBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'Field Order')]")
			  private static WebElement editScreenFilterOrderBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'Font')]")
			  private static WebElement editScreenFontBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'Group Name')]")
			  private static WebElement editScreengroupNameBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'Hide left panel')]")
			  private static WebElement editScreenHideLeftPanelBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'Information Field')]")
			  private static WebElement editScreenInformationFieldBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'Mandatory')]")
			  private static WebElement editScreenMandatoryBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'Mass Update')]")
			  private static WebElement editScreenMassupdateBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'Maximum Value')]")
			  private static WebElement editScreenMaximumValueBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'Merge Field')]")
			  private static WebElement editScreenMergerFieldBtn;  
			  
			  @FindBy(xpath="//span[contains(text(),'Minimum Value')]")
			  private static WebElement editScreenMinimumValueBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'No Of Decimals')]")
			  private static WebElement editScreenNoOfDecimalsBtn;  
			  
			  @FindBy(xpath="//span[contains(text(),'Not available for reports')]")
			  private static WebElement editScreenNotAvailableForReportsBtn; 
			     
			  @FindBy(xpath="//span[contains(text(),'Read Only')]")
			  private static WebElement editScreenReadOnlyBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'Regular expression')]")
			  private static WebElement editScreenRegularExpressionBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'Restrict formula')]")
			  private static WebElement editScreenRestrictFormulaBtn;  
			  
			  @FindBy(xpath="//span[contains(text(),'Restrict Message')]")
			  private static WebElement editScreenRestrictMessageBtn;  
			  
			  @FindBy(xpath="//span[contains(text(),'Round Offs')]")
			  private static WebElement editScreenRoundsOffsBtn;  
			
			  @FindBy(xpath="//span[contains(text(),'Row Span')]")
			  private static WebElement editScreenRowSpanBtn; 
			     
			  @FindBy(xpath="//span[contains(text(),'Rule Attached')]")
			  private static WebElement editScreenRuleAttachedBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'Tooltip')]")
			  private static WebElement editScreenToolTipBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'Variable name')]")
			  private static WebElement editScreenVariableNameBtn;  
			 
			  
			  
			  
			
			 // Body Tab 
			  
			  @FindBy(xpath="//a[contains(text(),'Body')]")
			  private static WebElement  editScreenBodyTab; 
			  
			  @FindBy(xpath="//td[@id='editScreen_bodyrow_1 _1']//span[@id='editIcon']")
			  private static WebElement  editScreenBody1stRowEditBtn; 
			  
			  @FindBy(xpath="//td[@id='editScreen_bodyrow_1 _1']//span[@id='deleteIcon']")
			  private static WebElement  editScreenBody1stRowDeleteBtn; 
			  
			  @FindBy(xpath="//td[@id='editScreen_bodyrow_2 _1']//span[@id='editIcon']")
			  private static WebElement  editScreenBody2ndRowEditBtn; 
			  
			  @FindBy(xpath="//td[@id='editScreen_bodyrow_2 _1']//span[@id='deleteIcon']")
			  private static WebElement  editScreenBody2ndRowDeleteBtn; 
			  
			  @FindBy(xpath="//td[@id='editScreen_bodyrow_3 _1']//span[@id='editIcon']")
			  private static WebElement  editScreenBody3rdRowEditBtn; 
			  
			  @FindBy(xpath="//td[@id='editScreen_bodyrow_3 _1']//span[@id='deleteIcon']")
			  private static WebElement  editScreenBody3rdRowDeleteBtn; 
			  
			  @FindBy(xpath="//td[@id='editScreen_bodyrow_4 _1']//span[@id='editIcon']")
			  private static WebElement  editScreenBody4thRowEditBtn; 
			  
			  @FindBy(xpath="//td[@id='editScreen_bodyrow_4 _1']//span[@id='deleteIcon']")
			  private static WebElement  editScreenBody4thRowDeleteBtn; 
			  
			  @FindBy(xpath="//td[@id='editScreen_bodyrow_5 _1']//span[@id='editIcon']")
			  private static WebElement  editScreenBody5thRowEditBtn; 
			  
			  @FindBy(xpath="//td[@id='editScreen_bodyrow_5 _1']//span[@id='deleteIcon']")
			  private static WebElement  editScreenBody5thRowDeleteBtn;
			  
			  @FindBy(xpath="//td[@id='editScreen_bodyrow_6 _1']//span[@id='editIcon']")
			  private static WebElement  editScreenBody6thRowEditBtn; 
			  
			  @FindBy(xpath="//td[@id='editScreen_bodyrow_6 _1']//span[@id='deleteIcon']")
			  private static WebElement  editScreenBody6thRowDeleteBtn;
			  
			  @FindBy(xpath="//div[@id='editScreen_body']//button[@class='icon-up-arrow Fbutton']")
			  private static WebElement  editScreenBodyUpArrowBtn; 
			
			  @FindBy(xpath="//div[@id='editScreen_body']//button[@class='icon-down-arrow Fbutton']")
			  private static WebElement  editScreenBodyDownArrowBtn;
							
			  // Footer Tab
			  
			  @FindBy(xpath="//a[contains(text(),'Footer')]")
			  private static WebElement  editScreenFooterTab;  
			  
			  @FindBy(xpath="//td[@id='editScreen_footerrow_1 _1']//span[@id='editIcon']")
			  private static WebElement  editScreenFooter1stRowEditBtn; 
			  
			  @FindBy(xpath="//td[@id='editScreen_footerrow_1 _1']//span[@id='deleteIcon']")
			  private static WebElement  editScreenFooter1stRowDeleteBtn; 
			  
			  @FindBy(xpath="//td[@id='editScreen_footerrow_2 _1']//span[@id='editIcon']")
			  private static WebElement  editScreenFooter2ndRowEditBtn; 
			  
			  @FindBy(xpath="//td[@id='editScreen_footerrow_2 _1']//span[@id='deleteIcon']")
			  private static WebElement  editScreenFooter2ndRowDeleteBtn; 
			  
			  @FindBy(xpath="//div[@id='editScreen_footer']//button[@class='icon-up-arrow Fbutton']")
			  private static WebElement  editScreenFooterUpArrowBtn; 
			
			  @FindBy(xpath="//div[@id='editScreen_footer']//button[@class='icon-down-arrow Fbutton']")
			  private static WebElement  editScreenFooterDownArrowBtn; 
			  
			  	@FindBy(xpath="//label[contains(text(),'Quantity preloaded')]")
				private static WebElement qtyPreloadedLabel;
				
				@FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_textbox']")
				private static WebElement qtyPreloadedTxt;
				
				@FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_formulaText']")
				private static WebElement qtyPreloadedformulaTxt;
				
				@FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_availableVariables']")
				private static WebElement qtyPreloadedFormulaSearchTxt;
				
				@FindBy(xpath="//button[@id='editScreen_qtyPreLoaded_Ok']")
				private static WebElement qtyPreloadedFormulaokBtn;
				
				@FindBy(xpath="//button[@id='editScreen_qtyPreLoaded_Cancel']")
				private static WebElement qtyPreloadedFormulacancelBtn;


				@FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div[1]/label/span")
				private static WebElement editScreenLoadFields1stChkBox;
				
				@FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div[2]/label/span")
				private static WebElement editScreenLoadFields2ndChkBox;
				
				@FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div[3]/label/span")
				private static WebElement editScreenLoadFields3rdChkBox;
				
				@FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div[4]/label/span")
				private static WebElement editScreenLoadFields4thChkBox;
				
				@FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div[5]/label/span")
				private static WebElement editScreenLoadFields5hChkBox;
				
				@FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div[6]/label/span")
				private static WebElement editScreenLoadFields6thChkBox;
				
				@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_PreLoad_formulaText']")
				private static WebElement  preloadformulaTxt;
				
				@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_PreLoad_availableVariables']")
				private static WebElement  preloadFormulaSearchTxt;
				
				@FindBy(xpath="//button[@id='editScreen_FieldsCustomization_PreLoad_Ok']")
				private static WebElement  preloadFormulaokBtn;
					
				@FindBy(xpath="//button[@id='editScreen_FieldsCustomization_PreLoad_Cancel']")
				private static WebElement  preloadFormulacancelBtn;
				
				
				@FindBy(xpath="//td[@id='editScreen_footerrow_1 _3']")
				private static WebElement  editScreenFooter1stRowCaption;
				
				@FindBy(xpath="//td[@id='editScreen_footerrow_1 _3']")
				private static WebElement  editScreenFooter2ndRowCaption;
				
				@FindBy(xpath="//td[@id='editScreen_bodyrow_1 _3']")
				private static WebElement  editScreenbody1stRowCaption;
				
				@FindBy(xpath="//td[@id='editScreen_bodyrow_2 _3']")
				private static WebElement  editScreenbody2ndRowCaption;
				
				@FindBy(xpath="//td[@id='editScreen_bodyrow_3 _3']")
				private static WebElement  editScreenbody3rdRowCaption;
				
				@FindBy(xpath="//td[@id='editScreen_bodyrow_4 _3']")
				private static WebElement  editScreenbody4thRowCaption;
				
				@FindBy(xpath="//td[@id='editScreen_bodyrow_5 _3']")
				private static WebElement  editScreenbody5thRowCaption;
				
				
				
				// Add To Stock Status
				
				@FindBy(xpath="//td[@id='editScreen_bodyrow_1 _14']")
				private static WebElement  editScreenbody1stRowAddtoStock;
				
				@FindBy(xpath="//td[@id='editScreen_bodyrow_2 _14']")
				private static WebElement  editScreenbody2ndRowAddtoStock;
				
				@FindBy(xpath="//td[@id='editScreen_bodyrow_3 _14']")
				private static WebElement  editScreenbody3rdRowAddtoStock;
				
				@FindBy(xpath="//td[@id='editScreen_bodyrow_4 _14']")
				private static WebElement  editScreenbody4thRowAddtoStock;
				
				@FindBy(xpath="//td[@id='editScreen_bodyrow_5 _14']")
				private static WebElement  editScreenbody5thRowAddtoStock;			
				
			// Suspend Status Of Entry Page
			@FindBy(xpath="//tr[1]//td[11]")
			private static WebElement suspendStatusRow1;
		
		//User Name Display
		@FindBy(xpath="//span[@class='hidden-xs']")
	  	private static WebElement userNameDisplay;

		@FindBy(xpath="//*[@id='ulCompanyDetails_HomePage']/li[1]")
		private static WebElement companyName;

		@FindBy(xpath="//*[@id='companyLogo']")
		private static WebElement companyLogo;

	    @FindBy(xpath="//div[@id='Layout_Popup']//input[2]")
		private static WebElement noIn;
	    
	    @FindBy(xpath="//input[@id='donotshow']")
		private static WebElement doNotShowCheckbox;
	    
	    @FindBy(xpath="//span[@class='pull-right']")
		private static WebElement closeBtnInDemoPopupScreen;
	    
	    @FindBy(xpath="//*[@id='id_transaction_entry_detail_table_row_heading']/th[1]")
		private static WebElement voucherBodyHeaderIndex;
	    
	    
	    @FindBy(xpath="//a[@id='61']//span[contains(text(),'Transactions')]")
		private static WebElement  financialsTransactionMenu;

	        @FindBy(xpath="//*[@id='2007']/span")
			private static WebElement  financialsTransactionsPurchaseMenu; 
			
				@FindBy(xpath="//*[@id='2008']/span")
				private static WebElement  purchaseVoucher;
				
				@FindBy(xpath="//a[@id='2050']//span[contains(text(),'Purchase Vouchers N')]")
				private static WebElement  purchaseVoucherNew;
				
				@FindBy(xpath="//*[@id='id_transaction_viewcontainer']/li[1]/a")
				private static WebElement  homePageAllVouchersView;
				
				@FindBy(xpath="//*[@id='2009']/span")
				private static WebElement  purchaseReturnsVoucher;
				
				@FindBy(xpath="//a[contains(text(),'*Pending Authorization Purchase')]")
				private static WebElement  homePagePendingAuthorizationView;
				
				@FindBy(xpath="//a[contains(text(),'Pending Purchases Orders')]")
				private static WebElement  homePagePendingOrdersLinks;
				
		
	

	@FindBy(xpath="//label[@id='lblitem']")
	private static WebElement batchItemName;
	
	@FindBy(xpath="//label[@id='lblTotalQty']")
	private static WebElement batchTotalQty;
	
	@FindBy(xpath="//label[@id='lblAdjustQty']")
	private static WebElement batchAdjustQty;
	
	@FindBy(xpath="//label[@id='lblBalnceQty']")
	private static WebElement batchBalance;
	
	@FindBy(xpath="//div[contains(@class,'col-xs-12 col-sm-12 col-md-12 col-lg-12 P_ingBottom')]//div[2]//input[1]")
	private static WebElement batchExipiringInRadioBtn;
	             
	@FindBy(xpath="//section[@id='page_Content']//div[@class='row']//div//div[3]//input[1]")
	private static WebElement batchExipiringAfetrRadioBtn;
	
	@FindBy(xpath="//input[@id='txtWithin']")
	private static WebElement batchWithInTxt;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_1-1']")
	private static WebElement batch_BatchNoRow1;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_1-2']")
	private static WebElement batch_BaseQtyRow1;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_1-5']")
	private static WebElement batch_ExpiryInDateRow1;
	               
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_1-7']")
	private static WebElement batch_RateRow1;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_1-8']")
	private static WebElement batch_QtyAdjustedRow1;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_1-13']")
	private static WebElement batch_PurchaseDateRow1;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_2-1']")
	private static WebElement batch_BatchNoRow2;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_2-2']")
	private static WebElement batch_BaseQtyRow2;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_2-5']")
	private static WebElement batch_ExpiryInDateRow2;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_2-7']")
	private static WebElement batch_RateRow2;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_2-8']")
	private static WebElement batch_QtyAdjustedRow2;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_2-13']")
	private static WebElement batch_PurchaseDateRow2;

	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_3-1']")
	private static WebElement batch_BatchNoRow3;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_3-2']")
	private static WebElement batch_BaseQtyRow3;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_3-5']")
	private static WebElement batch_ExpiryInDateRow3;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_3-6']")
	private static WebElement batch_RateRow3;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_3-7']")
	private static WebElement batch_QtyAdjustedRow3;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_3-13']")
	private static WebElement batch_PurchaseDateRow3;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_4-1']")
	private static WebElement batch_BatchNoRow4;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_4-2']")
	private static WebElement batch_BaseQtyRow4;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_4-5']")
	private static WebElement batch_ExpiryInDateRow4;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_4-6']")
	private static WebElement batch_RateRow4;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_4-7']")
	private static WebElement batch_QtyAdjustedRow4;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_4-13']")
	private static WebElement batch_PurchaseDateRow4;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_5-1']")
	private static WebElement batch_BatchNoRow5;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_5-2']")
	private static WebElement batch_BaseQtyRow5;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_5-5']")
	private static WebElement batch_ExpiryInDateRow5;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_5-6']")
	private static WebElement batch_RateRow5;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_5-7']")
	private static WebElement batch_QtyAdjustedRow5;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_5-13']")
	private static WebElement batch_PurchaseDateRow5;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_6-1']")
	private static WebElement batch_BatchNoRow6;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_6-2']")
	private static WebElement batch_BaseQtyRow6;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_6-5']")
	private static WebElement batch_ExpiryInDateRow6;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_6-6']")
	private static WebElement batch_RateRow6;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_6-7']")
	private static WebElement batch_QtyAdjustedRow6;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_6-13']")
	private static WebElement batch_PurchaseDateRow6;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_7-1']")
	private static WebElement batch_BatchNoRow7;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_7-2']")
	private static WebElement batch_BaseQtyRow7;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_7-5']")
	private static WebElement batch_ExpiryInDateRow7;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_7-6']")
	private static WebElement batch_RateRow7;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_7-7']")
	private static WebElement batch_QtyAdjustedRow7;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_7-13']")
	private static WebElement batch_PurchaseDateRow7;
	
	@FindBy(xpath="//i[@class='icon-refresh icon-font7']")
	private static WebElement batchRefreshBtn;
	
	@FindBy(xpath="//input[@id='Batch_Search']")
	private static WebElement batchSearchTxt;
	
	@FindBy(xpath="//input[@class='Fcheckbox']")
	private static WebElement batchShowAllAvalibleBatches;
	
	@FindBy(xpath="//label[contains(text(),'Customization')]")
	private static WebElement batchCustomizationIcon;
	
	/*@FindBy(xpath="//label[contains(text(),'Pick On FIFO')]")
	private static WebElement batchPickOnFIFOIcon;*/
	
	@FindBy(xpath="//i[@class='icon-pick icon-font5']")
	private static WebElement batchPickOnFIFOIcon;
	
	
	
	@FindBy(xpath="//label[@id='div_Ok']")
	private static WebElement batchOkIcon;

	@FindBy(xpath="//div[@class='col-xs-12 col-sm-12 col-md-12 col-lg-12']//div[6]//label[1]")
	private static WebElement batchTotalAdjustedQtyFooter;
	
	@FindBy(xpath="//div[@class='col-xs-6 col-sm-6 col-md-1 col-lg-1 text-right']")
	private static WebElement batchTotalQtyFooter;
	
/*	@FindBy(xpath="//label[@id='lblSum']")
	private static WebElement batchTotalAdjustedQtyFooter;
	
	@FindBy(xpath="//div[@class='col-xs-12 col-sm-12 col-md-12 col-lg-12']//div[6]")
	private static WebElement batchTotalQtyFooter;*/
	
	@FindBy(xpath="//input[@id='MRPBatch_AdjBatchQty']")
	private static WebElement batch_EnterQtyAdjsuted;


			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[14]")
			private static WebElement  select2ndRow_13thColumn;	
		 

		 @FindBy(xpath="//*[@id='Id_MRPBatch_Grid']")
		 private static WebElement  batchPopUPEmptyRows;
		 
 // Bin OutWard Elements
	 	

	@FindBy(xpath="//th[@id='id_transaction_bins_grid_control_heading_1']//div[contains(text(),'Bin')]")
	private static WebElement  binHeader_Bin;
	
	@FindBy(xpath="//th[@id='id_transaction_bins_grid_control_heading_3']//div[contains(text(),'Stock')]")
	private static WebElement  binHeader_Stock;
	
	@FindBy(xpath="//div[contains(text(),'Stock(Pcs)')]")
	private static WebElement  binHeader_StockPcs;
	
	@FindBy(xpath="//div[contains(text(),'Capacity')]")
	private static WebElement  binHeader_Capacity;
	
	@FindBy(xpath="//div[contains(text(),'Load')]")
	private static WebElement  binHeader_Load;
	
	@FindBy(xpath="//div[contains(text(),'Free space')]")
	private static WebElement  binHeader_FreeSpace;
	
	@FindBy(xpath="//div[contains(text(),'Free Quantity')]")
	private static WebElement  binHeader_FreeQty;
	
	@FindBy(xpath="//div[contains(text(),'To be Picked')]")
	private static WebElement  binHeader_ToBePicked;
				
	@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-0']")
	private static WebElement  binoutwardRow1Index;
	
	@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-1']")
	private static WebElement  binoutwardRow1Bin;
	
	@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-3']")
	private static WebElement  binoutwardRow1Stock;
	
	@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-4']")
	private static WebElement  binoutwardRow1StockPcs;
	
	@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-5']")
	private static WebElement  binoutwardRow1Capacity;
	
	@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-6']")
	private static WebElement  binoutwardRow1Load;
	
	@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-7']")
	private static WebElement  binoutwardRow1FreeSpace;
	
	@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-8']")
	private static WebElement  binoutwardRow1FreeQty;
	
	@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-12']")
	private static WebElement  binoutwardRow1ToBePicked;
	
	@FindBy(xpath="//input[@id='id_transaction_bins_grid_control_heading_ctrl_12']")
	private static WebElement  binoutwardToInputInToBePicked;
	
	@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-0']")
	private static WebElement  binoutwardRow2Index;
	
	@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-1']")
	private static WebElement  binoutwardRow2Bin;
	
	@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-3']")
	private static WebElement  binoutwardRow2Stock;
	
	@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-4']")
	private static WebElement  binoutwardRow2StockPcs;
	
	@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-5']")
	private static WebElement  binoutwardRow2Capacity;
	
	@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-6']")
	private static WebElement  binoutwardRow2Load;
	
	@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-7']")
	private static WebElement  binoutwardRow2FreeSpace;
	
	@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-8']")
	private static WebElement  binoutwardRow2FreeQty;
	
	@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-12']")
	private static WebElement  binoutwardRow2ToBePicked;
	
	
	@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-0']")
	private static WebElement  binoutwardRow3Index;
	
	@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-1']")
	private static WebElement  binoutwardRow3Bin;
	
	@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-3']")
	private static WebElement  binoutwardRow3Stock;
	
	@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-4']")
	private static WebElement  binoutwardRow3StockPcs;
	
	@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-5']")
	private static WebElement  binoutwardRow3Capacity;
	
	@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-6']")
	private static WebElement  binoutwardRow3Load;
	
	@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-7']")
	private static WebElement  binoutwardRow3FreeSpace;
	
	@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-8']")
	private static WebElement  binoutwardRow3FreeQty;
	
	@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-12']")
	private static WebElement  binoutwardRow3ToBePicked;
	
	
	
	@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[13]")
	private static WebElement  binoutwardRowTotalToBePicked;


	@FindBy(xpath="//*[@id='id_bins_ok']")
	private static WebElement  binOkButtonStatus;

	
		
	// RMA Outward POpup Window
		
		
	@FindBy (xpath="//input[@id='txtSerialNo']")
	private static WebElement rmaoutwardSerialNumberTxtField;

	@FindBy (xpath="//input[@id='txtQuantity']")
	private static WebElement rmaoutwardQuantityTxtField;
	
	@FindBy (xpath="//i[@class='icon icon-add icon-font6']")
	private static WebElement rmaoutwardAddBtn;
		
	@FindBy (xpath="//div[contains(@class,'col-xs-12 col-sm-5 padding-left-Right')]")
	private static WebElement rmaoutwardNumberofItemsLabel;
	
	@FindBy (xpath="//th[@id='RMA_Table_control_heading_1']")
	private static WebElement rmaoutwardTableHeadingRMA;
	
	@FindBy (xpath="//th[@id='RMA_Table_control_heading_2']")
	private static WebElement rmaoutwardTableHeadingDocumentNo;
	
	@FindBy (xpath="//th[@id='RMA_Table_control_heading_3']")
	private static WebElement rmaoutwardTableHeadingDocumentDate;
	
	@FindBy (xpath="//label[contains(text(),'Ok')]")
	private static WebElement rmaoutwardOkBtn;
	
	@FindBy (xpath="//label[contains(text(),'Cancel')]")
	private static WebElement rmaoutwardCancelBtn;
	
	@FindBy (xpath="//i[@id='btnSearch']")
	private static WebElement rmaoutwardExpandBtn;
	
	// Search Rma popUp
			
	@FindBy (xpath="//input[@id='Search_txtSearchBox']")
	private static WebElement searchRMASearchTxtField;
	
	@FindBy (xpath="//i[@id='btn_RMASsearch_Search']")
	private static WebElement searchRMASearchBtn;
	
	@FindBy (xpath="//input[@id='Search_txtQuantity']")
	private static WebElement searchRMAQuantityTxtField;
	
	@FindBy (xpath="//label[@id='Search_lblItems']")
	private static WebElement searchRMANoOfItemsTxt;
	
	// Header Of Grid
	
	@FindBy (xpath="//input[@id='chkSelectALL']")
	private static WebElement searchRMAHeaderChkBox;
	
	@FindBy (xpath="//table[@id='RMASearchTable']/thead/tr/td[2]")
	private static WebElement searchRMATableHeadingSerialNo;
	
	@FindBy (xpath="//table[@id='RMASearchTable']/thead/tr/td[3]")
	private static WebElement searchRMATableHeadingDocNo;
	
	@FindBy (xpath="//table[@id='RMASearchTable']/thead/tr/td[4]")
	private static WebElement searchRMATableHeadingDate;
	
	
	// Grid Body
	
	@FindBy (xpath="//*[@id='RMASearchTable']/tbody/tr[1]/td[1]/input")
	private static WebElement searchRMA1ChkBox;
	
	@FindBy (xpath="//*[@id='RMASearchTable']/tbody/tr[2]/td[1]/input")
	private static WebElement searchRMA2ChkBox;
	
	@FindBy (xpath="//*[@id='RMASearchTable']/tbody/tr[3]/td[1]/input")
	private static WebElement searchRMA3ChkBox;
	
	@FindBy (xpath="//*[@id='RMASearchTable']/tbody/tr[4]/td[1]/input")
	private static WebElement searchRMA4ChkBox;
	
	@FindBy (xpath="//*[@id='RMASearchTable']/tbody/tr[5]/td[1]/input")
	private static WebElement searchRMA5ChkBox;
	
	@FindBy (xpath="//*[@id='RMASearchTable']/tbody/tr[6]/td[1]/input")
	private static WebElement searchRMA6ChkBox;
	
	@FindBy (xpath="//div[@id='id_transaction_entry_container_others']//tbody//tr[1]//td[2]")
	private static WebElement searchRMARow1SerialNo;
	
	@FindBy (xpath="//div[@id='id_transaction_entry_container_others']//tbody//tr[2]//td[2]")
	private static WebElement searchRMARow2SerialNo;
	
	@FindBy (xpath="//div[@id='id_transaction_entry_container_others']//tbody//tr[3]//td[2]")
	private static WebElement searchRMARow3SerialNo;
	
	@FindBy (xpath="//div[@id='id_transaction_entry_container_others']//tbody//tr[14]//td[2]")
	private static WebElement searchRMARow4SerialNo;
	
	@FindBy (xpath="//*[@id='SearchModal_Content']/div[3]/div/div[1]/label")
	private static WebElement searchRMAOkBtn;
	
	@FindBy (xpath="//*[@id='SearchModal_Content']/div[3]/div/div[2]/label")
	private static WebElement searchRMACancelBtn;
	
	@FindBy (xpath="//*[@id='SearchModal_Content']/div[1]/div[2]/span/i")
	private static WebElement searchRMACloseBtn;
	
	
	@FindBy(xpath="//*[@id='RMASearchTable']/tbody/tr[1]")
	private static WebElement rmaSearchTableBodyIfBlankRows;

	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[1]/table[1]/tbody[1]/tr[1]/td[11]")
	private static WebElement salesInvoicesuspendStatusRow1;

	
	//Sales Order Voucher Starts
	//Reservations
	
	@FindBy(xpath="//a[@class='transaction_viewname_anchor font-5']")
	private static WebElement  homepagePendingSalesQuotations;
	
	@FindBy(xpath="//div[contains(text(),'Reserve')]")
	private static WebElement voucherBodyReserveColumnName;
	
	@FindBy(xpath="//div[contains(text(),'L-Sales Quotations')]")
	private static WebElement voucherBodyLinkSalesQuotationsColumnName;
	
	@FindBy(xpath="//div[contains(text(),'Warehouse')]")
	private static WebElement  salesOrderWarehouseLabel;
	
	@FindBy(xpath="//div[contains(text(),'Quantity')]")
	private static WebElement  salesOrderQtyLabel;
	
	@FindBy(xpath="//label[contains(text(),'Quantity')]")
	private static WebElement  voucherFooterQtyLabel;
	
	@FindBy(xpath="//label[contains(text(),'RD :')]")
	private static WebElement  voucherFooterRDLabel;
	
	@FindBy(xpath="//label[contains(text(),'AQ :')]")
	private static WebElement  voucherFooterAQLabel;
	
	@FindBy(xpath="//label[contains(text(),'FQ :')]")
	private static WebElement  voucherFooterFQLabel;
	
	@FindBy(xpath="//label[contains(text(),'Gross :')]")
	private static WebElement  voucherFooterGrossLabel;
	
	@FindBy(xpath="//*[@id='id_transactionentry_footer_panel_summary_value_net_group']/label[1]")
	private static WebElement  voucherFooterNetLabel;
	
	@FindBy(xpath="//span[@class='icon-left-and-right-panel-icon icon-font6 no_padding_left_right']")
	private static WebElement  voucherMinimizeInfoSideBar;
	

	


   //Stock Reservation Pop Up Window Elements

	@FindBy(xpath="//label[@class='modal-title theme_background-color theme_color font-4']")
	private static WebElement stockReservationLabel;
	
	@FindBy(xpath="//button[@class='close icon-close icon-font6 theme_icon-color']")
	private static WebElement stockReservationHeaderCloseBtn; 
	
	// Left Panel Header
	
	
	@FindBy(xpath="//th[@id='Id_Reservation_FGrid_control_heading_1']")
	private static WebElement res_LeftPanelWareHouse; 
	
	@FindBy(xpath="//th[@id='Id_Reservation_FGrid_control_heading_2']")
	private static WebElement res_LeftPanelItemCode; 
	
	@FindBy(xpath="//th[@id='Id_Reservation_FGrid_control_heading_3']")
	private static WebElement res_LeftPanelItemName; 
	
	@FindBy(xpath="//th[@id='Id_Reservation_FGrid_control_heading_4']")
	private static WebElement res_LeftPanelItemQty; 
	
	@FindBy(xpath="//th[@id='Id_Reservation_FGrid_control_heading_5']")
	private static WebElement res_LeftPanelDueDate; 
	
	@FindBy(xpath="//th[@id='Id_Reservation_FGrid_control_heading_6']")
	private static WebElement res_LeftPanelBaseUnit; 
	
	// Left Panel Grid
	
	//Row1
	@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_1-1']")
	private static WebElement res_LeftPanelWareHouseRow1; 
	
	@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_1-2']")
	private static WebElement res_LeftPanelItemCodeRow1; 
	
	@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_1-3']")
	private static WebElement res_LeftPanelItemNameRow1; 
	
	@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_1-4']")
	private static WebElement res_LeftPanelItemQtyRow1; 
	
	@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_1-5']")
	private static WebElement res_LeftPanelDueDateRow1; 
	
	@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_1-6']")
	private static WebElement res_LeftPanelBaseUnitRow1; 
	
	//Row2
	@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_2-1']")
	private static WebElement res_LeftPanelWareHouseRow2; 
	
	@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_2-2']")
	private static WebElement res_LeftPanelItemCodeRow2; 
	
	@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_2-3']")
	private static WebElement res_LeftPanelItemNameRow2; 
	
	@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_2-4']")
	private static WebElement res_LeftPanelItemQtyRow2; 
	
	@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_2-5']")
	private static WebElement res_LeftPanelDueDateRow2; 
	
	@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_2-6']")
	private static WebElement res_LeftPanelBaseUnitRow2; 
	
	//Row2
	@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_3-1']")
	private static WebElement res_LeftPanelWareHouseRow3; 
	
	@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_3-2']")
	private static WebElement res_LeftPanelItemCodeRow3; 
	
	@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_3-3']")
	private static WebElement res_LeftPanelItemNameRow3; 
	
	@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_3-4']")
	private static WebElement res_LeftPanelItemQtyRow3; 
	
	@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_3-5']")
	private static WebElement res_LeftPanelDueDateRow3; 
	
	@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_3-6']")
	private static WebElement res_LeftPanelBaseUnitRow3; 
		
		
	// Body Header for Bin Reservation Screen for Zero Qty
	
	@FindBy(xpath="//th[@id='Id_StockReservation_FGrid_control_heading_2']//div[contains(text(),'Warehouse')]")
	private static WebElement binResNull_BodyWareHouse; 
	
	@FindBy(xpath="//th[@id='Id_StockReservation_FGrid_control_heading_3']//div[contains(text(),'Voucher No')]")
	private static WebElement binResNull_BodyVoucherNo; 
	
	@FindBy(xpath="//th[@id='Id_StockReservation_FGrid_control_heading_4']//div[contains(text(),'Qty to Reserve')]")
	private static WebElement binResNull_BodyQtyToReserve;
	
	@FindBy(xpath="//th[@id='Id_StockReservation_FGrid_control_heading_5']//div[contains(text(),'Available Qty')]")
	private static WebElement binResNull_BodyAvailableQty;
	
	@FindBy(xpath="//th[@id='Id_StockReservation_FGrid_control_heading_6']//div[contains(text(),'Cur Ord Res Qty')]")
	private static WebElement binResNull_BodyCurOrderResQty;
	
	@FindBy(xpath="//th[@id='Id_StockReservation_FGrid_control_heading_7']//div[contains(text(),'Quantity')]")
	private static WebElement binResNull_BodyQty;
	
	@FindBy(xpath="//div[contains(text(),'Pending Order Qty')]")
	private static WebElement binResNull_BodyPendingOrderQty;
	
	@FindBy(xpath="//th[@id='Id_StockReservation_FGrid_control_heading_9']//div[contains(text(),'Released Qty')]")
	private static WebElement binResNull_BodyReleasedQty;
	
	// Body Grid
	// Row1 for Bin Reservation
	
	@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_1-2']")
	private static WebElement binResNull_WarehouseRow1; 
	
	@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_1-3']")
	private static WebElement binResNull_VoucherNoRow1; 
	
	@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_1-4']")
	private static WebElement binResNull_QtyToReserveRow1; 
	
	@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_1-5']")
	private static WebElement binResNull_AvailableQtyRow1; 
	
	@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_1-6']")
	private static WebElement binResNull_CurOrdResQtyRow1; 
	
	@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_1-7']")
	private static WebElement binResNull_QtyRow1; 
	
	@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_1-8']")
	private static WebElement binResNull_PendingOrderQtyRow1; 
	
	@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_1-9']")
	private static WebElement binResNull_ReleasedQtyRow1; 
	
	
	
	
	// Footer
	
	@FindBy(xpath="//li[@id='btnPickQuantity']")
	private static WebElement res_PickBtn;
	
	@FindBy(xpath="//div[@id='id_transaction_entry_container_others']//li[2]")
	private static WebElement res_DiscardBtn;
	
	@FindBy(xpath="//div[@id='id_transaction_entry_container_others']//li[3]")
	private static WebElement res_OkBtn;
	
	@FindBy(xpath="//div[@id='id_transaction_entry_container_others']//li[4]")
	private static WebElement res_CloseBtn;
	
	
	
	
	
	

	// Body Header for Bin Reservation Screen

	@FindBy(xpath="//th[@id='Id_BinReservation_FGrid_control_heading_2']//div[contains(text(),'Warehouse')]")
	private static WebElement binRes_BodyWareHouse; 
	
	@FindBy(xpath="//th[@id='Id_BinReservation_FGrid_control_heading_3']//div[contains(text(),'Qty to Reserve')]")
	private static WebElement binRes_BodyQtyToReserve;

	@FindBy(xpath="//th[@id='Id_BinReservation_FGrid_control_heading_4']//div[contains(text(),'Bin')]")
	private static WebElement binRes_BodyBin; 
	
	@FindBy(xpath="//th[@id='Id_BinReservation_FGrid_control_heading_5']//div[contains(text(),'Available Qty')]")
	private static WebElement binRes_BodyAvailableQty;
	
	@FindBy(xpath="//th[@id='Id_BinReservation_FGrid_control_heading_6']//div[contains(text(),'Released Qty')]")
	private static WebElement binRes_BodyReleasedQty;
	
	@FindBy(xpath="//div[contains(text(),'Total Reserved Qty')]")
	private static WebElement binRes_BodyTotalReservedQty;
	
	@FindBy(xpath="//div[contains(text(),'Bin Qty')]")
	private static WebElement binRes_BodyBinQty;
	
	@FindBy(xpath="//th[@id='Id_BinReservation_FGrid_control_heading_9']//div[contains(text(),'Skid Id')]")
	private static WebElement binRes_BodySkidId;
	
	@FindBy(xpath="//div[contains(text(),'Alloc Status')]")
	private static WebElement binRes_BodyAllocStatus;
	
	@FindBy(xpath="//div[contains(text(),'Inv Status')]")
	private static WebElement binRes_BodyInvStatus;
	
	@FindBy(xpath="//div[contains(text(),'LotNo')]")
	private static WebElement binRes_BodyLotNo;
	
	// Body Grid
	// Row1 for Bin Reservation
	
	@FindBy(xpath="//*[@id='Id_BinReservation_FGrid_col_1-2']")
	private static WebElement binRes_WarehouseRow1; 
	
	@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_1-3']")
	private static WebElement binRes_QtyToReserveRow1; 
	
	@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_1-4']")
	private static WebElement binRes_BinNoRow1;
	
	@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_1-5']")
	private static WebElement binRes_AvailableQtyRow1; 
	
	@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_1-6']")
	private static WebElement binRes_ReleaseQtyRow1;
	
	@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_1-7']")
	private static WebElement binRes_TotalreservedQtyRow1; 
	
	@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_1-8']")
	private static WebElement binRes_BinQtyRow1; 
	
	@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_1-9']")
	private static WebElement binRes_SkidIdRow1;
	
	@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_1-10']")
	private static WebElement binRes_AllocStatusRow1; 
	
	@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_1-11']")
	private static WebElement binRes_InvStatusRow1;
	
	@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_1-12']")
	private static WebElement binRes_LotNoRow1;
	
	// Row 2
	
	@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_2-2']")
	private static WebElement binRes_WarehouseRow2; 
	
	@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_2-3']")
	private static WebElement binRes_QtyToReserveRow2; 
	
	@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_2-4']")
	private static WebElement binRes_BinNoRow2;
	
	@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_2-5']")
	private static WebElement binRes_AvailableQtyRow2; 
	
	@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_2-6']")
	private static WebElement binRes_ReleaseQtyRow2;
	
	@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_2-7']")
	private static WebElement binRes_TotalreservedQtyRow2; 
	
	@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_2-8']")
	private static WebElement binRes_BinQtyRow2; 
	
	@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_2-9']")
	private static WebElement binRes_SkidIdRow2;
	
	@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_2-10']")
	private static WebElement binRes_AllocStatusRow2; 
	
	@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_2-11']")
	private static WebElement binRes_InvStatusRow2;
	
	@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_2-12']")
	private static WebElement binRes_LotNoRow2;
	
	
	
	// Batch Reservation Body Header
	
	@FindBy(xpath="//th[@id='Id_BatchReservation_FGrid_control_heading_2']")
	private static WebElement batchRes_BodyQtyToReserve; 
	
	@FindBy(xpath="//th[@id='Id_BatchReservation_FGrid_control_heading_3']")
	private static WebElement batchRes_BodyBatchNo;
	
	@FindBy(xpath="//th[@id='Id_BatchReservation_FGrid_control_heading_4']")
	private static WebElement batchRes_BodyWareHouse; 
	
	@FindBy(xpath="//th[@id='Id_BatchReservation_FGrid_control_heading_5']")
	private static WebElement batchRes_BodyAvailableQty;
	
	@FindBy(xpath="//th[@id='Id_BatchReservation_FGrid_control_heading_6']")
	private static WebElement batchRes_BodyRelesaseQty;
	
	@FindBy(xpath="//th[@id='Id_BatchReservation_FGrid_control_heading_7']")
	private static WebElement batchRes_BodyCurOrdResQty;
	
	@FindBy(xpath="//th[@id='Id_BatchReservation_FGrid_control_heading_8']")
	private static WebElement batchRes_BodyMfgDate;
	
	@FindBy(xpath="//th[@id='Id_BatchReservation_FGrid_control_heading_9']")
	private static WebElement batchRes_BodyExpDate;
	
	@FindBy(xpath="//th[@id='Id_BatchReservation_FGrid_control_heading_10']")
	private static WebElement batchRes_BodyBatchQty;
		
	// Body Grid
	// Row1
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_1-1']")
	private static WebElement batchRes_Row1Index; 
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_1-2']")
	private static WebElement batchRes_QtyToReserveRow1; 
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_1-3']")
	private static WebElement batchRes_BatchNoRow1;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_1-4']")
	private static WebElement batchRes_WareHouseRow1; 
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_1-5']")
	private static WebElement batchRes_AvailableQtyRow1;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_1-6']")
	private static WebElement batchRes_RelesaseQtyRow1;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_1-7']")
	private static WebElement batchRes_CurOrdResQtyRow1;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_1-8']")
	private static WebElement batchRes_MfgDateRow1;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_1-9']")
	private static WebElement batchRes_ExpDateRow1;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_1-10']")
	private static WebElement batchRes_BatchQtyRow1;
	
	// Row 2
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_2-1']")
	private static WebElement batchRes_Row2Index; 
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_2-2']")
	private static WebElement batchRes_QtyToReserveRow2; 

	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_2-3']")
	private static WebElement batchRes_BatchNoRow2;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_2-4']")
	private static WebElement batchRes_WareHouseRow2; 
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_2-5']")
	private static WebElement batchRes_AvailableQtyRow2;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_2-6']")
	private static WebElement batchRes_RelesaseQtyRow2;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_2-7']")
	private static WebElement batchRes_CurOrdResQtyRow2;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_2-8']")
	private static WebElement batchRes_MfgDateRow2;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_2-9']")
	private static WebElement batchRes_ExpDateRow2;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_2-10']")
	private static WebElement batchRes_BatchQtyRow2;
	
	// Row 3
	
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_3-1']")
	private static WebElement batchRes_Row3Index; 
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_3-2']")
	private static WebElement batchRes_QtyToReserveRow3; 

	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_3-3']")
	private static WebElement batchRes_BatchNoRow3;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_3-4']")
	private static WebElement batchRes_WareHouseRow3; 
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_3-5']")
	private static WebElement batchRes_AvailableQtyRow3;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_3-6']")
	private static WebElement batchRes_RelesaseQtyRow3;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_3-7']")
	private static WebElement batchRes_CurOrdResQtyRow3;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_3-8']")
	private static WebElement batchRes_MfgDateRow3;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_3-9']")
	private static WebElement batchRes_ExpDateRow3;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_3-10']")
	private static WebElement batchRes_BatchQtyRow3;

	
	// Row 4
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_4-1']")
	private static WebElement batchRes_Row4Index; 
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_4-2']")
	private static WebElement batchRes_QtyToReserveRow4; 

	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_4-3']")
	private static WebElement batchRes_BatchNoRow4;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_4-4']")
	private static WebElement batchRes_WareHouseRow4; 
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_4-5']")
	private static WebElement batchRes_AvailableQtyRow4;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_4-6']")
	private static WebElement batchRes_RelesaseQtyRow4;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_4-7']")
	private static WebElement batchRes_CurOrdResQtyRow4;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_4-8']")
	private static WebElement batchRes_MfgDateRow4;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_4-9']")
	private static WebElement batchRes_ExpDateRow4;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_4-10']")
	private static WebElement batchRes_BatchQtyRow4;
	
	// Row 5
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_5-1']")
	private static WebElement batchRes_Row5Index; 
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_5-2']")
	private static WebElement batchRes_QtyToReserveRow5; 

	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_5-3']")
	private static WebElement batchRes_BatchNoRow5;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_5-4']")
	private static WebElement batchRes_WareHouseRow5; 
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_5-5']")
	private static WebElement batchRes_AvailableQtyRow5;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_5-6']")
	private static WebElement batchRes_RelesaseQtyRow5;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_5-7']")
	private static WebElement batchRes_CurOrdResQtyRow5;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_5-8']")
	private static WebElement batchRes_MfgDateRow5;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_5-9']")
	private static WebElement batchRes_ExpDateRow5;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_5-10']")
	private static WebElement batchRes_BatchQtyRow5;
	
	// RMA Reservation Body Header
	
	@FindBy(xpath="//th[@id='Id_RMAReservation_FGrid_control_heading_2']//div[contains(text(),'Warehouse')]")
	private static WebElement rmaRes_BodyWarehouse; 
	
	@FindBy(xpath="//div[contains(text(),'RMA no')]")
	private static WebElement rmaRes_BodyRMANo;
	
	@FindBy(xpath="//div[contains(text(),'Selected')]")
	private static WebElement rmaRes_BodySelected; 

	// RMA Body Grid Row1
	
	@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_1-1']")
	private static WebElement rmaRes_Row1Index; 
	
	@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_1-2']")
	private static WebElement rmaRes_WarehouseRow1; 
	
	@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_1-3']")
	private static WebElement rmaRes_RmaNoRow1;
	
	@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_1-4']//input")
	private static WebElement rmaRes_SelectedRow1; 
	
	// Row 2
	
	@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_2-1']")
	private static WebElement rmaRes_Row2Index; 
	
	@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_2-2']")
	private static WebElement rmaRes_WarehouseRow2; 
	
	@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_2-3']")
	private static WebElement rmaRes_RmaNoRow2;
	
	@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_2-4']//input")
	private static WebElement rmaRes_SelectedRow2; 
	
	
	// RMA Body Grid Row3
	
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_3-1']")
		private static WebElement rmaRes_Row3Index; 
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_3-2']")
		private static WebElement rmaRes_WarehouseRow3; 
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_3-3']")
		private static WebElement rmaRes_RmaNoRow3;
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_3-4']//input")
		private static WebElement rmaRes_SelectedRow3; 
		
		// Row 4
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_4-1']")
		private static WebElement rmaRes_Row4Index; 
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_4-2']")
		private static WebElement rmaRes_WarehouseRow4; 
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_4-3']")
		private static WebElement rmaRes_RmaNoRow4;
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_4-4']//input")
		private static WebElement rmaRes_SelectedRow4; 
		
		
		// RMA Body Grid Row5
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_5-1']")
		private static WebElement rmaRes_Row5Index; 
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_5-2']")
		private static WebElement rmaRes_WarehouseRow5; 
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_5-3']")
		private static WebElement rmaRes_RmaNoRow5;
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_5-4']//input")
		private static WebElement rmaRes_SelectedRow5; 
		
		// Row 6
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_6-1']")
		private static WebElement rmaRes_Row6Index; 
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_6-2']")
		private static WebElement rmaRes_WarehouseRow6; 
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_6-3']")
		private static WebElement rmaRes_RmaNoRow6;
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_6-4']//input")
		private static WebElement rmaRes_SelectedRow6; 
		
		// Row 7
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_7-1']")
		private static WebElement rmaRes_Row7Index; 
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_7-2']")
		private static WebElement rmaRes_WarehouseRow7; 
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_7-3']")
		private static WebElement rmaRes_RmaNoRow7;
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_7-4']//input")
		private static WebElement rmaRes_SelectedRow7; 
		
		// Row 8
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_8-1']")
		private static WebElement rmaRes_Row8Index; 
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_8-2']")
		private static WebElement rmaRes_WarehouseRow8; 
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_8-3']")
		private static WebElement rmaRes_RmaNoRow8;
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_8-4']//input")
		private static WebElement rmaRes_SelectedRow8; 

		// Row 9
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_9-1']")
		private static WebElement rmaRes_Row9Index; 
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_9-2']")
		private static WebElement rmaRes_WarehouseRow9; 
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_9-3']")
		private static WebElement rmaRes_RmaNoRow9;
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_9-4']//input")
		private static WebElement rmaRes_SelectedRow9; 
		
		// Row 10
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_10-1']")
		private static WebElement rmaRes_Row10Index; 
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_10-2']")
		private static WebElement rmaRes_WarehouseRow10; 
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_10-3']")
		private static WebElement rmaRes_RmaNoRow10;
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_10-4']//input")
		private static WebElement rmaRes_SelectedRow10; 
	
	// Stock item Reservation Body Header
	

	@FindBy(xpath="//th[@id='Id_StockReservation_FGrid_control_heading_2']//div[contains(text(),'Warehouse')]")
	private static WebElement stockRes_BodyWareHouse; 
	
	@FindBy(xpath="//th[@id='Id_StockReservation_FGrid_control_heading_3']//div[contains(text(),'Voucher No')]")
	private static WebElement stockRes_BodyVoucherNo;

	@FindBy(xpath="//th[@id='Id_StockReservation_FGrid_control_heading_4']//div[contains(text(),'Qty to Reserve')]")
	private static WebElement stockRes_BodyQtyToReserve; 
	
	@FindBy(xpath="//th[@id='Id_StockReservation_FGrid_control_heading_5']//div[contains(text(),'Available Qty')]")
	private static WebElement stockRes_BodyAvailableQty;
	
	@FindBy(xpath="//th[@id='Id_StockReservation_FGrid_control_heading_6']//div[contains(text(),'Cur Ord Res Qty')]")
	private static WebElement stockRes_BodyCurOrdResQty;
	
	@FindBy(xpath="//th[@id='Id_StockReservation_FGrid_control_heading_7']//div[contains(text(),'Quantity')]")
	private static WebElement stockRes_BodyQty;
	
	@FindBy(xpath="//div[contains(text(),'Pending Order Qty')]")
	private static WebElement stockRes_BodyPendingOrderQty;
	
	@FindBy(xpath="//th[@id='Id_StockReservation_FGrid_control_heading_9']//div[contains(text(),'Released Qty')]")
	private static WebElement stockRes_BodyReleasedQty;
	
	// Stock Item Reservation Body  Grid
	// Row1
	@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_1-1']")
	private static WebElement stockRes_Row1Index; 
	
	@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_1-2']")
	private static WebElement stockRes_WareHouseRow1; 

	@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_1-3']")
	private static WebElement stockRes_VoucherNoRow1;
	
	@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_1-4']")
	private static WebElement stockRes_QtyToReserveRow1; 
	
	@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_1-5']")
	private static WebElement stockRes_AvailableQtyRow1;
	
	@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_1-6']")
	private static WebElement stockRes_CurOrdResQtyRow1;
	
	@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_1-7']")
	private static WebElement stockRes_QtyRow1;
	
	@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_1-8']")
	private static WebElement stockRes_PendingOrderQtyRow1;
	
	@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_1-9']")
	private static WebElement stockRes_ReleasedQtyRow1;
	
	// Row 2
	
	@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_2-1']")
	private static WebElement stockRes_Row2Index; 
	
	@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_2-2']")
	private static WebElement stockRes_WareHouseRow2; 

	@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_2-3']")
	private static WebElement stockRes_VoucherNoRow2;
	
	@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_2-4']")
	private static WebElement stockRes_QtyToReserveRow2; 
	
	@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_2-5']")
	private static WebElement stockRes_AvailableQtyRow2;
	
	@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_2-6']")
	private static WebElement stockRes_CurOrdResQtyRow2;
	
	@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_2-7']")
	private static WebElement stockRes_QtyRow2;
	
	@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_2-8']")
	private static WebElement stockRes_PendingOrderQtyRow2;
	
	@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_2-9']")
	private static WebElement stockRes_ReleasedQtyRow2;
	
	@FindBy(xpath="//input[@id='txtQtyToReserve']")
	private static WebElement enter_QtyToReserve;

@FindBy(xpath="//input[@id='id_body_22']")
	private static WebElement enter_Reserve;

	@FindBy(xpath="//div[@id='id_transactionentry_summary_static']//div[1]//div[2]")
	private static WebElement  so_footerQty;
	
	@FindBy(xpath="//div[@id='id_transactionentry_summary']//div[2]//div[2]")
	private static WebElement  so_footerRDField;
	
	@FindBy(xpath="//div[@id='id_transactionentry_summary']//div[3]//div[2]")
	private static WebElement  so_footerAQ;
	
	@FindBy(xpath="//div[@id='id_transactionentry_summary']//div[4]//div[2]")
	private static WebElement  so_footerFQ;
	
	@FindBy(xpath="//div[@id='id_transactionentry_summary']//div[5]//div[2]")
	private static WebElement  so_footerGross;
	
	@FindBy(xpath="//*[@id='id_transactionentry_footer_panel_summary_value_net']/span[2]")
	private static WebElement  so_footerNet;
	
	@FindBy(xpath="//span[@class='col-xs-6 icon-font6 no_padding_left_right theme_color-inverse icon-collepse']")
	private static WebElement  new_footerMinimizeBtn;

//Checking Purchase Order Voucher to use the Option Convert Link, First Use First Row as Close Link
	
	@FindBy(xpath="//select[@id='id_list_popup_list']")
	private static WebElement  convertPopupList;
	
	@FindBy(xpath="//option[contains(text(),'Purchases Vouchers')]")
	private static WebElement  convertPopupListPurchaseVoucher;
	
	@FindBy(xpath="//option[contains(text(),'Purchase Vouchers N')]")
	private static WebElement  convertPopupListPurchaseVoucherN;
	
	@FindBy(xpath="//div[@class='col-xs-4']//input[1]")
	private static WebElement  convertPopupListOkButton;
	
	@FindBy(xpath="//div[@id='id_transactionentry_container_body_others']//input[2]")
	private static WebElement  convertPopupListCancelButton;
	
	@FindBy(xpath="//span[@class='icon-transaction-close-link icon-font7']")
	private static WebElement  closeLinksOption;
	
	@FindBy(xpath="//label[contains(text(),'Open Link')]")
	private static WebElement  openLinksOption;
	
	@FindBy(xpath="//label[contains(text(),'Partial')]")
	private static WebElement  partialLinksOption;
	
	
	@FindBy(xpath="//label[contains(text(),'Convert')]")
	private static WebElement convertLinkOption;
	
	@FindBy(xpath="//input[@id='id_header_67108882']")
	private static WebElement n;
	
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_workflow_body']/tr")
	private static List<WebElement>  LinkRowCountCL;	



    @FindBy(xpath="//span[@id='btnClear']//i[@class='icon-save icon-font6']")
	private static WebElement saveInDesignWorkFlow; 

    @FindBy(xpath="//div[@class='col-lg-12']//button[@class='Fbutton'][contains(text(),'Ok')]")
	private static WebElement OkBtn; 

    @FindBy(xpath="//div[@id='LeftSideChkbox']//ul[2]//li[1]//input[1]")
	private static WebElement customerAccountChkbox; 
	
	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[4]//li[1]//input[1]")
	private static WebElement salesOrderandInvoicewareHouseChkbox; 
	
	@FindBy(xpath="//*[@id='line5']")
	private static WebElement link5TO6; 
	
	@FindBy(xpath="//*[@id='line1']")
	private static WebElement link1TO2; 

	@FindBy(xpath="//input[@id='optWorkflow']")
	private static WebElement workflowNameTxt; 

    @FindBy(xpath="//span[contains(@class,'icon-settings icon-font1')]")
	private static WebElement settingsMenu; 
	
	@FindBy(xpath="//a[@id='74']//span[contains(text(),'Design Workflow')]")
	private static WebElement designWorkflowbtn; 

	@FindBy(xpath="//i[@class='icon-close icon-font6']")
	private static WebElement closeBtn;
	

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr")
	private static List<WebElement>  LinkRowCount;

	@FindBy(xpath="//div[@id='id_transactionentry_summary']//div[7]//div[2]")
	private static WebElement  si_footerGross;
	
	@FindBy(xpath="//div[@id='id_transactionentry_summary']//div[5]//div[2]")
	private static WebElement  si_AvgRate;
	
	@FindBy(xpath="//div[@id='id_transactionentry_summary']//div[6]//div[2]")
	private static WebElement  si_AvgRateO;

	@FindBy(xpath="//input[@id='id_body_35_8']")
	private static WebElement  enter_LSalesOrders;
	
	@FindBy(xpath="//input[@id='id_body_85']")
	private static WebElement  enter_Bin;
	
	@FindBy(xpath="//input[@id='id_body_38']")
	private static WebElement  enter_RMA;
	
	@FindBy(xpath="//div[@id='dvHomeTransClose']//span[@class='icon-close icon-font6']")  
	private static WebElement  voucherhomeCloseBtn;
	
	@FindBy(xpath="//*[@id='userprofile']/li/span[2]")
	private static WebElement logoutOption;
	
	@FindBy(xpath="//*[@id='txtUsername']")
	private static WebElement username;

	@FindBy(id="txtPassword")
	private static WebElement password;
	
    @FindBy(id="ddlCompany")
    private static WebElement companyDropDownList;

	@FindBy(id="btnSignin")
	private static WebElement signIn;
	

	@FindBy(xpath="//div[@id='id_transactionentry_summary']//div[2]//div[2]")
	private static WebElement PVNFooterAvgRateO;
	

	@FindBy(xpath="//div[@id='id_transactionentry_infopanel_data_container']//div[1]//div[2]")
	private static WebElement infoPanelStatus;
	
	@FindBy(xpath="//div[@id='id_transactionentry_infopanel_data_container']//div[2]//div[2]")
	private static WebElement infoPanelCreatedBY;
	
	/*@FindBy(xpath="//div[@id='DBdashlate1']//div[2]//div[2]")
	private static WebElement infoPanelCreatedBY;*/
	
	@FindBy(xpath="//div[@id='id_transactionentry_infopanel_data_container']//div[4]//div[2]")
	private static WebElement infoPanelEditedBy;
	
	@FindBy(xpath="//div[@id='id_transactionentry_infopanel_data_container']//div[6]//div[2]")
	private static WebElement infoPanelNextToAuth;

	@FindBy(xpath="//div[@id='id_transactionentry_infopanel_data_container']//div[7]//div[2]")
	private static WebElement infoPanelBillStatus;
	
	

	//Consume the links through CTRL + L in linked voucher
	@FindBy(xpath="//span[@id='id_transaction_entry_workflow_togglebutton']")
	private static WebElement workFlowExpandBtn;

	@FindBy(xpath="//select[@id='id_transactionentry_workflow_dropdown']")
	private static WebElement  workFlowDropdown;

	@FindBy(xpath="//select[@id='id_transactionentry_workflow_searchon']")
	private static WebElement  searchOnDropdownCL;

	@FindBy(xpath="//select[@id='id_transactionentry_workflow_searchtype']")
	private static WebElement  containingDropdownCL;
			
	@FindBy(xpath="//input[@id='id_transactionentry_workflow_search_input']")
	private static WebElement  workFlowSearchTxtCL;

	@FindBy(xpath="//div[@id='id_transaction_entry_workflow_control_area2']//td[4]")
	private static WebElement  workFlowCustomizeBtnCL;

	@FindBy(xpath="//span[@class='icon-ok icon-font7']")
	private static WebElement  workFlowOkBtnCL;

	@FindBy(xpath="//span[@id='id_transaction_entry_workflow_togglebutton']")
	private static WebElement  workFlowMinimizeBtnCL;

	@FindBy(xpath="//input[@id='id_transaction_entry_detail_workflow_control_heading_ctrl_1']")
	private static WebElement  workFlowHeaderChkBoxCL;

	@FindBy(xpath="//th[@id='id_transaction_entry_detail_workflow_control_heading_6']//div[contains(text(),'Voucher No')]")
	private static WebElement  workFlowHeaderVoucherNoCL;

	@FindBy(xpath="//th[@id='id_transaction_entry_detail_workflow_control_heading_7']//div[contains(text(),'Date')]")
	private static WebElement  workFlowHeaderDateCL;

	@FindBy(xpath="//div[contains(text(),'Name')]")
	private static WebElement  workFlowHeaderNameCL;

	@FindBy(xpath="//th[@id='id_transaction_entry_detail_workflow_control_heading_9']//div[contains(text(),'Quantity')]")
	private static WebElement  workFlowHeaderQtyCL;

	@FindBy(xpath="//div[contains(text(),'Suspended')]")
	private static WebElement  workFlowHeaderSuspendCL;

	//1 Row CRTL + L

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_1-1']//input")
	private static WebElement workFlowRow1ChkBoxCL;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_1-6']")
	private static WebElement  workFlowRow1Column1CL;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_1-7']")
	private static WebElement  workFlowRow1Column2CL;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_1-8']")
	private static WebElement  workFlowRow1Column3CL;
			
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_1-9']")
	private static WebElement  workFlowRow1Column4CL;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_1-10']")
	private static WebElement  workFlowRow1Column5CL;


	//2 Row CRTL + L

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_2-1']//input")
	private static WebElement workFlowRow2ChkBoxCL;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_2-6']")
	private static WebElement  workFlowRow2Column1CL;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_2-7']")
	private static WebElement  workFlowRow2Column2CL;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_2-8']")
	private static WebElement  workFlowRow2Column3CL;
			
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_2-9']")
	private static WebElement  workFlowRow2Column4CL;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_2-10']")
	private static WebElement  workFlowRow2Column5CL;


	//3 Row CRTL + L

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_3-1']//input")
	private static WebElement workFlowRow3ChkBoxCL;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_3-6']")
	private static WebElement  workFlowRow3Column1CL;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_3-7']")
	private static WebElement  workFlowRow3Column2CL;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_3-8']")
	private static WebElement  workFlowRow3Column3CL;
			
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_3-9']")
	private static WebElement  workFlowRow3Column4CL;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_3-10']")
	private static WebElement  workFlowRow3Column5CL;


	//4 Row CRTL + L

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_4-1']//input")
	private static WebElement workFlowRow4ChkBoxCL;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_4-6']")
	private static WebElement  workFlowRow4Column1CL;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_4-7']")
	private static WebElement  workFlowRow4Column2CL;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_4-8']")
	private static WebElement  workFlowRow4Column3CL;
			
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_4-9']")
	private static WebElement  workFlowRow4Column4CL;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_4-10']")
	private static WebElement  workFlowRow4Column5CL;

	@FindBy(xpath="//div[@id='id_transactionentry_header']//span[@class='col-xs-6 icon-collepse icon-font6 no_padding_left_right theme_color-inverse']")
	private static WebElement  new_HeaderMinimizeBtn;

	                
	@FindBy(xpath="//div[@class='col-xs-12']//span[@class='col-xs-6 icon-font6 no_padding_left_right theme_color-inverse icon-expand']")
	private static WebElement  new_HeaderExpandBtn;

	@FindBy(xpath="//div[@id='id_transaction_entry_container']//span[contains(text(),'Purchase Vouchers N')]")
	private static WebElement  purchaseVoucherNLink;


	// 5 Row CRTL + L
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_5-1']//input")
	private static WebElement workFlowRow5ChkBoxCL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_5-6']")
	private static WebElement  workFlowRow5Column1CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_5-7']")
	private static WebElement  workFlowRow5Column2CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_5-8']")
	private static WebElement  workFlowRow5Column3CL;
				
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_5-9']")
	private static WebElement  workFlowRow5Column4CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_5-10']")
	private static WebElement  workFlowRow5Column5CL;	
		

	//6 Row CRTL + L
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_6-1']//input")
	private static WebElement workFlowRow6ChkBoxCL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_6-6']")
	private static WebElement  workFlowRow6Column1CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_6-7']")
	private static WebElement  workFlowRow6Column2CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_6-8']")
	private static WebElement  workFlowRow6Column3CL;
				
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_6-9']")
	private static WebElement  workFlowRow6Column4CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_6-10']")
	private static WebElement  workFlowRow6Column5CL;	



	//7 Row CRTL + L
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_7-1']//input")
	private static WebElement workFlowRow7ChkBoxCL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_7-6']")
	private static WebElement  workFlowRow7Column1CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_7-7']")
	private static WebElement  workFlowRow7Column2CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_7-8']")
	private static WebElement  workFlowRow7Column3CL;
				
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_7-9']")
	private static WebElement  workFlowRow7Column4CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_7-10']")
	private static WebElement  workFlowRow7Column5CL;	


	//8 Row CRTL + L
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_8-1']//input")
	private static WebElement workFlowRow8ChkBoxCL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_8-6']")
	private static WebElement  workFlowRow8Column1CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_8-7']")
	private static WebElement  workFlowRow8Column2CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_8-8']")
	private static WebElement  workFlowRow8Column3CL;
				
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_8-9']")
	private static WebElement  workFlowRow8Column4CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_8-10']")
	private static WebElement  workFlowRow8Column5CL;	


	//9 Row CRTL + L
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_9-1']//input")
	private static WebElement workFlowRow9ChkBoxCL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_9-6']")
	private static WebElement  workFlowRow9Column1CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_9-7']")
	private static WebElement  workFlowRow9Column2CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_9-8']")
	private static WebElement  workFlowRow9Column3CL;
				
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_9-9']")
	private static WebElement  workFlowRow9Column4CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_9-10']")
	private static WebElement  workFlowRow9Column5CL;	


	//10 Row CRTL + L
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_10-1']//input")
	private static WebElement workFlowRow10ChkBoxCL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_10-6']")
	private static WebElement  workFlowRow10Column1CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_10-7']")
	private static WebElement  workFlowRow10Column2CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_10-8']")
	private static WebElement  workFlowRow10Column3CL;
				
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_10-9']")
	private static WebElement  workFlowRow10Column4CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_10-10']")
	private static WebElement  workFlowRow10Column5CL;	




	//11 Row CRTL + L
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_11-1']//input")
	private static WebElement workFlowRow11ChkBoxCL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_11-6']")
	private static WebElement  workFlowRow11Column1CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_11-7']")
	private static WebElement  workFlowRow11Column2CL;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_11-8']")
	private static WebElement  workFlowRow11Column3CL;
				
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_11-9']")
	private static WebElement  workFlowRow11Column4CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_11-10']")
	private static WebElement  workFlowRow11Column5CL;	



	//12 Row CRTL + L
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_12-1']//input")
	private static WebElement workFlowRow12ChkBoxCL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_12-6']")
	private static WebElement  workFlowRow12Column1CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_12-7']")
	private static WebElement  workFlowRow12Column2CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_12-8']")
	private static WebElement  workFlowRow12Column3CL;
				
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_12-9']")
	private static WebElement  workFlowRow12Column4CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_12-10']")
	private static WebElement  workFlowRow12Column5CL;	



	//13 Row CRTL + L
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_13-1']//input")
	private static WebElement workFlowRow13ChkBoxCL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_13-6']")
	private static WebElement  workFlowRow13Column1CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_13-7']")
	private static WebElement  workFlowRow13Column2CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_13-8']")
	private static WebElement  workFlowRow13Column3CL;
				
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_13-9']")
	private static WebElement  workFlowRow13Column4CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_10-10']")
	private static WebElement  workFlowRow13Column5CL;	



	//14 Row CRTL + L
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_14-1']//input")
	private static WebElement workFlowRow14ChkBoxCL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_14-6']")
	private static WebElement  workFlowRow14Column1CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_14-7']")
	private static WebElement  workFlowRow14Column2CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_14-8']")
	private static WebElement  workFlowRow14Column3CL;
				
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_14-9']")
	private static WebElement  workFlowRow14Column4CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_14-10']")
	private static WebElement  workFlowRow14Column5CL;


	//15 Row CRTL + L
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_15-1']//input")
	private static WebElement workFlowRow15ChkBoxCL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_15-6']")
	private static WebElement  workFlowRow15Column1CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_15-7']")
	private static WebElement  workFlowRow15Column2CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_15-8']")
	private static WebElement  workFlowRow15Column3CL;
				
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_15-9']")
	private static WebElement  workFlowRow15Column4CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_15-10']")
	private static WebElement  workFlowRow15Column5CL;	



	//16 Row CRTL + L
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_16-1']//input")
	private static WebElement workFlowRow16ChkBoxCL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_16-6']")
	private static WebElement  workFlowRow16Column1CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_16-7']")
	private static WebElement  workFlowRow16Column2CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_16-8']")
	private static WebElement  workFlowRow16Column3CL;
				
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_16-9']")
	private static WebElement  workFlowRow16Column4CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_16-10']")
	private static WebElement  workFlowRow16Column5CL;	
	
	
	 //WorkFlow Elements

	
	@FindBy(xpath="//select[@id='id_transactionentry_workflow_popup_searchon']")
	private static WebElement  searchOnDropdown;
	
	@FindBy(xpath="//select[@id='id_transactionentry_workflow_popup_searchtype']")
	private static WebElement  containingDropdown;
		
	@FindBy(xpath="//input[@id='id_transactionentry_workflow_popup_search']")
	private static WebElement  workFlowSearchTxt;
	
	@FindBy(xpath="//i[@id='id_transactionentry_workflow_popup_close']")
	private static WebElement  workFlowCloseBtn;
	
	@FindBy(xpath="//ul[@class='nav navbar-nav navbar-right']//div[@class='toolbar_button_text font-7'][contains(text(),'Customize')]")
	private static WebElement  workFlowCustomizeBtn;
	
	@FindBy(xpath="//ul[@class='nav navbar-nav navbar-right']//div[@class='toolbar_button_text font-7'][contains(text(),'Ok')]")
	private static WebElement  workFlowOkBtn;
	
	@FindBy(xpath="//div[@class='toolbar_button_text font-7'][contains(text(),'Ok')]")
	private static WebElement  workFlowOkBtnInSalesVoucher;
	
	
	@FindBy(xpath="//span[@id='id_transaction_entry_workflow_togglebutton']")
	private static WebElement  workFlowMinimizeBtn;
	
	
	
	//WorkFlow Screen with Line wise
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_1-1']//input")
	private static WebElement  workFlowHeaderChkBox;
	
	@FindBy(xpath="//th[@id='id_transaction_entry_detail_workflow_popup_control_heading_6']//div[contains(text(),'Voucher No')]")
	private static WebElement  workFlowHeaderVoucherNo;
	
	@FindBy(xpath="//th[@id='id_transaction_entry_detail_workflow_popup_control_heading_7']//div[contains(text(),'Date')]")
	private static WebElement  workFlowHeaderDate;
	
	@FindBy(xpath="//div[contains(text(),'Name')]")
	private static WebElement  workFlowHeaderName;
	
	@FindBy(xpath="//th[@id='id_transaction_entry_detail_workflow_popup_control_heading_9']//div[contains(text(),'Quantity')]")
	private static WebElement  workFlowHeaderQty;
	
	@FindBy(xpath="//div[contains(text(),'Suspended')]")
	private static WebElement  workFlowHeaderSuspend;
	
	
	//WorkFlow with Line wise
	// 1 Row
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_1-1']//input")
	private static WebElement workFlowRadioBtnRowOne;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_1-6']")
	private static WebElement  workFlowRow1Column1;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_1-7']")
	private static WebElement  workFlowRow1Column2;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_1-8']")
	private static WebElement  workFlowRow1Column3;
			
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_1-9']")
	private static WebElement  workFlowRow1Column4;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_1-10']")
	private static WebElement  workFlowRow1Column5;
	
	// 2 Row
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_2-1']//input")
	private static WebElement workFlowRadioBtnRowTwo;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_2-6']")
	private static WebElement  workFlowRow2Column1;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_2-7']")
	private static WebElement  workFlowRow2Column2;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_2-8']")
	private static WebElement  workFlowRow2Column3;
			
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_2-9']")
	private static WebElement  workFlowRow2Column4;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_2-10']")
	private static WebElement  workFlowRow2Column5;
	
	
	
	
	// 3 Row
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_3-1']//input")
	private static WebElement workFlowRadioBtnRowThree;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_3-6']")
	private static WebElement  workFlowRow3Column1;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_3-7']")
	private static WebElement  workFlowRow3Column2;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_3-8']")
	private static WebElement  workFlowRow3Column3;
			
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_3-9']")
	private static WebElement  workFlowRow3Column4;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_3-10']")
	private static WebElement  workFlowRow3Column5;
	
	
	// 4 Row
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_4-1']//input")
	private static WebElement workFlowRadioBtnRowFour;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_4-6']")
	private static WebElement  workFlowRow4Column1;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_4-7']")
	private static WebElement  workFlowRow4Column2;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_4-8']")
	private static WebElement  workFlowRow4Column3;
			
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_4-9']")
	private static WebElement  workFlowRow4Column4;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_4-10']")
	private static WebElement  workFlowRow4Column5;	
	
	
	
     // 5 Row
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_5-1']//input")
	private static WebElement workFlowRadioBtnRowFive;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_5-6']")
	private static WebElement  workFlowRow5Column1;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_5-7']")
	private static WebElement  workFlowRow5Column2;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_5-8']")
	private static WebElement  workFlowRow5Column3;
			
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_5-9']")
	private static WebElement  workFlowRow5Column4;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_5-10']")
	private static WebElement  workFlowRow5Column5;	
	
	
	
    // 6 Row
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_6-1']//input")
	private static WebElement workFlowRadioBtnRowSix;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_6-6']")
	private static WebElement  workFlowRow6Column1;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_6-7']")
	private static WebElement  workFlowRow6Column2;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_6-8']")
	private static WebElement  workFlowRow6Column3;
			
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_6-9']")
	private static WebElement  workFlowRow6Column4;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_6-10']")
	private static WebElement  workFlowRow6Column5;	
	

    // 7 Row
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_7-1']//input")
	private static WebElement workFlowRadioBtnRowSeven;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_7-6']")
	private static WebElement  workFlowRow7Column1;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_7-7']")
	private static WebElement  workFlowRow7Column2;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_7-8']")
	private static WebElement  workFlowRow7Column3;
			
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_7-9']")
	private static WebElement  workFlowRow7Column4;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_7-10']")
	private static WebElement  workFlowRow7Column5;	
	
	

    // 8 Row
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_8-1']//input")
	private static WebElement workFlowRadioBtnRowEight;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_8-6']")
	private static WebElement  workFlowRow8Column1;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_8-7']")
	private static WebElement  workFlowRow8Column2;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_8-8']")
	private static WebElement  workFlowRow8Column3;
			
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_8-9']")
	private static WebElement  workFlowRow8Column4;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_8-10']")
	private static WebElement  workFlowRow8Column5;	
	
	

    // 9 Row
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_9-1']//input")
	private static WebElement workFlowRadioBtnRowNine;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_9-6']")
	private static WebElement  workFlowRow9Column1;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_9-7']")
	private static WebElement  workFlowRow9Column2;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_9-8']")
	private static WebElement  workFlowRow9Column3;
			
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_9-9']")
	private static WebElement  workFlowRow9Column4;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_9-10']")
	private static WebElement  workFlowRow9Column5;	
	
	

    // 10 Row
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_10-1']//input")
	private static WebElement workFlowRadioBtnRowTen;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_10-6']")
	private static WebElement  workFlowRow10Column1;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_10-7']")
	private static WebElement  workFlowRow10Column2;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_10-8']")
	private static WebElement  workFlowRow10Column3;
			
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_10-9']")
	private static WebElement  workFlowRow10Column4;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_10-10']")
	private static WebElement  workFlowRow10Column5;	
	
	

    // 11 Row
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_11-1']//input")
	private static WebElement workFlowRadioBtnRowElevan;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_11-6']")
	private static WebElement  workFlowRow11Column1;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_11-7']")
	private static WebElement  workFlowRow11Column2;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_11-8']")
	private static WebElement  workFlowRow11Column3;
			
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_11-9']")
	private static WebElement  workFlowRow11Column4;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_11-10']")
	private static WebElement  workFlowRow11Column5;	
	
	

    // 12 Row
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_12-1']//input")
	private static WebElement workFlowRadioBtnRowTwevle;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_12-6']")
	private static WebElement  workFlowRow12Column1;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_12-7']")
	private static WebElement  workFlowRow12Column2;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_12-8']")
	private static WebElement  workFlowRow12Column3;
			
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_12-9']")
	private static WebElement  workFlowRow12Column4;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_12-10']")
	private static WebElement  workFlowRow12Column5;	
	

    // 13 Row
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_13-1']//input")
	private static WebElement workFlowRadioBtnRowThirteen;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_13-6']")
	private static WebElement  workFlowRow13Column1;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_13-7']")
	private static WebElement  workFlowRow13Column2;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_13-8']")
	private static WebElement  workFlowRow13Column3;
			
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_13-9']")
	private static WebElement  workFlowRow13Column4;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_12-10']")
	private static WebElement  workFlowRow13Column5;	
	
	

    // 14 Row
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_14-1']//input")
	private static WebElement workFlowRadioBtnRowFourteen;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_14-6']")
	private static WebElement  workFlowRow14Column1;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_14-7']")
	private static WebElement  workFlowRow14Column2;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_14-8']")
	private static WebElement  workFlowRow14Column3;
			
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_14-9']")
	private static WebElement  workFlowRow14Column4;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_14-10']")
	private static WebElement  workFlowRow14Column5;	
	
	

    // 15 Row
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_15-1']//input")
	private static WebElement workFlowRadioBtnRowFifteen;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_15-6']")
	private static WebElement  workFlowRow15Column1;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_15-7']")
	private static WebElement  workFlowRow15Column2;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_15-8']")
	private static WebElement  workFlowRow15Column3;
			
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_15-9']")
	private static WebElement  workFlowRow15Column4;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_15-10']")
	private static WebElement  workFlowRow15Column5;	
	
	

	

    // 16 Row
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_16-1']//input")
	private static WebElement workFlowRadioBtnRowSixteen;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_16-6']")
	private static WebElement  workFlowRow16Column1;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_16-7']")
	private static WebElement  workFlowRow16Column2;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_16-8']")
	private static WebElement  workFlowRow16Column3;
			
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_16-9']")
	private static WebElement  workFlowRow16Column4;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_16-10']")
	private static WebElement  workFlowRow16Column5;	
		
		
		
		
		private static String xlfile;
		private static String resPass="Pass";
		private static String resFail="Fail";
		private static ExcelReader excelReader;

		private static String xlSheetName = "SmokeStockTransfer";
		
		
		private String expOsVoucherGrossR4;
		

		public boolean checkLoadingMessage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			try
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessage));
				String actVoucherLoadingMessage=errorMessage.getText();
				String expVoucherLoadingMessage="Voucher loaded successfully";
				
				System.out.println("VoucherLoadingMessage  : "+actVoucherLoadingMessage +" Value Expected : "+expVoucherLoadingMessage);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
				errorMessageCloseBtn.click();

				if(actVoucherLoadingMessage.startsWith(expVoucherLoadingMessage))
				{
					return true;
				}
				else
				{
					return false;
				}
			}
			catch(Exception e)
			{
				System.err.println("UNABLE TO COMPARE");
				return false;
			}
		}
		
		
		
		
		public boolean checkVoucherSavingMessage(String docno) throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			try
			{
				getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(errorMessage));
				String actErrorMessage=errorMessage.getText();
				String expErrorMessage="Voucher saved successfully";
				String expErrorMessage1=": "+docno;
				
				System.out.println("SavingMessage  :  "+actErrorMessage +" Value Expected : "+expErrorMessage+" "+expErrorMessage1);
				
				if(actErrorMessage.startsWith(expErrorMessage) && actErrorMessage.endsWith(expErrorMessage1))
				{
					try
					{
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
						errorMessageCloseBtn.click();
						
						return  true;
					}
					catch(Exception ee)
					{
						return true;
					}
					
				}
				else
				{
					return false;
				}
				
			}
			catch(Exception e)
			{
				System.err.println("UNABLE TO COMPARE");
				return false;
			}
		}
		
		
		
		public static String checkValidationMessage(String ExpMessage) throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
		        try
		        {
		                getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(errorMessage));
		                String actErrorMessage=errorMessage.getText();
		                String expErrorMessage=ExpMessage;
		                
		                try
		                {
		                
			                getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			                errorMessageCloseBtn.click();
			                
			                System.out.println("ValidationMessage  :  "+actErrorMessage +" Value Expected : "+expErrorMessage);
			                
			                return actErrorMessage;
		                }
		                catch(Exception ee)
		                {
		                	
		                	System.out.println("ValidationMessage  :  "+actErrorMessage +" Value Expected : "+expErrorMessage);
		                	
		                	return actErrorMessage;
		                }
		               
		                
		               
		        }
		        catch(Exception e)
		        {
		                System.err.println("Error Message NOT Found or NOT Clickable");
		                System.err.println(e.getMessage());
		                
		                String Exception=e.getMessage();
		            
		                return Exception;
		                
		        }
		}
		

		public static void checkUserFriendlyMessage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
		        try
		        {
		                getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(errorMessage));
		                String actErrorMessage=errorMessage.getText();
		                
		                try
		                {
		                
			                getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			                errorMessageCloseBtn.click();
			                
			                System.out.println("ValidationMessage  :  "+actErrorMessage);
			                
		                }
		                catch(Exception ee)
		                {
		                	
		                	System.out.println("ValidationMessage  :  "+actErrorMessage);
		                	
		                }
		               
		                
		               
		        }
		        catch(Exception e)
		        {
		                System.err.println("Error Message NOT Found or NOT Clickable");
		                System.err.println(e.getMessage());
		                
		                String Exception=e.getMessage();
		            
		        }
		}
		
		
		
		
		public boolean checkEntryPageDeleteMessage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(errorMessage));
			String actErrorMessage=errorMessage.getText();
			String expErrorMessage="Voucher deleted Successfully";
			
			System.out.println("DeletingMessage  :  "+actErrorMessage +" Value Expected : "+expErrorMessage);
			
			if(actErrorMessage.equalsIgnoreCase(expErrorMessage))
			{
				
				try
				{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
					errorMessageCloseBtn.click();
					
					return  true;
				}
				catch(Exception ee)
				{
					return true;
				}
				
				
			}
			else
			{
				return false;
			}
		}

		
		
		
			 
		public static void checkPopUpWindow() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			 Thread.sleep(5000);
		      
		      try 
		      {
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(doNotShowCheckbox));
					doNotShowCheckbox.click();
					
					Thread.sleep(2000);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtnInDemoPopupScreen));
					closeBtnInDemoPopupScreen.click(); 
					
					System.err.println("POP UP DISPLAYED AND CLOSED SUCCESSFULLY");
					
				} 
		      catch (Exception e)
		      {
		      	System.err.println("NO POP UP DISPLAYED");
				}
		
		  	
		  	Thread.sleep(4000);
		}
				 


		@FindBy(xpath="//button[contains(text(),'Ok')]")
		private static WebElement loginRefreshOkBtn;
		

		public static void checkRefreshPopOnlogin() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			
			try 
			{


				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(loginRefreshOkBtn));
				loginRefreshOkBtn.click();
			
			
			} 
			catch (Exception e)
			{
	 			 
				System.err.println("Exception : "+e.getMessage());
	 			 
				
				
	  			System.err.println("NO ALERT POP UP DISPLAYED");
			}
			Thread.sleep(4000);
		}
		
		 @FindBy(xpath="//*[@id='plnCustomizecolumn']/div/span[4]/a")
			private static WebElement  custRemoveBtn;
		    
			@FindBy(xpath="//*[@id='id_rc_columnheadertable']/thead/tr/th")
			private static List<WebElement>  custBodyHeaderList;
			
			@FindBy(xpath="//*[@id='fields_tab']/input")
			private static WebElement  custFieldTab;
			
			@FindBy(xpath="//*[@id='id_rc_search_inputbox']")
			private static WebElement  custSearchTxt;
			
			@FindBy(xpath="//*[@id='id_rc_searchnumeric']/i")
			private static WebElement  custSearchNumericButton;
			
			@FindBy(xpath="//*[@id='id_rc_searchtext']/input")
			private static WebElement  custSearchStringItems;
			
			@FindBy(xpath="//div[contains(text(),'Formatting by Row')]")
			private static WebElement  custFormattingbyRowBtn;
			
			@FindBy(xpath="//div[contains(text(),'Delete layout')]")
			private static WebElement  custDeleteLayoutBtn;
			
			@FindBy(xpath="//div[contains(text(),'Import')]")
			private static WebElement  custImportBtn;
			
			@FindBy(xpath="//div[@class='col-sm-12 toolbar_button_text font-6'][contains(text(),'Export')]")
			private static WebElement  custExportBtn;
			
			@FindBy(xpath="//div[@class='col-sm-12 toolbar_button_text font-6'][contains(text(),'Save')]")
			private static WebElement  custSaveBtn;
			
			@FindBy(xpath="//*[@id='btnCustomizeClose']/div[1]/span")
			private static WebElement  custCancelBtn;
			
			@FindBy(xpath="//input[@id='layoutName']")
			private static WebElement  custLayoutNameTxt;
			
			@FindBy(xpath="//input[@id='chkDefault']")
			private static WebElement  custDefaultChkBox;
			
			@FindBy(xpath="//input[@id='totalWidth']")
			private static WebElement  custTotalWidthTxt;
			
			@FindBy(xpath="//input[@id='chkLandscape']")
			private static WebElement  custLandscapeChkBox;
			
			public static void checkDeleteLinkStatus() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeBtn));
				customizeBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(custSaveBtn));
				
				int custBodyHeaderListCount = custBodyHeaderList.size();
				
				for (int i = 0; i < custBodyHeaderListCount; i++)
				{
					String data = custBodyHeaderList.get(i).getText();
					
					System.out.println(i+" "+data);
					
					/*int temp=i+1;
					
					JavascriptExecutor js = (JavascriptExecutor) getDriver();
					js.executeScript("arguments[0].scrollIntoView();",custBodyHeaderList.get(temp));*/
					
					if (data.equalsIgnoreCase("Link status")) 
					{
						custBodyHeaderList.get(i).click();
						
						Thread.sleep(2000);
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(custRemoveBtn));
						custRemoveBtn.click();
						
						Thread.sleep(1000);
						
						break;
					}
				}
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(custSaveBtn));
				custSaveBtn.click();
				
				String expMessage  = "Data saved successfully";
				String actSaveMessage = checkValidationMessage(expMessage);
			}
		
		private static int cSize; 
		
		public boolean checkLoginToCheckExcessAndShortages() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
	        LoginPage lp=new LoginPage(getDriver()); 
			
			String unamelt="su";
					      
			String pawslt="su";
					      
			lp.enterUserName(unamelt);
					
			lp.enterPassword(pawslt);
			
			String compname="Automation Company";
		 	
			 Select oSelect = new Select(companyDropDownList);
			 
			 List <WebElement> elementCount = oSelect.getOptions();
			
			 int cqSize = elementCount.size();
			 
			 int zqSize=cSize+1;
			 
			 System.out.println("CompanyDropdownList Count :"+cqSize);
			 
			 System.out.println("Company dropdown is :"+ zqSize);
		 
		 
		 //Select dropdown= new Select(lp.companyDropDownList);
		  int i;
		  
		  //List<WebElement> list = dropdown.getOptions();

			//List<String> text = new ArrayList<>();
			for(i=0; i<elementCount.size(); i++) 
			{
			
			  elementCount.get(i).getText();
		  String optionName = elementCount.get(i).getText();
		  if(optionName.toUpperCase().startsWith(compname.toUpperCase()))
		  {
			  System.out.println("q"+elementCount.get(i).getText());
			  elementCount.get(i).click();
			  
		  }
	 
	 }
					  
			lp.clickOnSignInBtn();
					       
			
	      /*   try 
	        {
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(doNotShowCheckbox));
				doNotShowCheckbox.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtnInDemoPopupScreen));
				closeBtnInDemoPopupScreen.click(); 
				
			} 
	        catch (Exception e)
	        {
	        	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			}*/
				
			Thread.sleep(3000);	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			String userInfo=userNameDisplay.getText();
					    			
			System.out.println("User Info : "+userInfo);
					    	
			System.out.println("User Info Capture Text :"+userNameDisplay.getText());
					    	
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
					    	
			companyLogo.click();
					    	
			String getCompanyTxt=companyName.getText();
			String getLoginCompanyName=getCompanyTxt.substring(0, 19);
			System.out.println("company name :"+ getLoginCompanyName);
			companyLogo.click();
					    	
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
					    	
			String getDashboard=labelDashboard.getText();
		   
			System.out.println("getDashboard"+getDashboard);
			
			if(userInfo.equalsIgnoreCase("SU") /*&& getLoginCompanyName.equalsIgnoreCase("Automation Company ") && getDashboard.equalsIgnoreCase("Dashboard")*/)
			{

				System.out.println("Test Pass : Transaction Authorization is Displayed");
				return true;
				
			}
			else
			{
				System.out.println("Test Fail : Transaction Authorization is Displayed");
				return false;

			}
		}
		
		
		@FindBy(xpath="//div[@id='docCustomization']")
		private static WebElement  documentCustomization45Btn;
		
		
		@FindBy(xpath="//a[@id='3072']")
		private static WebElement  stockTransfersBtn;
		
		@FindBy(xpath="//span[@class='icon-miscellaneous']")
		private static WebElement  miscellaneousTab;
		
		@FindBy(xpath="//input[@id='misc_PostingUpdateFA']")
		private static WebElement updateFAChkBox;
		
		@FindBy(xpath="//label[contains(text(),'Preferences')]")
		private static WebElement  preferencesBtn;
		
	// Stock Transfer Starts From here
	
	public boolean checkStockTransferVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();
		
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransfersBtn));
		stockTransfersBtn.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
		miscellaneousTab.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateFAChkBox));
		
		if (updateFAChkBox.isSelected()==true)
		{
			updateFAChkBox.click();
		}
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
		errorMessageCloseBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settings_closeBtn));
		settings_closeBtn.click();
		
		Thread.sleep(3000);
					
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
    	inventoryMenu.click();
			
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
    	inventoryTransactionsMenu.click();
			
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsStocksMenu));
    	inventoryTransactionsStocksMenu.click();
    	
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransfersVoucher));
    	
    	boolean StockTransfersVoucher         =stockTransfersVoucher.isDisplayed();
    	
    	String actstockTransfersVoucher       =Boolean.toString(StockTransfersVoucher);
    	
    	String expstockTransfersVoucher		 =excelReader.getCellData(xlSheetName, 13, 7);
    	
    	
    	excelReader.setCellData(xlfile, xlSheetName, 13, 8, actstockTransfersVoucher);
    	
    	System.out.println("****************************** checkStockTransferVoucher  ********************************************");
    	
		System.out.println("stockTransfersVoucher          :"+actstockTransfersVoucher+         "     Value Expected : "+expstockTransfersVoucher);
		
		if(actstockTransfersVoucher.equalsIgnoreCase(expstockTransfersVoucher))
		{
			System.out.println("Test Pass : HomeScreen Options Are Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 12, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : HomeScreen Options Are NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 12, 9, resFail);
			return false;
		}
	}
	
	
	@FindBy(xpath="//ul[@id='id_transaction_viewcontainer']//li[2]")
	private static WebElement  pendingExcessInStocksView;
	
	
	public boolean checkStockTransferHomePage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransfersVoucher));
    	stockTransfersVoucher.click();
			
    	
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
    	
		boolean actHomePageNewBtn         		=newBtn.isDisplayed();
		boolean actHomePageEditBtn        		=editBtn.isDisplayed();
		boolean actHomePagePrintBtn       		=printBtn.isDisplayed();
		boolean actHomePageDeleteBtn      		=deleteBtn.isDisplayed();
		boolean actHomePageSuspendBtn     		=suspendBtn.isDisplayed();
		boolean actHomePagePrintBarcodeBtn		=printBarCodeBtn.isDisplayed();
		boolean actHomePageExportXMLBtn   		=exportToXMLBtn.isDisplayed();
		boolean actHomePageSettingsBtn    		=settingsBtn.isDisplayed();
		boolean actHomePageCloseBtn       		=homeCloseBtn.isDisplayed();
		boolean actHomePageGridCheckBox   		=grid_HeaderChkBox.isDisplayed();
		boolean actHomePageSortingBtn     		=sortingBtn.isDisplayed();
		boolean actHomePageCreateViewBn   		=createViewBtn.isDisplayed();
		boolean actHomePageCustomizeBtn   		=customizeBtn.isDisplayed();
		boolean actHomePageFilterBtn      		=filterBtn.isDisplayed();
		boolean actHomePageRefreshBtn     		=refreshBtn.isDisplayed();
		boolean actHomePageOptionsBtn     		=optionsBtn.isDisplayed();
		boolean actHomePageExportBtn      		=exportBtn.isDisplayed();
		boolean actHomePageAllView        		=homePageAllVouchersView.isDisplayed();
		boolean actpendingExcessInStocksView  	=pendingExcessInStocksView.isDisplayed();
		

		boolean expHomePageNewBtn         		=true;
		boolean expHomePageEditBtn        		=true;
		boolean expHomePagePrintBtn       		=true;
		boolean expHomePageDeleteBtn      		=true;
		boolean expHomePageAuthorizeBtn   		=true;
		boolean expHomePageSuspendBtn     		=true;
		boolean expHomePageRejectBtn      		=true;
		boolean expHomePagePrintBarcodeBtn		=true;
		boolean expHomePageExportXMLBtn   		=true;
		boolean expHomePageSettingsBtn    		=true;
		boolean expHomePageCloseBtn       		=true;
		boolean expHomePageGridCheckBox   		=true;
		boolean expHomePageSortingBtn     		=true;
		boolean expHomePageCreateViewBn   		=true;
		boolean expHomePageCustomizeBtn   		=true;
		boolean expHomePageFilterBtn     		=true;
		boolean expHomePageRefreshBtn  		    =true;
		boolean expHomePageOptionsBtn  		    =true;
		boolean expHomePageExportBtn     		=true;
		boolean expHomePageAllView        		=true;
		boolean exppendingExcessInStocksView  	=true;
		
		System.out.println("****************************** checkStockTransferHomePage  ********************************************");
		
		
		System.out.println("Home Page New Btn Value Actual           :"+actHomePageNewBtn			+"   Value Expected : "+expHomePageNewBtn);
		System.out.println("Home Page Edit Btn Value Actual          :"+actHomePageEditBtn			+"   Value Expected : "+expHomePageEditBtn);
		System.out.println("Home Page Print Btn Value Actual         :"+actHomePagePrintBtn			+"	 Value Expected : "+expHomePagePrintBtn);
		System.out.println("Home Page Delete Btn Value Actual        :"+actHomePageDeleteBtn		+"	 Value Expected : "+expHomePageDeleteBtn);
		//System.out.println("Home Page Authorize Btn Value Actual     :"+actHomePageAuthorizeBtn		+"	 Value Expected : "+expHomePageAuthorizeBtn);
		System.out.println("Home Page Suspend Btn Value Actual       :"+actHomePageSuspendBtn		+"	 Value Expected : "+expHomePageSuspendBtn);
		//System.out.println("Home Page Reject Btn Value Actual        :"+actHomePageRejectBtn		+"	 Value Expected : "+expHomePageRejectBtn);
		System.out.println("Home Page Print Barcode Btn Value Actual :"+actHomePagePrintBarcodeBtn	+"	 Value Expected : "+expHomePagePrintBarcodeBtn);
		System.out.println("Home Page Export XML Btn Value Actual    :"+actHomePageExportXMLBtn		+"	 Value Expected : "+expHomePageExportXMLBtn);
		System.out.println("Home Page Settings Btn Value Actual      :"+actHomePageSettingsBtn		+"	 Value Expected : "+expHomePageSettingsBtn);
		System.out.println("Home Page Close Btn Value Actual         :"+actHomePageCloseBtn			+"	 Value Expected : "+expHomePageCloseBtn);
		System.out.println("Home Page Grid check Value Actual        :"+actHomePageGridCheckBox		+"	 Value Expected : "+expHomePageGridCheckBox);
		System.out.println("Home Page Sorting Btn Value Actual       :"+actHomePageSortingBtn		+"	 Value Expected : "+expHomePageSortingBtn);
		System.out.println("Home Page Create View Btn Value Actual   :"+actHomePageCreateViewBn		+"	 Value Expected : "+expHomePageCreateViewBn);
		System.out.println("Home Page Customize Btn Value Actual     :"+actHomePageCustomizeBtn		+"	 Value Expected : "+expHomePageCustomizeBtn);
		System.out.println("Home Page Filter check Value Actual      :"+actHomePageFilterBtn		+"	 Value Expected : "+expHomePageFilterBtn);
		System.out.println("Home Page Refesh Btn Value Actual        :"+actHomePageRefreshBtn		+"	 Value Expected : "+expHomePageRefreshBtn);
		System.out.println("Home Page Options Btn Value Actual       :"+actHomePageOptionsBtn		+"	 Value Expected : "+expHomePageOptionsBtn);
		System.out.println("Home Page Export Btn Value Actual        :"+actHomePageExportBtn		+"	 Value Expected : "+expHomePageExportBtn);
		System.out.println("Home Page All View Value Actual          :"+actHomePageExportBtn		+"	 Value Expected : "+expHomePageExportBtn);
		System.out.println("Home Page Pending SO View Value Actual   :"+actpendingExcessInStocksView+"	 Value Expected : "+exppendingExcessInStocksView);
		
		
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			
    	boolean result=actHomePageNewBtn==expHomePageNewBtn  && actHomePageEditBtn==expHomePageEditBtn && actHomePagePrintBtn==expHomePagePrintBtn
				&& actHomePageDeleteBtn==expHomePageDeleteBtn && actHomePageSuspendBtn==expHomePageSuspendBtn 
				&& actHomePagePrintBarcodeBtn==expHomePagePrintBarcodeBtn && actHomePageExportXMLBtn==expHomePageExportXMLBtn
				&& actHomePageSettingsBtn==expHomePageSettingsBtn && actHomePageCloseBtn==expHomePageCloseBtn && actHomePageGridCheckBox==expHomePageGridCheckBox
				&& actHomePageSortingBtn==expHomePageSortingBtn && actHomePageCreateViewBn==expHomePageCreateViewBn && actHomePageCustomizeBtn==expHomePageCustomizeBtn
				&& actHomePageFilterBtn==expHomePageFilterBtn && actHomePageRefreshBtn==expHomePageRefreshBtn && actHomePageOptionsBtn==expHomePageOptionsBtn
				&& actHomePageExportBtn==expHomePageExportBtn && actHomePageAllView==expHomePageAllView && actpendingExcessInStocksView==exppendingExcessInStocksView;
    	
    	
				
		String actDisplay=Boolean.toString(result);
    	String expDisplay=excelReader.getCellData(xlSheetName, 15, 7);
    	
    	excelReader.setCellData(xlfile, xlSheetName, 15, 8, actDisplay);
				
    	
    	if(actDisplay.equalsIgnoreCase(expDisplay))
    	{
				System.out.println("Test Pass : HomeScreen Options Are Displayed");
				excelReader.setCellData(xlfile, xlSheetName, 14, 9, resPass);
				return true;
    	}
			else
		{
				System.out.println("Test Fail : HomeScreen Options Are NOT Displayed");
				excelReader.setCellData(xlfile, xlSheetName, 14, 9, resFail);
				return false;
		}
	 }
	
	
	
	public boolean checkStockTransferEntryPage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		checkUserFriendlyMessage();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jumpToHeaderSectionBtn));
		

		boolean actEntryPageJumpToHeaderSectionBtn=jumpToHeaderSectionBtn.isDisplayed();
		boolean actEntryPageJumpToBodySectionBtn  =jumpToBodySectionBtn.isDisplayed();
		boolean actEntryPageJumpToFooterBtn       =jumpToFooterBtn.isDisplayed();
		boolean actEntryPageNewBtn                =new_newBtn.isDisplayed();
		boolean actEntryPageSaveBtn               =saveBtn.isDisplayed();
		boolean actEntryPagePreviousBtn           =previousBtn.isDisplayed();
		boolean actEntryPageNextBtn               =nextBtn.isDisplayed();
		boolean actEntryPagePrintBtn              =new_PrintBtn.isDisplayed();
		boolean actEntryPageSuspendBtn            =new_SuspendBtn.isDisplayed();
		boolean actEntryPageCloseBtn              =new_CloseBtn.isDisplayed();
		boolean actEntryPageToggleBtn             =toggleBtn.isDisplayed();

		
		boolean expEntryPageJumpToHeaderSectionBtn=true;
		boolean expEntryPageJumpToBodySectionBtn  =true;
		boolean expEntryPageJumpToFooterBtn       =true;
		boolean expEntryPageNewBtn	              =true;
		boolean expEntryPageSaveBtn               =true;
		boolean expEntryPagePreviousBtn           =true;
		boolean expEntryPageNextBtn               =true;
		boolean expEntryPagePrintBtn              =true;
		boolean expEntryPageSuspendBtn            =true;
		boolean expEntryPageCloseBtn              =true;
		boolean expEntryPageToggleBtn             =true;

		
		
		System.out.println("************************************* checkStockTransferEntryPage  ********************************************");
		
		System.out.println("Entry Page RC Jump to Header Value Actual:"+actEntryPageJumpToHeaderSectionBtn+"  Value Expected : "+expEntryPageJumpToHeaderSectionBtn);
		System.out.println("Entry Page RC Jump To Body Value Actual  :"+actEntryPageJumpToBodySectionBtn+"    Value Expected : "+expEntryPageJumpToBodySectionBtn);
		System.out.println("Entry Page RC Jump To Footer Value Actual:"+actEntryPageJumpToFooterBtn+"         Value Expected : "+expEntryPageJumpToFooterBtn);
		System.out.println("Entry Page RC New Btn Value Actual       :"+actEntryPageNewBtn+"                  Value Expected : "+expEntryPageNewBtn);
		System.out.println("Entry Page RC Save Btn Value Actual      :"+actEntryPageSaveBtn+"                 Value Expected : "+expEntryPageSaveBtn);
		System.out.println("Entry Page RC Previous Btn Value Actual  :"+actEntryPagePreviousBtn+"             Value Expected : "+expEntryPagePreviousBtn);
		System.out.println("Entry Page RC Next Btn Value Actual      :"+actEntryPageNextBtn+"                 Value Expected : "+expEntryPageNextBtn);
		System.out.println("Entry Page RC Print Btn Value Actual     :"+actEntryPagePrintBtn+"                Value Expected : "+expEntryPagePrintBtn);
		System.out.println("Entry Page RC Suspend Btn Value Actual   :"+actEntryPageSuspendBtn+"              Value Expected : "+expEntryPageSuspendBtn);
		System.out.println("Entry Page RC Close Btn Value Actual     :"+actEntryPageCloseBtn+"                Value Expected : "+expEntryPageCloseBtn);
		System.out.println("Entry Page RC Toggle Btn Value Actual    :"+actEntryPageToggleBtn+"               Value Expected : "+expEntryPageToggleBtn);
		
		
		
		boolean result=actEntryPageJumpToHeaderSectionBtn==expEntryPageJumpToHeaderSectionBtn && actEntryPageJumpToBodySectionBtn==expEntryPageJumpToBodySectionBtn 
				&& actEntryPageJumpToFooterBtn==expEntryPageJumpToFooterBtn && actEntryPageJumpToFooterBtn==expEntryPageJumpToFooterBtn
				&& actEntryPageNewBtn==expEntryPageNewBtn && actEntryPageSaveBtn==expEntryPageSaveBtn && actEntryPagePreviousBtn==expEntryPagePreviousBtn
				&& actEntryPageNextBtn==expEntryPageNextBtn && actEntryPagePrintBtn==expEntryPagePrintBtn &&actEntryPageSuspendBtn==expEntryPageSuspendBtn 
				&& actEntryPageCloseBtn==expEntryPageCloseBtn && actEntryPageToggleBtn==expEntryPageToggleBtn;
		
		

		String actDisplay=Boolean.toString(result);
    	String expDisplay=excelReader.getCellData(xlSheetName, 17, 7);
    	
    	excelReader.setCellData(xlfile, xlSheetName, 17, 8, actDisplay);
				
    	
		
		if(actDisplay.equalsIgnoreCase(expDisplay) )
		{
			System.out.println("Test Pass : Entry Page Options Are Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 16, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Entry Page NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 16, 9, resFail);
			return false;
		}
	}
	
	
	@FindBy(xpath="//select[@id='id_header_31']")
	private static WebElement issuesReceiptsDropdown;
	
	public boolean checkStockTransferEntryPageHeaderFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		
		// Actual
		boolean actDocumentNumberTxt         			=documentNumberTxt.isDisplayed();
		boolean actDateTxt                   			=dateTxt.isDisplayed();
		boolean actissuesReceiptsDropdown    			=issuesReceiptsDropdown.isDisplayed();
		boolean actstockTransferheaderWarehouse1Txt   	=stockTransferheaderWarehouse1Txt.isDisplayed();
		boolean actstockTransfers_NarrationTxt 			=stockTransfers_NarrationTxt.isDisplayed();
		
		// Expected
		boolean expDocumentNumberTxt         			=true;
		boolean expDateTxt                   			=true;
		boolean expissuesReceiptsDropdown              	=true;
		boolean expstockTransferheaderWarehouse1Txt     =true;
		boolean expstockTransfers_NarrationTxt 			=true;
		
	
		System.out.println("************************************* checkStockTransferEntryPageHeaderFields  ********************************************");
		System.out.println("Entry Page Header Value Actual    :"+actDocumentNumberTxt					+" Value Expected : "+expDocumentNumberTxt);
		System.out.println("Entry Page Header Value Actual    :"+actDateTxt								+" Value Expected : "+expDateTxt);
		System.out.println("Entry Page Header Value Actual    :"+actissuesReceiptsDropdown				+" Value Expected : "+expissuesReceiptsDropdown);
		System.out.println("Entry Page Header Value Actual    :"+actstockTransferheaderWarehouse1Txt	+" Value Expected : "+expstockTransferheaderWarehouse1Txt);
		System.out.println("Entry Page Header Value Actual    :"+actstockTransfers_NarrationTxt			+" Value Expected : "+expstockTransfers_NarrationTxt);
		
		
		
		boolean result=actDocumentNumberTxt==expDocumentNumberTxt && actDateTxt==expDateTxt 
				&& actissuesReceiptsDropdown==expissuesReceiptsDropdown && actstockTransferheaderWarehouse1Txt==expstockTransferheaderWarehouse1Txt
				&& actstockTransfers_NarrationTxt==expstockTransfers_NarrationTxt;
		

		String actDisplay=Boolean.toString(result);
    	String expDisplay=excelReader.getCellData(xlSheetName, 19, 7);
    	
    	excelReader.setCellData(xlfile, xlSheetName, 19, 8, actDisplay);
				
    	
		if(actDisplay.equalsIgnoreCase(expDisplay))			     
		
		{
			System.out.println("Test Pass : entry Page Header Options Are Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 18, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 18, 9, resFail);
			return false;
		}
	}
	
	
	public boolean checkStockTransferIssueReceiptDropdownHeaderFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(issuesReceiptsDropdown));
		
		Select actissuesReceiptsDropdown=new Select(issuesReceiptsDropdown);
		
		int IssuesReceiptsDropdowncount=actissuesReceiptsDropdown.getOptions().size();
		
		
		String actissuesReceiptsDropdowncount=Integer.toString(IssuesReceiptsDropdowncount);
		
		String expissuesReceiptsDropdowncount=excelReader.getCellData(xlSheetName, 21, 7);
    	
    	excelReader.setCellData(xlfile, xlSheetName, 21, 8, actissuesReceiptsDropdowncount);
		
		
		System.out.println("************************************* checkStockTransferIssueReceiptDropdownHeaderFields  ********************************************");
		
		System.out.println("issuesReceiptsDropdowncount   :"+actissuesReceiptsDropdowncount	+" Value Expected : "+expissuesReceiptsDropdowncount);
		
		
		if(actissuesReceiptsDropdowncount.equalsIgnoreCase(expissuesReceiptsDropdowncount))			     
		
		{
			System.out.println("Test Pass : entry Page Header Options Are Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 20, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 20, 9, resFail);
			return false;
		}
	}
	

	@FindBy(xpath="//div[contains(text(),'Warehouse - 2')]")
	private static WebElement voucherBodyWareHouse2Name;
	
	
	@FindBy(xpath="//div[contains(text(),'L-Excesses in Stocks')]")
	private static WebElement  voucherBodyLExcessinStocksName;
	
	@FindBy(xpath="//th[@id='id_transaction_entry_detail_table_control_heading_9']//div[@class='no-select'][contains(text(),'Bins')]")
	private static WebElement  stockTransfervoucherBodyBinsName;
	
	@FindBy(xpath="//div[contains(text(),'Bins 2')]")
	private static WebElement voucherBodyBins2Name;
	
	@FindBy(xpath="//div[contains(text(),'Rate')]")
	private static WebElement  stockTransfervoucherBodyRateName;
	
	@FindBy(xpath="//div[contains(text(),'Gross')]")
	private static WebElement  stockTransfervoucherBodyGrossName;
	
	
	
	@FindBy(xpath="//div[contains(text(),'Warehouse')]")
	private static WebElement voucherBodyWareHouseName;
	
	@FindBy(xpath="//div[contains(text(),'Item')]")
	private static WebElement voucherBodyItemName;
	
	@FindBy(xpath="//div[contains(text(),'Units')]")
	private static WebElement voucherBodyUnitsName;
	
	@FindBy(xpath="//div[contains(text(),'RD')]")
	private static WebElement  voucherBodyRDName;
	
	@FindBy(xpath="//div[contains(text(),'Avg Rate(O)')]")
	private static WebElement  voucherBodyAvgRateName;
	

	               
	@FindBy(xpath="//div[contains(text(),'Quantity')]")
	private static WebElement  voucherBodyQtyName;

	@FindBy(xpath="//div[contains(text(),'L-Purchases Orders')]")
	private static WebElement  voucherBodyLPOName;
	
	@FindBy(xpath="//div[contains(text(),'Rate')]")
	private static WebElement  povoucherBodyRateName;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_control_heading_7']/div[1]")
	private static WebElement  voucherBodyRateName;
	
	@FindBy(xpath="//div[contains(text(),'Gross')]")
	private static WebElement voucherBodyGrossName;
	
	@FindBy(xpath="//div[contains(text(),'Batch')]")
	private static WebElement voucherBodyBatchName;
	
	@FindBy(xpath="//div[contains(text(),'Bins')]")
	private static WebElement voucherBodyBinsName;
	
	@FindBy(xpath="//div[contains(text(),'Expiry Date')]")
	private static WebElement voucherBodyExpirytDateName;
	
	@FindBy(xpath="//div[contains(text(),'RMA')]")
	private static WebElement voucherBodyRMAName;
	
	@FindBy(xpath="//tbody[@id='id_transaction_entry_detail_table_body']")
	private static WebElement voucherBody;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_head']")
	private static WebElement bodyTable;
	
	
	
	public boolean checkStockTransferNewEntryPageBodyFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherBodyItemName));
		
		// Actual
		boolean actvoucherBodyWareHouse2Name       		=voucherBodyWareHouse2Name.isDisplayed();
		boolean actvoucherBodyItemName            		=voucherBodyItemName.isDisplayed();
		boolean actvoucherBodyUnitsName           		=voucherBodyUnitsName.isDisplayed();
		boolean actvoucherBodyLExcessinStocksName   	=voucherBodyLExcessinStocksName.isDisplayed();
		
		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("arguments[0].scrollIntoView();", voucherBodyRMAName);
		

		// Actual
		boolean actstockTransfervoucherBodyRateName		=stockTransfervoucherBodyRateName.isDisplayed();
		boolean actstockTransfervoucherBodyGrossName	=stockTransfervoucherBodyGrossName.isDisplayed();
		boolean actvoucherBodyBatchName       		  	=voucherBodyBatchName.isDisplayed();
		boolean actstockTransfervoucherBodyBinsName   	=stockTransfervoucherBodyBinsName.isDisplayed();
		boolean actvoucherBodyBins2Name 				=voucherBodyBins2Name.isDisplayed();
		boolean actvoucherBodyRMAName         			=voucherBodyRMAName.isDisplayed();
		
		
		// Expected
		boolean expvoucherBodyWareHouse2Name       		=true;
		boolean expvoucherBodyItemName            		=true;
		boolean expvoucherBodyUnitsName           		=true;
		boolean expvoucherBodyLExcessinStocksName   	=true;
		boolean expstockTransfervoucherBodyRateName   	=true;
		boolean expstockTransfervoucherBodyGrossName	=true;
		boolean expvoucherBodyBatchName       		  	=true;
		boolean expstockTransfervoucherBodyBinsName   	=true;
		boolean expvoucherBodyBins2Name 				=true;
		boolean expvoucherBodyRMAName         			=true;
		
		System.out.println("************************************* checkStockTransferNewEntryPageBodyFields  ********************************************");
		
		System.out.println("voucherBodyWareHouse2Name     	           	:"+actvoucherBodyWareHouse2Name					+"  Value Expected : "+expvoucherBodyWareHouse2Name  );
		System.out.println("voucherBodyItemName     	           		:"+actvoucherBodyItemName						+"  Value Expected : "+expvoucherBodyItemName  );
		System.out.println("voucherBodyUnitsName      	           		:"+actvoucherBodyUnitsName						+"  Value Expected : "+expvoucherBodyUnitsName  );
		System.out.println("voucherBodyLExcessinStocksName     	     	:"+actvoucherBodyLExcessinStocksName			+"  Value Expected : "+expvoucherBodyLExcessinStocksName  );
		System.out.println("stockTransfervoucherBodyRateName         	:"+actstockTransfervoucherBodyRateName			+"  Value Expected : "+expstockTransfervoucherBodyRateName  );
		System.out.println("stockTransfervoucherBodyGrossName     	  	:"+actstockTransfervoucherBodyGrossName			+"  Value Expected : "+expstockTransfervoucherBodyGrossName  );
		System.out.println("voucherBodyBatchName     	          	 	:"+actvoucherBodyBatchName						+"  Value Expected : "+expvoucherBodyBatchName  );
		System.out.println("stockTransfervoucherBodyBinsName     	    :"+actstockTransfervoucherBodyBinsName			+"  Value Expected : "+expstockTransfervoucherBodyBinsName  );
		System.out.println("voucherBodyBins2Name     	           		:"+actvoucherBodyBins2Name						+"  Value Expected : "+expvoucherBodyBins2Name  );
		System.out.println("voucherBodyRMAName     	           			:"+actvoucherBodyRMAName						+"  Value Expected : "+expvoucherBodyRMAName  );
	
		
		
		boolean result=actvoucherBodyWareHouse2Name==expvoucherBodyWareHouse2Name && actvoucherBodyItemName==expvoucherBodyItemName
				 && actvoucherBodyUnitsName==expvoucherBodyUnitsName && actvoucherBodyLExcessinStocksName==expvoucherBodyLExcessinStocksName
				 && actstockTransfervoucherBodyRateName==expstockTransfervoucherBodyRateName && actstockTransfervoucherBodyGrossName==expstockTransfervoucherBodyGrossName
				 && actvoucherBodyBatchName==expvoucherBodyBatchName && actstockTransfervoucherBodyBinsName==expstockTransfervoucherBodyBinsName
				 && actvoucherBodyBins2Name==expvoucherBodyBins2Name && actvoucherBodyRMAName==expvoucherBodyRMAName;
		

		
		String actDisplay=Boolean.toString(result);
    	String expDisplay=excelReader.getCellData(xlSheetName, 23, 7);
    	
    	excelReader.setCellData(xlfile, xlSheetName, 23, 8, actDisplay);
		
		 if (actDisplay.equalsIgnoreCase(expDisplay))
		 {		
				System.out.println(" Test Pass: Displayed Entry page Body Fileds ");
				
				js.executeScript("arguments[0].scrollIntoView();", voucherBodyHeaderIndex);
				
				excelReader.setCellData(xlfile, xlSheetName, 24, 9, resPass);
				return true;
		 }
	     else
		 {
			System.out.println(" Test Fail:  Not Displayed Entry page Body Fileds ");
			excelReader.setCellData(xlfile, xlSheetName, 24, 9, resFail);
            return false;
		 }
	 }
		
	
	

	
	public boolean checkStockTransferEntryPageFooterFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jumpToFooterBtn));
		jumpToFooterBtn.click();
		
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(netLabel));
		
		boolean actEntryPageFooterFieldsNetLabel  =netLabel.isDisplayed();
		boolean actEntryPageFooterFieldsNetAmount =netAmount.isDisplayed();

		boolean expEntryPageFooterFieldsNetLabel  =true;
		boolean expEntryPageFooterFieldsNetAmount =true;

		System.out.println("***************************************** checkStockTransferEntryPageFooterFields  ***************************************************");
		
		System.out.println("Entry Page Footer Fields Net Label Value Actual  : "+actEntryPageFooterFieldsNetLabel+   " Value Expected : "+expEntryPageFooterFieldsNetLabel);
		System.out.println("Entry Page Footer Fields Net Amount Value Actual : "+actEntryPageFooterFieldsNetAmount+  " Value Expected : "+expEntryPageFooterFieldsNetAmount);

		boolean result=actEntryPageFooterFieldsNetLabel==expEntryPageFooterFieldsNetLabel &&
				actEntryPageFooterFieldsNetAmount==expEntryPageFooterFieldsNetAmount;

		
		String actDisplay=Boolean.toString(result);
    	String expDisplay=excelReader.getCellData(xlSheetName, 25, 7);
    	
    	excelReader.setCellData(xlfile, xlSheetName, 25, 8, actDisplay);
		
		if(actDisplay.equalsIgnoreCase(expDisplay))
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 24, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 24, 9, resFail);
			return false;
		}
	}
	
	

	
	public boolean checkStockTransferVoucherEntryPageInfoSideBarCustomizeBtn() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoSideBarCustomizeBtn));
		
		infoSideBarCustomizeBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeSearchTxt));

		boolean actInfoCustomizationSearchTxt        =customizeSearchTxt.isDisplayed();
		boolean actInfoCustomizationSearchBtn        =customizeSearchBtn.isDisplayed();
		boolean actInfoCustomizationCloseBtn         =customizeCloseBtn.isDisplayed();
		boolean actInfoCustomizationSaveBtn          =customizeSaveBtn.isDisplayed();
		boolean actInfoCustomizationCancelBtn        =customizeCancelBtn.isDisplayed();
		boolean actInfoCustomizationGraphBtn         =graphBtn.isDisplayed();
		boolean actInfoCustomizationReportBtn        =reportBtn.isDisplayed();
		boolean actInfoCustomizationInfopanelBtn     =infoPanelBtn.isDisplayed();
		boolean actInfoCustomizationWorkFlowBtn      =workFlowBtn.isDisplayed();
		boolean actInfoCustomizationOtherDashletsBtn =otherDashlets.isDisplayed();

		boolean expInfoCustomizationSearchTxt        =true;
		boolean expInfoCustomizationSearchBtn        =true;
		boolean expInfoCustomizationCloseBtn         =true;
		boolean expInfoCustomizationSaveBtn          =true;
		boolean expInfoCustomizationCancelBtn        =true;
		boolean expInfoCustomizationGraphBtn         =true;
		boolean expInfoCustomizationReportBtn        =true;
		boolean expInfoCustomizationInfopanelBtn     =true;
		boolean expInfoCustomizationWorkFlowBtn      =true;
		boolean expInfoCustomizationOtherDashletsBtn =true;

		
		System.out.println("***************************************** checkStockTransferVoucherEntryPageInfoSideBarCustomizeBtn  ***************************************************");
		
		System.out.println("Entry Page Info Panel Search Txt Value Actual : "+actInfoCustomizationSearchTxt        +" Value Expected : "+expInfoCustomizationSearchTxt);
		System.out.println("Entry Page Info Panel Search Btn Value Actual : "+actInfoCustomizationSearchBtn        +" Value Expected : "+expInfoCustomizationSearchBtn);
		System.out.println("Entry Page Info Panel Close Btn Value Actual  : "+actInfoCustomizationCloseBtn         +" Value Expected : "+expInfoCustomizationCloseBtn);
		System.out.println("Entry Page Info Panel Save Btn Value Actual   : "+actInfoCustomizationSaveBtn          +" Value Expected : "+expInfoCustomizationSaveBtn);
		System.out.println("Entry Page Info Panel Cancel Value Actual     : "+actInfoCustomizationCancelBtn        +" Value Expected : "+expInfoCustomizationCancelBtn);
		System.out.println("Entry Page Info Panel Graph Value Actual      : "+actInfoCustomizationGraphBtn         +" Value Expected : "+expInfoCustomizationGraphBtn);
		System.out.println("Entry Page Info Panel Report Value Actual     : "+actInfoCustomizationReportBtn        +" Value Expected : "+expInfoCustomizationReportBtn);
		System.out.println("Entry Page Info Panel Value Actual            : "+actInfoCustomizationInfopanelBtn     +" Value Expected : "+expInfoCustomizationInfopanelBtn);
		System.out.println("Entry Page Info Panel WorkFlow Btn Actual     : "+actInfoCustomizationWorkFlowBtn      +" Value Expected : "+expInfoCustomizationWorkFlowBtn);
		System.out.println("Entry Page Info Panel Dashlet Btn Actual      : "+actInfoCustomizationOtherDashletsBtn +" Value Expected : "+expInfoCustomizationOtherDashletsBtn);
		
		
		
		boolean result=actInfoCustomizationSearchTxt==expInfoCustomizationSearchTxt && actInfoCustomizationSearchBtn==expInfoCustomizationSearchBtn && actInfoCustomizationCloseBtn==expInfoCustomizationCloseBtn 
				&& actInfoCustomizationSaveBtn==expInfoCustomizationSaveBtn && actInfoCustomizationGraphBtn==expInfoCustomizationGraphBtn
				&& actInfoCustomizationReportBtn==expInfoCustomizationReportBtn && actInfoCustomizationInfopanelBtn==expInfoCustomizationInfopanelBtn  
				&& actInfoCustomizationWorkFlowBtn==expInfoCustomizationWorkFlowBtn && actInfoCustomizationOtherDashletsBtn==expInfoCustomizationOtherDashletsBtn;
		
		

		
		String actDisplay=Boolean.toString(result);
    	String expDisplay=excelReader.getCellData(xlSheetName, 27, 7);
    	
    	excelReader.setCellData(xlfile, xlSheetName, 27, 8, actDisplay);
		
		if(actDisplay.equalsIgnoreCase(expDisplay))
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 26, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 26, 9, resFail);
			return false;
		}
	}

	
	
	public boolean checkStockTransferVoucherEntryPageInfoSideBarGraphOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(graphBtn));
		
		graphBtn.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newGraphOption));
		
		boolean   NewGraphOption     =newGraphOption.isDisplayed();
		
		
		String actNewGraphOption        =Boolean.toString(NewGraphOption);
		String expNewGraphOption       =excelReader.getCellData(xlSheetName, 29, 7);
    	
    	excelReader.setCellData(xlfile, xlSheetName, 29, 8, actNewGraphOption);
		
		
		
		
		System.out.println("***************************************** checkStockTransferVoucherEntryPageInfoSideBarGraphOption  *****************************************");
		System.out.println("Entry Page Open Info Side Graph Value Actual  : "+actNewGraphOption               +" Value Expected : "+expNewGraphOption);
		
		if(actNewGraphOption.equalsIgnoreCase(expNewGraphOption))
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 28, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 28, 9, resFail);
			return false;
		}
	}
	
	
	public boolean checkStockTransferVoucherEntryPageInfoSideBarReportOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reportBtn));
		
		reportBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newReportOption));
		
		boolean NewReportOption       =newReportOption.isDisplayed();
		
		
		String actNewReportOption      =Boolean.toString(NewReportOption);
		String expNewReportOption       =excelReader.getCellData(xlSheetName, 31, 7);
    	
    	excelReader.setCellData(xlfile, xlSheetName, 31, 8, actNewReportOption);
		
		System.out.println("***************************************** checkStockTransferVoucherEntryPageInfoSideBarReportOption  *****************************************");
		System.out.println("Entry Page Open Info Side Report Value Actual  : "+actNewReportOption               +" Value Expected : "+expNewReportOption);
		
		
		if(actNewReportOption.equalsIgnoreCase(expNewReportOption))
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 30, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 30, 9, resFail);
			return false;
		}
	}


	
	public boolean checkStockTransferVoucherEntryPageInfoSideBarInfoPanelOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoPanelBtn));
		
		infoPanelBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newInfoPanelOption));
		
		boolean NewInfoPanelOption       =newInfoPanelOption.isDisplayed();
		
		String actNewInfoPanelOption      =Boolean.toString(NewInfoPanelOption);
		String expNewInfoPanelOption       =excelReader.getCellData(xlSheetName, 33, 7);
    	
    	excelReader.setCellData(xlfile, xlSheetName, 33, 8, actNewInfoPanelOption);
		
	
		System.out.println("***************************************** checkStockTransferVoucherEntryPageInfoSideBarInfoPanelOption  *****************************************");
		System.out.println("Entry Page Open Info Side Info Panel Value Actual  : "+actNewInfoPanelOption               +" Value Expected : "+expNewInfoPanelOption);
		
		
		
		if(actNewInfoPanelOption.equalsIgnoreCase(expNewInfoPanelOption))
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 32, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 32, 9, resFail);
			return false;
		}
	}

	
	
	public boolean checkStockTransferVoucherEntryPageInfoSideBarWorkFlowOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowBtn));
		
		workFlowBtn.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newWorkFlowOption));
		
		boolean NewWorkFlowOption       =newWorkFlowOption.isDisplayed();
		
		String actNewWorkFlowOption        =Boolean.toString(NewWorkFlowOption);
		String expNewWorkFlowOption       =excelReader.getCellData(xlSheetName, 35, 7);
    	
    	excelReader.setCellData(xlfile, xlSheetName, 35, 8, actNewWorkFlowOption);
		
	
		System.out.println("***************************************** checkStockTransferVoucherEntryPageInfoSideBarWorkFlowOption  *****************************************");
		System.out.println("Entry Page Open Info Side Workflow Value Actual  : "+actNewWorkFlowOption               +" Value Expected : "+expNewWorkFlowOption);
		
		
		if(actNewWorkFlowOption.equalsIgnoreCase(expNewWorkFlowOption))
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 34, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 34, 9, resFail);
			return false;
		}
	}
	
	
	
	public boolean checkStockTransferVoucherEntryPageInfoSideBarOtherDashletsOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(otherDashlets));
		
		otherDashlets.click();
				
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentInfo));
		
		boolean SearchDocumentInfo       =documentInfo.isDisplayed();
		
		String actSearchDocumentInfo        =Boolean.toString(SearchDocumentInfo);
		String expSearchDocumentInfo       =excelReader.getCellData(xlSheetName, 37, 7);
    	
    	excelReader.setCellData(xlfile, xlSheetName, 37, 8, actSearchDocumentInfo);
		
	
		System.out.println("***************************************** checkStockTransferVoucherEntryPageInfoSideBarOtherDashletsOption  *****************************************");
		System.out.println("Entry Page Open Info Side Search Info Value Actual  : "+actSearchDocumentInfo               +" Value Expected : "+expSearchDocumentInfo);

		
		if(actSearchDocumentInfo.equalsIgnoreCase(expSearchDocumentInfo))
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 36, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 36, 9, resFail);
			return false;
		}
	}

	
	@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//label[contains(@class,'theme_icon-color')][contains(text(),'Document Info')]")
	private static WebElement  stockTransferSearchDocumentInfo;
	
	@FindBy(xpath="//ul[@id='searchedLiTrans']//label[contains(@class,'theme_icon-color')][contains(text(),'Document Info')]")
	private static WebElement  searchDocumentInfo;
	
	@FindBy(xpath="//div[@id='dashlate0']")
	private static WebElement  addCreateDashlet;
	
	@FindBy(xpath="//div[@id='DBdashlate0']")
	private static WebElement  dashletI;
	
	@FindBy(xpath="//input[@id='id_footer_134217745']")
	private static WebElement  footerRDField;
		
	public boolean checkStockTransferVoucherEntryPageInfoSideBarSearch() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeSearchTxt));
		
		customizeSearchTxt.click();
		
		
	    customizeSearchTxt.sendKeys(excelReader.getCellData(xlSheetName, 39, 6));
	 
	
	    customizeSearchTxt.sendKeys(Keys.TAB);
	 
	    
	   
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchDocumentInfo));
		
		boolean SearchDocumentInfo       =searchDocumentInfo.isDisplayed();
		
		String actSearchDocumentInfo        =Boolean.toString(SearchDocumentInfo);
		String expSearchDocumentInfo       =excelReader.getCellData(xlSheetName, 40, 7);
    	
    	excelReader.setCellData(xlfile, xlSheetName, 40, 8, actSearchDocumentInfo);
		
	
		System.out.println("***************************************** checkStockTransferVoucherEntryPageInfoSideBarSearch  *****************************************");
		System.out.println("Entry Page Open Info Side Search Info Value Actual  : "+actSearchDocumentInfo               +" Value Expected : "+expSearchDocumentInfo);

		
		if(actSearchDocumentInfo.equalsIgnoreCase(expSearchDocumentInfo))
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 38, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 38, 9, resFail);
			return false;
		}
	}
	





	
	public boolean checkStockTransferVoucherSaveInfoPanelDashlet() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		
		Thread.sleep(3000);
			
		Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\infoPanels.exe");
				
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeSaveBtn));
		
		customizeSaveBtn.click();
			
		String expSaveInfoPanelMessage      =excelReader.getCellData(xlSheetName, 43, 7);
		
		String dashBoardSaving=checkValidationMessage(expSaveInfoPanelMessage);
		
		
		excelReader.setCellData(xlfile, xlSheetName, 43, 8, dashBoardSaving);
		
		System.out.println("***************************************** checkStockTransferVoucherSaveInfoPanelDashlet  *****************************************");
		
		System.out.println("Entry Page Open Info Side New Save Value Actual  : "+dashBoardSaving+" Value Expected : "+expSaveInfoPanelMessage);	
		
		if(dashBoardSaving.equalsIgnoreCase(expSaveInfoPanelMessage))
		{
			System.out.println("Test Pass : Error Message Is As Expected");
			
			excelReader.setCellData(xlfile, xlSheetName, 42, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Error Message Is NOT As Expected");
			
			excelReader.setCellData(xlfile, xlSheetName, 42, 9, resFail);
			return false;
		}	
	}


	
	
	public boolean checkStockTransferSaveWithoutMandatoryFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
			
		
        String expMessage      =excelReader.getCellData(xlSheetName, 45, 7);
		
		String actMessage=checkValidationMessage(expMessage);
		
		
		excelReader.setCellData(xlfile, xlSheetName, 45, 7, actMessage);
		
		
		System.out.println("************************************************ checkStockTransferSaveWithoutMandatoryFields  *******************************************************");
		System.out.println("Entry Page voucher Mandatory Validation Value Actual  : "+actMessage+"  Value Expected : "+expMessage);
	
		
		if(actMessage.equalsIgnoreCase(expMessage))
		{
			excelReader.setCellData(xlfile, xlSheetName, 44, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 44, 9, resFail);
			return false;
		}
	}
	
	
	public boolean checkStockTransferVoucherDateLessThanAccountingDate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();
		documentNumberTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.sendKeys(Keys.ARROW_LEFT,Keys.END);
		Thread.sleep(2000);
		dateTxt.sendKeys(Keys.BACK_SPACE);
		dateTxt.sendKeys(Keys.BACK_SPACE);
		
        String expMessage      =excelReader.getCellData(xlSheetName, 47, 7);
		
		String actMessage=checkValidationMessage(expMessage);
		
		
		excelReader.setCellData(xlfile, xlSheetName, 47, 8, actMessage);
		
		System.out.println("************************************************ checkStockTransferVoucherDateLessThanAccountingDate  *******************************************************");
		System.out.println("ErrorMessage  : "+actMessage+"  Value Expected : "+expMessage);
		
		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 46, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 46, 9, resFail);
			return false;
		}	
	}
		
	
	
		
	
	@FindBy(xpath="//tbody[@id='id_header_86_table_body']/tr/td[2]")
    private static List<WebElement> wareHouseHeaderListCount;
	
	public boolean checkStockTransferVoucherHeaderWarehouseOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    {
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransferheaderWarehouse1Txt));
		stockTransferheaderWarehouse1Txt.click();
		stockTransferheaderWarehouse1Txt.sendKeys(Keys.SPACE);
            
        ArrayList<String>  actWarehouseList= new ArrayList<String>(); 
            
        actWarehouseList.add("HYDERABAD");
                
        actWarehouseList.add("MUMBAI");
                
        actWarehouseList.add("SECUNDERABAD");
                
        actWarehouseList.add("STWH");
        
        actWarehouseList.add("WH1");
               
        ArrayList<String> expWarehouseList = new ArrayList<String>(); 

        int count=wareHouseHeaderListCount.size();
		
		System.err.println(count);
		
		for(int i=0 ; i < count ;i++)
		{
			String data=wareHouseHeaderListCount.get(i).getText();
			System.err.println("IN FOR LOOP : "+data);
			expWarehouseList.add(data);
			
		}
		
		System.err.println(expWarehouseList);
		
		
		System.out.println("actWarehouseList"+actWarehouseList);
		
		System.out.println("expWarehouseList"+expWarehouseList);
		
		
		
		String actDisplay=actWarehouseList.toString();
		
		String expDisplay=expWarehouseList.toString();
		
		
		excelReader.setCellData(xlfile, xlSheetName, 49, 8, actDisplay);
		
		
		System.out.println("************************************* checkStockTransferVoucherHeaderWarehouseOptions  ********************************************");
		
		System.out.println("Entry Page Warehouse Masters Value Actual  : "+actWarehouseList	+"  Value Expected : "+expWarehouseList);
		System.out.println("Entry Page Warehouse Masters Value Actual  : "+actDisplay	+"  Value Expected : "+expDisplay);
		
	    if(expDisplay.equalsIgnoreCase(expDisplay))
		{
			
	    	excelReader.setCellData(xlfile, xlSheetName, 48, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 48, 9, resFail);
			return false;
		}
    }
		
	

	public boolean checkStockTransferVoucherSavingWithEmptyRows() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    {
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
        String expSaveValidationMessageOnSaveWithoutBodyRows      =excelReader.getCellData(xlSheetName, 51, 7);
		
		String validationMessage=checkValidationMessage(expSaveValidationMessageOnSaveWithoutBodyRows);
		
		
		excelReader.setCellData(xlfile, xlSheetName, 51, 8, validationMessage);
		
		

		System.out.println("**************************** checkStockTransferVoucherSavingWithEmptyRows  ************************************");
		
		System.out.println("Entry Page Save with Vendor Input Value Actual  : "+validationMessage+" Value Expected : "+expSaveValidationMessageOnSaveWithoutBodyRows);	
		
		
		if (validationMessage.equalsIgnoreCase(expSaveValidationMessageOnSaveWithoutBodyRows))
		{
			excelReader.setCellData(xlfile, xlSheetName, 50, 9, resPass);
			
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 50, 9, resFail);
			return false;
		}
	}
		
	
	
	@FindBy(xpath="//tbody[@id='id_body_87_table_body']/tr/td[2]")
    private static List<WebElement> wareHouseBodyListCount;
		
	public boolean checkStockTransferVoucherBodyWarehouse2OptionsAndInputHeaderAndBodyWithSameWarehouse() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{	
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		
		enter_BodyWarehouse2Txt.sendKeys(Keys.SPACE);
            
		ArrayList<String>  actWarehouseList= new ArrayList<String>(); 
         
		actWarehouseList.add("HYDERABAD");
		
		actWarehouseList.add("MUMBAI");
		
		actWarehouseList.add("SECUNDERABAD");
		
		actWarehouseList.add("STWH");
		
		actWarehouseList.add("WH1");
		
		ArrayList<String>expWarehouseList = new ArrayList<String>(); 
		
		int count=wareHouseBodyListCount.size();
		
		System.err.println(count);
		
		for(int i=0 ; i < count ;i++)
		{
			String data=wareHouseBodyListCount.get(i).getText();
			System.err.println("IN FOR LOOP : "+data);
			expWarehouseList.add(data);
			
		}
		
		System.err.println(expWarehouseList);
		
		
		System.out.println("actWarehouseList"+actWarehouseList);
		
		System.out.println("expWarehouseList"+expWarehouseList);
		
		
		
		String actDisplay=actWarehouseList.toString();
		String expDisplay=expWarehouseList.toString();
		
		excelReader.setCellData(xlfile, xlSheetName, 52, 8, actDisplay);
		
		System.out.println("************************************* checkStockTransferVoucherBodyWarehouse2OptionsAndInputHeaderAndBodyWithSameWarehouse  ********************************************");
		
		System.out.println("Entry Page Warehouse Masters Value Actual  : "+actWarehouseList	+"  Value Expected : "+expWarehouseList);
		System.out.println("Entry Page Warehouse Masters Value Actual  : "+actDisplay	+"  Value Expected : "+expDisplay);
		
		
		enter_BodyWarehouse2Txt.sendKeys(Keys.TAB);
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_BodyWarehouse2Txt));
		enter_BodyWarehouse2Txt.sendKeys(Keys.END);
		enter_BodyWarehouse2Txt.sendKeys(Keys.SHIFT,Keys.HOME);
		Thread.sleep(2000);
		Thread.sleep(2000);
		enter_BodyWarehouse2Txt.sendKeys(Keys.SPACE);
			
		int warehousecount1=wareHouseBodyListCount.size();
		
		System.err.println(warehousecount1);
			
		for(int i=0 ; i < warehousecount1 ;i++)
		{
			String data=wareHouseBodyListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 53, 6)))
			{
				wareHouseBodyListCount.get(i).click();
				
				break;
			}
		}
			
		enter_BodyWarehouse2Txt.sendKeys(Keys.TAB);
		
		
		
		String expErrorMessage      =excelReader.getCellData(xlSheetName, 53, 7);
			
		String validationMessage=checkValidationMessage(expErrorMessage);
			
		excelReader.setCellData(xlfile, xlSheetName, 53, 8, validationMessage);
			
		
		
		
	    if(actDisplay.equalsIgnoreCase(expDisplay) && validationMessage.equalsIgnoreCase(expErrorMessage))
		{
	    	excelReader.setCellData(xlfile, xlSheetName, 52, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 52, 9, resFail);
			return false;
		}
	}
	
	@FindBy(xpath="//tbody[@id='id_body_23_table_body']/tr/td[2]")
    private static List<WebElement> itemListCount;
	
	public boolean checkStockTransferVoucherBodyItemOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_2ndColumn));
		select1stRow_2ndColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		
		int count										  = itemListCount.size();
		
		ArrayList<String> actList  = new ArrayList<String>();
		
		for (int i = 0; i < count; i++) 
		{
			String data		                              = itemListCount.get(i).getText();
			actList.add(data);
		}
		
		String actitemListCount					  = actList.toString();
		String expitemListCount					  = excelReader.getCellData(xlSheetName, 55, 7);
		
		
		excelReader.setCellData(xlfile, xlSheetName, 55, 7, expitemListCount);
		
		excelReader.setCellData(xlfile, xlSheetName, 55, 8, actitemListCount);
		
		
		Thread.sleep(2000);
		
		enter_ItemTxt.sendKeys(Keys.TAB);
		
		System.out.println("********************************************* checkStockTransferVoucherBodyItemOptions  *************************************************");
		
		
		System.out.println("Entry Page Item Masters Value Actual  : "+actitemListCount     +"  Value Expected : "+expitemListCount);
		
		if(actitemListCount.equalsIgnoreCase(expitemListCount))
		{
			System.out.println("Test Pass : Item Values Displayed ");
			excelReader.setCellData(xlfile, xlSheetName, 54, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Item Values Are not Displayed ");
			excelReader.setCellData(xlfile, xlSheetName, 54, 9, resFail);
			return false;
		}
	}
	
	
	public boolean checkStockTransferVoucherSelectingHYDInHeaderWarehouseandSTWHWarehouseFromBodyWarehouse() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    {
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
    	inventoryMenu.click();
			
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
    	inventoryTransactionsMenu.click();
			
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsStocksMenu));
    	inventoryTransactionsStocksMenu.click();
    	
    	Thread.sleep(3000);

    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransfersVoucher));
    	stockTransfersVoucher.click();
    	
    	Thread.sleep(3000);

    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		checkUserFriendlyMessage();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransferheaderWarehouse1Txt));
		stockTransferheaderWarehouse1Txt.click();
		stockTransferheaderWarehouse1Txt.sendKeys(Keys.END);
		stockTransferheaderWarehouse1Txt.sendKeys(Keys.SHIFT,Keys.HOME);
		Thread.sleep(2000);
		stockTransferheaderWarehouse1Txt.sendKeys(Keys.SPACE);
			
		int warehousecount=wareHouseHeaderListCount.size();
		
		System.err.println(warehousecount);
			
		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=wareHouseHeaderListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 57, 6)))
			{
				wareHouseHeaderListCount.get(i).click();
				
				break;
			}
		}
			
		stockTransferheaderWarehouse1Txt.sendKeys(Keys.TAB);
    
        String actWarehouseValue=stockTransferheaderWarehouse1Txt.getAttribute("value");
        String expWarehouseValue=excelReader.getCellData(xlSheetName, 57, 7);
    	
    	excelReader.setCellData(xlfile, xlSheetName, 57, 8, actWarehouseValue);
		
		System.out.println("************************************* checkStockTransferVoucherSelectingMumbaiInHeaderWarehouse  ********************************************");
		
		System.out.println("Entry Page Warehouse Masters Value Actual  : "+actWarehouseValue	+"  Value Expected : "+expWarehouseValue);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_BodyWarehouse2Txt));
		enter_BodyWarehouse2Txt.sendKeys(Keys.END);
		enter_BodyWarehouse2Txt.sendKeys(Keys.SHIFT,Keys.HOME);
		Thread.sleep(2000);
		Thread.sleep(2000);
		enter_BodyWarehouse2Txt.sendKeys(Keys.SPACE);
			
		int warehousecount1=wareHouseBodyListCount.size();
		
		System.err.println(warehousecount1);
			
		for(int i=0 ; i < warehousecount1 ;i++)
		{
			String data=wareHouseBodyListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 58, 6)))
			{
				wareHouseBodyListCount.get(i).click();
				
				break;
			}
		}
			
		enter_BodyWarehouse2Txt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		Thread.sleep(2000);
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getText();
			System.err.println(data);
			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 59, 6)))
			{
				Thread.sleep(2000);
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);		
    
		
		Thread.sleep(2000);
		
        String actBodyWarehouseValue=select1stRow_1stColumn.getText();
        String expBodyWarehouseValue=excelReader.getCellData(xlSheetName, 58, 7);
    	
    	excelReader.setCellData(xlfile, xlSheetName, 58, 8, actBodyWarehouseValue);
		
    	
    	String actBodyItemValue=select1stRow_2ndColumn.getText();
        String expBodyItemValue=excelReader.getCellData(xlSheetName, 59, 7);
     	
     	excelReader.setCellData(xlfile, xlSheetName, 59, 8, actBodyItemValue);
 		
    	
		System.out.println("Entry Page Warehouse Masters Value Actual  : "+actWarehouseValue	+"  Value Expected : "+expWarehouseValue);
		System.out.println("Entry Page item Masters Value Actual       : "+actBodyItemValue	    +"  Value Expected : "+expBodyItemValue);
		
	    if(actWarehouseValue.equalsIgnoreCase(expWarehouseValue) && actBodyWarehouseValue.equalsIgnoreCase(expBodyWarehouseValue)
	    		&& actBodyItemValue.equalsIgnoreCase(expBodyItemValue))
		{
	    	excelReader.setCellData(xlfile, xlSheetName, 56, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 56, 9, resFail);
			return false;
		}
    }
	
	
	
	public boolean checkSavingStockTransferWithStockItem() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    {
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_4thColumn));
		select1stRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 61, 6));
		enter_Quantity.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 62, 6));
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
            
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_footerExpandBtn));
		new_footerExpandBtn.click();
		
		// Actual
		
		String actdocumentNumberTxt			=documentNumberTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		boolean savingMessage=checkVoucherSavingMessage(actdocumentNumberTxt);
		
		
		String actSavingStatus=Boolean.toString(savingMessage);
		String expSavingMessageStatus=excelReader.getCellData(xlSheetName, 63, 7);
    	
    	excelReader.setCellData(xlfile, xlSheetName, 63, 8, actSavingStatus);
		
		System.out.println("SavingMessage  :  "+actSavingStatus +" Value Expected : "+expSavingMessageStatus);
        
		System.out.println("************************************* checkSavingStockTransferWithStockItem  ********************************************");
		
		
		
		
	    if(savingMessage==true)
		{
	    	excelReader.setCellData(xlfile, xlSheetName, 60, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 60, 9, resFail);
			return false;
		}
    }
	
	
	
	

	public boolean checkSavedStockTransferVoucherOnPreviousOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    {
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();
		
		
		boolean loading=checkLoadingMessage();
		
		System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();
		
		
	
    
		// Actual
		
		String actdocumentNumberTxt			=documentNumberTxt.getAttribute("value");
		String actdateTxt					=dateTxt.getAttribute("value");
		String actHeaderWarehouseValue		=stockTransferheaderWarehouse1Txt.getAttribute("value");
		
        String actBodyWarehouseValue		=select1stRow_1stColumn.getText();
        String actBodyItemValue				=select1stRow_2ndColumn.getText();
        String actBodyUnitsValue			=select1stRow_3rdColumn.getText();
        String actBodyQtyValue				=select1stRow_4thColumn.getText();
        boolean actBodyLExcessInStocksValue	=select1stRow_5thColumn.getText().isEmpty();
        String actBodyRateValue				=select1stRow_6thColumn.getText();
        String actBodyGrossValue			=select1stRow_7thColumn.getText();
        boolean actBodyBatchValue			=select1stRow_8thColumn.getText().isEmpty();
        boolean actBodyBinsValue			=select1stRow_9thColumn.getText().isEmpty();
        boolean actBodyBins2Value			=select1stRow_10thColumn.getText().isEmpty();
        boolean actBodyRmaValue				=select1stRow_11thColumn.getText().isEmpty();
        
        String actQtyAmount					=QtyAmount.getText();
        String actGrossAmount				=GrossAmount.getText();
        String actnetAmount					=netAmount.getText();
        
        
        DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Date date=new Date();
		System.out.println(df.format(date));
		
		
        // Expected
		
		
        String expdocumentNumberTxt			=excelReader.getCellData(xlSheetName, 65, 7);
		String expdateTxt					=df.format(date);
		String expHeaderWarehouseValue		=excelReader.getCellData(xlSheetName, 66, 7);
		
        String expBodyWarehouseValue		=excelReader.getCellData(xlSheetName, 67, 7);;
        String expBodyItemValue				=excelReader.getCellData(xlSheetName, 68, 7);
        String expBodyUnitsValue			=excelReader.getCellData(xlSheetName, 69, 7);
        String expBodyQtyValue				=excelReader.getCellData(xlSheetName, 70, 7);
        boolean expBodyLExcessInStocksValue	=true;
        String expBodyRateValue				=excelReader.getCellData(xlSheetName, 71, 7);
        String expBodyGrossValue			=excelReader.getCellData(xlSheetName, 72, 7);
        boolean expBodyBatchValue			=true;
        boolean expBodyBinsValue			=true;
        boolean expBodyBins2Value			=true;
        boolean expBodyRmaValue				=true;
        
        String expQtyAmount					=excelReader.getCellData(xlSheetName, 73, 7);
        String expGrossAmount				=excelReader.getCellData(xlSheetName, 74, 7);
        String expnetAmount					=excelReader.getCellData(xlSheetName, 75, 7);
        
        
        excelReader.setCellData(xlfile, xlSheetName, 65, 8, actdocumentNumberTxt);
        excelReader.setCellData(xlfile, xlSheetName, 66, 8, actHeaderWarehouseValue);
        excelReader.setCellData(xlfile, xlSheetName, 67, 8, actBodyWarehouseValue);
        excelReader.setCellData(xlfile, xlSheetName, 68, 8, actBodyItemValue);
        excelReader.setCellData(xlfile, xlSheetName, 69, 8, actBodyUnitsValue);
        excelReader.setCellData(xlfile, xlSheetName, 70, 8, actBodyQtyValue);
        excelReader.setCellData(xlfile, xlSheetName, 71, 8, actBodyRateValue);
        excelReader.setCellData(xlfile, xlSheetName, 72, 8, actBodyGrossValue);
        excelReader.setCellData(xlfile, xlSheetName, 73, 8, actQtyAmount);
        excelReader.setCellData(xlfile, xlSheetName, 74, 8, actGrossAmount);
        excelReader.setCellData(xlfile, xlSheetName, 75, 8, actnetAmount);
        
        
        
        
		System.out.println("************************************* checkSavedStockTransferVoucherOnPreviousOption  ********************************************");
		
		
		System.out.println("documentNumberTxt 			: "+actdocumentNumberTxt		+"  Value Expected : "+expdocumentNumberTxt);
		System.out.println("dateTxt 					: "+actdateTxt					+"  Value Expected : "+expdateTxt);
		System.out.println("HeaderWarehouseValue 		: "+actHeaderWarehouseValue		+"  Value Expected : "+expHeaderWarehouseValue);
		
		System.out.println("BodyWarehouseValue 			: "+actBodyWarehouseValue		+"  Value Expected : "+expBodyWarehouseValue);
		System.out.println("BodyItemValue 				: "+actBodyItemValue			+"  Value Expected : "+expBodyItemValue);
		System.out.println("BodyUnitsValue 				: "+actBodyUnitsValue			+"  Value Expected : "+expBodyUnitsValue);
		System.out.println("BodyQtyValue 				: "+actBodyQtyValue				+"  Value Expected : "+expBodyQtyValue);
		System.out.println("BodyLExcessInStocksValue 	: "+actBodyLExcessInStocksValue	+"  Value Expected : "+expBodyLExcessInStocksValue);
		System.out.println("BodyRateValue 				: "+actBodyRateValue			+"  Value Expected : "+expBodyRateValue);
		System.out.println("BodyGrossValue 				: "+actBodyGrossValue			+"  Value Expected : "+expBodyGrossValue);
		System.out.println("BodyBatchValue 				: "+actBodyBatchValue			+"  Value Expected : "+expBodyBatchValue);
		System.out.println("BodyBinsValue 				: "+actBodyBinsValue			+"  Value Expected : "+expBodyBinsValue);
		System.out.println("BodyBins2Value 				: "+actBodyBins2Value			+"  Value Expected : "+expBodyBins2Value);
		System.out.println("BodyRmaValue 				: "+actBodyRmaValue				+"  Value Expected : "+expBodyRmaValue);
		
		System.out.println("QtyAmount 					: "+actQtyAmount				+"  Value Expected : "+expQtyAmount);
		System.out.println("GrossAmount 				: "+actGrossAmount				+"  Value Expected : "+expGrossAmount);
		System.out.println("netAmount 					: "+actnetAmount				+"  Value Expected : "+expnetAmount);
		
	    if(actdocumentNumberTxt.equalsIgnoreCase(expdocumentNumberTxt) && actdateTxt.equalsIgnoreCase(expdateTxt)
	    		&& actHeaderWarehouseValue.equalsIgnoreCase(expHeaderWarehouseValue)
	    		
	    		&& actBodyWarehouseValue.equalsIgnoreCase(expBodyWarehouseValue) && actBodyItemValue.equalsIgnoreCase(expBodyItemValue)
	    		&& actBodyUnitsValue.equalsIgnoreCase(expBodyUnitsValue) && actBodyQtyValue.equalsIgnoreCase(expBodyQtyValue)
	    		&& actBodyLExcessInStocksValue==expBodyLExcessInStocksValue && actBodyRateValue.equalsIgnoreCase(expBodyRateValue)
	    		&& actBodyGrossValue.equalsIgnoreCase(expBodyGrossValue) && actBodyBatchValue==expBodyBatchValue
	    		&& actBodyBinsValue==expBodyBinsValue && actBodyBins2Value==expBodyBins2Value && actBodyRmaValue==expBodyRmaValue
	    		
	    		&& actQtyAmount.equalsIgnoreCase(expQtyAmount) && actGrossAmount.equalsIgnoreCase(expGrossAmount)
	    		&& actnetAmount.equalsIgnoreCase(expnetAmount))
		{
	    	excelReader.setCellData(xlfile, xlSheetName, 64, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 64, 9, resFail);
			return false;
		}
    }
	
	
	
	
	
	public boolean checkChangingQtyOfStockItemGreaterThanAvailableQty() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    {
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_4thColumn));
		select1stRow_4thColumn.click();
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 77, 6));
		Thread.sleep(1000);
		enter_Quantity.sendKeys(Keys.TAB);
		
        // Expected
		
        String expErrorMessage      =excelReader.getCellData(xlSheetName, 78, 7);
		
		String validationMessage=checkValidationMessage(expErrorMessage);
		
		excelReader.setCellData(xlfile, xlSheetName, 78, 8, validationMessage);
		
		System.out.println("************************************* checkSavingStockTransferWithStockItem  ********************************************");
		
		System.out.println("ErrorMessage 				: "+validationMessage+"  Value Expected : "+expErrorMessage);
		
		
	    if(validationMessage.equalsIgnoreCase(expErrorMessage))
		{
			
	    	excelReader.setCellData(xlfile, xlSheetName, 76, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 76, 9, resFail);
			return false;
		}
    }
	
	
	
	
	
	
	public boolean checkSavingStockTransferWithStockItemWithDecreasingQty() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    {
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_4thColumn));
		select1stRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 81, 6));
		Thread.sleep(2000);
		enter_Quantity.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 82, 6));
		Thread.sleep(2000);
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
            
    
	
		
		String actdocumentNumberTxt			=documentNumberTxt.getAttribute("value");
        
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		boolean savingMessage=checkVoucherSavingMessage(actdocumentNumberTxt);
		
		System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
		
		String actSavingMessage=Boolean.toString(savingMessage);
		String expSavingMessage=excelReader.getCellData(xlSheetName, 83, 7);
    	
    	excelReader.setCellData(xlfile, xlSheetName, 83, 8, actSavingMessage);
		
		
		System.out.println("************************************* checkSavingStockTransferWithStockItemWithDecreasingQty  ********************************************");
		
	
		System.out.println("actSavingMessage   : "+actSavingMessage +" Value Expected : "+expSavingMessage);
		
	    if(savingMessage==true)
		{
	    	excelReader.setCellData(xlfile, xlSheetName, 79, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 79, 9, resFail);
			return false;
		}
    }
	
	
	
	public boolean checkSavedStockTransferVoucherAfterEditingOnPrevious() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    {
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();
		
		boolean loading=checkLoadingMessage();
		
		System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();
		
		Thread.sleep(2000);
		
		// Actual
		
		String actdocumentNumberTxt			=documentNumberTxt.getAttribute("value");
		String actdateTxt					=dateTxt.getAttribute("value");
		String actHeaderWarehouseValue		=stockTransferheaderWarehouse1Txt.getAttribute("value");
		
        String actBodyWarehouseValue		=select1stRow_1stColumn.getText();
        String actBodyItemValue				=select1stRow_2ndColumn.getText();
        String actBodyUnitsValue			=select1stRow_3rdColumn.getText();
        String actBodyQtyValue				=select1stRow_4thColumn.getText();
        boolean actBodyLExcessInStocksValue	=select1stRow_5thColumn.getText().isEmpty();
        String actBodyRateValue				=select1stRow_6thColumn.getText();
        String actBodyGrossValue			=select1stRow_7thColumn.getText();
        boolean actBodyBatchValue			=select1stRow_8thColumn.getText().isEmpty();
        boolean actBodyBinsValue			=select1stRow_9thColumn.getText().isEmpty();
        boolean actBodyBins2Value			=select1stRow_10thColumn.getText().isEmpty();
        boolean actBodyRmaValue				=select1stRow_11thColumn.getText().isEmpty();
        
        String actQtyAmount					=QtyAmount.getText();
        String actGrossAmount				=GrossAmount.getText();
        String actnetAmount					=netAmount.getText();
        
        
        DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Date date=new Date();
		System.out.println(df.format(date));
		
		
        // Expected
		    String expdocumentNumberTxt			=excelReader.getCellData(xlSheetName, 85, 7);
			String expdateTxt					=df.format(date);
			String expHeaderWarehouseValue		=excelReader.getCellData(xlSheetName, 86, 7);
			
	        String expBodyWarehouseValue		=excelReader.getCellData(xlSheetName, 87, 7);;
	        String expBodyItemValue				=excelReader.getCellData(xlSheetName, 88, 7);
	        String expBodyUnitsValue			=excelReader.getCellData(xlSheetName, 89, 7);
	        String expBodyQtyValue				=excelReader.getCellData(xlSheetName, 90, 7);
	        boolean expBodyLExcessInStocksValue	=true;
	        String expBodyRateValue				=excelReader.getCellData(xlSheetName, 91, 7);
	        String expBodyGrossValue			=excelReader.getCellData(xlSheetName, 92, 7);
	        boolean expBodyBatchValue			=true;
	        boolean expBodyBinsValue			=true;
	        boolean expBodyBins2Value			=true;
	        boolean expBodyRmaValue				=true;
	        
	        String expQtyAmount					=excelReader.getCellData(xlSheetName, 93, 7);
	        String expGrossAmount				=excelReader.getCellData(xlSheetName, 94, 7);
	        String expnetAmount					=excelReader.getCellData(xlSheetName, 95, 7);
	        
	        
	        excelReader.setCellData(xlfile, xlSheetName, 85, 8, actdocumentNumberTxt);
	        excelReader.setCellData(xlfile, xlSheetName, 86, 8, actHeaderWarehouseValue);
	        excelReader.setCellData(xlfile, xlSheetName, 87, 8, actBodyWarehouseValue);
	        excelReader.setCellData(xlfile, xlSheetName, 88, 8, actBodyItemValue);
	        excelReader.setCellData(xlfile, xlSheetName, 89, 8, actBodyUnitsValue);
	        excelReader.setCellData(xlfile, xlSheetName, 90, 8, actBodyQtyValue);
	        excelReader.setCellData(xlfile, xlSheetName, 91, 8, actBodyRateValue);
	        excelReader.setCellData(xlfile, xlSheetName, 92, 8, actBodyGrossValue);
	        excelReader.setCellData(xlfile, xlSheetName, 93, 8, actQtyAmount);
	        excelReader.setCellData(xlfile, xlSheetName, 94, 8, actGrossAmount);
	        excelReader.setCellData(xlfile, xlSheetName, 95, 8, actnetAmount);
	        
		System.out.println("************************************* checkSavedStockTransferVoucherAfterEditingOnPrevious  ********************************************");
		
		System.out.println("documentNumberTxt 			: "+actdocumentNumberTxt		+"  Value Expected : "+expdocumentNumberTxt);
		System.out.println("dateTxt 					: "+actdateTxt					+"  Value Expected : "+expdateTxt);
		System.out.println("HeaderWarehouseValue 		: "+actHeaderWarehouseValue		+"  Value Expected : "+expHeaderWarehouseValue);
		
		System.out.println("BodyWarehouseValue 			: "+actBodyWarehouseValue		+"  Value Expected : "+expBodyWarehouseValue);
		System.out.println("BodyItemValue 				: "+actBodyItemValue			+"  Value Expected : "+expBodyItemValue);
		System.out.println("BodyUnitsValue 				: "+actBodyUnitsValue			+"  Value Expected : "+expBodyUnitsValue);
		System.out.println("BodyQtyValue 				: "+actBodyQtyValue				+"  Value Expected : "+expBodyQtyValue);
		System.out.println("BodyLExcessInStocksValue 	: "+actBodyLExcessInStocksValue	+"  Value Expected : "+expBodyLExcessInStocksValue);
		System.out.println("BodyRateValue 				: "+actBodyRateValue			+"  Value Expected : "+expBodyRateValue);
		System.out.println("BodyGrossValue 				: "+actBodyGrossValue			+"  Value Expected : "+expBodyGrossValue);
		System.out.println("BodyBatchValue 				: "+actBodyBatchValue			+"  Value Expected : "+expBodyBatchValue);
		System.out.println("BodyBinsValue 				: "+actBodyBinsValue			+"  Value Expected : "+expBodyBinsValue);
		System.out.println("BodyBins2Value 				: "+actBodyBins2Value			+"  Value Expected : "+expBodyBins2Value);
		System.out.println("BodyRmaValue 				: "+actBodyRmaValue				+"  Value Expected : "+expBodyRmaValue);
		
		System.out.println("QtyAmount 					: "+actQtyAmount				+"  Value Expected : "+expQtyAmount);
		System.out.println("GrossAmount 				: "+actGrossAmount				+"  Value Expected : "+expGrossAmount);
		System.out.println("netAmount 					: "+actnetAmount				+"  Value Expected : "+expnetAmount);
		
	    if(actdocumentNumberTxt.equalsIgnoreCase(expdocumentNumberTxt) && actdateTxt.equalsIgnoreCase(expdateTxt)
	    		&& actHeaderWarehouseValue.equalsIgnoreCase(expHeaderWarehouseValue)
	    		
	    		&& actBodyWarehouseValue.equalsIgnoreCase(expBodyWarehouseValue) && actBodyItemValue.equalsIgnoreCase(expBodyItemValue)
	    		&& actBodyUnitsValue.equalsIgnoreCase(expBodyUnitsValue) && actBodyQtyValue.equalsIgnoreCase(expBodyQtyValue)
	    		&& actBodyLExcessInStocksValue==expBodyLExcessInStocksValue && actBodyRateValue.equalsIgnoreCase(expBodyRateValue)
	    		&& actBodyGrossValue.equalsIgnoreCase(expBodyGrossValue) && actBodyBatchValue==expBodyBatchValue
	    		&& actBodyBinsValue==expBodyBinsValue && actBodyBins2Value==expBodyBins2Value && actBodyRmaValue==expBodyRmaValue
	    		
	    		&& actQtyAmount.equalsIgnoreCase(expQtyAmount) && actGrossAmount.equalsIgnoreCase(expGrossAmount)
	    		&& actnetAmount.equalsIgnoreCase(expnetAmount))
		{
	    	excelReader.setCellData(xlfile, xlSheetName, 84, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 84, 9, resFail);
			return false;
		}
    }
	
	
	
	
	
	public boolean checkSavedVoucherAndEntryPageSuspendOptionAndSuspendStatusInHomePage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    {
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		String actdocumentNumberTxt			=documentNumberTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();
		
		boolean savingMessage=checkVoucherSavingMessage(actdocumentNumberTxt);
		
		System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();
		
		boolean loading1=checkLoadingMessage();
		
		System.out.println("VoucherLoadingMessage  : "+loading1+" Value Expected : "+"TRUE");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoPanelStatus));
		String actinfoPanelStatus			= infoPanelStatus.getText();
		
        // Expected
		
		String expinfoPanelStatus			= excelReader.getCellData(xlSheetName, 97, 7);
    	
    	excelReader.setCellData(xlfile, xlSheetName, 97, 8, actinfoPanelStatus);
		
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_footerMinimizeBtn));
        new_footerMinimizeBtn.click();
        
        Thread.sleep(2000);
        
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
        new_CloseBtn.click();
        
        Thread.sleep(2000);
        
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(suspendStatusRow1));
		String actsuspendStatusRow1			=suspendStatusRow1.getText();
		String expsuspendStatusRow1			=excelReader.getCellData(xlSheetName, 98, 7);
    	
    	excelReader.setCellData(xlfile, xlSheetName, 98, 8, actsuspendStatusRow1);
        
		
		System.out.println("************************************* checkSavedVoucherAndEntryPageSuspendOptionAndSuspendStatusInHomePage  ********************************************");
		
		
		System.out.println("infoPanelStatus 			: "+actinfoPanelStatus			+"  Value Expected : "+expinfoPanelStatus);
		
		System.out.println("suspendStatusRow1 			: "+actsuspendStatusRow1		+"  Value Expected : "+expsuspendStatusRow1);
		
		
	    if(savingMessage==true && actsuspendStatusRow1.equalsIgnoreCase(expsuspendStatusRow1) 
	    		&& actinfoPanelStatus.equalsIgnoreCase(expinfoPanelStatus))
		{
	    	excelReader.setCellData(xlfile, xlSheetName, 96, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 96, 9, resFail);
			return false;
		}
    }
	
	

    @FindBy(xpath="//label[@id='id_transactionentry_footer_panel_summary_value_26']")
	private static WebElement  QtyAmount;
	
	@FindBy(xpath="//label[@id='id_transactionentry_footer_panel_summary_value_28']")
	private static WebElement  GrossAmount;
	
	@FindBy(xpath="//span[@class='col-xs-6 icon-expand icon-font6 no_padding_left_right theme_color-inverse']")
	private static WebElement  new_footerExpandBtn;

	
	public boolean checkSavingSuspendStockTransferVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    {
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
		getAction().doubleClick(grid_ChkBox1).build().perform();
		
		boolean loading=checkLoadingMessage();
		
		System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();
		
		
		// Actual
		String actdocumentNumberTxt			=documentNumberTxt.getAttribute("value");
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		boolean savingMessage=checkVoucherSavingMessage(actdocumentNumberTxt);
		
		System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();
		
		boolean loading1=checkLoadingMessage();
		
		System.out.println("VoucherLoadingMessage  : "+loading1+" Value Expected : "+"TRUE");
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoPanelStatus));
		String actinfoPanelStatus			=infoPanelStatus.getText();
		
		
        // Expected
		
		String expinfoPanelStatus			=excelReader.getCellData(xlSheetName, 100, 7);
    	
    	excelReader.setCellData(xlfile, xlSheetName, 100, 8, actinfoPanelStatus);
		
       
        
        Thread.sleep(2000);
        
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
        new_CloseBtn.click();
        
        Thread.sleep(2000);
        
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(suspendStatusRow1));
		String actsuspendStatusRow1			=suspendStatusRow1.getText();
		String expsuspendStatusRow1			=excelReader.getCellData(xlSheetName, 101, 7);
    	
    	excelReader.setCellData(xlfile, xlSheetName, 101, 8, actsuspendStatusRow1);
        
		
		System.out.println("************************************* checkSavingSuspendStockTransferVoucher  ********************************************");
		
		
		System.out.println("infoPanelStatus 			: "+actinfoPanelStatus			+"  Value Expected : "+expinfoPanelStatus);
		
		System.out.println("suspendStatusRow1 			: "+actsuspendStatusRow1		+"  Value Expected : "+expsuspendStatusRow1);
		
		
	    if(savingMessage==true  
	    		&& actinfoPanelStatus.equalsIgnoreCase(expinfoPanelStatus))
		{
	    	excelReader.setCellData(xlfile, xlSheetName, 99, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 99, 9, resFail);
			return false;
		}
    }
	

	
		
	@FindBy(xpath="//span[contains(text(),'Configure Transactions')]")
	private static WebElement  ConfigureTransactionBtn;
	
	@FindBy(xpath="//ul[@id='preferenceUL']//a[@id='6']")
	private static WebElement  InventoryBtn;
	
	@FindBy(xpath="//input[@id='CheckStockInOrders']")
	private static WebElement  CheckStockInOrdersChkBox;
	
	@FindBy(xpath="//input[@id='IncludeReserveStockInStockCheck']")
	private static WebElement  IncludeReserveStockInStockCheckChkBox;
	
	
	
	public boolean checkStockTransferAfterChangingInventorySettings() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    {
		
    	Thread.sleep(2000);
    	

    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransferheaderWarehouse1Txt));
		stockTransferheaderWarehouse1Txt.click();
		stockTransferheaderWarehouse1Txt.sendKeys(Keys.END);
		stockTransferheaderWarehouse1Txt.sendKeys(Keys.SHIFT,Keys.HOME);
		Thread.sleep(2000);
		stockTransferheaderWarehouse1Txt.sendKeys(Keys.SPACE);
			
		int warehousecount=wareHouseHeaderListCount.size();
		
		System.err.println(warehousecount);
			
		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=wareHouseHeaderListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 106, 7)))
			{
				wareHouseHeaderListCount.get(i).click();
				
				break;
			}
		}
			
		stockTransferheaderWarehouse1Txt.sendKeys(Keys.TAB);
            
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_BodyWarehouse2Txt));
		enter_BodyWarehouse2Txt.sendKeys(Keys.END);
		enter_BodyWarehouse2Txt.sendKeys(Keys.SHIFT,Keys.HOME);
		Thread.sleep(2000);
		Thread.sleep(2000);
		enter_BodyWarehouse2Txt.sendKeys(Keys.SPACE);
			
		int warehousecount1=wareHouseBodyListCount.size();
		
		System.err.println(warehousecount1);
			
		for(int i=0 ; i < warehousecount1 ;i++)
		{
			String data=wareHouseBodyListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 107, 7)))
			{
				wareHouseBodyListCount.get(i).click();
				
				break;
			}
		}
			
		enter_BodyWarehouse2Txt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount=itemListCount.size();
		
		System.err.println(itemcount);
			
		for(int i=0 ; i < itemcount ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 108, 6)))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 109, 6));
		enter_Quantity.sendKeys(Keys.TAB);
		
        String expErrorMessage=excelReader.getCellData(xlSheetName, 110, 7);
		
		String validationMessage=checkValidationMessage(expErrorMessage);
		
		excelReader.setCellData(xlfile, xlSheetName, 110, 8, validationMessage);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_4thColumn));
		select1stRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 111, 6));
		enter_Quantity.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 112, 6));
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		boolean savingMessage=checkVoucherSavingMessage(docno);
		
		String actSavingMessage=Boolean.toString(savingMessage);
		String expSavingMessage =excelReader.getCellData(xlSheetName, 113, 7);
    	
    	excelReader.setCellData(xlfile, xlSheetName, 113, 8, actSavingMessage);
		
		
		System.out.println("************************************* checkStockTransferAfterChangingInventorySettings  ********************************************");
		
		System.out.println("ErrorMessage 				: "+validationMessage+"  Value Expected : "+expErrorMessage);
		System.out.println("ErrorMessageSave 			: "+savingMessage    +"  Value Expected : "+"TRUE");
		
		Thread.sleep(2000);
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    	new_CloseBtn.click();
		
		
	    if(validationMessage.equalsIgnoreCase(expErrorMessage) && savingMessage==true)
		{
	    	excelReader.setCellData(xlfile, xlSheetName, 105, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 105, 9, resFail);
			return false;
		}
    }
	
	
	
	public boolean checkSuspendStockTransferVoucherFromHomePageAndDeleteOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    {
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
		grid_ChkBox1.click();
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(suspendBtn));
		suspendBtn.click();
		
		
		
        String expErrorMessage      =excelReader.getCellData(xlSheetName, 115, 7);
		
		String validationMessage=checkValidationMessage(expErrorMessage);
		
		excelReader.setCellData(xlfile, xlSheetName, 115, 8, validationMessage);
		
	
        Thread.sleep(2000);
        
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(suspendStatusRow1));
		String actsuspendStatusRow1			=suspendStatusRow1.getText();
		String expsuspendStatusRow1			=excelReader.getCellData(xlSheetName, 116, 7);
    	
    	excelReader.setCellData(xlfile, xlSheetName, 116, 8, actsuspendStatusRow1);
        
		
		System.out.println("************************************* checkSavingSuspendStockTransferVoucheFromHomePage  ********************************************");
		
		
		System.out.println("validationMessage 			: "+validationMessage			+"  Value Expected : "+expErrorMessage);
		
		System.out.println("suspendStatusRow1 			: "+actsuspendStatusRow1		+"  Value Expected : "+expsuspendStatusRow1);
		
		
        Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
		grid_ChkBox1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteBtn));
		deleteBtn.click();
		
		getWaitForAlert();
		
		getAlert().accept();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
		errorMessageCloseBtn.click();
		
		
	    if(actsuspendStatusRow1.equalsIgnoreCase(expsuspendStatusRow1) 
	    		&& validationMessage.equalsIgnoreCase(expErrorMessage))
		{
	    	excelReader.setCellData(xlfile, xlSheetName, 114, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 114, 9, resFail);
			return false;
		}
    }


	
	
	

	public boolean checkSavingStockTransferVoucherWithBRCOGSItem() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    {
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		
    	Thread.sleep(3000);
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
    	grid_ChkBox1.click();

    	
    	Thread.sleep(2000);
    	
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editBtn));
    	editBtn.click();

    	   
    	
    	boolean loading1=checkLoadingMessage();
    	
		
		// First row Batch Br Item
    	Thread.sleep(3000);
    	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		select2ndRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_BodyWarehouse2Txt));
		enter_BodyWarehouse2Txt.sendKeys(Keys.END);
		enter_BodyWarehouse2Txt.sendKeys(Keys.SHIFT,Keys.HOME);
		Thread.sleep(2000);
		Thread.sleep(2000);
		enter_BodyWarehouse2Txt.sendKeys(Keys.SPACE);
			
		int warehousecount1=wareHouseBodyListCount.size();
		
		System.err.println(warehousecount1);
			
		for(int i=0 ; i < warehousecount1 ;i++)
		{
			String data=wareHouseBodyListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 119, 6)))
			{
				wareHouseBodyListCount.get(i).click();
				
				break;
			}
		}
			
		enter_BodyWarehouse2Txt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount=itemListCount.size();
		
		System.err.println(itemcount);
			
		for(int i=0 ; i < itemcount ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 120, 6)))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 121, 6));
		enter_Quantity.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 122, 6));
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();
		
		
		 
	    Thread.sleep(2000);
			
	    System.out.println("Batch Rows"+batchPopUPEmptyRows.getAttribute("data-totalrows"));
	    
	    
	    String actBatchRows=batchPopUPEmptyRows.getAttribute("data-totalrows");
	    String expBatchRows=excelReader.getCellData(xlSheetName, 123, 7);
    	
    	excelReader.setCellData(xlfile, xlSheetName, 123, 8, actBatchRows);
	    
	    
	    String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
	     String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
			
		String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
		String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
		
		String actRow3BatchNo,actRow3BaseQty,actRow3Rate,actRow3AdjustedQty,actRow3TotalAdjustedQty;
		String expRow3BatchNo,expRow3BaseQty,expRow3Rate,expRow3AdjustedQty,expRow3TotalAdjustedQty;
		
		actBatchName=batchItemName.getText();
		actTotalQty=batchTotalQty.getText();
		actAdjustedQty=batchAdjustQty.getText();
		actBalance=batchBalance.getText();
		actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
		actTotalQtyFooter=batchTotalQtyFooter.getText();
		
		
		actRow1BatchNo=batch_BatchNoRow1.getText();
		actRow1BaseQty=batch_BaseQtyRow1.getText();
		actRow1Rate=batch_RateRow1.getText();
		actRow1AdjustedQty=batch_QtyAdjustedRow1.getText();
		

		
		actRow2BatchNo=batch_BatchNoRow2.getText();
		actRow2BaseQty=batch_BaseQtyRow2.getText();
		actRow2Rate=batch_RateRow2.getText();
		actRow2AdjustedQty=batch_QtyAdjustedRow2.getText();
		
		expBatchName=excelReader.getCellData(xlSheetName, 124, 7);
		expTotalQty=excelReader.getCellData(xlSheetName, 125, 7);
		expAdjustedQty=excelReader.getCellData(xlSheetName, 126, 7);
		expBalance=excelReader.getCellData(xlSheetName, 127, 7);
		
		
		expTotalQtyFooter=excelReader.getCellData(xlSheetName, 128, 7);
		expTotalAdjustedQtyFooter=excelReader.getCellData(xlSheetName, 129, 7);
		
		
		expRow1BatchNo=excelReader.getCellData(xlSheetName, 130, 7);
		expRow1BaseQty=excelReader.getCellData(xlSheetName, 131, 7);
		expRow1Rate=excelReader.getCellData(xlSheetName, 132, 7);
		expRow1AdjustedQty=excelReader.getCellData(xlSheetName, 133, 7);
		
	
		expRow2BatchNo=excelReader.getCellData(xlSheetName, 134, 7);
		expRow2BaseQty=excelReader.getCellData(xlSheetName, 135, 7);
		expRow2Rate=excelReader.getCellData(xlSheetName, 136, 7);
		expRow2AdjustedQty=excelReader.getCellData(xlSheetName, 137, 7);
		
		
	
		excelReader.setCellData(xlfile, xlSheetName, 124, 8, actBatchName);
		excelReader.setCellData(xlfile, xlSheetName, 125, 8, actTotalQty);
		excelReader.setCellData(xlfile, xlSheetName, 126, 8, actAdjustedQty);
		excelReader.setCellData(xlfile, xlSheetName, 127, 8, actBalance);
		excelReader.setCellData(xlfile, xlSheetName, 128, 8, actTotalQtyFooter);
		excelReader.setCellData(xlfile, xlSheetName, 129, 8, actTotalAdjustedQtyFooter);
		
		excelReader.setCellData(xlfile, xlSheetName, 130, 8, actRow1BatchNo);
		excelReader.setCellData(xlfile, xlSheetName, 131, 8, actRow1BaseQty);
		excelReader.setCellData(xlfile, xlSheetName, 132, 8, actRow1Rate);
		excelReader.setCellData(xlfile, xlSheetName, 133, 8, actRow1AdjustedQty);
		
		excelReader.setCellData(xlfile, xlSheetName, 134, 8, actRow2BatchNo);
		excelReader.setCellData(xlfile, xlSheetName, 135, 8, actRow2BaseQty);
		excelReader.setCellData(xlfile, xlSheetName, 136, 8, actRow2Rate);
		excelReader.setCellData(xlfile, xlSheetName, 137, 8, actRow2AdjustedQty);
		
		
		System.out.println(actBatchName);
		System.out.println(actTotalQty);
		System.out.println(actAdjustedQty);
		System.out.println(actBalance);
		
		
		System.out.println(actTotalAdjustedQtyFooter);
		System.out.println(actTotalQtyFooter);
			
		//First Row
		
		System.out.println(actRow1BatchNo);
		System.out.println(actRow1BaseQty);
		System.out.println(actRow1Rate);
		System.out.println(actRow1AdjustedQty);

		
		//Second Row
		
		System.out.println(actRow2BatchNo);
		System.out.println(actRow2BaseQty);
		System.out.println(actRow2Rate);
		System.out.println(actRow2AdjustedQty);
	
		System.out.println("*********************************************** checkBatchWiseScreenPopupWithPickOnFIFO  ********************************************");
		System.out.println("Entry Page Batch Popup Batch Name Value Actual          : "+actBatchName              + " Value Expected : "+expBatchName);	
		System.out.println("Entry Page Batch Popup Total Qty Value Actual           : "+actTotalQty               + " Value Expected : "+expTotalQty);
		System.out.println("Entry Page Batch Popup Adjusted Qty Value Actual        : "+actAdjustedQty            + " Value Expected : "+expAdjustedQty);
		System.out.println("Entry Page Batch Popup Balance Value Actual             : "+actBalance                + " Value Expected : "+expBalance);
		System.out.println("Entry Page Batch Popup Adjusted Qty Footer Value Actual : "+actTotalAdjustedQtyFooter + " Value Expected : "+expTotalAdjustedQtyFooter);
		System.out.println("Entry Page Batch Popup Total Qty Footer Value Actual    : "+actTotalQtyFooter         + " Value Expected : "+expTotalQtyFooter);
		
		System.out.println("Entry Page Batch Popup Row1 Batch No Value Actual       : "+actRow1BatchNo            + " Value Expected : "+expRow1BatchNo);	
		System.out.println("Entry Page Batch Popup Row1 Base Qty Value Actual       : "+actRow1BaseQty            + " Value Expected : "+expRow1BaseQty);
		System.out.println("Entry Page Batch Popup Row1 Rate Value Actual           : "+actRow1Rate               + " Value Expected : "+expRow1Rate);
		System.out.println("Entry Page Batch Popup Row1 Adjusted Qty Value Actual   : "+actRow1AdjustedQty        + " Value Expected : "+expRow1AdjustedQty);
		
		System.out.println("Entry Page Batch Popup Row2 Batch No Value Actual       : "+actRow2BatchNo            + " Value Expected : "+expRow2BatchNo);	
		System.out.println("Entry Page Batch Popup Row2 Base Qty Value Actual       : "+actRow2BaseQty            + " Value Expected : "+actRow2BaseQty);
		System.out.println("Entry Page Batch Popup Row2 Rate Value Actual           : "+expRow2Rate               + " Value Expected : "+actRow2Rate);
		System.out.println("Entry Page Batch Popup Row2 Adjusted Qty Value Actual   : "+actRow2AdjustedQty        + " Value Expected : "+expRow2AdjustedQty);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();
		
		
		if (actBatchRows.equalsIgnoreCase(expBatchRows)
						
						&& actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
						&& actBalance.equalsIgnoreCase(expBalance) 
						
						&& actTotalAdjustedQtyFooter.equalsIgnoreCase(expTotalAdjustedQtyFooter) && actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) 
						
						&& actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow1BaseQty.equalsIgnoreCase(expRow1BaseQty) && actRow1Rate.equalsIgnoreCase(expRow1Rate) 
						&& actRow1AdjustedQty.equalsIgnoreCase(expRow1AdjustedQty)
						
						&& actRow2BatchNo.equalsIgnoreCase(expRow2BatchNo) && actRow2BaseQty.equalsIgnoreCase(expRow2BaseQty) && actRow2Rate.equalsIgnoreCase(expRow2Rate)) 
		{
			System.out.println("  Test Pass:  Splitting Of Batched in Stock trasfer ");
	    	excelReader.setCellData(xlfile, xlSheetName, 117, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("  Test Fail:  Splitting Of Batched in Stock trasfer ");
			excelReader.setCellData(xlfile, xlSheetName, 117, 9, resFail);
			return false;
		}
    }

		

public boolean checkBatchPopupAfterVoucherTotalConsumed() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
		// Third row Batch Br Item
	
	Thread.sleep(2000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_1stColumn));
	select4thRow_1stColumn.click();
	
	Thread.sleep(2000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_BodyWarehouse2Txt));
	enter_BodyWarehouse2Txt.sendKeys(Keys.END);
	enter_BodyWarehouse2Txt.sendKeys(Keys.SHIFT,Keys.HOME);
	Thread.sleep(2000);
	enter_BodyWarehouse2Txt.sendKeys(Keys.SPACE);
		
	int warehousecount1=wareHouseBodyListCount.size();
	
	System.err.println(warehousecount1);
		
	for(int i=0 ; i < warehousecount1 ;i++)
	{
		String data=wareHouseBodyListCount.get(i).getText();
		
		if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 139, 6)))
		{
			wareHouseBodyListCount.get(i).click();
			
			break;
		}
	}
		
	enter_BodyWarehouse2Txt.sendKeys(Keys.TAB);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
	enter_ItemTxt.sendKeys(Keys.SPACE);
	
	int itemcount=itemListCount.size();
	
	System.err.println(itemcount);
		
	for(int i=0 ; i < itemcount ;i++)
	{
		String data=itemListCount.get(i).getText();
		
		if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 140, 6)))
		{
			itemListCount.get(i).click();
			
			break;
		}
	}
		
	enter_ItemTxt.sendKeys(Keys.TAB);	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
	enter_UnitTxt.sendKeys(Keys.TAB);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
	enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 141, 6));
	enter_Quantity.sendKeys(Keys.TAB);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
	enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 142, 6));
	enter_Rate.sendKeys(Keys.TAB);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
	enter_Gross.sendKeys(Keys.TAB);
	
	Thread.sleep(2000);
		
    System.out.println("Batch Rows"+batchPopUPEmptyRows.getAttribute("data-totalrows"));
    
    
    String actBatchRows=batchPopUPEmptyRows.getAttribute("data-totalrows");
    String expBatchRows=excelReader.getCellData(xlSheetName, 143, 7);
	
	excelReader.setCellData(xlfile, xlSheetName, 143, 8, actBatchRows);
    
    
    String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
     String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
		
	String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
	String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
	
	String actRow3BatchNo,actRow3BaseQty,actRow3Rate,actRow3AdjustedQty,actRow3TotalAdjustedQty;
	String expRow3BatchNo,expRow3BaseQty,expRow3Rate,expRow3AdjustedQty,expRow3TotalAdjustedQty;
	
	actBatchName=batchItemName.getText();
	actTotalQty=batchTotalQty.getText();
	actAdjustedQty=batchAdjustQty.getText();
	actBalance=batchBalance.getText();
	actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
	actTotalQtyFooter=batchTotalQtyFooter.getText();
	
	
	actRow1BatchNo=batch_BatchNoRow1.getText();
	actRow1BaseQty=batch_BaseQtyRow1.getText();
	actRow1Rate=batch_RateRow1.getText();
	actRow1AdjustedQty=batch_QtyAdjustedRow1.getText();
	
	expBatchName=excelReader.getCellData(xlSheetName, 144, 7);
	expTotalQty=excelReader.getCellData(xlSheetName, 145, 7);
	expAdjustedQty=excelReader.getCellData(xlSheetName, 146, 7);
	expBalance=excelReader.getCellData(xlSheetName, 147, 7);
	
	
	expTotalQtyFooter=excelReader.getCellData(xlSheetName, 148, 7);
	expTotalAdjustedQtyFooter=excelReader.getCellData(xlSheetName, 149, 7);
	
	
	expRow1BatchNo=excelReader.getCellData(xlSheetName, 150, 7);
	expRow1BaseQty=excelReader.getCellData(xlSheetName, 151, 7);
	expRow1Rate=excelReader.getCellData(xlSheetName, 152, 7);
	expRow1AdjustedQty=excelReader.getCellData(xlSheetName, 153, 7);
	


	excelReader.setCellData(xlfile, xlSheetName, 144, 8, actBatchName);
	excelReader.setCellData(xlfile, xlSheetName, 145, 8, actTotalQty);
	excelReader.setCellData(xlfile, xlSheetName, 146, 8, actAdjustedQty);
	excelReader.setCellData(xlfile, xlSheetName, 147, 8, actBalance);
	excelReader.setCellData(xlfile, xlSheetName, 148, 8, actTotalQtyFooter);
	excelReader.setCellData(xlfile, xlSheetName, 149, 8, actTotalAdjustedQtyFooter);
	
	excelReader.setCellData(xlfile, xlSheetName, 150, 8, actRow1BatchNo);
	excelReader.setCellData(xlfile, xlSheetName, 151, 8, actRow1BaseQty);
	excelReader.setCellData(xlfile, xlSheetName, 152, 8, actRow1Rate);
	excelReader.setCellData(xlfile, xlSheetName, 153, 8, actRow1AdjustedQty);
	
	
	System.out.println(actBatchName);
	System.out.println(actTotalQty);
	System.out.println(actAdjustedQty);
	System.out.println(actBalance);
	
	
	System.out.println(actTotalAdjustedQtyFooter);
	System.out.println(actTotalQtyFooter);
		
	//First Row
	
	System.out.println(actRow1BatchNo);
	System.out.println(actRow1BaseQty);
	System.out.println(actRow1Rate);
	System.out.println(actRow1AdjustedQty);

	System.out.println("*********************************************** checkBatchWiseScreenPopupWithPickOnFIFO  ********************************************");
	System.out.println("Entry Page Batch Popup Batch Name Value Actual          : "+actBatchName              + " Value Expected : "+expBatchName);	
	System.out.println("Entry Page Batch Popup Total Qty Value Actual           : "+actTotalQty               + " Value Expected : "+expTotalQty);
	System.out.println("Entry Page Batch Popup Adjusted Qty Value Actual        : "+actAdjustedQty            + " Value Expected : "+expAdjustedQty);
	System.out.println("Entry Page Batch Popup Balance Value Actual             : "+actBalance                + " Value Expected : "+expBalance);
	System.out.println("Entry Page Batch Popup Adjusted Qty Footer Value Actual : "+actTotalAdjustedQtyFooter + " Value Expected : "+expTotalAdjustedQtyFooter);
	System.out.println("Entry Page Batch Popup Total Qty Footer Value Actual    : "+actTotalQtyFooter         + " Value Expected : "+expTotalQtyFooter);
	
	System.out.println("Entry Page Batch Popup Row1 Batch No Value Actual       : "+actRow1BatchNo            + " Value Expected : "+expRow1BatchNo);	
	System.out.println("Entry Page Batch Popup Row1 Base Qty Value Actual       : "+actRow1BaseQty            + " Value Expected : "+expRow1BaseQty);
	System.out.println("Entry Page Batch Popup Row1 Rate Value Actual           : "+actRow1Rate               + " Value Expected : "+expRow1Rate);
	System.out.println("Entry Page Batch Popup Row1 Adjusted Qty Value Actual   : "+actRow1AdjustedQty        + " Value Expected : "+expRow1AdjustedQty);
	

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
	batchCancelIcon.click();
	
	
	if (actBatchRows.equalsIgnoreCase(expBatchRows)
					
					&& actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
					&& actBalance.equalsIgnoreCase(expBalance) 
					
					&& actTotalAdjustedQtyFooter.equalsIgnoreCase(expTotalAdjustedQtyFooter) && actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) 
					
					&& actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow1BaseQty.equalsIgnoreCase(expRow1BaseQty) && actRow1Rate.equalsIgnoreCase(expRow1Rate) 
					&& actRow1AdjustedQty.equalsIgnoreCase(expRow1AdjustedQty)) 
	{
    	excelReader.setCellData(xlfile, xlSheetName, 138, 9, resPass);
		return true;
	}
	else
	{
		excelReader.setCellData(xlfile, xlSheetName, 138, 9, resFail);
		return false;
	}
}
		

@FindBy(xpath="//*[@id='id_transaction_bins_grid_body']/tr/td")
private static List<WebElement> binInwardGridList;


	public boolean checkFIFoCogsItemWithBinOutwardPopUpinStocktransfer()throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(thirdRowIndex));
		thirdRowIndex.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
		deleteRowBtn.click();
		
       Thread.sleep(3000);
		
       
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(thirdRowIndex));
		thirdRowIndex.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
		deleteRowBtn.click();
		
        Thread.sleep(3000);
       
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
		select3rdRow_1stColumn.click();
       
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_BodyWarehouse2Txt));
		enter_BodyWarehouse2Txt.sendKeys(Keys.END);
		enter_BodyWarehouse2Txt.sendKeys(Keys.SHIFT,Keys.HOME);
		Thread.sleep(2000);
		
		enter_BodyWarehouse2Txt.sendKeys(Keys.SPACE);
			
		int warehousecount1=wareHouseBodyListCount.size();
		
		System.err.println(warehousecount1);
			
		for(int i=0 ; i < warehousecount1 ;i++)
		{
			String data=wareHouseBodyListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 155, 6)))
			{
				wareHouseBodyListCount.get(i).click();
				
				break;
			}
		}
			
		enter_BodyWarehouse2Txt.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 156, 6)))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 157, 6));
		enter_Quantity.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 158, 6));
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
		binAutoAllocateBtn.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchTxt));
		boolean actBinSearchTxt         = binSearchTxt.isDisplayed();
		boolean actBinSearchBtn         = binSearchBtn.isDisplayed();
		boolean actBinAutoAllocateBtn   = binAutoAllocateBtn.isDisplayed();
		boolean actBinPickBtn           = binPickBtn.isDisplayed();
		boolean actBinCancelBtn         = binCancelBtn.isDisplayed();
		boolean actBinOkBtn             = binOkBtn.isEnabled();
				
		boolean expBinSearchTxt         = true;
		boolean expBinSearchBtn         = true;
		boolean expBinAlternateCategory = true;
		boolean expBinAutoAllocateBtn   = true;
		boolean expBinPickBtn           = true;
		boolean expBinCancelBtn         = true;
		boolean expBinOkBtn             = true;
		
		boolean actMethod = actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn 
	            && actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn;

		String actResult = Boolean.toString(actMethod);

		excelReader.setCellData(xlfile, xlSheetName, 159, 8, actResult.toUpperCase());
			
		System.out.println("Bin Search Value Actual                :  " + actBinSearchTxt +         " Value Expected : " + expBinSearchTxt);
		System.out.println("Bin Search Btn Value Actual            :  " + actBinSearchBtn +         " Value Expected : " + expBinSearchBtn);
		System.out.println("Bin Auto Allocate Btn Value Actual     :  " + actBinAutoAllocateBtn +   " Value Expected : " + expBinAutoAllocateBtn);
		System.out.println("Bin Pick Btn Value Actual              :  " + actBinPickBtn +           " Value Expected : " + expBinPickBtn);
		System.out.println("Bin Cancel Btn Value Actual            :  " + actBinCancelBtn +         " Value Expected : " + expBinCancelBtn);
		System.out.println("Bin Ok Btn Value Actual                :  " + actBinOkBtn +             " Value Expected : " + expBinOkBtn);
		
		int binInwardGridListCount = binInwardGridList.size();
		
		ArrayList<String> binInwardGridListArray = new ArrayList<String>();
		
		for(int i=0;i<binInwardGridListCount;i++)
		{
			String data = binInwardGridList.get(i).getText();
			binInwardGridListArray.add(data);
		}
		
		
		String actbinInwardGridList=binInwardGridListArray.toString();
		
		String expbinInwardGridList=excelReader.getCellData(xlSheetName, 160, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 160, 8, actbinInwardGridList);
		
		System.out.println("ActbinInwardGridList : " + actbinInwardGridList);
		System.out.println("ExpbinInwardGridList : " + expbinInwardGridList);
		
        String actBinGroupNameR1        = binselect1stRow_2ndColumn.getText();
		String actBinStockR1            = binselect1stRow_3rdColumn.getText();
		String actBinCapacityR1         = binselect1stRow_4thColumn.getText();
		String actBinLoadR1             = binselect1stRow_5thColumn.getText();
		String actBinFreeSpaceR1        = binselect1stRow_6thColumn.getText();
		String actBinFreeQtyR1          = binselect1stRow_7thColumn.getText();
		String actBinToBeAllocatedR1    = binselect1stRow_8thColumn.getText();
	
		
		
		excelReader.setCellData(xlfile, xlSheetName, 161, 8, actBinGroupNameR1);
		excelReader.setCellData(xlfile, xlSheetName, 162, 8, actBinStockR1);
		excelReader.setCellData(xlfile, xlSheetName, 163, 8, actBinCapacityR1);
		excelReader.setCellData(xlfile, xlSheetName, 164, 8, actBinLoadR1);
		excelReader.setCellData(xlfile, xlSheetName, 165, 8, actBinFreeSpaceR1);
		excelReader.setCellData(xlfile, xlSheetName, 166, 8, actBinFreeQtyR1);
		excelReader.setCellData(xlfile, xlSheetName, 167, 8, actBinToBeAllocatedR1);
		
		
		
		String actBinTotalQty           = binTotalQty.getAttribute("value");
		String actBinBaseUom            = binBaseUOM.getText();
		String actBinBalanceQty         = binBalanceTxt.getAttribute("value");
		String actBinSum                = binSumInward.getText();
		
		
		
		String expBinGroupNameR1        = excelReader.getCellData(xlSheetName, 161, 7);
		String expBinStockR1            = excelReader.getCellData(xlSheetName, 162, 7);
		String expBinCapacityR1         = excelReader.getCellData(xlSheetName, 163, 7);
		String expBinLoadR1             = excelReader.getCellData(xlSheetName, 164, 7);
		String expBinFreeSpaceR1        = excelReader.getCellData(xlSheetName, 165, 7);
		String expBinFreeQtyR1          = excelReader.getCellData(xlSheetName, 166, 7);
		String expBinToBeAllocatedR1    = excelReader.getCellData(xlSheetName, 167, 7);
	 	
		
		
		String expBinTotalQty           = excelReader.getCellData(xlSheetName, 168, 7);
		String expBinBaseUom            = excelReader.getCellData(xlSheetName, 169, 7);
		String expBinBalanceQty         = excelReader.getCellData(xlSheetName, 170, 7);	
		String expBinSum                = excelReader.getCellData(xlSheetName, 171, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 168, 8, actBinTotalQty);
		excelReader.setCellData(xlfile, xlSheetName, 169, 8, actBinBaseUom);
		excelReader.setCellData(xlfile, xlSheetName, 170, 8, actBinBalanceQty);
		excelReader.setCellData(xlfile, xlSheetName, 171, 8, actBinSum);
		
		
		System.out.println("First Row Group Name Value Actual          :  " + actBinGroupNameR1 +     "  Value Expected : " + expBinGroupNameR1);
		
		
		System.out.println("Second Row Stock Value Actual              :  " + actBinStockR1 +         "  Value Expected : " + expBinStockR1);
		System.out.println("Second Row Capacity Value Actual           :  " + actBinCapacityR1 +      "  Value Expected : " + expBinCapacityR1);
		System.out.println("Second Row Load Value Actual               :  " + actBinLoadR1 +          "  Value Expected : " + expBinLoadR1);
		System.out.println("Second Row Free Space Value Actual         :  " + actBinFreeSpaceR1 +     "  Value Expected : " + expBinFreeSpaceR1);
		System.out.println("Second Row Free Qty Value Actual           :  " + actBinFreeQtyR1 +       "  Value Expected : " + expBinFreeQtyR1);
		System.out.println("Second Row To Be Allocated Value Actual    :  " + actBinToBeAllocatedR1 + "  Value Expected : " + expBinToBeAllocatedR1);
				
		
		System.out.println("Bin Total Qty Value Actual                 :  " + actBinTotalQty +         "  Value Expected : " + expBinTotalQty);
		System.out.println("Bin Base Uom  Value Actual                 :  " + actBinBaseUom +          "  Value Expected : " + expBinBaseUom);
		System.out.println("Bin Balance Value Actual                   :  " + actBinBalanceQty +       "  Value Expected : " + expBinBalanceQty);
		System.out.println("Bin Total Sum Value Actual                 :  " + actBinSum +             "  Value Expected :  " + expBinSum);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
		binOkBtn.click();
		
		
		if(actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn 
				&& actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn
				&& actBinOkBtn==expBinOkBtn
				
				&& actBinGroupNameR1.equalsIgnoreCase(expBinGroupNameR1)
				
				 && actBinStockR1.equalsIgnoreCase(expBinStockR1) 
				&& actBinCapacityR1.equalsIgnoreCase(expBinCapacityR1) && actBinLoadR1.equalsIgnoreCase(expBinLoadR1)
				&& actBinFreeSpaceR1.equalsIgnoreCase(expBinFreeSpaceR1) && actBinFreeQtyR1.equalsIgnoreCase(expBinFreeQtyR1)
				&& actBinToBeAllocatedR1.equalsIgnoreCase(expBinToBeAllocatedR1)
				
				
				 && actbinInwardGridList.equalsIgnoreCase(expbinInwardGridList)
				
				&& actBinTotalQty.equalsIgnoreCase(expBinTotalQty) && actBinBaseUom.equalsIgnoreCase(expBinBaseUom) 
				&& actBinBalanceQty.equalsIgnoreCase(expBinBalanceQty)
				
				&& actBinSum.equalsIgnoreCase(expBinSum))
		{
			System.out.println("Selected Bin And Ok Btn Not Enabled");
			excelReader.setCellData(xlfile, xlSheetName, 154, 9, resPass);
			return true;
		
		}
		else
		{
			System.out.println("Not Selected Bin And Ok Btn Not Enabled");
			excelReader.setCellData(xlfile, xlSheetName, 154, 9, resFail);
			return false;
		}
	}
		
		
		
		public boolean checkFIFoCogsItemWithBinInwardPopUpinStocktransfer()throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
			binAutoAllocateBtn.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchTxt));
			boolean actBinSearchTxt         = binSearchTxt.isDisplayed();
			boolean actBinSearchBtn         = binSearchBtn.isDisplayed();
			boolean actBinAutoAllocateBtn   = binAutoAllocateBtn.isDisplayed();
			boolean actBinPickBtn           = binPickBtn.isDisplayed();
			boolean actBinCancelBtn         = binCancelBtn.isDisplayed();
			boolean actBinOkBtn             = binOkBtn.isEnabled();
					
			boolean expBinSearchTxt         = true;
			boolean expBinSearchBtn         = true;
			boolean expBinAlternateCategory = true;
			boolean expBinAutoAllocateBtn   = true;
			boolean expBinPickBtn           = true;
			boolean expBinCancelBtn         = true;
			boolean expBinOkBtn             = true;
			
			boolean actMethod = actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn 
		            && actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn;

			String actResult = Boolean.toString(actMethod);

			excelReader.setCellData(xlfile, xlSheetName, 173, 8, actResult.toUpperCase());
				
			System.out.println("Bin Search Value Actual                :  " + actBinSearchTxt +         " Value Expected : " + expBinSearchTxt);
			System.out.println("Bin Search Btn Value Actual            :  " + actBinSearchBtn +         " Value Expected : " + expBinSearchBtn);
			System.out.println("Bin Auto Allocate Btn Value Actual     :  " + actBinAutoAllocateBtn +   " Value Expected : " + expBinAutoAllocateBtn);
			System.out.println("Bin Pick Btn Value Actual              :  " + actBinPickBtn +           " Value Expected : " + expBinPickBtn);
			System.out.println("Bin Cancel Btn Value Actual            :  " + actBinCancelBtn +         " Value Expected : " + expBinCancelBtn);
			System.out.println("Bin Ok Btn Value Actual                :  " + actBinOkBtn +             " Value Expected : " + expBinOkBtn);
			
			int binInwardGridListCount = binInwardGridList.size();
			
			ArrayList<String> binInwardGridListArray = new ArrayList<String>();
			
			for(int i=0;i<binInwardGridListCount;i++)
			{
				String data = binInwardGridList.get(i).getText();
				binInwardGridListArray.add(data);
			}
			
			
			String actbinInwardGridList=binInwardGridListArray.toString();
			
			String expbinInwardGridList=excelReader.getCellData(xlSheetName, 174, 7);
			
			excelReader.setCellData(xlfile, xlSheetName, 174, 8, actbinInwardGridList);
			
			System.out.println("ActbinInwardGridList : " + actbinInwardGridList);
			System.out.println("ExpbinInwardGridList : " + expbinInwardGridList);
			
	        String actBinGroupNameR1        = binselect1stRow_2ndColumn.getText();
	        
			
			String actBinStockR1            = binselect1stRow_3rdColumn.getText();
			String actBinCapacityR1         = binselect1stRow_4thColumn.getText();
			String actBinLoadR1             = binselect1stRow_5thColumn.getText();
			String actBinFreeSpaceR1        = binselect1stRow_6thColumn.getText();
			String actBinFreeQtyR1          = binselect1stRow_7thColumn.getText();
			String actBinToBeAllocatedR1    = binselect1stRow_8thColumn.getText();
		
			
			String actBinTotalQty           = binTotalQty.getAttribute("value");
			String actBinBaseUom            = binBaseUOM.getText();
			String actBinBalanceQty         = binBalanceTxt.getAttribute("value");
			String actBinSum                = binSumInward.getText();
			
			
			
			String expBinGroupNameR1        = excelReader.getCellData(xlSheetName, 175, 7);
			String expBinStockR1            = excelReader.getCellData(xlSheetName, 176, 7);
			String expBinCapacityR1         = excelReader.getCellData(xlSheetName, 177, 7);
			String expBinLoadR1             = excelReader.getCellData(xlSheetName, 178, 7);
			String expBinFreeSpaceR1        = excelReader.getCellData(xlSheetName, 179, 7);
			String expBinFreeQtyR1          = excelReader.getCellData(xlSheetName, 180, 7);
			String expBinToBeAllocatedR1    = excelReader.getCellData(xlSheetName, 181, 7);
		 	

			excelReader.setCellData(xlfile, xlSheetName, 175, 8, actBinGroupNameR1);
			excelReader.setCellData(xlfile, xlSheetName, 176, 8, actBinStockR1);
			excelReader.setCellData(xlfile, xlSheetName, 177, 8, actBinCapacityR1);
			excelReader.setCellData(xlfile, xlSheetName, 178, 8, actBinLoadR1);
			excelReader.setCellData(xlfile, xlSheetName, 179, 8, actBinFreeSpaceR1);
			excelReader.setCellData(xlfile, xlSheetName, 180, 8, actBinFreeQtyR1);
			excelReader.setCellData(xlfile, xlSheetName, 181, 8, actBinToBeAllocatedR1);
			
			
			String expBinTotalQty           = excelReader.getCellData(xlSheetName, 182, 7);
			String expBinBaseUom            = excelReader.getCellData(xlSheetName, 183, 7);
			String expBinBalanceQty         = excelReader.getCellData(xlSheetName, 184, 7);	
			String expBinSum                = excelReader.getCellData(xlSheetName, 185, 7);
			
			excelReader.setCellData(xlfile, xlSheetName, 168, 8, actBinTotalQty);
			excelReader.setCellData(xlfile, xlSheetName, 169, 8, actBinBaseUom);
			excelReader.setCellData(xlfile, xlSheetName, 170, 8, actBinBalanceQty);
			excelReader.setCellData(xlfile, xlSheetName, 171, 8, actBinSum);
			
			
			System.out.println("First Row Group Name Value Actual          :  " + actBinGroupNameR1 +     "  Value Expected : " + expBinGroupNameR1);
			
			
			System.out.println("Second Row Stock Value Actual              :  " + actBinStockR1 +         "  Value Expected : " + expBinStockR1);
			System.out.println("Second Row Capacity Value Actual           :  " + actBinCapacityR1 +      "  Value Expected : " + expBinCapacityR1);
			System.out.println("Second Row Load Value Actual               :  " + actBinLoadR1 +          "  Value Expected : " + expBinLoadR1);
			System.out.println("Second Row Free Space Value Actual         :  " + actBinFreeSpaceR1 +     "  Value Expected : " + expBinFreeSpaceR1);
			System.out.println("Second Row Free Qty Value Actual           :  " + actBinFreeQtyR1 +       "  Value Expected : " + expBinFreeQtyR1);
			System.out.println("Second Row To Be Allocated Value Actual    :  " + actBinToBeAllocatedR1 + "  Value Expected : " + expBinToBeAllocatedR1);
					
			
			System.out.println("Bin Total Qty Value Actual                 :  " + actBinTotalQty +         "  Value Expected : " + expBinTotalQty);
			System.out.println("Bin Base Uom  Value Actual                 :  " + actBinBaseUom +          "  Value Expected : " + expBinBaseUom);
			System.out.println("Bin Balance Value Actual                   :  " + actBinBalanceQty +       "  Value Expected : " + expBinBalanceQty);
			System.out.println("Bin Total Sum Value Actual                 :  " + actBinSum +             "  Value Expected :  " + expBinSum);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
			binOkBtn.click();
			
			
			if(actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn 
					&& actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn
					&& actBinOkBtn==expBinOkBtn
					
					&& actBinGroupNameR1.equalsIgnoreCase(expBinGroupNameR1)
					
					 && actBinStockR1.equalsIgnoreCase(expBinStockR1) 
					&& actBinCapacityR1.equalsIgnoreCase(expBinCapacityR1) && actBinLoadR1.equalsIgnoreCase(expBinLoadR1)
					&& actBinFreeSpaceR1.equalsIgnoreCase(expBinFreeSpaceR1) && actBinFreeQtyR1.equalsIgnoreCase(expBinFreeQtyR1)
					&& actBinToBeAllocatedR1.equalsIgnoreCase(expBinToBeAllocatedR1)
					
					
					 && actbinInwardGridList.equalsIgnoreCase(expbinInwardGridList)
					
					&& actBinTotalQty.equalsIgnoreCase(expBinTotalQty) && actBinBaseUom.equalsIgnoreCase(expBinBaseUom) 
					&& actBinBalanceQty.equalsIgnoreCase(expBinBalanceQty)
					
					&& actBinSum.equalsIgnoreCase(expBinSum))
			{
				System.out.println("Selected Bin And Ok Btn Not Enabled");
				excelReader.setCellData(xlfile, xlSheetName, 172, 9, resPass);
				return true;
			
			}
			else
			{
				System.out.println("Not Selected Bin And Ok Btn Not Enabled");
				excelReader.setCellData(xlfile, xlSheetName, 172, 9, resFail);
				return false;
			}
		}
		
	


    public boolean checkFIFoCogsItemAfterTotalConsumed()throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
		
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_1stColumn));
		select4thRow_1stColumn.click();
	   
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_BodyWarehouse2Txt));
		enter_BodyWarehouse2Txt.sendKeys(Keys.END);
		enter_BodyWarehouse2Txt.sendKeys(Keys.SHIFT,Keys.HOME);
		Thread.sleep(2000);
		
		enter_BodyWarehouse2Txt.sendKeys(Keys.SPACE);
			
		int warehousecount1=wareHouseBodyListCount.size();
		
		System.err.println(warehousecount1);
			
		for(int i=0 ; i < warehousecount1 ;i++)
		{
			String data=wareHouseBodyListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 187, 6)))
			{
				wareHouseBodyListCount.get(i).click();
				
				break;
			}
		}
			
		enter_BodyWarehouse2Txt.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 188, 6)))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 189, 6));
		
		enter_Quantity.sendKeys(Keys.TAB);
		
	
	    String expErrorMessage      =excelReader.getCellData(xlSheetName, 190, 7);
		
		String validationMessage=checkValidationMessage(expErrorMessage);
		
		excelReader.setCellData(xlfile, xlSheetName, 190, 8, validationMessage);
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 158, 6));
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
			int binInwardGridListCount = binInwardGridList.size();
		
		ArrayList<String> binInwardGridListArray = new ArrayList<String>();
		
		for(int i=0;i<binInwardGridListCount;i++)
		{
			String data = binInwardGridList.get(i).getText();
			binInwardGridListArray.add(data);
		}
		
		
		String actbinInwardGridList=binInwardGridListArray.toString();
		
		String expbinInwardGridList=excelReader.getCellData(xlSheetName, 191, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 191, 8, actbinInwardGridList);
		
		System.out.println("ActbinInwardGridList : " + actbinInwardGridList);
		System.out.println("ExpbinInwardGridList : " + expbinInwardGridList);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binCancelBtn));
		binCancelBtn.click();
		
		
		if( actbinInwardGridList.equalsIgnoreCase(expbinInwardGridList))
		{
			System.out.println("Selected Bin And Ok Btn Not Enabled");
			excelReader.setCellData(xlfile, xlSheetName, 186, 9, resPass);
			return true;
		
		}
		else
		{
			System.out.println("Not Selected Bin And Ok Btn Not Enabled");
			excelReader.setCellData(xlfile, xlSheetName, 186, 9, resFail);
			return false;
		}
}


  
    @FindBy(xpath="//*[@id='id_body_85']")
	private static WebElement  enterOutwardBin;

    @FindBy(xpath="//*[@id='id_body_84']")
	private static WebElement  enterInwardBin;
    
    
    
     public boolean checkEditingFIFoCogsItemAfterTotalConsumed()throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
		
		
		Thread.sleep(2000);
	
		
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_3rdColumn));
		select3rdRow_3rdColumn.click();
	   
		
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 195, 6));
		enter_Quantity.sendKeys(Keys.TAB);
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(Keys.TAB);
		
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_9thColumn));
		select3rdRow_9thColumn.click();
		
		/*
		enterOutwardBin.click();
		enterOutwardBin.sendKeys(Keys.SPACE);*/
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
		binAutoAllocateBtn.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
		binOkBtn.click();
		
		Thread.sleep(2000);
		
		
		enterInwardBin.click();
		enterInwardBin.sendKeys(Keys.SPACE);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
		binAutoAllocateBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
		binOkBtn.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_4thColumn));
		select4thRow_4thColumn.click();
		
		String actOutwardBin=select3rdRow_9thColumn.getText();
		String expoutwardBin=excelReader.getCellData(xlSheetName, 196, 7);
    	
    	excelReader.setCellData(xlfile, xlSheetName, 196, 8, actOutwardBin);
		

		String actInwardBin=select3rdRow_10thColumn.getText();
		String expInwardBin=excelReader.getCellData(xlSheetName, 197, 7);
    	
    	excelReader.setCellData(xlfile, xlSheetName, 197, 8, actInwardBin);
		
		
		if( actOutwardBin.equalsIgnoreCase(expoutwardBin) && 
				actInwardBin.equalsIgnoreCase(expInwardBin))
		{
			System.out.println("Selected Bin And Ok Btn Not Enabled");
			excelReader.setCellData(xlfile, xlSheetName, 194, 9, resPass);
			return true;
		
		}
		else
		{
			System.out.println("Not Selected Bin And Ok Btn Not Enabled");
			excelReader.setCellData(xlfile, xlSheetName, 194, 9, resFail);
			return false;
		}
     }

		
     public boolean checkWACogsItemInStocktransfer() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
			
			
			Thread.sleep(3000);
			
			
			
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_1stColumn));
			select4thRow_1stColumn.click();
			
			enter_BodyWarehouse2Txt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.click();
			enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemcount1=itemListCount.size();
			
			System.err.println(itemcount1);
				
			for(int i=0 ; i < itemcount1 ;i++)
			{
				String data=itemListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 199, 6)))
				{
					itemListCount.get(i).click();
					
					break;
				}
			}
				
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 200, 6));
			
			enter_Quantity.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 201, 6));
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardExpandBtn));
			rmaoutwardExpandBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAHeaderChkBox));
			searchRMAHeaderChkBox.click();	
			
			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAOkBtn));
			searchRMAOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardOkBtn));
			rmaoutwardOkBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
			enter_RMA.sendKeys(Keys.TAB);
			
			
			String actRMA=select4thRow_11thColumn.getText();
			
			
			String expRMA=excelReader.getCellData(xlSheetName, 202, 7);
	    	
	    	excelReader.setCellData(xlfile, xlSheetName, 202, 8, actRMA);
			
			System.out.println("actRMA    : "+actRMA);
		
			
			if (actRMA.equalsIgnoreCase(expRMA))
			{
				System.out.println(" RMA IS Consumed ");
				excelReader.setCellData(xlfile, xlSheetName, 198, 9, resPass);
				return true ;
			}
			else 
			{
				System.out.println(" RMA IS  NOt Consumed ");
				excelReader.setCellData(xlfile, xlSheetName, 198, 9, resFail);
				return false ;
			}
		}
		
		
   
		
     @FindBy(xpath="//*[@id='RMASearchTable']/tbody/tr")
     private static List<WebElement> rmaList;
    
     
     
		
		
		public boolean checkWACogsItemAfterTotalConsumedInStocktransfer() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
			
			
			Thread.sleep(3000);
			
			
			
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_1stColumn));
			select5thRow_1stColumn.click();
			
			enter_BodyWarehouse2Txt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.click();
			enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemcount1=itemListCount.size();
			
			System.err.println(itemcount1);
				
			for(int i=0 ; i < itemcount1 ;i++)
			{
				String data=itemListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 204, 6)))
				{
					itemListCount.get(i).click();
					
					break;
				}
			}
				
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 205, 6));
			
			enter_Quantity.sendKeys(Keys.TAB);
			
			
			String expErrorMessage      =excelReader.getCellData(xlSheetName, 206, 7);
			
			String validationMessage=checkValidationMessage(expErrorMessage);
			
			excelReader.setCellData(xlfile, xlSheetName, 206, 8, validationMessage);
			
			
			
			Thread.sleep(5000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_3rdColumn));
			select4thRow_3rdColumn.click();
			
			enter_UnitTxt.sendKeys(Keys.TAB);
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 205, 6));
			
			enter_Quantity.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			
			enter_RMA.click();
			enter_RMA.sendKeys(Keys.SPACE);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardExpandBtn));
			rmaoutwardExpandBtn.click();
			
			Thread.sleep(2000);
			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAHeaderChkBox));
			searchRMAHeaderChkBox.click();	
			
			Thread.sleep(2000);*/

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAOkBtn));
			searchRMAOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardOkBtn));
			rmaoutwardOkBtn.click();
			
		
			
			
			if (validationMessage.equalsIgnoreCase(expErrorMessage))
			{
				System.out.println(" RMA IS Consumed ");
				excelReader.setCellData(xlfile, xlSheetName, 198, 9, resPass);
				return true ;
			}
			else 
			{
				System.out.println(" RMA IS  NOt Consumed ");
				excelReader.setCellData(xlfile, xlSheetName, 198, 9, resFail);
				return false ;
			}
		}
		
		
		
		
		public boolean checkSavingVoucherWithAllItemsInStockTransfer() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
			
			
			Thread.sleep(3000);
			
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_1stColumn));
			select5thRow_1stColumn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_BodyWarehouse2Txt));
			enter_BodyWarehouse2Txt.sendKeys(Keys.CONTROL+"d");

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String docno=documentNumberTxt.getAttribute("value");
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			
			
			boolean savingMessage=checkVoucherSavingMessage(docno);
			
			String actSavingMessage=Boolean.toString(savingMessage);
			String expSavingMessage =excelReader.getCellData(xlSheetName, 113, 7);
	    	
	    	excelReader.setCellData(xlfile, xlSheetName, 113, 8, actSavingMessage);
			
			
			if (actSavingMessage.equalsIgnoreCase(expSavingMessage))
			{
				System.out.println(" Voucher Saved Successfully");
				excelReader.setCellData(xlfile, xlSheetName, 208, 9, resPass);
				return true ;
			}
			else 
			{
				System.out.println("Voucher Not Saved Successfully");
				excelReader.setCellData(xlfile, xlSheetName, 208, 9, resFail);
				return false ;
			}
		}
		
		
		
			
	

	
	public boolean checkSavedStockTransferVoucherWithAllItemsOnPrevious() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    {
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();
		
		boolean loading=checkLoadingMessage();
		
		System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_footerExpandBtn));
		new_footerExpandBtn.click();
		
    
		// Actual
		
		String actdocumentNumberTxt			=documentNumberTxt.getAttribute("value");
		String actdateTxt					=dateTxt.getAttribute("value");
		String actHeaderWarehouseValue		=stockTransferheaderWarehouse1Txt.getAttribute("value");
		
        String actBodyWarehouseValueR1			=select1stRow_1stColumn.getText();
        String actBodyItemValueR1				=select1stRow_2ndColumn.getText();
        String actBodyUnitsValueR1				=select1stRow_3rdColumn.getText();
        String actBodyQtyValueR1				=select1stRow_4thColumn.getText();
        boolean actBodyLExcessInStocksValueR1	=select1stRow_5thColumn.getText().isEmpty();
        String actBodyRateValueR1				=select1stRow_6thColumn.getText();
        String actBodyGrossValueR1				=select1stRow_7thColumn.getText();
        boolean actBodyBatchValueR1				=select1stRow_8thColumn.getText().isEmpty();
        boolean actBodyBinsValueR1				=select1stRow_9thColumn.getText().isEmpty();
        boolean actBodyBins2ValueR1				=select1stRow_10thColumn.getText().isEmpty();
        boolean actBodyRmaValueR1				=select1stRow_11thColumn.getText().isEmpty();
        
        String actBodyWarehouseValueR2			=select2ndRow_1stColumn.getText();
        String actBodyItemValueR2				=select2ndRow_2ndColumn.getText();
        String actBodyUnitsValueR2				=select2ndRow_3rdColumn.getText();
        String actBodyQtyValueR2				=select2ndRow_4thColumn.getText();
        boolean actBodyLExcessInStocksValueR2	=select2ndRow_5thColumn.getText().isEmpty();
        String actBodyRateValueR2				=select2ndRow_6thColumn.getText();
        String actBodyGrossValueR2				=select2ndRow_7thColumn.getText();
        String actBodyBatchValueR2				=select2ndRow_8thColumn.getText();
        boolean actBodyBinsValueR2				=select2ndRow_9thColumn.getText().isEmpty();
        boolean actBodyBins2ValueR2				=select2ndRow_10thColumn.getText().isEmpty();
        boolean actBodyRmaValueR2				=select2ndRow_11thColumn.getText().isEmpty();
        
        String actBodyWarehouseValueR3			=select3rdRow_1stColumn.getText();
        String actBodyItemValueR3				=select3rdRow_2ndColumn.getText();
        String actBodyUnitsValueR3				=select3rdRow_3rdColumn.getText();
        String actBodyQtyValueR3				=select3rdRow_4thColumn.getText();
        boolean actBodyLExcessInStocksValueR3	=select3rdRow_5thColumn.getText().isEmpty();
        String actBodyRateValueR3				=select3rdRow_6thColumn.getText();
        String actBodyGrossValueR3				=select3rdRow_7thColumn.getText();
        boolean actBodyBatchValueR3				=select3rdRow_8thColumn.getText().isEmpty();
        String actBodyBinsValueR3				=select3rdRow_9thColumn.getText();
        String actBodyBins2ValueR3				=select3rdRow_10thColumn.getText();
        boolean actBodyRmaValueR3				=select3rdRow_11thColumn.getText().isEmpty();
        
        String actBodyWarehouseValueR4			=select4thRow_1stColumn.getText();
        String actBodyItemValueR4				=select4thRow_2ndColumn.getText();
        String actBodyUnitsValueR4				=select4thRow_3rdColumn.getText();
        String actBodyQtyValueR4				=select4thRow_4thColumn.getText();
        boolean actBodyLExcessInStocksValueR4	=select4thRow_5thColumn.getText().isEmpty();
        String actBodyRateValueR4				=select4thRow_6thColumn.getText();
        String actBodyGrossValueR4				=select4thRow_7thColumn.getText();
        boolean actBodyBatchValueR4				=select4thRow_8thColumn.getText().isEmpty();
        boolean actBodyBinsValueR4				=select4thRow_9thColumn.getText().isEmpty();
        boolean actBodyBins2ValueR4				=select4thRow_10thColumn.getText().isEmpty();
        String actBodyRmaValueR4				=select4thRow_11thColumn.getText();
        
        String actQtyAmount					=QtyAmount.getText();
        String actGrossAmount				=GrossAmount.getText();
        String actnetAmount					=netAmount.getText();
        
        
        DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Date date=new Date();
		System.out.println(df.format(date));
		
		
        // Expected
		
        String expdocumentNumberTxt				=excelReader.getCellData(xlSheetName, 210, 7);
		String expdateTxt						=df.format(date);
		String expHeaderWarehouseValue			=excelReader.getCellData(xlSheetName, 212, 7);
		
		
		excelReader.setCellData(xlfile, xlSheetName, 210, 7, actdocumentNumberTxt);
		
		excelReader.setCellData(xlfile, xlSheetName, 211, 8, actdateTxt);
		excelReader.setCellData(xlfile, xlSheetName, 211, 7, expdateTxt);
		
		excelReader.setCellData(xlfile, xlSheetName, 212, 7, actHeaderWarehouseValue);
		excelReader.setCellData(xlfile, xlSheetName, 213, 7, actBodyWarehouseValueR1);
		excelReader.setCellData(xlfile, xlSheetName, 214, 7, actBodyItemValueR1);
		excelReader.setCellData(xlfile, xlSheetName, 215, 7, actBodyUnitsValueR1);
		excelReader.setCellData(xlfile, xlSheetName, 216, 7, actBodyQtyValueR1);
		excelReader.setCellData(xlfile, xlSheetName, 217, 7, actBodyRateValueR1);
		excelReader.setCellData(xlfile, xlSheetName, 218, 7, actBodyGrossValueR1);
		
        String expBodyWarehouseValueR1			=excelReader.getCellData(xlSheetName, 213, 7);
        String expBodyItemValueR1				=excelReader.getCellData(xlSheetName, 214, 7);
        String expBodyUnitsValueR1				=excelReader.getCellData(xlSheetName, 215, 7);
        String expBodyQtyValueR1				=excelReader.getCellData(xlSheetName, 216, 7);
        boolean expBodyLExcessInStocksValueR1	=true;
        String expBodyRateValueR1				=excelReader.getCellData(xlSheetName, 217, 7);
        String expBodyGrossValueR1				=excelReader.getCellData(xlSheetName, 218, 7);
        boolean expBodyBatchValueR1				=true;
        boolean expBodyBinsValueR1				=true;
        boolean expBodyBins2ValueR1				=true;
        boolean expBodyRmaValueR1				=true;
        
        
        
        excelReader.setCellData(xlfile, xlSheetName, 219, 7, actBodyWarehouseValueR2);
		excelReader.setCellData(xlfile, xlSheetName, 220, 7, actBodyItemValueR2);
		excelReader.setCellData(xlfile, xlSheetName, 221, 7, actBodyUnitsValueR2);
		excelReader.setCellData(xlfile, xlSheetName, 222, 7, actBodyQtyValueR2);
		excelReader.setCellData(xlfile, xlSheetName, 223, 7, actBodyRateValueR2);
		excelReader.setCellData(xlfile, xlSheetName, 224, 7, actBodyGrossValueR2);
		excelReader.setCellData(xlfile, xlSheetName, 225, 7, actBodyBatchValueR2);
        
        
        String expBodyWarehouseValueR2			=excelReader.getCellData(xlSheetName, 219, 7);
        String expBodyItemValueR2				=excelReader.getCellData(xlSheetName, 220, 7);
        String expBodyUnitsValueR2				=excelReader.getCellData(xlSheetName, 221, 7);
        String expBodyQtyValueR2				=excelReader.getCellData(xlSheetName, 222, 7);
        boolean expBodyLExcessInStocksValueR2	=true;
        String expBodyRateValueR2				=excelReader.getCellData(xlSheetName, 223, 7);
        String expBodyGrossValueR2				=excelReader.getCellData(xlSheetName, 224, 7);
        String expBodyBatchValueR2				=excelReader.getCellData(xlSheetName, 225, 7);
        boolean expBodyBinsValueR2				=true;
        boolean expBodyBins2ValueR2				=true;
        boolean expBodyRmaValueR2				=true;
        
        
        
        excelReader.setCellData(xlfile, xlSheetName, 226, 7, actBodyWarehouseValueR3);
		excelReader.setCellData(xlfile, xlSheetName, 227, 7, actBodyItemValueR3);
		excelReader.setCellData(xlfile, xlSheetName, 228, 7, actBodyUnitsValueR3);
		excelReader.setCellData(xlfile, xlSheetName, 229, 7, actBodyQtyValueR3);
		excelReader.setCellData(xlfile, xlSheetName, 230, 7, actBodyRateValueR3);
		excelReader.setCellData(xlfile, xlSheetName, 231, 7, actBodyGrossValueR3);
		excelReader.setCellData(xlfile, xlSheetName, 232, 7, actBodyBinsValueR3);
		excelReader.setCellData(xlfile, xlSheetName, 233, 7, actBodyBins2ValueR3);
        
        
        String expBodyWarehouseValueR3			=excelReader.getCellData(xlSheetName, 226, 7);
        String expBodyItemValueR3				=excelReader.getCellData(xlSheetName, 227, 7);
        String expBodyUnitsValueR3				=excelReader.getCellData(xlSheetName, 228, 7);
        String expBodyQtyValueR3				=excelReader.getCellData(xlSheetName, 229, 7);
        boolean expBodyLExcessInStocksValueR3	=true;
        String expBodyRateValueR3				=excelReader.getCellData(xlSheetName, 230, 7);
        String expBodyGrossValueR3				=excelReader.getCellData(xlSheetName, 231, 7);
        boolean expBodyBatchValueR3				=true;
        String expBodyBinsValueR3				=excelReader.getCellData(xlSheetName, 232, 7);
        String expBodyBins2ValueR3				=excelReader.getCellData(xlSheetName, 233, 7);
        boolean expBodyRmaValueR3				=true;
      
        excelReader.setCellData(xlfile, xlSheetName, 234, 7, actBodyWarehouseValueR4);
		excelReader.setCellData(xlfile, xlSheetName, 235, 7, actBodyItemValueR4);
		excelReader.setCellData(xlfile, xlSheetName, 236, 7, actBodyUnitsValueR4);
		excelReader.setCellData(xlfile, xlSheetName, 237, 7, actBodyQtyValueR4);
		excelReader.setCellData(xlfile, xlSheetName, 238, 7, actBodyRateValueR4);
		excelReader.setCellData(xlfile, xlSheetName, 239, 7, actBodyGrossValueR4);
		excelReader.setCellData(xlfile, xlSheetName, 220, 7, actBodyRmaValueR4);
		
        
        String expBodyWarehouseValueR4			=excelReader.getCellData(xlSheetName, 234, 7);
        String expBodyItemValueR4				=excelReader.getCellData(xlSheetName, 235, 7);
        String expBodyUnitsValueR4				=excelReader.getCellData(xlSheetName, 236, 7);
        String expBodyQtyValueR4				=excelReader.getCellData(xlSheetName, 237, 7);
        boolean expBodyLExcessInStocksValueR4	=true;
        String expBodyRateValueR4				=excelReader.getCellData(xlSheetName, 238, 7);
        String expBodyGrossValueR4				=excelReader.getCellData(xlSheetName, 239, 7);
        boolean expBodyBatchValueR4				=true;
        boolean expBodyBinsValueR4				=true;
        boolean expBodyBins2ValueR4				=true;
        String expBodyRmaValueR4				=excelReader.getCellData(xlSheetName, 220, 7);
        
        excelReader.setCellData(xlfile, xlSheetName, 241, 7, actQtyAmount);
		excelReader.setCellData(xlfile, xlSheetName, 242, 7, actGrossAmount);
		excelReader.setCellData(xlfile, xlSheetName, 243, 7, actnetAmount);
		
        
        String expQtyAmount					=excelReader.getCellData(xlSheetName, 241, 7);
        String expGrossAmount				=excelReader.getCellData(xlSheetName, 242, 7);
        String expnetAmount					=excelReader.getCellData(xlSheetName, 243, 7);
        
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    	new_CloseBtn.click();
        
		
		System.out.println("************************************* checkSavedStockTransferVoucherWithAllItemsOnPrevious  ********************************************");
		
		System.out.println("documentNumberTxt 			: "+actdocumentNumberTxt		+"  Value Expected : "+expdocumentNumberTxt);
		System.out.println("dateTxt 					: "+actdateTxt					+"  Value Expected : "+expdateTxt);
		System.out.println("HeaderWarehouseValue 		: "+actHeaderWarehouseValue		+"  Value Expected : "+expHeaderWarehouseValue);
		
		System.out.println("BodyWarehouseValueR1 		: "+actBodyWarehouseValueR1			+"  Value Expected : "+expBodyWarehouseValueR1);
		System.out.println("BodyItemValueR1 			: "+actBodyItemValueR1				+"  Value Expected : "+expBodyItemValueR1);
		System.out.println("BodyUnitsValueR1 			: "+actBodyUnitsValueR1				+"  Value Expected : "+expBodyUnitsValueR1);
		System.out.println("BodyQtyValueR1 				: "+actBodyQtyValueR1				+"  Value Expected : "+expBodyQtyValueR1);
		System.out.println("BodyLExcessInStocksValueR1 	: "+actBodyLExcessInStocksValueR1	+"  Value Expected : "+expBodyLExcessInStocksValueR1);
		System.out.println("BodyRateValueR1 			: "+actBodyRateValueR1				+"  Value Expected : "+expBodyRateValueR1);
		System.out.println("BodyGrossValueR1 			: "+actBodyGrossValueR1				+"  Value Expected : "+expBodyGrossValueR1);
		System.out.println("BodyBatchValueR1 			: "+actBodyBatchValueR1				+"  Value Expected : "+expBodyBatchValueR1);
		System.out.println("BodyBinsValueR1 			: "+actBodyBinsValueR1				+"  Value Expected : "+expBodyBinsValueR1);
		System.out.println("BodyBins2ValueR1 			: "+actBodyBins2ValueR1				+"  Value Expected : "+expBodyBins2ValueR1);
		System.out.println("BodyRmaValueR1 				: "+actBodyRmaValueR1				+"  Value Expected : "+expBodyRmaValueR1);
		
		System.out.println("BodyWarehouseValueR2 		: "+actBodyWarehouseValueR2			+"  Value Expected : "+expBodyWarehouseValueR2);
		System.out.println("BodyItemValueR2 			: "+actBodyItemValueR2				+"  Value Expected : "+expBodyItemValueR2);
		System.out.println("BodyUnitsValueR2 			: "+actBodyUnitsValueR2				+"  Value Expected : "+expBodyUnitsValueR2);
		System.out.println("BodyQtyValueR2 				: "+actBodyQtyValueR2				+"  Value Expected : "+expBodyQtyValueR2);
		System.out.println("BodyLExcessInStocksValueR2 	: "+actBodyLExcessInStocksValueR2	+"  Value Expected : "+expBodyLExcessInStocksValueR2);
		System.out.println("BodyRateValueR2 			: "+actBodyRateValueR2				+"  Value Expected : "+expBodyRateValueR2);
		System.out.println("BodyGrossValueR2 			: "+actBodyGrossValueR2				+"  Value Expected : "+expBodyGrossValueR2);
		System.out.println("BodyBatchValueR2 			: "+actBodyBatchValueR2				+"  Value Expected : "+expBodyBatchValueR2);
		System.out.println("BodyBinsValueR2 			: "+actBodyBinsValueR2				+"  Value Expected : "+expBodyBinsValueR2);
		System.out.println("BodyBins2ValueR2 			: "+actBodyBins2ValueR2				+"  Value Expected : "+expBodyBins2ValueR2);
		System.out.println("BodyRmaValueR2 				: "+actBodyRmaValueR2				+"  Value Expected : "+expBodyRmaValueR2);
		
		System.out.println("BodyWarehouseValueR3 		: "+actBodyWarehouseValueR3			+"  Value Expected : "+expBodyWarehouseValueR3);
		System.out.println("BodyItemValueR3 			: "+actBodyItemValueR3				+"  Value Expected : "+expBodyItemValueR3);
		System.out.println("BodyUnitsValueR3 			: "+actBodyUnitsValueR3				+"  Value Expected : "+expBodyUnitsValueR3);
		System.out.println("BodyQtyValueR3 				: "+actBodyQtyValueR3				+"  Value Expected : "+expBodyQtyValueR3);
		System.out.println("BodyLExcessInStocksValueR3 	: "+actBodyLExcessInStocksValueR3	+"  Value Expected : "+expBodyLExcessInStocksValueR3);
		System.out.println("BodyRateValueR3 			: "+actBodyRateValueR3				+"  Value Expected : "+expBodyRateValueR3);
		System.out.println("BodyGrossValueR3 			: "+actBodyGrossValueR3				+"  Value Expected : "+expBodyGrossValueR3);
		System.out.println("BodyBatchValueR3 			: "+actBodyBatchValueR3				+"  Value Expected : "+expBodyBatchValueR3);
		System.out.println("BodyBinsValueR3 			: "+actBodyBinsValueR3				+"  Value Expected : "+expBodyBinsValueR3);
		System.out.println("BodyBins2ValueR3 			: "+actBodyBins2ValueR3				+"  Value Expected : "+expBodyBins2ValueR3);
		System.out.println("BodyRmaValueR3 				: "+actBodyRmaValueR3				+"  Value Expected : "+expBodyRmaValueR3);
		
		System.out.println("BodyWarehouseValueR4 		: "+actBodyWarehouseValueR4			+"  Value Expected : "+expBodyWarehouseValueR4);
		System.out.println("BodyItemValueR4 			: "+actBodyItemValueR4				+"  Value Expected : "+expBodyItemValueR4);
		System.out.println("BodyUnitsValueR4 			: "+actBodyUnitsValueR4				+"  Value Expected : "+expBodyUnitsValueR4);
		System.out.println("BodyQtyValueR4 				: "+actBodyQtyValueR4				+"  Value Expected : "+expBodyQtyValueR4);
		System.out.println("BodyLExcessInStocksValueR4 	: "+actBodyLExcessInStocksValueR4	+"  Value Expected : "+expBodyLExcessInStocksValueR4);
		System.out.println("BodyRateValueR4 			: "+actBodyRateValueR4				+"  Value Expected : "+expBodyRateValueR4);
		System.out.println("BodyGrossValueR4 			: "+actBodyGrossValueR4				+"  Value Expected : "+expBodyGrossValueR4);
		System.out.println("BodyBatchValueR4 			: "+actBodyBatchValueR4				+"  Value Expected : "+expBodyBatchValueR4);
		System.out.println("BodyBinsValueR4 			: "+actBodyBinsValueR4				+"  Value Expected : "+expBodyBinsValueR4);
		System.out.println("BodyBins2ValueR4 			: "+actBodyBins2ValueR4				+"  Value Expected : "+expBodyBins2ValueR4);
		System.out.println("BodyRmaValueR4 				: "+actBodyRmaValueR4				+"  Value Expected : "+expBodyRmaValueR4);
		
		
		System.out.println("QtyAmount 					: "+actQtyAmount				+"  Value Expected : "+expQtyAmount);
		System.out.println("GrossAmount 				: "+actGrossAmount				+"  Value Expected : "+expGrossAmount);
		System.out.println("netAmount 					: "+actnetAmount				+"  Value Expected : "+expnetAmount);
		
		
		boolean Displayresult = actBodyLExcessInStocksValueR1==expBodyLExcessInStocksValueR1 && actBodyBinsValueR1==expBodyBinsValueR1 && actBodyBins2ValueR1==expBodyBins2ValueR1 && actBodyRmaValueR1==expBodyRmaValueR1
				                && actBodyBinsValueR2==expBodyBinsValueR2 && actBodyBins2ValueR2==expBodyBins2ValueR2 && actBodyRmaValueR2==expBodyRmaValueR2
				                && actBodyLExcessInStocksValueR2==expBodyLExcessInStocksValueR2 && actBodyLExcessInStocksValueR3==expBodyLExcessInStocksValueR3 
				                && actBodyBatchValueR3==expBodyBatchValueR3 && actBodyRmaValueR3==expBodyRmaValueR3 && actBodyRmaValueR3==expBodyRmaValueR3
				                && actBodyBatchValueR4==expBodyBatchValueR4;
		
		
	    if(actdocumentNumberTxt.equalsIgnoreCase(expdocumentNumberTxt) && actdateTxt.equalsIgnoreCase(expdateTxt)
	    		&& actHeaderWarehouseValue.equalsIgnoreCase(expHeaderWarehouseValue)
	    		
	    		&& actBodyWarehouseValueR1.equalsIgnoreCase(expBodyWarehouseValueR1) && actBodyItemValueR1.equalsIgnoreCase(expBodyItemValueR1)
	    		&& actBodyUnitsValueR1.equalsIgnoreCase(expBodyUnitsValueR1) && actBodyQtyValueR1.equalsIgnoreCase(expBodyQtyValueR1)
	    		&& actBodyRateValueR1.equalsIgnoreCase(expBodyRateValueR1) && actBodyGrossValueR1.equalsIgnoreCase(expBodyGrossValueR1) 
	    		
	    		&& actBodyWarehouseValueR2.equalsIgnoreCase(expBodyWarehouseValueR2) && actBodyItemValueR2.equalsIgnoreCase(expBodyItemValueR2)
	    		&& actBodyUnitsValueR2.equalsIgnoreCase(expBodyUnitsValueR2) && actBodyQtyValueR2.equalsIgnoreCase(expBodyQtyValueR2)
	    		&& actBodyRateValueR2.equalsIgnoreCase(expBodyRateValueR2)
	    		&& actBodyGrossValueR2.equalsIgnoreCase(expBodyGrossValueR2) && actBodyBatchValueR2.equalsIgnoreCase(expBodyBatchValueR2)
	    		&& 
	    		
				actBodyWarehouseValueR3.equalsIgnoreCase(expBodyWarehouseValueR3) && actBodyItemValueR3.equalsIgnoreCase(expBodyItemValueR3)
	    		&& actBodyUnitsValueR3.equalsIgnoreCase(expBodyUnitsValueR3) && actBodyQtyValueR3.equalsIgnoreCase(expBodyQtyValueR3)
	    		&& actBodyRateValueR3.equalsIgnoreCase(expBodyRateValueR3)
	    		&& actBodyGrossValueR3.equalsIgnoreCase(expBodyGrossValueR3) 
	    		&& actBodyBinsValueR3.equalsIgnoreCase(expBodyBinsValueR3) && actBodyBins2ValueR3.equalsIgnoreCase(expBodyBins2ValueR3)
	    		
	    		
				&& actBodyWarehouseValueR4.equalsIgnoreCase(expBodyWarehouseValueR4) && actBodyItemValueR4.equalsIgnoreCase(expBodyItemValueR4)
	    		&& actBodyUnitsValueR4.equalsIgnoreCase(expBodyUnitsValueR4) && actBodyQtyValueR4.equalsIgnoreCase(expBodyQtyValueR4)
	    		&& actBodyRateValueR4.equalsIgnoreCase(expBodyRateValueR4)
	    		&& actBodyGrossValueR4.equalsIgnoreCase(expBodyGrossValueR4)
	    		&& actBodyRmaValueR4.equalsIgnoreCase(expBodyRmaValueR4)
	    		
	    		&& actQtyAmount.equalsIgnoreCase(expQtyAmount) && actGrossAmount.equalsIgnoreCase(expGrossAmount)
	    		&& actnetAmount.equalsIgnoreCase(expnetAmount))
		{
			
	    	excelReader.setCellData(xlfile, xlSheetName, 209, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 209, 9, resFail);
			return false;
		}
    }
	
	
	
	
		
	public boolean checkStockTransferEntryPageCopyAndPasteFromClipBoardOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    {
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
	     newBtn.click();
	        
	     boolean loading = checkLoadingMessage();
	     
	     Thread.sleep(2000);
	     
	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
	     previousBtn.click();
	     
	     
	    boolean loading1 = checkLoadingMessage();
	     
	     
    	Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
		toggleBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(copyToClipBoardOption));
		copyToClipBoardOption.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_newBtn));
		new_newBtn.click();
		
		 
		 Thread.sleep(2000);
		 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
		toggleBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pasteFromClipBoardOption));
		pasteFromClipBoardOption.click();
		
		checkUserFriendlyMessage();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_footerExpandBtn));
		new_footerExpandBtn.click();
    

		// Actual
		
		String actdocumentNumberTxt			=documentNumberTxt.getAttribute("value");
		String actdateTxt					=dateTxt.getAttribute("value");
		String actHeaderWarehouseValue		=stockTransferheaderWarehouse1Txt.getAttribute("value");
		
        
        String actBodyItemValueR1				=select1stRow_2ndColumn.getText();
        String actBodyUnitsValueR1				=select1stRow_3rdColumn.getText();
        String actBodyQtyValueR1				=select1stRow_4thColumn.getText();
        String actBodyRateValueR1				=select1stRow_6thColumn.getText();
        String actBodyGrossValueR1				=select1stRow_7thColumn.getText();
       
        
        String actBodyItemValueR2				=select2ndRow_2ndColumn.getText();
        String actBodyUnitsValueR2				=select2ndRow_3rdColumn.getText();
        String actBodyQtyValueR2				=select2ndRow_4thColumn.getText();
        String actBodyRateValueR2				=select2ndRow_6thColumn.getText();
        String actBodyGrossValueR2				=select2ndRow_7thColumn.getText();
       
        String actBodyItemValueR3				=select3rdRow_2ndColumn.getText();
        String actBodyUnitsValueR3				=select3rdRow_3rdColumn.getText();
        String actBodyQtyValueR3				=select3rdRow_4thColumn.getText();
        String actBodyRateValueR3				=select3rdRow_6thColumn.getText();
        String actBodyGrossValueR3				=select3rdRow_7thColumn.getText();
        
        
        String actBodyItemValueR4				=select4thRow_2ndColumn.getText();
        String actBodyUnitsValueR4				=select4thRow_3rdColumn.getText();
        String actBodyQtyValueR4				=select4thRow_4thColumn.getText();
        String actBodyRateValueR4				=select4thRow_6thColumn.getText();
        String actBodyGrossValueR4				=select4thRow_7thColumn.getText();
     
        
        DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Date date=new Date();
		System.out.println(df.format(date));
		
		
		String actBodyWarehouse=select1stRow_1stColumn.getText();
		String expBodyWarehouse=excelReader.getCellData(xlSheetName, 244, 7);
    	
    	excelReader.setCellData(xlfile, xlSheetName, 244, 8, actBodyWarehouse);
		
    	System.out.println(" Body Warehouse After Copy Document : "+actBodyWarehouse +" Value Expected : "+expBodyWarehouse);
    	
		
        // Expected
		
        String expdocumentNumberTxt				=excelReader.getCellData(xlSheetName, 245, 7);
		String expdateTxt						=df.format(date);
		String expHeaderWarehouseValue			=excelReader.getCellData(xlSheetName, 247, 7);
		
		
		excelReader.setCellData(xlfile, xlSheetName, 245, 7, actdocumentNumberTxt);
		
		excelReader.setCellData(xlfile, xlSheetName, 246, 8, actdateTxt);
		excelReader.setCellData(xlfile, xlSheetName, 246, 7, expdateTxt);
		
		excelReader.setCellData(xlfile, xlSheetName, 247, 7, actHeaderWarehouseValue);
		excelReader.setCellData(xlfile, xlSheetName, 248, 7, actBodyItemValueR1);
		excelReader.setCellData(xlfile, xlSheetName, 249, 7, actBodyUnitsValueR1);
		excelReader.setCellData(xlfile, xlSheetName, 250, 7, actBodyQtyValueR1);
		excelReader.setCellData(xlfile, xlSheetName, 251, 7, actBodyRateValueR1);
		excelReader.setCellData(xlfile, xlSheetName, 252, 7, actBodyGrossValueR1);
		
        String expBodyItemValueR1				=excelReader.getCellData(xlSheetName, 214, 7);
        String expBodyUnitsValueR1				=excelReader.getCellData(xlSheetName, 215, 7);
        String expBodyQtyValueR1				=excelReader.getCellData(xlSheetName, 216, 7);
        String expBodyRateValueR1				=excelReader.getCellData(xlSheetName, 217, 7);
        String expBodyGrossValueR1				=excelReader.getCellData(xlSheetName, 218, 7);
        
      
		excelReader.setCellData(xlfile, xlSheetName, 220, 7, actBodyItemValueR2);
		excelReader.setCellData(xlfile, xlSheetName, 221, 7, actBodyUnitsValueR2);
		excelReader.setCellData(xlfile, xlSheetName, 222, 7, actBodyQtyValueR2);
		excelReader.setCellData(xlfile, xlSheetName, 223, 7, actBodyRateValueR2);
		excelReader.setCellData(xlfile, xlSheetName, 224, 7, actBodyGrossValueR2);
		
        String expBodyItemValueR2				=excelReader.getCellData(xlSheetName, 220, 7);
        String expBodyUnitsValueR2				=excelReader.getCellData(xlSheetName, 221, 7);
        String expBodyQtyValueR2				=excelReader.getCellData(xlSheetName, 222, 7);
        String expBodyRateValueR2				=excelReader.getCellData(xlSheetName, 223, 7);
        String expBodyGrossValueR2				=excelReader.getCellData(xlSheetName, 224, 7);
        String expBodyBatchValueR2				=excelReader.getCellData(xlSheetName, 225, 7);
      
        
        
        
		excelReader.setCellData(xlfile, xlSheetName, 227, 7, actBodyItemValueR3);
		excelReader.setCellData(xlfile, xlSheetName, 228, 7, actBodyUnitsValueR3);
		excelReader.setCellData(xlfile, xlSheetName, 229, 7, actBodyQtyValueR3);
		excelReader.setCellData(xlfile, xlSheetName, 230, 7, actBodyRateValueR3);
		excelReader.setCellData(xlfile, xlSheetName, 231, 7, actBodyGrossValueR3);
	
        
        
        String expBodyItemValueR3				=excelReader.getCellData(xlSheetName, 227, 7);
        String expBodyUnitsValueR3				=excelReader.getCellData(xlSheetName, 228, 7);
        String expBodyQtyValueR3				=excelReader.getCellData(xlSheetName, 229, 7);
        String expBodyRateValueR3				=excelReader.getCellData(xlSheetName, 230, 7);
        String expBodyGrossValueR3				=excelReader.getCellData(xlSheetName, 231, 7);
       
       
		excelReader.setCellData(xlfile, xlSheetName, 235, 7, actBodyItemValueR4);
		excelReader.setCellData(xlfile, xlSheetName, 236, 7, actBodyUnitsValueR4);
		excelReader.setCellData(xlfile, xlSheetName, 237, 7, actBodyQtyValueR4);
		excelReader.setCellData(xlfile, xlSheetName, 238, 7, actBodyRateValueR4);
		excelReader.setCellData(xlfile, xlSheetName, 239, 7, actBodyGrossValueR4);
		
		
        
       
        String expBodyItemValueR4				=excelReader.getCellData(xlSheetName, 235, 7);
        String expBodyUnitsValueR4				=excelReader.getCellData(xlSheetName, 236, 7);
        String expBodyQtyValueR4				=excelReader.getCellData(xlSheetName, 237, 7);
        String expBodyRateValueR4				=excelReader.getCellData(xlSheetName, 238, 7);
        String expBodyGrossValueR4				=excelReader.getCellData(xlSheetName, 239, 7);
        
        
        String expQtyAmount					=excelReader.getCellData(xlSheetName, 241, 7);
        String expGrossAmount				=excelReader.getCellData(xlSheetName, 242, 7);
        String expnetAmount					=excelReader.getCellData(xlSheetName, 243, 7);
        
		
		System.out.println("************************************* checkSavedStockTransferVoucherWithAllItemsOnPrevious  ********************************************");
		
		System.out.println("documentNumberTxt 			: "+actdocumentNumberTxt		+"  Value Expected : "+expdocumentNumberTxt);
		System.out.println("dateTxt 					: "+actdateTxt					+"  Value Expected : "+expdateTxt);
		System.out.println("HeaderWarehouseValue 		: "+actHeaderWarehouseValue		+"  Value Expected : "+expHeaderWarehouseValue);
		
		
		System.out.println("BodyItemValueR1 			: "+actBodyItemValueR1				+"  Value Expected : "+expBodyItemValueR1);
		System.out.println("BodyUnitsValueR1 			: "+actBodyUnitsValueR1				+"  Value Expected : "+expBodyUnitsValueR1);
		System.out.println("BodyQtyValueR1 				: "+actBodyQtyValueR1				+"  Value Expected : "+expBodyQtyValueR1);
		
		System.out.println("BodyRateValueR1 			: "+actBodyRateValueR1				+"  Value Expected : "+expBodyRateValueR1);
		System.out.println("BodyGrossValueR1 			: "+actBodyGrossValueR1				+"  Value Expected : "+expBodyGrossValueR1);
		
		
		
		System.out.println("BodyItemValueR2 			: "+actBodyItemValueR2				+"  Value Expected : "+expBodyItemValueR2);
		System.out.println("BodyUnitsValueR2 			: "+actBodyUnitsValueR2				+"  Value Expected : "+expBodyUnitsValueR2);
		System.out.println("BodyQtyValueR2 				: "+actBodyQtyValueR2				+"  Value Expected : "+expBodyQtyValueR2);
		
		System.out.println("BodyRateValueR2 			: "+actBodyRateValueR2				+"  Value Expected : "+expBodyRateValueR2);
		System.out.println("BodyGrossValueR2 			: "+actBodyGrossValueR2				+"  Value Expected : "+expBodyGrossValueR2);
		
		
		System.out.println("BodyItemValueR3 			: "+actBodyItemValueR3				+"  Value Expected : "+expBodyItemValueR3);
		System.out.println("BodyUnitsValueR3 			: "+actBodyUnitsValueR3				+"  Value Expected : "+expBodyUnitsValueR3);
		System.out.println("BodyQtyValueR3 				: "+actBodyQtyValueR3				+"  Value Expected : "+expBodyQtyValueR3);
		
		System.out.println("BodyRateValueR3 			: "+actBodyRateValueR3				+"  Value Expected : "+expBodyRateValueR3);
		System.out.println("BodyGrossValueR3 			: "+actBodyGrossValueR3				+"  Value Expected : "+expBodyGrossValueR3);
		
		
		
		System.out.println("BodyItemValueR4 			: "+actBodyItemValueR4				+"  Value Expected : "+expBodyItemValueR4);
		System.out.println("BodyUnitsValueR4 			: "+actBodyUnitsValueR4				+"  Value Expected : "+expBodyUnitsValueR4);
		System.out.println("BodyQtyValueR4 				: "+actBodyQtyValueR4				+"  Value Expected : "+expBodyQtyValueR4);
		
		System.out.println("BodyRateValueR4 			: "+actBodyRateValueR4				+"  Value Expected : "+expBodyRateValueR4);
		System.out.println("BodyGrossValueR4 			: "+actBodyGrossValueR4				+"  Value Expected : "+expBodyGrossValueR4);
		
		
		
	    if(actdocumentNumberTxt.equalsIgnoreCase(expdocumentNumberTxt) && actdateTxt.equalsIgnoreCase(expdateTxt)
	    		&& actHeaderWarehouseValue.equalsIgnoreCase(expHeaderWarehouseValue) && actBodyWarehouse.equalsIgnoreCase(expBodyWarehouse)
	    		
	    		&& actBodyItemValueR1.equalsIgnoreCase(expBodyItemValueR1)
	    		&& actBodyUnitsValueR1.equalsIgnoreCase(expBodyUnitsValueR1) && actBodyQtyValueR1.equalsIgnoreCase(expBodyQtyValueR1)
	    		&& actBodyRateValueR1.equalsIgnoreCase(expBodyRateValueR1) && actBodyGrossValueR1.equalsIgnoreCase(expBodyGrossValueR1) 
	    		
	    		&& actBodyItemValueR2.equalsIgnoreCase(expBodyItemValueR2)
	    		&& actBodyUnitsValueR2.equalsIgnoreCase(expBodyUnitsValueR2) && actBodyQtyValueR2.equalsIgnoreCase(expBodyQtyValueR2)
	    		&& actBodyRateValueR2.equalsIgnoreCase(expBodyRateValueR2)
	    		&& actBodyGrossValueR2.equalsIgnoreCase(expBodyGrossValueR2) 
	    		&& 
	    		
				actBodyItemValueR3.equalsIgnoreCase(expBodyItemValueR3)
	    		&& actBodyUnitsValueR3.equalsIgnoreCase(expBodyUnitsValueR3) && actBodyQtyValueR3.equalsIgnoreCase(expBodyQtyValueR3)
	    		&& actBodyRateValueR3.equalsIgnoreCase(expBodyRateValueR3)
	    		&& actBodyGrossValueR3.equalsIgnoreCase(expBodyGrossValueR3) 
	    		
	    		
	    		
				&& actBodyItemValueR4.equalsIgnoreCase(expBodyItemValueR4)
	    		&& actBodyUnitsValueR4.equalsIgnoreCase(expBodyUnitsValueR4) && actBodyQtyValueR4.equalsIgnoreCase(expBodyQtyValueR4)
	    		&& actBodyRateValueR4.equalsIgnoreCase(expBodyRateValueR4)
	    		&& actBodyGrossValueR4.equalsIgnoreCase(expBodyGrossValueR4))
		{
			
	    	excelReader.setCellData(xlfile, xlSheetName, 244, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 244, 9, resFail);
			return false;
		}
    }
	
	
	
	    public boolean checkSelectingWarehouseFromBodyInStockTransferAndClickOnSaveAlongWithSuspendCheck() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	    {
	    	
	    	excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String docno=documentNumberTxt.getAttribute("value");
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			   
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_BodyWarehouse2Txt));
			enter_BodyWarehouse2Txt.sendKeys(Keys.END);
			enter_BodyWarehouse2Txt.sendKeys(Keys.SHIFT,Keys.HOME);
			Thread.sleep(2000);
			
			enter_BodyWarehouse2Txt.sendKeys(Keys.SPACE);
				
			int warehousecount1=wareHouseBodyListCount.size();
			
			System.err.println(warehousecount1);
				
			for(int i=0 ; i < warehousecount1 ;i++)
			{
				String data=wareHouseBodyListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 269, 6)))
				{
					wareHouseBodyListCount.get(i).click();
					
					break;
				}
			}
					
			enter_BodyWarehouse2Txt.sendKeys(Keys.TAB);
	    	

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
			select2ndRow_1stColumn.click();
			   
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_BodyWarehouse2Txt));
			enter_BodyWarehouse2Txt.sendKeys(Keys.END);
			enter_BodyWarehouse2Txt.sendKeys(Keys.SHIFT,Keys.HOME);
			Thread.sleep(2000);
			
			enter_BodyWarehouse2Txt.sendKeys(Keys.SPACE);
				
			int warehousecount2=wareHouseBodyListCount.size();
			
			System.err.println(warehousecount2);
				
			for(int i=0 ; i < warehousecount1 ;i++)
			{
				String data=wareHouseBodyListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 269, 6)))
				{
					wareHouseBodyListCount.get(i).click();
					
					break;
				}
			}
					
			enter_BodyWarehouse2Txt.sendKeys(Keys.TAB);
	    	

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
			select3rdRow_1stColumn.click();
			   
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_BodyWarehouse2Txt));
			enter_BodyWarehouse2Txt.sendKeys(Keys.END);
			enter_BodyWarehouse2Txt.sendKeys(Keys.SHIFT,Keys.HOME);
			Thread.sleep(2000);
			
			enter_BodyWarehouse2Txt.sendKeys(Keys.SPACE);
				
			int warehousecount3=wareHouseBodyListCount.size();
			
			System.err.println(warehousecount3);
				
			for(int i=0 ; i < warehousecount1 ;i++)
			{
				String data=wareHouseBodyListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 269, 6)))
				{
					wareHouseBodyListCount.get(i).click();
					
					break;
				}
			}
					
			enter_BodyWarehouse2Txt.sendKeys(Keys.TAB);
	    	
	    	
			

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_1stColumn));
			select4thRow_1stColumn.click();
			   
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_BodyWarehouse2Txt));
			enter_BodyWarehouse2Txt.sendKeys(Keys.END);
			enter_BodyWarehouse2Txt.sendKeys(Keys.SHIFT,Keys.HOME);
			Thread.sleep(2000);
			
			enter_BodyWarehouse2Txt.sendKeys(Keys.SPACE);
				
			int warehousecount4=wareHouseBodyListCount.size();
			
			System.err.println(warehousecount4);
				
			for(int i=0 ; i < warehousecount1 ;i++)
			{
				String data=wareHouseBodyListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 269, 6)))
				{
					wareHouseBodyListCount.get(i).click();
					
					break;
				}
			}
					
			enter_BodyWarehouse2Txt.sendKeys(Keys.TAB);
	    	

			// Second Row BAtch WA Item
			
			Thread.sleep(3000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_8thColumn));
			select2ndRow_8thColumn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
			batchPickOnFIFOIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
			
			// Third Row BIn Finished Goods Item
			
			Thread.sleep(3000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_9thColumn));
			select3rdRow_9thColumn.click();
			
			Thread.sleep(2000);
			// Bin Outward
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
			binAutoAllocateBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
			binOkBtn.click();	
			
			Thread.sleep(2000);
			// Bin Inward
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
			binAutoAllocateBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
			binOkBtn.click();	
			
			// Fourth Row Rma R Item
			
			Thread.sleep(2000);
	            
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_11thColumn));
			select4thRow_11thColumn.click();
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardExpandBtn));
			rmaoutwardExpandBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAHeaderChkBox));
			searchRMAHeaderChkBox.click();	
			
			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAOkBtn));
			searchRMAOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardOkBtn));
			rmaoutwardOkBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
			enter_RMA.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();	

            boolean savingMessage=checkVoucherSavingMessage(docno);
			
			String actSavingMessage=Boolean.toString(savingMessage);
			String expSavingMessage =excelReader.getCellData(xlSheetName, 270, 7);
	    	
	    	excelReader.setCellData(xlfile, xlSheetName, 270, 8, actSavingMessage);
			
	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
			previousBtn.click();
	    	
			boolean loadingMessaege=checkLoadingMessage();
	    	
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
			new_SuspendBtn.click();
			
			 boolean savingMessage1=checkVoucherSavingMessage(docno);
	    	
			if (actSavingMessage.equalsIgnoreCase(expSavingMessage))
			{
				System.out.println(" Voucher Saved Successfully");
				excelReader.setCellData(xlfile, xlSheetName, 268, 9, resPass);
				return true ;
			}
			else 
			{
				System.out.println("Voucher Not Saved Successfully");
				excelReader.setCellData(xlfile, xlSheetName, 268, 9, resFail);
				return false ;
			}
		}
		
		
			
	public boolean checkCopyDocumentScreenOptionsInStockTransfer() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
		toggleBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(copyDocumentOption));
		copyDocumentOption.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cd_vouchertypeTxt));
		
		boolean actcd_vouchertypeTxt		=cd_vouchertypeTxt.isDisplayed();
		boolean actcd_searchOnDropdown1		=cd_searchOnDropdown1.isDisplayed();
		boolean actcd_searchOnDropdown2		=cd_searchOnDropdown2.isDisplayed();
		boolean actcd_searchTxt				=cd_searchTxt.isDisplayed();
		boolean actcd_refreshBtn			=cd_refreshBtn.isDisplayed();
		boolean actcd_filterBtn				=cd_filterBtn.isDisplayed();
		boolean actcd_HeaderChkBox			=cd_HeaderChkBox.isDisplayed();
		boolean actcd_FirstChkBox			=cd_FirstChkBox.isDisplayed();
		boolean actcd_clubsimilarTransChkBox=cd_clubsimilarTransChkBox.isDisplayed();
		boolean actcd_SelectallBtn			=cd_SelectallBtn.isDisplayed();
		boolean actcd_firstBtn				=cd_firstBtn.isDisplayed();
		boolean actcd_PreviousBtn			=cd_PreviousBtn.isDisplayed();
		boolean actcd_PageNo				=cd_PageNo.isDisplayed();
		boolean actcd_nextBtn				=cd_nextBtn.isDisplayed();
		boolean actcd_LastBtn				=cd_LastBtn.isDisplayed();
		boolean actcd_OkBtn					=cd_OkBtn.isDisplayed();
		boolean actcd_CancelBtn				=cd_CancelBtn.isDisplayed();
		
		
		boolean expcd_vouchertypeTxt		=true;
		boolean expcd_searchOnDropdown1		=true;
		boolean expcd_searchOnDropdown2		=true;
		boolean expcd_searchTxt				=true;
		boolean expcd_refreshBtn			=true;
		boolean expcd_filterBtn				=true;
		boolean expcd_HeaderChkBox			=true;
		boolean expcd_FirstChkBox			=true;
		boolean expcd_clubsimilarTransChkBox=true;
		boolean expcd_SelectallBtn			=true;
		boolean expcd_firstBtn				=true;
		boolean expcd_PreviousBtn			=true;
		boolean expcd_PageNo				=true;
		boolean expcd_nextBtn				=true;
		boolean expcd_LastBtn				=true;
		boolean expcd_OkBtn					=true;
		boolean expcd_CancelBtn				=true;
		
		System.out.println("************************************* checkCopyDocumentScreenOptionsInStockTransfer  *********************************");
		
		System.out.println("Copy Document Voucher type                : "+actcd_vouchertypeTxt			+"  Value Expected : "+expcd_vouchertypeTxt);
		System.out.println("Copy Document Search dropdown 1           : "+actcd_searchOnDropdown1		+"  Value Expected : "+expcd_searchOnDropdown1);
		System.out.println("Copy Document Search dropdown 2           : "+actcd_searchOnDropdown2		+"  Value Expected : "+expcd_searchOnDropdown2);
		System.out.println("Copy Document Search text                 : "+actcd_searchTxt				+"  Value Expected : "+expcd_searchTxt);
		System.out.println("Copy Document Refresh                     : "+actcd_refreshBtn				+"  Value Expected : "+expcd_refreshBtn);
		System.out.println("Copy Document Filter                      : "+actcd_filterBtn				+"  Value Expected : "+expcd_filterBtn);
		System.out.println("Copy Document Header Chk box              : "+actcd_HeaderChkBox			+"  Value Expected : "+expcd_HeaderChkBox);
		System.out.println("Copy Document First Chk Box               : "+actcd_FirstChkBox				+"  Value Expected : "+expcd_FirstChkBox);
		System.out.println("Copy Document Club Similar Trans Chk Box  : "+actcd_clubsimilarTransChkBox	+"  Value Expected : "+expcd_clubsimilarTransChkBox);
		System.out.println("Copy Document Select All                  : "+actcd_SelectallBtn			+"  Value Expected : "+expcd_SelectallBtn);
		System.out.println("Copy Document first Button                : "+actcd_firstBtn				+"  Value Expected : "+expcd_firstBtn);
		System.out.println("Copy Document Previous Button             : "+actcd_PreviousBtn				+"  Value Expected : "+expcd_PreviousBtn);
		System.out.println("Copy Document Page No                     : "+actcd_PageNo					+"  Value Expected : "+expcd_PageNo);
		System.out.println("Copy Document Next Button                 : "+actcd_nextBtn					+"  Value Expected : "+expcd_nextBtn);
		System.out.println("Copy Document last Button                 : "+actcd_LastBtn					+"  Value Expected : "+expcd_LastBtn);
		System.out.println("Copy Document Ok Button                   : "+actcd_OkBtn					+"  Value Expected : "+expcd_OkBtn);
		System.out.println("Copy Document cancel Button               : "+actcd_CancelBtn				+"  Value Expected : "+expcd_CancelBtn);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cd_vouchertypeTxt));
		
		
		boolean result=actcd_vouchertypeTxt==expcd_vouchertypeTxt && actcd_searchOnDropdown1==expcd_searchOnDropdown1
				&& actcd_searchOnDropdown2==expcd_searchOnDropdown2 && actcd_searchTxt==expcd_searchTxt
				&& actcd_refreshBtn==expcd_refreshBtn && actcd_filterBtn==expcd_filterBtn
				&& actcd_HeaderChkBox==expcd_HeaderChkBox && actcd_FirstChkBox==expcd_FirstChkBox
				&& actcd_clubsimilarTransChkBox==expcd_clubsimilarTransChkBox && actcd_SelectallBtn==expcd_SelectallBtn
				&& actcd_firstBtn==expcd_firstBtn && actcd_PreviousBtn==expcd_PreviousBtn
				&& actcd_PageNo==expcd_PageNo && actcd_nextBtn==expcd_nextBtn
				&& actcd_LastBtn==expcd_LastBtn && actcd_OkBtn==expcd_OkBtn && actcd_CancelBtn==expcd_CancelBtn;
		
		
		String actDisplayResult=Boolean.toString(result);
		String expDisplay=excelReader.getCellData(xlSheetName, 272, 7);
    	
    	excelReader.setCellData(xlfile, xlSheetName, 272, 8, actDisplayResult);
		
		
		if(actDisplayResult.equalsIgnoreCase(expDisplay))
		{
			System.out.println("Test Pass : Copy Document Options Are As Expected");
			excelReader.setCellData(xlfile, xlSheetName, 271, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Copy Document Options Are NOT As Expected");
			excelReader.setCellData(xlfile, xlSheetName, 271, 9, resFail);
			return false;
		}
	}

		
	
	public boolean checkFirstRowCheckboxInCopyDocumentInStockTransfer() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cd_FirstChkBox));
		cd_FirstChkBox.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cd_R1C2));

		String actCopyDocWareHouseR1		=cd_R1C2.getText();
		String actCopyDocItemR1				=cd_R1C3.getText();
		String actCopyDocUnitsR1			=cd_R1C4.getText();
		String actCopyDocQtyR1				=cd_R1C5.getText();
		boolean actCopyDocLExcessInStocksR1	=cd_R1C6.getText().isEmpty();
		String actCopyDocRateR1				=cd_R1C7.getText();
		String actCopyDocGrossR1			=cd_R1C8.getText();
		boolean actCopyDocBatchR1			=cd_R1C9.getText().isEmpty();
		boolean actCopyDocBinsR1			=cd_R1C10.getText().isEmpty();
		boolean actCopyDocBins2R1			=cd_R1C11.getText().isEmpty();
		boolean actCopyDocRmaR1				=cd_R1C12.getText().isEmpty();
		
		String actCopyDocWareHouseR2		=cd_R2C2.getText();
		String actCopyDocItemR2				=cd_R2C3.getText();
		String actCopyDocUnitsR2			=cd_R2C4.getText();
		String actCopyDocQtyR2				=cd_R2C5.getText();
		boolean actCopyDocLExcessInStocksR2	=cd_R2C6.getText().isEmpty();
		String actCopyDocRateR2				=cd_R2C7.getText();
		String actCopyDocGrossR2			=cd_R2C8.getText();
		String actCopyDocBatchR2			=cd_R2C9.getText();
		boolean actCopyDocBinsR2			=cd_R2C10.getText().isEmpty();
		boolean actCopyDocBins2R2			=cd_R2C11.getText().isEmpty();
		boolean actCopyDocRmaR2				=cd_R2C12.getText().isEmpty();
		
		String actCopyDocWareHouseR3		=cd_R3C2.getText();
		String actCopyDocItemR3				=cd_R3C3.getText();
		String actCopyDocUnitsR3			=cd_R3C4.getText();
		String actCopyDocQtyR3				=cd_R3C5.getText();
		boolean actCopyDocLExcessInStocksR3	=cd_R3C6.getText().isEmpty();
		String actCopyDocRateR3				=cd_R3C7.getText();
		String actCopyDocGrossR3			=cd_R3C8.getText();
		boolean actCopyDocBatchR3			=cd_R3C9.getText().isEmpty();
		String actCopyDocBinsR3				=cd_R3C10.getText();
		String actCopyDocBins2R3			=cd_R3C11.getText();
		boolean actCopyDocRmaR3				=cd_R3C12.getText().isEmpty();
		
		String actCopyDocWareHouseR4		=cd_R4C2.getText();
		String actCopyDocItemR4				=cd_R4C3.getText();
		String actCopyDocUnitsR4			=cd_R4C4.getText();
		String actCopyDocQtyR4				=cd_R4C5.getText();
		boolean actCopyDocLExcessInStocksR4	=cd_R4C6.getText().isEmpty();
		String actCopyDocRateR4				=cd_R4C7.getText();
		String actCopyDocGrossR4			=cd_R4C8.getText();
		boolean actCopyDocBatchR4			=cd_R4C9.getText().isEmpty();
		boolean actCopyDocBinsR4			=cd_R4C10.getText().isEmpty();
		boolean actCopyDocBins2R4			=cd_R4C11.getText().isEmpty();
		String actCopyDocRmaR4				=cd_R4C12.getText();
		
		
		// expected values
		String expCopyDocWareHouseR1		=excelReader.getCellData(xlSheetName, 274, 7);
		String expCopyDocItemR1				=excelReader.getCellData(xlSheetName, 275, 7);
		String expCopyDocUnitsR1			=excelReader.getCellData(xlSheetName, 276, 7);
		String expCopyDocQtyR1				=excelReader.getCellData(xlSheetName, 277, 7);
		boolean expCopyDocLExcessInStocksR1	=true;
		String expCopyDocRateR1				=excelReader.getCellData(xlSheetName, 278, 7);
		String expCopyDocGrossR1			=excelReader.getCellData(xlSheetName, 279, 7);
		boolean expCopyDocBatchR1			=true;
		boolean expCopyDocBinsR1			=true;
		boolean expCopyDocBins2R1			=true;
		boolean expCopyDocRmaR1				=true;
		
		excelReader.setCellData(xlfile, xlSheetName, 274, 8, actCopyDocWareHouseR1);
		excelReader.setCellData(xlfile, xlSheetName, 275, 8, actCopyDocItemR1);
		excelReader.setCellData(xlfile, xlSheetName, 276, 8, actCopyDocUnitsR1);
		excelReader.setCellData(xlfile, xlSheetName, 277, 8, actCopyDocQtyR1);
		excelReader.setCellData(xlfile, xlSheetName, 278, 8, actCopyDocRateR1);
		excelReader.setCellData(xlfile, xlSheetName, 279, 8, actCopyDocGrossR1);
		
		
		
		
		String expCopyDocWareHouseR2		=excelReader.getCellData(xlSheetName, 280, 7);
		String expCopyDocItemR2				=excelReader.getCellData(xlSheetName, 281, 7);
		String expCopyDocUnitsR2			=excelReader.getCellData(xlSheetName, 282, 7);
		String expCopyDocQtyR2				=excelReader.getCellData(xlSheetName, 283, 7);
		boolean expCopyDocLExcessInStocksR2	=true;
		String expCopyDocRateR2				=excelReader.getCellData(xlSheetName, 284, 7);
		String expCopyDocGrossR2			=excelReader.getCellData(xlSheetName, 285, 7);
		String expCopyDocBatchR2			=excelReader.getCellData(xlSheetName, 286, 7);
		boolean expCopyDocBinsR2			=true;
		boolean expCopyDocBins2R2			=true;
		boolean expCopyDocRmaR2				=true;
		
		excelReader.setCellData(xlfile, xlSheetName, 280, 8, actCopyDocWareHouseR2);
		excelReader.setCellData(xlfile, xlSheetName, 281, 8, actCopyDocItemR2);
		excelReader.setCellData(xlfile, xlSheetName, 282, 8, actCopyDocUnitsR2);
		excelReader.setCellData(xlfile, xlSheetName, 283, 8, actCopyDocQtyR2);
		excelReader.setCellData(xlfile, xlSheetName, 284, 8, actCopyDocRateR2);
		excelReader.setCellData(xlfile, xlSheetName, 285, 8, actCopyDocGrossR2);
		excelReader.setCellData(xlfile, xlSheetName, 286, 8, actCopyDocBatchR2);
		
		
		
		String expCopyDocWareHouseR3		=excelReader.getCellData(xlSheetName, 287, 7);
		String expCopyDocItemR3				=excelReader.getCellData(xlSheetName, 288, 7);
		String expCopyDocUnitsR3			=excelReader.getCellData(xlSheetName, 289, 7);
		String expCopyDocQtyR3				=excelReader.getCellData(xlSheetName, 290, 7);
		boolean expCopyDocLExcessInStocksR3	=true;
		String expCopyDocRateR3				=excelReader.getCellData(xlSheetName, 291, 7);
		String expCopyDocGrossR3			=excelReader.getCellData(xlSheetName, 292, 7);
		boolean expCopyDocBatchR3			=true;
		String expCopyDocBinsR3				=excelReader.getCellData(xlSheetName, 293, 7);
		String expCopyDocBins2R3			=excelReader.getCellData(xlSheetName, 294, 7);
		boolean expCopyDocRmaR3				=true;
		
		

		excelReader.setCellData(xlfile, xlSheetName, 287, 8, actCopyDocWareHouseR3);
		excelReader.setCellData(xlfile, xlSheetName, 288, 8, actCopyDocItemR3);
		excelReader.setCellData(xlfile, xlSheetName, 289, 8, actCopyDocUnitsR3);
		excelReader.setCellData(xlfile, xlSheetName, 290, 8, actCopyDocQtyR3);
		excelReader.setCellData(xlfile, xlSheetName, 291, 8, actCopyDocRateR3);
		excelReader.setCellData(xlfile, xlSheetName, 292, 8, actCopyDocGrossR3);
		excelReader.setCellData(xlfile, xlSheetName, 293, 8, actCopyDocBinsR3);
		excelReader.setCellData(xlfile, xlSheetName, 294, 8, actCopyDocBins2R3);
		
		
		String expCopyDocWareHouseR4		=excelReader.getCellData(xlSheetName, 295, 7);
		String expCopyDocItemR4				=excelReader.getCellData(xlSheetName, 296, 7);
		String expCopyDocUnitsR4			=excelReader.getCellData(xlSheetName, 297, 7);
		String expCopyDocQtyR4				=excelReader.getCellData(xlSheetName, 298, 7);
		boolean expCopyDocLExcessInStocksR4	=true;
		String expCopyDocRateR4				=excelReader.getCellData(xlSheetName, 299, 7);
		String expCopyDocGrossR4			=excelReader.getCellData(xlSheetName, 300, 7);
		boolean expCopyDocBatchR4			=true;
		boolean expCopyDocBinsR4			=true;
		boolean expCopyDocBins2R4			=true;
		String expCopyDocRmaR4				=excelReader.getCellData(xlSheetName, 301, 7);
		
		
		excelReader.setCellData(xlfile, xlSheetName, 295, 8, actCopyDocWareHouseR4);
		excelReader.setCellData(xlfile, xlSheetName, 296, 8, actCopyDocItemR4);
		excelReader.setCellData(xlfile, xlSheetName, 297, 8, actCopyDocUnitsR4);
		excelReader.setCellData(xlfile, xlSheetName, 298, 8, actCopyDocQtyR4);
		excelReader.setCellData(xlfile, xlSheetName, 299, 8, actCopyDocRateR4);
		excelReader.setCellData(xlfile, xlSheetName, 300, 8, actCopyDocGrossR4);
		excelReader.setCellData(xlfile, xlSheetName, 301, 8, actCopyDocRmaR4);
		
		
		
		System.out.println("************************************* checkFirstRowCheckboxInCopyDocumentInStockTransfer  *********************************");
		
		System.out.println("CopyDocWareHouseR1           : "+actCopyDocWareHouseR1		+"  Value Expected : "+expCopyDocWareHouseR1);
		System.out.println("CopyDocItemR1                : "+actCopyDocItemR1			+"  Value Expected : "+expCopyDocItemR1);
		System.out.println("CopyDocUnitsR1               : "+actCopyDocUnitsR1			+"  Value Expected : "+expCopyDocUnitsR1);
		System.out.println("CopyDocQtyR1                 : "+actCopyDocQtyR1			+"  Value Expected : "+expCopyDocQtyR1);
		System.out.println("CopyDocLExcessInStocksR1     : "+actCopyDocLExcessInStocksR1+"  Value Expected : "+expCopyDocLExcessInStocksR1);
		System.out.println("CopyDocRateR1                : "+actCopyDocRateR1			+"  Value Expected : "+expCopyDocRateR1);
		System.out.println("CopyDocGrossR1               : "+actCopyDocGrossR1			+"  Value Expected : "+expCopyDocGrossR1);
		System.out.println("CopyDocBatchR1               : "+actCopyDocBatchR1			+"  Value Expected : "+expCopyDocBatchR1);
		System.out.println("CopyDocBinsR1                : "+actCopyDocBinsR1			+"  Value Expected : "+expCopyDocBinsR1);
		System.out.println("CopyDocBins2R1               : "+actCopyDocBins2R1			+"  Value Expected : "+expCopyDocBins2R1);
		System.out.println("CopyDocRmaR1                 : "+actCopyDocRmaR1			+"  Value Expected : "+expCopyDocRmaR1);
		
		System.out.println("CopyDocWareHouseR2           : "+actCopyDocWareHouseR2		+"  Value Expected : "+expCopyDocWareHouseR2);
		System.out.println("CopyDocItemR2                : "+actCopyDocItemR2			+"  Value Expected : "+expCopyDocItemR2);
		System.out.println("CopyDocUnitsR2               : "+actCopyDocUnitsR2			+"  Value Expected : "+expCopyDocUnitsR2);
		System.out.println("CopyDocQtyR2                 : "+actCopyDocQtyR2			+"  Value Expected : "+expCopyDocQtyR2);
		System.out.println("CopyDocLExcessInStocksR2     : "+actCopyDocLExcessInStocksR2+"  Value Expected : "+expCopyDocLExcessInStocksR2);
		System.out.println("CopyDocRateR2                : "+actCopyDocRateR2			+"  Value Expected : "+expCopyDocRateR2);
		System.out.println("CopyDocGrossR2               : "+actCopyDocGrossR2			+"  Value Expected : "+expCopyDocGrossR2);
		System.out.println("CopyDocBatchR2               : "+actCopyDocBatchR2			+"  Value Expected : "+expCopyDocBatchR2);
		System.out.println("CopyDocBinsR2                : "+actCopyDocBinsR2			+"  Value Expected : "+expCopyDocBinsR2);
		System.out.println("CopyDocBins2R2               : "+actCopyDocBins2R2			+"  Value Expected : "+expCopyDocBins2R2);
		System.out.println("CopyDocRmaR2                 : "+actCopyDocRmaR2			+"  Value Expected : "+expCopyDocRmaR2);
		
		System.out.println("CopyDocWareHouseR3           : "+actCopyDocWareHouseR3		+"  Value Expected : "+expCopyDocWareHouseR3);
		System.out.println("CopyDocItemR3                : "+actCopyDocItemR3			+"  Value Expected : "+expCopyDocItemR3);
		System.out.println("CopyDocUnitsR3               : "+actCopyDocUnitsR3			+"  Value Expected : "+expCopyDocUnitsR3);
		System.out.println("CopyDocQtyR3                 : "+actCopyDocQtyR3			+"  Value Expected : "+expCopyDocQtyR3);
		System.out.println("CopyDocLExcessInStocksR3     : "+actCopyDocLExcessInStocksR3+"  Value Expected : "+expCopyDocLExcessInStocksR3);
		System.out.println("CopyDocRateR3                : "+actCopyDocRateR3			+"  Value Expected : "+expCopyDocRateR3);
		System.out.println("CopyDocGrossR3               : "+actCopyDocGrossR3			+"  Value Expected : "+expCopyDocGrossR3);
		System.out.println("CopyDocBatchR3               : "+actCopyDocBatchR3			+"  Value Expected : "+expCopyDocBatchR3);
		System.out.println("CopyDocBinsR3                : "+actCopyDocBinsR3			+"  Value Expected : "+expCopyDocBinsR3);
		System.out.println("CopyDocBins2R3               : "+actCopyDocBins2R3			+"  Value Expected : "+expCopyDocBins2R3);
		System.out.println("CopyDocRmaR3                 : "+actCopyDocRmaR3			+"  Value Expected : "+expCopyDocRmaR3);
		
		System.out.println("CopyDocWareHouseR4           : "+actCopyDocWareHouseR4		+"  Value Expected : "+expCopyDocWareHouseR4);
		System.out.println("CopyDocItemR4                : "+actCopyDocItemR4			+"  Value Expected : "+expCopyDocItemR4);
		System.out.println("CopyDocUnitsR4               : "+actCopyDocUnitsR4			+"  Value Expected : "+expCopyDocUnitsR4);
		System.out.println("CopyDocQtyR4                 : "+actCopyDocQtyR4			+"  Value Expected : "+expCopyDocQtyR4);
		System.out.println("CopyDocLExcessInStocksR4     : "+actCopyDocLExcessInStocksR4+"  Value Expected : "+expCopyDocLExcessInStocksR4);
		System.out.println("CopyDocRateR4                : "+actCopyDocRateR4			+"  Value Expected : "+expCopyDocRateR4);
		System.out.println("CopyDocGrossR4               : "+actCopyDocGrossR4			+"  Value Expected : "+expCopyDocGrossR4);
		System.out.println("CopyDocBatchR4               : "+actCopyDocBatchR4			+"  Value Expected : "+expCopyDocBatchR4);
		System.out.println("CopyDocBinsR4                : "+actCopyDocBinsR4			+"  Value Expected : "+expCopyDocBinsR4);
		System.out.println("CopyDocBins2R4               : "+actCopyDocBins2R4			+"  Value Expected : "+expCopyDocBins2R4);
		System.out.println("CopyDocRmaR4                 : "+actCopyDocRmaR4			+"  Value Expected : "+expCopyDocRmaR4);
		
		
		
		boolean result=actCopyDocLExcessInStocksR1==expCopyDocLExcessInStocksR1 &&actCopyDocBins2R1==expCopyDocBins2R1 
				        && actCopyDocRmaR1==expCopyDocRmaR1 && actCopyDocLExcessInStocksR2==expCopyDocLExcessInStocksR2 
                        && actCopyDocBinsR2==expCopyDocBinsR2 && actCopyDocBins2R2==expCopyDocBins2R2
						&& actCopyDocRmaR2==expCopyDocRmaR2 && actCopyDocLExcessInStocksR3==expCopyDocLExcessInStocksR3 
						&& actCopyDocBatchR3==expCopyDocBatchR3 && actCopyDocRmaR3==expCopyDocRmaR3
						&& actCopyDocLExcessInStocksR4==expCopyDocLExcessInStocksR4 && actCopyDocBatchR4==expCopyDocBatchR4
						&& actCopyDocBinsR4==expCopyDocBinsR4 && actCopyDocBins2R4==expCopyDocBins2R4;
		
		
		String actDisplay=Boolean.toString(result);
		String expDisplay="True";
		
		
		System.out.println(" Display Empty Result  : "+actDisplay +" Value Expected : "+expDisplay);
		
		
		
		if(actCopyDocItemR1.equalsIgnoreCase(expCopyDocItemR1) && actCopyDocItemR1.equalsIgnoreCase(expCopyDocItemR1)
				&& actCopyDocUnitsR1.equalsIgnoreCase(expCopyDocUnitsR1) && actCopyDocQtyR1.equalsIgnoreCase(expCopyDocQtyR1)
				&& actCopyDocRateR1.equalsIgnoreCase(expCopyDocRateR1)
				&& actCopyDocGrossR1.equalsIgnoreCase(expCopyDocGrossR1) && actDisplay.equalsIgnoreCase(expDisplay)
				
				
				
				&& actCopyDocItemR2.equalsIgnoreCase(expCopyDocItemR2) && actCopyDocItemR2.equalsIgnoreCase(expCopyDocItemR2)
				&& actCopyDocUnitsR2.equalsIgnoreCase(expCopyDocUnitsR2) && actCopyDocQtyR2.equalsIgnoreCase(expCopyDocQtyR2)
				&& actCopyDocRateR2.equalsIgnoreCase(expCopyDocRateR2)
				&& actCopyDocGrossR2.equalsIgnoreCase(expCopyDocGrossR2) && actCopyDocBatchR2.equalsIgnoreCase(expCopyDocBatchR2)
				
				
				&& actCopyDocItemR3.equalsIgnoreCase(expCopyDocItemR3) && actCopyDocItemR3.equalsIgnoreCase(expCopyDocItemR3)
				&& actCopyDocUnitsR3.equalsIgnoreCase(expCopyDocUnitsR3) && actCopyDocQtyR3.equalsIgnoreCase(expCopyDocQtyR3)
				&& actCopyDocRateR3.equalsIgnoreCase(expCopyDocRateR3)
				&& actCopyDocGrossR3.equalsIgnoreCase(expCopyDocGrossR3) 
				&& actCopyDocBinsR3.equalsIgnoreCase(expCopyDocBinsR3) && actCopyDocBins2R3.equalsIgnoreCase(expCopyDocBins2R3)
				
				
				&& actCopyDocItemR4.equalsIgnoreCase(expCopyDocItemR4) && actCopyDocItemR4.equalsIgnoreCase(expCopyDocItemR4)
				&& actCopyDocUnitsR4.equalsIgnoreCase(expCopyDocUnitsR4) && actCopyDocQtyR4.equalsIgnoreCase(expCopyDocQtyR4)
				&& actCopyDocRateR4.equalsIgnoreCase(expCopyDocRateR4)
				&& actCopyDocGrossR4.equalsIgnoreCase(expCopyDocGrossR4) 
				&& actCopyDocRmaR4.equalsIgnoreCase(expCopyDocRmaR4))
		{
			System.out.println("Test Fail : Copy Document Options Are As Expected");
			excelReader.setCellData(xlfile, xlSheetName, 273, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Copy Document Options Are NOT As Expected");
			excelReader.setCellData(xlfile, xlSheetName, 273, 9, resFail);
			return false;
		}
	}



	
	
	
	public boolean checkLoadingVoucherInformationFromCopyDocumentOnClickOnOkInstockTransfer() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cd_OkBtn));
		cd_OkBtn.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_footerExpandBtn));
		new_footerExpandBtn.click();
    
		// Actual
		
		String actdocumentNumberTxt			=documentNumberTxt.getAttribute("value");
		String actdateTxt					=dateTxt.getAttribute("value");
		String actHeaderWarehouseValue		=stockTransferheaderWarehouse1Txt.getAttribute("value");
		
        String actBodyWarehouseValueR1			=select1stRow_1stColumn.getText();
        String actBodyItemValueR1				=select1stRow_2ndColumn.getText();
        String actBodyUnitsValueR1				=select1stRow_3rdColumn.getText();
        String actBodyQtyValueR1				=select1stRow_4thColumn.getText();
        boolean actBodyLExcessInStocksValueR1	=select1stRow_5thColumn.getText().isEmpty();
        String actBodyRateValueR1				=select1stRow_6thColumn.getText();
        String actBodyGrossValueR1				=select1stRow_7thColumn.getText();
        boolean actBodyBatchValueR1				=select1stRow_8thColumn.getText().isEmpty();
        boolean actBodyBinsValueR1				=select1stRow_9thColumn.getText().isEmpty();
        boolean actBodyBins2ValueR1				=select1stRow_10thColumn.getText().isEmpty();
        boolean actBodyRmaValueR1				=select1stRow_11thColumn.getText().isEmpty();
        
        String actBodyWarehouseValueR2			=select2ndRow_1stColumn.getText();
        String actBodyItemValueR2				=select2ndRow_2ndColumn.getText();
        String actBodyUnitsValueR2				=select2ndRow_3rdColumn.getText();
        String actBodyQtyValueR2				=select2ndRow_4thColumn.getText();
        boolean actBodyLExcessInStocksValueR2	=select2ndRow_5thColumn.getText().isEmpty();
        String actBodyRateValueR2				=select2ndRow_6thColumn.getText();
        String actBodyGrossValueR2				=select2ndRow_7thColumn.getText();
        boolean actBodyBatchValueR2				=select2ndRow_8thColumn.getText().isEmpty();
        boolean actBodyBinsValueR2				=select2ndRow_9thColumn.getText().isEmpty();
        boolean actBodyBins2ValueR2				=select2ndRow_10thColumn.getText().isEmpty();
        boolean actBodyRmaValueR2				=select2ndRow_11thColumn.getText().isEmpty();
        
        String actBodyWarehouseValueR3			=select3rdRow_1stColumn.getText();
        String actBodyItemValueR3				=select3rdRow_2ndColumn.getText();
        String actBodyUnitsValueR3				=select3rdRow_3rdColumn.getText();
        String actBodyQtyValueR3				=select3rdRow_4thColumn.getText();
        boolean actBodyLExcessInStocksValueR3	=select3rdRow_5thColumn.getText().isEmpty();
        String actBodyRateValueR3				=select3rdRow_6thColumn.getText();
        String actBodyGrossValueR3				=select3rdRow_7thColumn.getText();
        boolean actBodyBatchValueR3				=select3rdRow_8thColumn.getText().isEmpty();
        boolean actBodyBinsValueR3				=select3rdRow_9thColumn.getText().isEmpty();
        boolean actBodyBins2ValueR3				=select3rdRow_10thColumn.getText().isEmpty();
        boolean actBodyRmaValueR3				=select3rdRow_11thColumn.getText().isEmpty();
        
        String actBodyWarehouseValueR4			=select4thRow_1stColumn.getText();
        String actBodyItemValueR4				=select4thRow_2ndColumn.getText();
        String actBodyUnitsValueR4				=select4thRow_3rdColumn.getText();
        String actBodyQtyValueR4				=select4thRow_4thColumn.getText();
        boolean actBodyLExcessInStocksValueR4	=select4thRow_5thColumn.getText().isEmpty();
        String actBodyRateValueR4				=select4thRow_6thColumn.getText();
        String actBodyGrossValueR4				=select4thRow_7thColumn.getText();
        boolean actBodyBatchValueR4				=select4thRow_8thColumn.getText().isEmpty();
        boolean actBodyBinsValueR4				=select4thRow_9thColumn.getText().isEmpty();
        boolean actBodyBins2ValueR4				=select4thRow_10thColumn.getText().isEmpty();
        boolean actBodyRmaValueR4				=select4thRow_11thColumn.getText().isEmpty();
        
        String actQtyAmount					=QtyAmount.getText();
        String actGrossAmount				=GrossAmount.getText();
        String actnetAmount					=netAmount.getText();
        
        
        DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Date date=new Date();
		System.out.println(df.format(date));
		
		
        // Expected
		
        String expdocumentNumberTxt				=excelReader.getCellData(xlSheetName, 303, 7);
		String expdateTxt						=df.format(date);
		String expHeaderWarehouseValue			=excelReader.getCellData(xlSheetName, 305, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 303, 8, actdocumentNumberTxt);
		
		excelReader.setCellData(xlfile, xlSheetName, 304, 8, actdateTxt);
		excelReader.setCellData(xlfile, xlSheetName, 304, 8, expdateTxt);
		
		excelReader.setCellData(xlfile, xlSheetName, 305, 8, actHeaderWarehouseValue);
		
		
		excelReader.setCellData(xlfile, xlSheetName, 306, 7, actBodyWarehouseValueR1);
		excelReader.setCellData(xlfile, xlSheetName, 307, 7, actBodyItemValueR1);
		excelReader.setCellData(xlfile, xlSheetName, 308, 7, actBodyUnitsValueR1);
		excelReader.setCellData(xlfile, xlSheetName, 309, 7, actBodyQtyValueR1);
		excelReader.setCellData(xlfile, xlSheetName, 310, 7, actBodyRateValueR1);
		excelReader.setCellData(xlfile, xlSheetName, 311, 7, actBodyGrossValueR1);
		
        String expBodyWarehouseValueR1			=excelReader.getCellData(xlSheetName, 306, 7);
        String expBodyItemValueR1				=excelReader.getCellData(xlSheetName, 307, 7);
        String expBodyUnitsValueR1				=excelReader.getCellData(xlSheetName, 308, 7);
        String expBodyQtyValueR1				=excelReader.getCellData(xlSheetName, 309, 7);
        boolean expBodyLExcessInStocksValueR1	=true;
        String expBodyRateValueR1				=excelReader.getCellData(xlSheetName, 310, 7);
        String expBodyGrossValueR1				=excelReader.getCellData(xlSheetName, 311, 7);
        boolean expBodyBatchValueR1				=true;
        boolean expBodyBinsValueR1				=true;
        boolean expBodyBins2ValueR1				=true;
        boolean expBodyRmaValueR1				=true;
        
        
        
        excelReader.setCellData(xlfile, xlSheetName, 312, 7, actBodyWarehouseValueR2);
		excelReader.setCellData(xlfile, xlSheetName, 313, 7, actBodyItemValueR2);
		excelReader.setCellData(xlfile, xlSheetName, 314, 7, actBodyUnitsValueR2);
		excelReader.setCellData(xlfile, xlSheetName, 315, 7, actBodyQtyValueR2);
		excelReader.setCellData(xlfile, xlSheetName, 316, 7, actBodyRateValueR2);
		excelReader.setCellData(xlfile, xlSheetName, 317, 7, actBodyGrossValueR2);
		
        
        
        String expBodyWarehouseValueR2			=excelReader.getCellData(xlSheetName, 312, 7);
        String expBodyItemValueR2				=excelReader.getCellData(xlSheetName, 313, 7);
        String expBodyUnitsValueR2				=excelReader.getCellData(xlSheetName, 314, 7);
        String expBodyQtyValueR2				=excelReader.getCellData(xlSheetName, 315, 7);
        boolean expBodyLExcessInStocksValueR2	=true;
        String expBodyRateValueR2				=excelReader.getCellData(xlSheetName, 316, 7);
        String expBodyGrossValueR2				=excelReader.getCellData(xlSheetName, 317, 7);
        boolean expBodyBatchValueR2				=true;
        boolean expBodyBinsValueR2				=true;
        boolean expBodyBins2ValueR2				=true;
        boolean expBodyRmaValueR2				=true;
        
        
        
        excelReader.setCellData(xlfile, xlSheetName, 318, 7, actBodyWarehouseValueR3);
		excelReader.setCellData(xlfile, xlSheetName, 319, 7, actBodyItemValueR3);
		excelReader.setCellData(xlfile, xlSheetName, 320, 7, actBodyUnitsValueR3);
		excelReader.setCellData(xlfile, xlSheetName, 321, 7, actBodyQtyValueR3);
		excelReader.setCellData(xlfile, xlSheetName, 322, 7, actBodyRateValueR3);
		excelReader.setCellData(xlfile, xlSheetName, 323, 7, actBodyGrossValueR3);
		
        
        String expBodyWarehouseValueR3			=excelReader.getCellData(xlSheetName, 318, 7);
        String expBodyItemValueR3				=excelReader.getCellData(xlSheetName, 319, 7);
        String expBodyUnitsValueR3				=excelReader.getCellData(xlSheetName, 320, 7);
        String expBodyQtyValueR3				=excelReader.getCellData(xlSheetName, 321, 7);
        boolean expBodyLExcessInStocksValueR3	=true;
        String expBodyRateValueR3				=excelReader.getCellData(xlSheetName, 322, 7);
        String expBodyGrossValueR3				=excelReader.getCellData(xlSheetName, 323, 7);
        boolean expBodyBatchValueR3				=true;
        boolean expBodyBinsValueR3				=true;
        boolean expBodyBins2ValueR3				=true;
        boolean expBodyRmaValueR3				=true;
      
        excelReader.setCellData(xlfile, xlSheetName, 324, 7, actBodyWarehouseValueR4);
		excelReader.setCellData(xlfile, xlSheetName, 325, 7, actBodyItemValueR4);
		excelReader.setCellData(xlfile, xlSheetName, 326, 7, actBodyUnitsValueR4);
		excelReader.setCellData(xlfile, xlSheetName, 327, 7, actBodyQtyValueR4);
		excelReader.setCellData(xlfile, xlSheetName, 328, 7, actBodyRateValueR4);
		excelReader.setCellData(xlfile, xlSheetName, 329, 7, actBodyGrossValueR4);
		
		
        
        String expBodyWarehouseValueR4			=excelReader.getCellData(xlSheetName, 324, 7);
        String expBodyItemValueR4				=excelReader.getCellData(xlSheetName, 325, 7);
        String expBodyUnitsValueR4				=excelReader.getCellData(xlSheetName, 326, 7);
        String expBodyQtyValueR4				=excelReader.getCellData(xlSheetName, 327, 7);
        boolean expBodyLExcessInStocksValueR4	=true;
        String expBodyRateValueR4				=excelReader.getCellData(xlSheetName, 328, 7);
        String expBodyGrossValueR4				=excelReader.getCellData(xlSheetName, 329, 7);
        boolean expBodyBatchValueR4				=true;
        boolean expBodyBinsValueR4				=true;
        boolean expBodyBins2ValueR4				=true;
        boolean expBodyRmaValueR4				=true;
        
        excelReader.setCellData(xlfile, xlSheetName, 330, 7, actQtyAmount);
		excelReader.setCellData(xlfile, xlSheetName, 331, 7, actGrossAmount);
		excelReader.setCellData(xlfile, xlSheetName, 332, 7, actnetAmount);
		
        
        String expQtyAmount					=excelReader.getCellData(xlSheetName, 330, 7);
        String expGrossAmount				=excelReader.getCellData(xlSheetName, 331, 7);
        String expnetAmount					=excelReader.getCellData(xlSheetName, 332, 7);
        
		
        
		System.out.println("************************************* checkLoadingVoucherInformationFromCopyDocumentOnClickOnOkInstockTransfer  ********************************************");
		
		System.out.println("documentNumberTxt 			: "+actdocumentNumberTxt		+"  Value Expected : "+expdocumentNumberTxt);
		System.out.println("dateTxt 					: "+actdateTxt					+"  Value Expected : "+expdateTxt);
		System.out.println("HeaderWarehouseValue 		: "+actHeaderWarehouseValue		+"  Value Expected : "+expHeaderWarehouseValue);
		
		System.out.println("BodyWarehouseValueR1 		: "+actBodyWarehouseValueR1			+"  Value Expected : "+expBodyWarehouseValueR1);
		System.out.println("BodyItemValueR1 			: "+actBodyItemValueR1				+"  Value Expected : "+expBodyItemValueR1);
		System.out.println("BodyUnitsValueR1 			: "+actBodyUnitsValueR1				+"  Value Expected : "+expBodyUnitsValueR1);
		System.out.println("BodyQtyValueR1 				: "+actBodyQtyValueR1				+"  Value Expected : "+expBodyQtyValueR1);
		System.out.println("BodyLExcessInStocksValueR1 	: "+actBodyLExcessInStocksValueR1	+"  Value Expected : "+expBodyLExcessInStocksValueR1);
		System.out.println("BodyRateValueR1 			: "+actBodyRateValueR1				+"  Value Expected : "+expBodyRateValueR1);
		System.out.println("BodyGrossValueR1 			: "+actBodyGrossValueR1				+"  Value Expected : "+expBodyGrossValueR1);
		System.out.println("BodyBatchValueR1 			: "+actBodyBatchValueR1				+"  Value Expected : "+expBodyBatchValueR1);
		System.out.println("BodyBinsValueR1 			: "+actBodyBinsValueR1				+"  Value Expected : "+expBodyBinsValueR1);
		System.out.println("BodyBins2ValueR1 			: "+actBodyBins2ValueR1				+"  Value Expected : "+expBodyBins2ValueR1);
		System.out.println("BodyRmaValueR1 				: "+actBodyRmaValueR1				+"  Value Expected : "+expBodyRmaValueR1);
		
		System.out.println("BodyWarehouseValueR2 		: "+actBodyWarehouseValueR2			+"  Value Expected : "+expBodyWarehouseValueR2);
		System.out.println("BodyItemValueR2 			: "+actBodyItemValueR2				+"  Value Expected : "+expBodyItemValueR2);
		System.out.println("BodyUnitsValueR2 			: "+actBodyUnitsValueR2				+"  Value Expected : "+expBodyUnitsValueR2);
		System.out.println("BodyQtyValueR2 				: "+actBodyQtyValueR2				+"  Value Expected : "+expBodyQtyValueR2);
		System.out.println("BodyLExcessInStocksValueR2 	: "+actBodyLExcessInStocksValueR2	+"  Value Expected : "+expBodyLExcessInStocksValueR2);
		System.out.println("BodyRateValueR2 			: "+actBodyRateValueR2				+"  Value Expected : "+expBodyRateValueR2);
		System.out.println("BodyGrossValueR2 			: "+actBodyGrossValueR2				+"  Value Expected : "+expBodyGrossValueR2);
		System.out.println("BodyBatchValueR2 			: "+actBodyBatchValueR2				+"  Value Expected : "+expBodyBatchValueR2);
		System.out.println("BodyBinsValueR2 			: "+actBodyBinsValueR2				+"  Value Expected : "+expBodyBinsValueR2);
		System.out.println("BodyBins2ValueR2 			: "+actBodyBins2ValueR2				+"  Value Expected : "+expBodyBins2ValueR2);
		System.out.println("BodyRmaValueR2 				: "+actBodyRmaValueR2				+"  Value Expected : "+expBodyRmaValueR2);
		
		System.out.println("BodyWarehouseValueR3 		: "+actBodyWarehouseValueR3			+"  Value Expected : "+expBodyWarehouseValueR3);
		System.out.println("BodyItemValueR3 			: "+actBodyItemValueR3				+"  Value Expected : "+expBodyItemValueR3);
		System.out.println("BodyUnitsValueR3 			: "+actBodyUnitsValueR3				+"  Value Expected : "+expBodyUnitsValueR3);
		System.out.println("BodyQtyValueR3 				: "+actBodyQtyValueR3				+"  Value Expected : "+expBodyQtyValueR3);
		System.out.println("BodyLExcessInStocksValueR3 	: "+actBodyLExcessInStocksValueR3	+"  Value Expected : "+expBodyLExcessInStocksValueR3);
		System.out.println("BodyRateValueR3 			: "+actBodyRateValueR3				+"  Value Expected : "+expBodyRateValueR3);
		System.out.println("BodyGrossValueR3 			: "+actBodyGrossValueR3				+"  Value Expected : "+expBodyGrossValueR3);
		System.out.println("BodyBatchValueR3 			: "+actBodyBatchValueR3				+"  Value Expected : "+expBodyBatchValueR3);
		System.out.println("BodyBinsValueR3 			: "+actBodyBinsValueR3				+"  Value Expected : "+expBodyBinsValueR3);
		System.out.println("BodyBins2ValueR3 			: "+actBodyBins2ValueR3				+"  Value Expected : "+expBodyBins2ValueR3);
		System.out.println("BodyRmaValueR3 				: "+actBodyRmaValueR3				+"  Value Expected : "+expBodyRmaValueR3);
		
		System.out.println("BodyWarehouseValueR4 		: "+actBodyWarehouseValueR4			+"  Value Expected : "+expBodyWarehouseValueR4);
		System.out.println("BodyItemValueR4 			: "+actBodyItemValueR4				+"  Value Expected : "+expBodyItemValueR4);
		System.out.println("BodyUnitsValueR4 			: "+actBodyUnitsValueR4				+"  Value Expected : "+expBodyUnitsValueR4);
		System.out.println("BodyQtyValueR4 				: "+actBodyQtyValueR4				+"  Value Expected : "+expBodyQtyValueR4);
		System.out.println("BodyLExcessInStocksValueR4 	: "+actBodyLExcessInStocksValueR4	+"  Value Expected : "+expBodyLExcessInStocksValueR4);
		System.out.println("BodyRateValueR4 			: "+actBodyRateValueR4				+"  Value Expected : "+expBodyRateValueR4);
		System.out.println("BodyGrossValueR4 			: "+actBodyGrossValueR4				+"  Value Expected : "+expBodyGrossValueR4);
		System.out.println("BodyBatchValueR4 			: "+actBodyBatchValueR4				+"  Value Expected : "+expBodyBatchValueR4);
		System.out.println("BodyBinsValueR4 			: "+actBodyBinsValueR4				+"  Value Expected : "+expBodyBinsValueR4);
		System.out.println("BodyBins2ValueR4 			: "+actBodyBins2ValueR4				+"  Value Expected : "+expBodyBins2ValueR4);
		System.out.println("BodyRmaValueR4 				: "+actBodyRmaValueR4				+"  Value Expected : "+expBodyRmaValueR4);
		
		
		System.out.println("QtyAmount 					: "+actQtyAmount				+"  Value Expected : "+expQtyAmount);
		System.out.println("GrossAmount 				: "+actGrossAmount				+"  Value Expected : "+expGrossAmount);
		System.out.println("netAmount 					: "+actnetAmount				+"  Value Expected : "+expnetAmount);
		
	    if(actdocumentNumberTxt.equalsIgnoreCase(expdocumentNumberTxt) && actdateTxt.equalsIgnoreCase(expdateTxt)
	    		&& actHeaderWarehouseValue.equalsIgnoreCase(expHeaderWarehouseValue)
	    		
	    		&& actBodyWarehouseValueR1.equalsIgnoreCase(expBodyWarehouseValueR1) && actBodyItemValueR1.equalsIgnoreCase(expBodyItemValueR1)
	    		&& actBodyUnitsValueR1.equalsIgnoreCase(expBodyUnitsValueR1) && actBodyQtyValueR1.equalsIgnoreCase(expBodyQtyValueR1)
	    		&& actBodyLExcessInStocksValueR1==expBodyLExcessInStocksValueR1 && actBodyRateValueR1.equalsIgnoreCase(expBodyRateValueR1)
	    		&& actBodyGrossValueR1.equalsIgnoreCase(expBodyGrossValueR1) && actBodyBatchValueR1==expBodyBatchValueR1
	    		&& actBodyBinsValueR1==expBodyBinsValueR1 && actBodyBins2ValueR1==expBodyBins2ValueR1 && actBodyRmaValueR1==expBodyRmaValueR1
	    		
				&& actBodyWarehouseValueR2.equalsIgnoreCase(expBodyWarehouseValueR2) && actBodyItemValueR2.equalsIgnoreCase(expBodyItemValueR2)
	    		&& actBodyUnitsValueR2.equalsIgnoreCase(expBodyUnitsValueR2) && actBodyQtyValueR2.equalsIgnoreCase(expBodyQtyValueR2)
	    		&& actBodyLExcessInStocksValueR2==expBodyLExcessInStocksValueR2 && actBodyRateValueR2.equalsIgnoreCase(expBodyRateValueR2)
	    		&& actBodyGrossValueR2.equalsIgnoreCase(expBodyGrossValueR2) && actBodyBatchValueR2==expBodyBatchValueR2
	    		&& actBodyBinsValueR2==expBodyBinsValueR2 && actBodyBins2ValueR2==expBodyBins2ValueR2 && actBodyRmaValueR2==expBodyRmaValueR2
	    		
				&& actBodyWarehouseValueR3.equalsIgnoreCase(expBodyWarehouseValueR3) && actBodyItemValueR3.equalsIgnoreCase(expBodyItemValueR3)
	    		&& actBodyUnitsValueR3.equalsIgnoreCase(expBodyUnitsValueR3) && actBodyQtyValueR3.equalsIgnoreCase(expBodyQtyValueR3)
	    		&& actBodyLExcessInStocksValueR3==expBodyLExcessInStocksValueR3 && actBodyRateValueR3.equalsIgnoreCase(expBodyRateValueR3)
	    		&& actBodyGrossValueR3.equalsIgnoreCase(expBodyGrossValueR3) && actBodyBatchValueR3==expBodyBatchValueR3
	    		&& actBodyBinsValueR3==expBodyBinsValueR3 && actBodyBins2ValueR3==expBodyBins2ValueR3
	    		&& actBodyRmaValueR3==expBodyRmaValueR3
	    		
				&& actBodyWarehouseValueR4.equalsIgnoreCase(expBodyWarehouseValueR4) && actBodyItemValueR4.equalsIgnoreCase(expBodyItemValueR4)
	    		&& actBodyUnitsValueR4.equalsIgnoreCase(expBodyUnitsValueR4) && actBodyQtyValueR4.equalsIgnoreCase(expBodyQtyValueR4)
	    		&& actBodyLExcessInStocksValueR4==expBodyLExcessInStocksValueR4 && actBodyRateValueR4.equalsIgnoreCase(expBodyRateValueR4)
	    		&& actBodyGrossValueR4.equalsIgnoreCase(expBodyGrossValueR4) && actBodyBatchValueR4==expBodyBatchValueR4
	    		&& actBodyBinsValueR4==expBodyBinsValueR4 && actBodyBins2ValueR4==expBodyBins2ValueR4 && actBodyRmaValueR4==expBodyRmaValueR4
	    		
	    		&& actQtyAmount.equalsIgnoreCase(expQtyAmount) && actGrossAmount.equalsIgnoreCase(expGrossAmount)
	    		&& actnetAmount.equalsIgnoreCase(expnetAmount))
		{
	    	excelReader.setCellData(xlfile, xlSheetName, 302, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 302, 9, resFail);
			return false;
			
			
		}
	}
	
	
	//Excel is Taken From Before Methods 
	public boolean checkSavingStockTransferVoucherAfterCopyDocument() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    {
    	
    	excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransferheaderWarehouse1Txt));
		stockTransferheaderWarehouse1Txt.click();
		stockTransferheaderWarehouse1Txt.sendKeys(Keys.END);
		stockTransferheaderWarehouse1Txt.sendKeys(Keys.SHIFT,Keys.HOME);
		Thread.sleep(2000);
		stockTransferheaderWarehouse1Txt.sendKeys(Keys.SPACE);
			
		int warehousecount=wareHouseHeaderListCount.size();
		
		System.err.println(warehousecount);
			
		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=wareHouseHeaderListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 106, 7)))
			{
				wareHouseHeaderListCount.get(i).click();
				
				break;
			}
		}
			
		stockTransferheaderWarehouse1Txt.sendKeys(Keys.TAB);
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		   
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_BodyWarehouse2Txt));
		enter_BodyWarehouse2Txt.sendKeys(Keys.END);
		enter_BodyWarehouse2Txt.sendKeys(Keys.SHIFT,Keys.HOME);
		Thread.sleep(2000);
		
		enter_BodyWarehouse2Txt.sendKeys(Keys.SPACE);
			
		int warehousecount1=wareHouseBodyListCount.size();
		
		System.err.println(warehousecount1);
			
		for(int i=0 ; i < warehousecount1 ;i++)
		{
			String data=wareHouseBodyListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 269, 6)))
			{
				wareHouseBodyListCount.get(i).click();
				
				break;
			}
		}
				
		enter_BodyWarehouse2Txt.sendKeys(Keys.TAB);
    	

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		select2ndRow_1stColumn.click();
		   
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_BodyWarehouse2Txt));
		enter_BodyWarehouse2Txt.sendKeys(Keys.END);
		enter_BodyWarehouse2Txt.sendKeys(Keys.SHIFT,Keys.HOME);
		Thread.sleep(2000);
		
		enter_BodyWarehouse2Txt.sendKeys(Keys.SPACE);
			
		int warehousecount2=wareHouseBodyListCount.size();
		
		System.err.println(warehousecount2);
			
		for(int i=0 ; i < warehousecount1 ;i++)
		{
			String data=wareHouseBodyListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 269, 6)))
			{
				wareHouseBodyListCount.get(i).click();
				
				break;
			}
		}
				
		enter_BodyWarehouse2Txt.sendKeys(Keys.TAB);
    	

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
		select3rdRow_1stColumn.click();
		   
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_BodyWarehouse2Txt));
		enter_BodyWarehouse2Txt.sendKeys(Keys.END);
		enter_BodyWarehouse2Txt.sendKeys(Keys.SHIFT,Keys.HOME);
		Thread.sleep(2000);
		
		enter_BodyWarehouse2Txt.sendKeys(Keys.SPACE);
			
		int warehousecount3=wareHouseBodyListCount.size();
		
		System.err.println(warehousecount3);
			
		for(int i=0 ; i < warehousecount1 ;i++)
		{
			String data=wareHouseBodyListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 269, 6)))
			{
				wareHouseBodyListCount.get(i).click();
				
				break;
			}
		}
				
		enter_BodyWarehouse2Txt.sendKeys(Keys.TAB);
    	
    	
		

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_1stColumn));
		select4thRow_1stColumn.click();
		   
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_BodyWarehouse2Txt));
		enter_BodyWarehouse2Txt.sendKeys(Keys.END);
		enter_BodyWarehouse2Txt.sendKeys(Keys.SHIFT,Keys.HOME);
		Thread.sleep(2000);
		
		enter_BodyWarehouse2Txt.sendKeys(Keys.SPACE);
			
		int warehousecount4=wareHouseBodyListCount.size();
		
		System.err.println(warehousecount4);
			
		for(int i=0 ; i < warehousecount1 ;i++)
		{
			String data=wareHouseBodyListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 269, 6)))
			{
				wareHouseBodyListCount.get(i).click();
				
				break;
			}
		}
				
		enter_BodyWarehouse2Txt.sendKeys(Keys.TAB);
    	

		// Second Row BAtch WA Item
		
		Thread.sleep(3000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_8thColumn));
		select2ndRow_8thColumn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();
		
		// Third Row BIn Finished Goods Item
		
		Thread.sleep(3000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_9thColumn));
		select3rdRow_9thColumn.click();
		
		Thread.sleep(2000);
		// Bin Outward
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
		binAutoAllocateBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
		binOkBtn.click();	
		
		Thread.sleep(2000);
		// Bin Inward
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
		binAutoAllocateBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
		binOkBtn.click();	
		
		// Fourth Row Rma R Item
		
		Thread.sleep(2000);
            
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_11thColumn));
		select4thRow_11thColumn.click();
		
		Thread.sleep(2000);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardExpandBtn));
		rmaoutwardExpandBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAHeaderChkBox));
		searchRMAHeaderChkBox.click();	
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAOkBtn));
		searchRMAOkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardOkBtn));
		rmaoutwardOkBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
		enter_RMA.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
		errorMessageCloseBtn.click();	

        boolean savingMessage=checkVoucherSavingMessage(docno);
		
		String actSavingMessage=Boolean.toString(savingMessage);
		String expSavingMessage =excelReader.getCellData(xlSheetName, 334, 7);
    	
    	excelReader.setCellData(xlfile, xlSheetName, 334, 8, actSavingMessage);
    	
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();	
    	
    	if (actSavingMessage.equalsIgnoreCase(expSavingMessage))
		{
			System.out.println(" Voucher Saved Successfully");
			excelReader.setCellData(xlfile, xlSheetName, 333, 9, resPass);
			return true ;
		}
		else 
		{
			System.out.println("Voucher Not Saved Successfully");
			excelReader.setCellData(xlfile, xlSheetName, 333, 9, resFail);
			return false ;
		}
	}




	
	
	// Sales Order Saving With Stock item In Secunderbad after Stock Transfer From Mumbai
	
	@FindBy(xpath="//tbody[@id='id_header_4_table_body']/tr/td[2]")
	private static List<WebElement> customerAccountListCount; 
	
	@FindBy(xpath="//tbody[@id='id_body_536870916_table_body']/tr/td[2]")
    private static List<WebElement> pvwareHouseListCount;

	
	
	@FindBy(xpath="//input[@id='id_body_33554494']")
	private static WebElement so_enter_AQTxt;
	
	@FindBy(xpath="//input[@id='id_body_33554495']")
	private static WebElement so_enter_FQTxt;

	
	
	
	
	public boolean checkStockItemInSTWHToReserveInSalesOrders() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		checkUserFriendlyMessage();
		
        Thread.sleep(3000);
		
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
        customerAccountTxt.click();
        customerAccountTxt.sendKeys(Keys.SPACE);
		 
        int customercount=customerAccountListCount.size();
        
        System.err.println(customercount);
        
        for(int i=0 ; i < customercount ;i++)
        {
        	String data=customerAccountListCount.get(i).getText();
        	
        	if(data.equalsIgnoreCase(excelReader.getCellData("SmokeSalesOrder", 693, 6)))
        	{
        		customerAccountListCount.get(i).click();
        		
        		break;
        	}
        }
			
        customerAccountTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.SPACE);
			
		int warehousecount=pvwareHouseListCount.size();
		
		System.err.println(warehousecount);
			
		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=pvwareHouseListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData("SmokeSalesOrder", 694, 6)))
			{
				pvwareHouseListCount.get(i).click();
				
				break;
			}
		}
			
		pvWareHouseTxt.sendKeys(Keys.TAB);
        
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData("SmokeSalesOrder", 695, 6)))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();
		
		so_enter_AQTxt.sendKeys(excelReader.getCellData("SmokeSalesOrder", 696, 6));
		
		so_enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_LeftPanelWareHouseRow1));
		
		// Actual
		
		String actTextres_LeftPanelWareHouseRow1	=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1		=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1		=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1		=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1		=res_LeftPanelBaseUnitRow1.getText();
				
		
		String actstockRes_WareHouseRow1			=stockRes_WareHouseRow1.getText();
		String actstockRes_VoucherNoRow1			=stockRes_VoucherNoRow1.getText();
		String actstockRes_QtyToReserveRow1			=stockRes_QtyToReserveRow1.getText();
		String actstockRes_AvailableQtyRow1			=stockRes_AvailableQtyRow1.getText();
		String actstockRes_CurOrdResQtyRow1			=stockRes_CurOrdResQtyRow1.getText();
		String actstockRes_QtyRow1					=stockRes_QtyRow1.getText();
		String actstockRes_PendingOrderQtyRow1		=stockRes_PendingOrderQtyRow1.getText();
		String actstockRes_ReleasedQtyRow1			=stockRes_ReleasedQtyRow1.getText();


	  
		// Expected
	  
		
		String expTextres_LeftPanelWareHouseRow1	=excelReader.getCellData("SmokeSalesOrder", 698, 7);
		String expTextres_LeftPanelItemCodeRow1		=excelReader.getCellData("SmokeSalesOrder", 699, 7);
		String expTextres_LeftPanelItemNameRow1		=excelReader.getCellData("SmokeSalesOrder", 700, 7);
		String expTextres_LeftPanelItemQtyRow1		=excelReader.getCellData("SmokeSalesOrder", 701, 7);
		String expTextres_LeftPanelBaseUnitRow1		=excelReader.getCellData("SmokeSalesOrder", 702, 7);
		
		String expstockRes_WareHouseRow1			=excelReader.getCellData("SmokeSalesOrder", 703, 7);
		String expstockRes_VoucherNoRow1			=excelReader.getCellData("SmokeSalesOrder", 704, 7);
		String expstockRes_QtyToReserveRow1			=excelReader.getCellData("SmokeSalesOrder", 705, 7);
		String expstockRes_AvailableQtyRow1			=excelReader.getCellData("SmokeSalesOrder", 706, 7);
		String expstockRes_CurOrdResQtyRow1			=excelReader.getCellData("SmokeSalesOrder", 707, 7);
		String expstockRes_QtyRow1					=excelReader.getCellData("SmokeSalesOrder", 708, 7);
		String expstockRes_PendingOrderQtyRow1		=excelReader.getCellData("SmokeSalesOrder", 709, 7);
		String expstockRes_ReleasedQtyRow1			=excelReader.getCellData("SmokeSalesOrder", 710, 7);
		
		
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 698, 8, actTextres_LeftPanelWareHouseRow1);
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 699, 8, actTextres_LeftPanelItemCodeRow1);
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 700, 8, actTextres_LeftPanelItemNameRow1);
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 701, 8, actTextres_LeftPanelItemQtyRow1);
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 702, 8, actTextres_LeftPanelBaseUnitRow1);
		
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 703, 8, actstockRes_WareHouseRow1);
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 704, 8, actstockRes_VoucherNoRow1);
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 705, 8, actstockRes_QtyToReserveRow1);
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 706, 8, actstockRes_AvailableQtyRow1);
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 707, 8, actstockRes_CurOrdResQtyRow1);
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 708, 8, actstockRes_QtyRow1);
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 709, 8, actstockRes_PendingOrderQtyRow1);
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 710, 8, actstockRes_ReleasedQtyRow1);
		
				
		System.out.println("**************************************** checkStockItemInSecunderabadToReserveInSalesOrders  ***************************************");
	   
		System.out.println("Textres_LeftPanelWareHouseRow1  : "+actTextres_LeftPanelWareHouseRow1	+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		System.out.println("Textres_LeftPanelItemCodeRow1  	: "+actTextres_LeftPanelItemCodeRow1	+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  	: "+actTextres_LeftPanelItemNameRow1	+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  	: "+actTextres_LeftPanelItemQtyRow1		+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  	: "+actTextres_LeftPanelBaseUnitRow1	+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);
		
		System.out.println("stockRes_WareHouseRow1  		: "+actstockRes_WareHouseRow1			+" 	Value Expected : "+expstockRes_WareHouseRow1);
		System.out.println("stockRes_VoucherNoRow1  		: "+actstockRes_VoucherNoRow1			+" 	Value Expected : "+expstockRes_VoucherNoRow1);
		System.out.println("stockRes_QtyToReserveRow1  		: "+actstockRes_QtyToReserveRow1		+" 	Value Expected : "+expstockRes_QtyToReserveRow1);
		System.out.println("stockRes_AvailableQtyRow1  		: "+actstockRes_AvailableQtyRow1		+" 	Value Expected : "+expstockRes_AvailableQtyRow1);
		System.out.println("stockRes_CurOrdResQtyRow1  		: "+actstockRes_CurOrdResQtyRow1		+" 	Value Expected : "+expstockRes_CurOrdResQtyRow1);
		System.out.println("stockRes_QtyRow1  				: "+actstockRes_QtyRow1					+" 	Value Expected : "+expstockRes_QtyRow1);
		System.out.println("stockRes_PendingOrderQtyRow1  	: "+actstockRes_PendingOrderQtyRow1		+" 	Value Expected : "+expstockRes_PendingOrderQtyRow1);
		System.out.println("stockRes_ReleasedQtyRow1  		: "+actstockRes_ReleasedQtyRow1			+" 	Value Expected : "+expstockRes_ReleasedQtyRow1);
		
		
		if(actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)
				
				&& actstockRes_WareHouseRow1.equalsIgnoreCase(expstockRes_WareHouseRow1) && actstockRes_VoucherNoRow1.equalsIgnoreCase(expstockRes_VoucherNoRow1) 
				&& actstockRes_QtyToReserveRow1.equalsIgnoreCase(expstockRes_QtyToReserveRow1) && actstockRes_AvailableQtyRow1.equalsIgnoreCase(expstockRes_AvailableQtyRow1)
				&& actstockRes_CurOrdResQtyRow1.equalsIgnoreCase(expstockRes_CurOrdResQtyRow1) && actstockRes_QtyRow1.equalsIgnoreCase(expstockRes_QtyRow1)
				&& actstockRes_PendingOrderQtyRow1.equalsIgnoreCase(expstockRes_PendingOrderQtyRow1) 
				&& actstockRes_ReleasedQtyRow1.equalsIgnoreCase(expstockRes_ReleasedQtyRow1))
		{
			System.out.println(" Test Pass: Stock reservation Values Displayedb As Expected ");
			excelReader.setCellData(xlfile, "SmokeSalesOrder", 692, 9, resPass);
			
			return true;
		}
		else
		{
			System.out.println(" Test Fail: Stock reservation Values  Not Displayed As Expected ");
			excelReader.setCellData(xlfile, "SmokeSalesOrder", 692, 9, resFail);
			
			return false;
		}
		
	}
	
	
	
	

	
	public boolean checkStockReservationToVerifyPickForSTWHStockItem() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockRes_QtyToReserveRow1));
		stockRes_QtyToReserveRow1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
		res_PickBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys(excelReader.getCellData("SmokeSalesOrder", 712, 6));
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		
		String actReserveColumn		=select1stRow_8thColumn.getText();
		String expReserveColumn		=excelReader.getCellData("SmokeSalesOrder", 713, 7);
    	
    	excelReader.setCellData(xlfile, "SmokeSalesOrder", 713, 8, actReserveColumn);
		
		System.out.println("**************************************** checkStockReservationToVerifyPickForSecunderabadStockItem  ***************************************");
		
		System.out.println("ReserveColumn  				: "+actReserveColumn			+" 	Value Expected : "+expReserveColumn);
		
		
		if(actReserveColumn.equalsIgnoreCase(expReserveColumn))
		{
			System.out.println("Test Pass : Reserved Bin Finished goods item");
			excelReader.setCellData(xlfile, "SmokeSalesOrder", 711, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : NOT Reserved Bin Finished goods item");
			excelReader.setCellData(xlfile, "SmokeSalesOrder", 711, 9, resFail);
			return false;
		}
	}
	
	
	
	
	
	public boolean checkStockItemInSTWHAfterConsumingInPreviousRowAndFullConsumeInSecondRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		select2ndRow_1stColumn.click();
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys(Keys.TAB);
        
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData("SmokeSalesOrder", 715, 6)))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_5thColumn));
		select2ndRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		Thread.sleep(2000);
		so_enter_AQTxt.sendKeys(excelReader.getCellData("SmokeSalesOrder", 716, 6));
		Thread.sleep(4000);
		so_enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_LeftPanelWareHouseRow1));
		
		// Actual
		
		String actTextres_LeftPanelWareHouseRow1	=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1		=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1		=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1		=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1		=res_LeftPanelBaseUnitRow1.getText();
		
		
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 717, 8, actTextres_LeftPanelWareHouseRow1);
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 718, 8, actTextres_LeftPanelItemCodeRow1);
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 719, 8, actTextres_LeftPanelItemNameRow1);
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 720, 8, actTextres_LeftPanelItemQtyRow1);
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 721, 8, actTextres_LeftPanelBaseUnitRow1);
		
		String actTextres_LeftPanelWareHouseRow2	=res_LeftPanelWareHouseRow2.getText();
		String actTextres_LeftPanelItemCodeRow2		=res_LeftPanelItemCodeRow2.getText();
		String actTextres_LeftPanelItemNameRow2		=res_LeftPanelItemNameRow2.getText();
		String actTextres_LeftPanelItemQtyRow2		=res_LeftPanelItemQtyRow2.getText();
		String actTextres_LeftPanelBaseUnitRow2		=res_LeftPanelBaseUnitRow2.getText();
		
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 722, 8, actTextres_LeftPanelWareHouseRow1);
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 723, 8, actTextres_LeftPanelItemCodeRow1);
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 724, 8, actTextres_LeftPanelItemNameRow1);
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 725, 8, actTextres_LeftPanelItemQtyRow1);
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 726, 8, actTextres_LeftPanelBaseUnitRow1);
				
		
		String expTextres_LeftPanelWareHouseRow1	=excelReader.getCellData("SmokeSalesOrder", 717, 7);
		String expTextres_LeftPanelItemCodeRow1		=excelReader.getCellData("SmokeSalesOrder", 718, 7);
		String expTextres_LeftPanelItemNameRow1		=excelReader.getCellData("SmokeSalesOrder", 719, 7);
		String expTextres_LeftPanelItemQtyRow1		=excelReader.getCellData("SmokeSalesOrder", 720, 7);
		String expTextres_LeftPanelBaseUnitRow1		=excelReader.getCellData("SmokeSalesOrder", 721, 7);
		
		String expTextres_LeftPanelWareHouseRow2	=excelReader.getCellData("SmokeSalesOrder", 722, 7);
		String expTextres_LeftPanelItemCodeRow2		=excelReader.getCellData("SmokeSalesOrder", 723, 7);
		String expTextres_LeftPanelItemNameRow2		=excelReader.getCellData("SmokeSalesOrder", 724, 7);
		String expTextres_LeftPanelItemQtyRow2		=excelReader.getCellData("SmokeSalesOrder", 725, 7);
		String expTextres_LeftPanelBaseUnitRow2		=excelReader.getCellData("SmokeSalesOrder", 726, 7);
		
		
		
		
		boolean expstockRes_WareHouseRow1			=true;
		boolean expstockRes_VoucherNoRow1			=true;
		boolean expstockRes_QtyToReserveRow1		=true;
		boolean expstockRes_AvailableQtyRow1		=true;
		boolean expstockRes_CurOrdResQtyRow1		=true;
		boolean expstockRes_QtyRow1					=true;
		boolean expstockRes_PendingOrderQtyRow1		=true;
		boolean expstockRes_ReleasedQtyRow1			=true;
		
		
		boolean actstockRes_WareHouseRow1			=stockRes_WareHouseRow1.getText().isEmpty();
		boolean actstockRes_VoucherNoRow1			=stockRes_VoucherNoRow1.getText().isEmpty();
		boolean actstockRes_QtyToReserveRow1		=stockRes_QtyToReserveRow1.getText().isEmpty();
		boolean actstockRes_AvailableQtyRow1		=stockRes_AvailableQtyRow1.getText().isEmpty();
		boolean actstockRes_CurOrdResQtyRow1		=stockRes_CurOrdResQtyRow1.getText().isEmpty();
		boolean actstockRes_QtyRow1					=stockRes_QtyRow1.getText().isEmpty();
		boolean actstockRes_PendingOrderQtyRow1		=stockRes_PendingOrderQtyRow1.getText().isEmpty();
		boolean actstockRes_ReleasedQtyRow1			=stockRes_ReleasedQtyRow1.getText().isEmpty();

		System.out.println("**************************************** checkStockItemInSecunderabadAfterConsumingInPreviousRowAndFullConsumeInSecondRow  ***************************************");
	   
		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);
		
		System.out.println("Textres_LeftPanelWareHouseRow2  	: "+actTextres_LeftPanelWareHouseRow2		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow2);
		System.out.println("Textres_LeftPanelItemCodeRow2  		: "+actTextres_LeftPanelItemCodeRow2		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow2);
		System.out.println("Textres_LeftPanelItemNameRow2  		: "+actTextres_LeftPanelItemNameRow2		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow2);
		System.out.println("Textres_LeftPanelItemQtyRow2  		: "+actTextres_LeftPanelItemQtyRow2			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow2);
		System.out.println("Textres_LeftPanelBaseUnitRow2  		: "+actTextres_LeftPanelBaseUnitRow2		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow2);
		
		System.out.println("stockRes_WareHouseRow1  			: "+actstockRes_WareHouseRow1				+" 	Value Expected : "+expstockRes_WareHouseRow1);
		System.out.println("stockRes_VoucherNoRow1  			: "+actstockRes_VoucherNoRow1				+" 	Value Expected : "+expstockRes_VoucherNoRow1);
		System.out.println("stockRes_QtyToReserveRow1  			: "+actstockRes_QtyToReserveRow1			+" 	Value Expected : "+expstockRes_QtyToReserveRow1);
		System.out.println("stockRes_AvailableQtyRow1  			: "+actstockRes_AvailableQtyRow1			+" 	Value Expected : "+expstockRes_AvailableQtyRow1);
		System.out.println("stockRes_CurOrdResQtyRow1  			: "+actstockRes_CurOrdResQtyRow1			+" 	Value Expected : "+expstockRes_CurOrdResQtyRow1);
		System.out.println("stockRes_QtyRow1  					: "+actstockRes_QtyRow1						+" 	Value Expected : "+expstockRes_QtyRow1);
		System.out.println("stockRes_PendingOrderQtyRow1  		: "+actstockRes_PendingOrderQtyRow1			+" 	Value Expected : "+expstockRes_PendingOrderQtyRow1);
		System.out.println("stockRes_ReleasedQtyRow1  			: "+actstockRes_ReleasedQtyRow1				+" 	Value Expected : "+expstockRes_ReleasedQtyRow1);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_CloseBtn));
		res_CloseBtn.click();
		
		
		if(actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)
				
				&& actTextres_LeftPanelWareHouseRow2.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow2)
				&& actTextres_LeftPanelItemCodeRow2.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow2) && actTextres_LeftPanelItemNameRow2.equalsIgnoreCase(expTextres_LeftPanelItemNameRow2)
				&& actTextres_LeftPanelItemQtyRow2.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow2) && actTextres_LeftPanelBaseUnitRow2.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow2)
				
				&& actstockRes_WareHouseRow1==expstockRes_WareHouseRow1 && actstockRes_VoucherNoRow1==expstockRes_VoucherNoRow1 
				&& actstockRes_QtyToReserveRow1==expstockRes_QtyToReserveRow1 && actstockRes_AvailableQtyRow1==expstockRes_AvailableQtyRow1
				&& actstockRes_CurOrdResQtyRow1==expstockRes_CurOrdResQtyRow1 && actstockRes_QtyRow1==expstockRes_QtyRow1
				&& actstockRes_PendingOrderQtyRow1==expstockRes_PendingOrderQtyRow1 
				&& actstockRes_ReleasedQtyRow1==expstockRes_ReleasedQtyRow1)
		{
			excelReader.setCellData(xlfile, "SmokeSalesOrder", 714, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "SmokeSalesOrder", 714, 9, resFail);
			return false;
		}
		
	}
	
	
	
	
		
	

	public boolean checkSavingSalesOrderVoucherWithReservationBATCHItemSTWH() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		select2ndRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys(Keys.TAB);
        
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount=itemListCount.size();
		
		System.err.println(itemcount);
			
		for(int i=0 ; i < itemcount ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData("SmokeSalesOrder", 736, 6)))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_5thColumn));
		select2ndRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		Thread.sleep(2000);
		so_enter_AQTxt.sendKeys(excelReader.getCellData("SmokeSalesOrder", 737, 6));
		so_enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_LeftPanelWareHouseRow1));

		String actTextres_LeftPanelWareHouseRow1BR		=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1BR		=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1BR		=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1BR		=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1BR		=res_LeftPanelBaseUnitRow1.getText();
		
		String actbatchRes_QtyToReserveRow1BR			=batchRes_QtyToReserveRow1.getText();
		String actbatchRes_BatchNoRow1BR				=batchRes_BatchNoRow1.getText();
		String actbatchRes_WareHouseRow1BR				=batchRes_WareHouseRow1.getText();
		String actbatchRes_AvailableQtyRow1BR			=batchRes_AvailableQtyRow1.getText();
		String actbatchRes_RelesaseQtyRow1BR			=batchRes_RelesaseQtyRow1.getText();
		String actbatchRes_CurOrdResQtyRow1BR			=batchRes_CurOrdResQtyRow1.getText();
		String actbatchRes_BatchQtyRow1BR				=batchRes_BatchQtyRow1.getText();
		

		excelReader.setCellData(xlfile, "SmokeSalesOrder", 738, 8, actTextres_LeftPanelWareHouseRow1BR);
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 739, 8, actTextres_LeftPanelItemCodeRow1BR);
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 740, 8, actTextres_LeftPanelItemNameRow1BR);
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 741, 8, actTextres_LeftPanelItemQtyRow1BR);
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 742, 8, actTextres_LeftPanelBaseUnitRow1BR);
		
		
		// Expected
		
		String expTextres_LeftPanelWareHouseRow1BR		=excelReader.getCellData("SmokeSalesOrder", 738, 7);
		String expTextres_LeftPanelItemCodeRow1BR		=excelReader.getCellData("SmokeSalesOrder", 739, 7);
		String expTextres_LeftPanelItemNameRow1BR		=excelReader.getCellData("SmokeSalesOrder", 740, 7);
		String expTextres_LeftPanelItemQtyRow1BR		=excelReader.getCellData("SmokeSalesOrder", 741, 7);
		String expTextres_LeftPanelBaseUnitRow1BR		=excelReader.getCellData("SmokeSalesOrder", 742, 7);
		
		String expbatchRes_QtyToReserveRow1BR			=excelReader.getCellData("SmokeSalesOrder", 743, 7);
		String expbatchRes_BatchNoRow1BR				=excelReader.getCellData("SmokeSalesOrder", 744, 7);
		String expbatchRes_WareHouseRow1BR				=excelReader.getCellData("SmokeSalesOrder", 745, 7);
		String expbatchRes_AvailableQtyRow1BR			=excelReader.getCellData("SmokeSalesOrder", 746, 7);
		String expbatchRes_RelesaseQtyRow1BR			=excelReader.getCellData("SmokeSalesOrder", 747, 7);
		String expbatchRes_CurOrdResQtyRow1BR			=excelReader.getCellData("SmokeSalesOrder", 748, 7);
		String expbatchRes_BatchQtyRow1BR				=excelReader.getCellData("SmokeSalesOrder", 749, 7);
		
		
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 743, 8, actbatchRes_QtyToReserveRow1BR);
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 744, 8, actbatchRes_BatchNoRow1BR);
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 745, 8, actbatchRes_WareHouseRow1BR);
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 746, 8, actbatchRes_AvailableQtyRow1BR);
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 747, 8, actbatchRes_RelesaseQtyRow1BR);
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 748, 8, actbatchRes_CurOrdResQtyRow1BR);
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 749, 8, actbatchRes_BatchQtyRow1BR);
		
		
		System.out.println("************************************8checkSavingSalesOrderVoucherWithReservationBATCHItemSTWH****************************");
		
		System.out.println("Textres_LeftPanelWareHouseRow1BR  	: "+actTextres_LeftPanelWareHouseRow1BR		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1BR);
		System.out.println("Textres_LeftPanelItemCodeRow1BR  	: "+actTextres_LeftPanelItemCodeRow1BR		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1BR);
		System.out.println("Textres_LeftPanelItemNameRow1BR  	: "+actTextres_LeftPanelItemNameRow1BR		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1BR);
		System.out.println("Textres_LeftPanelItemQtyRow1BR  	: "+actTextres_LeftPanelItemQtyRow1BR		+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1BR);
		System.out.println("Textres_LeftPanelBaseUnitRow1BR  	: "+actTextres_LeftPanelBaseUnitRow1BR		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1BR);
		
		System.out.println("batchRes_QtyToReserveRow1BR  		: "+actbatchRes_QtyToReserveRow1BR			+" 	Value Expected : "+expbatchRes_QtyToReserveRow1BR);
		System.out.println("batchRes_BatchNoRow1BR  			: "+actbatchRes_BatchNoRow1BR				+" 	Value Expected : "+expbatchRes_BatchNoRow1BR);
		System.out.println("batchRes_WareHouseRow1BR  			: "+actbatchRes_WareHouseRow1BR				+" 	Value Expected : "+expbatchRes_WareHouseRow1BR);
		System.out.println("batchRes_AvailableQtyRow1BR  		: "+actbatchRes_AvailableQtyRow1BR			+" 	Value Expected : "+expbatchRes_AvailableQtyRow1BR);
		System.out.println("batchRes_RelesaseQtyRow1BR  		: "+actbatchRes_RelesaseQtyRow1BR			+" 	Value Expected : "+expbatchRes_RelesaseQtyRow1BR);
		System.out.println("batchRes_CurOrdResQtyRow1BR 		: "+actbatchRes_CurOrdResQtyRow1BR   		+"  Value Expected : "+expbatchRes_CurOrdResQtyRow1BR);
		System.out.println("batchRes_BatchQtyRow1BR  			: "+actbatchRes_BatchQtyRow1BR				+" 	Value Expected : "+expbatchRes_BatchQtyRow1BR);
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchRes_Row1Index));
		batchRes_Row1Index.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
		res_PickBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData("SmokeSalesOrder", 750, 6));
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		
		
		// Third Row BAtch BR  Item
		
		Thread.sleep(2000);
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
		select3rdRow_1stColumn.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys(Keys.TAB);
        
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData("SmokeSalesOrder", 736, 6)))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_5thColumn));
		select3rdRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		Thread.sleep(2000);
		so_enter_AQTxt.sendKeys(excelReader.getCellData("SmokeSalesOrder", 737, 6));
		so_enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchRes_QtyToReserveRow1));
		boolean actbatchRes_QtyToReserveRow1BR1			= batchRes_QtyToReserveRow1.getText().isEmpty();
		boolean actbatchRes_BatchNoRow1BR1				= batchRes_BatchNoRow1.getText().isEmpty();
		boolean actbatchRes_WareHouseRow1BR1		    = batchRes_WareHouseRow1.getText().isEmpty();
		boolean actbatchRes_AvailableQtyRow1BR1			= batchRes_AvailableQtyRow1.getText().isEmpty();
		boolean actbatchRes_RelesaseQtyRow1BR1			= batchRes_RelesaseQtyRow1.getText().isEmpty();
		boolean actbatchRes_CurOrdResQtyRow1BR1			= batchRes_CurOrdResQtyRow1.getText().isEmpty();
		boolean actbatchRes_BatchQtyRow1BR1				= batchRes_BatchQtyRow1.getText().isEmpty();
		
		
		boolean expbatchRes_QtyToReserveRow1BR1			= true;
		boolean expbatchRes_BatchNoRow1BR1				= true;
		boolean expbatchRes_WareHouseRow1BR1		    = true;
		boolean expbatchRes_AvailableQtyRow1BR1			= true;
		boolean expbatchRes_RelesaseQtyRow1BR1			= true;
		boolean expbatchRes_CurOrdResQtyRow1BR1			= true;
		boolean expbatchRes_BatchQtyRow1BR1				= true;
		
		
		System.out.println("batchRes_QtyToReserveRow1BR1  		: "+actbatchRes_QtyToReserveRow1BR1			+" 	Value Expected : "+expbatchRes_QtyToReserveRow1BR1);
		System.out.println("batchRes_BatchNoRow1BR1  			: "+actbatchRes_BatchNoRow1BR1				+" 	Value Expected : "+expbatchRes_BatchNoRow1BR1);
		System.out.println("batchRes_WareHouseRow1BR1  			: "+actbatchRes_WareHouseRow1BR1				+" 	Value Expected : "+expbatchRes_WareHouseRow1BR1);
		System.out.println("batchRes_AvailableQtyRow1BR1  		: "+actbatchRes_AvailableQtyRow1BR1			+" 	Value Expected : "+expbatchRes_AvailableQtyRow1BR1);
		System.out.println("batchRes_RelesaseQtyRow1BR1  		: "+actbatchRes_RelesaseQtyRow1BR1			+" 	Value Expected : "+expbatchRes_RelesaseQtyRow1BR1);
		System.out.println("batchRes_CurOrdResQtyRow1BR1 		: "+actbatchRes_CurOrdResQtyRow1BR1   		+"  Value Expected : "+expbatchRes_CurOrdResQtyRow1BR1);
		System.out.println("batchRes_BatchQtyRow1BR1  			: "+actbatchRes_BatchQtyRow1BR1				+" 	Value Expected : "+expbatchRes_BatchQtyRow1BR1);
		
		
		
		boolean emptyresult=actbatchRes_QtyToReserveRow1BR1==expbatchRes_QtyToReserveRow1BR1 && actbatchRes_BatchNoRow1BR1==expbatchRes_BatchNoRow1BR1
				           && actbatchRes_WareHouseRow1BR1==expbatchRes_WareHouseRow1BR1 && actbatchRes_AvailableQtyRow1BR1==expbatchRes_AvailableQtyRow1BR1
				           && actbatchRes_RelesaseQtyRow1BR1==expbatchRes_RelesaseQtyRow1BR1 && actbatchRes_CurOrdResQtyRow1BR1==expbatchRes_CurOrdResQtyRow1BR1
				           && actbatchRes_BatchQtyRow1BR1==expbatchRes_BatchQtyRow1BR1;
		
		
		String actResult=Boolean.toString(emptyresult);
		String expResult=excelReader.getCellData("SmokeSalesOrder", 751, 7);
    	
    	excelReader.setCellData(xlfile, "SmokeSalesOrder", 751, 8, actResult);
		
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_CloseBtn));
		res_CloseBtn.click();
    	
    	
    	
    	System.out.println(" Display Empty Result : "+actResult +" Value Expected : "+expResult);
    	
		if (actResult.equalsIgnoreCase(expResult) && actTextres_LeftPanelWareHouseRow1BR.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1BR)
				&& actTextres_LeftPanelItemCodeRow1BR.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1BR) && actTextres_LeftPanelItemNameRow1BR.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1BR)
				&& actTextres_LeftPanelItemQtyRow1BR.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1BR) && actTextres_LeftPanelBaseUnitRow1BR.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1BR)
				
				&& actbatchRes_QtyToReserveRow1BR.equalsIgnoreCase(expbatchRes_QtyToReserveRow1BR)&& actbatchRes_BatchNoRow1BR.equalsIgnoreCase(expbatchRes_BatchNoRow1BR)
				&& actbatchRes_WareHouseRow1BR.equalsIgnoreCase(expbatchRes_WareHouseRow1BR) && actbatchRes_AvailableQtyRow1BR.equalsIgnoreCase(expbatchRes_AvailableQtyRow1BR)
				&& actbatchRes_RelesaseQtyRow1BR.equalsIgnoreCase(expbatchRes_RelesaseQtyRow1BR) && actbatchRes_CurOrdResQtyRow1BR.equalsIgnoreCase(expbatchRes_CurOrdResQtyRow1BR)
				&& actbatchRes_BatchQtyRow1BR.equalsIgnoreCase(expbatchRes_BatchQtyRow1BR))
		{
			excelReader.setCellData(xlfile, "SmokeSalesOrder", 735, 9, resPass);
			return true;
		}
		else
		{
		   excelReader.setCellData(xlfile, "SmokeSalesOrder", 735, 9, resFail);
           return false;
		}
		
		
		
		}

	
	
			
	public boolean checkSavingSalesOrderVoucherWithReservationWithFIFOCOGSITEM() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
		select3rdRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys(Keys.TAB);
        
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount=itemListCount.size();
		
		System.err.println(itemcount);
			
		for(int i=0 ; i < itemcount ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData("SmokeSalesOrder", 753, 6)))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_5thColumn));
		select3rdRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		Thread.sleep(2000);
		so_enter_AQTxt.sendKeys(excelReader.getCellData("SmokeSalesOrder", 754, 6));
		so_enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		
	
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_LeftPanelWareHouseRow1));

		String actTextres_LeftPanelWareHouseRow1Bin		=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1Bin		=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1Bin		=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1Bin		=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1Bin		=res_LeftPanelBaseUnitRow1.getText();
		
		String actbinRes_WarehouseRow1				=binRes_WarehouseRow1.getText();
		String actbinRes_QtyToReserveRow1			=binRes_QtyToReserveRow1.getText();
		String actbinRes_BinNoRow1					=binRes_BinNoRow1.getText();
		String actbinRes_AvailableQtyRow1			=binRes_AvailableQtyRow1.getText();
		String actbinRes_ReleaseQtyRow1				=binRes_ReleaseQtyRow1.getText();
		String actbinRes_TotalreservedQtyRow1		=binRes_TotalreservedQtyRow1.getText();
		String actbinRes_BinQtyRow1					=binRes_BinQtyRow1.getText();
		boolean actbinRes_SkidIdRow1				=binRes_SkidIdRow1.getText().isEmpty();
		boolean actbinRes_AllocStatusRow1			=binRes_AllocStatusRow1.getText().isEmpty();
		String actbinRes_InvStatusRow1				=binRes_InvStatusRow1.getText();
		String actbinRes_LotNoRow1					=binRes_LotNoRow1.getText();
	
		
		// Expected
		
		String expTextres_LeftPanelWareHouseRow1Bin		=excelReader.getCellData("SmokeSalesOrder", 755, 7);
		String expTextres_LeftPanelItemCodeRow1Bin		=excelReader.getCellData("SmokeSalesOrder", 756, 7);
		String expTextres_LeftPanelItemNameRow1Bin		=excelReader.getCellData("SmokeSalesOrder", 757, 7);
		String expTextres_LeftPanelItemQtyRow1Bin		=excelReader.getCellData("SmokeSalesOrder", 758, 7);
		String expTextres_LeftPanelBaseUnitRow1Bin		=excelReader.getCellData("SmokeSalesOrder", 759, 7);
		
		
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 755, 8, actTextres_LeftPanelWareHouseRow1Bin);
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 756, 8, actTextres_LeftPanelItemCodeRow1Bin);
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 757, 8, actTextres_LeftPanelItemNameRow1Bin);
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 758, 8, actTextres_LeftPanelItemQtyRow1Bin);
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 759, 8, actTextres_LeftPanelBaseUnitRow1Bin);
		
		
		
		
		String expbinRes_WarehouseRow1				=excelReader.getCellData("SmokeSalesOrder", 760, 7);
		String expbinRes_QtyToReserveRow1			=excelReader.getCellData("SmokeSalesOrder", 761, 7);
		String expbinRes_BinNoRow1					=excelReader.getCellData("SmokeSalesOrder", 762, 7);
		String expbinRes_AvailableQtyRow1			=excelReader.getCellData("SmokeSalesOrder", 763, 7);
		String expbinRes_ReleaseQtyRow1				=excelReader.getCellData("SmokeSalesOrder", 764, 7);
		String expbinRes_TotalreservedQtyRow1		=excelReader.getCellData("SmokeSalesOrder", 765, 7);
		String expbinRes_BinQtyRow1					=excelReader.getCellData("SmokeSalesOrder", 766, 7);
		String expbinRes_InvStatusRow1				=excelReader.getCellData("SmokeSalesOrder", 767, 7);
		String expbinRes_LotNoRow1					=excelReader.getCellData("SmokeSalesOrder", 768, 7);
		
	
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 760, 8, expbinRes_WarehouseRow1);
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 761, 8, expbinRes_QtyToReserveRow1);
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 762, 8, expbinRes_BinNoRow1);
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 763, 8, expbinRes_AvailableQtyRow1);
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 764, 8, expbinRes_ReleaseQtyRow1);
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 765, 8, expbinRes_TotalreservedQtyRow1);
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 766, 8, expbinRes_BinQtyRow1);
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 767, 8, expbinRes_InvStatusRow1);
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 768, 8, expbinRes_LotNoRow1);
		
		
		
		System.out.println("******************************88checkSavingSalesOrderVoucherWithReservationWithFIFOCOGSITEM************************");
		
		System.out.println("Textres_LeftPanelWareHouseRow1Bin  	: "+actTextres_LeftPanelWareHouseRow1Bin	+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1Bin);
		System.out.println("Textres_LeftPanelItemCodeRow1Bin  	: "+actTextres_LeftPanelItemCodeRow1Bin		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1Bin);
		System.out.println("Textres_LeftPanelItemNameRow1Bin  	: "+actTextres_LeftPanelItemNameRow1Bin		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1Bin);
		System.out.println("Textres_LeftPanelItemQtyRow1Bin  	: "+actTextres_LeftPanelItemQtyRow1Bin		+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1Bin);
		System.out.println("Textres_LeftPanelBaseUnitRow1Bin  	: "+actTextres_LeftPanelBaseUnitRow1Bin		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1Bin);
		
		System.out.println("binRes_WarehouseRow1  			    : "+actbinRes_WarehouseRow1					+" 	Value Expected : "+expbinRes_WarehouseRow1);
		System.out.println("binRes_QtyToReserveRow1  			: "+actbinRes_QtyToReserveRow1				+" 	Value Expected : "+expbinRes_QtyToReserveRow1);
		System.out.println("binRes_BinNoRow1  					: "+actbinRes_BinNoRow1						+" 	Value Expected : "+expbinRes_BinNoRow1);
		System.out.println("binRes_AvailableQtyRow1  			: "+actbinRes_AvailableQtyRow1				+" 	Value Expected : "+expbinRes_AvailableQtyRow1);
		System.out.println("binRes_ReleaseQtyRow1  				: "+actbinRes_ReleaseQtyRow1				+" 	Value Expected : "+expbinRes_ReleaseQtyRow1);
		System.out.println("binRes_TotalreservedQtyRow1 		: "+actbinRes_TotalreservedQtyRow1   		+"  Value Expected : "+expbinRes_TotalreservedQtyRow1);
		System.out.println("binRes_BinQtyRow1  					: "+actbinRes_BinQtyRow1					+" 	Value Expected : "+expbinRes_BinQtyRow1);
		System.out.println("binRes_InvStatusRow1  				: "+actbinRes_InvStatusRow1					+"  Value Expected : "+expbinRes_InvStatusRow1);
		System.out.println("binRes_LotNoRow1  					: "+actbinRes_LotNoRow1						+"  Value Expected : "+expbinRes_LotNoRow1);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binRes_QtyToReserveRow1));
		binRes_QtyToReserveRow1.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
		res_PickBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData("SmokeSalesOrder", 769, 6));
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_1stColumn));
		select4thRow_1stColumn.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys(Keys.TAB);
        
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount3=itemListCount.size();
		
		System.err.println(itemcount3);
			
		for(int i=0 ; i < itemcount3 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData("SmokeSalesOrder", 753, 6)))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_5thColumn));
		select4thRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		Thread.sleep(2000);
		so_enter_AQTxt.sendKeys(excelReader.getCellData("SmokeSalesOrder", 754, 6));
		so_enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		boolean expbinRes_WarehouseRow11				=true;
		boolean expbinRes_QtyToReserveRow11			    =true;
		boolean expbinRes_BinNoRow11					=true;
		boolean expbinRes_AvailableQtyRow11			    =true;
		boolean expbinRes_ReleaseQtyRow11				=true;
		boolean expbinRes_TotalreservedQtyRow11		    =true;
		boolean expbinRes_BinQtyRow11					=true;
		boolean expbinRes_InvStatusRow11				=true;
		boolean expbinRes_LotNoRow11					=true;
		
		
		boolean actbinRes_WarehouseRow11				=binRes_WarehouseRow1.getText().isEmpty();
		boolean actbinRes_QtyToReserveRow11			    =binRes_QtyToReserveRow1.getText().isEmpty();
		boolean actbinRes_BinNoRow11					=binRes_BinNoRow1.getText().isEmpty();
		boolean actbinRes_AvailableQtyRow11			    =binRes_AvailableQtyRow1.getText().isEmpty();
		boolean actbinRes_ReleaseQtyRow11				=binRes_ReleaseQtyRow1.getText().isEmpty();
		boolean actbinRes_TotalreservedQtyRow11		    =binRes_TotalreservedQtyRow1.getText().isEmpty();
		boolean actbinRes_BinQtyRow11					=binRes_BinQtyRow1.getText().isEmpty();
		boolean actbinRes_InvStatusRow11				=binRes_InvStatusRow1.getText().isEmpty();
		boolean actbinRes_LotNoRow11					=binRes_LotNoRow1.getText().isEmpty();
		
		
		boolean DisplayResult=actbinRes_WarehouseRow11==expbinRes_WarehouseRow11 && actbinRes_QtyToReserveRow11==expbinRes_QtyToReserveRow11 && 
				              actbinRes_BinNoRow11==expbinRes_BinNoRow11 && actbinRes_AvailableQtyRow11==expbinRes_AvailableQtyRow11 && 
				              actbinRes_ReleaseQtyRow11==expbinRes_ReleaseQtyRow11 && actbinRes_TotalreservedQtyRow11==expbinRes_TotalreservedQtyRow11 &&
				              actbinRes_BinQtyRow11==expbinRes_BinQtyRow11 && actbinRes_InvStatusRow11==expbinRes_InvStatusRow11 && actbinRes_LotNoRow11==expbinRes_LotNoRow11;
		
		
		
		String actEmptyResult=Boolean.toString(DisplayResult);
		String expEmptyResult=excelReader.getCellData("SmokeSalesOrder", 770, 7);
    	
    	excelReader.setCellData(xlfile, "SmokeSalesOrder", 770, 8, actEmptyResult);

		
		
		
		System.out.println("binRes_WarehouseRow11  			    : "+actbinRes_WarehouseRow11					+" 	Value Expected : "+expbinRes_WarehouseRow11);
		System.out.println("binRes_QtyToReserveRow11  			: "+actbinRes_QtyToReserveRow11				+" 	Value Expected : "+expbinRes_QtyToReserveRow11);
		System.out.println("binRes_BinNoRow11  					: "+actbinRes_BinNoRow11						+" 	Value Expected : "+expbinRes_BinNoRow11);
		System.out.println("binRes_AvailableQtyRow11  			: "+actbinRes_AvailableQtyRow11				+" 	Value Expected : "+expbinRes_AvailableQtyRow11);
		System.out.println("binRes_ReleaseQtyRow11  				: "+actbinRes_ReleaseQtyRow11				+" 	Value Expected : "+expbinRes_ReleaseQtyRow11);
		System.out.println("binRes_TotalreservedQtyRow11 		: "+actbinRes_TotalreservedQtyRow11   		+"  Value Expected : "+expbinRes_TotalreservedQtyRow11);
		System.out.println("binRes_BinQtyRow11  					: "+actbinRes_BinQtyRow11					+" 	Value Expected : "+expbinRes_BinQtyRow11);
		System.out.println("binRes_InvStatusRow11  				: "+actbinRes_InvStatusRow11					+"  Value Expected : "+expbinRes_InvStatusRow11);
		System.out.println("binRes_LotNoRow11  					: "+actbinRes_LotNoRow11						+"  Value Expected : "+expbinRes_LotNoRow11);
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_CloseBtn));
		res_CloseBtn.click();
		
		
		
		if (actEmptyResult.equalsIgnoreCase(expEmptyResult) &&  actTextres_LeftPanelWareHouseRow1Bin.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1Bin)
				&& actTextres_LeftPanelItemCodeRow1Bin.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1Bin) && actTextres_LeftPanelItemNameRow1Bin.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1Bin)
				&& actTextres_LeftPanelItemQtyRow1Bin.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1Bin) && actTextres_LeftPanelBaseUnitRow1Bin.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1Bin)
				
				&& actbinRes_WarehouseRow1.equalsIgnoreCase(expbinRes_WarehouseRow1) && actbinRes_QtyToReserveRow1.equalsIgnoreCase(expbinRes_QtyToReserveRow1)
				&& actbinRes_BinNoRow1.equalsIgnoreCase(expbinRes_BinNoRow1) && actbinRes_AvailableQtyRow1.equalsIgnoreCase(expbinRes_AvailableQtyRow1)
				&& actbinRes_ReleaseQtyRow1.equalsIgnoreCase(expbinRes_ReleaseQtyRow1)
				&& actbinRes_TotalreservedQtyRow1.equalsIgnoreCase(expbinRes_TotalreservedQtyRow1)
				&& actbinRes_BinQtyRow1.equalsIgnoreCase(expbinRes_BinQtyRow1) 
				&& actbinRes_InvStatusRow1.equalsIgnoreCase(expbinRes_InvStatusRow1)
				&& actbinRes_LotNoRow1.equalsIgnoreCase(expbinRes_LotNoRow1))
		{
			excelReader.setCellData(xlfile, "SmokeSalesOrder", 752, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "SmokeSalesOrder", 752, 9, resFail);
            return false;
		}
	}
	
	
	
	
	 public boolean checkSavingSalesOrderVoucherWithReservationWithWACOGSITEM() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_1stColumn));
		select4thRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount=itemListCount.size();
		
		System.err.println(itemcount);
			
		for(int i=0 ; i < itemcount ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData("SmokeSalesOrder", 772, 6)))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_5thColumn));
		select4thRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		Thread.sleep(2000);
		so_enter_AQTxt.sendKeys(excelReader.getCellData("SmokeSalesOrder", 773, 6));
		so_enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaRes_SelectedRow1));
		
		if (rmaRes_SelectedRow1.isDisplayed()==true && rmaRes_SelectedRow5.isDisplayed()==true)
		{
			rmaRes_SelectedRow1.click();
			rmaRes_SelectedRow2.click();
			rmaRes_SelectedRow3.click();
			rmaRes_SelectedRow4.click();
			rmaRes_SelectedRow5.click();
		}
		
		
		
		// Expected
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_LeftPanelWareHouseRow1));  
		
		String actTextres_LeftPanelWareHouseRow1		=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1   	    =res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1	        =res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1	 	    =res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1	 	    =res_LeftPanelBaseUnitRow1.getText();
		
		
		
		String expTextres_LeftPanelWareHouseRow1=excelReader.getCellData("SmokeSalesOrder", 774, 7);
		String expTextres_LeftPanelItemCodeRow1	=excelReader.getCellData("SmokeSalesOrder", 775, 7);
		String expTextres_LeftPanelItemNameRow1	=excelReader.getCellData("SmokeSalesOrder", 776, 7);
		String expTextres_LeftPanelItemQtyRow1	=excelReader.getCellData("SmokeSalesOrder", 777, 7);;
		String expTextres_LeftPanelBaseUnitRow1	=excelReader.getCellData("SmokeSalesOrder", 778, 7);
		
		
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 774, 8, actTextres_LeftPanelWareHouseRow1);
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 775, 8, actTextres_LeftPanelItemCodeRow1);
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 776, 8, actTextres_LeftPanelItemNameRow1);
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 777, 8, actTextres_LeftPanelItemQtyRow1);
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 778, 8, actTextres_LeftPanelBaseUnitRow1);
		
		
		
		String actrmaRes_WarehouseRow1			=rmaRes_WarehouseRow1.getText();
		String actrmaRes_WarehouseRow2			=rmaRes_WarehouseRow2.getText();
		String actrmaRes_WarehouseRow3			=rmaRes_WarehouseRow3.getText();
		String actrmaRes_WarehouseRow4			=rmaRes_WarehouseRow4.getText();
		String actrmaRes_WarehouseRow5			=rmaRes_WarehouseRow5.getText();
		
	   
		String actrmaRes_RmaNoRow1				=rmaRes_RmaNoRow1.getText();
		String actrmaRes_RmaNoRow2				=rmaRes_RmaNoRow2.getText();
		String actrmaRes_RmaNoRow3				=rmaRes_RmaNoRow3.getText();
		String actrmaRes_RmaNoRow4				=rmaRes_RmaNoRow4.getText();
		String actrmaRes_RmaNoRow5				=rmaRes_RmaNoRow5.getText();
		
	
		boolean actrmaRes_SelectedRow1			=rmaRes_SelectedRow1.isSelected();
		boolean actrmaRes_SelectedRow2			=rmaRes_SelectedRow2.isSelected();
		boolean actrmaRes_SelectedRow3			=rmaRes_SelectedRow3.isSelected();
		boolean actrmaRes_SelectedRow4			=rmaRes_SelectedRow4.isSelected();
		boolean actrmaRes_SelectedRow5			=rmaRes_SelectedRow5.isSelected();
		
		
		String exprmaRes_WarehouseRow1			=excelReader.getCellData("SmokeSalesOrder", 779, 7);
		String exprmaRes_WarehouseRow2			=excelReader.getCellData("SmokeSalesOrder", 780, 7);
		String exprmaRes_WarehouseRow3			=excelReader.getCellData("SmokeSalesOrder", 781, 7);
		String exprmaRes_WarehouseRow4			=excelReader.getCellData("SmokeSalesOrder", 782, 7);
		String exprmaRes_WarehouseRow5			=excelReader.getCellData("SmokeSalesOrder", 783, 7);
		
		
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 779, 8, actrmaRes_WarehouseRow1);
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 780, 8, actrmaRes_WarehouseRow2);
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 781, 8, actrmaRes_WarehouseRow3);
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 782, 8, actrmaRes_WarehouseRow4);
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 783, 8, actrmaRes_WarehouseRow5);
		
		
		
		String exprmaRes_RmaNoRow1				=excelReader.getCellData("SmokeSalesOrder", 784, 7);
		String exprmaRes_RmaNoRow2				=excelReader.getCellData("SmokeSalesOrder", 785, 7);
		String exprmaRes_RmaNoRow3				=excelReader.getCellData("SmokeSalesOrder", 786, 7);
		String exprmaRes_RmaNoRow4				=excelReader.getCellData("SmokeSalesOrder", 787, 7);
		String exprmaRes_RmaNoRow5				=excelReader.getCellData("SmokeSalesOrder", 788, 7);
		
			
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 784, 8, actrmaRes_RmaNoRow1);
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 785, 8, actrmaRes_RmaNoRow2);
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 786, 8, actrmaRes_RmaNoRow3);
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 787, 8, actrmaRes_RmaNoRow4);
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 788, 8, actrmaRes_RmaNoRow5);
		
		
		
		boolean exprmaRes_SelectedRow1			=true;
		boolean exprmaRes_SelectedRow2			=true;
		boolean exprmaRes_SelectedRow3			=true;
		boolean exprmaRes_SelectedRow4			=true;
		boolean exprmaRes_SelectedRow5			=true;
		
		
		
		
		System.out.println("******************************checkSavingSalesOrderVoucherWithReservationWithWACOGSITEM************************");
		
		System.out.println("Textres_LeftPanelWareHouseRow1  : "+actTextres_LeftPanelWareHouseRow1	    +" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		System.out.println("Textres_LeftPanelItemCodeRow1  	: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  	: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  	: "+actTextres_LeftPanelItemQtyRow1		    +" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  	: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);
		
		System.out.println("rmaRes_WarehouseRow1  				: "+actrmaRes_WarehouseRow1					+" 	Value Expected : "+exprmaRes_WarehouseRow1);
		System.out.println("rmaRes_WarehouseRow2  				: "+actrmaRes_WarehouseRow2					+" 	Value Expected : "+exprmaRes_WarehouseRow2);
		System.out.println("rmaRes_WarehouseRow3  				: "+actrmaRes_WarehouseRow3					+" 	Value Expected : "+exprmaRes_WarehouseRow3);
		System.out.println("rmaRes_WarehouseRow4  				: "+actrmaRes_WarehouseRow4					+" 	Value Expected : "+exprmaRes_WarehouseRow4);
		System.out.println("rmaRes_WarehouseRow5  				: "+actrmaRes_WarehouseRow5					+" 	Value Expected : "+exprmaRes_WarehouseRow5);
		
	   
		System.out.println("rmaRes_RmaNoRow1  					: "+actrmaRes_RmaNoRow1						+" 	Value Expected : "+exprmaRes_RmaNoRow1);
		System.out.println("rmaRes_RmaNoRow2  					: "+actrmaRes_RmaNoRow2						+" 	Value Expected : "+exprmaRes_RmaNoRow2);
		System.out.println("rmaRes_RmaNoRow3  					: "+actrmaRes_RmaNoRow3						+" 	Value Expected : "+exprmaRes_RmaNoRow3);
		System.out.println("rmaRes_RmaNoRow4  					: "+actrmaRes_RmaNoRow4						+" 	Value Expected : "+exprmaRes_RmaNoRow4);
		System.out.println("rmaRes_RmaNoRow5  					: "+actrmaRes_RmaNoRow5						+" 	Value Expected : "+exprmaRes_RmaNoRow5);
		
	   
		System.out.println("rmaRes_SelectedRow1  				: "+actrmaRes_SelectedRow1					+" 	Value Expected : "+exprmaRes_SelectedRow1);
		System.out.println("rmaRes_SelectedRow2  				: "+actrmaRes_SelectedRow2					+" 	Value Expected : "+exprmaRes_SelectedRow2);
		System.out.println("rmaRes_SelectedRow3  				: "+actrmaRes_SelectedRow3					+" 	Value Expected : "+exprmaRes_SelectedRow3);
		System.out.println("rmaRes_SelectedRow4  				: "+actrmaRes_SelectedRow4					+" 	Value Expected : "+exprmaRes_SelectedRow4);
		System.out.println("rmaRes_SelectedRow5  				: "+actrmaRes_SelectedRow5					+" 	Value Expected : "+exprmaRes_SelectedRow5);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData("SmokeSalesOrder", 789, 6));
		enter_Rate.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_1stColumn));
		select5thRow_1stColumn.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount3=itemListCount.size();
		
		System.err.println(itemcount3);
			
		for(int i=0 ; i < itemcount3 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData("SmokeSalesOrder", 772, 6)))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_5thColumn));
		select5thRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		Thread.sleep(2000);
		so_enter_AQTxt.sendKeys(excelReader.getCellData("SmokeSalesOrder", 773, 6));
		so_enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		boolean RmaRes_WarehouseRow1			=rmaRes_WarehouseRow1.getText().isEmpty();
		
		String actEmptyResult=Boolean.toString(RmaRes_WarehouseRow1);
		String expEmptyResult=excelReader.getCellData("SmokeSalesOrder", 790, 7);
		
		excelReader.setCellData(xlfile, "SmokeSalesOrder", 790, 8, actEmptyResult);
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_CloseBtn));
		res_CloseBtn.click();
		
		
		Thread.sleep(3000);
		
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_1stColumn));
		select5thRow_1stColumn.click();
		
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys(Keys.CONTROL+"d");
		
		
		
		
		if (actEmptyResult.equalsIgnoreCase(expEmptyResult) 
					
					&& actrmaRes_WarehouseRow1.equalsIgnoreCase(exprmaRes_WarehouseRow1) && actrmaRes_WarehouseRow2.equalsIgnoreCase(exprmaRes_WarehouseRow2)
					&& actrmaRes_WarehouseRow3.equalsIgnoreCase(exprmaRes_WarehouseRow3) && actrmaRes_WarehouseRow4.equalsIgnoreCase(exprmaRes_WarehouseRow4)
					&& actrmaRes_WarehouseRow5.equalsIgnoreCase(exprmaRes_WarehouseRow5) 
					
					
					&& actrmaRes_RmaNoRow1.equalsIgnoreCase(exprmaRes_RmaNoRow1) && actrmaRes_RmaNoRow2.equalsIgnoreCase(exprmaRes_RmaNoRow2)
					&& actrmaRes_RmaNoRow3.equalsIgnoreCase(exprmaRes_RmaNoRow3) && actrmaRes_RmaNoRow4.equalsIgnoreCase(exprmaRes_RmaNoRow4)
					&& actrmaRes_RmaNoRow5.equalsIgnoreCase(exprmaRes_RmaNoRow5) 
					
					&& actrmaRes_SelectedRow1==exprmaRes_SelectedRow1 && actrmaRes_SelectedRow2==exprmaRes_SelectedRow2
					&& actrmaRes_SelectedRow3==exprmaRes_SelectedRow3 && actrmaRes_SelectedRow4==exprmaRes_SelectedRow4
					&& actrmaRes_SelectedRow5==exprmaRes_SelectedRow5 )
		{
			excelReader.setCellData(xlfile, "SmokeSalesOrder", 771, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "SmokeSalesOrder", 771, 9, resFail);
		    return false;
		}
		
}



		public boolean checkSavingSalesOrderWithAllItems() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
            Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		    String docno=documentNumberTxt.getAttribute("value");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
            boolean savingMessage=checkVoucherSavingMessage(docno);
			
			
			String actSavingMessage=Boolean.toString(savingMessage);
			String expSavingMessage=excelReader.getCellData("SmokeSalesOrder", 792, 7);
	    	
	    	excelReader.setCellData(xlfile, "SmokeSalesOrder", 792, 8, actSavingMessage);
			
			if(savingMessage==true)
			{
				System.out.println("Test Pass : Error Message is Displayed ");
				excelReader.setCellData(xlfile, "SmokeSalesOrder", 791, 9, resPass);
				
				return true;
			}
			
			else
			{
				System.out.println("Test Fail :  Error Message is  not Displayed ");
			     excelReader.setCellData(xlfile, "SmokeSalesOrder", 791, 9, resFail);
				
				return false;
			}
		}
			
	
	

		public boolean checkSuspendOptionInSalesOrdersVoucherWithTransferedStock() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
			previousBtn.click();
			
			boolean loading=checkLoadingMessage();
			
			System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		    String docno=documentNumberTxt.getAttribute("value");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
			new_SuspendBtn.click();
			
			boolean savingMessage=checkVoucherSavingMessage(docno);
			
			String actSavingMessage=Boolean.toString(savingMessage);
			String expSavingMessage=excelReader.getCellData("SmokeSalesOrder", 794, 7);
	    	
	    	excelReader.setCellData(xlfile, "SmokeSalesOrder", 794, 8, actSavingMessage);
			
			System.out.println("************************************* checkSuspendOptionInSalesOrdersVoucherWithTransferedStock  *********************************");
			
			System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
			
			if(savingMessage==true)
			{
				System.out.println("Test Pass : Error Message is Displayed ");
				excelReader.setCellData(xlfile, "SmokeSalesOrder", 793, 9, resPass);
				return true;
			}
			
			else
			{
				System.out.println("Test Fail :  Error Message is  not Displayed ");
			     excelReader.setCellData(xlfile, "SmokeSalesOrder", 793, 9, resFail);
				return false;
			}
		}
		
		

		public boolean checkSavingSuspendedVoucherInStockTransfer() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
			previousBtn.click();
			
			boolean loading=checkLoadingMessage();
			
			System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		    String docno=documentNumberTxt.getAttribute("value");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			boolean savingMessage=checkVoucherSavingMessage(docno);
			
			String actSavingMessage=Boolean.toString(savingMessage);
			String expSavingMessage=excelReader.getCellData("SmokeSalesOrder", 796, 7);
	    	
	    	excelReader.setCellData(xlfile, "SmokeSalesOrder", 796, 8, actSavingMessage);
			
	    	Thread.sleep(2000);
	        
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
	        new_CloseBtn.click();
	        
	        Thread.sleep(2000);
	        
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(suspendStatusRow1));
			String actsuspendStatusRow1			=suspendStatusRow1.getText();
			String expsuspendStatusRow1			=excelReader.getCellData("SmokeSalesOrder", 797, 7);
	    	
	    	excelReader.setCellData(xlfile, "SmokeSalesOrder", 797, 8, actsuspendStatusRow1);
	    	
	    	
			System.out.println("************************************* checkSavingSuspendedVoucherInStockTransfer  *********************************");
			
			System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
			System.out.println("SavingMessage  :  "+actsuspendStatusRow1 +" Value Expected : "+expsuspendStatusRow1);
			
			if(savingMessage==true && actsuspendStatusRow1.equalsIgnoreCase(expsuspendStatusRow1))
			{
				System.out.println("Test Pass : Error Message is Displayed ");
				excelReader.setCellData(xlfile, "SmokeSalesOrder", 795, 9, resPass);
				return true;
			}
			
			else
			{
				System.out.println("Test Fail :  Error Message is  not Displayed ");
			     excelReader.setCellData(xlfile, "SmokeSalesOrder", 795, 9, resFail);
				return false;
			}
		}
		

		@FindBy(xpath="//a[@id='2057']//span[contains(text(),'Sales invoice VAT')]")
		private static WebElement  salesInvoiceVATVoucher;
		
		
		
		public boolean checkReleasingItemInSAlesInvoiceVatThoughSalesOrder() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
			finacinalsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialTransactionSalesMenu));
			financialTransactionSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoicesVoucher));
			salesInvoiceVATVoucher.click();
			
			
			Thread.sleep(3000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			
			boolean loading=checkLoadingMessage();
			
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_HeaderMinimizeBtn));	
			new_HeaderMinimizeBtn.click();
		     		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));	
			workFlowExpandBtn.click();
		            
			Thread.sleep(2000);
			List<WebElement> rowCountInLinkScreen=LinkRowCountCL;
    		
			int actLinkRowCountCLValue=rowCountInLinkScreen.size();
		            
			
			boolean actsearchOnDropdownCL		=searchOnDropdownCL.isDisplayed();
			boolean actcontainingDropdownCL		=containingDropdownCL.isDisplayed();
			boolean actworkFlowSearchTxtCL		=workFlowSearchTxtCL.isDisplayed();
			boolean actworkFlowCustomizeBtnCL	=workFlowCustomizeBtnCL.isDisplayed();
			boolean actworkFlowOkBtnCL			=workFlowOkBtnCL.isDisplayed();
			
			
			String actworkFlowRow1Column1CL		=workFlowRow1Column1CL.getText();
			String actworkFlowRow1Column2CL		=workFlowRow1Column2CL.getText();
			String actworkFlowRow1Column3CL		=workFlowRow1Column3CL.getText();
			String actworkFlowRow1Column4CL		=workFlowRow1Column4CL.getText();
			String actworkFlowRow1Column5CL		=workFlowRow1Column5CL.getText();
			
			String actworkFlowRow2Column1CL		=workFlowRow2Column1CL.getText();
			String actworkFlowRow2Column2CL		=workFlowRow2Column2CL.getText();
			String actworkFlowRow2Column3CL		=workFlowRow2Column3CL.getText();
			String actworkFlowRow2Column4CL		=workFlowRow2Column4CL.getText();
			String actworkFlowRow2Column5CL		=workFlowRow2Column5CL.getText();
			
			String actworkFlowRow3Column1CL		=workFlowRow3Column1CL.getText();
			String actworkFlowRow3Column2CL		=workFlowRow3Column2CL.getText();
			String actworkFlowRow3Column3CL		=workFlowRow3Column3CL.getText();
			String actworkFlowRow3Column4CL		=workFlowRow3Column4CL.getText();
			String actworkFlowRow3Column5CL		=workFlowRow3Column5CL.getText();
			
			String actworkFlowRow4Column1CL		=workFlowRow4Column1CL.getText();
			String actworkFlowRow4Column2CL		=workFlowRow4Column2CL.getText();
			String actworkFlowRow4Column3CL		=workFlowRow4Column3CL.getText();
			String actworkFlowRow4Column4CL		=workFlowRow4Column4CL.getText();
			String actworkFlowRow4Column5CL		=workFlowRow4Column5CL.getText();

			
			// Expected
			
			int expLinkRowCountCLValue=4;
			
			boolean expsearchOnDropdownCL		=true;
			boolean expcontainingDropdownCL		=true;
			boolean expworkFlowSearchTxtCL		=true;
			boolean expworkFlowCustomizeBtnCL	=true;
			boolean expworkFlowOkBtnCL			=true;
			
			String expworkFlowRow1Column1CL		=excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1266, 7);
			String expworkFlowRow1Column3CL		=excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1267, 7);
			String expworkFlowRow1Column4CL		=excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1268, 7);
			String expworkFlowRow1Column5CL		=excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1269, 7);
			
			String expworkFlowRow2Column1CL		=excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1270, 7);
			String expworkFlowRow2Column3CL		=excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1271, 7);
			String expworkFlowRow2Column4CL		=excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1272, 7);
			String expworkFlowRow2Column5CL		=excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1273, 7);

			String expworkFlowRow3Column1CL		=excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1274, 7);
			String expworkFlowRow3Column3CL		=excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1275, 7);
			String expworkFlowRow3Column4CL		=excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1276, 7);
			String expworkFlowRow3Column5CL		=excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1277, 7);
			
			String expworkFlowRow4Column1CL		=excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1278, 7);
			String expworkFlowRow4Column3CL		=excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1279, 7);
			String expworkFlowRow4Column4CL		=excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1280, 7);
			String expworkFlowRow4Column5CL		=excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1281, 7);
			
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1266, 8, actworkFlowRow1Column1CL);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1267, 8, actworkFlowRow1Column3CL);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1268, 8, actworkFlowRow1Column4CL);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1269, 8, actworkFlowRow1Column5CL);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1270, 8, actworkFlowRow1Column1CL);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1271, 8, actworkFlowRow1Column3CL);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1272, 8, actworkFlowRow1Column4CL);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1273, 8, actworkFlowRow1Column5CL);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1274, 8, actworkFlowRow1Column1CL);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1275, 8, actworkFlowRow1Column3CL);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1276, 8, actworkFlowRow1Column4CL);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1277, 8, actworkFlowRow1Column5CL);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1278, 8, actworkFlowRow1Column1CL);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1279, 8, actworkFlowRow1Column3CL);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1280, 8, actworkFlowRow1Column4CL);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1281, 8, actworkFlowRow1Column5CL);
			
			
			
			System.out.println("**************************************** checkSalesInvoiceVoucherToCheckLinkPopUpScreenWithCRTlPlusLForBatchExpired  ***************************************");
			
			System.out.println("LinkRowCountCLValue  		: "+actLinkRowCountCLValue		+" 	Value Expected : "+expLinkRowCountCLValue);
			
			System.out.println("searchOnDropdownCL  		: "+actsearchOnDropdownCL		+" 	Value Expected : "+expsearchOnDropdownCL);
			System.out.println("containingDropdownCL  		: "+actcontainingDropdownCL		+" 	Value Expected : "+expcontainingDropdownCL);
			System.out.println("workFlowSearchTxtCL  		: "+actworkFlowSearchTxtCL		+" 	Value Expected : "+expworkFlowSearchTxtCL);
			System.out.println("workFlowCustomizeBtnCL  	: "+actworkFlowCustomizeBtnCL	+" 	Value Expected : "+expworkFlowCustomizeBtnCL);
			System.out.println("workFlowOkBtnCL  			: "+actworkFlowOkBtnCL			+" 	Value Expected : "+expworkFlowOkBtnCL);
			
			System.out.println("workFlowRow1Column1CL  		: "+actworkFlowRow1Column1CL	+" 	Value Expected : "+expworkFlowRow1Column1CL);
			System.out.println("workFlowRow1Column3CL  		: "+actworkFlowRow1Column3CL	+" 	Value Expected : "+expworkFlowRow1Column3CL);
			System.out.println("workFlowRow1Column4CL  		: "+actworkFlowRow1Column4CL	+" 	Value Expected : "+expworkFlowRow1Column4CL);
			System.out.println("workFlowRow1Column5CL  		: "+actworkFlowRow1Column5CL	+" 	Value Expected : "+expworkFlowRow1Column5CL);
			
			System.out.println("workFlowRow2Column1CL  		: "+actworkFlowRow2Column1CL	+" 	Value Expected : "+expworkFlowRow2Column1CL);
			System.out.println("workFlowRow2Column3CL  		: "+actworkFlowRow2Column3CL	+" 	Value Expected : "+expworkFlowRow2Column3CL);
			System.out.println("workFlowRow2Column4CL  		: "+actworkFlowRow2Column4CL	+" 	Value Expected : "+expworkFlowRow2Column4CL);
			System.out.println("workFlowRow2Column5CL  		: "+actworkFlowRow2Column5CL	+" 	Value Expected : "+expworkFlowRow2Column5CL);
			
			System.out.println("workFlowRow3Column1CL  		: "+actworkFlowRow3Column1CL	+" 	Value Expected : "+expworkFlowRow3Column1CL);
			System.out.println("workFlowRow3Column3CL  		: "+actworkFlowRow3Column3CL	+" 	Value Expected : "+expworkFlowRow3Column3CL);
			System.out.println("workFlowRow3Column4CL  		: "+actworkFlowRow3Column4CL	+" 	Value Expected : "+expworkFlowRow3Column4CL);
			System.out.println("workFlowRow3Column5CL  		: "+actworkFlowRow3Column5CL	+" 	Value Expected : "+expworkFlowRow3Column5CL);
			
			System.out.println("workFlowRow4Column1CL  		: "+actworkFlowRow4Column1CL	+" 	Value Expected : "+expworkFlowRow4Column1CL);
			System.out.println("workFlowRow4Column3CL  		: "+actworkFlowRow4Column3CL	+" 	Value Expected : "+expworkFlowRow4Column3CL);
			System.out.println("workFlowRow4Column4CL  		: "+actworkFlowRow4Column4CL	+" 	Value Expected : "+expworkFlowRow4Column4CL);
			System.out.println("workFlowRow4Column5CL  		: "+actworkFlowRow4Column5CL	+" 	Value Expected : "+expworkFlowRow4Column5CL);
			
					
					
			if(actLinkRowCountCLValue==expLinkRowCountCLValue
					
					&& actsearchOnDropdownCL==expsearchOnDropdownCL && actcontainingDropdownCL==expcontainingDropdownCL && actworkFlowSearchTxtCL==expworkFlowSearchTxtCL
					&& actworkFlowCustomizeBtnCL==expworkFlowCustomizeBtnCL && actworkFlowOkBtnCL==expworkFlowOkBtnCL
					
					&& actworkFlowRow1Column1CL.equalsIgnoreCase(expworkFlowRow1Column1CL)
					&& actworkFlowRow1Column3CL.equalsIgnoreCase(expworkFlowRow1Column3CL)
					&& actworkFlowRow1Column4CL.equalsIgnoreCase(expworkFlowRow1Column4CL)
					&& actworkFlowRow1Column5CL.equalsIgnoreCase(expworkFlowRow1Column5CL)
					
					&& actworkFlowRow2Column1CL.equalsIgnoreCase(expworkFlowRow2Column1CL)
					&& actworkFlowRow2Column3CL.equalsIgnoreCase(expworkFlowRow2Column3CL)
					&& actworkFlowRow2Column4CL.equalsIgnoreCase(expworkFlowRow2Column4CL)
					&& actworkFlowRow2Column5CL.equalsIgnoreCase(expworkFlowRow2Column5CL)
					
					&& actworkFlowRow3Column1CL.equalsIgnoreCase(expworkFlowRow3Column1CL)
					&& actworkFlowRow3Column3CL.equalsIgnoreCase(expworkFlowRow3Column3CL)
					&& actworkFlowRow3Column4CL.equalsIgnoreCase(expworkFlowRow3Column4CL)
					&& actworkFlowRow3Column5CL.equalsIgnoreCase(expworkFlowRow3Column5CL)
					
					&& actworkFlowRow4Column1CL.equalsIgnoreCase(expworkFlowRow4Column1CL)
					&& actworkFlowRow4Column3CL.equalsIgnoreCase(expworkFlowRow4Column3CL)
					&& actworkFlowRow4Column4CL.equalsIgnoreCase(expworkFlowRow4Column4CL)
					&& actworkFlowRow4Column5CL.equalsIgnoreCase(expworkFlowRow4Column5CL))
			{
				System.out.println("Test Pass  : Links Displayed As Expected ");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1265, 9, resPass);
						
				return true;
			}
			else
			{
				System.out.println("Test Fail :Links Displayed As Expected ");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1265, 9, resFail);
						
				return false;
			}
		}

		@FindBy(xpath="//tbody[@id='id_header_268435470_table_body']/tr/td[2]")
	    private static List<WebElement> placeOFSupplyList;

		@FindBy(xpath="//input[@id='id_header_268435470']")
		private static WebElement  salesInvoiceVATPlaceOFSupply;
		
		//Sales Invoice VAT
		 @FindBy(xpath="//input[@id='id_body_33554476']")
	     private static WebElement enter_SIAQTxt;
		 
		 @FindBy(xpath="//input[@id='id_body_33554477']")
	     private static WebElement enter_SIFQTxt;
		
		
		
		public boolean checkSalesInvoiceVATVoucherInformationDisplayAfterSelectLinksThroughSearch() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
						
			Thread.sleep(2000);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBoxCL));
			workFlowHeaderChkBoxCL.click();
				
			Thread.sleep(2000);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnInSalesVoucher));
			workFlowOkBtnInSalesVoucher.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_HeaderExpandBtn));	
			new_HeaderExpandBtn.click();
			
			Thread.sleep(3000);
	    	
	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.END);
			departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			departmentTxt.sendKeys(Keys.SPACE);
				
			int departmentcount=departmentListCount.size();
			
			System.err.println(departmentcount);
				
			for(int i=0 ; i < departmentcount ;i++)
			{
				String data=departmentListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1283, 6)))
				{
					departmentListCount.get(i).click();
					
					break;
				}
			}
				
			departmentTxt.sendKeys(Keys.TAB);	
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
			salesInvoiceVATPlaceOFSupply.click();
			salesInvoiceVATPlaceOFSupply.sendKeys(Keys.END);
			salesInvoiceVATPlaceOFSupply.sendKeys(Keys.SHIFT,Keys.HOME);
			salesInvoiceVATPlaceOFSupply.sendKeys(Keys.SPACE);
			
			
			int placeOFSupplyListCount=placeOFSupplyList.size();
			
			System.err.println("placeOFSupplyListCount   : "+placeOFSupplyListCount);
				
			for(int i=0 ; i < placeOFSupplyListCount ;i++)
			{
				String data=placeOFSupplyList.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1284, 6)))
				{
					placeOFSupplyList.get(i).click();
					
					break;
				}
			}
				
			
			Thread.sleep(2000);
			
			salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_3rdColumn));
			select1stRow_3rdColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_3rdColumn));
			select2ndRow_3rdColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_3rdColumn));
			select3rdRow_3rdColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_3rdColumn));
			select4thRow_3rdColumn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			select1stRow_8thColumn.click();
			
			enter_SIAQTxt.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1285, 6));
			
			Thread.sleep(2000);
			
			enter_SIAQTxt.sendKeys(Keys.TAB);
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_8thColumn));
			select2ndRow_8thColumn.click();
			
			enter_SIAQTxt.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1286, 6));
			
			Thread.sleep(2000);
			
			enter_SIAQTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_19thColumn));
			select2ndRow_19thColumn.click();
			
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
			batchPickOnFIFOIcon.click();
			
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
			
			
			if(getIsAlertPresent())
			{
				getWaitForAlert();
				
				getAlert().accept();
			}
			
			
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_8thColumn));
			select3rdRow_8thColumn.click();
			
			enter_SIAQTxt.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1287, 6));
			
			Thread.sleep(2000);
			
			enter_SIAQTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_20thColumn));
			select3rdRow_20thColumn.click();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
			binAutoAllocateBtn.click();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
			binOkBtn.click();
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_8thColumn));
			select4thRow_8thColumn.click();
			
			enter_SIAQTxt.sendKeys(excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1288, 6));
			
			Thread.sleep(2000);
			
			enter_SIAQTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_21thColumn));
			select4thRow_21thColumn.click();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardExpandBtn));
			rmaoutwardExpandBtn.click();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAHeaderChkBox));
			searchRMAHeaderChkBox.click();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAOkBtn));
			searchRMAOkBtn.click();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardOkBtn));
			rmaoutwardOkBtn.click();
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		    String docno=documentNumberTxt.getAttribute("value");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
			billRefNewReferenceTxt.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			String actBillNewReference = billRefNewReferenceTxt.getAttribute("value");
			
		    String expBillNewReference =excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1289, 7);
	    	
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1289, 8, actBillNewReference);
			
			
			System.out.println("actBillNewReference  : "+actBillNewReference);
			System.out.println("expBillNewReference  : "+expBillNewReference);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			
			
			boolean savingMessage=checkVoucherSavingMessage(docno);
			
			String actSavingMessage=Boolean.toString(savingMessage);
			String expSavingMessage=excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1290, 7);
	    	
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1290, 8, actSavingMessage);
			
			System.out.println("actSavingMessage  : "+actSavingMessage);
			System.out.println("expSavingMessage  : "+expSavingMessage);
			
			
			if (actSavingMessage.equalsIgnoreCase(expSavingMessage) && actBillNewReference.equalsIgnoreCase(expBillNewReference)) 
			{
				System.out.println(" Voucher Saved Successfully through Links ");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1282, 9, resPass);
				return true;
			} 
			else 
			{
				System.out.println(" Voucher  NOt Saved Successfully through Links ");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1282, 9, resPass);
                return false;
			}
		}
		
		
		
		
		public boolean checkSuspendVoucherInSalesInvoiceVATWhichSavedWithLinks() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
			previousBtn.click();
			
			boolean loading=checkLoadingMessage();
			
			System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		    String docno=documentNumberTxt.getAttribute("value");
			
		    
		    Thread.sleep(2000);
		    
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
			new_SuspendBtn.click();
			
			boolean savingMessage=checkVoucherSavingMessage(docno);
			
			String actSavingMessage=Boolean.toString(savingMessage);
			String expSavingMessage=excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1292, 7);
					
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1292, 8, actSavingMessage);
					
			System.out.println("************************************* checkSuspendVoucherInSalesInvoiceVATWhichSavedWithLinks  *********************************");
			
			System.out.println("SavingMessage  :  "+actSavingMessage +" Value Expected : "+expSavingMessage);
			
			if(actSavingMessage.equalsIgnoreCase(expSavingMessage))
			{
				System.out.println("Test Pass : Error Message is Displayed ");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1291, 9, resPass);
				return true;
			}
			
			else
			{
				System.out.println("Test Fail :  Error Message is  not Displayed ");
			     excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1291, 9, resFail);
				return false;
			}
		}
		

		

		public boolean checkSalesOrderLinksInSalesInvoiceVATAfterSuspendingConsumedVoucherWitkLinks() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
			finacinalsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialTransactionSalesMenu));
			financialTransactionSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoicesVoucher));
			salesInvoiceVATVoucher.click();
			
			
			Thread.sleep(3000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_HeaderMinimizeBtn));	
			new_HeaderMinimizeBtn.click();
		     		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));	
			workFlowExpandBtn.click();
		            
			Thread.sleep(2000);
			List<WebElement> rowCountInLinkScreen=LinkRowCountCL;
    		
			int actLinkRowCountCLValue=rowCountInLinkScreen.size();
		            
			
			boolean actsearchOnDropdownCL		=searchOnDropdownCL.isDisplayed();
			boolean actcontainingDropdownCL		=containingDropdownCL.isDisplayed();
			boolean actworkFlowSearchTxtCL		=workFlowSearchTxtCL.isDisplayed();
			boolean actworkFlowCustomizeBtnCL	=workFlowCustomizeBtnCL.isDisplayed();
			boolean actworkFlowOkBtnCL			=workFlowOkBtnCL.isDisplayed();
			
			
			String actworkFlowRow1Column1CL		=workFlowRow1Column1CL.getText();
			String actworkFlowRow1Column2CL		=workFlowRow1Column2CL.getText();
			String actworkFlowRow1Column3CL		=workFlowRow1Column3CL.getText();
			String actworkFlowRow1Column4CL		=workFlowRow1Column4CL.getText();
			String actworkFlowRow1Column5CL		=workFlowRow1Column5CL.getText();
			
			String actworkFlowRow2Column1CL		=workFlowRow2Column1CL.getText();
			String actworkFlowRow2Column2CL		=workFlowRow2Column2CL.getText();
			String actworkFlowRow2Column3CL		=workFlowRow2Column3CL.getText();
			String actworkFlowRow2Column4CL		=workFlowRow2Column4CL.getText();
			String actworkFlowRow2Column5CL		=workFlowRow2Column5CL.getText();
			
			String actworkFlowRow3Column1CL		=workFlowRow3Column1CL.getText();
			String actworkFlowRow3Column2CL		=workFlowRow3Column2CL.getText();
			String actworkFlowRow3Column3CL		=workFlowRow3Column3CL.getText();
			String actworkFlowRow3Column4CL		=workFlowRow3Column4CL.getText();
			String actworkFlowRow3Column5CL		=workFlowRow3Column5CL.getText();
			
			String actworkFlowRow4Column1CL		=workFlowRow4Column1CL.getText();
			String actworkFlowRow4Column2CL		=workFlowRow4Column2CL.getText();
			String actworkFlowRow4Column3CL		=workFlowRow4Column3CL.getText();
			String actworkFlowRow4Column4CL		=workFlowRow4Column4CL.getText();
			String actworkFlowRow4Column5CL		=workFlowRow4Column5CL.getText();

			
			// Expected
			
			int expLinkRowCountCLValue=4;
			
			boolean expsearchOnDropdownCL		=true;
			boolean expcontainingDropdownCL		=true;
			boolean expworkFlowSearchTxtCL		=true;
			boolean expworkFlowCustomizeBtnCL	=true;
			boolean expworkFlowOkBtnCL			=true;
			
			String expworkFlowRow1Column1CL		=excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1294, 7);
			String expworkFlowRow1Column3CL		=excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1295, 7);
			String expworkFlowRow1Column4CL		=excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1296, 7);
			String expworkFlowRow1Column5CL		=excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1297, 7);
			
			String expworkFlowRow2Column1CL		=excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1298, 7);
			String expworkFlowRow2Column3CL		=excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1299, 7);
			String expworkFlowRow2Column4CL		=excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1300, 7);
			String expworkFlowRow2Column5CL		=excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1301, 7);

			String expworkFlowRow3Column1CL		=excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1302, 7);
			String expworkFlowRow3Column3CL		=excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1303, 7);
			String expworkFlowRow3Column4CL		=excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1304, 7);
			String expworkFlowRow3Column5CL		=excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1305, 7);
			
			String expworkFlowRow4Column1CL		=excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1306, 7);
			String expworkFlowRow4Column3CL		=excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1307, 7);
			String expworkFlowRow4Column4CL		=excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1308, 7);
			String expworkFlowRow4Column5CL		=excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1309, 7);
			
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1294, 8, actworkFlowRow1Column1CL);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1295, 8, actworkFlowRow1Column3CL);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1296, 8, actworkFlowRow1Column4CL);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1297, 8, actworkFlowRow1Column5CL);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1298, 8, actworkFlowRow1Column1CL);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1299, 8, actworkFlowRow1Column3CL);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1300, 8, actworkFlowRow1Column4CL);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1301, 8, actworkFlowRow1Column5CL);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1302, 8, actworkFlowRow1Column1CL);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1303, 8, actworkFlowRow1Column3CL);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1304, 8, actworkFlowRow1Column4CL);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1305, 8, actworkFlowRow1Column5CL);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1306, 8, actworkFlowRow1Column1CL);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1307, 8, actworkFlowRow1Column3CL);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1308, 8, actworkFlowRow1Column4CL);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1309, 8, actworkFlowRow1Column5CL);
			
			
			
			System.out.println("**************************************** checkSalesInvoiceVoucherToCheckLinkPopUpScreenWithCRTlPlusLForBatchExpired  ***************************************");
			
			System.out.println("LinkRowCountCLValue  		: "+actLinkRowCountCLValue		+" 	Value Expected : "+expLinkRowCountCLValue);
			
			System.out.println("searchOnDropdownCL  		: "+actsearchOnDropdownCL		+" 	Value Expected : "+expsearchOnDropdownCL);
			System.out.println("containingDropdownCL  		: "+actcontainingDropdownCL		+" 	Value Expected : "+expcontainingDropdownCL);
			System.out.println("workFlowSearchTxtCL  		: "+actworkFlowSearchTxtCL		+" 	Value Expected : "+expworkFlowSearchTxtCL);
			System.out.println("workFlowCustomizeBtnCL  	: "+actworkFlowCustomizeBtnCL	+" 	Value Expected : "+expworkFlowCustomizeBtnCL);
			System.out.println("workFlowOkBtnCL  			: "+actworkFlowOkBtnCL			+" 	Value Expected : "+expworkFlowOkBtnCL);
			
			System.out.println("workFlowRow1Column1CL  		: "+actworkFlowRow1Column1CL	+" 	Value Expected : "+expworkFlowRow1Column1CL);
			System.out.println("workFlowRow1Column3CL  		: "+actworkFlowRow1Column3CL	+" 	Value Expected : "+expworkFlowRow1Column3CL);
			System.out.println("workFlowRow1Column4CL  		: "+actworkFlowRow1Column4CL	+" 	Value Expected : "+expworkFlowRow1Column4CL);
			System.out.println("workFlowRow1Column5CL  		: "+actworkFlowRow1Column5CL	+" 	Value Expected : "+expworkFlowRow1Column5CL);
			
			System.out.println("workFlowRow2Column1CL  		: "+actworkFlowRow2Column1CL	+" 	Value Expected : "+expworkFlowRow2Column1CL);
			System.out.println("workFlowRow2Column3CL  		: "+actworkFlowRow2Column3CL	+" 	Value Expected : "+expworkFlowRow2Column3CL);
			System.out.println("workFlowRow2Column4CL  		: "+actworkFlowRow2Column4CL	+" 	Value Expected : "+expworkFlowRow2Column4CL);
			System.out.println("workFlowRow2Column5CL  		: "+actworkFlowRow2Column5CL	+" 	Value Expected : "+expworkFlowRow2Column5CL);
			
			System.out.println("workFlowRow3Column1CL  		: "+actworkFlowRow3Column1CL	+" 	Value Expected : "+expworkFlowRow3Column1CL);
			System.out.println("workFlowRow3Column3CL  		: "+actworkFlowRow3Column3CL	+" 	Value Expected : "+expworkFlowRow3Column3CL);
			System.out.println("workFlowRow3Column4CL  		: "+actworkFlowRow3Column4CL	+" 	Value Expected : "+expworkFlowRow3Column4CL);
			System.out.println("workFlowRow3Column5CL  		: "+actworkFlowRow3Column5CL	+" 	Value Expected : "+expworkFlowRow3Column5CL);
			
			System.out.println("workFlowRow4Column1CL  		: "+actworkFlowRow4Column1CL	+" 	Value Expected : "+expworkFlowRow4Column1CL);
			System.out.println("workFlowRow4Column3CL  		: "+actworkFlowRow4Column3CL	+" 	Value Expected : "+expworkFlowRow4Column3CL);
			System.out.println("workFlowRow4Column4CL  		: "+actworkFlowRow4Column4CL	+" 	Value Expected : "+expworkFlowRow4Column4CL);
			System.out.println("workFlowRow4Column5CL  		: "+actworkFlowRow4Column5CL	+" 	Value Expected : "+expworkFlowRow4Column5CL);
			
					
					
			if(actLinkRowCountCLValue==expLinkRowCountCLValue
					
					&& actsearchOnDropdownCL==expsearchOnDropdownCL && actcontainingDropdownCL==expcontainingDropdownCL && actworkFlowSearchTxtCL==expworkFlowSearchTxtCL
					&& actworkFlowCustomizeBtnCL==expworkFlowCustomizeBtnCL && actworkFlowOkBtnCL==expworkFlowOkBtnCL
					
					&& actworkFlowRow1Column1CL.equalsIgnoreCase(expworkFlowRow1Column1CL)
					&& actworkFlowRow1Column3CL.equalsIgnoreCase(expworkFlowRow1Column3CL)
					&& actworkFlowRow1Column4CL.equalsIgnoreCase(expworkFlowRow1Column4CL)
					&& actworkFlowRow1Column5CL.equalsIgnoreCase(expworkFlowRow1Column5CL)
					
					&& actworkFlowRow2Column1CL.equalsIgnoreCase(expworkFlowRow2Column1CL)
					&& actworkFlowRow2Column3CL.equalsIgnoreCase(expworkFlowRow2Column3CL)
					&& actworkFlowRow2Column4CL.equalsIgnoreCase(expworkFlowRow2Column4CL)
					&& actworkFlowRow2Column5CL.equalsIgnoreCase(expworkFlowRow2Column5CL)
					
					&& actworkFlowRow3Column1CL.equalsIgnoreCase(expworkFlowRow3Column1CL)
					&& actworkFlowRow3Column3CL.equalsIgnoreCase(expworkFlowRow3Column3CL)
					&& actworkFlowRow3Column4CL.equalsIgnoreCase(expworkFlowRow3Column4CL)
					&& actworkFlowRow3Column5CL.equalsIgnoreCase(expworkFlowRow3Column5CL)
					
					&& actworkFlowRow4Column1CL.equalsIgnoreCase(expworkFlowRow4Column1CL)
					&& actworkFlowRow4Column3CL.equalsIgnoreCase(expworkFlowRow4Column3CL)
					&& actworkFlowRow4Column4CL.equalsIgnoreCase(expworkFlowRow4Column4CL)
					&& actworkFlowRow4Column5CL.equalsIgnoreCase(expworkFlowRow4Column5CL))
			{
				System.out.println("Test Pass  : Links Displayed As Expected ");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1293, 9, resPass);
						
				return true;
			}
			else
			{
				System.out.println("Test Fail :Links Displayed As Expected ");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1293, 9, resFail);
						
				return false;
			}
		}

		
		

		public boolean checkSavingSuspendedVoucherInSalesInvoiceVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
			previousBtn.click();
			
			boolean loading=checkLoadingMessage();
			
			System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
			
			Thread.sleep(2000);
			
			
				new_HeaderExpandBtn.click();
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		    String docno=documentNumberTxt.getAttribute("value");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			
			
			boolean savingMessage=checkVoucherSavingMessage(docno);
			
			String actSavingMessage=Boolean.toString(savingMessage);
			String expSavingMessage=excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1311, 7);
			
	        excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1311, 8, actSavingMessage);
			
	    	Thread.sleep(2000);
	        
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
	        new_CloseBtn.click();
	        
	        Thread.sleep(2000);
	        
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(suspendStatusRow1));
			String actsuspendStatusRow1			=suspendStatusRow1.getText();
			String expsuspendStatusRow1			=excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1312, 7);
			
	        excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1312, 8, actsuspendStatusRow1);
	    	
	    	
			System.out.println("************************************* checkSavingSuspendedVoucherInStockTransfer  *********************************");
			
			System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
			System.out.println("SavingMessage  :  "+actsuspendStatusRow1 +" Value Expected : "+expsuspendStatusRow1);
			
			if(savingMessage==true && actsuspendStatusRow1.equalsIgnoreCase(expsuspendStatusRow1))
			{
				System.out.println("Test Pass : Error Message is Displayed ");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1310, 9, resPass);
				return true;
			}
			
			else
			{
				System.out.println("Test Fail :  Error Message is  not Displayed ");
			     excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1310, 9, resFail);
				return false;
			}
		}
		
		
		

		public boolean checkSalesOrderLinksInSalesInvoiceVATAfterReSavingSuspendingConsumedVoucherWitkLinks() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			
			boolean loadingMessage=checkLoadingMessage();
			
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_HeaderMinimizeBtn));	
			new_HeaderMinimizeBtn.click();
		     		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));	
			workFlowExpandBtn.click();
		            
			Thread.sleep(2000);
			List<WebElement> rowCountInLinkScreen=LinkRowCountCL;
    		
			int actLinkRowCountCLValue=rowCountInLinkScreen.size();
		            
			
			boolean actsearchOnDropdownCL		=searchOnDropdownCL.isDisplayed();
			boolean actcontainingDropdownCL		=containingDropdownCL.isDisplayed();
			boolean actworkFlowSearchTxtCL		=workFlowSearchTxtCL.isDisplayed();
			boolean actworkFlowCustomizeBtnCL	=workFlowCustomizeBtnCL.isDisplayed();
			boolean actworkFlowOkBtnCL			=workFlowOkBtnCL.isDisplayed();
			
			
			String actworkFlowRow1Column1CL		=workFlowRow1Column1CL.getText();
			String actworkFlowRow1Column2CL		=workFlowRow1Column2CL.getText();
			String actworkFlowRow1Column3CL		=workFlowRow1Column3CL.getText();
			String actworkFlowRow1Column4CL		=workFlowRow1Column4CL.getText();
			String actworkFlowRow1Column5CL		=workFlowRow1Column5CL.getText();
			
			String actworkFlowRow2Column1CL		=workFlowRow2Column1CL.getText();
			String actworkFlowRow2Column2CL		=workFlowRow2Column2CL.getText();
			String actworkFlowRow2Column3CL		=workFlowRow2Column3CL.getText();
			String actworkFlowRow2Column4CL		=workFlowRow2Column4CL.getText();
			String actworkFlowRow2Column5CL		=workFlowRow2Column5CL.getText();
			
			String actworkFlowRow3Column1CL		=workFlowRow3Column1CL.getText();
			String actworkFlowRow3Column2CL		=workFlowRow3Column2CL.getText();
			String actworkFlowRow3Column3CL		=workFlowRow3Column3CL.getText();
			String actworkFlowRow3Column4CL		=workFlowRow3Column4CL.getText();
			String actworkFlowRow3Column5CL		=workFlowRow3Column5CL.getText();
			
			String actworkFlowRow4Column1CL		=workFlowRow4Column1CL.getText();
			String actworkFlowRow4Column2CL		=workFlowRow4Column2CL.getText();
			String actworkFlowRow4Column3CL		=workFlowRow4Column3CL.getText();
			String actworkFlowRow4Column4CL		=workFlowRow4Column4CL.getText();
			String actworkFlowRow4Column5CL		=workFlowRow4Column5CL.getText();

			
			// Expected
			
			int expLinkRowCountCLValue=4;
			
			boolean expsearchOnDropdownCL		=true;
			boolean expcontainingDropdownCL		=true;
			boolean expworkFlowSearchTxtCL		=true;
			boolean expworkFlowCustomizeBtnCL	=true;
			boolean expworkFlowOkBtnCL			=true;
			
			String expworkFlowRow1Column1CL		=excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1314, 7);
			String expworkFlowRow1Column3CL		=excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1315, 7);
			String expworkFlowRow1Column4CL		=excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1316, 7);
			String expworkFlowRow1Column5CL		=excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1317, 7);
			
			String expworkFlowRow2Column1CL		=excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1318, 7);
			String expworkFlowRow2Column3CL		=excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1319, 7);
			String expworkFlowRow2Column4CL		=excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1320, 7);
			String expworkFlowRow2Column5CL		=excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1321, 7);

			String expworkFlowRow3Column1CL		=excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1322, 7);
			String expworkFlowRow3Column3CL		=excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1323, 7);
			String expworkFlowRow3Column4CL		=excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1324, 7);
			String expworkFlowRow3Column5CL		=excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1325, 7);
			
			String expworkFlowRow4Column1CL		=excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1326, 7);
			String expworkFlowRow4Column3CL		=excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1327, 7);
			String expworkFlowRow4Column4CL		=excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1328, 7);
			String expworkFlowRow4Column5CL		=excelReader.getCellData("SmokeSalesInvoiceVATRelease", 1329, 7);
			
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1314, 8, actworkFlowRow1Column1CL);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1315, 8, actworkFlowRow1Column3CL);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1316, 8, actworkFlowRow1Column4CL);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1317, 8, actworkFlowRow1Column5CL);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1318, 8, actworkFlowRow1Column1CL);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1319, 8, actworkFlowRow1Column3CL);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1320, 8, actworkFlowRow1Column4CL);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1321, 8, actworkFlowRow1Column5CL);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1322, 8, actworkFlowRow1Column1CL);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1323, 8, actworkFlowRow1Column3CL);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1324, 8, actworkFlowRow1Column4CL);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1325, 8, actworkFlowRow1Column5CL);
			
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1326, 8, actworkFlowRow1Column1CL);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1327, 8, actworkFlowRow1Column3CL);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1328, 8, actworkFlowRow1Column4CL);
			excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1329, 8, actworkFlowRow1Column5CL);
			
			
			
			System.out.println("**************************************** checkSalesOrderLinksInSalesInvoiceVATAfterReSavingSuspendingConsumedVoucherWitkLinks  ***************************************");
			
			System.out.println("LinkRowCountCLValue  		: "+actLinkRowCountCLValue		+" 	Value Expected : "+expLinkRowCountCLValue);
			
			System.out.println("searchOnDropdownCL  		: "+actsearchOnDropdownCL		+" 	Value Expected : "+expsearchOnDropdownCL);
			System.out.println("containingDropdownCL  		: "+actcontainingDropdownCL		+" 	Value Expected : "+expcontainingDropdownCL);
			System.out.println("workFlowSearchTxtCL  		: "+actworkFlowSearchTxtCL		+" 	Value Expected : "+expworkFlowSearchTxtCL);
			System.out.println("workFlowCustomizeBtnCL  	: "+actworkFlowCustomizeBtnCL	+" 	Value Expected : "+expworkFlowCustomizeBtnCL);
			System.out.println("workFlowOkBtnCL  			: "+actworkFlowOkBtnCL			+" 	Value Expected : "+expworkFlowOkBtnCL);
			
			System.out.println("workFlowRow1Column1CL  		: "+actworkFlowRow1Column1CL	+" 	Value Expected : "+expworkFlowRow1Column1CL);
			System.out.println("workFlowRow1Column3CL  		: "+actworkFlowRow1Column3CL	+" 	Value Expected : "+expworkFlowRow1Column3CL);
			System.out.println("workFlowRow1Column4CL  		: "+actworkFlowRow1Column4CL	+" 	Value Expected : "+expworkFlowRow1Column4CL);
			System.out.println("workFlowRow1Column5CL  		: "+actworkFlowRow1Column5CL	+" 	Value Expected : "+expworkFlowRow1Column5CL);
			
			System.out.println("workFlowRow2Column1CL  		: "+actworkFlowRow2Column1CL	+" 	Value Expected : "+expworkFlowRow2Column1CL);
			System.out.println("workFlowRow2Column3CL  		: "+actworkFlowRow2Column3CL	+" 	Value Expected : "+expworkFlowRow2Column3CL);
			System.out.println("workFlowRow2Column4CL  		: "+actworkFlowRow2Column4CL	+" 	Value Expected : "+expworkFlowRow2Column4CL);
			System.out.println("workFlowRow2Column5CL  		: "+actworkFlowRow2Column5CL	+" 	Value Expected : "+expworkFlowRow2Column5CL);
			
			System.out.println("workFlowRow3Column1CL  		: "+actworkFlowRow3Column1CL	+" 	Value Expected : "+expworkFlowRow3Column1CL);
			System.out.println("workFlowRow3Column3CL  		: "+actworkFlowRow3Column3CL	+" 	Value Expected : "+expworkFlowRow3Column3CL);
			System.out.println("workFlowRow3Column4CL  		: "+actworkFlowRow3Column4CL	+" 	Value Expected : "+expworkFlowRow3Column4CL);
			System.out.println("workFlowRow3Column5CL  		: "+actworkFlowRow3Column5CL	+" 	Value Expected : "+expworkFlowRow3Column5CL);
			
			System.out.println("workFlowRow4Column1CL  		: "+actworkFlowRow4Column1CL	+" 	Value Expected : "+expworkFlowRow4Column1CL);
			System.out.println("workFlowRow4Column3CL  		: "+actworkFlowRow4Column3CL	+" 	Value Expected : "+expworkFlowRow4Column3CL);
			System.out.println("workFlowRow4Column4CL  		: "+actworkFlowRow4Column4CL	+" 	Value Expected : "+expworkFlowRow4Column4CL);
			System.out.println("workFlowRow4Column5CL  		: "+actworkFlowRow4Column5CL	+" 	Value Expected : "+expworkFlowRow4Column5CL);
			
					
					
			if(actLinkRowCountCLValue==expLinkRowCountCLValue
					
					&& actsearchOnDropdownCL==expsearchOnDropdownCL && actcontainingDropdownCL==expcontainingDropdownCL && actworkFlowSearchTxtCL==expworkFlowSearchTxtCL
					&& actworkFlowCustomizeBtnCL==expworkFlowCustomizeBtnCL && actworkFlowOkBtnCL==expworkFlowOkBtnCL
					
					&& actworkFlowRow1Column1CL.equalsIgnoreCase(expworkFlowRow1Column1CL)
					&& actworkFlowRow1Column3CL.equalsIgnoreCase(expworkFlowRow1Column3CL)
					&& actworkFlowRow1Column4CL.equalsIgnoreCase(expworkFlowRow1Column4CL)
					&& actworkFlowRow1Column5CL.equalsIgnoreCase(expworkFlowRow1Column5CL)
					
					&& actworkFlowRow2Column1CL.equalsIgnoreCase(expworkFlowRow2Column1CL)
					&& actworkFlowRow2Column3CL.equalsIgnoreCase(expworkFlowRow2Column3CL)
					&& actworkFlowRow2Column4CL.equalsIgnoreCase(expworkFlowRow2Column4CL)
					&& actworkFlowRow2Column5CL.equalsIgnoreCase(expworkFlowRow2Column5CL)
					
					&& actworkFlowRow3Column1CL.equalsIgnoreCase(expworkFlowRow3Column1CL)
					&& actworkFlowRow3Column3CL.equalsIgnoreCase(expworkFlowRow3Column3CL)
					&& actworkFlowRow3Column4CL.equalsIgnoreCase(expworkFlowRow3Column4CL)
					&& actworkFlowRow3Column5CL.equalsIgnoreCase(expworkFlowRow3Column5CL)
					
					&& actworkFlowRow4Column1CL.equalsIgnoreCase(expworkFlowRow4Column1CL)
					&& actworkFlowRow4Column3CL.equalsIgnoreCase(expworkFlowRow4Column3CL)
					&& actworkFlowRow4Column4CL.equalsIgnoreCase(expworkFlowRow4Column4CL)
					&& actworkFlowRow4Column5CL.equalsIgnoreCase(expworkFlowRow4Column5CL))
			{
				System.out.println("Test Pass  : Links Displayed As Expected ");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1313, 9, resPass);
						
				return true;
			}
			else
			{
				System.out.println("Test Fail :Links Displayed As Expected ");
				excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 1313, 9, resFail);
						
				return false;
			}
		}


		
		
		
	
	//yyy
	
	// Sales Invoice Releasing All Items In One Voucher With Suspend , Delete Check
	
	//Sales Invoice New 

		@FindBy(xpath="//a[@id='2014']//span[contains(text(),'Sales')]")
		private static WebElement  financialTransactionSalesMenu;
			
		@FindBy(xpath="//span[contains(text(),'Sales Invoices')]")
		private static WebElement  salesInvoicesVoucher;

		@FindBy(xpath="//span[contains(text(),'Sales Invoice N')]")
		private static WebElement  salesVoucherNew;
		
		@FindBy(xpath="//section[@id='page_Content']//a[@class='transaction_viewname_anchor font-5'][contains(text(),'Pending Sales Orders')]")
		private static WebElement  homepagePendingSalesOrders;
		

	 @FindBy(xpath="//input[@id='id_body_33554445']")
     private static WebElement enter_AQTxt;
	 
	 @FindBy(xpath="//input[@id='id_body_33554446']")
     private static WebElement enter_FQTxt;
	 
	 @FindBy(xpath="//input[@id='id_body_33554444']")
     private static WebElement enter_RDTxt;
	 
	 @FindBy(xpath="//input[@id='id_body_33554471']")
     private static WebElement enter_AvgRate;
	 
	 @FindBy(xpath="//input[@id='id_body_33554472']")
     private static WebElement enter_AvgRateo;
	 
	/* @FindBy(xpath="//input[@id='id_body_33554466']")
     private static WebElement enter_AvgRate;
	 
	 @FindBy(xpath="//input[@id='id_body_33554467']")
     private static WebElement enter_AvgRateo;*/
	 
	 @FindBy(xpath="//input[@id='id_body_89']")
     private static WebElement enter_QuantityToRelease;
	 
	 @FindBy(xpath="//input[@id='id_body_35_8']")
     private static WebElement lSalesOrderValue;

	 @FindBy(xpath="//i[contains(@class,'icon-cancel icon-font7')]")
     private static WebElement batchCancelIcon;
	 
	 @FindBy(xpath="//span[contains(@class,'icon-save icon-font6')]")
     private static WebElement salesVoucherCloseBtn;
	
 
	@FindBy(xpath="//tbody[@id='id_header_268435459_table_body']/tr")
    private static List<WebElement> departmentListCount;
	
	@FindBy(xpath="//tbody[@id='id_header_3_table_body']/tr")
	private static List<WebElement> salesAccountListCount; 
	
	@FindBy(xpath="//tbody[@id='id_header_268435460_table_body']/tr")
    private static List<WebElement> wareHouseListCount;
	 
	 
	 
	 
	public boolean checkSalesInvoiceVoucherSavingWithAllItemsBatchWaItemInFirstRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
		finacinalsMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialTransactionSalesMenu));
		financialTransactionSalesMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoicesVoucher));
		salesInvoicesVoucher.click();
			
		Thread.sleep(5000);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		checkUserFriendlyMessage();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAccountTxt));
		salesAccountTxt.click();
		salesAccountTxt.sendKeys(Keys.SPACE);
		
		int count=salesAccountListCount.size();
		
		System.err.println(count);
		
		for(int i=0 ; i < count ;i++)
		{
			String data=salesAccountListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("Sales - Computers"))
			{
				salesAccountListCount.get(i).click();
				
				break;
			}
		}
		
		salesAccountTxt.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.END);
		Thread.sleep(2000);
		customerAccountTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		Thread.sleep(2000);
		customerAccountTxt.sendKeys(Keys.SPACE);
		 
	  	int customercount=customerAccountListCount.size();
	  	
	  	System.err.println(customercount);
	  	
	  	for(int i=0 ; i < customercount ;i++)
	  	{
	  		String data=customerAccountListCount.get(i).getAttribute("data-name");
	  		
	  		if(data.equalsIgnoreCase("Customer A"))
	  		{
	  			customerAccountListCount.get(i).click();
	  			
	  			break;
	  		}
	  	}
				
	  	customerAccountTxt.sendKeys(Keys.TAB);
	
	  	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.click();
		departmentTxt.sendKeys(Keys.SPACE);
			
		int departmentcount=departmentListCount.size();
		
		System.err.println(departmentcount);
			
		for(int i=0 ; i < departmentcount ;i++)
		{
			String data=departmentListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("INDIA"))
			{
				departmentListCount.get(i).click();
				
				break;
			}
		}
			
		departmentTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
		wareHouseTxt.click();
		wareHouseTxt.sendKeys(Keys.SPACE);
			
		int warehousecount=wareHouseListCount.size();
		
		System.err.println(warehousecount);
			
		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=wareHouseListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("SECUNDERABAD"))
			{
				wareHouseListCount.get(i).click();
				
				break;
			}
		}
			
		wareHouseTxt.sendKeys(Keys.TAB);
	
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
	  	enter_ItemTxt.sendKeys(Keys.END);
	  	enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	  	enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
	  	enter_ItemTxt.sendKeys(Keys.SPACE);
	  	
	  	int itemcount1=itemListCount.size();
	  	
	  	System.err.println(itemcount1);
	  	
	  	for(int i=0 ; i < itemcount1 ;i++)
	  	{
	  		String data=itemListCount.get(i).getText();
	  		
	  		if(data.equalsIgnoreCase("BATCH WA ITEM"))
	  		{
	  			itemListCount.get(i).click();
	  			
	  			break;
	  		}
	  	}
				
	  	enter_ItemTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.sendKeys("1");
		enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.sendKeys("0");
		enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
		enter_AvgRate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
		enter_AvgRateo.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
	
		Thread.sleep(3000);
		
		List<WebElement> rowCountInLinkScreen=LinkRowCount;
		
		int actLinkRowCountValue=rowCountInLinkScreen.size();
		
		boolean actsearchOnDropdown=searchOnDropdown.isDisplayed();
		boolean actcontainingDropdown=containingDropdown.isDisplayed();
		boolean actworkFlowSearchTxt=workFlowSearchTxt.isDisplayed();
		boolean actworkFlowCustomizeBtn=workFlowCustomizeBtn.isDisplayed();
		boolean actworkFlowOkBtn=workFlowOkBtn.isDisplayed();
		
		String actworkFlowRow1Column1=workFlowRow1Column1.getText();
		String actworkFlowRow1Column2=workFlowRow1Column2.getText();
		String actworkFlowRow1Column3=workFlowRow1Column3.getText();
		String actworkFlowRow1Column4=workFlowRow1Column4.getText();
		String actworkFlowRow1Column5=workFlowRow1Column5.getText();
		
		
	     
		
		// Expected
		
	     
	     int expLinkRowCountValue=1;
	     
	     boolean expsearchOnDropdown=true;
	     boolean expcontainingDropdown=true;
	     boolean expworkFlowSearchTxt=true;
	     boolean expworkFlowCustomizeBtn=true;
	     boolean expworkFlowOkBtn=true;
	     
	     String expworkFlowRow1Column1="SalOrd:11";
	     String expworkFlowRow1Column3="BATCH WA ITEM";
	     String expworkFlowRow1Column4="2.00";
	     String expworkFlowRow1Column5="0.00";
	     
	     
	     List<WebElement> rowCountInLinkScreen1=LinkRowCount;
			
	     int rowCount1=rowCountInLinkScreen1.size();
		
	     System.out.println(rowCount1);
	     
	     for (int i = 1; i <= rowCount1; i++) 
	     {
	    	 WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
	    	 
	    	 WebElement itemName=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[9]"));
	    	 
	    	 String actvoucheno=voucherno.getText();
	    	 
	    	 String actitemName=itemName.getText();
	    	 
	    	 System.out.println(actvoucheno);
	    	 
	    	 System.out.println(actitemName);
	    	 
	    	 if(actvoucheno.equalsIgnoreCase("SalOrd:11") && actitemName.equalsIgnoreCase("BATCH WA ITEM"))
	    	 {
	    		 Thread.sleep(2000);
	    		 WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
	    		 radioBtn.click();
	    		 
	    		 break;
	    	 }

	     }
			
	     Thread.sleep(2000);
			
	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
	     workFlowOkBtn.click();
	     
	     Thread.sleep(2000);
	     
	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
	     select1stRow_11thColumn.click();
	     
	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
	     enter_Rate.sendKeys("10");
	     enter_Rate.sendKeys(Keys.TAB);
		
	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
	     enter_Gross.click();
	     enter_Gross.sendKeys(Keys.TAB);
	     
	     Thread.sleep(2000);
	     
	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		
	     // Actual
	     System.out.println("Batch Rows"+ batchPopUPEmptyRows.getAttribute("data-totalrows"));
		
	     String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
	     String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
	     
	     String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
	     String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
		
	     String actRow3BatchNo,actRow3BaseQty,actRow3Rate,actRow3AdjustedQty,actRow3TotalAdjustedQty;
	     String expRow3BatchNo,expRow3BaseQty,expRow3Rate,expRow3AdjustedQty,expRow3TotalAdjustedQty;
		
			
	     String actBatchRows=batchPopUPEmptyRows.getAttribute("data-totalrows");
			
	     actBatchName=batchItemName.getText();
	     actTotalQty=batchTotalQty.getText();
	     actAdjustedQty=batchAdjustQty.getText();
	     actBalance=batchBalance.getText();
	     actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
	     actTotalQtyFooter=batchTotalQtyFooter.getText();
	     
	     actRow1BatchNo=batch_BatchNoRow1.getText();
	     actRow1BaseQty=batch_BaseQtyRow1.getText();
	     //act7=batch_ExpiryInDateRow1.getText();
	     actRow1Rate=batch_RateRow1.getText();
	     actRow1AdjustedQty=batch_QtyAdjustedRow1.getText();
	     //act10=batch_PurchaseDateRow1.getText();
		
		
	     actRow2BatchNo=batch_BatchNoRow2.getText();
	     actRow2BaseQty=batch_BaseQtyRow2.getText();
	     //act14=batch_ExpiryInDateRow2.getText();
	     actRow2Rate=batch_RateRow2.getText();
	     actRow2AdjustedQty=batch_QtyAdjustedRow2.getText();
	     //act17=batch_PurchaseDateRow2.getText();
	     
	     actRow3BatchNo=batch_BatchNoRow3.getText();
	     actRow3BaseQty=batch_BaseQtyRow3.getText();
	     //act14=batch_ExpiryInDateRow2.getText();
	     actRow3Rate=batch_RateRow3.getText();
	     actRow3AdjustedQty=batch_QtyAdjustedRow3.getText();
	     //act17=batch_PurchaseDateRow2.getText();
	     
	     String actRow4BatchNo=batch_BatchNoRow4.getText();
	     String actRow4BaseQty=batch_BaseQtyRow4.getText();
	     //act14=batch_ExpiryInDateRow2.getText();
	     String actRow4Rate=batch_RateRow4.getText();
	     String actRow4AdjustedQty=batch_QtyAdjustedRow4.getText();
	     //act17=batch_PurchaseDateRow2.getText();
	     
	     
	     
	     // Expected
		
	     String expBatchRows="4";
		
	     expBatchName="BATCH WA ITEM";
	     expTotalQty="1.00";
	     expAdjustedQty="0.00";
	     expBalance="1.00";
	     
	     expTotalQtyFooter="50.00";
	     expTotalAdjustedQtyFooter="0.00";
	     
	     expRow1BatchNo="OSHWA1";
	     expRow1BaseQty="5.00";
	     //exp7=batch_ExpiryInDateRow1.getText();
	     expRow1Rate="10.00";
	     expRow1AdjustedQty="0";
	     //exp10=batch_PurchaseDateRow1.getText();
	     
	     
	     expRow2BatchNo="PVSWA";
	     expRow2BaseQty="12.00";
	     //exp7=batch_ExpiryInDateRow1.getText();
	     expRow2Rate="3.00";
	     expRow2AdjustedQty="0";
	     //exp10=batch_PurchaseDateRow1.getText();
		
		
	     expRow3BatchNo="PVSWA";
	     expRow3BaseQty="23.00";
	     //exp14=batch_ExpiryInDateRow2.getText();
	     expRow3Rate="15.00";
	     expRow3AdjustedQty="0";
	     //exp17=batch_PurchaseDateRow2.getText();
		
	     String expRow4BatchNo="PVSWA";
	     String expRow4BaseQty="10.00";
	     //exp14=batch_ExpiryInDateRow2.getText();
	     String expRow4Rate="15.00";
	     String expRow4AdjustedQty="0";
	     //exp17=batch_PurchaseDateRow2.getText();
		
		
	     String actcustomerAccountTxt=customerAccountTxt.getAttribute("value");
	     String expcustomerAccountTxt="Customer A";
	     
		
	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
	     batchPickOnFIFOIcon.click();
		
		
	
	     // Actual
	     System.out.println("Batch Rows"+ batchPopUPEmptyRows.getAttribute("data-totalrows"));
	     
	     String actBatchNameAfterPick,actTotalQtyAfterPick,actAdjustedQtyAfterPick,actBalanceAfterPick,actRow1BatchNoAfterPick,actRow1BaseQtyAfterPick,actRow1RateAfterPick,actRow1AdjustedQtyAfterPick,actTotalAdjustedQtyFooterAfterPick,actTotalQtyFooterAfterPick;
	     String expBatchNameAfterPick,expTotalQtyAfterPick,expAdjustedQtyAfterPick,expBalanceAfterPick,expRow1BatchNoAfterPick,expRow1BaseQtyAfterPick,expRow1RateAfterPick,expRow1AdjustedQtyAfterPick,expTotalQtyFooterAfterPick,expTotalAdjustedQtyFooterAfterPick;
	     
	     String actRow2BatchNoAfterPick,actRow2BaseQtyAfterPick,actRow2RateAfterPick,actRow2AdjustedQtyAfterPick,actRow2TotalAdjustedQtyAfterPick;
	     String expRow2BatchNoAfterPick,expRow2BaseQtyAfterPick,expRow2RateAfterPick,expRow2AdjustedQtyAfterPick,expRow2TotalAdjustedQtyAfterPick;
		
	     String actRow3BatchNoAfterPick,actRow3BaseQtyAfterPick,actRow3RateAfterPick,actRow3AdjustedQtyAfterPick,actRow3TotalAdjustedQtyAfterPick;
	     String expRow3BatchNoAfterPick,expRow3BaseQtyAfterPick,expRow3RateAfterPick,expRow3AdjustedQtyAfterPick,expRow3TotalAdjustedQtyAfterPick;
		
	     String actBatchRowsAfterPick=batchPopUPEmptyRows.getAttribute("data-totalrows");
		
	     actBatchNameAfterPick=batchItemName.getText();
	     actTotalQtyAfterPick=batchTotalQty.getText();
	     actAdjustedQtyAfterPick=batchAdjustQty.getText();
	     actBalanceAfterPick=batchBalance.getText();
	     actTotalAdjustedQtyFooterAfterPick=batchTotalAdjustedQtyFooter.getText();
	     actTotalQtyFooterAfterPick=batchTotalQtyFooter.getText();
		
	     actRow1BatchNoAfterPick=batch_BatchNoRow1.getText();
	     actRow1BaseQtyAfterPick=batch_BaseQtyRow1.getText();
	     //act7=batch_ExpiryInDateRow1.getText();
	     actRow1RateAfterPick=batch_RateRow1.getText();
	     actRow1AdjustedQtyAfterPick=batch_QtyAdjustedRow1.getText();
	     //act10=batch_PurchaseDateRow1.getText();
		
		
	     actRow2BatchNoAfterPick=batch_BatchNoRow2.getText();
	     actRow2BaseQtyAfterPick=batch_BaseQtyRow2.getText();
	     //act14=batch_ExpiryInDateRow2.getText();
	     actRow2RateAfterPick=batch_RateRow2.getText();
	     actRow2AdjustedQtyAfterPick=batch_QtyAdjustedRow2.getText();
	     //act17=batch_PurchaseDateRow2.getText();
		
	     actRow3BatchNoAfterPick=batch_BatchNoRow3.getText();
	     actRow3BaseQtyAfterPick=batch_BaseQtyRow3.getText();
	     //act14=batch_ExpiryInDateRow2.getText();
	     actRow3RateAfterPick=batch_RateRow3.getText();
	     actRow3AdjustedQtyAfterPick=batch_QtyAdjustedRow3.getText();
	     //act17=batch_PurchaseDateRow2.getText();
	     
	     String actRow4BatchNoAfterPick=batch_BatchNoRow4.getText();
	     String actRow4BaseQtyAfterPick=batch_BaseQtyRow4.getText();
	     //act14=batch_ExpiryInDateRow2.getText();
	     String actRow4RateAfterPick=batch_RateRow4.getText();
	     String actRow4AdjustedQtyAfterPick=batch_QtyAdjustedRow4.getText();
	     //act17=batch_PurchaseDateRow2.getText();
		
		
		
	     // Expected
		
	     String expBatchRowsAfterPick="4";
		
	     expBatchNameAfterPick="BATCH WA ITEM";
	     expTotalQtyAfterPick="1.00";
	     expAdjustedQtyAfterPick="1.00";
	     expBalanceAfterPick="0.00";
					
	     expTotalQtyFooterAfterPick="50.00";
	     expTotalAdjustedQtyFooterAfterPick="1.00";
		
		
	     expRow1BatchNoAfterPick="OSHWA1";
	     expRow1BaseQtyAfterPick="5.00";
	     //exp7=batch_ExpiryInDateRow1.getText();
	     expRow1RateAfterPick="10.00";
	     expRow1AdjustedQtyAfterPick="1.00";
	     //exp10=batch_PurchaseDateRow1.getText();
		
		
	     expRow2BatchNoAfterPick="PVSWA";
	     expRow2BaseQtyAfterPick="12.00";
	     //exp14=batch_ExpiryInDateRow2.getText();
	     expRow2RateAfterPick="3.00";
	     expRow2AdjustedQtyAfterPick="0.00";
	     //exp17=batch_PurchaseDateRow2.getText();
		
	     expRow3BatchNoAfterPick="PVSWA";
	     expRow3BaseQtyAfterPick="23.00";
	     //exp14=batch_ExpiryInDateRow2.getText();
	     expRow3RateAfterPick="15.00";
	     expRow3AdjustedQtyAfterPick="0.00";
	     //exp17=batch_PurchaseDateRow2.getText();
	     
	     String expRow4BatchNoAfterPick="PVSWA";
	     String expRow4BaseQtyAfterPick="10.00";
	     //exp14=batch_ExpiryInDateRow2.getText();
	     String expRow4RateAfterPick="15.00";
	     String expRow4AdjustedQtyAfterPick="0.00";
	     //exp17=batch_PurchaseDateRow2.getText();
		
		
	     String actcustomerAccountTxtAfterPick=customerAccountTxt.getAttribute("value");
	     String expcustomerAccountTxtAfterPick="Customer A";
		
	
	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
	     batchOkIcon.click();
	     
	     Thread.sleep(3000);
		
		
	     String actQtyColumn     		=select1stRow_8thColumn.getText();
	     String actLSOColumn		 	=select1stRow_9thColumn.getText();
	     String actQtyToReleaseColumn	=select1stRow_10thColumn.getText();
	     String actBatchColumn			=select1stRow_13thColumn.getText();
	     
	     String expQtyColumn     		="1.00";
	     String expLSOColumn		 	="SalOrd:11";
	     String expQtyToReleaseColumn	="1.00";
	     String expBatchColumn			="OSHWA1";
		
	     
		 System.out.println("**************************************** checkSalesInvoiceVoucherSavingWithAllItemsBatchWaItemInFirstRow ***************************************");
	     
	     System.out.println("**************************************** Batch Reservation Link Line Wise Pop Up Window  ***************************************");
	     
	     System.out.println("LinkRowCountValue  				  : "+actLinkRowCountValue						+" 	Value Expected : "+expLinkRowCountValue);
	     
	     System.out.println("searchOnDropdown  					  : "+actsearchOnDropdown						+" 	Value Expected : "+expsearchOnDropdown);
	     System.out.println("containingDropdown  				  : "+actcontainingDropdown						+" 	Value Expected : "+expcontainingDropdown);
	     System.out.println("workFlowSearchTxt  				  : "+actworkFlowSearchTxt						+" 	Value Expected : "+expworkFlowSearchTxt);
	     System.out.println("workFlowCustomizeBtn  				  : "+actworkFlowCustomizeBtn					+" 	Value Expected : "+expworkFlowCustomizeBtn);
	     System.out.println("workFlowOkBtn  					  : "+actworkFlowOkBtn							+" 	Value Expected : "+expworkFlowOkBtn);
	     
	     System.out.println("workFlowRow1Column1 	 			  : "+actworkFlowRow1Column1					+" 	Value Expected : "+expworkFlowRow1Column1);
	     System.out.println("workFlowRow1Column3  				  : "+actworkFlowRow1Column3					+" 	Value Expected : "+expworkFlowRow1Column3);
	     System.out.println("workFlowRow1Column4  				  : "+actworkFlowRow1Column4					+" 	Value Expected : "+expworkFlowRow1Column4);
	     System.out.println("workFlowRow1Column5  			   	  : "+actworkFlowRow1Column5					+" 	Value Expected : "+expworkFlowRow1Column5);
	     
	     System.out.println("**************************************** Batch Pop Up Screen Before Pick  ***************************************");
			
	     System.out.println("customerAccountTxt          : "+actcustomerAccountTxt    	 + " Value Expected : "+expcustomerAccountTxt);	
	     
	     System.out.println("BatchRows      			 : "+actBatchRows              	 + " Value Expected : "+expBatchRows);
	     
	     System.out.println("Batch Popup Batch Name Qty  : "+actBatchName             	 + " Value Expected : "+expBatchName);	
	     System.out.println("Batch Popup Total Qty       : "+actTotalQty                 + " Value Expected : "+expTotalQty);
	     System.out.println("Batch Popup Adjusted Qty    : "+actAdjustedQty              + " Value Expected : "+expAdjustedQty);
	     System.out.println("Batch Popup Balance         : "+actBalance                  + " Value Expected : "+expBalance);
	     System.out.println("Batch Popup Adjusted Qty    : "+actTotalAdjustedQtyFooter   + " Value Expected : "+expTotalAdjustedQtyFooter);
	     System.out.println("Batch Popup Total Qty Footer: "+actTotalQtyFooter           + " Value Expected : "+expTotalQtyFooter);
	     
	     System.out.println("Batch Popup Row1 Batch No   : "+actRow1BatchNo              + " Value Expected : "+expRow1BatchNo);	
	     System.out.println("Batch Popup Row1 Base Qty   : "+actRow1BaseQty              + " Value Expected : "+expRow1BaseQty);
	     System.out.println("Batch Popup Row1 Rate       : "+actRow1Rate                 + " Value Expected : "+expRow1Rate);
	     System.out.println("Batch Popup Row1 AdjustedQty: "+actRow1AdjustedQty          + " Value Expected : "+expRow1AdjustedQty);
	     
	     System.out.println("Batch Popup Row2 Batch No   : "+actRow2BatchNo              + " Value Expected : "+expRow2BatchNo);	
	     System.out.println("Batch Popup Row2 Base Qty   : "+actRow2BaseQty              + " Value Expected : "+actRow2BaseQty);
	     System.out.println("Batch Popup Row2 Rate       : "+expRow2Rate                 + " Value Expected : "+actRow2Rate);
	     System.out.println("Batch Popup Row2 AdjustedQty: "+actRow2AdjustedQty          + " Value Expected : "+expRow2AdjustedQty);
	     
	     System.out.println("Batch Popup Row3 Batch No   : "+actRow3BatchNo              + " Value Expected : "+expRow3BatchNo);	
	     System.out.println("Batch Popup Row3 Base Qty   : "+actRow3BaseQty              + " Value Expected : "+actRow3BaseQty);
	     System.out.println("Batch Popup Row3 Rate       : "+expRow3Rate                 + " Value Expected : "+actRow3Rate);
	     System.out.println("Batch Popup Row3 AdjustedQty: "+actRow3AdjustedQty          + " Value Expected : "+expRow3AdjustedQty);
	     
	     System.out.println("Batch Popup Row4 Batch No   : "+actRow4BatchNo              + " Value Expected : "+expRow4BatchNo);	
	     System.out.println("Batch Popup Row4 Base Qty   : "+actRow4BaseQty              + " Value Expected : "+actRow4BaseQty);
	     System.out.println("Batch Popup Row4 Rate       : "+expRow4Rate                 + " Value Expected : "+actRow4Rate);
	     System.out.println("Batch Popup Row4 AdjustedQty: "+actRow4AdjustedQty          + " Value Expected : "+expRow4AdjustedQty);
	     
	     
	     System.out.println("**************************************** Batch Pop Up Screen After Pick   ***************************************");
			
	     System.out.println("customerAccountTxt          : "+actcustomerAccountTxtAfterPick    	  + " Value Expected : "+expcustomerAccountTxtAfterPick);	
	     
	     System.out.println("BatchRows                   : "+actBatchRowsAfterPick             	  + " Value Expected : "+expBatchRowsAfterPick);
	     
	     System.out.println("Batch Popup Batch Name Qty  : "+actBatchNameAfterPick                + " Value Expected : "+expBatchNameAfterPick);	
	     System.out.println("Batch Popup Total Qty       : "+actTotalQtyAfterPick                 + " Value Expected : "+expTotalQtyAfterPick);
	     System.out.println("Batch Popup Adjusted Qty    : "+actAdjustedQtyAfterPick              + " Value Expected : "+expAdjustedQtyAfterPick);
	     System.out.println("Batch Popup Balance         : "+actBalanceAfterPick                  + " Value Expected : "+expBalanceAfterPick);
	     System.out.println("Batch Popup Adjusted Qty    : "+actTotalAdjustedQtyFooterAfterPick   + " Value Expected : "+expTotalAdjustedQtyFooterAfterPick);
	     System.out.println("Batch Popup Total Qty Footer: "+actTotalQtyFooterAfterPick           + " Value Expected : "+expTotalQtyFooterAfterPick);
	     
	     System.out.println("Batch Popup Row1 Batch No   : "+actRow1BatchNoAfterPick              + " Value Expected : "+expRow1BatchNoAfterPick);	
	     System.out.println("Batch Popup Row1 Base Qty   : "+actRow1BaseQtyAfterPick              + " Value Expected : "+expRow1BaseQtyAfterPick);
	     System.out.println("Batch Popup Row1 Rate       : "+actRow1RateAfterPick                 + " Value Expected : "+expRow1RateAfterPick);
	     System.out.println("Batch Popup Row1 AdjustedQty: "+actRow1AdjustedQtyAfterPick          + " Value Expected : "+expRow1AdjustedQtyAfterPick);
	     
	     System.out.println("Batch Popup Row2 Batch No   : "+actRow2BatchNoAfterPick              + " Value Expected : "+expRow2BatchNoAfterPick);	
	     System.out.println("Batch Popup Row2 Base Qty   : "+actRow2BaseQtyAfterPick              + " Value Expected : "+actRow2BaseQtyAfterPick);
	     System.out.println("Batch Popup Row2 Rate       : "+actRow2RateAfterPick                 + " Value Expected : "+actRow2RateAfterPick);
	     System.out.println("Batch Popup Row2 AdjustedQty: "+actRow2AdjustedQtyAfterPick          + " Value Expected : "+expRow2AdjustedQtyAfterPick);
	     
	     System.out.println("Batch Popup Row3 Batch No   : "+actRow3BatchNoAfterPick              + " Value Expected : "+expRow3BatchNoAfterPick);	
	     System.out.println("Batch Popup Row3 Base Qty   : "+actRow3BaseQtyAfterPick              + " Value Expected : "+actRow3BaseQtyAfterPick);
	     System.out.println("Batch Popup Row3 Rate       : "+actRow3RateAfterPick                 + " Value Expected : "+actRow3RateAfterPick);
	     System.out.println("Batch Popup Row3 AdjustedQty: "+actRow3AdjustedQtyAfterPick          + " Value Expected : "+expRow3AdjustedQtyAfterPick);
	     
	     System.out.println("Batch Popup Row4 Batch No   : "+actRow4BatchNoAfterPick              + " Value Expected : "+expRow4BatchNoAfterPick);	
	     System.out.println("Batch Popup Row4 Base Qty   : "+actRow4BaseQtyAfterPick              + " Value Expected : "+actRow4BaseQtyAfterPick);
	     System.out.println("Batch Popup Row4 Rate       : "+actRow4RateAfterPick                 + " Value Expected : "+actRow4RateAfterPick);
	     System.out.println("Batch Popup Row4 AdjustedQty: "+actRow4AdjustedQtyAfterPick          + " Value Expected : "+expRow4AdjustedQtyAfterPick);
	     
	     
	     System.out.println("**************************************** Voucher Information After Consuming  ***************************************");
			
	     System.out.println("QtyColumn               : "+actQtyColumn    	  		+ " Value Expected : "+expQtyColumn);
	     System.out.println("LSOColumn         		 : "+actLSOColumn    	  		+ " Value Expected : "+expLSOColumn);
	     System.out.println("QtyToReleaseColumn      : "+actQtyToReleaseColumn      + " Value Expected : "+expQtyToReleaseColumn);
	     System.out.println("BatchColumn             : "+actBatchColumn    	  		+ " Value Expected : "+expBatchColumn);
	     
	     	
	     if(actLinkRowCountValue==expLinkRowCountValue
	    		 
	    		 && actsearchOnDropdown==expsearchOnDropdown && actcontainingDropdown==expcontainingDropdown && actworkFlowSearchTxt==expworkFlowSearchTxt
	    		 && actworkFlowCustomizeBtn==expworkFlowCustomizeBtn && actworkFlowOkBtn==expworkFlowOkBtn
	    		 
				 && actworkFlowRow1Column1.equalsIgnoreCase(expworkFlowRow1Column1)
	    		 && actworkFlowRow1Column3.equalsIgnoreCase(expworkFlowRow1Column3)
	    		 && actworkFlowRow1Column4.equalsIgnoreCase(expworkFlowRow1Column4)
	    		 && actworkFlowRow1Column5.equalsIgnoreCase(expworkFlowRow1Column5)
	    		 
	    		 && actcustomerAccountTxt.equalsIgnoreCase(expcustomerAccountTxt) 
					
	    		 && actBatchRows.equalsIgnoreCase(expBatchRows)
	    		 && actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
	    		 && actBalance.equalsIgnoreCase(expBalance) 
	    		 
	    		 && actTotalAdjustedQtyFooter.equalsIgnoreCase(expTotalAdjustedQtyFooter) && actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) 
	    		 
	    		 && actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow1BaseQty.equalsIgnoreCase(expRow1BaseQty) && actRow1Rate.equalsIgnoreCase(expRow1Rate) 
	    		 && actRow1AdjustedQty.equalsIgnoreCase(expRow1AdjustedQty)
	    		 
	    		 && actRow2BatchNo.equalsIgnoreCase(expRow2BatchNo) && actRow2BaseQty.equalsIgnoreCase(expRow2BaseQty) && actRow2Rate.equalsIgnoreCase(expRow2Rate) 
	    		 && actRow2AdjustedQty.equalsIgnoreCase(expRow2AdjustedQty)
	    		 
	    		 && actRow3BatchNo.equalsIgnoreCase(expRow3BatchNo) && actRow3BaseQty.equalsIgnoreCase(expRow3BaseQty) && actRow3Rate.equalsIgnoreCase(expRow3Rate) 
	    		 && actRow3AdjustedQty.equalsIgnoreCase(expRow3AdjustedQty)
	    		 
	    		 && actRow4BatchNo.equalsIgnoreCase(expRow4BatchNo) && actRow4BaseQty.equalsIgnoreCase(expRow4BaseQty) && actRow4Rate.equalsIgnoreCase(expRow4Rate) 
	    		 && actRow4AdjustedQty.equalsIgnoreCase(expRow4AdjustedQty)
	    		 
	    		 && actcustomerAccountTxtAfterPick.equalsIgnoreCase(expcustomerAccountTxtAfterPick) 
					
	    		 && actBatchRowsAfterPick.equalsIgnoreCase(expBatchRowsAfterPick)
	    		 && actBatchNameAfterPick.equalsIgnoreCase(expBatchNameAfterPick) && actTotalQtyAfterPick.equalsIgnoreCase(expTotalQtyAfterPick) && actAdjustedQtyAfterPick.equalsIgnoreCase(expAdjustedQtyAfterPick) 
	    		 && actBalanceAfterPick.equalsIgnoreCase(expBalanceAfterPick) 
	    		 
	    		 && actTotalAdjustedQtyFooterAfterPick.equalsIgnoreCase(expTotalAdjustedQtyFooterAfterPick) && actTotalQtyFooterAfterPick.equalsIgnoreCase(expTotalQtyFooterAfterPick) 
	    		 
	    		 && actRow1BatchNoAfterPick.equalsIgnoreCase(expRow1BatchNoAfterPick) && actRow1BaseQtyAfterPick.equalsIgnoreCase(expRow1BaseQtyAfterPick) && actRow1RateAfterPick.equalsIgnoreCase(expRow1RateAfterPick) 
	    		 && actRow1AdjustedQtyAfterPick.equalsIgnoreCase(expRow1AdjustedQtyAfterPick)
	    		 
	    		 && actRow2BatchNoAfterPick.equalsIgnoreCase(expRow2BatchNoAfterPick) && actRow2BaseQtyAfterPick.equalsIgnoreCase(expRow2BaseQtyAfterPick) && actRow2RateAfterPick.equalsIgnoreCase(expRow2RateAfterPick) 
	    		 && actRow2AdjustedQtyAfterPick.equalsIgnoreCase(expRow2AdjustedQtyAfterPick)
	    		 
	    		 && actRow3BatchNoAfterPick.equalsIgnoreCase(expRow3BatchNoAfterPick) && actRow3BaseQtyAfterPick.equalsIgnoreCase(expRow3BaseQtyAfterPick) && actRow3RateAfterPick.equalsIgnoreCase(expRow3RateAfterPick) 
	    		 && actRow3AdjustedQtyAfterPick.equalsIgnoreCase(expRow3AdjustedQtyAfterPick)
	    		 
	    		 && actRow4BatchNoAfterPick.equalsIgnoreCase(expRow4BatchNoAfterPick) && actRow4BaseQtyAfterPick.equalsIgnoreCase(expRow4BaseQtyAfterPick) && actRow4RateAfterPick.equalsIgnoreCase(expRow4RateAfterPick) 
	    		 && actRow4AdjustedQtyAfterPick.equalsIgnoreCase(expRow4AdjustedQtyAfterPick)
	    		 
	    		 && actQtyColumn.equalsIgnoreCase(expQtyColumn) && actLSOColumn.equalsIgnoreCase(expLSOColumn) && actQtyToReleaseColumn.equalsIgnoreCase(expQtyToReleaseColumn)
	    		 && actBatchColumn.equalsIgnoreCase(expBatchColumn))
	     {			
	    	 System.out.println("Test Pass : Batch fields are As expected ");
	    	 excelReader.setCellData(xlfile, xlSheetName, 11, 9, resPass);
	    	 
	    	
					
	    	 return true;
	     }
	     else
	     {
	    	 System.out.println("Test Pass : Batch fields are As expected ");
	    	 excelReader.setCellData(xlfile, xlSheetName, 11, 9, resFail);
					
	    	
	    	 return false;
	     }
	 }

	
	
	

	public boolean checkSalesInvoiceVoucherSavingWithAllItemsBinFinishedGoodsItemInSecondRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
		Thread.sleep(3000);
	
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		select2ndRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("BIN FINISHED GOODS ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_5thColumn));
		select2ndRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.sendKeys("1");
		enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.sendKeys("0");
		enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
		enter_AvgRate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
		enter_AvgRateo.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
	
		Thread.sleep(3000);
		
		List<WebElement> rowCountInLinkScreen=LinkRowCount;
		
		int actLinkRowCountValue=rowCountInLinkScreen.size();
		
		boolean actsearchOnDropdown=searchOnDropdown.isDisplayed();
		boolean actcontainingDropdown=containingDropdown.isDisplayed();
		boolean actworkFlowSearchTxt=workFlowSearchTxt.isDisplayed();
		boolean actworkFlowCustomizeBtn=workFlowCustomizeBtn.isDisplayed();
		boolean actworkFlowOkBtn=workFlowOkBtn.isDisplayed();
		
		String actworkFlowRow1Column1=workFlowRow1Column1.getText();
		String actworkFlowRow1Column2=workFlowRow1Column2.getText();
		String actworkFlowRow1Column3=workFlowRow1Column3.getText();
		String actworkFlowRow1Column4=workFlowRow1Column4.getText();
		String actworkFlowRow1Column5=workFlowRow1Column5.getText();
		
		String actworkFlowRow2Column1=workFlowRow2Column1.getText();
		String actworkFlowRow2Column2=workFlowRow2Column2.getText();
		String actworkFlowRow2Column3=workFlowRow2Column3.getText();
		String actworkFlowRow2Column4=workFlowRow2Column4.getText();
		String actworkFlowRow2Column5=workFlowRow2Column5.getText();
		
		String actworkFlowRow3Column1=workFlowRow3Column1.getText();
		String actworkFlowRow3Column2=workFlowRow3Column2.getText();
		String actworkFlowRow3Column3=workFlowRow3Column3.getText();
		String actworkFlowRow3Column4=workFlowRow3Column4.getText();
		String actworkFlowRow3Column5=workFlowRow3Column5.getText();
		
		String actworkFlowRow4Column1=workFlowRow4Column1.getText();
		String actworkFlowRow4Column2=workFlowRow4Column2.getText();
		String actworkFlowRow4Column3=workFlowRow4Column3.getText();
		String actworkFlowRow4Column4=workFlowRow4Column4.getText();
		String actworkFlowRow4Column5=workFlowRow4Column5.getText();
		
	     
		
		// Expected
		
	     
	     int expLinkRowCountValue=4;
	     
	     boolean expsearchOnDropdown=true;
	     boolean expcontainingDropdown=true;
	     boolean expworkFlowSearchTxt=true;
	     boolean expworkFlowCustomizeBtn=true;
	     boolean expworkFlowOkBtn=true;
	     
	     String expworkFlowRow1Column1="SalOrd:1";
	     String expworkFlowRow1Column3="BIN FINISHED GOODS ITEM";
	     String expworkFlowRow1Column4="2.00";
	     String expworkFlowRow1Column5="0.00";
	     
	     String expworkFlowRow2Column1="SalOrd:1";
	     String expworkFlowRow2Column3="BIN FINISHED GOODS ITEM";
	     String expworkFlowRow2Column4="2.00";
	     String expworkFlowRow2Column5="0.00";
	     
	     String expworkFlowRow3Column1="SalOrd:1";
	     String expworkFlowRow3Column3="BIN FINISHED GOODS ITEM";
	     String expworkFlowRow3Column4="1.00";
	     String expworkFlowRow3Column5="0.00";
	     
	     String expworkFlowRow4Column1="SalOrd:11";
	     String expworkFlowRow4Column3="BIN FINISHED GOODS ITEM";
	     String expworkFlowRow4Column4="2.00";
	     String expworkFlowRow4Column5="0.00";
	     
	     
	     List<WebElement> rowCountInLinkScreen1=LinkRowCount;
			
	     int rowCount1=rowCountInLinkScreen1.size();
		
	     System.out.println(rowCount1);
	     
	     for (int i = 1; i <= rowCount1; i++) 
	     {
	    	 WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
	    	 
	    	 WebElement itemName=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[9]"));
	    	 
	    	 String actvoucheno=voucherno.getText();
	    	 
	    	 String actitemName=itemName.getText();
	    	 
	    	 System.out.println(actvoucheno);
	    	 
	    	 System.out.println(actitemName);
	    	 
	    	 if(actvoucheno.equalsIgnoreCase("SalOrd:11") && actitemName.equalsIgnoreCase("BIN FINISHED GOODS ITEM"))
	    	 {
	    		 Thread.sleep(2000);
	    		 WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
	    		 radioBtn.click();
	    		 
	    		 break;
	    	 }

	     }
			
	     Thread.sleep(2000);
			
	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
	     workFlowOkBtn.click();
	     
	     Thread.sleep(2000);
	     
	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_11thColumn));
	     select2ndRow_11thColumn.click();
	     
	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
	     enter_Rate.sendKeys("10");
	     enter_Rate.sendKeys(Keys.TAB);
		
	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
	     enter_Gross.click();
	     enter_Gross.sendKeys(Keys.TAB);
	     
	     Thread.sleep(3000);
	     
	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchTxt));
			
	     // Actual
	     boolean actbinSearchTxt					=binSearchTxt.isDisplayed();
	     boolean actbinSearchBtn					=binSearchBtn.isDisplayed();
	     boolean actbinAutoAllocateBtn				=binAutoAllocateBtn.isDisplayed();
	     boolean actbinPickBtn						=binPickBtn.isDisplayed();
	     boolean actbinCancelBtn					=binCancelBtn.isDisplayed();
	     boolean actbinAutoAllocateWithinGroupBtn	=binAutoAllocateWithinGroupBtn.isDisplayed();
	     
	     // Expected			
	     boolean expbinSearchTxt					=true;
	     boolean expbinSearchBtn					=true;
	     boolean expbinAutoAllocateBtn				=true;
	     boolean expbinPickBtn						=true;
	     boolean expbinCancelBtn					=true;
	     boolean expbinAutoAllocateWithinGroupBtn	=true;
	     
	     
	     
	     // Actual
	     String actbinTotalQty					=binTotalQty.getAttribute("value");
	     String actbinBaseUOM					=binBaseUOM.getText();
	     String actbinBalanceTxt				=binBalanceTxt.getAttribute("value");
	     
	     String actbinoutwardRow1Bin			=binoutwardRow1Bin.getText();
	     String actbinoutwardRow1Stock			=binoutwardRow1Stock.getText();
	     String actbinoutwardRow1StockPcs		=binoutwardRow1StockPcs.getText();
	     String actbinoutwardRow1Capacity		=binoutwardRow1Capacity.getText();
	     String actbinoutwardRow1Load			=binoutwardRow1Load.getText();
	     String actbinoutwardRow1FreeSpace		=binoutwardRow1FreeSpace.getText();
	     String actbinoutwardRow1FreeQty		=binoutwardRow1FreeQty.getText();
	     String actbinoutwardRow1ToBePicked		=binoutwardRow1ToBePicked.getText();
	     
	     
	     String actbinoutwardRow2Bin			=binoutwardRow2Bin.getText();
	     String actbinoutwardRow2Stock			=binoutwardRow2Stock.getText();
	     String actbinoutwardRow2StockPcs		=binoutwardRow2StockPcs.getText();
	     String actbinoutwardRow2Capacity		=binoutwardRow2Capacity.getText();
	     String actbinoutwardRow2Load			=binoutwardRow2Load.getText();
	     String actbinoutwardRow2FreeSpace		=binoutwardRow2FreeSpace.getText();
	     String actbinoutwardRow2FreeQty		=binoutwardRow2FreeQty.getText();
	     String actbinoutwardRow2ToBePicked		=binoutwardRow2ToBePicked.getText();
	     
	     String actbinoutwardRowTotalToBePicked=binoutwardRowTotalToBePicked.getText();
	     
	     // Expected
	     String expbinTotalQty					="1.00";
	     String expbinBaseUOM					="Pcs";
	     String expbinBalanceTxt				="1.00";
	     
	     String expbinoutwardRow1Bin			="Bin Update";
	     String expbinoutwardRow1Stock			="5.00";
	     String expbinoutwardRow1StockPcs		="5.00";
	     String expbinoutwardRow1Capacity		="9.00";
	     String expbinoutwardRow1Load			="5.00";
	     String expbinoutwardRow1FreeSpace		="4.00";
	     String expbinoutwardRow1FreeQty		="4.00";
	     String expbinoutwardRow1ToBePicked		="0.00";
	     
	     
	     String expbinoutwardRow2Bin			="Bin1";
	     String expbinoutwardRow2Stock			="3.00";
	     String expbinoutwardRow2StockPcs		="3.00";
	     String expbinoutwardRow2Capacity		="9.00";
	     String expbinoutwardRow2Load			="3.00";
	     String expbinoutwardRow2FreeSpace		="6.00";
	     String expbinoutwardRow2FreeQty		="6.00";
	     String expbinoutwardRow2ToBePicked		="0.00";
	     
	     String expbinoutwardRowTotalToBePicked	="0.00";
	     
	     
	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
	     binAutoAllocateBtn.click();
	     
	     
	     // Actual
	     String actbinTotalQtyAfterAllocate					=binTotalQty.getAttribute("value");
	     String actbinBaseUOMAfterAllocate					=binBaseUOM.getText();
	     String actbinBalanceTxtAfterAllocate				=binBalanceTxt.getAttribute("value");
	     
	     String actbinoutwardRow1BinAfterAllocate			=binoutwardRow1Bin.getText();
	     String actbinoutwardRow1StockAfterAllocate			=binoutwardRow1Stock.getText();
	     String actbinoutwardRow1StockPcsAfterAllocate		=binoutwardRow1StockPcs.getText();
	     String actbinoutwardRow1CapacityAfterAllocate		=binoutwardRow1Capacity.getText();
	     String actbinoutwardRow1LoadAfterAllocate			=binoutwardRow1Load.getText();
	     String actbinoutwardRow1FreeSpaceAfterAllocate		=binoutwardRow1FreeSpace.getText();
	     String actbinoutwardRow1FreeQtyAfterAllocate		=binoutwardRow1FreeQty.getText();
	     String actbinoutwardRow1ToBePickedAfterAllocate	=binoutwardRow1ToBePicked.getText();
	     
	     
	     String actbinoutwardRow2BinAfterAllocate			=binoutwardRow2Bin.getText();
	     String actbinoutwardRow2StockAfterAllocate			=binoutwardRow2Stock.getText();
	     String actbinoutwardRow2StockPcsAfterAllocate		=binoutwardRow2StockPcs.getText();
	     String actbinoutwardRow2CapacityAfterAllocate		=binoutwardRow2Capacity.getText();
	     String actbinoutwardRow2LoadAfterAllocate			=binoutwardRow2Load.getText();
	     String actbinoutwardRow2FreeSpaceAfterAllocate		=binoutwardRow2FreeSpace.getText();
	     String actbinoutwardRow2FreeQtyAfterAllocate		=binoutwardRow2FreeQty.getText();
	     String actbinoutwardRow2ToBePickedAfterAllocate	=binoutwardRow2ToBePicked.getText();
	     
	     String actbinoutwardRowTotalToBePickedAfterAllocate=binoutwardRowTotalToBePicked.getText();
	     
	     // Expected
	     String expbinTotalQtyAfterAllocate					="1.00";
	     String expbinBaseUOMAfterAllocate					="Pcs";
	     String expbinBalanceTxtAfterAllocate				="0.00";
	     
	     String expbinoutwardRow1BinAfterAllocate			="Bin Update";
	     String expbinoutwardRow1StockAfterAllocate			="5.00";
	     String expbinoutwardRow1StockPcsAfterAllocate		="5";
	     String expbinoutwardRow1CapacityAfterAllocate		="9.00";
	     String expbinoutwardRow1LoadAfterAllocate			="5.00";
	     String expbinoutwardRow1FreeSpaceAfterAllocate		="4.00";
	     String expbinoutwardRow1FreeQtyAfterAllocate		="4.00";
	     String expbinoutwardRow1ToBePickedAfterAllocate	="1.00";
	     
	     
	     String expbinoutwardRow2BinAfterAllocate			="Bin1";
	     String expbinoutwardRow2StockAfterAllocate			="3.00";
	     String expbinoutwardRow2StockPcsAfterAllocate		="3";
	     String expbinoutwardRow2CapacityAfterAllocate		="9.00";
	     String expbinoutwardRow2LoadAfterAllocate			="3.00";
	     String expbinoutwardRow2FreeSpaceAfterAllocate		="6.00";
	     String expbinoutwardRow2FreeQtyAfterAllocate		="6.00";
	     String expbinoutwardRow2ToBePickedAfterAllocate	="0.00";
	     
	     String expbinoutwardRowTotalToBePickedAfterAllocate="1.00";
	     
	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
	     binOkBtn.click();
	
	     Thread.sleep(3000);
		
		
	     String actQtyColumn     		=select2ndRow_8thColumn.getText();
	     String actLSOColumn		 	=select2ndRow_9thColumn.getText();
	     String actQtyToReleaseColumn	=select2ndRow_10thColumn.getText();
	     String actBinColumn			=select2ndRow_14thColumn.getText();
	     
	     String expQtyColumn     		="1.00";
	     String expLSOColumn		 	="SalOrd:11";
	     String expQtyToReleaseColumn	="1.00";
	     String expBinColumn			="Bin Update";
		
	     
		 System.out.println("**************************************** checkSalesInvoiceVoucherSavingWithAllItemsBinFinishedGoodsItemInSecondRow ***************************************");
	     
	     System.out.println("**************************************** Bin Reservation Link Line Wise Pop Up Window  ***************************************");
	     
	     System.out.println("LinkRowCountValue  			  : "+actLinkRowCountValue			+" 	Value Expected : "+expLinkRowCountValue);
	     
	     System.out.println("searchOnDropdown  				  : "+actsearchOnDropdown			+" 	Value Expected : "+expsearchOnDropdown);
	     System.out.println("containingDropdown  			  : "+actcontainingDropdown			+" 	Value Expected : "+expcontainingDropdown);
	     System.out.println("workFlowSearchTxt  			  : "+actworkFlowSearchTxt			+" 	Value Expected : "+expworkFlowSearchTxt);
	     System.out.println("workFlowCustomizeBtn  			  : "+actworkFlowCustomizeBtn		+" 	Value Expected : "+expworkFlowCustomizeBtn);
	     System.out.println("workFlowOkBtn  				  : "+actworkFlowOkBtn				+" 	Value Expected : "+expworkFlowOkBtn);
	     
	     System.out.println("workFlowRow1Column1 	 		  : "+actworkFlowRow1Column1		+" 	Value Expected : "+expworkFlowRow1Column1);
	     System.out.println("workFlowRow1Column3  			  : "+actworkFlowRow1Column3		+" 	Value Expected : "+expworkFlowRow1Column3);
	     System.out.println("workFlowRow1Column4  			  : "+actworkFlowRow1Column4		+" 	Value Expected : "+expworkFlowRow1Column4);
	     System.out.println("workFlowRow1Column5  		   	  : "+actworkFlowRow1Column5		+" 	Value Expected : "+expworkFlowRow1Column5);
	     
	     System.out.println("workFlowRow2Column1 	 		  : "+actworkFlowRow2Column1		+" 	Value Expected : "+expworkFlowRow2Column1);
	     System.out.println("workFlowRow2Column3  			  : "+actworkFlowRow2Column3		+" 	Value Expected : "+expworkFlowRow2Column3);
	     System.out.println("workFlowRow2Column4  			  : "+actworkFlowRow2Column4		+" 	Value Expected : "+expworkFlowRow2Column4);
	     System.out.println("workFlowRow2Column5  		   	  : "+actworkFlowRow2Column5		+" 	Value Expected : "+expworkFlowRow2Column5);
	     
	     System.out.println("workFlowRow3Column1 	 		  : "+actworkFlowRow3Column1		+" 	Value Expected : "+expworkFlowRow3Column1);
	     System.out.println("workFlowRow3Column3  			  : "+actworkFlowRow3Column3		+" 	Value Expected : "+expworkFlowRow3Column3);
	     System.out.println("workFlowRow3Column4  			  : "+actworkFlowRow3Column4		+" 	Value Expected : "+expworkFlowRow3Column4);
	     System.out.println("workFlowRow3Column5  		   	  : "+actworkFlowRow3Column5		+" 	Value Expected : "+expworkFlowRow3Column5);
	     
	     System.out.println("workFlowRow4Column1 	 		  : "+actworkFlowRow4Column1		+" 	Value Expected : "+expworkFlowRow4Column1);
	     System.out.println("workFlowRow4Column3  			  : "+actworkFlowRow4Column3		+" 	Value Expected : "+expworkFlowRow4Column3);
	     System.out.println("workFlowRow4Column4  			  : "+actworkFlowRow4Column4		+" 	Value Expected : "+expworkFlowRow4Column4);
	     System.out.println("workFlowRow4Column5  		   	  : "+actworkFlowRow4Column5		+" 	Value Expected : "+expworkFlowRow4Column5);
	     
	     System.out.println("******************************************* Bin Out Ward Pop Up Screen**************************");
	     System.out.println("binSearchTxt       				: "+actbinSearchTxt   				 +"  Value Expected : "+expbinSearchTxt);
	     System.out.println("binSearchBtn        				: "+actbinSearchBtn   				 +"  Value Expected : "+expbinSearchBtn);
	     System.out.println("binAutoAllocateBtn        			: "+actbinAutoAllocateBtn   		 +"  Value Expected : "+expbinAutoAllocateBtn);
	     System.out.println("binPickBtn        					: "+actbinPickBtn   				 +"  Value Expected : "+expbinPickBtn);
	     System.out.println("binCancelBtn        				: "+actbinCancelBtn   				 +"  Value Expected : "+expbinCancelBtn);
	     System.out.println("binAutoAllocateWithinGroupBtn      : "+actbinAutoAllocateWithinGroupBtn +"  Value Expected : "+expbinAutoAllocateWithinGroupBtn);
	     
	     
	     System.out.println("binTotalQty              	 : "+actbinTotalQty					+"  Value Expected : "+expbinTotalQty);	
	     System.out.println("binBaseUOM                	 : "+actbinBaseUOM					+"  Value Expected : "+expbinBaseUOM);	
	     System.out.println("binBalanceTxt            	 : "+actbinBalanceTxt				+"  Value Expected : "+expbinBalanceTxt);	
	     
	     System.out.println("binoutwardRow1Bin        	 : "+actbinoutwardRow1Bin			+"  Value Expected : "+expbinoutwardRow1Bin);
	     System.out.println("binoutwardRow1Stock      	 : "+actbinoutwardRow1Stock			+"  Value Expected : "+expbinoutwardRow1Stock);
	     System.out.println("binoutwardRow1StockPcs   	 : "+actbinoutwardRow1StockPcs		+"  Value Expected : "+expbinoutwardRow1StockPcs);
	     System.out.println("binoutwardRow1Capacity   	 : "+actbinoutwardRow1Capacity		+"  Value Expected : "+expbinoutwardRow1Capacity);
	     System.out.println("binoutwardRow1Load     	 : "+actbinoutwardRow1Load			+"  Value Expected : "+expbinoutwardRow1Load);
	     System.out.println("binoutwardRow1FreeSpace  	 : "+actbinoutwardRow1FreeSpace		+"  Value Expected : "+expbinoutwardRow1FreeSpace);
	     System.out.println("binoutwardRow1FreeQty    	 : "+actbinoutwardRow1FreeQty		+"  Value Expected : "+expbinoutwardRow1FreeQty);
	     System.out.println("binoutwardRow1ToBePicked 	 : "+actbinoutwardRow1ToBePicked    +"  Value Expected : "+expbinoutwardRow1ToBePicked);
			
	     
	     System.out.println("binoutwardRow2Bin        	 : "+actbinoutwardRow2Bin			+"  Value Expected : "+expbinoutwardRow2Bin);
	     System.out.println("binoutwardRow2Stock      	 : "+actbinoutwardRow2Stock			+"  Value Expected : "+expbinoutwardRow2Stock);
	     System.out.println("binoutwardRow2StockPcs   	 : "+actbinoutwardRow2StockPcs		+"  Value Expected : "+expbinoutwardRow2StockPcs);
	     System.out.println("binoutwardRow2Capacity   	 : "+actbinoutwardRow2Capacity		+"  Value Expected : "+expbinoutwardRow2Capacity);
	     System.out.println("binoutwardRow2Load     	 : "+actbinoutwardRow2Load			+"  Value Expected : "+expbinoutwardRow2Load);
	     System.out.println("binoutwardRow2FreeSpace  	 : "+actbinoutwardRow2FreeSpace		+"  Value Expected : "+expbinoutwardRow2FreeSpace);
	     System.out.println("binoutwardRow2FreeQty    	 : "+actbinoutwardRow2FreeQty		+"  Value Expected : "+expbinoutwardRow2FreeQty);
	     System.out.println("binoutwardRow2ToBePicked 	 : "+actbinoutwardRow2ToBePicked    +"  Value Expected : "+expbinoutwardRow2ToBePicked);
	     
	     System.out.println("binoutwardRowTotalToBePicked :"+actbinoutwardRowTotalToBePicked +"  Value Expected : "+expbinoutwardRowTotalToBePicked);
	     
	     
	     System.out.println("**************************************** Bin Outward After Allocating  ***************************************");
	     
	     System.out.println("binTotalQty              	 : "+actbinTotalQtyAfterAllocate				+"  Value Expected : "+expbinTotalQtyAfterAllocate);	
	     System.out.println("binBaseUOM                	 : "+actbinBaseUOMAfterAllocate					+"  Value Expected : "+expbinBaseUOMAfterAllocate);	
	     System.out.println("binBalanceTxt            	 : "+actbinBalanceTxtAfterAllocate				+"  Value Expected : "+expbinBalanceTxtAfterAllocate);	
	     
	     System.out.println("binoutwardRow1Bin        	 : "+actbinoutwardRow1BinAfterAllocate			+"  Value Expected : "+expbinoutwardRow1BinAfterAllocate);
	     System.out.println("binoutwardRow1Stock      	 : "+actbinoutwardRow1StockAfterAllocate		+"  Value Expected : "+expbinoutwardRow1StockAfterAllocate);
	     System.out.println("binoutwardRow1StockPcs   	 : "+actbinoutwardRow1StockPcsAfterAllocate		+"  Value Expected : "+expbinoutwardRow1StockPcsAfterAllocate);
	     System.out.println("binoutwardRow1Capacity   	 : "+actbinoutwardRow1CapacityAfterAllocate		+"  Value Expected : "+expbinoutwardRow1CapacityAfterAllocate);
	     System.out.println("binoutwardRow1Load     	 : "+actbinoutwardRow1LoadAfterAllocate			+"  Value Expected : "+expbinoutwardRow1LoadAfterAllocate);
	     System.out.println("binoutwardRow1FreeSpace  	 : "+actbinoutwardRow1FreeSpaceAfterAllocate	+"  Value Expected : "+expbinoutwardRow1FreeSpaceAfterAllocate);
	     System.out.println("binoutwardRow1FreeQty    	 : "+actbinoutwardRow1FreeQtyAfterAllocate		+"  Value Expected : "+expbinoutwardRow1FreeQtyAfterAllocate);
	     System.out.println("binoutwardRow1ToBePicked 	 : "+actbinoutwardRow1ToBePickedAfterAllocate   +"  Value Expected : "+expbinoutwardRow1ToBePickedAfterAllocate);
			
	     
	     System.out.println("binoutwardRow2Bin        	 : "+actbinoutwardRow2BinAfterAllocate			+"  Value Expected : "+expbinoutwardRow2BinAfterAllocate);
	     System.out.println("binoutwardRow2Stock      	 : "+actbinoutwardRow2StockAfterAllocate		+"  Value Expected : "+expbinoutwardRow2StockAfterAllocate);
	     System.out.println("binoutwardRow2StockPcs   	 : "+actbinoutwardRow2StockPcsAfterAllocate		+"  Value Expected : "+expbinoutwardRow2StockPcsAfterAllocate);
	     System.out.println("binoutwardRow2Capacity   	 : "+actbinoutwardRow2CapacityAfterAllocate		+"  Value Expected : "+expbinoutwardRow2CapacityAfterAllocate);
	     System.out.println("binoutwardRow2Load     	 : "+actbinoutwardRow2LoadAfterAllocate			+"  Value Expected : "+expbinoutwardRow2LoadAfterAllocate);
	     System.out.println("binoutwardRow2FreeSpace  	 : "+actbinoutwardRow2FreeSpaceAfterAllocate	+"  Value Expected : "+expbinoutwardRow2FreeSpaceAfterAllocate);
	     System.out.println("binoutwardRow2FreeQty    	 : "+actbinoutwardRow2FreeQtyAfterAllocate		+"  Value Expected : "+expbinoutwardRow2FreeQtyAfterAllocate);
	     System.out.println("binoutwardRow2ToBePicked 	 : "+actbinoutwardRow2ToBePickedAfterAllocate   +"  Value Expected : "+expbinoutwardRow2ToBePickedAfterAllocate);
	     
	     System.out.println("binoutwardRowTotalToBePicked :"+actbinoutwardRowTotalToBePicked +"  Value Expected : "+expbinoutwardRowTotalToBePicked);
	     
	     System.out.println("**************************************** Voucher Information After Consuming  ***************************************");
			
	     System.out.println("QtyColumn               : "+actQtyColumn    	  		+ " Value Expected : "+expQtyColumn);
	     System.out.println("LSOColumn         		 : "+actLSOColumn    	  		+ " Value Expected : "+expLSOColumn);
	     System.out.println("QtyToReleaseColumn      : "+actQtyToReleaseColumn      + " Value Expected : "+expQtyToReleaseColumn);
	     System.out.println("BinColumn               : "+actBinColumn    	  		+ " Value Expected : "+expBinColumn);
	     
	     	
	     if(actLinkRowCountValue==expLinkRowCountValue
	    		 
	    		 && actsearchOnDropdown==expsearchOnDropdown && actcontainingDropdown==expcontainingDropdown && actworkFlowSearchTxt==expworkFlowSearchTxt
	    		 && actworkFlowCustomizeBtn==expworkFlowCustomizeBtn && actworkFlowOkBtn==expworkFlowOkBtn
	    		 
				 && actworkFlowRow1Column1.equalsIgnoreCase(expworkFlowRow1Column1)
	    		 && actworkFlowRow1Column3.equalsIgnoreCase(expworkFlowRow1Column3)
	    		 && actworkFlowRow1Column4.equalsIgnoreCase(expworkFlowRow1Column4)
	    		 && actworkFlowRow1Column5.equalsIgnoreCase(expworkFlowRow1Column5)
	    		 
	    		 && actworkFlowRow2Column1.equalsIgnoreCase(expworkFlowRow2Column1)
	    		 && actworkFlowRow2Column3.equalsIgnoreCase(expworkFlowRow2Column3)
	    		 && actworkFlowRow2Column4.equalsIgnoreCase(expworkFlowRow2Column4)
	    		 && actworkFlowRow2Column5.equalsIgnoreCase(expworkFlowRow2Column5)
	    		 
	    		 && actworkFlowRow3Column1.equalsIgnoreCase(expworkFlowRow3Column1)
	    		 && actworkFlowRow3Column3.equalsIgnoreCase(expworkFlowRow3Column3)
	    		 && actworkFlowRow3Column4.equalsIgnoreCase(expworkFlowRow3Column4)
	    		 && actworkFlowRow3Column5.equalsIgnoreCase(expworkFlowRow3Column5)
	    		 
	    		 && actworkFlowRow4Column1.equalsIgnoreCase(expworkFlowRow4Column1)
	    		 && actworkFlowRow4Column3.equalsIgnoreCase(expworkFlowRow4Column3)
	    		 && actworkFlowRow4Column4.equalsIgnoreCase(expworkFlowRow4Column4)
	    		 && actworkFlowRow4Column5.equalsIgnoreCase(expworkFlowRow4Column5)
	    		 
	    		 && actbinSearchTxt==expbinSearchTxt && actbinSearchBtn==expbinSearchBtn && actbinAutoAllocateBtn==expbinAutoAllocateBtn
	    		 && actbinPickBtn==expbinPickBtn && actbinCancelBtn==expbinCancelBtn && actbinAutoAllocateWithinGroupBtn==expbinAutoAllocateWithinGroupBtn
					
	    		 && actbinTotalQty.equalsIgnoreCase(expbinTotalQty) && actbinBaseUOM.equalsIgnoreCase(expbinBaseUOM)
	    		 && actbinBalanceTxt.equalsIgnoreCase(expbinBalanceTxt)
	    		 
	    		 && actbinoutwardRow1Bin.equalsIgnoreCase(expbinoutwardRow1Bin) && actbinoutwardRow1Stock.equalsIgnoreCase(expbinoutwardRow1Stock)
	    		 && actbinoutwardRow1StockPcs.equalsIgnoreCase(expbinoutwardRow1StockPcs) && actbinoutwardRow1Capacity.equalsIgnoreCase(expbinoutwardRow1Capacity)
	    		 && actbinoutwardRow1Load.equalsIgnoreCase(expbinoutwardRow1Load) && actbinoutwardRow1FreeSpace.equalsIgnoreCase(expbinoutwardRow1FreeSpace)
	    		 && actbinoutwardRow1FreeQty.equalsIgnoreCase(expbinoutwardRow1FreeQty) && actbinoutwardRow1ToBePicked.equalsIgnoreCase(expbinoutwardRow1ToBePicked)
						
	    		 && actbinoutwardRow2Bin.equalsIgnoreCase(expbinoutwardRow2Bin) && actbinoutwardRow2Stock.equalsIgnoreCase(expbinoutwardRow2Stock)
	    		 && actbinoutwardRow2StockPcs.equalsIgnoreCase(expbinoutwardRow2StockPcs) && actbinoutwardRow2Capacity.equalsIgnoreCase(expbinoutwardRow2Capacity)
	    		 && actbinoutwardRow2Load.equalsIgnoreCase(expbinoutwardRow2Load) && actbinoutwardRow2FreeSpace.equalsIgnoreCase(expbinoutwardRow2FreeSpace)
	    		 && actbinoutwardRow2FreeQty.equalsIgnoreCase(expbinoutwardRow2FreeQty) && actbinoutwardRow2ToBePicked.equalsIgnoreCase(expbinoutwardRow2ToBePicked)
					
	    		 && actbinoutwardRowTotalToBePicked.equalsIgnoreCase(expbinoutwardRowTotalToBePicked)
	    		 
	    		 && actQtyColumn.equalsIgnoreCase(expQtyColumn) && actLSOColumn.equalsIgnoreCase(expLSOColumn) && actQtyToReleaseColumn.equalsIgnoreCase(expQtyToReleaseColumn)
	    		 && actBinColumn.equalsIgnoreCase(expBinColumn))
	     {			
	    	 System.out.println("Test Pass : Batch fields are As expected ");
	    	 excelReader.setCellData(xlfile, xlSheetName, 11, 9, resPass);
	    	 
	    	
					
	    	 return true;
	     }
	     else
	     {
	    	 System.out.println("Test Pass : Batch fields are As expected ");
	    	 excelReader.setCellData(xlfile, xlSheetName, 11, 9, resFail);
					
	    	
	    	 return false;
	     }
	 }

	
	
	
	

	public boolean checkSalesInvoiceVoucherSavingWithAllItemsRmaRItemInThirdRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
		Thread.sleep(3000);
	
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
		select3rdRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("RMA RITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_5thColumn));
		select3rdRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.sendKeys("1");
		enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.sendKeys("0");
		enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
		enter_AvgRate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
		enter_AvgRateo.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
	
		Thread.sleep(3000);
		
		List<WebElement> rowCountInLinkScreen=LinkRowCount;
		
		int actLinkRowCountValue=rowCountInLinkScreen.size();
		
		boolean actsearchOnDropdown=searchOnDropdown.isDisplayed();
		boolean actcontainingDropdown=containingDropdown.isDisplayed();
		boolean actworkFlowSearchTxt=workFlowSearchTxt.isDisplayed();
		boolean actworkFlowCustomizeBtn=workFlowCustomizeBtn.isDisplayed();
		boolean actworkFlowOkBtn=workFlowOkBtn.isDisplayed();
		
		String actworkFlowRow1Column1=workFlowRow1Column1.getText();
		String actworkFlowRow1Column2=workFlowRow1Column2.getText();
		String actworkFlowRow1Column3=workFlowRow1Column3.getText();
		String actworkFlowRow1Column4=workFlowRow1Column4.getText();
		String actworkFlowRow1Column5=workFlowRow1Column5.getText();
		
		String actworkFlowRow2Column1=workFlowRow2Column1.getText();
		String actworkFlowRow2Column2=workFlowRow2Column2.getText();
		String actworkFlowRow2Column3=workFlowRow2Column3.getText();
		String actworkFlowRow2Column4=workFlowRow2Column4.getText();
		String actworkFlowRow2Column5=workFlowRow2Column5.getText();
		
		String actworkFlowRow3Column1=workFlowRow3Column1.getText();
		String actworkFlowRow3Column2=workFlowRow3Column2.getText();
		String actworkFlowRow3Column3=workFlowRow3Column3.getText();
		String actworkFlowRow3Column4=workFlowRow3Column4.getText();
		String actworkFlowRow3Column5=workFlowRow3Column5.getText();
		
		String actworkFlowRow4Column1=workFlowRow4Column1.getText();
		String actworkFlowRow4Column2=workFlowRow4Column2.getText();
		String actworkFlowRow4Column3=workFlowRow4Column3.getText();
		String actworkFlowRow4Column4=workFlowRow4Column4.getText();
		String actworkFlowRow4Column5=workFlowRow4Column5.getText();

		
	     
		
		// Expected
		
	     
	     int expLinkRowCountValue=4;
	     
	     boolean expsearchOnDropdown=true;
	     boolean expcontainingDropdown=true;
	     boolean expworkFlowSearchTxt=true;
	     boolean expworkFlowCustomizeBtn=true;
	     boolean expworkFlowOkBtn=true;
	     
	     String expworkFlowRow1Column1="SalOrd:6";
	     String expworkFlowRow1Column3="RMA RITEM";
	     String expworkFlowRow1Column4="2.00";
	     String expworkFlowRow1Column5="0.00";
	     
	     String expworkFlowRow2Column1="SalOrd:6";
	     String expworkFlowRow2Column3="RMA RITEM";
	     String expworkFlowRow2Column4="2.00";
	     String expworkFlowRow2Column5="0.00";
	     
	     String expworkFlowRow3Column1="SalOrd:7";
	     String expworkFlowRow3Column3="RMA RITEM";
	     String expworkFlowRow3Column4="1.00";
	     String expworkFlowRow3Column5="0.00";
	     
	     String expworkFlowRow4Column1="SalOrd:11";
	     String expworkFlowRow4Column3="RMA RITEM";
	     String expworkFlowRow4Column4="2.00";
	     String expworkFlowRow4Column5="0.00";
	     
	     
	     
	     List<WebElement> rowCountInLinkScreen1=LinkRowCount;
			
	     int rowCount1=rowCountInLinkScreen1.size();
		
	     System.out.println(rowCount1);
	     
	     for (int i = 1; i <= rowCount1; i++) 
	     {
	    	 WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
	    	 
	    	 WebElement itemName=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[9]"));
	    	 
	    	 String actvoucheno=voucherno.getText();
	    	 
	    	 String actitemName=itemName.getText();
	    	 
	    	 System.out.println(actvoucheno);
	    	 
	    	 System.out.println(actitemName);
	    	 
	    	 if(actvoucheno.equalsIgnoreCase("SalOrd:11") && actitemName.equalsIgnoreCase("RMA RITEM"))
	    	 {
	    		 Thread.sleep(2000);
	    		 WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
	    		 radioBtn.click();
	    		 
	    		 break;
	    	 }

	     }
			
	     Thread.sleep(2000);
			
	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
	     workFlowOkBtn.click();
	     
	     Thread.sleep(2000);
	     
	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_11thColumn));
	     select3rdRow_11thColumn.click();
	     
	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
	     enter_Rate.sendKeys("10");
	     enter_Rate.sendKeys(Keys.TAB);
		
	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
	     enter_Gross.click();
	     enter_Gross.sendKeys(Keys.TAB);
	     
	     Thread.sleep(3000);
	     
	     // Actual 
	     boolean actrmaoutwardSerialNumberTxtField=rmaoutwardSerialNumberTxtField.isDisplayed();
	     String actrmaoutwardQuantityTxtField=rmaoutwardQuantityTxtField.getAttribute("value");
	     String actrmaoutwardNumberofItemsLabel=rmaoutwardNumberofItemsLabel.getText();
	     boolean actrmaoutwardTableHeadingRMA=rmaoutwardTableHeadingRMA.isDisplayed();
	     boolean actrmaoutwardTableHeadingDocumentNo=rmaoutwardTableHeadingDocumentNo.isDisplayed();
	     boolean actrmaoutwardTableHeadingDocumentDate=rmaoutwardTableHeadingDocumentDate.isDisplayed();
	     boolean actrmaoutwardOkBtn=rmaoutwardOkBtn.isDisplayed();
	     boolean actrmaoutwardCancelBtn=rmaoutwardCancelBtn.isDisplayed();
	     boolean actrmaoutwardExpandBtn=rmaoutwardExpandBtn.isDisplayed();
				
	     // Expected
	     boolean exprmaoutwardSerialNumberTxtField=true;
	     String exprmaoutwardQuantityTxtField="1";
	     String exprmaoutwardNumberofItemsLabel="0";
	     boolean exprmaoutwardTableHeadingRMA=true;
	     boolean exprmaoutwardTableHeadingDocumentNo=true;
	     boolean exprmaoutwardTableHeadingDocumentDate=true;
	     boolean exprmaoutwardOkBtn=true;
	     boolean exprmaoutwardCancelBtn=true;
	     boolean exprmaoutwardExpandBtn=true;
			
	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardExpandBtn));
	     rmaoutwardExpandBtn.click();
			
	     Thread.sleep(3000);
	     // Actual 
	     boolean actsearchRMASearchTxtField=searchRMASearchTxtField.isDisplayed();
	     boolean actsearchRMASearchBtn=searchRMASearchBtn.isDisplayed();
	     String actsearchRMAQuantityTxtField=searchRMAQuantityTxtField.getAttribute("value");
	     String actsearchRMANoOfItemsTxt=searchRMANoOfItemsTxt.getText();
	     boolean actsearchRMAHeaderChkBox=searchRMAHeaderChkBox.isDisplayed();
	     boolean actsearchRMATableHeadingSerialNo=searchRMATableHeadingSerialNo.isDisplayed();
	     boolean actsearchRMATableHeadingDocNo=searchRMATableHeadingDocNo.isDisplayed();
	     boolean actsearchRMATableHeadingDate=searchRMATableHeadingDate.isDisplayed();
	     boolean actsearchRMAOkBtn=searchRMAOkBtn.isDisplayed();
	     boolean actsearchRMACancelBtn=searchRMACancelBtn.isDisplayed();
	     
	     // Expected
	     boolean expsearchRMASearchTxtField=true;
	     boolean expsearchRMASearchBtn=true;
	     String expsearchRMAQuantityTxtField="1";
	     String expsearchRMANoOfItemsTxt="0";
	     boolean expsearchRMAHeaderChkBox=true;
	     boolean expsearchRMATableHeadingSerialNo=true;
	     boolean expsearchRMATableHeadingDocNo=true;
	     boolean expsearchRMATableHeadingDate=true;
	     boolean expsearchRMAOkBtn=true;
	     boolean expsearchRMACancelBtn=true;
			
	     ArrayList<String>  expRMA= new ArrayList<String>(); 
	     
	     expRMA.add("Hyd@OS1");
	     expRMA.add("Hyd@OS2");
	     expRMA.add("Hyd@OS3");
	     expRMA.add("Hyd@OS4");
	     expRMA.add("Hyd@OS5");
	     
	     
	     ArrayList<String> actRMA= new ArrayList<>();
	     
	     for (int i = 1; i < 6; i++)
	     {
	    	 WebElement a=getDriver().findElement(By.xpath("//*[@id='RMASearchTable']/tbody/tr["+i+"]/td[2]"));
	    	 Thread.sleep(2000);
	    	 actRMA.add(a.getText());
	     }	
			
		
	     System.out.println("actRMA  : "+actRMA);
	     System.out.println("expRMA  : "+expRMA);
			
	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAHeaderChkBox));
	     searchRMAHeaderChkBox.click();
			
			
	     // Actual
	     boolean rma=actRMA.equals(expRMA);
	     boolean actsearchRMA1ChkBox=searchRMA1ChkBox.isSelected();
	     
	     // Expected
	     boolean expsearchRMA1ChkBox=true;
	     
	 
	     
	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAOkBtn));
	     searchRMAOkBtn.click();
		
	     Thread.sleep(3000);
		
	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardOkBtn));
	     rmaoutwardOkBtn.click();
	
	     Thread.sleep(3000);
	     
	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
	     enter_RMA.sendKeys(Keys.TAB);
		
		
	     String actQtyColumn     		=select3rdRow_8thColumn.getText();
	     String actLSOColumn		 	=select3rdRow_9thColumn.getText();
	     String actQtyToReleaseColumn	=select3rdRow_10thColumn.getText();
	     String actRMAColumn			=select3rdRow_15thColumn.getText();
	     
	     String expQtyColumn     		="1.00";
	     String expLSOColumn		 	="SalOrd:11";
	     String expQtyToReleaseColumn	="1.00";
	     String expRMAColumn			="Hyd@OS1";
		
	     
		 System.out.println("**************************************** checkSalesInvoiceVoucherSavingWithAllItemsRmaRItemInThirdRow ***************************************");
	     
	     System.out.println("**************************************** RMA Reservation Link Line Wise Pop Up Window  ***************************************");
	     
	     System.out.println("LinkRowCountValue  				  : "+actLinkRowCountValue						+" 	Value Expected : "+expLinkRowCountValue);
	     
	     System.out.println("searchOnDropdown  					  : "+actsearchOnDropdown						+" 	Value Expected : "+expsearchOnDropdown);
	     System.out.println("containingDropdown  				  : "+actcontainingDropdown						+" 	Value Expected : "+expcontainingDropdown);
	     System.out.println("workFlowSearchTxt  				  : "+actworkFlowSearchTxt						+" 	Value Expected : "+expworkFlowSearchTxt);
	     System.out.println("workFlowCustomizeBtn  				  : "+actworkFlowCustomizeBtn					+" 	Value Expected : "+expworkFlowCustomizeBtn);
	     System.out.println("workFlowOkBtn  					  : "+actworkFlowOkBtn							+" 	Value Expected : "+expworkFlowOkBtn);
	     
	     System.out.println("workFlowRow1Column1 	 			  : "+actworkFlowRow1Column1					+" 	Value Expected : "+expworkFlowRow1Column1);
	     System.out.println("workFlowRow1Column3  				  : "+actworkFlowRow1Column3					+" 	Value Expected : "+expworkFlowRow1Column3);
	     System.out.println("workFlowRow1Column4  				  : "+actworkFlowRow1Column4					+" 	Value Expected : "+expworkFlowRow1Column4);
	     System.out.println("workFlowRow1Column5  			   	  : "+actworkFlowRow1Column5					+" 	Value Expected : "+expworkFlowRow1Column5);
	     
	     System.out.println("workFlowRow2Column1 	 			  : "+actworkFlowRow2Column1					+" 	Value Expected : "+expworkFlowRow2Column1);
	     System.out.println("workFlowRow2Column3  				  : "+actworkFlowRow2Column3					+" 	Value Expected : "+expworkFlowRow2Column3);
	     System.out.println("workFlowRow2Column4  				  : "+actworkFlowRow2Column4					+" 	Value Expected : "+expworkFlowRow2Column4);
	     System.out.println("workFlowRow2Column5  			   	  : "+actworkFlowRow2Column5					+" 	Value Expected : "+expworkFlowRow2Column5);
	     
	     System.out.println("workFlowRow3Column1 	 			  : "+actworkFlowRow3Column1					+" 	Value Expected : "+expworkFlowRow3Column1);
	     System.out.println("workFlowRow3Column3  				  : "+actworkFlowRow3Column3					+" 	Value Expected : "+expworkFlowRow3Column3);
	     System.out.println("workFlowRow3Column4  				  : "+actworkFlowRow3Column4					+" 	Value Expected : "+expworkFlowRow3Column4);
	     System.out.println("workFlowRow3Column5  			   	  : "+actworkFlowRow3Column5					+" 	Value Expected : "+expworkFlowRow3Column5);
	     
	     System.out.println("*********************************** RMA Outward And Search rma  ************************************");
	     
	     System.out.println("rmaoutwardSerialNumberTxtField 	:  "+actrmaoutwardSerialNumberTxtField     +" value Expected : "+exprmaoutwardSerialNumberTxtField);
	     System.out.println("rmaoutwardQuantityTxtField    	    :  "+actrmaoutwardQuantityTxtField		   +" value Expected : "+exprmaoutwardQuantityTxtField);
	     System.out.println("rmaoutwardNumberofItemsLabel 	    :  "+actrmaoutwardNumberofItemsLabel 	   +" value Expected : "+exprmaoutwardNumberofItemsLabel);
	     System.out.println("rmaoutwardTableHeadingRMA          :  "+actrmaoutwardTableHeadingRMA		   +" value Expected : "+exprmaoutwardTableHeadingRMA);
	     System.out.println("rmaoutwardTableHeadingDocumentNo   :  "+actrmaoutwardTableHeadingDocumentNo   +" value Expected : "+exprmaoutwardTableHeadingDocumentNo);
	     System.out.println("rmaoutwardTableHeadingDocumentDate :  "+actrmaoutwardTableHeadingDocumentDate +" value Expected : "+exprmaoutwardTableHeadingDocumentDate);
	     System.out.println("rmaoutwardOkBtn 				    :  "+actrmaoutwardOkBtn					   +" value Expected : "+exprmaoutwardOkBtn);
	     System.out.println("rmaoutwardCancelBtn  			    :  "+actrmaoutwardCancelBtn				   +" value Expected : "+exprmaoutwardCancelBtn);
	     System.out.println("rmaoutwardExpandBtn 			    :  "+actrmaoutwardExpandBtn				   +" value Expected : "+exprmaoutwardExpandBtn);
	     
	     System.out.println("searchRMASearchTxtField            : "+actsearchRMASearchTxtField			  +"  Value Expected : "+expsearchRMASearchTxtField);
	     System.out.println("searchRMASearchBtn          	    : "+actsearchRMASearchBtn				  +"  Value Expected : "+expsearchRMASearchBtn);
	     System.out.println("searchRMAQuantityTxtField    	    : "+actsearchRMAQuantityTxtField		  +"  Value Expected : "+expsearchRMAQuantityTxtField);
	     System.out.println("searchRMANoOfItemsTxt        	    : "+actsearchRMANoOfItemsTxt			  +"  Value Expected : "+expsearchRMANoOfItemsTxt);
	     System.out.println("searchRMAHeaderChkBox         	    : "+actsearchRMAHeaderChkBox		      +"  Value Expected : "+expsearchRMAHeaderChkBox);
	     System.out.println("searchRMATableHeadingSerialNo 	    : "+actsearchRMATableHeadingSerialNo      +"  Value Expected : "+expsearchRMATableHeadingSerialNo);
	     System.out.println("searchRMATableHeadingDocNo         : "+actsearchRMATableHeadingDocNo	      +"  Value Expected : "+expsearchRMATableHeadingDocNo);
	     System.out.println("searchRMATableHeadingDate          : "+actsearchRMATableHeadingDate	  	  +"  Value Expected : "+expsearchRMATableHeadingDate);
	     System.out.println("searchRMAOkBtn   			        : "+actsearchRMAOkBtn				      +"  Value Expected : "+expsearchRMAOkBtn);
	     System.out.println("searchRMACancelBtn   		        : "+actsearchRMACancelBtn			      +"  Value Expected : "+expsearchRMACancelBtn);
	     
	     System.out.println("rma                                : "+rma                                   +"  Value Expected : "+"True");
	     
	     System.out.println("searchRMA1ChkBox                   : "+actsearchRMA1ChkBox                   +"  Value Expected : "+expsearchRMA1ChkBox);
	     
	     
	     System.out.println("**************************************** Voucher Information After Consuming  ***************************************");
			
	     System.out.println("QtyColumn               : "+actQtyColumn    	  		+ " Value Expected : "+expQtyColumn);
	     System.out.println("LSOColumn         		 : "+actLSOColumn    	  		+ " Value Expected : "+expLSOColumn);
	     System.out.println("QtyToReleaseColumn      : "+actQtyToReleaseColumn      + " Value Expected : "+expQtyToReleaseColumn);
	     System.out.println("RMAColumn               : "+actRMAColumn    	  		+ " Value Expected : "+expRMAColumn);
	     
	     	
	     if(actLinkRowCountValue==expLinkRowCountValue
	    		 
	    		 && actsearchOnDropdown==expsearchOnDropdown && actcontainingDropdown==expcontainingDropdown && actworkFlowSearchTxt==expworkFlowSearchTxt
	    		 && actworkFlowCustomizeBtn==expworkFlowCustomizeBtn && actworkFlowOkBtn==expworkFlowOkBtn
	    		 
				 && actworkFlowRow1Column1.equalsIgnoreCase(expworkFlowRow1Column1)
	    		 && actworkFlowRow1Column3.equalsIgnoreCase(expworkFlowRow1Column3)
	    		 && actworkFlowRow1Column4.equalsIgnoreCase(expworkFlowRow1Column4)
	    		 && actworkFlowRow1Column5.equalsIgnoreCase(expworkFlowRow1Column5)
	    		 
	    		 && actworkFlowRow2Column1.equalsIgnoreCase(expworkFlowRow2Column1)
	    		 && actworkFlowRow2Column3.equalsIgnoreCase(expworkFlowRow2Column3)
	    		 && actworkFlowRow2Column4.equalsIgnoreCase(expworkFlowRow2Column4)
	    		 && actworkFlowRow2Column5.equalsIgnoreCase(expworkFlowRow2Column5)
	    		 
	    		 && actworkFlowRow3Column1.equalsIgnoreCase(expworkFlowRow3Column1)
	    		 && actworkFlowRow3Column3.equalsIgnoreCase(expworkFlowRow3Column3)
	    		 && actworkFlowRow3Column4.equalsIgnoreCase(expworkFlowRow3Column4)
	    		 && actworkFlowRow3Column5.equalsIgnoreCase(expworkFlowRow3Column5)
	    		 
	    		 && rma==true && actsearchRMA1ChkBox==expsearchRMA1ChkBox
	    		 
	    		 && actrmaoutwardSerialNumberTxtField==exprmaoutwardSerialNumberTxtField && actrmaoutwardQuantityTxtField.equalsIgnoreCase(exprmaoutwardQuantityTxtField)
	    		 && actrmaoutwardNumberofItemsLabel.equalsIgnoreCase(exprmaoutwardNumberofItemsLabel) && actrmaoutwardTableHeadingRMA==exprmaoutwardTableHeadingRMA
	    		 && actrmaoutwardTableHeadingDocumentNo==exprmaoutwardTableHeadingDocumentNo && actrmaoutwardTableHeadingDocumentDate==exprmaoutwardTableHeadingDocumentDate
	    		 && actrmaoutwardOkBtn==exprmaoutwardOkBtn && actrmaoutwardCancelBtn==exprmaoutwardCancelBtn && actrmaoutwardExpandBtn==exprmaoutwardExpandBtn
	    		 
	    		 && actsearchRMASearchTxtField==expsearchRMASearchTxtField && actsearchRMASearchBtn==expsearchRMASearchBtn 
	    		 && actsearchRMAQuantityTxtField.equalsIgnoreCase(expsearchRMAQuantityTxtField) && actsearchRMANoOfItemsTxt.equalsIgnoreCase(expsearchRMANoOfItemsTxt)
	    		 && actsearchRMAHeaderChkBox==expsearchRMAHeaderChkBox && actsearchRMATableHeadingSerialNo==expsearchRMATableHeadingSerialNo
	    		 && actsearchRMATableHeadingDocNo==expsearchRMATableHeadingDocNo && actsearchRMATableHeadingDate==expsearchRMATableHeadingDate 
	    		 && actsearchRMAOkBtn==expsearchRMAOkBtn && actsearchRMACancelBtn==expsearchRMACancelBtn
	    		 
	    		 && actQtyColumn.equalsIgnoreCase(expQtyColumn) && actLSOColumn.equalsIgnoreCase(expLSOColumn) && actQtyToReleaseColumn.equalsIgnoreCase(expQtyToReleaseColumn)
	    		 && actRMAColumn.equalsIgnoreCase(expRMAColumn))
	     {			
	    	 System.out.println("Test Pass : Batch fields are As expected ");
	    	 excelReader.setCellData(xlfile, xlSheetName, 11, 9, resPass);
	    	 
	    	
					
	    	 return true;
	     }
	     else
	     {
	    	 System.out.println("Test Pass : Batch fields are As expected ");
	    	 excelReader.setCellData(xlfile, xlSheetName, 11, 9, resFail);
					
	    	
	    	 return false;
	     }
	 }
	
	
	
	

	public boolean checkSalesInvoiceVoucherSavingWithAllItemsStockItemInFourthRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
		Thread.sleep(3000);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_1stColumn));
		select4thRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("STOCK ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_5thColumn));
		select4thRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.sendKeys("1");
		enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.sendKeys("0");
		enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
		enter_AvgRate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
		enter_AvgRateo.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
	
		Thread.sleep(3000);
		System.out.println("****************** Enter Pop up");
		List<WebElement> rowCountInLinkScreen=LinkRowCount;
		
		int actLinkRowCountValue=rowCountInLinkScreen.size();
		
		boolean actsearchOnDropdown=searchOnDropdown.isDisplayed();
		boolean actcontainingDropdown=containingDropdown.isDisplayed();
		boolean actworkFlowSearchTxt=workFlowSearchTxt.isDisplayed();
		boolean actworkFlowCustomizeBtn=workFlowCustomizeBtn.isDisplayed();
		boolean actworkFlowOkBtn=workFlowOkBtn.isDisplayed();
		
		String actworkFlowRow1Column1=workFlowRow1Column1.getText();
		String actworkFlowRow1Column2=workFlowRow1Column2.getText();
		String actworkFlowRow1Column3=workFlowRow1Column3.getText();
		String actworkFlowRow1Column4=workFlowRow1Column4.getText();
		String actworkFlowRow1Column5=workFlowRow1Column5.getText();
		
		
	     System.out.println("**********Completed Actual");
		
		// Expected
		
	     
	     int expLinkRowCountValue=1;
	     
	     boolean expsearchOnDropdown=true;
	     boolean expcontainingDropdown=true;
	     boolean expworkFlowSearchTxt=true;
	     boolean expworkFlowCustomizeBtn=true;
	     boolean expworkFlowOkBtn=true;
	     
	     String expworkFlowRow1Column1="SalOrd:11";
	     String expworkFlowRow1Column3="STOCK ITEM";
	     String expworkFlowRow1Column4="2.00";
	     String expworkFlowRow1Column5="0.00";
	     System.out.println("********************************* Before Click Radio");
	     
	     List<WebElement> rowCountInLinkScreen1=LinkRowCount;
			
	     int rowCount1=rowCountInLinkScreen1.size();
		
	     System.out.println(rowCount1);
	     
	     for (int i = 1; i <= rowCount1; i++) 
	     {
	    	 WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
	    	 
	    	 WebElement itemName=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[9]"));
	    	 
	    	 String actvoucheno=voucherno.getText();
	    	 
	    	 String actitemName=itemName.getText();
	    	 
	    	 System.out.println(actvoucheno);
	    	 
	    	 System.out.println(actitemName);
	    	 
	    	 if(actvoucheno.equalsIgnoreCase("SalOrd:11") && actitemName.equalsIgnoreCase("STOCK ITEM"))
	    	 {
	    		 Thread.sleep(2000);
	    		 WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
	    		 radioBtn.click();
	    		 
	    		 break;
	    	 }

	     }
			
	     Thread.sleep(2000);
			
	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
	     workFlowOkBtn.click();
	     
	     Thread.sleep(2000);
	     
	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_11thColumn));
	     select4thRow_11thColumn.click();
	     
	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
	     enter_Rate.sendKeys("10");
	     enter_Rate.sendKeys(Keys.TAB);
		
	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
	     enter_Gross.click();
	     enter_Gross.sendKeys(Keys.TAB);
	     
	     
	     Thread.sleep(3000);
		
		
	     String actQtyColumn     		=select4thRow_8thColumn.getText();
	     String actLSOColumn		 	=select4thRow_9thColumn.getText();
	     String actQtyToReleaseColumn	=select4thRow_10thColumn.getText();
	     
	     String expQtyColumn     		="1.00";
	     String expLSOColumn		 	="SalOrd:11";
	     String expQtyToReleaseColumn	="1.00";
		
	     
		 System.out.println("**************************************** checkSalesInvoiceVoucherSavingWithAllItemsStockItemInFourthRow ***************************************");
	     
	     System.out.println("**************************************** STOCK Reservation Link Line Wise Pop Up Window  ***************************************");
	     
	     System.out.println("LinkRowCountValue  				  : "+actLinkRowCountValue						+" 	Value Expected : "+expLinkRowCountValue);
	     
	     System.out.println("searchOnDropdown  					  : "+actsearchOnDropdown						+" 	Value Expected : "+expsearchOnDropdown);
	     System.out.println("containingDropdown  				  : "+actcontainingDropdown						+" 	Value Expected : "+expcontainingDropdown);
	     System.out.println("workFlowSearchTxt  				  : "+actworkFlowSearchTxt						+" 	Value Expected : "+expworkFlowSearchTxt);
	     System.out.println("workFlowCustomizeBtn  				  : "+actworkFlowCustomizeBtn					+" 	Value Expected : "+expworkFlowCustomizeBtn);
	     System.out.println("workFlowOkBtn  					  : "+actworkFlowOkBtn							+" 	Value Expected : "+expworkFlowOkBtn);
	     
	     System.out.println("workFlowRow1Column1 	 			  : "+actworkFlowRow1Column1					+" 	Value Expected : "+expworkFlowRow1Column1);
	     System.out.println("workFlowRow1Column3  				  : "+actworkFlowRow1Column3					+" 	Value Expected : "+expworkFlowRow1Column3);
	     System.out.println("workFlowRow1Column4  				  : "+actworkFlowRow1Column4					+" 	Value Expected : "+expworkFlowRow1Column4);
	     System.out.println("workFlowRow1Column5  			   	  : "+actworkFlowRow1Column5					+" 	Value Expected : "+expworkFlowRow1Column5);
	     
	     
	     System.out.println("**************************************** Voucher Information After Consuming  ***************************************");
			
	     System.out.println("QtyColumn               : "+actQtyColumn    	  		+ " Value Expected : "+expQtyColumn);
	     System.out.println("LSOColumn         		 : "+actLSOColumn    	  		+ " Value Expected : "+expLSOColumn);
	     System.out.println("QtyToReleaseColumn      : "+actQtyToReleaseColumn      + " Value Expected : "+expQtyToReleaseColumn);
	     
	     	
	     if(actLinkRowCountValue==expLinkRowCountValue
	    		 
	    		 && actsearchOnDropdown==expsearchOnDropdown && actcontainingDropdown==expcontainingDropdown && actworkFlowSearchTxt==expworkFlowSearchTxt
	    		 && actworkFlowCustomizeBtn==expworkFlowCustomizeBtn && actworkFlowOkBtn==expworkFlowOkBtn
	    		 
				 && actworkFlowRow1Column1.equalsIgnoreCase(expworkFlowRow1Column1)
	    		 && actworkFlowRow1Column3.equalsIgnoreCase(expworkFlowRow1Column3)
	    		 && actworkFlowRow1Column4.equalsIgnoreCase(expworkFlowRow1Column4)
	    		 && actworkFlowRow1Column5.equalsIgnoreCase(expworkFlowRow1Column5)
	    		 
	    		 
	    		 && actQtyColumn.equalsIgnoreCase(expQtyColumn) && actLSOColumn.equalsIgnoreCase(expLSOColumn) 
	    		 && actQtyToReleaseColumn.equalsIgnoreCase(expQtyToReleaseColumn))
	     {			
	    	 System.out.println("Test Pass : Batch fields are As expected ");
	    	 excelReader.setCellData(xlfile, xlSheetName, 11, 9, resPass);
	    	 
	    	
					
	    	 return true;
	     }
	     else
	     {
	    	 System.out.println("Test Pass : Batch fields are As expected ");
	    	 excelReader.setCellData(xlfile, xlSheetName, 11, 9, resFail);
					
	    	
	    	 return false;
	     }
	 }

	
	

	
	public boolean checkSalesInvoiceVoucherSavingWithAllItemsBatchBRItemInFifthRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
		Thread.sleep(3000);
	
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_1stColumn));
		select5thRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("BATCH BR ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_5thColumn));
		select5thRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.sendKeys("1");
		enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.sendKeys("0");
		enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
		enter_AvgRate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
		enter_AvgRateo.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
	
		Thread.sleep(3000);
		
		List<WebElement> rowCountInLinkScreen=LinkRowCount;
		
		int actLinkRowCountValue=rowCountInLinkScreen.size();
		
		boolean actsearchOnDropdown=searchOnDropdown.isDisplayed();
		boolean actcontainingDropdown=containingDropdown.isDisplayed();
		boolean actworkFlowSearchTxt=workFlowSearchTxt.isDisplayed();
		boolean actworkFlowCustomizeBtn=workFlowCustomizeBtn.isDisplayed();
		boolean actworkFlowOkBtn=workFlowOkBtn.isDisplayed();
		
		String actworkFlowRow1Column1=workFlowRow1Column1.getText();
		String actworkFlowRow1Column2=workFlowRow1Column2.getText();
		String actworkFlowRow1Column3=workFlowRow1Column3.getText();
		String actworkFlowRow1Column4=workFlowRow1Column4.getText();
		String actworkFlowRow1Column5=workFlowRow1Column5.getText();
		
		String actworkFlowRow2Column1=workFlowRow2Column1.getText();
		String actworkFlowRow2Column2=workFlowRow2Column2.getText();
		String actworkFlowRow2Column3=workFlowRow2Column3.getText();
		String actworkFlowRow2Column4=workFlowRow2Column4.getText();
		String actworkFlowRow2Column5=workFlowRow2Column5.getText();
		
		
		
	     
		
		// Expected
		
	     
	     int expLinkRowCountValue=2;
	     
	     boolean expsearchOnDropdown=true;
	     boolean expcontainingDropdown=true;
	     boolean expworkFlowSearchTxt=true;
	     boolean expworkFlowCustomizeBtn=true;
	     boolean expworkFlowOkBtn=true;
	     
	     String expworkFlowRow1Column1="SalOrd:3";
	     String expworkFlowRow1Column3="BATCH BR ITEM";
	     String expworkFlowRow1Column4="20.00";
	     String expworkFlowRow1Column5="0.00";
	     
	     String expworkFlowRow2Column1="SalOrd:11";
	     String expworkFlowRow2Column3="BATCH BR ITEM";
	     String expworkFlowRow2Column4="2.00";
	     String expworkFlowRow2Column5="0.00";
	     
	     
	     List<WebElement> rowCountInLinkScreen1=LinkRowCount;
			
	     int rowCount1=rowCountInLinkScreen1.size();
		
	     System.out.println(rowCount1);
	     
	     for (int i = 1; i <= rowCount1; i++) 
	     {
	    	 WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
	    	 
	    	 WebElement itemName=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[9]"));
	    	 
	    	 String actvoucheno=voucherno.getText();
	    	 
	    	 String actitemName=itemName.getText();
	    	 
	    	 System.out.println(actvoucheno);
	    	 
	    	 System.out.println(actitemName);
	    	 
	    	 if(actvoucheno.equalsIgnoreCase("SalOrd:11") && actitemName.equalsIgnoreCase("BATCH BR ITEM"))
	    	 {
	    		 Thread.sleep(2000);
	    		 WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
	    		 radioBtn.click();
	    		 
	    		 break;
	    	 }

	     }
			
	     Thread.sleep(2000);
			
	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
	     workFlowOkBtn.click();
	     
	     Thread.sleep(2000);
	     
	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_11thColumn));
	     select5thRow_11thColumn.click();
	     
	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
	     enter_Rate.sendKeys("10");
	     enter_Rate.sendKeys(Keys.TAB);
		
	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
	     enter_Gross.click();
	     enter_Gross.sendKeys(Keys.TAB);
	     
	     Thread.sleep(3000);
		
	     // Actual
	     System.out.println("Batch Rows"+ batchPopUPEmptyRows.getAttribute("data-totalrows"));
		
	     String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
	     String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
	     
	     String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
	     String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
		
	     String actRow3BatchNo,actRow3BaseQty,actRow3Rate,actRow3AdjustedQty,actRow3TotalAdjustedQty;
	     String expRow3BatchNo,expRow3BaseQty,expRow3Rate,expRow3AdjustedQty,expRow3TotalAdjustedQty;
		
			
	     String actBatchRows=batchPopUPEmptyRows.getAttribute("data-totalrows");
			
	     actBatchName=batchItemName.getText();
	     actTotalQty=batchTotalQty.getText();
	     actAdjustedQty=batchAdjustQty.getText();
	     actBalance=batchBalance.getText();
	     actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
	     actTotalQtyFooter=batchTotalQtyFooter.getText();
	     
	     actRow1BatchNo=batch_BatchNoRow1.getText();
	     actRow1BaseQty=batch_BaseQtyRow1.getText();
	     //act7=batch_ExpiryInDateRow1.getText();
	     actRow1Rate=batch_RateRow1.getText();
	     actRow1AdjustedQty=batch_QtyAdjustedRow1.getText();
	     //act10=batch_PurchaseDateRow1.getText();
	     
	     
	     
	     // Expected
		
	     String expBatchRows="1";
		
	     expBatchName="BATCH BR ITEM";
	     expTotalQty="1.00";
	     expAdjustedQty="0.00";
	     expBalance="1.00";
	     
	     expTotalQtyFooter="5.00";
	     expTotalAdjustedQtyFooter="0.00";
	     
	     
	     expRow1BatchNo="OSHBR1";
	     expRow1BaseQty="5.00";
	     //exp7=batch_ExpiryInDateRow1.getText();
	     expRow1Rate="10.00";
	     expRow1AdjustedQty="0";
	     //exp10=batch_PurchaseDateRow1.getText();
		
		
		
	     String actcustomerAccountTxt=customerAccountTxt.getAttribute("value");
	     String expcustomerAccountTxt="Customer A";
	     
		
	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
	     batchPickOnFIFOIcon.click();
		
		
	
	     // Actual
	     System.out.println("Batch Rows"+ batchPopUPEmptyRows.getAttribute("data-totalrows"));
	     
	     String actBatchNameAfterPick,actTotalQtyAfterPick,actAdjustedQtyAfterPick,actBalanceAfterPick,actRow1BatchNoAfterPick,actRow1BaseQtyAfterPick,actRow1RateAfterPick,actRow1AdjustedQtyAfterPick,actTotalAdjustedQtyFooterAfterPick,actTotalQtyFooterAfterPick;
	     String expBatchNameAfterPick,expTotalQtyAfterPick,expAdjustedQtyAfterPick,expBalanceAfterPick,expRow1BatchNoAfterPick,expRow1BaseQtyAfterPick,expRow1RateAfterPick,expRow1AdjustedQtyAfterPick,expTotalQtyFooterAfterPick,expTotalAdjustedQtyFooterAfterPick;
	     
	     String actRow2BatchNoAfterPick,actRow2BaseQtyAfterPick,actRow2RateAfterPick,actRow2AdjustedQtyAfterPick,actRow2TotalAdjustedQtyAfterPick;
	     String expRow2BatchNoAfterPick,expRow2BaseQtyAfterPick,expRow2RateAfterPick,expRow2AdjustedQtyAfterPick,expRow2TotalAdjustedQtyAfterPick;
		
	     String actRow3BatchNoAfterPick,actRow3BaseQtyAfterPick,actRow3RateAfterPick,actRow3AdjustedQtyAfterPick,actRow3TotalAdjustedQtyAfterPick;
	     String expRow3BatchNoAfterPick,expRow3BaseQtyAfterPick,expRow3RateAfterPick,expRow3AdjustedQtyAfterPick,expRow3TotalAdjustedQtyAfterPick;
		
	     String actBatchRowsAfterPick=batchPopUPEmptyRows.getAttribute("data-totalrows");
		
	     actBatchNameAfterPick=batchItemName.getText();
	     actTotalQtyAfterPick=batchTotalQty.getText();
	     actAdjustedQtyAfterPick=batchAdjustQty.getText();
	     actBalanceAfterPick=batchBalance.getText();
	     actTotalAdjustedQtyFooterAfterPick=batchTotalAdjustedQtyFooter.getText();
	     actTotalQtyFooterAfterPick=batchTotalQtyFooter.getText();
		
	     actRow1BatchNoAfterPick=batch_BatchNoRow1.getText();
	     actRow1BaseQtyAfterPick=batch_BaseQtyRow1.getText();
	     //act7=batch_ExpiryInDateRow1.getText();
	     actRow1RateAfterPick=batch_RateRow1.getText();
	     actRow1AdjustedQtyAfterPick=batch_QtyAdjustedRow1.getText();
	     //act10=batch_PurchaseDateRow1.getText();
		
		
		
		
	     // Expected
		
	     String expBatchRowsAfterPick="1";
		
	     expBatchNameAfterPick="BATCH BR ITEM";
	     expTotalQtyAfterPick="1.00";
	     expAdjustedQtyAfterPick="1.00";
	     expBalanceAfterPick="0.00";
					
	     expTotalQtyFooterAfterPick="5.00";
	     expTotalAdjustedQtyFooterAfterPick="1.00";
		
		
	     expRow1BatchNoAfterPick="OSHBR1";
	     expRow1BaseQtyAfterPick="5.00";
	     //exp7=batch_ExpiryInDateRow1.getText();
	     expRow1RateAfterPick="10.00";
	     expRow1AdjustedQtyAfterPick="1.00";
	     //exp10=batch_PurchaseDateRow1.getText();
		
		
	     String actcustomerAccountTxtAfterPick=customerAccountTxt.getAttribute("value");
	     String expcustomerAccountTxtAfterPick="Customer A";
		
	
	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
	     batchOkIcon.click();
	     
	     Thread.sleep(3000);
		
		
	     String actQtyColumn     		=select5thRow_8thColumn.getText();
	     String actLSOColumn		 	=select5thRow_9thColumn.getText();
	     String actQtyToReleaseColumn	=select5thRow_10thColumn.getText();
	     String actBatchColumn			=select5thRow_13thColumn.getText();
	     
	     String expQtyColumn     		="1.00";
	     String expLSOColumn		 	="SalOrd:11";
	     String expQtyToReleaseColumn	="1.00";
	     String expBatchColumn			="OSHBR1";
		
	     
		 System.out.println("**************************************** checkSalesInvoiceVoucherSavingWithAllItemsBatchBRItemInFifthRow ***************************************");
	     
	     System.out.println("**************************************** Batch Reservation Link Line Wise Pop Up Window  ***************************************");
	     
	     System.out.println("LinkRowCountValue  				  : "+actLinkRowCountValue						+" 	Value Expected : "+expLinkRowCountValue);
	     
	     System.out.println("searchOnDropdown  					  : "+actsearchOnDropdown						+" 	Value Expected : "+expsearchOnDropdown);
	     System.out.println("containingDropdown  				  : "+actcontainingDropdown						+" 	Value Expected : "+expcontainingDropdown);
	     System.out.println("workFlowSearchTxt  				  : "+actworkFlowSearchTxt						+" 	Value Expected : "+expworkFlowSearchTxt);
	     System.out.println("workFlowCustomizeBtn  				  : "+actworkFlowCustomizeBtn					+" 	Value Expected : "+expworkFlowCustomizeBtn);
	     System.out.println("workFlowOkBtn  					  : "+actworkFlowOkBtn							+" 	Value Expected : "+expworkFlowOkBtn);
	     
	     System.out.println("workFlowRow1Column1 	 			  : "+actworkFlowRow1Column1					+" 	Value Expected : "+expworkFlowRow1Column1);
	     System.out.println("workFlowRow1Column3  				  : "+actworkFlowRow1Column3					+" 	Value Expected : "+expworkFlowRow1Column3);
	     System.out.println("workFlowRow1Column4  				  : "+actworkFlowRow1Column4					+" 	Value Expected : "+expworkFlowRow1Column4);
	     System.out.println("workFlowRow1Column5  			   	  : "+actworkFlowRow1Column5					+" 	Value Expected : "+expworkFlowRow1Column5);
	     
	     System.out.println("workFlowRow2Column1 	 			  : "+actworkFlowRow2Column1					+" 	Value Expected : "+expworkFlowRow2Column1);
	     System.out.println("workFlowRow2Column3  				  : "+actworkFlowRow2Column3					+" 	Value Expected : "+expworkFlowRow2Column3);
	     System.out.println("workFlowRow2Column4  				  : "+actworkFlowRow2Column4					+" 	Value Expected : "+expworkFlowRow2Column4);
	     System.out.println("workFlowRow2Column5  			   	  : "+actworkFlowRow2Column5					+" 	Value Expected : "+expworkFlowRow2Column5);
	     
	     System.out.println("**************************************** Batch Pop Up Screen Before Pick  ***************************************");
			
	     System.out.println("customerAccountTxt          : "+actcustomerAccountTxt    	 + " Value Expected : "+expcustomerAccountTxt);	
	     
	     System.out.println("BatchRows      			 : "+actBatchRows              	 + " Value Expected : "+expBatchRows);
	     
	     System.out.println("Batch Popup Batch Name Qty  : "+actBatchName             	 + " Value Expected : "+expBatchName);	
	     System.out.println("Batch Popup Total Qty       : "+actTotalQty                 + " Value Expected : "+expTotalQty);
	     System.out.println("Batch Popup Adjusted Qty    : "+actAdjustedQty              + " Value Expected : "+expAdjustedQty);
	     System.out.println("Batch Popup Balance         : "+actBalance                  + " Value Expected : "+expBalance);
	     System.out.println("Batch Popup Adjusted Qty    : "+actTotalAdjustedQtyFooter   + " Value Expected : "+expTotalAdjustedQtyFooter);
	     System.out.println("Batch Popup Total Qty Footer: "+actTotalQtyFooter           + " Value Expected : "+expTotalQtyFooter);
	     
	     System.out.println("Batch Popup Row1 Batch No   : "+actRow1BatchNo              + " Value Expected : "+expRow1BatchNo);	
	     System.out.println("Batch Popup Row1 Base Qty   : "+actRow1BaseQty              + " Value Expected : "+expRow1BaseQty);
	     System.out.println("Batch Popup Row1 Rate       : "+actRow1Rate                 + " Value Expected : "+expRow1Rate);
	     System.out.println("Batch Popup Row1 AdjustedQty: "+actRow1AdjustedQty          + " Value Expected : "+expRow1AdjustedQty);
	     
	     
	     
	     System.out.println("**************************************** Batch Pop Up Screen After Pick   ***************************************");
			
	     System.out.println("customerAccountTxt          : "+actcustomerAccountTxtAfterPick    	  + " Value Expected : "+expcustomerAccountTxtAfterPick);	
	     
	     System.out.println("BatchRows                   : "+actBatchRowsAfterPick             	  + " Value Expected : "+expBatchRowsAfterPick);
	     
	     System.out.println("Batch Popup Batch Name Qty  : "+actBatchNameAfterPick                + " Value Expected : "+expBatchNameAfterPick);	
	     System.out.println("Batch Popup Total Qty       : "+actTotalQtyAfterPick                 + " Value Expected : "+expTotalQtyAfterPick);
	     System.out.println("Batch Popup Adjusted Qty    : "+actAdjustedQtyAfterPick              + " Value Expected : "+expAdjustedQtyAfterPick);
	     System.out.println("Batch Popup Balance         : "+actBalanceAfterPick                  + " Value Expected : "+expBalanceAfterPick);
	     System.out.println("Batch Popup Adjusted Qty    : "+actTotalAdjustedQtyFooterAfterPick   + " Value Expected : "+expTotalAdjustedQtyFooterAfterPick);
	     System.out.println("Batch Popup Total Qty Footer: "+actTotalQtyFooterAfterPick           + " Value Expected : "+expTotalQtyFooterAfterPick);
	     
	     System.out.println("Batch Popup Row1 Batch No   : "+actRow1BatchNoAfterPick              + " Value Expected : "+expRow1BatchNoAfterPick);	
	     System.out.println("Batch Popup Row1 Base Qty   : "+actRow1BaseQtyAfterPick              + " Value Expected : "+expRow1BaseQtyAfterPick);
	     System.out.println("Batch Popup Row1 Rate       : "+actRow1RateAfterPick                 + " Value Expected : "+expRow1RateAfterPick);
	     System.out.println("Batch Popup Row1 AdjustedQty: "+actRow1AdjustedQtyAfterPick          + " Value Expected : "+expRow1AdjustedQtyAfterPick);
	     
	     
	     System.out.println("**************************************** Voucher Information After Consuming  ***************************************");
			
	     System.out.println("QtyColumn               : "+actQtyColumn    	  		+ " Value Expected : "+expQtyColumn);
	     System.out.println("LSOColumn         		 : "+actLSOColumn    	  		+ " Value Expected : "+expLSOColumn);
	     System.out.println("QtyToReleaseColumn      : "+actQtyToReleaseColumn      + " Value Expected : "+expQtyToReleaseColumn);
	     System.out.println("BatchColumn             : "+actBatchColumn    	  		+ " Value Expected : "+expBatchColumn);
	     
	     	
	     if(actLinkRowCountValue==expLinkRowCountValue
	    		 
	    		 && actsearchOnDropdown==expsearchOnDropdown && actcontainingDropdown==expcontainingDropdown && actworkFlowSearchTxt==expworkFlowSearchTxt
	    		 && actworkFlowCustomizeBtn==expworkFlowCustomizeBtn && actworkFlowOkBtn==expworkFlowOkBtn
	    		 
				 && actworkFlowRow1Column1.equalsIgnoreCase(expworkFlowRow1Column1)
	    		 && actworkFlowRow1Column3.equalsIgnoreCase(expworkFlowRow1Column3)
	    		 && actworkFlowRow1Column4.equalsIgnoreCase(expworkFlowRow1Column4)
	    		 && actworkFlowRow1Column5.equalsIgnoreCase(expworkFlowRow1Column5)
	    		 
	    		 && actworkFlowRow2Column1.equalsIgnoreCase(expworkFlowRow2Column1)
	    		 && actworkFlowRow2Column3.equalsIgnoreCase(expworkFlowRow2Column3)
	    		 && actworkFlowRow2Column4.equalsIgnoreCase(expworkFlowRow2Column4)
	    		 && actworkFlowRow2Column5.equalsIgnoreCase(expworkFlowRow2Column5)
	    		 
	    		 && actcustomerAccountTxt.equalsIgnoreCase(expcustomerAccountTxt) 
					
	    		 && actBatchRows.equalsIgnoreCase(expBatchRows)
	    		 && actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
	    		 && actBalance.equalsIgnoreCase(expBalance) 
	    		 
	    		 && actTotalAdjustedQtyFooter.equalsIgnoreCase(expTotalAdjustedQtyFooter) && actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) 
	    		 
	    		 && actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow1BaseQty.equalsIgnoreCase(expRow1BaseQty) && actRow1Rate.equalsIgnoreCase(expRow1Rate) 
	    		 && actRow1AdjustedQty.equalsIgnoreCase(expRow1AdjustedQty)
	    		 
	    		 && actcustomerAccountTxtAfterPick.equalsIgnoreCase(expcustomerAccountTxtAfterPick) 
					
	    		 && actBatchRowsAfterPick.equalsIgnoreCase(expBatchRowsAfterPick)
	    		 && actBatchNameAfterPick.equalsIgnoreCase(expBatchNameAfterPick) && actTotalQtyAfterPick.equalsIgnoreCase(expTotalQtyAfterPick) && actAdjustedQtyAfterPick.equalsIgnoreCase(expAdjustedQtyAfterPick) 
	    		 && actBalanceAfterPick.equalsIgnoreCase(expBalanceAfterPick) 
	    		 
	    		 && actTotalAdjustedQtyFooterAfterPick.equalsIgnoreCase(expTotalAdjustedQtyFooterAfterPick) && actTotalQtyFooterAfterPick.equalsIgnoreCase(expTotalQtyFooterAfterPick) 
	    		 
	    		 && actRow1BatchNoAfterPick.equalsIgnoreCase(expRow1BatchNoAfterPick) && actRow1BaseQtyAfterPick.equalsIgnoreCase(expRow1BaseQtyAfterPick) && actRow1RateAfterPick.equalsIgnoreCase(expRow1RateAfterPick) 
	    		 && actRow1AdjustedQtyAfterPick.equalsIgnoreCase(expRow1AdjustedQtyAfterPick)
	    		 
	    		 && actQtyColumn.equalsIgnoreCase(expQtyColumn) && actLSOColumn.equalsIgnoreCase(expLSOColumn) && actQtyToReleaseColumn.equalsIgnoreCase(expQtyToReleaseColumn)
	    		 && actBatchColumn.equalsIgnoreCase(expBatchColumn))
	     {			
	    	 System.out.println("Test Pass : Batch fields are As expected ");
	    	 excelReader.setCellData(xlfile, xlSheetName, 11, 9, resPass);
	    	 
	    	
					
	    	 return true;
	     }
	     else
	     {
	    	 System.out.println("Test Pass : Batch fields are As expected ");
	    	 excelReader.setCellData(xlfile, xlSheetName, 11, 9, resFail);
					
	    	
	    	 return false;
	     }
	 }

	
	
	
	public boolean checkSavingSalesInvoiceVoucherWithAllItems() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
 		saveBtn.click();
 		
 		Thread.sleep(2000);
	
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(breakUpByTagTab));
 		breakUpByTagTab.click();
 		
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
 		billRefNewReferenceTxt.click();

 		
 		String actBillNewReference,actBillAmtAdjAgainstNewRefInOtherVouchers,actBillTransactionCurrency,actBillBaseCurrency,actBillLocalCurrency,actBillBalanceNewRefAmount,actBillBreakUpByTagDepartment,actBillBreakUpByTagBaseCurrency,actBillBreakUpByTagBillCurrency,actBillBreakUpByTagLocalCurrency,actBillAmtAdjustedInTransactionCurrency,actBillBalanceAmtToBeAdjustedInTransactionCurrency,act13;
 		String expBillNewReference,expBillAmtAdjAgainstNewRefInOtherVouchers,expBillTransactionCurrency,expBillBaseCurrency,expBillLocalCurrency,expBillBalanceNewRefAmount,expBillBreakUpByTagDepartment,expBillBreakUpByTagBaseCurrency,expBillBreakUpByTagBillCurrency,expBillBreakUpByTagLocalCurrency,expBillAmtAdjustedInTransactionCurrency,expBillBalanceAmtToBeAdjustedInTransactionCurrency;
 		
 		actBillNewReference									=billRefNewReferenceTxt.getAttribute("value");
 		actBillAmtAdjAgainstNewRefInOtherVouchers			=amtAdjustedAgainstNewREfinOtherVouchers.getText();
 		actBillTransactionCurrency							=transactionCurency.getText();
 		actBillBaseCurrency									=baseCurrency.getText();
 		actBillLocalCurrency								=localCurrencyDhs.getText();
 		
 		actBillBalanceNewRefAmount							=balanceNewReferenceAmt.getText();
 		
 		actBillBreakUpByTagDepartment						=breakUpByTagDepartment.getText();
 		actBillBreakUpByTagBaseCurrency						=breakUpByTagBaseCurrency.getText();
 		actBillBreakUpByTagBillCurrency						=breakUpByTagBillCurrency.getText();
 		
 		actBillBreakUpByTagLocalCurrency					=breakUpByTagBaseLocalCurrency.getText();
 		actBillAmtAdjustedInTransactionCurrency				=billRefAdjustAmountInTransCurency.getText();
 		actBillBalanceAmtToBeAdjustedInTransactionCurrency	=billRefBalanceAmountAdjustInTrnasCurrency.getText();
 		
 		
 		expBillNewReference									="0.00";
 		expBillAmtAdjAgainstNewRefInOtherVouchers			="0.00";
 		expBillTransactionCurrency							="50.00";
 		expBillBaseCurrency									="50.00";
 		expBillLocalCurrency								="3.50";
 		
 		expBillBalanceNewRefAmount							="0.00";
 		
 		expBillBreakUpByTagDepartment						="INDIA";
 		expBillBreakUpByTagBillCurrency						="50";
 		expBillBreakUpByTagBaseCurrency						="50.00";
 		
 		
 		expBillBreakUpByTagLocalCurrency					="3.50";
 		expBillAmtAdjustedInTransactionCurrency				="0";
 		expBillBalanceAmtToBeAdjustedInTransactionCurrency	="50.00";
 	

 		System.out.println("*********************************** checkSavingSalesInvoiceVoucherWithAllItems  ************************************");


 		System.out.println("actBillNewReference								   : "+ actBillNewReference									+" Value Expected : "+expBillNewReference);
 		System.out.println("actBillAmtAdjAgainstNewRefInOtherVouchers		   : "+actBillAmtAdjAgainstNewRefInOtherVouchers			+" Value Expected : "+expBillAmtAdjAgainstNewRefInOtherVouchers);
 		System.out.println("actBillTransactionCurrency						   : "+actBillTransactionCurrency							+" Value Expected : "+expBillTransactionCurrency);
 		System.out.println("actBillBaseCurrency								   : "+actBillBaseCurrency									+" Value Expected : "+ expBillBaseCurrency);
 		System.out.println("actBillLocalCurrency							   : "+actBillLocalCurrency									+" Value Expected : "+expBillLocalCurrency);
 		System.out.println("actBillBalanceNewRefAmount						   : "+ actBillBalanceNewRefAmount							+" Value Expected : "+expBillBalanceNewRefAmount);
        System.out.println("actBillBreakUpByTagDepartment					   : "+actBillBreakUpByTagDepartment						+" Value Expected : "+expBillBreakUpByTagDepartment);
 		System.out.println("actBillBreakUpByTagBaseCurrency				       : "+actBillBreakUpByTagBaseCurrency						+" Value Expected : "+expBillBreakUpByTagBaseCurrency);
 		System.out.println("actBillBreakUpByTagBillCurrency 				   : "+actBillBreakUpByTagBillCurrency						+" Value Expected : "+expBillBreakUpByTagBillCurrency);
 		System.out.println("actBillBreakUpByTagLocalCurrency				   : "+actBillBreakUpByTagLocalCurrency						+" Value Expected : "+expBillBreakUpByTagLocalCurrency);
 		System.out.println("actBillAmtAdjustedInTransactionCurrency			   : "+actBillAmtAdjustedInTransactionCurrency				+" Value Expected : "+expBillAmtAdjustedInTransactionCurrency);
 		System.out.println("actBillBalanceAmtToBeAdjustedInTransactionCurrency : "+actBillBalanceAmtToBeAdjustedInTransactionCurrency	+" Value Expected : "+expBillBalanceAmtToBeAdjustedInTransactionCurrency);
 		
 		   
 	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
	    billRefPickIcon.click();
	   
	    //pick button is click
	   
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(breakUpByTagTab));
 		breakUpByTagTab.click();
 		
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
 		billRefNewReferenceTxt.click();
 		
 		
 		String actBillNewReferencePick,actBillAmtAdjAgainstNewRefInOtherVouchersPick,actBillTransactionCurrencyPick,actBillBaseCurrencyPick,actBillLocalCurrencyPick,actBillBalanceNewRefAmountPick,actBillBreakUpByTagDepartmentPick,actBillBreakUpByTagBaseCurrencyPick,actBillBreakUpByTagBillCurrencyPick,actBillBreakUpByTagLocalCurrencyPick,actBillAmtAdjustedInTransactionCurrencyPick,actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick;
 		String expBillNewReferencePick,expBillAmtAdjAgainstNewRefInOtherVouchersPick,expBillTransactionCurrencyPick,expBillBaseCurrencyPick,expBillLocalCurrencyPick,expBillBalanceNewRefAmountPick,expBillBreakUpByTagDepartmentPick,expBillBreakUpByTagBaseCurrencyPick,expBillBreakUpByTagBillCurrencyPick,expBillBreakUpByTagLocalCurrencyPick,expBillAmtAdjustedInTransactionCurrencyPick,expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick;
 		
 		actBillNewReferencePick									=billRefNewReferenceTxt.getAttribute("value");
 		actBillAmtAdjAgainstNewRefInOtherVouchersPick			=amtAdjustedAgainstNewREfinOtherVouchers.getText();
 		actBillTransactionCurrencyPick							=transactionCurency.getText();
 		actBillBaseCurrencyPick									=baseCurrency.getText();
 		actBillLocalCurrencyPick								=localCurrencyDhs.getText();
 		
 		actBillBalanceNewRefAmountPick							=balanceNewReferenceAmt.getText();
 		
 		actBillBreakUpByTagDepartmentPick						=breakUpByTagDepartment.getText();
 		actBillBreakUpByTagBaseCurrencyPick						=breakUpByTagBaseCurrency.getText();
 		actBillBreakUpByTagBillCurrencyPick						=breakUpByTagBillCurrency.getText();
 		
 		actBillBreakUpByTagLocalCurrencyPick					=breakUpByTagBaseLocalCurrency.getText();
 		actBillAmtAdjustedInTransactionCurrencyPick				=billRefAdjustAmountInTransCurency.getText();
 		actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	=billRefBalanceAmountAdjustInTrnasCurrency.getText();
 		
 		
 		expBillNewReferencePick									="50.00";
 		expBillAmtAdjAgainstNewRefInOtherVouchersPick			="0.00";
 		expBillTransactionCurrencyPick							="50.00";
 		expBillBaseCurrencyPick									="50.00";
 		expBillLocalCurrencyPick								="3.50";
 		
 		expBillBalanceNewRefAmountPick							="50.00";
 		
 		expBillBreakUpByTagDepartmentPick						="INDIA";
 		expBillBreakUpByTagBillCurrencyPick						="50";
 		expBillBreakUpByTagBaseCurrencyPick						="50.00";
 		
 		
 		expBillBreakUpByTagLocalCurrencyPick					="3.50";
 		expBillAmtAdjustedInTransactionCurrencyPick				="50";
 		expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	="0.00";

 		System.out.println("actBillNewReferencePick 								: "+actBillNewReferencePick									+ " Value Expected : "+expBillNewReferencePick);
 		System.out.println("actBillAmtAdjAgainstNewRefInOtherVouchersPick			: " + actBillAmtAdjAgainstNewRefInOtherVouchersPick			+ "	Value Expected : "+expBillAmtAdjAgainstNewRefInOtherVouchersPick);
 		System.out.println("actBillTransactionCurrencyPick							: "+ actBillTransactionCurrencyPick							+ " Value Expected : "+expBillTransactionCurrencyPick);
 		System.out.println("actBillBaseCurrencyPick									: "+ actBillBaseCurrencyPick								+ " Value Expected : "+expBillBaseCurrencyPick);
 		System.out.println("actBillLocalCurrencyPick								: "+ actBillLocalCurrencyPick								+ " Value Expected : "+expBillLocalCurrencyPick);
 		System.out.println("actBillBalanceNewRefAmountPick							: "+ actBillBalanceNewRefAmountPick							+ " Value Expected : "+expBillBalanceNewRefAmountPick);
        System.out.println("actBillBreakUpByTagDepartmentPick						: "+ actBillBreakUpByTagDepartmentPick						+ " Value Expected : "+expBillBreakUpByTagDepartmentPick);
 		System.out.println("actBillBreakUpByTagBaseCurrencyPick						: "+ actBillBreakUpByTagBaseCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagBaseCurrencyPick);
 		System.out.println("actBillBreakUpByTagBillCurrencyPick						: "+ actBillBreakUpByTagBillCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagBillCurrencyPick);
 		System.out.println("actBillBreakUpByTagLocalCurrencyPick					: "+ actBillBreakUpByTagLocalCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagLocalCurrencyPick);
 		System.out.println("actBillAmtAdjustedInTransactionCurrencyPick				: "+ actBillAmtAdjustedInTransactionCurrencyPick			+ " Value Expected : "+expBillAmtAdjustedInTransactionCurrencyPick);
 		System.out.println("actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick  : "+ actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	+ " Value Expected : "+expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick);


 			    
 		Thread.sleep(2000);
 		
 	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
 	    Bill_OkBtn.click();
	   
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	    String docno=documentNumberTxt.getAttribute("value");
	    
	    boolean savingMessage=checkVoucherSavingMessage(docno);
		
		
		System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
		
		if(savingMessage==true  &&
				
		        actBillNewReference.equalsIgnoreCase(expBillNewReference) &&
 				actBillAmtAdjAgainstNewRefInOtherVouchers.equalsIgnoreCase(expBillAmtAdjAgainstNewRefInOtherVouchers) &&
 				actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 				
 				actBillBaseCurrency.equalsIgnoreCase(actBillBaseCurrency) &&
 				actBillLocalCurrency.equalsIgnoreCase(actBillLocalCurrency) &&
 				actBillBalanceNewRefAmount.equalsIgnoreCase(actBillBalanceNewRefAmount) &&
 				actBillBreakUpByTagDepartment.equalsIgnoreCase(actBillBreakUpByTagDepartment) &&
 				actBillBreakUpByTagBaseCurrency.equalsIgnoreCase(actBillBreakUpByTagBaseCurrency) &&
 				actBillBreakUpByTagBillCurrency.equalsIgnoreCase(actBillBreakUpByTagBillCurrency) &&
 				actBillBreakUpByTagLocalCurrency.equalsIgnoreCase(actBillBreakUpByTagLocalCurrency) &&
 				actBillAmtAdjustedInTransactionCurrency.equalsIgnoreCase(actBillAmtAdjustedInTransactionCurrency) &&
 				actBillBalanceAmtToBeAdjustedInTransactionCurrency.equalsIgnoreCase(actBillBalanceAmtToBeAdjustedInTransactionCurrency) &&
		
 				
 				actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) &&
 				actBillAmtAdjAgainstNewRefInOtherVouchersPick.equalsIgnoreCase(expBillAmtAdjAgainstNewRefInOtherVouchersPick) &&
 				actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) &&
 				actBillBaseCurrencyPick.equalsIgnoreCase(actBillBaseCurrencyPick) &&
 				actBillLocalCurrencyPick.equalsIgnoreCase(actBillLocalCurrencyPick) &&
 				actBillBalanceNewRefAmountPick.equalsIgnoreCase(actBillBalanceNewRefAmountPick) &&
 				actBillBreakUpByTagDepartmentPick.equalsIgnoreCase(actBillBreakUpByTagDepartmentPick) &&
 				actBillBreakUpByTagBaseCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagBaseCurrencyPick) &&
 				actBillBreakUpByTagBillCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagBillCurrencyPick) &&
 				actBillBreakUpByTagLocalCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagLocalCurrencyPick) &&
 				actBillAmtAdjustedInTransactionCurrencyPick.equalsIgnoreCase(actBillAmtAdjustedInTransactionCurrencyPick) &&
 				actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick.equalsIgnoreCase(actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick))
		{
		
			
			return true;
			
		}
		else
		{
			
			return false;
		}
	}
	
	
	
	
	public boolean checkSalesInvoiceSavedVoucherWithAllItemsOnPreviousOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
		finacinalsMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialTransactionSalesMenu));
		financialTransactionSalesMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoicesVoucher));
		salesInvoicesVoucher.click();
			
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		checkUserFriendlyMessage();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();
		
		boolean loading=checkLoadingMessage();
		
		System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
				
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_footerExpandBtn));
		new_footerExpandBtn.click();
		
		// Actual
		
		String actdocumentNumberTxt	=documentNumberTxt.getAttribute("value");
		
		String actsalesAccountTxt	=salesAccountTxt.getAttribute("value");
		String actcustomerAccountTxt=customerAccountTxt.getAttribute("value");
		
		String actItemR1			=select1stRow_1stColumn.getText();
		String actUnitsR1			=select1stRow_2ndColumn.getText();
		String actRDR1				=select1stRow_3rdColumn.getText();
		String actAqR1				=select1stRow_4thColumn.getText();
		String actFqR1				=select1stRow_5thColumn.getText();
		String actAvgRateR1			=select1stRow_6thColumn.getText();
		String actAvgRateOR1		=select1stRow_7thColumn.getText();
		String actQtyR1				=select1stRow_8thColumn.getText();
		String actLSOR1				=select1stRow_9thColumn.getText();
		String actQtyToReleaseR1	=select1stRow_10thColumn.getText();
		String actRateR1			=select1stRow_11thColumn.getText();
		String actGrossR1			=select1stRow_12thColumn.getText();
		String actBatchR1			=select1stRow_13thColumn.getText();
		
		String actItemR2			=select2ndRow_1stColumn.getText();
		String actUnitsR2			=select2ndRow_2ndColumn.getText();
		String actRDR2				=select2ndRow_3rdColumn.getText();
		String actAqR2				=select2ndRow_4thColumn.getText();
		String actFqR2				=select2ndRow_5thColumn.getText();
		String actAvgRateR2			=select2ndRow_6thColumn.getText();
		String actAvgRateOR2		=select2ndRow_7thColumn.getText();
		String actQtyR2				=select2ndRow_8thColumn.getText();
		String actLSOR2				=select2ndRow_9thColumn.getText();
		String actQtyToReleaseR2	=select2ndRow_10thColumn.getText();
		String actRateR2			=select2ndRow_11thColumn.getText();
		String actGrossR2			=select2ndRow_12thColumn.getText();
		String actBinR2				=select2ndRow_14thColumn.getText();
		
		String actItemR3			=select3rdRow_1stColumn.getText();
		String actUnitsR3			=select3rdRow_2ndColumn.getText();
		String actRDR3				=select3rdRow_3rdColumn.getText();
		String actAqR3				=select3rdRow_4thColumn.getText();
		String actFqR3				=select3rdRow_5thColumn.getText();
		String actAvgRateR3			=select3rdRow_6thColumn.getText();
		String actAvgRateOR3		=select3rdRow_7thColumn.getText();
		String actQtyR3				=select3rdRow_8thColumn.getText();
		String actLSOR3				=select3rdRow_9thColumn.getText();
		String actQtyToReleaseR3	=select3rdRow_10thColumn.getText();
		String actRateR3			=select3rdRow_11thColumn.getText();
		String actGrossR3			=select3rdRow_12thColumn.getText();
		String actRmaR3				=select3rdRow_15thColumn.getText();
		
		String actItemR4			=select4thRow_1stColumn.getText();
		String actUnitsR4			=select4thRow_2ndColumn.getText();
		String actRDR4				=select4thRow_3rdColumn.getText();
		String actAqR4				=select4thRow_4thColumn.getText();
		String actFqR4				=select4thRow_5thColumn.getText();
		String actAvgRateR4			=select4thRow_6thColumn.getText();
		String actAvgRateOR4		=select4thRow_7thColumn.getText();
		String actQtyR4				=select4thRow_8thColumn.getText();
		String actLSOR4				=select4thRow_9thColumn.getText();
		String actQtyToReleaseR4	=select4thRow_10thColumn.getText();
		String actRateR4			=select4thRow_11thColumn.getText();
		String actGrossR4			=select4thRow_12thColumn.getText();
		
		String actItemR5			=select5thRow_1stColumn.getText();
		String actUnitsR5			=select5thRow_2ndColumn.getText();
		String actRDR5				=select5thRow_3rdColumn.getText();
		String actAqR5				=select5thRow_4thColumn.getText();
		String actFqR5				=select5thRow_5thColumn.getText();
		String actAvgRateR5			=select5thRow_6thColumn.getText();
		String actAvgRateOR5		=select5thRow_7thColumn.getText();
		String actQtyR5				=select5thRow_8thColumn.getText();
		String actLSOR5				=select5thRow_9thColumn.getText();
		String actQtyToReleaseR5	=select5thRow_10thColumn.getText();
		String actRateR5			=select5thRow_11thColumn.getText();
		String actGrossR5			=select5thRow_12thColumn.getText();
		String actBatchR5			=select5thRow_13thColumn.getText();
		
		
		
		String actso_footerQty		=so_footerQty.getText();
		String actso_footerRDField	=so_footerRDField.getText();
		String actso_footerAQ		=so_footerAQ.getText();
		String actso_footerFQ		=so_footerFQ.getText();
		String actsi_footerGross	=si_footerGross.getText();
		String actso_footerNet		=so_footerNet.getText();
		String actsi_AvgRate		=si_AvgRate.getText();
		String actsi_AvgRateO		=si_AvgRateO.getText();
		
		
		// Expected
		
		String expdocumentNumberTxt	="5";
		
		String expsalesAccountTxt	="Sales - Computers";
		String expcustomerAccountTxt="customer A";
		
		String expItemR1			="BATCH WA ITEM";
		String expUnitsR1			="Pcs";
		String expRDR1				="0.00";
		String expAqR1				="1.00";
		String expFqR1				="0.00";
		String expAvgRateR1			="51.66";
		String expAvgRateOR1		="51.66";
		String expQtyR1				="1.00";
		String expLSOR1				="SalOrd:11";
		String expQtyToReleaseR1	="1.00";
		String expRateR1			="10.00";
		String expGrossR1			="10.00";
		String expBatchR1			="OSHWA1";
		
		String expItemR2			="BIN FINISHED GOODS ITEM";
		String expUnitsR2			="Pcs";
		String expRDR2				="0.00";
		String expAqR2				="1.00";
		String expFqR2				="0.00";
		String expAvgRateR2			="1.63";
		String expAvgRateOR2		="1.63";
		String expQtyR2				="1.00";
		String expLSOR2				="SalOrd:11";
		String expQtyToReleaseR2	="1.00";
		String expRateR2			="10.00";
		String expGrossR2			="10.00";
		String expBinR2				="Bin Update";
		
		String expItemR3			="RMA RITEM";
		String expUnitsR3			="Pcs";
		String expRDR3				="0.00";
		String expAqR3				="1.00";
		String expFqR3				="0.00";
		String expAvgRateR3			="19.58";
		String expAvgRateOR3		="19.58";
		String expQtyR3				="1.00";
		String expLSOR3				="SalOrd:11";
		String expQtyToReleaseR3	="1.00";
		String expRateR3			="10.00";
		String expGrossR3			="10.00";
		String expRmaR3				="Hyd@OS1";
		
		String expItemR4			="STOCK ITEM";
		String expUnitsR4			="Pcs";
		String expRDR4				="0.00";
		String expAqR4				="1.00";
		String expFqR4				="0.00";
		String expAvgRateR4			="4.08";
		String expAvgRateOR4		="4.08";
		String expQtyR4				="1.00";
		String expLSOR4				="SalOrd:11";
		String expQtyToReleaseR4	="1.00";
		String expRateR4			="10.00";
		String expGrossR4			="10.00";
		
		String expItemR5			="BATCH BR ITEM";
		String expUnitsR5			="Pcs";
		String expRDR5				="0.00";
		String expAqR5				="1.00";
		String expFqR5				="0.00";
		String expAvgRateR5			="0.83";
		String expAvgRateOR5		="0.83";
		String expQtyR5				="1.00";
		String expLSOR5				="SalOrd:11";
		String expQtyToReleaseR5	="1.00";
		String expRateR5			="10.00";
		String expGrossR5			="10.00";
		String expBatchR5			="OSHBR1";
		
		
		
		String expso_footerQty		="5.00";
		String expso_footerRDField	="0.00";
		String expso_footerAQ		="5.00";
		String expso_footerFQ		="0.00";
		String expsi_footerGross	="50.00";
		String expso_footerNet		="50.00";
		String expsi_AvgRate		="77.78";
		String expsi_AvgRateO		="77.78";
		
		System.out.println("********************************** checkSalesInvoiceSavedVoucherWithAllItemsOnPreviousOption  *************************************");
		
		System.out.println("documentNumberTxt 		: "+actdocumentNumberTxt	+ " Value Expected : "+expdocumentNumberTxt);
 		System.out.println("customerAccountTxt		: " + actcustomerAccountTxt	+ "	Value Expected : "+expcustomerAccountTxt);
 			
 		System.out.println("ItemR1					: " + actItemR1				+ "	Value Expected : "+expItemR1);
 		System.out.println("UnitsR1					: " + actUnitsR1			+ "	Value Expected : "+expUnitsR1);
 		System.out.println("RDR1					: " + actRDR1				+ "	Value Expected : "+expRDR1);
 		System.out.println("AqR1					: " + actAqR1				+ "	Value Expected : "+expAqR1);
 		System.out.println("FqR1					: " + actFqR1				+ "	Value Expected : "+expFqR1);
 		System.out.println("AvgRateR1				: " + actAvgRateR1			+ "	Value Expected : "+expAvgRateR1);
 		System.out.println("AvgRateOR1				: " + actAvgRateOR1			+ "	Value Expected : "+expAvgRateOR1);
 		System.out.println("QtyR1					: " + actQtyR1				+ "	Value Expected : "+expQtyR1);
 		System.out.println("LSOR1					: " + actLSOR1				+ "	Value Expected : "+expLSOR1);
 		System.out.println("QtyToReleaseR1			: " + actQtyToReleaseR1		+ "	Value Expected : "+expQtyToReleaseR1);
 		System.out.println("RateR1					: " + actRateR1				+ "	Value Expected : "+expRateR1);
 		System.out.println("GrossR1					: " + actGrossR1			+ "	Value Expected : "+expGrossR1);
 		System.out.println("BatchR1					: " + actBatchR1			+ "	Value Expected : "+expBatchR1);
 		
 		System.out.println("ItemR2					: " + actItemR2				+ "	Value Expected : "+expItemR2);
 		System.out.println("UnitsR2					: " + actUnitsR2			+ "	Value Expected : "+expUnitsR2);
 		System.out.println("RDR2					: " + actRDR2				+ "	Value Expected : "+expRDR2);
 		System.out.println("AqR2					: " + actAqR2				+ "	Value Expected : "+expAqR2);
 		System.out.println("FqR2					: " + actFqR2				+ "	Value Expected : "+expFqR2);
 		System.out.println("AvgRateR2				: " + actAvgRateR2			+ "	Value Expected : "+expAvgRateR2);
 		System.out.println("AvgRateOR2				: " + actAvgRateOR2			+ "	Value Expected : "+expAvgRateOR2);
 		System.out.println("QtyR2					: " + actQtyR2				+ "	Value Expected : "+expQtyR2);
 		System.out.println("LSOR2					: " + actLSOR2				+ "	Value Expected : "+expLSOR2);
 		System.out.println("QtyToReleaseR2			: " + actQtyToReleaseR2		+ "	Value Expected : "+expQtyToReleaseR2);
 		System.out.println("RateR2					: " + actRateR2				+ "	Value Expected : "+expRateR2);
 		System.out.println("GrossR2					: " + actGrossR2			+ "	Value Expected : "+expGrossR2);
 		System.out.println("BinR2					: " + actBinR2			    + "	Value Expected : "+expBinR2);
 		
 		System.out.println("ItemR3					: " + actItemR3				+ "	Value Expected : "+expItemR3);
 		System.out.println("UnitsR3					: " + actUnitsR3			+ "	Value Expected : "+expUnitsR3);
 		System.out.println("RDR3					: " + actRDR3				+ "	Value Expected : "+expRDR3);
 		System.out.println("AqR3					: " + actAqR3				+ "	Value Expected : "+expAqR3);
 		System.out.println("FqR3					: " + actFqR3				+ "	Value Expected : "+expFqR3);
 		System.out.println("AvgRateR3				: " + actAvgRateR3			+ "	Value Expected : "+expAvgRateR3);
 		System.out.println("AvgRateOR3				: " + actAvgRateOR3			+ "	Value Expected : "+expAvgRateOR3);
 		System.out.println("QtyR3					: " + actQtyR3				+ "	Value Expected : "+expQtyR3);
 		System.out.println("LSOR3					: " + actLSOR3				+ "	Value Expected : "+expLSOR3);
 		System.out.println("QtyToReleaseR3			: " + actQtyToReleaseR3		+ "	Value Expected : "+expQtyToReleaseR3);
 		System.out.println("RateR3					: " + actRateR3				+ "	Value Expected : "+expRateR3);
 		System.out.println("GrossR3					: " + actGrossR3			+ "	Value Expected : "+expGrossR3);
 		System.out.println("RmaR3					: " + actRmaR3			    + "	Value Expected : "+expRmaR3);
 		
 		System.out.println("ItemR4					: " + actItemR4				+ "	Value Expected : "+expItemR4);
 		System.out.println("UnitsR4					: " + actUnitsR4			+ "	Value Expected : "+expUnitsR4);
 		System.out.println("RDR4					: " + actRDR4				+ "	Value Expected : "+expRDR4);
 		System.out.println("AqR4					: " + actAqR4				+ "	Value Expected : "+expAqR4);
 		System.out.println("FqR4					: " + actFqR4				+ "	Value Expected : "+expFqR4);
 		System.out.println("AvgRateR4				: " + actAvgRateR4			+ "	Value Expected : "+expAvgRateR4);
 		System.out.println("AvgRateOR4				: " + actAvgRateOR4			+ "	Value Expected : "+expAvgRateOR4);
 		System.out.println("QtyR4					: " + actQtyR4				+ "	Value Expected : "+expQtyR4);
 		System.out.println("LSOR4					: " + actLSOR4				+ "	Value Expected : "+expLSOR4);
 		System.out.println("QtyToReleaseR4			: " + actQtyToReleaseR4		+ "	Value Expected : "+expQtyToReleaseR4);
 		System.out.println("RateR4					: " + actRateR4				+ "	Value Expected : "+expRateR4);
 		System.out.println("GrossR4					: " + actGrossR4			+ "	Value Expected : "+expGrossR4);
 		
 		System.out.println("ItemR5					: " + actItemR5				+ "	Value Expected : "+expItemR5);
 		System.out.println("UnitsR5					: " + actUnitsR5			+ "	Value Expected : "+expUnitsR5);
 		System.out.println("RDR5					: " + actRDR5				+ "	Value Expected : "+expRDR5);
 		System.out.println("AqR5					: " + actAqR5				+ "	Value Expected : "+expAqR5);
 		System.out.println("FqR5					: " + actFqR5				+ "	Value Expected : "+expFqR5);
 		System.out.println("AvgRateR5				: " + actAvgRateR5			+ "	Value Expected : "+expAvgRateR5);
 		System.out.println("AvgRateOR5				: " + actAvgRateOR5			+ "	Value Expected : "+expAvgRateOR5);
 		System.out.println("QtyR5					: " + actQtyR5				+ "	Value Expected : "+expQtyR5);
 		System.out.println("LSOR5					: " + actLSOR5				+ "	Value Expected : "+expLSOR5);
 		System.out.println("QtyToReleaseR5			: " + actQtyToReleaseR5		+ "	Value Expected : "+expQtyToReleaseR5);
 		System.out.println("RateR5					: " + actRateR5				+ "	Value Expected : "+expRateR5);
 		System.out.println("GrossR5					: " + actGrossR5			+ "	Value Expected : "+expGrossR5);
 		System.out.println("BatchR5					: " + actBatchR5			+ "	Value Expected : "+expBatchR5);
 		
 		System.out.println("so_footerQty			: " + actso_footerQty		+ "	Value Expected : "+expso_footerQty);
 		System.out.println("so_footerRDField		: " + actso_footerRDField	+ "	Value Expected : "+expso_footerRDField);
 		System.out.println("so_footerAQ				: " + actso_footerAQ		+ "	Value Expected : "+expso_footerAQ);
 		System.out.println("so_footerFQ				: " + actso_footerFQ		+ "	Value Expected : "+expso_footerFQ);
 		System.out.println("si_footerGross			: " + actsi_footerGross		+ "	Value Expected : "+expsi_footerGross);
 		System.out.println("so_footerNet			: " + actso_footerNet		+ "	Value Expected : "+expso_footerNet);
 		System.out.println("si_AvgRate				: " + actsi_AvgRate			+ "	Value Expected : "+expsi_AvgRate);
 		System.out.println("si_AvgRateO				: " + actsi_AvgRateO		+ "	Value Expected : "+expsi_AvgRateO);
 		
		
		if(actdocumentNumberTxt.equalsIgnoreCase(expdocumentNumberTxt) && actcustomerAccountTxt.equalsIgnoreCase(expcustomerAccountTxt)
				
				&& actItemR1.equalsIgnoreCase(expItemR1) && actUnitsR1.equalsIgnoreCase(expUnitsR1) && actRDR1.equalsIgnoreCase(expRDR1)
				&& actAqR1.equalsIgnoreCase(expAqR1) && actFqR1.equalsIgnoreCase(expFqR1) && actAvgRateR1.equalsIgnoreCase(expAvgRateR1)
				&& actAvgRateOR1.equalsIgnoreCase(expAvgRateOR1) && actQtyR1.equalsIgnoreCase(expQtyR1) && actLSOR1.equalsIgnoreCase(expLSOR1)
				&& actQtyToReleaseR1.equalsIgnoreCase(expQtyToReleaseR1) && actRateR1.equalsIgnoreCase(expRateR1) 
				&& actGrossR1.equalsIgnoreCase(expGrossR1) && actBatchR1.equalsIgnoreCase(expBatchR1)
				
				&& actItemR2.equalsIgnoreCase(expItemR2) && actUnitsR2.equalsIgnoreCase(expUnitsR2) && actRDR2.equalsIgnoreCase(expRDR2)
				&& actAqR2.equalsIgnoreCase(expAqR2) && actFqR2.equalsIgnoreCase(expFqR2) && actAvgRateR2.equalsIgnoreCase(expAvgRateR2)
				&& actAvgRateOR2.equalsIgnoreCase(expAvgRateOR2) && actQtyR2.equalsIgnoreCase(expQtyR2) && actLSOR2.equalsIgnoreCase(expLSOR2)
				&& actQtyToReleaseR2.equalsIgnoreCase(expQtyToReleaseR2) && actRateR2.equalsIgnoreCase(expRateR2) 
				&& actGrossR2.equalsIgnoreCase(expGrossR2) && actBinR2.equalsIgnoreCase(expBinR2)
				
				&& actItemR3.equalsIgnoreCase(expItemR3) && actUnitsR3.equalsIgnoreCase(expUnitsR3) && actRDR3.equalsIgnoreCase(expRDR3)
				&& actAqR3.equalsIgnoreCase(expAqR3) && actFqR3.equalsIgnoreCase(expFqR3) && actAvgRateR3.equalsIgnoreCase(expAvgRateR3)
				&& actAvgRateOR3.equalsIgnoreCase(expAvgRateOR3) && actQtyR3.equalsIgnoreCase(expQtyR3) && actLSOR3.equalsIgnoreCase(expLSOR3)
				&& actQtyToReleaseR3.equalsIgnoreCase(expQtyToReleaseR3) && actRateR3.equalsIgnoreCase(expRateR3) 
				&& actGrossR3.equalsIgnoreCase(expGrossR3) && actRmaR3.equalsIgnoreCase(expRmaR3)
				
				&& actItemR4.equalsIgnoreCase(expItemR4) && actUnitsR4.equalsIgnoreCase(expUnitsR4) && actRDR4.equalsIgnoreCase(expRDR4)
				&& actAqR4.equalsIgnoreCase(expAqR4) && actFqR4.equalsIgnoreCase(expFqR4) && actAvgRateR4.equalsIgnoreCase(expAvgRateR4)
				&& actAvgRateOR4.equalsIgnoreCase(expAvgRateOR4) && actQtyR4.equalsIgnoreCase(expQtyR4) && actLSOR4.equalsIgnoreCase(expLSOR4)
				&& actQtyToReleaseR4.equalsIgnoreCase(expQtyToReleaseR4) && actRateR4.equalsIgnoreCase(expRateR4) 
				&& actGrossR4.equalsIgnoreCase(expGrossR4)
				
				&& actItemR5.equalsIgnoreCase(expItemR5) && actUnitsR5.equalsIgnoreCase(expUnitsR5) && actRDR5.equalsIgnoreCase(expRDR5)
				&& actAqR5.equalsIgnoreCase(expAqR5) && actFqR5.equalsIgnoreCase(expFqR5) && actAvgRateR5.equalsIgnoreCase(expAvgRateR5)
				&& actAvgRateOR5.equalsIgnoreCase(expAvgRateOR5) && actQtyR5.equalsIgnoreCase(expQtyR5) && actLSOR5.equalsIgnoreCase(expLSOR5)
				&& actQtyToReleaseR5.equalsIgnoreCase(expQtyToReleaseR5) && actRateR5.equalsIgnoreCase(expRateR5) 
				&& actGrossR5.equalsIgnoreCase(expGrossR5) && actBatchR5.equalsIgnoreCase(expBatchR5)
				
				
				&& actso_footerQty.equalsIgnoreCase(expso_footerQty) && actso_footerRDField.equalsIgnoreCase(expso_footerRDField)
				&& actso_footerAQ.equalsIgnoreCase(expso_footerAQ) && actso_footerFQ.equalsIgnoreCase(expso_footerFQ)
				&& actsi_footerGross.equalsIgnoreCase(expsi_footerGross) && actso_footerNet.equalsIgnoreCase(expso_footerNet)
				&& actsi_AvgRate.equalsIgnoreCase(expsi_AvgRate) && actsi_AvgRateO.equalsIgnoreCase(expsi_AvgRateO))
		{
			System.out.println("Test Pass : Voucher Data is Correct");
			
			new_footerMinimizeBtn.click();
			
			return true;
		}
		else
		{
			System.out.println("Test Fail : Voucher Data is NOT Correct");
			
			new_footerMinimizeBtn.click();
			
			return false;
		}
	}
	
	
	
	public boolean checkEntryPageSuspendOptionInSalesInvoiceVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(3000);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	    String docno=documentNumberTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();
		
		boolean savingMessage=checkVoucherSavingMessage(docno);
			
		System.out.println("************************************* checkEntryPageSuspendOptionInSalesInvoiceVoucher  *********************************");
			
		System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
		
		
		
		if(savingMessage==true)
		{
			System.out.println("Test Pass : Error Message is Displayed ");
			excelReader.setCellData(xlfile, xlSheetName, 11, 9, resPass);
					
			return true;
		}
		
		else
		{
			System.out.println("Test Fail :  Error Message is  not Displayed ");
		     excelReader.setCellData(xlfile, xlSheetName, 11, 9, resFail);
			
			return false;
		}
	}
	


	
	public boolean checkSuspendStatusInEntryPageAndHomePageOnPreviousOptionSalesInvoice() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();
		
		boolean loading=checkLoadingMessage();
		
		System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
		
		Thread.sleep(5000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoPanelStatus));
		
		String actinfoPanelStatusEntryPage	=infoPanelStatus.getText();
		String expinfoPanelStatusEntryPage	="Suspended";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(suspendStatusRow1));
		
		String actsuspendStatusRow1HomePage	=suspendStatusRow1.getText();
		String expsuspendStatusRow1HomePage	="TRUE";
		
		System.out.println("************************************* checkSuspendStatusInEntryPageAndHomePageOnPreviousOptionSalesInvoice  *********************************");
		
		System.out.println("infoPanelStatusEntryPage  	:  "+actinfoPanelStatusEntryPage 	+" value Expected : "+expinfoPanelStatusEntryPage);
		System.out.println("suspendStatusRow1HomePage  	:  "+actsuspendStatusRow1HomePage 	+" value Expected : "+expsuspendStatusRow1HomePage);
		
		if(actinfoPanelStatusEntryPage.equalsIgnoreCase(expinfoPanelStatusEntryPage) && actsuspendStatusRow1HomePage.equalsIgnoreCase(expsuspendStatusRow1HomePage))
		{
			System.out.println("Test Pass : Suspended Succesfully");
			return true;
		}
		else
		{
			System.out.println("Test Fail : NOT Suspended Succesfully");
			return false;
		}
		
	}
	
	
	
	

	public boolean checkSalesInvoiceBatchWaItemReservedQtyAndQtytoReleaseOnSaveAfterSuspendingReleaseVoucherWithReserved() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		/*Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
		finacinalsMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialTransactionSalesMenu));
		financialTransactionSalesMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoicesVoucher));
		salesInvoicesVoucher.click();*/
			
		Thread.sleep(5000);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		checkUserFriendlyMessage();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAccountTxt));
		salesAccountTxt.click();
		salesAccountTxt.sendKeys(Keys.SPACE);
		
		int count=salesAccountListCount.size();
		
		System.err.println(count);
		
		for(int i=0 ; i < count ;i++)
		{
			String data=salesAccountListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("Sales - Computers"))
			{
				salesAccountListCount.get(i).click();
				
				break;
			}
		}
		
		salesAccountTxt.sendKeys(Keys.TAB);
		
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		 customerAccountTxt.click();
		 customerAccountTxt.sendKeys(Keys.SPACE);
		 
		 int customercount=customerAccountListCount.size();
		 
		 System.err.println(customercount);
		 
		 for(int i=0 ; i < customercount ;i++)
		 {
			 String data=customerAccountListCount.get(i).getAttribute("data-name");
			 
			 if(data.equalsIgnoreCase("Customer A"))
			 {
				 customerAccountListCount.get(i).click();
				 
				 break;
			 }
		 }
			
		 customerAccountTxt.sendKeys(Keys.TAB);
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.click();
		departmentTxt.sendKeys(Keys.SPACE);
			
		int departmentcount=departmentListCount.size();
		
		System.err.println(departmentcount);
			
		for(int i=0 ; i < departmentcount ;i++)
		{
			String data=departmentListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("INDIA"))
			{
				departmentListCount.get(i).click();
				
				break;
			}
		}
			
		departmentTxt.sendKeys(Keys.TAB);	
		
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
		wareHouseTxt.click();
		wareHouseTxt.sendKeys(Keys.SPACE);
			
		int warehousecount=wareHouseListCount.size();
		
		System.err.println(warehousecount);
			
		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=wareHouseListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("SECUNDERABAD"))
			{
				wareHouseListCount.get(i).click();
				
				break;
			}
		}
			
		wareHouseTxt.sendKeys(Keys.TAB);
		
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("BATCH WA ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.sendKeys("1");
		enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.sendKeys("0");
		enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
		enter_AvgRate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
		enter_AvgRateo.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
	
		Thread.sleep(3000);
		
		List<WebElement> rowCountInLinkScreen1=LinkRowCount;
		
		int rowCount1=rowCountInLinkScreen1.size();
			
		System.out.println(rowCount1);
	     
		for (int i = 1; i <= rowCount1; i++) 
		{
			WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
			
			WebElement itemName=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[9]"));
	    	 
			String actvoucheno=voucherno.getText();
	    	 
			String actitemName=itemName.getText();
	    	 
			System.out.println(actvoucheno);
			
			System.out.println(actitemName);
	    	 
			if(actvoucheno.equalsIgnoreCase("SalOrd:11") && actitemName.equalsIgnoreCase("BATCH WA ITEM"))
			{
				Thread.sleep(2000);
				WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
				radioBtn.click();
	    		 
				break;
			}
		}
			
		Thread.sleep(2000);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
		workFlowOkBtn.click();
	     
		Thread.sleep(2000);
	     
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
	     
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);
	     
		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(3000);
		
		String docno=documentNumberTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
	    billRefPickIcon.click();

		    
 		Thread.sleep(2000);
 		
 	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
 	    Bill_OkBtn.click();
 	    
 	    boolean savingMessage=checkVoucherSavingMessage(docno);
 	    
 	    System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");

 	    Thread.sleep(3000);
 	   
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();
		
		boolean loading=checkLoadingMessage();
		
		System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
				
		Thread.sleep(5000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();
		
		// Actual
		
		String actdocumentNumberTxt	=documentNumberTxt.getAttribute("value");
		
		String actsalesAccountTxt	=salesAccountTxt.getAttribute("value");
		String actcustomerAccountTxt=customerAccountTxt.getAttribute("value");
		
		String actItemR1			=select1stRow_1stColumn.getText();
		String actUnitsR1			=select1stRow_2ndColumn.getText();
		String actRDR1				=select1stRow_3rdColumn.getText();
		String actAqR1				=select1stRow_4thColumn.getText();
		String actFqR1				=select1stRow_5thColumn.getText();
		String actAvgRateR1			=select1stRow_6thColumn.getText();
		String actAvgRateOR1		=select1stRow_7thColumn.getText();
		String actQtyR1				=select1stRow_8thColumn.getText();
		String actLSOR1				=select1stRow_9thColumn.getText();
		String actQtyToReleaseR1	=select1stRow_10thColumn.getText();
		String actRateR1			=select1stRow_11thColumn.getText();
		String actGrossR1			=select1stRow_12thColumn.getText();
		String actBatchR1			=select1stRow_13thColumn.getText();
		
		
		
		// Expected
		
		String expdocumentNumberTxt	="6";
		
		String expsalesAccountTxt	="Sales - Computers";
		String expcustomerAccountTxt="customer A";
		
		String expItemR1			="BATCH WA ITEM";
		String expUnitsR1			="Pcs";
		String expRDR1				="0.00";
		String expAqR1				="1.00";
		String expFqR1				="0.00";
		String expAvgRateR1			="51.66";
		String expAvgRateOR1		="51.66";
		String expQtyR1				="1.00";
		String expLSOR1				="SalOrd:11";
		String expQtyToReleaseR1	="1.00";
		String expRateR1			="10.00";
		String expGrossR1			="10.00";
		String expBatchR1			="OSHWA1";
		
		
		System.out.println("********************************** checkSalesInvoiceBatchWaItemReservedQtyAndQtytoReleaseOnSaveAfterSuspendingReleaseVoucherWithReserved  *************************************");
		
		System.out.println("documentNumberTxt 		: "+actdocumentNumberTxt	+ " Value Expected : "+expdocumentNumberTxt);
 		System.out.println("customerAccountTxt		: " + actcustomerAccountTxt	+ "	Value Expected : "+expcustomerAccountTxt);
 			
 		System.out.println("ItemR1					: " + actItemR1				+ "	Value Expected : "+expItemR1);
 		System.out.println("UnitsR1					: " + actUnitsR1			+ "	Value Expected : "+expUnitsR1);
 		System.out.println("RDR1					: " + actRDR1				+ "	Value Expected : "+expRDR1);
 		System.out.println("AqR1					: " + actAqR1				+ "	Value Expected : "+expAqR1);
 		System.out.println("FqR1					: " + actFqR1				+ "	Value Expected : "+expFqR1);
 		System.out.println("AvgRateR1				: " + actAvgRateR1			+ "	Value Expected : "+expAvgRateR1);
 		System.out.println("AvgRateOR1				: " + actAvgRateOR1			+ "	Value Expected : "+expAvgRateOR1);
 		System.out.println("QtyR1					: " + actQtyR1				+ "	Value Expected : "+expQtyR1);
 		System.out.println("LSOR1					: " + actLSOR1				+ "	Value Expected : "+expLSOR1);
 		System.out.println("QtyToReleaseR1			: " + actQtyToReleaseR1		+ "	Value Expected : "+expQtyToReleaseR1);
 		System.out.println("RateR1					: " + actRateR1				+ "	Value Expected : "+expRateR1);
 		System.out.println("GrossR1					: " + actGrossR1			+ "	Value Expected : "+expGrossR1);
 		System.out.println("BatchR1					: " + actBatchR1			+ "	Value Expected : "+expBatchR1);
 		
		
		if(actdocumentNumberTxt.equalsIgnoreCase(expdocumentNumberTxt) && actcustomerAccountTxt.equalsIgnoreCase(expcustomerAccountTxt)
				
				&& actItemR1.equalsIgnoreCase(expItemR1) && actUnitsR1.equalsIgnoreCase(expUnitsR1) && actRDR1.equalsIgnoreCase(expRDR1)
				&& actAqR1.equalsIgnoreCase(expAqR1) && actFqR1.equalsIgnoreCase(expFqR1) && actAvgRateR1.equalsIgnoreCase(expAvgRateR1)
				&& actAvgRateOR1.equalsIgnoreCase(expAvgRateOR1) && actQtyR1.equalsIgnoreCase(expQtyR1) && actLSOR1.equalsIgnoreCase(expLSOR1)
				&& actQtyToReleaseR1.equalsIgnoreCase(expQtyToReleaseR1) && actRateR1.equalsIgnoreCase(expRateR1) 
				&& actGrossR1.equalsIgnoreCase(expGrossR1) && actBatchR1.equalsIgnoreCase(expBatchR1))
		{
			System.out.println("Test Pass : Voucher Data is Correct");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));
			new_DeleteBtn.click();
			
			getWaitForAlert();
			getAlert().accept();
			
			return true;
		}
		else
		{
			System.out.println("Test Fail : Voucher Data is NOT Correct");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));
			new_DeleteBtn.click();
			
			getWaitForAlert();
			getAlert().accept();
			
			return false;
		}
	}

	

	public boolean checkSalesInvoiceBinFinishedGoodsItemReservedQtyAndQtytoReleaseOnSaveAfterSuspendingReleaseVoucherWithReserved() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		/*Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
		finacinalsMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialTransactionSalesMenu));
		financialTransactionSalesMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoicesVoucher));
		salesInvoicesVoucher.click();
			
		Thread.sleep(5000);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		checkUserFriendlyMessage(); */
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAccountTxt));
		salesAccountTxt.click();
		salesAccountTxt.sendKeys(Keys.SPACE);
		
		int count=salesAccountListCount.size();
		
		System.err.println(count);
		
		for(int i=0 ; i < count ;i++)
		{
			String data=salesAccountListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("Sales - Computers"))
			{
				salesAccountListCount.get(i).click();
				
				break;
			}
		}
		
		salesAccountTxt.sendKeys(Keys.TAB);
		
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		 customerAccountTxt.click();
		 customerAccountTxt.sendKeys(Keys.SPACE);
		 
		 int customercount=customerAccountListCount.size();
		 
		 System.err.println(customercount);
		 
		 for(int i=0 ; i < customercount ;i++)
		 {
			 String data=customerAccountListCount.get(i).getAttribute("data-name");
			 
			 if(data.equalsIgnoreCase("Customer A"))
			 {
				 customerAccountListCount.get(i).click();
				 
				 break;
			 }
		 }
			
		 customerAccountTxt.sendKeys(Keys.TAB);
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.click();
		departmentTxt.sendKeys(Keys.SPACE);
			
		int departmentcount=departmentListCount.size();
		
		System.err.println(departmentcount);
			
		for(int i=0 ; i < departmentcount ;i++)
		{
			String data=departmentListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("INDIA"))
			{
				departmentListCount.get(i).click();
				
				break;
			}
		}
			
		departmentTxt.sendKeys(Keys.TAB);	
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
		wareHouseTxt.click();
		wareHouseTxt.sendKeys(Keys.SPACE);
			
		int warehousecount=wareHouseListCount.size();
		
		System.err.println(warehousecount);
			
		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=wareHouseListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("SECUNDERABAD"))
			{
				wareHouseListCount.get(i).click();
				
				break;
			}
		}
			
		wareHouseTxt.sendKeys(Keys.TAB);
		
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("BIN FINISHED GOODS ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.sendKeys("1");
		enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.sendKeys("0");
		enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
		enter_AvgRate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
		enter_AvgRateo.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
	
		Thread.sleep(3000);
		
		List<WebElement> rowCountInLinkScreen1=LinkRowCount;
		
		int rowCount1=rowCountInLinkScreen1.size();
			
		System.out.println(rowCount1);
	     
		for (int i = 1; i <= rowCount1; i++) 
		{
			WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
			
			WebElement itemName=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[9]"));
	    	 
			String actvoucheno=voucherno.getText();
	    	 
			String actitemName=itemName.getText();
	    	 
			System.out.println(actvoucheno);
			
			System.out.println(actitemName);
	    	 
			if(actvoucheno.equalsIgnoreCase("SalOrd:11") && actitemName.equalsIgnoreCase("BIN FINISHED GOODS ITEM"))
			{
				Thread.sleep(2000);
				WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
				radioBtn.click();
	    		 
				break;
			}
		}
			
		Thread.sleep(2000);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
		workFlowOkBtn.click();
	     
		Thread.sleep(2000);
	     
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
	     
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);
	     
		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
		binAutoAllocateBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
		binOkBtn.click();
		
		Thread.sleep(3000);

		String docno=documentNumberTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
	    billRefPickIcon.click();

		    
 		Thread.sleep(2000);
 		
 	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
 	    Bill_OkBtn.click();
 	    
 	    boolean savingMessage=checkVoucherSavingMessage(docno);
 	    
 	    System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");

 	    Thread.sleep(3000);
 	   
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();
		
		boolean loading=checkLoadingMessage();
		
		System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
				
		Thread.sleep(5000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();
		
		// Actual
		
		String actdocumentNumberTxt	=documentNumberTxt.getAttribute("value");
		
		String actsalesAccountTxt	=salesAccountTxt.getAttribute("value");
		String actcustomerAccountTxt=customerAccountTxt.getAttribute("value");
		
		String actItemR1			=select1stRow_1stColumn.getText();
		String actUnitsR1			=select1stRow_2ndColumn.getText();
		String actRDR1				=select1stRow_3rdColumn.getText();
		String actAqR1				=select1stRow_4thColumn.getText();
		String actFqR1				=select1stRow_5thColumn.getText();
		String actAvgRateR1			=select1stRow_6thColumn.getText();
		String actAvgRateOR1		=select1stRow_7thColumn.getText();
		String actQtyR1				=select1stRow_8thColumn.getText();
		String actLSOR1				=select1stRow_9thColumn.getText();
		String actQtyToReleaseR1	=select1stRow_10thColumn.getText();
		String actRateR1			=select1stRow_11thColumn.getText();
		String actGrossR1			=select1stRow_12thColumn.getText();
		String actBinR1				=select1stRow_14thColumn.getText();
		
		
		
		// Expected
		
		String expdocumentNumberTxt	="6";
		
		String expsalesAccountTxt	="Sales - Computers";
		String expcustomerAccountTxt="customer A";
		
		String expItemR1			="BIN FINISHED GOODS ITEM";
		String expUnitsR1			="Pcs";
		String expRDR1				="0.00";
		String expAqR1				="1.00";
		String expFqR1				="0.00";
		String expAvgRateR1			="1.63";
		String expAvgRateOR1		="1.63";
		String expQtyR1				="1.00";
		String expLSOR1				="SalOrd:11";
		String expQtyToReleaseR1	="1.00";
		String expRateR1			="10.00";
		String expGrossR1			="10.00";
		String expBinR1				="Bin Update";
		
		
		System.out.println("********************************** checkSalesInvoiceBinFinishedGoodsItemReservedQtyAndQtytoReleaseOnSaveAfterSuspendingReleaseVoucherWithReserved  *************************************");
		
		System.out.println("documentNumberTxt 		: "+actdocumentNumberTxt	+ " Value Expected : "+expdocumentNumberTxt);
 		System.out.println("customerAccountTxt		: " + actcustomerAccountTxt	+ "	Value Expected : "+expcustomerAccountTxt);
 			
 		System.out.println("ItemR1					: " + actItemR1				+ "	Value Expected : "+expItemR1);
 		System.out.println("UnitsR1					: " + actUnitsR1			+ "	Value Expected : "+expUnitsR1);
 		System.out.println("RDR1					: " + actRDR1				+ "	Value Expected : "+expRDR1);
 		System.out.println("AqR1					: " + actAqR1				+ "	Value Expected : "+expAqR1);
 		System.out.println("FqR1					: " + actFqR1				+ "	Value Expected : "+expFqR1);
 		System.out.println("AvgRateR1				: " + actAvgRateR1			+ "	Value Expected : "+expAvgRateR1);
 		System.out.println("AvgRateOR1				: " + actAvgRateOR1			+ "	Value Expected : "+expAvgRateOR1);
 		System.out.println("QtyR1					: " + actQtyR1				+ "	Value Expected : "+expQtyR1);
 		System.out.println("LSOR1					: " + actLSOR1				+ "	Value Expected : "+expLSOR1);
 		System.out.println("QtyToReleaseR1			: " + actQtyToReleaseR1		+ "	Value Expected : "+expQtyToReleaseR1);
 		System.out.println("RateR1					: " + actRateR1				+ "	Value Expected : "+expRateR1);
 		System.out.println("GrossR1					: " + actGrossR1			+ "	Value Expected : "+expGrossR1);
 		System.out.println("BinR1					: " + actBinR1				+ "	Value Expected : "+expBinR1);
 		
		
		if(actdocumentNumberTxt.equalsIgnoreCase(expdocumentNumberTxt) && actcustomerAccountTxt.equalsIgnoreCase(expcustomerAccountTxt)
				
				&& actItemR1.equalsIgnoreCase(expItemR1) && actUnitsR1.equalsIgnoreCase(expUnitsR1) && actRDR1.equalsIgnoreCase(expRDR1)
				&& actAqR1.equalsIgnoreCase(expAqR1) && actFqR1.equalsIgnoreCase(expFqR1) && actAvgRateR1.equalsIgnoreCase(expAvgRateR1)
				&& actAvgRateOR1.equalsIgnoreCase(expAvgRateOR1) && actQtyR1.equalsIgnoreCase(expQtyR1) && actLSOR1.equalsIgnoreCase(expLSOR1)
				&& actQtyToReleaseR1.equalsIgnoreCase(expQtyToReleaseR1) && actRateR1.equalsIgnoreCase(expRateR1) 
				&& actGrossR1.equalsIgnoreCase(expGrossR1) && actBinR1.equalsIgnoreCase(expBinR1))
		{
			System.out.println("Test Pass : Voucher Data is Correct");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));
			new_DeleteBtn.click();
			
			getWaitForAlert();
			getAlert().accept();
			
			return true;
		}
		else
		{
			System.out.println("Test Fail : Voucher Data is NOT Correct");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));
			new_DeleteBtn.click();
			
			getWaitForAlert();
			getAlert().accept();
			
			return false;
		}
	}

	
	
	
	

	public boolean checkSalesInvoiceRmaRItemReservedQtyAndQtytoReleaseOnSaveAfterSuspendingReleaseVoucherWithReserved() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		/*Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
		finacinalsMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialTransactionSalesMenu));
		financialTransactionSalesMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoicesVoucher));
		salesInvoicesVoucher.click();
			
		Thread.sleep(5000);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		checkUserFriendlyMessage();*/
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAccountTxt));
		salesAccountTxt.click();
		salesAccountTxt.sendKeys(Keys.SPACE);
		
		int count=salesAccountListCount.size();
		
		System.err.println(count);
		
		for(int i=0 ; i < count ;i++)
		{
			String data=salesAccountListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("Sales - Computers"))
			{
				salesAccountListCount.get(i).click();
				
				break;
			}
		}
		
		salesAccountTxt.sendKeys(Keys.TAB);
		
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		 customerAccountTxt.click();
		 customerAccountTxt.sendKeys(Keys.SPACE);
		 
		 int customercount=customerAccountListCount.size();
		 
		 System.err.println(customercount);
		 
		 for(int i=0 ; i < customercount ;i++)
		 {
			 String data=customerAccountListCount.get(i).getAttribute("data-name");
			 
			 if(data.equalsIgnoreCase("Customer A"))
			 {
				 customerAccountListCount.get(i).click();
				 
				 break;
			 }
		 }
			
		 customerAccountTxt.sendKeys(Keys.TAB);
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.click();
		departmentTxt.sendKeys(Keys.SPACE);
			
		int departmentcount=departmentListCount.size();
		
		System.err.println(departmentcount);
			
		for(int i=0 ; i < departmentcount ;i++)
		{
			String data=departmentListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("INDIA"))
			{
				departmentListCount.get(i).click();
				
				break;
			}
		}
			
		departmentTxt.sendKeys(Keys.TAB);	
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
		wareHouseTxt.click();
		wareHouseTxt.sendKeys(Keys.SPACE);
			
		int warehousecount=wareHouseListCount.size();
		
		System.err.println(warehousecount);
			
		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=wareHouseListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("SECUNDERABAD"))
			{
				wareHouseListCount.get(i).click();
				
				break;
			}
		}
			
		wareHouseTxt.sendKeys(Keys.TAB);
		
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("RMA RITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.sendKeys("1");
		enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.sendKeys("0");
		enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
		enter_AvgRate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
		enter_AvgRateo.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
	
		Thread.sleep(3000);
		
		List<WebElement> rowCountInLinkScreen1=LinkRowCount;
		
		int rowCount1=rowCountInLinkScreen1.size();
			
		System.out.println(rowCount1);
	     
		for (int i = 1; i <= rowCount1; i++) 
		{
			WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
			
			WebElement itemName=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[9]"));
	    	 
			String actvoucheno=voucherno.getText();
	    	 
			String actitemName=itemName.getText();
	    	 
			System.out.println(actvoucheno);
			
			System.out.println(actitemName);
	    	 
			if(actvoucheno.equalsIgnoreCase("SalOrd:11") && actitemName.equalsIgnoreCase("RMA RITEM"))
			{
				Thread.sleep(2000);
				WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
				radioBtn.click();
	    		 
				break;
			}
		}
			
		Thread.sleep(2000);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
		workFlowOkBtn.click();
	     
		Thread.sleep(2000);
	     
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
	     
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);
	     
		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardExpandBtn));
		rmaoutwardExpandBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAHeaderChkBox));
		searchRMAHeaderChkBox.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAOkBtn));
		searchRMAOkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardOkBtn));
		rmaoutwardOkBtn.click();

		Thread.sleep(3000);
		
		String docno=documentNumberTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
	    billRefPickIcon.click();

		    
 		Thread.sleep(2000);
 		
 	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
 	    Bill_OkBtn.click();
 	    
 	    boolean savingMessage=checkVoucherSavingMessage(docno);
 	    
 	    System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");

 	    Thread.sleep(3000);
 	   
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();
		
		boolean loading=checkLoadingMessage();
		
		System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
				
		Thread.sleep(5000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();
		
		// Actual
		
		String actdocumentNumberTxt	=documentNumberTxt.getAttribute("value");
		
		String actsalesAccountTxt	=salesAccountTxt.getAttribute("value");
		String actcustomerAccountTxt=customerAccountTxt.getAttribute("value");
		
		String actItemR1			=select1stRow_1stColumn.getText();
		String actUnitsR1			=select1stRow_2ndColumn.getText();
		String actRDR1				=select1stRow_3rdColumn.getText();
		String actAqR1				=select1stRow_4thColumn.getText();
		String actFqR1				=select1stRow_5thColumn.getText();
		String actAvgRateR1			=select1stRow_6thColumn.getText();
		String actAvgRateOR1		=select1stRow_7thColumn.getText();
		String actQtyR1				=select1stRow_8thColumn.getText();
		String actLSOR1				=select1stRow_9thColumn.getText();
		String actQtyToReleaseR1	=select1stRow_10thColumn.getText();
		String actRateR1			=select1stRow_11thColumn.getText();
		String actGrossR1			=select1stRow_12thColumn.getText();
		String actRmaR1				=select1stRow_15thColumn.getText();
		
		
		
		// Expected
		
		String expdocumentNumberTxt	="6";
		
		String expsalesAccountTxt	="Sales - Computers";
		String expcustomerAccountTxt="customer A";
		
		String expItemR1			="RMA RITEM";
		String expUnitsR1			="Pcs";
		String expRDR1				="0.00";
		String expAqR1				="1.00";
		String expFqR1				="0.00";
		String expAvgRateR1			="19.58";
		String expAvgRateOR1		="19.58";
		String expQtyR1				="1.00";
		String expLSOR1				="SalOrd:11";
		String expQtyToReleaseR1	="1.00";
		String expRateR1			="10.00";
		String expGrossR1			="10.00";
		String expRmaR1				="Hyd@OS1";
		
		
		System.out.println("********************************** checkSalesInvoiceRmaRItemReservedQtyAndQtytoReleaseOnSaveAfterSuspendingReleaseVoucherWithReserved  *************************************");
		
		System.out.println("documentNumberTxt 		: "+actdocumentNumberTxt	+ " Value Expected : "+expdocumentNumberTxt);
 		System.out.println("customerAccountTxt		: " + actcustomerAccountTxt	+ "	Value Expected : "+expcustomerAccountTxt);
 			
 		System.out.println("ItemR1					: " + actItemR1				+ "	Value Expected : "+expItemR1);
 		System.out.println("UnitsR1					: " + actUnitsR1			+ "	Value Expected : "+expUnitsR1);
 		System.out.println("RDR1					: " + actRDR1				+ "	Value Expected : "+expRDR1);
 		System.out.println("AqR1					: " + actAqR1				+ "	Value Expected : "+expAqR1);
 		System.out.println("FqR1					: " + actFqR1				+ "	Value Expected : "+expFqR1);
 		System.out.println("AvgRateR1				: " + actAvgRateR1			+ "	Value Expected : "+expAvgRateR1);
 		System.out.println("AvgRateOR1				: " + actAvgRateOR1			+ "	Value Expected : "+expAvgRateOR1);
 		System.out.println("QtyR1					: " + actQtyR1				+ "	Value Expected : "+expQtyR1);
 		System.out.println("LSOR1					: " + actLSOR1				+ "	Value Expected : "+expLSOR1);
 		System.out.println("QtyToReleaseR1			: " + actQtyToReleaseR1		+ "	Value Expected : "+expQtyToReleaseR1);
 		System.out.println("RateR1					: " + actRateR1				+ "	Value Expected : "+expRateR1);
 		System.out.println("GrossR1					: " + actGrossR1			+ "	Value Expected : "+expGrossR1);
 		System.out.println("RmaR1					: " + actRmaR1				+ "	Value Expected : "+expRmaR1);
 		
		
		if(actdocumentNumberTxt.equalsIgnoreCase(expdocumentNumberTxt) && actcustomerAccountTxt.equalsIgnoreCase(expcustomerAccountTxt)
				
				&& actItemR1.equalsIgnoreCase(expItemR1) && actUnitsR1.equalsIgnoreCase(expUnitsR1) && actRDR1.equalsIgnoreCase(expRDR1)
				&& actAqR1.equalsIgnoreCase(expAqR1) && actFqR1.equalsIgnoreCase(expFqR1) && actAvgRateR1.equalsIgnoreCase(expAvgRateR1)
				&& actAvgRateOR1.equalsIgnoreCase(expAvgRateOR1) && actQtyR1.equalsIgnoreCase(expQtyR1) && actLSOR1.equalsIgnoreCase(expLSOR1)
				&& actQtyToReleaseR1.equalsIgnoreCase(expQtyToReleaseR1) && actRateR1.equalsIgnoreCase(expRateR1) 
				&& actGrossR1.equalsIgnoreCase(expGrossR1) && actRmaR1.equalsIgnoreCase(expRmaR1))
		{
			System.out.println("Test Pass : Voucher Data is Correct");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));
			new_DeleteBtn.click();
			
			getWaitForAlert();
			getAlert().accept();
			
			return true;
		}
		else
		{
			System.out.println("Test Fail : Voucher Data is NOT Correct");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));
			new_DeleteBtn.click();
			
			getWaitForAlert();
			getAlert().accept();
			
			return false;
		}
	}
	
	
	
	
	


	public boolean checkSalesInvoiceStockItemReservedQtyAndQtytoReleaseOnSaveAfterSuspendingReleaseVoucherWithReserved() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		/*Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
		finacinalsMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialTransactionSalesMenu));
		financialTransactionSalesMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoicesVoucher));
		salesInvoicesVoucher.click();
			
		Thread.sleep(5000);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		checkUserFriendlyMessage();  */
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAccountTxt));
		salesAccountTxt.click();
		salesAccountTxt.sendKeys(Keys.SPACE);
		
		int count=salesAccountListCount.size();
		
		System.err.println(count);
		
		for(int i=0 ; i < count ;i++)
		{
			String data=salesAccountListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("Sales - Computers"))
			{
				salesAccountListCount.get(i).click();
				
				break;
			}
		}
		
		salesAccountTxt.sendKeys(Keys.TAB);
		
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		 customerAccountTxt.click();
		 customerAccountTxt.sendKeys(Keys.SPACE);
		 
		 int customercount=customerAccountListCount.size();
		 
		 System.err.println(customercount);
		 
		 for(int i=0 ; i < customercount ;i++)
		 {
			 String data=customerAccountListCount.get(i).getAttribute("data-name");
			 
			 if(data.equalsIgnoreCase("Customer A"))
			 {
				 customerAccountListCount.get(i).click();
				 
				 break;
			 }
		 }
			
		 customerAccountTxt.sendKeys(Keys.TAB);
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.click();
		departmentTxt.sendKeys(Keys.SPACE);
			
		int departmentcount=departmentListCount.size();
		
		System.err.println(departmentcount);
			
		for(int i=0 ; i < departmentcount ;i++)
		{
			String data=departmentListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("INDIA"))
			{
				departmentListCount.get(i).click();
				
				break;
			}
		}
			
		departmentTxt.sendKeys(Keys.TAB);	
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
		wareHouseTxt.click();
		wareHouseTxt.sendKeys(Keys.SPACE);
			
		int warehousecount=wareHouseListCount.size();
		
		System.err.println(warehousecount);
			
		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=wareHouseListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("SECUNDERABAD"))
			{
				wareHouseListCount.get(i).click();
				
				break;
			}
		}
			
		wareHouseTxt.sendKeys(Keys.TAB);
		
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("STOCK ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.sendKeys("1");
		enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.sendKeys("0");
		enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
		enter_AvgRate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
		enter_AvgRateo.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
	
		Thread.sleep(3000);
		
		List<WebElement> rowCountInLinkScreen1=LinkRowCount;
		
		int rowCount1=rowCountInLinkScreen1.size();
			
		System.out.println(rowCount1);
	     
		for (int i = 1; i <= rowCount1; i++) 
		{
			WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
			
			WebElement itemName=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[9]"));
	    	 
			String actvoucheno=voucherno.getText();
	    	 
			String actitemName=itemName.getText();
	    	 
			System.out.println(actvoucheno);
			
			System.out.println(actitemName);
	    	 
			if(actvoucheno.equalsIgnoreCase("SalOrd:11") && actitemName.equalsIgnoreCase("STOCK ITEM"))
			{
				Thread.sleep(2000);
				WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
				radioBtn.click();
	    		 
				break;
			}
		}
			
		Thread.sleep(2000);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
		workFlowOkBtn.click();
	     
		Thread.sleep(2000);
	     
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
	     
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);
	     
		Thread.sleep(3000);

		String docno=documentNumberTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
	    billRefPickIcon.click();

		    
 		Thread.sleep(2000);
 		
 	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
 	    Bill_OkBtn.click();
 	    
 	    boolean savingMessage=checkVoucherSavingMessage(docno);
 	    
 	    System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");

 	    Thread.sleep(3000);
 	   
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();
		
		boolean loading=checkLoadingMessage();
		
		System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
				
		Thread.sleep(5000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();
		
		// Actual
		
		String actdocumentNumberTxt	=documentNumberTxt.getAttribute("value");
		
		String actsalesAccountTxt	=salesAccountTxt.getAttribute("value");
		String actcustomerAccountTxt=customerAccountTxt.getAttribute("value");
		
		String actItemR1			=select1stRow_1stColumn.getText();
		String actUnitsR1			=select1stRow_2ndColumn.getText();
		String actRDR1				=select1stRow_3rdColumn.getText();
		String actAqR1				=select1stRow_4thColumn.getText();
		String actFqR1				=select1stRow_5thColumn.getText();
		String actAvgRateR1			=select1stRow_6thColumn.getText();
		String actAvgRateOR1		=select1stRow_7thColumn.getText();
		String actQtyR1				=select1stRow_8thColumn.getText();
		String actLSOR1				=select1stRow_9thColumn.getText();
		String actQtyToReleaseR1	=select1stRow_10thColumn.getText();
		String actRateR1			=select1stRow_11thColumn.getText();
		String actGrossR1			=select1stRow_12thColumn.getText();
		
		
		
		// Expected
		
		String expdocumentNumberTxt	="6";
		
		String expsalesAccountTxt	="Sales - Computers";
		String expcustomerAccountTxt="customer A";
		
		String expItemR1			="STOCK ITEM";
		String expUnitsR1			="Pcs";
		String expRDR1				="0.00";
		String expAqR1				="1.00";
		String expFqR1				="0.00";
		String expAvgRateR1			="4.08";
		String expAvgRateOR1		="4.08";
		String expQtyR1				="1.00";
		String expLSOR1				="SalOrd:11";
		String expQtyToReleaseR1	="1.00";
		String expRateR1			="10.00";
		String expGrossR1			="10.00";
		
		
		System.out.println("********************************** checkSalesInvoiceStockItemReservedQtyAndQtytoReleaseOnSaveAfterSuspendingReleaseVoucherWithReserved  *************************************");
		
		System.out.println("documentNumberTxt 		: "+actdocumentNumberTxt	+ " Value Expected : "+expdocumentNumberTxt);
 		System.out.println("customerAccountTxt		: " + actcustomerAccountTxt	+ "	Value Expected : "+expcustomerAccountTxt);
 			
 		System.out.println("ItemR1					: " + actItemR1				+ "	Value Expected : "+expItemR1);
 		System.out.println("UnitsR1					: " + actUnitsR1			+ "	Value Expected : "+expUnitsR1);
 		System.out.println("RDR1					: " + actRDR1				+ "	Value Expected : "+expRDR1);
 		System.out.println("AqR1					: " + actAqR1				+ "	Value Expected : "+expAqR1);
 		System.out.println("FqR1					: " + actFqR1				+ "	Value Expected : "+expFqR1);
 		System.out.println("AvgRateR1				: " + actAvgRateR1			+ "	Value Expected : "+expAvgRateR1);
 		System.out.println("AvgRateOR1				: " + actAvgRateOR1			+ "	Value Expected : "+expAvgRateOR1);
 		System.out.println("QtyR1					: " + actQtyR1				+ "	Value Expected : "+expQtyR1);
 		System.out.println("LSOR1					: " + actLSOR1				+ "	Value Expected : "+expLSOR1);
 		System.out.println("QtyToReleaseR1			: " + actQtyToReleaseR1		+ "	Value Expected : "+expQtyToReleaseR1);
 		System.out.println("RateR1					: " + actRateR1				+ "	Value Expected : "+expRateR1);
 		System.out.println("GrossR1					: " + actGrossR1			+ "	Value Expected : "+expGrossR1);
 		
		
		if(actdocumentNumberTxt.equalsIgnoreCase(expdocumentNumberTxt) && actcustomerAccountTxt.equalsIgnoreCase(expcustomerAccountTxt)
				
				&& actItemR1.equalsIgnoreCase(expItemR1) && actUnitsR1.equalsIgnoreCase(expUnitsR1) && actRDR1.equalsIgnoreCase(expRDR1)
				&& actAqR1.equalsIgnoreCase(expAqR1) && actFqR1.equalsIgnoreCase(expFqR1) && actAvgRateR1.equalsIgnoreCase(expAvgRateR1)
				&& actAvgRateOR1.equalsIgnoreCase(expAvgRateOR1) && actQtyR1.equalsIgnoreCase(expQtyR1) && actLSOR1.equalsIgnoreCase(expLSOR1)
				&& actQtyToReleaseR1.equalsIgnoreCase(expQtyToReleaseR1) && actRateR1.equalsIgnoreCase(expRateR1) 
				&& actGrossR1.equalsIgnoreCase(expGrossR1))
		{
			System.out.println("Test Pass : Voucher Data is Correct");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));
			new_DeleteBtn.click();
			
			getWaitForAlert();
			getAlert().accept();
			
			return true;
		}
		else
		{
			System.out.println("Test Fail : Voucher Data is NOT Correct");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));
			new_DeleteBtn.click();
			
			getWaitForAlert();
			getAlert().accept();
			
			return false;
		}
	}
	
	
	
	
	


	public boolean checkSalesInvoiceWithAllItemsReservedQtyAndQtytoReleaseOnSaveAfterSuspendingReleaseVoucherWithReserved() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		/*Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
		finacinalsMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialTransactionSalesMenu));
		financialTransactionSalesMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoicesVoucher));
		salesInvoicesVoucher.click();
			
		Thread.sleep(5000);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		checkUserFriendlyMessage();  */
		
		Thread.sleep(5000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAccountTxt));
		salesAccountTxt.click();
		salesAccountTxt.sendKeys(Keys.SPACE);
		
		int count=salesAccountListCount.size();
		
		System.err.println(count);
		
		for(int i=0 ; i < count ;i++)
		{
			String data=salesAccountListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("Sales - Computers"))
			{
				salesAccountListCount.get(i).click();
				
				break;
			}
		}
		
		salesAccountTxt.sendKeys(Keys.TAB);
		
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		 customerAccountTxt.click();
		 customerAccountTxt.sendKeys(Keys.SPACE);
		 
		 int customercount=customerAccountListCount.size();
		 
		 System.err.println(customercount);
		 
		 for(int i=0 ; i < customercount ;i++)
		 {
			 String data=customerAccountListCount.get(i).getAttribute("data-name");
			 
			 if(data.equalsIgnoreCase("Customer A"))
			 {
				 customerAccountListCount.get(i).click();
				 
				 break;
			 }
		 }
			
		 customerAccountTxt.sendKeys(Keys.TAB);
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.click();
		departmentTxt.sendKeys(Keys.SPACE);
			
		int departmentcount=departmentListCount.size();
		
		System.err.println(departmentcount);
			
		for(int i=0 ; i < departmentcount ;i++)
		{
			String data=departmentListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("INDIA"))
			{
				departmentListCount.get(i).click();
				
				break;
			}
		}
			
		departmentTxt.sendKeys(Keys.TAB);	
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
		wareHouseTxt.click();
		wareHouseTxt.sendKeys(Keys.SPACE);
			
		int warehousecount=wareHouseListCount.size();
		
		System.err.println(warehousecount);
			
		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=wareHouseListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("SECUNDERABAD"))
			{
				wareHouseListCount.get(i).click();
				
				break;
			}
		}
			
		wareHouseTxt.sendKeys(Keys.TAB);
		
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("BATCH WA ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.sendKeys("1");
		enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.sendKeys("0");
		enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
		enter_AvgRate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
		enter_AvgRateo.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
	
		Thread.sleep(3000);
		
		List<WebElement> rowCountInLinkScreen1=LinkRowCount;
		
		int rowCount1=rowCountInLinkScreen1.size();
			
		System.out.println(rowCount1);
	     
		for (int i = 1; i <= rowCount1; i++) 
		{
			WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
			
			WebElement itemName=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[9]"));
	    	 
			String actvoucheno=voucherno.getText();
	    	 
			String actitemName=itemName.getText();
	    	 
			System.out.println(actvoucheno);
			
			System.out.println(actitemName);
	    	 
			if(actvoucheno.equalsIgnoreCase("SalOrd:11") && actitemName.equalsIgnoreCase("BATCH WA ITEM"))
			{
				Thread.sleep(2000);
				WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
				radioBtn.click();
	    		 
				break;
			}
		}
			
		Thread.sleep(2000);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
		workFlowOkBtn.click();
	     
		Thread.sleep(3000);
	     
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
	     
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);
	     
		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(3000);

		// Second Row Bin Item
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		select2ndRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount2=itemListCount.size();
		
		System.err.println(itemcount2);
			
		for(int i=0 ; i < itemcount2 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("BIN FINISHED GOODS ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_5thColumn));
		select2ndRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.sendKeys("1");
		enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.sendKeys("0");
		enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
		enter_AvgRate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
		enter_AvgRateo.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
	
		Thread.sleep(3000);
		
		List<WebElement> rowCountInLinkScreen2=LinkRowCount;
		
		int rowCount2=rowCountInLinkScreen2.size();
			
		System.out.println(rowCount2);
	     
		for (int i = 1; i <= rowCount2; i++) 
		{
			WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
			
			WebElement itemName=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[9]"));
	    	 
			String actvoucheno=voucherno.getText();
	    	 
			String actitemName=itemName.getText();
	    	 
			System.out.println(actvoucheno);
			
			System.out.println(actitemName);
	    	 
			if(actvoucheno.equalsIgnoreCase("SalOrd:11") && actitemName.equalsIgnoreCase("BIN FINISHED GOODS ITEM"))
			{
				Thread.sleep(2000);
				WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
				radioBtn.click();
	    		 
				break;
			}
		}
			
		Thread.sleep(2000);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
		workFlowOkBtn.click();
	     
		Thread.sleep(3000);
	     
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_11thColumn));
		select2ndRow_11thColumn.click();
	     
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);
	     
		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
		binAutoAllocateBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
		binOkBtn.click();

		Thread.sleep(3000);
		
		// Third Row Rma rItem
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
		select3rdRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount3=itemListCount.size();
		
		System.err.println(itemcount3);
			
		for(int i=0 ; i < itemcount3 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("RMA RITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_5thColumn));
		select3rdRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.sendKeys("1");
		enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.sendKeys("0");
		enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
		enter_AvgRate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
		enter_AvgRateo.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
	
		Thread.sleep(3000);
		
		List<WebElement> rowCountInLinkScreen3=LinkRowCount;
		
		int rowCount3=rowCountInLinkScreen3.size();
			
		System.out.println(rowCount3);
	     
		for (int i = 1; i <= rowCount3; i++) 
		{
			WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
			
			WebElement itemName=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[9]"));
	    	 
			String actvoucheno=voucherno.getText();
	    	 
			String actitemName=itemName.getText();
	    	 
			System.out.println(actvoucheno);
			
			System.out.println(actitemName);
	    	 
			if(actvoucheno.equalsIgnoreCase("SalOrd:11") && actitemName.equalsIgnoreCase("RMA RITEM"))
			{
				Thread.sleep(2000);
				WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
				radioBtn.click();
	    		 
				break;
			}
		}
			
		Thread.sleep(2000);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
		workFlowOkBtn.click();
	     
		Thread.sleep(3000);
	     
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_11thColumn));
		select3rdRow_11thColumn.click();
	     
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);
	     
		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardExpandBtn));
		rmaoutwardExpandBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAHeaderChkBox));
		searchRMAHeaderChkBox.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAOkBtn));
		searchRMAOkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardOkBtn));
		rmaoutwardOkBtn.click();

		Thread.sleep(3000);
		
		// Fourth Row Stock item
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_1stColumn));
		select4thRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount4=itemListCount.size();
		
		System.err.println(itemcount4);
			
		for(int i=0 ; i < itemcount4 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("STOCK ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_5thColumn));
		select4thRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.sendKeys("1");
		enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.sendKeys("0");
		enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
		enter_AvgRate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
		enter_AvgRateo.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
	
		Thread.sleep(3000);
		
		List<WebElement> rowCountInLinkScreen4=LinkRowCount;
		
		int rowCount4=rowCountInLinkScreen4.size();
			
		System.out.println(rowCount4);
	     
		for (int i = 1; i <= rowCount4; i++) 
		{
			WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
			
			WebElement itemName=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[9]"));
	    	 
			String actvoucheno=voucherno.getText();
	    	 
			String actitemName=itemName.getText();
	    	 
			System.out.println(actvoucheno);
			
			System.out.println(actitemName);
	    	 
			if(actvoucheno.equalsIgnoreCase("SalOrd:11") && actitemName.equalsIgnoreCase("STOCK ITEM"))
			{
				Thread.sleep(2000);
				WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
				radioBtn.click();
	    		 
				break;
			}
		}
			
		Thread.sleep(2000);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
		workFlowOkBtn.click();
	     
		Thread.sleep(2000);
	     
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_11thColumn));
		select4thRow_11thColumn.click();
	     
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);
	     
		Thread.sleep(3000);
		
		// Fifth Row Batch BR Item
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_1stColumn));
		select5thRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount5=itemListCount.size();
		
		System.err.println(itemcount5);
			
		for(int i=0 ; i < itemcount5 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("BATCH BR ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_5thColumn));
		select5thRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.sendKeys("1");
		enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.sendKeys("0");
		enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
		enter_AvgRate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
		enter_AvgRateo.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
	
		Thread.sleep(3000);
		
		List<WebElement> rowCountInLinkScreen5=LinkRowCount;
		
		int rowCount5=rowCountInLinkScreen5.size();
			
		System.out.println(rowCount5);
	     
		for (int i = 1; i <= rowCount5; i++) 
		{
			WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
			
			WebElement itemName=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[9]"));
	    	 
			String actvoucheno=voucherno.getText();
	    	 
			String actitemName=itemName.getText();
	    	 
			System.out.println(actvoucheno);
			
			System.out.println(actitemName);
	    	 
			if(actvoucheno.equalsIgnoreCase("SalOrd:11") && actitemName.equalsIgnoreCase("BATCH BR ITEM"))
			{
				Thread.sleep(2000);
				WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
				radioBtn.click();
	    		 
				break;
			}
		}
			
		Thread.sleep(2000);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
		workFlowOkBtn.click();
	     
		Thread.sleep(3000);
	     
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_11thColumn));
		select5thRow_11thColumn.click();
	     
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);
	     
		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(3000);
		
		String docno=documentNumberTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
	    billRefPickIcon.click();

		    
 		Thread.sleep(2000);
 		
 	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
 	    Bill_OkBtn.click();
 	    
 	    boolean savingMessage=checkVoucherSavingMessage(docno);
 	    
 	    System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");

 	    Thread.sleep(3000);
 	   
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();
		
		boolean loading=checkLoadingMessage();
		
		System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
				
		  
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_footerExpandBtn));
		new_footerExpandBtn.click();
		
		// Actual
		
		String actdocumentNumberTxt	=documentNumberTxt.getAttribute("value");
		
		String actsalesAccountTxt	=salesAccountTxt.getAttribute("value");
		String actcustomerAccountTxt=customerAccountTxt.getAttribute("value");
		
		String actItemR1			=select1stRow_1stColumn.getText();
		String actUnitsR1			=select1stRow_2ndColumn.getText();
		String actRDR1				=select1stRow_3rdColumn.getText();
		String actAqR1				=select1stRow_4thColumn.getText();
		String actFqR1				=select1stRow_5thColumn.getText();
		String actAvgRateR1			=select1stRow_6thColumn.getText();
		String actAvgRateOR1		=select1stRow_7thColumn.getText();
		String actQtyR1				=select1stRow_8thColumn.getText();
		String actLSOR1				=select1stRow_9thColumn.getText();
		String actQtyToReleaseR1	=select1stRow_10thColumn.getText();
		String actRateR1			=select1stRow_11thColumn.getText();
		String actGrossR1			=select1stRow_12thColumn.getText();
		String actBatchR1			=select1stRow_13thColumn.getText();
		
		String actItemR2			=select2ndRow_1stColumn.getText();
		String actUnitsR2			=select2ndRow_2ndColumn.getText();
		String actRDR2				=select2ndRow_3rdColumn.getText();
		String actAqR2				=select2ndRow_4thColumn.getText();
		String actFqR2				=select2ndRow_5thColumn.getText();
		String actAvgRateR2			=select2ndRow_6thColumn.getText();
		String actAvgRateOR2		=select2ndRow_7thColumn.getText();
		String actQtyR2				=select2ndRow_8thColumn.getText();
		String actLSOR2				=select2ndRow_9thColumn.getText();
		String actQtyToReleaseR2	=select2ndRow_10thColumn.getText();
		String actRateR2			=select2ndRow_11thColumn.getText();
		String actGrossR2			=select2ndRow_12thColumn.getText();
		String actBinR2				=select2ndRow_14thColumn.getText();
		
		String actItemR3			=select3rdRow_1stColumn.getText();
		String actUnitsR3			=select3rdRow_2ndColumn.getText();
		String actRDR3				=select3rdRow_3rdColumn.getText();
		String actAqR3				=select3rdRow_4thColumn.getText();
		String actFqR3				=select3rdRow_5thColumn.getText();
		String actAvgRateR3			=select3rdRow_6thColumn.getText();
		String actAvgRateOR3		=select3rdRow_7thColumn.getText();
		String actQtyR3				=select3rdRow_8thColumn.getText();
		String actLSOR3				=select3rdRow_9thColumn.getText();
		String actQtyToReleaseR3	=select3rdRow_10thColumn.getText();
		String actRateR3			=select3rdRow_11thColumn.getText();
		String actGrossR3			=select3rdRow_12thColumn.getText();
		String actRmaR3				=select3rdRow_15thColumn.getText();
		
		String actItemR4			=select4thRow_1stColumn.getText();
		String actUnitsR4			=select4thRow_2ndColumn.getText();
		String actRDR4				=select4thRow_3rdColumn.getText();
		String actAqR4				=select4thRow_4thColumn.getText();
		String actFqR4				=select4thRow_5thColumn.getText();
		String actAvgRateR4			=select4thRow_6thColumn.getText();
		String actAvgRateOR4		=select4thRow_7thColumn.getText();
		String actQtyR4				=select4thRow_8thColumn.getText();
		String actLSOR4				=select4thRow_9thColumn.getText();
		String actQtyToReleaseR4	=select4thRow_10thColumn.getText();
		String actRateR4			=select4thRow_11thColumn.getText();
		String actGrossR4			=select4thRow_12thColumn.getText();
		
		String actItemR5			=select5thRow_1stColumn.getText();
		String actUnitsR5			=select5thRow_2ndColumn.getText();
		String actRDR5				=select5thRow_3rdColumn.getText();
		String actAqR5				=select5thRow_4thColumn.getText();
		String actFqR5				=select5thRow_5thColumn.getText();
		String actAvgRateR5			=select5thRow_6thColumn.getText();
		String actAvgRateOR5		=select5thRow_7thColumn.getText();
		String actQtyR5				=select5thRow_8thColumn.getText();
		String actLSOR5				=select5thRow_9thColumn.getText();
		String actQtyToReleaseR5	=select5thRow_10thColumn.getText();
		String actRateR5			=select5thRow_11thColumn.getText();
		String actGrossR5			=select5thRow_12thColumn.getText();
		String actBatchR5			=select5thRow_13thColumn.getText();
		
		
		
		String actso_footerQty		=so_footerQty.getText();
		String actso_footerRDField	=so_footerRDField.getText();
		String actso_footerAQ		=so_footerAQ.getText();
		String actso_footerFQ		=so_footerFQ.getText();
		String actsi_footerGross	=si_footerGross.getText();
		String actso_footerNet		=so_footerNet.getText();
		String actsi_AvgRate		=si_AvgRate.getText();
		String actsi_AvgRateO		=si_AvgRateO.getText();
		
		
		// Expected
		
		String expdocumentNumberTxt	="6";
		
		String expsalesAccountTxt	="Sales - Computers";
		String expcustomerAccountTxt="customer A";
		
		String expItemR1			="BATCH WA ITEM";
		String expUnitsR1			="Pcs";
		String expRDR1				="0.00";
		String expAqR1				="1.00";
		String expFqR1				="0.00";
		String expAvgRateR1			="51.66";
		String expAvgRateOR1		="51.66";
		String expQtyR1				="1.00";
		String expLSOR1				="SalOrd:11";
		String expQtyToReleaseR1	="1.00";
		String expRateR1			="10.00";
		String expGrossR1			="10.00";
		String expBatchR1			="OSHWA1";
		
		String expItemR2			="BIN FINISHED GOODS ITEM";
		String expUnitsR2			="Pcs";
		String expRDR2				="0.00";
		String expAqR2				="1.00";
		String expFqR2				="0.00";
		String expAvgRateR2			="1.63";
		String expAvgRateOR2		="1.63";
		String expQtyR2				="1.00";
		String expLSOR2				="SalOrd:11";
		String expQtyToReleaseR2	="1.00";
		String expRateR2			="10.00";
		String expGrossR2			="10.00";
		String expBinR2				="Bin Update";
		
		String expItemR3			="RMA RITEM";
		String expUnitsR3			="Pcs";
		String expRDR3				="0.00";
		String expAqR3				="1.00";
		String expFqR3				="0.00";
		String expAvgRateR3			="19.58";
		String expAvgRateOR3		="19.58";
		String expQtyR3				="1.00";
		String expLSOR3				="SalOrd:11";
		String expQtyToReleaseR3	="1.00";
		String expRateR3			="10.00";
		String expGrossR3			="10.00";
		String expRmaR3				="Hyd@OS1";
		
		String expItemR4			="STOCK ITEM";
		String expUnitsR4			="Pcs";
		String expRDR4				="0.00";
		String expAqR4				="1.00";
		String expFqR4				="0.00";
		String expAvgRateR4			="4.08";
		String expAvgRateOR4		="4.08";
		String expQtyR4				="1.00";
		String expLSOR4				="SalOrd:11";
		String expQtyToReleaseR4	="1.00";
		String expRateR4			="10.00";
		String expGrossR4			="10.00";
		
		String expItemR5			="BATCH BR ITEM";
		String expUnitsR5			="Pcs";
		String expRDR5				="0.00";
		String expAqR5				="1.00";
		String expFqR5				="0.00";
		String expAvgRateR5			="0.83";
		String expAvgRateOR5		="0.83";
		String expQtyR5				="1.00";
		String expLSOR5				="SalOrd:11";
		String expQtyToReleaseR5	="1.00";
		String expRateR5			="10.00";
		String expGrossR5			="10.00";
		String expBatchR5			="OSHBR1";
		
		
		
		String expso_footerQty		="5.00";
		String expso_footerRDField	="0.00";
		String expso_footerAQ		="5.00";
		String expso_footerFQ		="0.00";
		String expsi_footerGross	="50.00";
		String expso_footerNet		="50.00";
		String expsi_AvgRate		="77.78";
		String expsi_AvgRateO		="77.78";
		
		System.out.println("********************************** checkSalesInvoiceSavedVoucherWithAllItemsOnPreviousOption  *************************************");
		
		System.out.println("documentNumberTxt 		: "+actdocumentNumberTxt	+ " Value Expected : "+expdocumentNumberTxt);
 		System.out.println("customerAccountTxt		: " + actcustomerAccountTxt	+ "	Value Expected : "+expcustomerAccountTxt);
 			
 		System.out.println("ItemR1					: " + actItemR1				+ "	Value Expected : "+expItemR1);
 		System.out.println("UnitsR1					: " + actUnitsR1			+ "	Value Expected : "+expUnitsR1);
 		System.out.println("RDR1					: " + actRDR1				+ "	Value Expected : "+expRDR1);
 		System.out.println("AqR1					: " + actAqR1				+ "	Value Expected : "+expAqR1);
 		System.out.println("FqR1					: " + actFqR1				+ "	Value Expected : "+expFqR1);
 		System.out.println("AvgRateR1				: " + actAvgRateR1			+ "	Value Expected : "+expAvgRateR1);
 		System.out.println("AvgRateOR1				: " + actAvgRateOR1			+ "	Value Expected : "+expAvgRateOR1);
 		System.out.println("QtyR1					: " + actQtyR1				+ "	Value Expected : "+expQtyR1);
 		System.out.println("LSOR1					: " + actLSOR1				+ "	Value Expected : "+expLSOR1);
 		System.out.println("QtyToReleaseR1			: " + actQtyToReleaseR1		+ "	Value Expected : "+expQtyToReleaseR1);
 		System.out.println("RateR1					: " + actRateR1				+ "	Value Expected : "+expRateR1);
 		System.out.println("GrossR1					: " + actGrossR1			+ "	Value Expected : "+expGrossR1);
 		System.out.println("BatchR1					: " + actBatchR1			+ "	Value Expected : "+expBatchR1);
 		
 		System.out.println("ItemR2					: " + actItemR2				+ "	Value Expected : "+expItemR2);
 		System.out.println("UnitsR2					: " + actUnitsR2			+ "	Value Expected : "+expUnitsR2);
 		System.out.println("RDR2					: " + actRDR2				+ "	Value Expected : "+expRDR2);
 		System.out.println("AqR2					: " + actAqR2				+ "	Value Expected : "+expAqR2);
 		System.out.println("FqR2					: " + actFqR2				+ "	Value Expected : "+expFqR2);
 		System.out.println("AvgRateR2				: " + actAvgRateR2			+ "	Value Expected : "+expAvgRateR2);
 		System.out.println("AvgRateOR2				: " + actAvgRateOR2			+ "	Value Expected : "+expAvgRateOR2);
 		System.out.println("QtyR2					: " + actQtyR2				+ "	Value Expected : "+expQtyR2);
 		System.out.println("LSOR2					: " + actLSOR2				+ "	Value Expected : "+expLSOR2);
 		System.out.println("QtyToReleaseR2			: " + actQtyToReleaseR2		+ "	Value Expected : "+expQtyToReleaseR2);
 		System.out.println("RateR2					: " + actRateR2				+ "	Value Expected : "+expRateR2);
 		System.out.println("GrossR2					: " + actGrossR2			+ "	Value Expected : "+expGrossR2);
 		System.out.println("BinR2					: " + actBinR2			    + "	Value Expected : "+expBinR2);
 		
 		System.out.println("ItemR3					: " + actItemR3				+ "	Value Expected : "+expItemR3);
 		System.out.println("UnitsR3					: " + actUnitsR3			+ "	Value Expected : "+expUnitsR3);
 		System.out.println("RDR3					: " + actRDR3				+ "	Value Expected : "+expRDR3);
 		System.out.println("AqR3					: " + actAqR3				+ "	Value Expected : "+expAqR3);
 		System.out.println("FqR3					: " + actFqR3				+ "	Value Expected : "+expFqR3);
 		System.out.println("AvgRateR3				: " + actAvgRateR3			+ "	Value Expected : "+expAvgRateR3);
 		System.out.println("AvgRateOR3				: " + actAvgRateOR3			+ "	Value Expected : "+expAvgRateOR3);
 		System.out.println("QtyR3					: " + actQtyR3				+ "	Value Expected : "+expQtyR3);
 		System.out.println("LSOR3					: " + actLSOR3				+ "	Value Expected : "+expLSOR3);
 		System.out.println("QtyToReleaseR3			: " + actQtyToReleaseR3		+ "	Value Expected : "+expQtyToReleaseR3);
 		System.out.println("RateR3					: " + actRateR3				+ "	Value Expected : "+expRateR3);
 		System.out.println("GrossR3					: " + actGrossR3			+ "	Value Expected : "+expGrossR3);
 		System.out.println("RmaR3					: " + actRmaR3			    + "	Value Expected : "+expRmaR3);
 		
 		System.out.println("ItemR4					: " + actItemR4				+ "	Value Expected : "+expItemR4);
 		System.out.println("UnitsR4					: " + actUnitsR4			+ "	Value Expected : "+expUnitsR4);
 		System.out.println("RDR4					: " + actRDR4				+ "	Value Expected : "+expRDR4);
 		System.out.println("AqR4					: " + actAqR4				+ "	Value Expected : "+expAqR4);
 		System.out.println("FqR4					: " + actFqR4				+ "	Value Expected : "+expFqR4);
 		System.out.println("AvgRateR4				: " + actAvgRateR4			+ "	Value Expected : "+expAvgRateR4);
 		System.out.println("AvgRateOR4				: " + actAvgRateOR4			+ "	Value Expected : "+expAvgRateOR4);
 		System.out.println("QtyR4					: " + actQtyR4				+ "	Value Expected : "+expQtyR4);
 		System.out.println("LSOR4					: " + actLSOR4				+ "	Value Expected : "+expLSOR4);
 		System.out.println("QtyToReleaseR4			: " + actQtyToReleaseR4		+ "	Value Expected : "+expQtyToReleaseR4);
 		System.out.println("RateR4					: " + actRateR4				+ "	Value Expected : "+expRateR4);
 		System.out.println("GrossR4					: " + actGrossR4			+ "	Value Expected : "+expGrossR4);
 		
 		System.out.println("ItemR5					: " + actItemR5				+ "	Value Expected : "+expItemR5);
 		System.out.println("UnitsR5					: " + actUnitsR5			+ "	Value Expected : "+expUnitsR5);
 		System.out.println("RDR5					: " + actRDR5				+ "	Value Expected : "+expRDR5);
 		System.out.println("AqR5					: " + actAqR5				+ "	Value Expected : "+expAqR5);
 		System.out.println("FqR5					: " + actFqR5				+ "	Value Expected : "+expFqR5);
 		System.out.println("AvgRateR5				: " + actAvgRateR5			+ "	Value Expected : "+expAvgRateR5);
 		System.out.println("AvgRateOR5				: " + actAvgRateOR5			+ "	Value Expected : "+expAvgRateOR5);
 		System.out.println("QtyR5					: " + actQtyR5				+ "	Value Expected : "+expQtyR5);
 		System.out.println("LSOR5					: " + actLSOR5				+ "	Value Expected : "+expLSOR5);
 		System.out.println("QtyToReleaseR5			: " + actQtyToReleaseR5		+ "	Value Expected : "+expQtyToReleaseR5);
 		System.out.println("RateR5					: " + actRateR5				+ "	Value Expected : "+expRateR5);
 		System.out.println("GrossR5					: " + actGrossR5			+ "	Value Expected : "+expGrossR5);
 		System.out.println("BatchR5					: " + actBatchR5			+ "	Value Expected : "+expBatchR5);
 		
 		System.out.println("so_footerQty			: " + actso_footerQty		+ "	Value Expected : "+expso_footerQty);
 		System.out.println("so_footerRDField		: " + actso_footerRDField	+ "	Value Expected : "+expso_footerRDField);
 		System.out.println("so_footerAQ				: " + actso_footerAQ		+ "	Value Expected : "+expso_footerAQ);
 		System.out.println("so_footerFQ				: " + actso_footerFQ		+ "	Value Expected : "+expso_footerFQ);
 		System.out.println("si_footerGross			: " + actsi_footerGross		+ "	Value Expected : "+expsi_footerGross);
 		System.out.println("so_footerNet			: " + actso_footerNet		+ "	Value Expected : "+expso_footerNet);
 		System.out.println("si_AvgRate				: " + actsi_AvgRate			+ "	Value Expected : "+expsi_AvgRate);
 		System.out.println("si_AvgRateO				: " + actsi_AvgRateO		+ "	Value Expected : "+expsi_AvgRateO);
 		
		
		if(actdocumentNumberTxt.equalsIgnoreCase(expdocumentNumberTxt) && actcustomerAccountTxt.equalsIgnoreCase(expcustomerAccountTxt)
				
				&& actItemR1.equalsIgnoreCase(expItemR1) && actUnitsR1.equalsIgnoreCase(expUnitsR1) && actRDR1.equalsIgnoreCase(expRDR1)
				&& actAqR1.equalsIgnoreCase(expAqR1) && actFqR1.equalsIgnoreCase(expFqR1) && actAvgRateR1.equalsIgnoreCase(expAvgRateR1)
				&& actAvgRateOR1.equalsIgnoreCase(expAvgRateOR1) && actQtyR1.equalsIgnoreCase(expQtyR1) && actLSOR1.equalsIgnoreCase(expLSOR1)
				&& actQtyToReleaseR1.equalsIgnoreCase(expQtyToReleaseR1) && actRateR1.equalsIgnoreCase(expRateR1) 
				&& actGrossR1.equalsIgnoreCase(expGrossR1) && actBatchR1.equalsIgnoreCase(expBatchR1)
				
				&& actItemR2.equalsIgnoreCase(expItemR2) && actUnitsR2.equalsIgnoreCase(expUnitsR2) && actRDR2.equalsIgnoreCase(expRDR2)
				&& actAqR2.equalsIgnoreCase(expAqR2) && actFqR2.equalsIgnoreCase(expFqR2) && actAvgRateR2.equalsIgnoreCase(expAvgRateR2)
				&& actAvgRateOR2.equalsIgnoreCase(expAvgRateOR2) && actQtyR2.equalsIgnoreCase(expQtyR2) && actLSOR2.equalsIgnoreCase(expLSOR2)
				&& actQtyToReleaseR2.equalsIgnoreCase(expQtyToReleaseR2) && actRateR2.equalsIgnoreCase(expRateR2) 
				&& actGrossR2.equalsIgnoreCase(expGrossR2) && actBinR2.equalsIgnoreCase(expBinR2)
				
				&& actItemR3.equalsIgnoreCase(expItemR3) && actUnitsR3.equalsIgnoreCase(expUnitsR3) && actRDR3.equalsIgnoreCase(expRDR3)
				&& actAqR3.equalsIgnoreCase(expAqR3) && actFqR3.equalsIgnoreCase(expFqR3) && actAvgRateR3.equalsIgnoreCase(expAvgRateR3)
				&& actAvgRateOR3.equalsIgnoreCase(expAvgRateOR3) && actQtyR3.equalsIgnoreCase(expQtyR3) && actLSOR3.equalsIgnoreCase(expLSOR3)
				&& actQtyToReleaseR3.equalsIgnoreCase(expQtyToReleaseR3) && actRateR3.equalsIgnoreCase(expRateR3) 
				&& actGrossR3.equalsIgnoreCase(expGrossR3) && actRmaR3.equalsIgnoreCase(expRmaR3)
				
				&& actItemR4.equalsIgnoreCase(expItemR4) && actUnitsR4.equalsIgnoreCase(expUnitsR4) && actRDR4.equalsIgnoreCase(expRDR4)
				&& actAqR4.equalsIgnoreCase(expAqR4) && actFqR4.equalsIgnoreCase(expFqR4) && actAvgRateR4.equalsIgnoreCase(expAvgRateR4)
				&& actAvgRateOR4.equalsIgnoreCase(expAvgRateOR4) && actQtyR4.equalsIgnoreCase(expQtyR4) && actLSOR4.equalsIgnoreCase(expLSOR4)
				&& actQtyToReleaseR4.equalsIgnoreCase(expQtyToReleaseR4) && actRateR4.equalsIgnoreCase(expRateR4) 
				&& actGrossR4.equalsIgnoreCase(expGrossR4)
				
				&& actItemR5.equalsIgnoreCase(expItemR5) && actUnitsR5.equalsIgnoreCase(expUnitsR5) && actRDR5.equalsIgnoreCase(expRDR5)
				&& actAqR5.equalsIgnoreCase(expAqR5) && actFqR5.equalsIgnoreCase(expFqR5) && actAvgRateR5.equalsIgnoreCase(expAvgRateR5)
				&& actAvgRateOR5.equalsIgnoreCase(expAvgRateOR5) && actQtyR5.equalsIgnoreCase(expQtyR5) && actLSOR5.equalsIgnoreCase(expLSOR5)
				&& actQtyToReleaseR5.equalsIgnoreCase(expQtyToReleaseR5) && actRateR5.equalsIgnoreCase(expRateR5) 
				&& actGrossR5.equalsIgnoreCase(expGrossR5) && actBatchR5.equalsIgnoreCase(expBatchR5)
				
				
				&& actso_footerQty.equalsIgnoreCase(expso_footerQty) && actso_footerRDField.equalsIgnoreCase(expso_footerRDField)
				&& actso_footerAQ.equalsIgnoreCase(expso_footerAQ) && actso_footerFQ.equalsIgnoreCase(expso_footerFQ)
				&& actsi_footerGross.equalsIgnoreCase(expsi_footerGross) && actso_footerNet.equalsIgnoreCase(expso_footerNet)
				&& actsi_AvgRate.equalsIgnoreCase(expsi_AvgRate) && actsi_AvgRateO.equalsIgnoreCase(expsi_AvgRateO))
		{
			System.out.println("Test Pass : Voucher Data is Correct");
			
			Thread.sleep(2000);
			new_footerMinimizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));
			new_DeleteBtn.click();
			
			getWaitForAlert();
			getAlert().accept();
			
			return true;
		}
		else
		{
			System.out.println("Test Fail : Voucher Data is NOT Correct");
			
			Thread.sleep(2000);
			new_footerMinimizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));
			new_DeleteBtn.click();
			
			getWaitForAlert();
			getAlert().accept();
			
			return false;
		}
	}
	
	
	
	
	
	
	
	
	
	
	// Copy Document Option In Sales Invoice Voucher

	public boolean checkCopyDocumentScreenOptionsInSalesInvoice() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
		finacinalsMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialTransactionSalesMenu));
		financialTransactionSalesMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoicesVoucher));
		salesInvoicesVoucher.click();
			
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		checkUserFriendlyMessage();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
		toggleBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(copyDocumentOption));
		copyDocumentOption.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cd_vouchertypeTxt));
		
		boolean actcd_vouchertypeTxt		=cd_vouchertypeTxt.isDisplayed();
		boolean actcd_searchOnDropdown1		=cd_searchOnDropdown1.isDisplayed();
		boolean actcd_searchOnDropdown2		=cd_searchOnDropdown2.isDisplayed();
		boolean actcd_searchTxt				=cd_searchTxt.isDisplayed();
		boolean actcd_refreshBtn			=cd_refreshBtn.isDisplayed();
		boolean actcd_filterBtn				=cd_filterBtn.isDisplayed();
		boolean actcd_HeaderChkBox			=cd_HeaderChkBox.isDisplayed();
		boolean actcd_FirstChkBox			=cd_FirstChkBox.isDisplayed();
		boolean actcd_clubsimilarTransChkBox=cd_clubsimilarTransChkBox.isDisplayed();
		boolean actcd_SelectallBtn			=cd_SelectallBtn.isDisplayed();
		boolean actcd_firstBtn				=cd_firstBtn.isDisplayed();
		boolean actcd_PreviousBtn			=cd_PreviousBtn.isDisplayed();
		boolean actcd_PageNo				=cd_PageNo.isDisplayed();
		boolean actcd_nextBtn				=cd_nextBtn.isDisplayed();
		boolean actcd_LastBtn				=cd_LastBtn.isDisplayed();
		boolean actcd_OkBtn					=cd_OkBtn.isDisplayed();
		boolean actcd_CancelBtn				=cd_CancelBtn.isDisplayed();
		
		
		boolean expcd_vouchertypeTxt		=true;
		boolean expcd_searchOnDropdown1		=true;
		boolean expcd_searchOnDropdown2		=true;
		boolean expcd_searchTxt				=true;
		boolean expcd_refreshBtn			=true;
		boolean expcd_filterBtn				=true;
		boolean expcd_HeaderChkBox			=true;
		boolean expcd_FirstChkBox			=true;
		boolean expcd_clubsimilarTransChkBox=true;
		boolean expcd_SelectallBtn			=true;
		boolean expcd_firstBtn				=true;
		boolean expcd_PreviousBtn			=true;
		boolean expcd_PageNo				=true;
		boolean expcd_nextBtn				=true;
		boolean expcd_LastBtn				=true;
		boolean expcd_OkBtn					=true;
		boolean expcd_CancelBtn				=true;
		
		System.out.println("************************************* checkCopyDocumentScreenOptionsInSalesInvoice  *********************************");
		
		System.out.println("Copy Document Voucher type                : "+actcd_vouchertypeTxt			+"  Value Expected : "+expcd_vouchertypeTxt);
		System.out.println("Copy Document Search dropdown 1           : "+actcd_searchOnDropdown1		+"  Value Expected : "+expcd_searchOnDropdown1);
		System.out.println("Copy Document Search dropdown 2           : "+actcd_searchOnDropdown2		+"  Value Expected : "+expcd_searchOnDropdown2);
		System.out.println("Copy Document Search text                 : "+actcd_searchTxt				+"  Value Expected : "+expcd_searchTxt);
		System.out.println("Copy Document Refresh                     : "+actcd_refreshBtn				+"  Value Expected : "+expcd_refreshBtn);
		System.out.println("Copy Document Filter                      : "+actcd_filterBtn				+"  Value Expected : "+expcd_filterBtn);
		System.out.println("Copy Document Header Chk box              : "+actcd_HeaderChkBox			+"  Value Expected : "+expcd_HeaderChkBox);
		System.out.println("Copy Document First Chk Box               : "+actcd_FirstChkBox				+"  Value Expected : "+expcd_FirstChkBox);
		System.out.println("Copy Document Club Similar Trans Chk Box  : "+actcd_clubsimilarTransChkBox	+"  Value Expected : "+expcd_clubsimilarTransChkBox);
		System.out.println("Copy Document Select All                  : "+actcd_SelectallBtn			+"  Value Expected : "+expcd_SelectallBtn);
		System.out.println("Copy Document first Button                : "+actcd_firstBtn				+"  Value Expected : "+expcd_firstBtn);
		System.out.println("Copy Document Previous Button             : "+actcd_PreviousBtn				+"  Value Expected : "+expcd_PreviousBtn);
		System.out.println("Copy Document Page No                     : "+actcd_PageNo					+"  Value Expected : "+expcd_PageNo);
		System.out.println("Copy Document Next Button                 : "+actcd_nextBtn					+"  Value Expected : "+expcd_nextBtn);
		System.out.println("Copy Document last Button                 : "+actcd_LastBtn					+"  Value Expected : "+expcd_LastBtn);
		System.out.println("Copy Document Ok Button                   : "+actcd_OkBtn					+"  Value Expected : "+expcd_OkBtn);
		System.out.println("Copy Document cancel Button               : "+actcd_CancelBtn				+"  Value Expected : "+expcd_CancelBtn);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cd_vouchertypeTxt));
		
		if(actcd_vouchertypeTxt==expcd_vouchertypeTxt && actcd_searchOnDropdown1==expcd_searchOnDropdown1
				&& actcd_searchOnDropdown2==expcd_searchOnDropdown2 && actcd_searchTxt==expcd_searchTxt
				&& actcd_refreshBtn==expcd_refreshBtn && actcd_filterBtn==expcd_filterBtn
				&& actcd_HeaderChkBox==expcd_HeaderChkBox && actcd_FirstChkBox==expcd_FirstChkBox
				&& actcd_clubsimilarTransChkBox==expcd_clubsimilarTransChkBox && actcd_SelectallBtn==expcd_SelectallBtn
				&& actcd_firstBtn==expcd_firstBtn && actcd_PreviousBtn==expcd_PreviousBtn
				&& actcd_PageNo==expcd_PageNo && actcd_nextBtn==expcd_nextBtn
				&& actcd_LastBtn==expcd_LastBtn && actcd_OkBtn==expcd_OkBtn && actcd_CancelBtn==expcd_CancelBtn)
		{
			System.out.println("Test Pass : Copy Document Options Are As Expected");
			excelReader.setCellData(xlfile, xlSheetName, 78, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Copy Document Options Are NOT As Expected");
			excelReader.setCellData(xlfile, xlSheetName, 78, 9, resFail);
			return false;
		}
	}

	
	
	public boolean checkFirstRowCheckboxInCopyDocumentInSalesInvoice() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cd_FirstChkBox));
		cd_FirstChkBox.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cd_R1C2));

		String actCopyDocItemR1			=cd_R1C2.getText();
		String actCopyDocUnitsR1		=cd_R1C3.getText();
		String actCopyDocRdR1			=cd_R1C4.getText();
		String actCopyDocAqR1			=cd_R1C5.getText();
		String actCopyDocFqR1			=cd_R1C6.getText();
		String actCopyDocAvgRateR1		=cd_R1C7.getText();
		String actCopyDocAvgRateOR1		=cd_R1C8.getText();
		String actCopyDocQtyR1			=cd_R1C9.getText();
		boolean actCopyDocLSOR1			=cd_R1C10.getText().isEmpty();
		boolean actCopyDocMaxReleaseR1	=cd_R1C11.getText().isEmpty();
		String actCopyDocRateR1			=cd_R1C12.getText();
		String actCopyDocGrossR1		=cd_R1C13.getText();
		String actCopyDocBatchR1		=cd_R1C14.getText();
		boolean actCopyDocBinR1			=cd_R1C15.getText().isEmpty();
		boolean actCopyDocRmaR1			=cd_R1C16.getText().isEmpty();
		boolean actCopyDocRemarksR1		=cd_R1C17.getText().isEmpty();
		
		String actCopyDocItemR2			=cd_R2C2.getText();
		String actCopyDocUnitsR2		=cd_R2C3.getText();
		String actCopyDocRdR2			=cd_R2C4.getText();
		String actCopyDocAqR2			=cd_R2C5.getText();
		String actCopyDocFqR2			=cd_R2C6.getText();
		String actCopyDocAvgRateR2		=cd_R2C7.getText();
		String actCopyDocAvgRateOR2		=cd_R2C8.getText();
		String actCopyDocQtyR2			=cd_R2C9.getText();
		boolean actCopyDocLSOR2			=cd_R2C10.getText().isEmpty();
		boolean actCopyDocMaxReleaseR2	=cd_R2C11.getText().isEmpty();
		String actCopyDocRateR2			=cd_R2C12.getText();
		String actCopyDocGrossR2		=cd_R2C13.getText();
		boolean actCopyDocBatchR2		=cd_R2C14.getText().isEmpty();
		String actCopyDocBinR2			=cd_R2C15.getText();
		boolean actCopyDocRmaR2			=cd_R2C16.getText().isEmpty();
		boolean actCopyDocRemarksR2		=cd_R2C17.getText().isEmpty();
		
		String actCopyDocItemR3			=cd_R3C2.getText();
		String actCopyDocUnitsR3		=cd_R3C3.getText();
		String actCopyDocRdR3			=cd_R3C4.getText();
		String actCopyDocAqR3			=cd_R3C5.getText();
		String actCopyDocFqR3			=cd_R3C6.getText();
		String actCopyDocAvgRateR3		=cd_R3C7.getText();
		String actCopyDocAvgRateOR3		=cd_R3C8.getText();
		String actCopyDocQtyR3			=cd_R3C9.getText();
		boolean actCopyDocLSOR3			=cd_R3C10.getText().isEmpty();
		boolean actCopyDocMaxReleaseR3	=cd_R3C11.getText().isEmpty();
		String actCopyDocRateR3			=cd_R3C12.getText();
		String actCopyDocGrossR3		=cd_R3C13.getText();
		boolean actCopyDocBatchR3		=cd_R3C14.getText().isEmpty();
		boolean actCopyDocBinR3			=cd_R3C15.getText().isEmpty();
		String actCopyDocRmaR3			=cd_R3C16.getText();
		boolean actCopyDocRemarksR3		=cd_R3C17.getText().isEmpty();
		
		String actCopyDocItemR4			=cd_R4C2.getText();
		String actCopyDocUnitsR4		=cd_R4C3.getText();
		String actCopyDocRdR4			=cd_R4C4.getText();
		String actCopyDocAqR4			=cd_R4C5.getText();
		String actCopyDocFqR4			=cd_R4C6.getText();
		String actCopyDocAvgRateR4		=cd_R4C7.getText();
		String actCopyDocAvgRateOR4		=cd_R4C8.getText();
		String actCopyDocQtyR4			=cd_R4C9.getText();
		boolean actCopyDocLSOR4			=cd_R4C10.getText().isEmpty();
		boolean actCopyDocMaxReleaseR4	=cd_R4C11.getText().isEmpty();
		String actCopyDocRateR4			=cd_R4C12.getText();
		String actCopyDocGrossR4		=cd_R4C13.getText();
		boolean actCopyDocBatchR4		=cd_R4C14.getText().isEmpty();
		boolean actCopyDocBinR4			=cd_R4C15.getText().isEmpty();
		boolean actCopyDocRmaR4			=cd_R4C16.getText().isEmpty();
		boolean actCopyDocRemarksR4		=cd_R4C17.getText().isEmpty();
		
		String actCopyDocItemR5			=cd_R1C2.getText();
		String actCopyDocUnitsR5		=cd_R1C3.getText();
		String actCopyDocRdR5			=cd_R1C4.getText();
		String actCopyDocAqR5			=cd_R1C5.getText();
		String actCopyDocFqR5			=cd_R1C6.getText();
		String actCopyDocAvgRateR5		=cd_R1C7.getText();
		String actCopyDocAvgRateOR5		=cd_R1C8.getText();
		String actCopyDocQtyR5			=cd_R1C9.getText();
		boolean actCopyDocLSOR5			=cd_R1C10.getText().isEmpty();
		boolean actCopyDocMaxReleaseR5	=cd_R1C11.getText().isEmpty();
		String actCopyDocRateR5			=cd_R1C12.getText();
		String actCopyDocGrossR5		=cd_R1C13.getText();
		String actCopyDocBatchR5		=cd_R1C14.getText();
		boolean actCopyDocBinR5			=cd_R1C15.getText().isEmpty();
		boolean actCopyDocRmaR5			=cd_R1C16.getText().isEmpty();
		boolean actCopyDocRemarksR5		=cd_R1C17.getText().isEmpty();
		
		// Expected
		
		String expCopyDocItemR1			="BATCH WA ITEM";
		String expCopyDocUnitsR1		="Pcs";
		String expCopyDocRdR1			="0";
		String expCopyDocAqR1			="1";
		String expCopyDocFqR1			="0";
		String expCopyDocAvgRateR1		="51.66";
		String expCopyDocAvgRateOR1		="51.66";
		String expCopyDocQtyR1			="1.00";
		boolean expCopyDocLSOR1			=true;
		boolean expCopyDocMaxReleaseR1	=true;
		String expCopyDocRateR1			="10.00";
		String expCopyDocGrossR1		="10.00";
		String expCopyDocBatchR1		="OSHWA1";
		boolean expCopyDocBinR1			=true;
		boolean expCopyDocRmaR1			=true;
		boolean expCopyDocRemarksR1		=true;
		
		String expCopyDocItemR2			="BIN FINISHED GOODS ITEM";
		String expCopyDocUnitsR2		="Pcs";
		String expCopyDocRdR2			="0";
		String expCopyDocAqR2			="1";
		String expCopyDocFqR2			="0";
		String expCopyDocAvgRateR2		="1.63";
		String expCopyDocAvgRateOR2		="1.63";
		String expCopyDocQtyR2			="1.00";
		boolean expCopyDocLSOR2			=true;
		boolean expCopyDocMaxReleaseR2	=true;
		String expCopyDocRateR2			="10.00";
		String expCopyDocGrossR2		="10.00";
		boolean expCopyDocBatchR2		=true;
		String expCopyDocBinR2			="Bin Update";
		boolean expCopyDocRmaR2			=true;
		boolean expCopyDocRemarksR2		=true;
	
		String expCopyDocItemR3			="RMA RITEM";
		String expCopyDocUnitsR3		="Pcs";
		String expCopyDocRdR3			="0";
		String expCopyDocAqR3			="1";
		String expCopyDocFqR3			="0";
		String expCopyDocAvgRateR3		="19.58";
		String expCopyDocAvgRateOR3		="19.58";
		String expCopyDocQtyR3			="1.00";
		boolean expCopyDocLSOR3			=true;
		boolean expCopyDocMaxReleaseR3	=true;
		String expCopyDocRateR3			="10.00";
		String expCopyDocGrossR3		="10.00";
		boolean expCopyDocBatchR3		=true;
		boolean expCopyDocBinR3			=true;
		String expCopyDocRmaR3			="Hyd@OS1";
		boolean expCopyDocRemarksR3		=true;
		
		String expCopyDocItemR4			="STOCK ITEM";
		String expCopyDocUnitsR4		="Pcs";
		String expCopyDocRdR4			="0";
		String expCopyDocAqR4			="1";
		String expCopyDocFqR4			="0";
		String expCopyDocAvgRateR4		="4.08";
		String expCopyDocAvgRateOR4		="4.08";
		String expCopyDocQtyR4			="1.00";
		boolean expCopyDocLSOR4			=true;
		boolean expCopyDocMaxReleaseR4	=true;
		String expCopyDocRateR4			="10.00";
		String expCopyDocGrossR4		="10.00";
		boolean expCopyDocBatchR4		=true;
		boolean expCopyDocBinR4			=true;
		boolean expCopyDocRmaR4			=true;
		boolean expCopyDocRemarksR4		=true;
		
		String expCopyDocItemR5			="BATCH BR ITEM";
		String expCopyDocUnitsR5		="Pcs";
		String expCopyDocRdR5			="0";
		String expCopyDocAqR5			="1";
		String expCopyDocFqR5			="0";
		String expCopyDocAvgRateR5		="0.83";
		String expCopyDocAvgRateOR5		="0.83";
		String expCopyDocQtyR5			="1.00";
		boolean expCopyDocLSOR5			=true;
		boolean expCopyDocMaxReleaseR5	=true;
		String expCopyDocRateR5			="10.00";
		String expCopyDocGrossR5		="10.00";
		String expCopyDocBatchR5		="OSHBR1";
		boolean expCopyDocBinR5			=true;
		boolean expCopyDocRmaR5			=true;
		boolean expCopyDocRemarksR5		=true;
		
		System.out.println("************************************* checkFirstRowCheckboxInCopyDocumentInSalesInvoice  *********************************");
		
		System.out.println("CopyDocItemR1                : "+actCopyDocItemR1			+"  Value Expected : "+expCopyDocItemR1);
		System.out.println("CopyDocUnitsR1               : "+actCopyDocUnitsR1			+"  Value Expected : "+expCopyDocUnitsR1);
		System.out.println("CopyDocRdR1             	 : "+actCopyDocRdR1				+"  Value Expected : "+expCopyDocRdR1);
		System.out.println("CopyDocAqR1               	 : "+actCopyDocAqR1				+"  Value Expected : "+expCopyDocAqR1);
		System.out.println("CopyDocFqR1                  : "+actCopyDocFqR1				+"  Value Expected : "+expCopyDocFqR1);
		System.out.println("CopyDocAvgRateR1             : "+actCopyDocAvgRateR1		+"  Value Expected : "+expCopyDocAvgRateR1);
		System.out.println("CopyDocAvgRateOR1            : "+actCopyDocAvgRateOR1		+"  Value Expected : "+expCopyDocAvgRateOR1);
		System.out.println("CopyDocQtyR1                 : "+actCopyDocQtyR1			+"  Value Expected : "+expCopyDocQtyR1);
		System.out.println("CopyDocLSOR1                 : "+actCopyDocLSOR1			+"  Value Expected : "+expCopyDocLSOR1);
		System.out.println("CopyDocMaxReleaseR1          : "+actCopyDocMaxReleaseR1		+"  Value Expected : "+expCopyDocMaxReleaseR1);
		System.out.println("CopyDocRateR1                : "+actCopyDocRateR1			+"  Value Expected : "+expCopyDocRateR1);
		System.out.println("CopyDocGrossR1               : "+actCopyDocGrossR1			+"  Value Expected : "+expCopyDocGrossR1);
		System.out.println("CopyDocBatchR1               : "+actCopyDocBatchR1			+"  Value Expected : "+expCopyDocBatchR1);
		System.out.println("CopyDocBinR1                 : "+actCopyDocBinR1			+"  Value Expected : "+expCopyDocBinR1);
		System.out.println("CopyDocRmaR1                 : "+actCopyDocRmaR1			+"  Value Expected : "+expCopyDocRmaR1);
		System.out.println("CopyDocRemarksR1             : "+actCopyDocRemarksR1		+"  Value Expected : "+expCopyDocRemarksR1);
		
		System.out.println("CopyDocItemR2                : "+actCopyDocItemR2			+"  Value Expected : "+expCopyDocItemR2);
		System.out.println("CopyDocUnitsR2               : "+actCopyDocUnitsR2			+"  Value Expected : "+expCopyDocUnitsR2);
		System.out.println("CopyDocRdR2             	 : "+actCopyDocRdR2				+"  Value Expected : "+expCopyDocRdR2);
		System.out.println("CopyDocAqR2               	 : "+actCopyDocAqR2				+"  Value Expected : "+expCopyDocAqR2);
		System.out.println("CopyDocFqR2                  : "+actCopyDocFqR2				+"  Value Expected : "+expCopyDocFqR2);
		System.out.println("CopyDocAvgRateR2             : "+actCopyDocAvgRateR2		+"  Value Expected : "+expCopyDocAvgRateR2);
		System.out.println("CopyDocAvgRateOR2            : "+actCopyDocAvgRateOR2		+"  Value Expected : "+expCopyDocAvgRateOR2);
		System.out.println("CopyDocQtyR2                 : "+actCopyDocQtyR2			+"  Value Expected : "+expCopyDocQtyR2);
		System.out.println("CopyDocLSOR2                 : "+actCopyDocLSOR2			+"  Value Expected : "+expCopyDocLSOR2);
		System.out.println("CopyDocMaxReleaseR2          : "+actCopyDocMaxReleaseR2		+"  Value Expected : "+expCopyDocMaxReleaseR2);
		System.out.println("CopyDocRateR2                : "+actCopyDocRateR2			+"  Value Expected : "+expCopyDocRateR2);
		System.out.println("CopyDocGrossR2               : "+actCopyDocGrossR2			+"  Value Expected : "+expCopyDocGrossR2);
		System.out.println("CopyDocBatchR2               : "+actCopyDocBatchR2			+"  Value Expected : "+expCopyDocBatchR2);
		System.out.println("CopyDocBinR2                 : "+actCopyDocBinR2			+"  Value Expected : "+expCopyDocBinR2);
		System.out.println("CopyDocRmaR2                 : "+actCopyDocRmaR2			+"  Value Expected : "+expCopyDocRmaR2);
		System.out.println("CopyDocRemarksR2             : "+actCopyDocRemarksR2		+"  Value Expected : "+expCopyDocRemarksR2);
		
		
		System.out.println("CopyDocItemR3                : "+actCopyDocItemR3			+"  Value Expected : "+expCopyDocItemR3);
		System.out.println("CopyDocUnitsR3               : "+actCopyDocUnitsR3			+"  Value Expected : "+expCopyDocUnitsR3);
		System.out.println("CopyDocRdR3             	 : "+actCopyDocRdR3				+"  Value Expected : "+expCopyDocRdR3);
		System.out.println("CopyDocAqR3               	 : "+actCopyDocAqR3				+"  Value Expected : "+expCopyDocAqR3);
		System.out.println("CopyDocFqR3                  : "+actCopyDocFqR3				+"  Value Expected : "+expCopyDocFqR3);
		System.out.println("CopyDocAvgRateR3             : "+actCopyDocAvgRateR3		+"  Value Expected : "+expCopyDocAvgRateR3);
		System.out.println("CopyDocAvgRateOR3            : "+actCopyDocAvgRateOR3		+"  Value Expected : "+expCopyDocAvgRateOR3);
		System.out.println("CopyDocQtyR3                 : "+actCopyDocQtyR3			+"  Value Expected : "+expCopyDocQtyR3);
		System.out.println("CopyDocLSOR3                 : "+actCopyDocLSOR3			+"  Value Expected : "+expCopyDocLSOR3);
		System.out.println("CopyDocMaxReleaseR3          : "+actCopyDocMaxReleaseR3		+"  Value Expected : "+expCopyDocMaxReleaseR3);
		System.out.println("CopyDocRateR3                : "+actCopyDocRateR3			+"  Value Expected : "+expCopyDocRateR3);
		System.out.println("CopyDocGrossR3               : "+actCopyDocGrossR3			+"  Value Expected : "+expCopyDocGrossR3);
		System.out.println("CopyDocBatchR3               : "+actCopyDocBatchR3			+"  Value Expected : "+expCopyDocBatchR3);
		System.out.println("CopyDocBinR3                 : "+actCopyDocBinR3			+"  Value Expected : "+expCopyDocBinR3);
		System.out.println("CopyDocRmaR3                 : "+actCopyDocRmaR3			+"  Value Expected : "+expCopyDocRmaR3);
		System.out.println("CopyDocRemarksR3             : "+actCopyDocRemarksR3		+"  Value Expected : "+expCopyDocRemarksR3);
		
		System.out.println("CopyDocItemR4                : "+actCopyDocItemR4			+"  Value Expected : "+expCopyDocItemR4);
		System.out.println("CopyDocUnitsR4               : "+actCopyDocUnitsR4			+"  Value Expected : "+expCopyDocUnitsR4);
		System.out.println("CopyDocRdR4             	 : "+actCopyDocRdR4				+"  Value Expected : "+expCopyDocRdR4);
		System.out.println("CopyDocAqR4               	 : "+actCopyDocAqR4				+"  Value Expected : "+expCopyDocAqR4);
		System.out.println("CopyDocFqR4                  : "+actCopyDocFqR4				+"  Value Expected : "+expCopyDocFqR4);
		System.out.println("CopyDocAvgRateR4             : "+actCopyDocAvgRateR4		+"  Value Expected : "+expCopyDocAvgRateR4);
		System.out.println("CopyDocAvgRateOR4            : "+actCopyDocAvgRateOR4		+"  Value Expected : "+expCopyDocAvgRateOR4);
		System.out.println("CopyDocQtyR4                 : "+actCopyDocQtyR4			+"  Value Expected : "+expCopyDocQtyR4);
		System.out.println("CopyDocLSOR4                 : "+actCopyDocLSOR4			+"  Value Expected : "+expCopyDocLSOR4);
		System.out.println("CopyDocMaxReleaseR4          : "+actCopyDocMaxReleaseR4		+"  Value Expected : "+expCopyDocMaxReleaseR4);
		System.out.println("CopyDocRateR4                : "+actCopyDocRateR4			+"  Value Expected : "+expCopyDocRateR4);
		System.out.println("CopyDocGrossR4               : "+actCopyDocGrossR4			+"  Value Expected : "+expCopyDocGrossR4);
		System.out.println("CopyDocBatchR4               : "+actCopyDocBatchR4			+"  Value Expected : "+expCopyDocBatchR4);
		System.out.println("CopyDocBinR4                 : "+actCopyDocBinR4			+"  Value Expected : "+expCopyDocBinR4);
		System.out.println("CopyDocRmaR4                 : "+actCopyDocRmaR4			+"  Value Expected : "+expCopyDocRmaR4);
		System.out.println("CopyDocRemarksR4             : "+actCopyDocRemarksR4		+"  Value Expected : "+expCopyDocRemarksR4);
		
		System.out.println("CopyDocItemR5                : "+actCopyDocItemR5			+"  Value Expected : "+expCopyDocItemR5);
		System.out.println("CopyDocUnitsR5               : "+actCopyDocUnitsR5			+"  Value Expected : "+expCopyDocUnitsR5);
		System.out.println("CopyDocRdR5             	 : "+actCopyDocRdR5				+"  Value Expected : "+expCopyDocRdR5);
		System.out.println("CopyDocAqR5               	 : "+actCopyDocAqR5				+"  Value Expected : "+expCopyDocAqR5);
		System.out.println("CopyDocFqR5                  : "+actCopyDocFqR5				+"  Value Expected : "+expCopyDocFqR5);
		System.out.println("CopyDocAvgRateR5             : "+actCopyDocAvgRateR5		+"  Value Expected : "+expCopyDocAvgRateR5);
		System.out.println("CopyDocAvgRateOR5            : "+actCopyDocAvgRateOR5		+"  Value Expected : "+expCopyDocAvgRateOR5);
		System.out.println("CopyDocQtyR5                 : "+actCopyDocQtyR5			+"  Value Expected : "+expCopyDocQtyR5);
		System.out.println("CopyDocLSOR5                 : "+actCopyDocLSOR5			+"  Value Expected : "+expCopyDocLSOR5);
		System.out.println("CopyDocMaxReleaseR5          : "+actCopyDocMaxReleaseR5		+"  Value Expected : "+expCopyDocMaxReleaseR5);
		System.out.println("CopyDocRateR5                : "+actCopyDocRateR5			+"  Value Expected : "+expCopyDocRateR5);
		System.out.println("CopyDocGrossR5               : "+actCopyDocGrossR5			+"  Value Expected : "+expCopyDocGrossR5);
		System.out.println("CopyDocBatchR5               : "+actCopyDocBatchR5			+"  Value Expected : "+expCopyDocBatchR5);
		System.out.println("CopyDocBinR5                 : "+actCopyDocBinR5			+"  Value Expected : "+expCopyDocBinR5);
		System.out.println("CopyDocRmaR5                 : "+actCopyDocRmaR5			+"  Value Expected : "+expCopyDocRmaR5);
		System.out.println("CopyDocRemarksR5             : "+actCopyDocRemarksR5		+"  Value Expected : "+expCopyDocRemarksR5);
		
		if(actCopyDocItemR1.equalsIgnoreCase(expCopyDocItemR1) && actCopyDocUnitsR1.equalsIgnoreCase(expCopyDocUnitsR1) && actCopyDocRdR1.equalsIgnoreCase(expCopyDocRdR1)
				&& actCopyDocAqR1.equalsIgnoreCase(expCopyDocAqR1) && actCopyDocFqR1.equalsIgnoreCase(expCopyDocFqR1) && actCopyDocAvgRateR1.equalsIgnoreCase(expCopyDocAvgRateR1)
				&& actCopyDocAvgRateOR1.equalsIgnoreCase(expCopyDocAvgRateOR1) && actCopyDocQtyR1.equalsIgnoreCase(expCopyDocQtyR1) && actCopyDocLSOR1==expCopyDocLSOR1
				&& actCopyDocMaxReleaseR1==expCopyDocMaxReleaseR1 && actCopyDocRateR1.equalsIgnoreCase(expCopyDocRateR1) && actCopyDocGrossR1.equalsIgnoreCase(expCopyDocGrossR1)
				&& actCopyDocBatchR1.equalsIgnoreCase(expCopyDocBatchR1) && actCopyDocBinR1==expCopyDocBinR1 && actCopyDocRmaR1==expCopyDocRmaR1
				&& actCopyDocRemarksR1==expCopyDocRemarksR1
				
				&& actCopyDocItemR2.equalsIgnoreCase(expCopyDocItemR2) && actCopyDocUnitsR2.equalsIgnoreCase(expCopyDocUnitsR2) && actCopyDocRdR2.equalsIgnoreCase(expCopyDocRdR2)
				&& actCopyDocAqR2.equalsIgnoreCase(expCopyDocAqR2) && actCopyDocFqR2.equalsIgnoreCase(expCopyDocFqR2) && actCopyDocAvgRateR2.equalsIgnoreCase(expCopyDocAvgRateR2)
				&& actCopyDocAvgRateOR2.equalsIgnoreCase(expCopyDocAvgRateOR2) && actCopyDocQtyR2.equalsIgnoreCase(expCopyDocQtyR2) && actCopyDocLSOR2==expCopyDocLSOR2
				&& actCopyDocMaxReleaseR2==expCopyDocMaxReleaseR2 && actCopyDocRateR2.equalsIgnoreCase(expCopyDocRateR2) && actCopyDocGrossR2.equalsIgnoreCase(expCopyDocGrossR2)
				&& actCopyDocBatchR2==expCopyDocBatchR2 && actCopyDocBinR2.equalsIgnoreCase(expCopyDocBinR2) && actCopyDocRmaR2==expCopyDocRmaR2
				&& actCopyDocRemarksR2==expCopyDocRemarksR2
			
				&& actCopyDocItemR3.equalsIgnoreCase(expCopyDocItemR3) && actCopyDocUnitsR3.equalsIgnoreCase(expCopyDocUnitsR3) && actCopyDocRdR3.equalsIgnoreCase(expCopyDocRdR3)
				&& actCopyDocAqR3.equalsIgnoreCase(expCopyDocAqR3) && actCopyDocFqR3.equalsIgnoreCase(expCopyDocFqR3) && actCopyDocAvgRateR3.equalsIgnoreCase(expCopyDocAvgRateR3)
				&& actCopyDocAvgRateOR3.equalsIgnoreCase(expCopyDocAvgRateOR3) && actCopyDocQtyR3.equalsIgnoreCase(expCopyDocQtyR3) && actCopyDocLSOR3==expCopyDocLSOR3
				&& actCopyDocMaxReleaseR3==expCopyDocMaxReleaseR3 && actCopyDocRateR3.equalsIgnoreCase(expCopyDocRateR3) && actCopyDocGrossR3.equalsIgnoreCase(expCopyDocGrossR3)
				&& actCopyDocBatchR3==expCopyDocBatchR3 && actCopyDocBinR3==expCopyDocBinR3 && actCopyDocRmaR3.equalsIgnoreCase(expCopyDocRmaR3)
				&& actCopyDocRemarksR3==expCopyDocRemarksR3

				&& actCopyDocItemR4.equalsIgnoreCase(expCopyDocItemR4) && actCopyDocUnitsR4.equalsIgnoreCase(expCopyDocUnitsR4) && actCopyDocRdR4.equalsIgnoreCase(expCopyDocRdR4)
				&& actCopyDocAqR4.equalsIgnoreCase(expCopyDocAqR4) && actCopyDocFqR4.equalsIgnoreCase(expCopyDocFqR4) && actCopyDocAvgRateR4.equalsIgnoreCase(expCopyDocAvgRateR4)
				&& actCopyDocAvgRateOR4.equalsIgnoreCase(expCopyDocAvgRateOR4) && actCopyDocQtyR4.equalsIgnoreCase(expCopyDocQtyR4) && actCopyDocLSOR4==expCopyDocLSOR4
				&& actCopyDocMaxReleaseR4==expCopyDocMaxReleaseR4 && actCopyDocRateR4.equalsIgnoreCase(expCopyDocRateR4) && actCopyDocGrossR4.equalsIgnoreCase(expCopyDocGrossR4)
				&& actCopyDocBatchR4==expCopyDocBatchR4 && actCopyDocBinR4==expCopyDocBinR4 && actCopyDocRmaR4==expCopyDocRmaR4
				&& actCopyDocRemarksR4==expCopyDocRemarksR4
				
				&& actCopyDocItemR5.equalsIgnoreCase(expCopyDocItemR5) && actCopyDocUnitsR5.equalsIgnoreCase(expCopyDocUnitsR5) && actCopyDocRdR5.equalsIgnoreCase(expCopyDocRdR5)
				&& actCopyDocAqR5.equalsIgnoreCase(expCopyDocAqR5) && actCopyDocFqR5.equalsIgnoreCase(expCopyDocFqR5) && actCopyDocAvgRateR5.equalsIgnoreCase(expCopyDocAvgRateR5)
				&& actCopyDocAvgRateOR5.equalsIgnoreCase(expCopyDocAvgRateOR5) && actCopyDocQtyR5.equalsIgnoreCase(expCopyDocQtyR5) && actCopyDocLSOR5==expCopyDocLSOR5
				&& actCopyDocMaxReleaseR5==expCopyDocMaxReleaseR5 && actCopyDocRateR5.equalsIgnoreCase(expCopyDocRateR5) && actCopyDocGrossR5.equalsIgnoreCase(expCopyDocGrossR5)
				&& actCopyDocBatchR5.equalsIgnoreCase(expCopyDocBatchR5) && actCopyDocBinR5==expCopyDocBinR5 && actCopyDocRmaR5==expCopyDocRmaR5
				&& actCopyDocRemarksR5==expCopyDocRemarksR5)
		{
			
			excelReader.setCellData(xlfile, xlSheetName, 79, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Copy Document Options Are NOT As Expected");
			excelReader.setCellData(xlfile, xlSheetName, 79, 9, resFail);
			return false;
		}
	}
	
	
	// Fails Issue Here
	public boolean checkLoadingVoucherInformationFromCopyDocumentOnClickOnOkInSalesInvoice() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cd_OkBtn));
		cd_OkBtn.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();
		
		// Actual
		
        boolean actLSOR1	=select1stRow_9thColumn.getText().isEmpty();
        boolean actLSOR2	=select2ndRow_9thColumn.getText().isEmpty();
        boolean actLSOR3	=select3rdRow_9thColumn.getText().isEmpty();
        boolean actLSOR4	=select4thRow_9thColumn.getText().isEmpty();
        boolean actLSOR5	=select5thRow_9thColumn.getText().isEmpty();
        
        // Expected
		
        boolean expLSOR1	=true;
        boolean expLSOR2	=true;
        boolean expLSOR3	=true;
        boolean expLSOR4	=true;
        boolean expLSOR5	=true;
        
        Thread.sleep(2000);
        
		
		System.out.println("************************************* checkLoadingVoucherInformationFromCopyDocumentOnClickOnOkInSalesInvoice  ********************************************");
		
		System.out.println("LSOR1 			: "+actLSOR1		+"  Value Expected : "+expLSOR1);
		System.out.println("LSOR2 			: "+actLSOR2		+"  Value Expected : "+expLSOR2);
		System.out.println("LSOR3 			: "+actLSOR3		+"  Value Expected : "+expLSOR3);
		System.out.println("LSOR4 			: "+actLSOR4		+"  Value Expected : "+expLSOR4);
		System.out.println("LSOR5 			: "+actLSOR5		+"  Value Expected : "+expLSOR5);
		
	    if(actLSOR1==expLSOR1 && actLSOR2==expLSOR2 && actLSOR3==expLSOR3 && actLSOR4==expLSOR4 && actLSOR5==expLSOR5)
		{
	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
	    	select1stRow_9thColumn.click();
			
	    	Thread.sleep(3000);
			
			List<WebElement> rowCountInLinkScreen1=LinkRowCount;
			
			int rowCount1=rowCountInLinkScreen1.size();
				
			System.out.println(rowCount1);
		     
			for (int i = 1; i <= rowCount1; i++) 
			{
				WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
				
				WebElement itemName=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[9]"));
		    	 
				String actvoucheno=voucherno.getText();
		    	 
				String actitemName=itemName.getText();
		    	 
				System.out.println(actvoucheno);
				
				System.out.println(actitemName);
		    	 
				if(actvoucheno.equalsIgnoreCase("SalOrd:11") && actitemName.equalsIgnoreCase("BATCH WA ITEM"))
				{
					Thread.sleep(2000);
					WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
					radioBtn.click();
		    		 
					break;
				}
			}
				
			Thread.sleep(2000);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
			workFlowOkBtn.click();
		     
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_9thColumn));
	    	select2ndRow_9thColumn.click();
			
	    	Thread.sleep(3000);
			
			List<WebElement> rowCountInLinkScreen2=LinkRowCount;
			
			int rowCount2=rowCountInLinkScreen2.size();
				
			System.out.println(rowCount2);
		     
			for (int i = 1; i <= rowCount2; i++) 
			{
				WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
				
				WebElement itemName=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[9]"));
		    	 
				String actvoucheno=voucherno.getText();
		    	 
				String actitemName=itemName.getText();
		    	 
				System.out.println(actvoucheno);
				
				System.out.println(actitemName);
		    	 
				if(actvoucheno.equalsIgnoreCase("SalOrd:11") && actitemName.equalsIgnoreCase("BIN FINISHED GOODS ITEM"))
				{
					Thread.sleep(2000);
					WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
					radioBtn.click();
		    		 
					break;
				}
			}
				
			Thread.sleep(2000);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
			workFlowOkBtn.click();
		     
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_9thColumn));
	    	select3rdRow_9thColumn.click();
			
	    	Thread.sleep(3000);
			
			List<WebElement> rowCountInLinkScreen3=LinkRowCount;
			
			int rowCount3=rowCountInLinkScreen3.size();
				
			System.out.println(rowCount3);
		     
			for (int i = 1; i <= rowCount3; i++) 
			{
				WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
				
				WebElement itemName=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[9]"));
		    	 
				String actvoucheno=voucherno.getText();
		    	 
				String actitemName=itemName.getText();
		    	 
				System.out.println(actvoucheno);
				
				System.out.println(actitemName);
		    	 
				if(actvoucheno.equalsIgnoreCase("SalOrd:11") && actitemName.equalsIgnoreCase("RMA RITEM"))
				{
					Thread.sleep(2000);
					WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
					radioBtn.click();
		    		 
					break;
				}
			}
				
			Thread.sleep(2000);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
			workFlowOkBtn.click();
		     
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_9thColumn));
	    	select4thRow_9thColumn.click();
			
	    	Thread.sleep(3000);
			
			List<WebElement> rowCountInLinkScreen4=LinkRowCount;
			
			int rowCount4=rowCountInLinkScreen4.size();
				
			System.out.println(rowCount4);
		     
			for (int i = 1; i <= rowCount4; i++) 
			{
				WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
				
				WebElement itemName=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[9]"));
		    	 
				String actvoucheno=voucherno.getText();
		    	 
				String actitemName=itemName.getText();
		    	 
				System.out.println(actvoucheno);
				
				System.out.println(actitemName);
		    	 
				if(actvoucheno.equalsIgnoreCase("SalOrd:11") && actitemName.equalsIgnoreCase("STOCK ITEM"))
				{
					Thread.sleep(2000);
					WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
					radioBtn.click();
		    		 
					break;
				}
			}
				
			Thread.sleep(2000);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
			workFlowOkBtn.click();
		     
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_9thColumn));
			select5thRow_9thColumn.click();
			
	    	Thread.sleep(3000);
			
			List<WebElement> rowCountInLinkScreen5=LinkRowCount;
			
			int rowCount5=rowCountInLinkScreen1.size();
				
			System.out.println(rowCount5);
		     
			for (int i = 1; i <= rowCount5; i++) 
			{
				WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
				
				WebElement itemName=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[9]"));
		    	 
				String actvoucheno=voucherno.getText();
		    	 
				String actitemName=itemName.getText();
		    	 
				System.out.println(actvoucheno);
				
				System.out.println(actitemName);
		    	 
				if(actvoucheno.equalsIgnoreCase("SalOrd:11") && actitemName.equalsIgnoreCase("BATCH BR ITEM"))
				{
					Thread.sleep(2000);
					WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
					radioBtn.click();
		    		 
					break;
				}
			}
				
			Thread.sleep(2000);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
			workFlowOkBtn.click();
		     
			Thread.sleep(2000);
			
			// Batch Bin Rma Selection
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
	    	select1stRow_13thColumn.click();
	    	
	    	Thread.sleep(2000);
	    	
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
			batchPickOnFIFOIcon.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_14thColumn));
	    	select2ndRow_14thColumn.click();
	    	
	    	Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
			binAutoAllocateBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
			binOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_15thColumn));
	    	select3rdRow_15thColumn.click();
	    	
	    	Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardExpandBtn));
			rmaoutwardExpandBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAHeaderChkBox));
			searchRMAHeaderChkBox.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAOkBtn));
			searchRMAOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardOkBtn));
			rmaoutwardOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_13thColumn));
	    	select5thRow_13thColumn.click();
	    	
	    	Thread.sleep(2000);
	    	
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
			batchPickOnFIFOIcon.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
			
			Thread.sleep(2000);
			
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
	    	select1stRow_9thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_LSalesOrders));
			enter_LSalesOrders.sendKeys(Keys.SPACE);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
			workFlowOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_9thColumn));
	    	select2ndRow_9thColumn.click();
			
	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_LSalesOrders));
			enter_LSalesOrders.sendKeys(Keys.SPACE);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
			workFlowOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_9thColumn));
	    	select3rdRow_9thColumn.click();
			
	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_LSalesOrders));
			enter_LSalesOrders.sendKeys(Keys.SPACE);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
			workFlowOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_9thColumn));
	    	select4thRow_9thColumn.click();
			
	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_LSalesOrders));
			enter_LSalesOrders.sendKeys(Keys.SPACE);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
			workFlowOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_9thColumn));
			select5thRow_9thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_LSalesOrders));
			enter_LSalesOrders.sendKeys(Keys.SPACE);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
			workFlowOkBtn.click();
			
			Thread.sleep(2000);
			
			// Batch Bin Rma Selection
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
	    	select1stRow_13thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
			batchPickOnFIFOIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_14thColumn));
	    	select2ndRow_14thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
			binAutoAllocateBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
			binOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_15thColumn));
	    	select3rdRow_15thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardExpandBtn));
			rmaoutwardExpandBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAHeaderChkBox));
			searchRMAHeaderChkBox.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAOkBtn));
			searchRMAOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardOkBtn));
			rmaoutwardOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_13thColumn));
			select5thRow_13thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
			batchPickOnFIFOIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
			
			Thread.sleep(2000);
			
			return false;
		}
	}
	
	
	
	

	public boolean checkSavingSalesInvoiceVoucherWithAllItemsThroughCopyDocument() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	    String docno=documentNumberTxt.getAttribute("value");
	    
	    Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
 		saveBtn.click();
 		
 		Thread.sleep(2000);
	
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(breakUpByTagTab));
 		breakUpByTagTab.click();
 		
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
 		billRefNewReferenceTxt.click();

 		
 		String actBillNewReference,actBillAmtAdjAgainstNewRefInOtherVouchers,actBillTransactionCurrency,actBillBaseCurrency,actBillLocalCurrency,actBillBalanceNewRefAmount,actBillBreakUpByTagDepartment,actBillBreakUpByTagBaseCurrency,actBillBreakUpByTagBillCurrency,actBillBreakUpByTagLocalCurrency,actBillAmtAdjustedInTransactionCurrency,actBillBalanceAmtToBeAdjustedInTransactionCurrency,act13;
 		String expBillNewReference,expBillAmtAdjAgainstNewRefInOtherVouchers,expBillTransactionCurrency,expBillBaseCurrency,expBillLocalCurrency,expBillBalanceNewRefAmount,expBillBreakUpByTagDepartment,expBillBreakUpByTagBaseCurrency,expBillBreakUpByTagBillCurrency,expBillBreakUpByTagLocalCurrency,expBillAmtAdjustedInTransactionCurrency,expBillBalanceAmtToBeAdjustedInTransactionCurrency;
 		
 		actBillNewReference									=billRefNewReferenceTxt.getAttribute("value");
 		actBillAmtAdjAgainstNewRefInOtherVouchers			=amtAdjustedAgainstNewREfinOtherVouchers.getText();
 		actBillTransactionCurrency							=transactionCurency.getText();
 		actBillBaseCurrency									=baseCurrency.getText();
 		actBillLocalCurrency								=localCurrencyDhs.getText();
 		
 		actBillBalanceNewRefAmount							=balanceNewReferenceAmt.getText();
 		
 		actBillBreakUpByTagDepartment						=breakUpByTagDepartment.getText();
 		actBillBreakUpByTagBaseCurrency						=breakUpByTagBaseCurrency.getText();
 		actBillBreakUpByTagBillCurrency						=breakUpByTagBillCurrency.getText();
 		
 		actBillBreakUpByTagLocalCurrency					=breakUpByTagBaseLocalCurrency.getText();
 		actBillAmtAdjustedInTransactionCurrency				=billRefAdjustAmountInTransCurency.getText();
 		actBillBalanceAmtToBeAdjustedInTransactionCurrency	=billRefBalanceAmountAdjustInTrnasCurrency.getText();
 		
 		
 		expBillNewReference									="0.00";
 		expBillAmtAdjAgainstNewRefInOtherVouchers			="0.00";
 		expBillTransactionCurrency							="50.00";
 		expBillBaseCurrency									="50.00";
 		expBillLocalCurrency								="3.50";
 		
 		expBillBalanceNewRefAmount							="0.00";
 		
 		expBillBreakUpByTagDepartment						="INDIA";
 		expBillBreakUpByTagBillCurrency						="50";
 		expBillBreakUpByTagBaseCurrency						="50.00";
 		
 		
 		expBillBreakUpByTagLocalCurrency					="3.50";
 		expBillAmtAdjustedInTransactionCurrency				="0";
 		expBillBalanceAmtToBeAdjustedInTransactionCurrency	="50.00";
 	

 		System.out.println("*********************************** checkSavingSalesInvoiceVoucherWithAllItemsThroughCopyDocument  ************************************");


 		System.out.println("actBillNewReference								   : "+ actBillNewReference									+" Value Expected : "+expBillNewReference);
 		System.out.println("actBillAmtAdjAgainstNewRefInOtherVouchers		   : "+actBillAmtAdjAgainstNewRefInOtherVouchers			+" Value Expected : "+expBillAmtAdjAgainstNewRefInOtherVouchers);
 		System.out.println("actBillTransactionCurrency						   : "+actBillTransactionCurrency							+" Value Expected : "+expBillTransactionCurrency);
 		System.out.println("actBillBaseCurrency								   : "+actBillBaseCurrency									+" Value Expected : "+ expBillBaseCurrency);
 		System.out.println("actBillLocalCurrency							   : "+actBillLocalCurrency									+" Value Expected : "+expBillLocalCurrency);
 		System.out.println("actBillBalanceNewRefAmount						   : "+ actBillBalanceNewRefAmount							+" Value Expected : "+expBillBalanceNewRefAmount);
        System.out.println("actBillBreakUpByTagDepartment					   : "+actBillBreakUpByTagDepartment						+" Value Expected : "+expBillBreakUpByTagDepartment);
 		System.out.println("actBillBreakUpByTagBaseCurrency				       : "+actBillBreakUpByTagBaseCurrency						+" Value Expected : "+expBillBreakUpByTagBaseCurrency);
 		System.out.println("actBillBreakUpByTagBillCurrency 				   : "+actBillBreakUpByTagBillCurrency						+" Value Expected : "+expBillBreakUpByTagBillCurrency);
 		System.out.println("actBillBreakUpByTagLocalCurrency				   : "+actBillBreakUpByTagLocalCurrency						+" Value Expected : "+expBillBreakUpByTagLocalCurrency);
 		System.out.println("actBillAmtAdjustedInTransactionCurrency			   : "+actBillAmtAdjustedInTransactionCurrency				+" Value Expected : "+expBillAmtAdjustedInTransactionCurrency);
 		System.out.println("actBillBalanceAmtToBeAdjustedInTransactionCurrency : "+actBillBalanceAmtToBeAdjustedInTransactionCurrency	+" Value Expected : "+expBillBalanceAmtToBeAdjustedInTransactionCurrency);
 		
 		   
 	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
	    billRefPickIcon.click();
	   
	    //pick button is click
	   
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(breakUpByTagTab));
 		breakUpByTagTab.click();
 		
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
 		billRefNewReferenceTxt.click();
 		
 		
 		String actBillNewReferencePick,actBillAmtAdjAgainstNewRefInOtherVouchersPick,actBillTransactionCurrencyPick,actBillBaseCurrencyPick,actBillLocalCurrencyPick,actBillBalanceNewRefAmountPick,actBillBreakUpByTagDepartmentPick,actBillBreakUpByTagBaseCurrencyPick,actBillBreakUpByTagBillCurrencyPick,actBillBreakUpByTagLocalCurrencyPick,actBillAmtAdjustedInTransactionCurrencyPick,actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick;
 		String expBillNewReferencePick,expBillAmtAdjAgainstNewRefInOtherVouchersPick,expBillTransactionCurrencyPick,expBillBaseCurrencyPick,expBillLocalCurrencyPick,expBillBalanceNewRefAmountPick,expBillBreakUpByTagDepartmentPick,expBillBreakUpByTagBaseCurrencyPick,expBillBreakUpByTagBillCurrencyPick,expBillBreakUpByTagLocalCurrencyPick,expBillAmtAdjustedInTransactionCurrencyPick,expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick;
 		
 		actBillNewReferencePick									=billRefNewReferenceTxt.getAttribute("value");
 		actBillAmtAdjAgainstNewRefInOtherVouchersPick			=amtAdjustedAgainstNewREfinOtherVouchers.getText();
 		actBillTransactionCurrencyPick							=transactionCurency.getText();
 		actBillBaseCurrencyPick									=baseCurrency.getText();
 		actBillLocalCurrencyPick								=localCurrencyDhs.getText();
 		
 		actBillBalanceNewRefAmountPick							=balanceNewReferenceAmt.getText();
 		
 		actBillBreakUpByTagDepartmentPick						=breakUpByTagDepartment.getText();
 		actBillBreakUpByTagBaseCurrencyPick						=breakUpByTagBaseCurrency.getText();
 		actBillBreakUpByTagBillCurrencyPick						=breakUpByTagBillCurrency.getText();
 		
 		actBillBreakUpByTagLocalCurrencyPick					=breakUpByTagBaseLocalCurrency.getText();
 		actBillAmtAdjustedInTransactionCurrencyPick				=billRefAdjustAmountInTransCurency.getText();
 		actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	=billRefBalanceAmountAdjustInTrnasCurrency.getText();
 		
 		
 		expBillNewReferencePick									="50.00";
 		expBillAmtAdjAgainstNewRefInOtherVouchersPick			="0.00";
 		expBillTransactionCurrencyPick							="50.00";
 		expBillBaseCurrencyPick									="50.00";
 		expBillLocalCurrencyPick								="3.50";
 		
 		expBillBalanceNewRefAmountPick							="50.00";
 		
 		expBillBreakUpByTagDepartmentPick						="INDIA";
 		expBillBreakUpByTagBillCurrencyPick						="50";
 		expBillBreakUpByTagBaseCurrencyPick						="50.00";
 		
 		
 		expBillBreakUpByTagLocalCurrencyPick					="3.50";
 		expBillAmtAdjustedInTransactionCurrencyPick				="50";
 		expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	="0.00";

 		System.out.println("actBillNewReferencePick 								: "+actBillNewReferencePick									+ " Value Expected : "+expBillNewReferencePick);
 		System.out.println("actBillAmtAdjAgainstNewRefInOtherVouchersPick			: " + actBillAmtAdjAgainstNewRefInOtherVouchersPick			+ "	Value Expected : "+expBillAmtAdjAgainstNewRefInOtherVouchersPick);
 		System.out.println("actBillTransactionCurrencyPick							: "+ actBillTransactionCurrencyPick							+ " Value Expected : "+expBillTransactionCurrencyPick);
 		System.out.println("actBillBaseCurrencyPick									: "+ actBillBaseCurrencyPick								+ " Value Expected : "+expBillBaseCurrencyPick);
 		System.out.println("actBillLocalCurrencyPick								: "+ actBillLocalCurrencyPick								+ " Value Expected : "+expBillLocalCurrencyPick);
 		System.out.println("actBillBalanceNewRefAmountPick							: "+ actBillBalanceNewRefAmountPick							+ " Value Expected : "+expBillBalanceNewRefAmountPick);
        System.out.println("actBillBreakUpByTagDepartmentPick						: "+ actBillBreakUpByTagDepartmentPick						+ " Value Expected : "+expBillBreakUpByTagDepartmentPick);
 		System.out.println("actBillBreakUpByTagBaseCurrencyPick						: "+ actBillBreakUpByTagBaseCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagBaseCurrencyPick);
 		System.out.println("actBillBreakUpByTagBillCurrencyPick						: "+ actBillBreakUpByTagBillCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagBillCurrencyPick);
 		System.out.println("actBillBreakUpByTagLocalCurrencyPick					: "+ actBillBreakUpByTagLocalCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagLocalCurrencyPick);
 		System.out.println("actBillAmtAdjustedInTransactionCurrencyPick				: "+ actBillAmtAdjustedInTransactionCurrencyPick			+ " Value Expected : "+expBillAmtAdjustedInTransactionCurrencyPick);
 		System.out.println("actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick  : "+ actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	+ " Value Expected : "+expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick);


 			    
 		Thread.sleep(2000);
 		
 	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
 	    Bill_OkBtn.click();
	   
 	   boolean savingMessage=checkVoucherSavingMessage(docno);
		
		System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));	
		new_CloseBtn.click();
		
		
		if(savingMessage==true  &&
				
		        actBillNewReference.equalsIgnoreCase(expBillNewReference) &&
 				actBillAmtAdjAgainstNewRefInOtherVouchers.equalsIgnoreCase(expBillAmtAdjAgainstNewRefInOtherVouchers) &&
 				actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 				
 				actBillBaseCurrency.equalsIgnoreCase(actBillBaseCurrency) &&
 				actBillLocalCurrency.equalsIgnoreCase(actBillLocalCurrency) &&
 				actBillBalanceNewRefAmount.equalsIgnoreCase(actBillBalanceNewRefAmount) &&
 				actBillBreakUpByTagDepartment.equalsIgnoreCase(actBillBreakUpByTagDepartment) &&
 				actBillBreakUpByTagBaseCurrency.equalsIgnoreCase(actBillBreakUpByTagBaseCurrency) &&
 				actBillBreakUpByTagBillCurrency.equalsIgnoreCase(actBillBreakUpByTagBillCurrency) &&
 				actBillBreakUpByTagLocalCurrency.equalsIgnoreCase(actBillBreakUpByTagLocalCurrency) &&
 				actBillAmtAdjustedInTransactionCurrency.equalsIgnoreCase(actBillAmtAdjustedInTransactionCurrency) &&
 				actBillBalanceAmtToBeAdjustedInTransactionCurrency.equalsIgnoreCase(actBillBalanceAmtToBeAdjustedInTransactionCurrency) &&
		
 				
 				actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) &&
 				actBillAmtAdjAgainstNewRefInOtherVouchersPick.equalsIgnoreCase(expBillAmtAdjAgainstNewRefInOtherVouchersPick) &&
 				actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) &&
 				actBillBaseCurrencyPick.equalsIgnoreCase(actBillBaseCurrencyPick) &&
 				actBillLocalCurrencyPick.equalsIgnoreCase(actBillLocalCurrencyPick) &&
 				actBillBalanceNewRefAmountPick.equalsIgnoreCase(actBillBalanceNewRefAmountPick) &&
 				actBillBreakUpByTagDepartmentPick.equalsIgnoreCase(actBillBreakUpByTagDepartmentPick) &&
 				actBillBreakUpByTagBaseCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagBaseCurrencyPick) &&
 				actBillBreakUpByTagBillCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagBillCurrencyPick) &&
 				actBillBreakUpByTagLocalCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagLocalCurrencyPick) &&
 				actBillAmtAdjustedInTransactionCurrencyPick.equalsIgnoreCase(actBillAmtAdjustedInTransactionCurrencyPick) &&
 				actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick.equalsIgnoreCase(actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick))
		{
		
			return true;
			
		}
		else
		{
			return false;
		}
	}
	
	
	
	public boolean checkSalesInvoiceVoucherHomePageDeleteOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
		grid_ChkBox1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteBtn));
		deleteBtn.click();
		
		getWaitForAlert();
		
		String actAlertMessage=getAlert().getText();
		
		String expAlertMessage="Are you sure that you want to delete the Selected Voucher?";
	
		System.out.println("Alert Message display on Delete the Vocher  :  "+actAlertMessage +"  "+expAlertMessage);
		
		if(actAlertMessage.contains(expAlertMessage))
		{
			System.out.println("Test Pass : Alert Poped After Clicking Delete");
			
			excelReader.setCellData(xlfile, xlSheetName, 64, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Alert NOT Poped After Clicking Delete");
			
			excelReader.setCellData(xlfile, xlSheetName, 64, 9, resFail);
			return false;
		}
	
	}
	
	public boolean checkSalesInvoiceVoucherCancelButtonInAlertOnDelete() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getAlert().dismiss();
		
		
		if(getIsAlertPresent()==false)
		{
			excelReader.setCellData(xlfile, xlSheetName, 65, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 65, 9, resFail);
			return false;
		}
	
	}
	
	
	
	public boolean checkSalesInvoiceVoucherOkButtonInAlertOnDelete() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteBtn));
		deleteBtn.click();
		
		getWaitForAlert();
		
		String actAlertMessage=getAlert().getText();
		
		String expAlertMessage="Are you sure that you want to delete the Selected Voucher?";
	
		System.out.println("Alert Message on Deleteing the Voucher :  "+actAlertMessage +"  "+expAlertMessage);
		
		getAlert().accept();
		
		
		String expErrorMessage="VoucherNo - 6: Voucher deleted Successfully";
		
		String validationMessage=checkValidationMessage(expErrorMessage);

		System.out.println("Message on Delete Voucher and Click on Ok button  :  "+validationMessage+"  "+expErrorMessage);
	
		if(actAlertMessage.contains(expAlertMessage) && validationMessage.equalsIgnoreCase(expErrorMessage))
		{
			System.out.println("Test Pass : Deleted Voucher");
			
			excelReader.setCellData(xlfile, xlSheetName, 66, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : NOT Deleted Voucher");
			
			excelReader.setCellData(xlfile, xlSheetName, 66, 9, resFail);
			return false;
		}
	}
	
	
	
	public boolean checkSalesInvoiceReleaseAllItemsWithReserveQtyThroughCopyAndPastefromClipBoard() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		/*Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
		finacinalsMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialTransactionSalesMenu));
		financialTransactionSalesMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoicesVoucher));
		salesInvoicesVoucher.click();*/
			
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
		getAction().doubleClick(grid_ChkBox1).build().perform();
		
		boolean loading=checkLoadingMessage();
		
		System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
		toggleBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(copyToClipBoardOption));
		copyToClipBoardOption.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_newBtn));
		new_newBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
		toggleBtn.click();

		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pasteFromClipBoardOption));
		pasteFromClipBoardOption.click();
		
		checkUserFriendlyMessage();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();
		
		// Actual
		
        boolean actLSOR1	=select1stRow_9thColumn.getText().isEmpty();
        boolean actLSOR2	=select2ndRow_9thColumn.getText().isEmpty();
        boolean actLSOR3	=select3rdRow_9thColumn.getText().isEmpty();
        boolean actLSOR4	=select4thRow_9thColumn.getText().isEmpty();
        boolean actLSOR5	=select5thRow_9thColumn.getText().isEmpty();
        
        // Expected
		
        boolean expLSOR1	=true;
        boolean expLSOR2	=true;
        boolean expLSOR3	=true;
        boolean expLSOR4	=true;
        boolean expLSOR5	=true;
        
        Thread.sleep(2000);
        
		
		System.out.println("************************************* checkLoadingVoucherInformationFromCopyDocumentOnClickOnOkInSalesInvoice  ********************************************");
		
		System.out.println("LSOR1 			: "+actLSOR1		+"  Value Expected : "+expLSOR1);
		System.out.println("LSOR2 			: "+actLSOR2		+"  Value Expected : "+expLSOR2);
		System.out.println("LSOR3 			: "+actLSOR3		+"  Value Expected : "+expLSOR3);
		System.out.println("LSOR4 			: "+actLSOR4		+"  Value Expected : "+expLSOR4);
		System.out.println("LSOR5 			: "+actLSOR5		+"  Value Expected : "+expLSOR5);
		
	    if(actLSOR1==expLSOR1 && actLSOR2==expLSOR2 && actLSOR3==expLSOR3 && actLSOR4==expLSOR4 && actLSOR5==expLSOR5)
		{
	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
	    	select1stRow_9thColumn.click();
			
	    	Thread.sleep(3000);
			
			List<WebElement> rowCountInLinkScreen1=LinkRowCount;
			
			int rowCount1=rowCountInLinkScreen1.size();
				
			System.out.println(rowCount1);
		     
			for (int i = 1; i <= rowCount1; i++) 
			{
				WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
				
				WebElement itemName=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[9]"));
		    	 
				String actvoucheno=voucherno.getText();
		    	 
				String actitemName=itemName.getText();
		    	 
				System.out.println(actvoucheno);
				
				System.out.println(actitemName);
		    	 
				if(actvoucheno.equalsIgnoreCase("SalOrd:11") && actitemName.equalsIgnoreCase("BATCH WA ITEM"))
				{
					Thread.sleep(2000);
					WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
					radioBtn.click();
		    		 
					break;
				}
			}
				
			Thread.sleep(2000);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
			workFlowOkBtn.click();
		     
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_9thColumn));
	    	select2ndRow_9thColumn.click();
			
	    	Thread.sleep(3000);
			
			List<WebElement> rowCountInLinkScreen2=LinkRowCount;
			
			int rowCount2=rowCountInLinkScreen2.size();
				
			System.out.println(rowCount2);
		     
			for (int i = 1; i <= rowCount2; i++) 
			{
				WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
				
				WebElement itemName=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[9]"));
		    	 
				String actvoucheno=voucherno.getText();
		    	 
				String actitemName=itemName.getText();
		    	 
				System.out.println(actvoucheno);
				
				System.out.println(actitemName);
		    	 
				if(actvoucheno.equalsIgnoreCase("SalOrd:11") && actitemName.equalsIgnoreCase("BIN FINISHED GOODS ITEM"))
				{
					Thread.sleep(2000);
					WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
					radioBtn.click();
		    		 
					break;
				}
			}
				
			Thread.sleep(2000);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
			workFlowOkBtn.click();
		     
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_9thColumn));
	    	select3rdRow_9thColumn.click();
			
	    	Thread.sleep(3000);
			
			List<WebElement> rowCountInLinkScreen3=LinkRowCount;
			
			int rowCount3=rowCountInLinkScreen3.size();
				
			System.out.println(rowCount3);
		     
			for (int i = 1; i <= rowCount3; i++) 
			{
				WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
				
				WebElement itemName=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[9]"));
		    	 
				String actvoucheno=voucherno.getText();
		    	 
				String actitemName=itemName.getText();
		    	 
				System.out.println(actvoucheno);
				
				System.out.println(actitemName);
		    	 
				if(actvoucheno.equalsIgnoreCase("SalOrd:11") && actitemName.equalsIgnoreCase("RMA RITEM"))
				{
					Thread.sleep(2000);
					WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
					radioBtn.click();
		    		 
					break;
				}
			}
				
			Thread.sleep(2000);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
			workFlowOkBtn.click();
		     
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_9thColumn));
	    	select4thRow_9thColumn.click();
			
	    	Thread.sleep(3000);
			
			List<WebElement> rowCountInLinkScreen4=LinkRowCount;
			
			int rowCount4=rowCountInLinkScreen4.size();
				
			System.out.println(rowCount4);
		     
			for (int i = 1; i <= rowCount4; i++) 
			{
				WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
				
				WebElement itemName=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[9]"));
		    	 
				String actvoucheno=voucherno.getText();
		    	 
				String actitemName=itemName.getText();
		    	 
				System.out.println(actvoucheno);
				
				System.out.println(actitemName);
		    	 
				if(actvoucheno.equalsIgnoreCase("SalOrd:11") && actitemName.equalsIgnoreCase("STOCK ITEM"))
				{
					Thread.sleep(2000);
					WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
					radioBtn.click();
		    		 
					break;
				}
			}
				
			Thread.sleep(2000);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
			workFlowOkBtn.click();
		     
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_9thColumn));
			select5thRow_9thColumn.click();
			
	    	Thread.sleep(3000);
			
			List<WebElement> rowCountInLinkScreen5=LinkRowCount;
			
			int rowCount5=rowCountInLinkScreen1.size();
				
			System.out.println(rowCount5);
		     
			for (int i = 1; i <= rowCount5; i++) 
			{
				WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
				
				WebElement itemName=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[9]"));
		    	 
				String actvoucheno=voucherno.getText();
		    	 
				String actitemName=itemName.getText();
		    	 
				System.out.println(actvoucheno);
				
				System.out.println(actitemName);
		    	 
				if(actvoucheno.equalsIgnoreCase("SalOrd:11") && actitemName.equalsIgnoreCase("BATCH BR ITEM"))
				{
					Thread.sleep(2000);
					WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
					radioBtn.click();
		    		 
					break;
				}
			}
				
			Thread.sleep(2000);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
			workFlowOkBtn.click();
		     
			Thread.sleep(2000);
			
			// Batch Bin Rma Selection
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
	    	select1stRow_13thColumn.click();
	    	
	    	Thread.sleep(2000);
	    	
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
			batchPickOnFIFOIcon.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_14thColumn));
	    	select2ndRow_14thColumn.click();
	    	
	    	Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
			binAutoAllocateBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
			binOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_15thColumn));
	    	select3rdRow_15thColumn.click();
	    	
	    	Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardExpandBtn));
			rmaoutwardExpandBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAHeaderChkBox));
			searchRMAHeaderChkBox.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAOkBtn));
			searchRMAOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardOkBtn));
			rmaoutwardOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_13thColumn));
	    	select5thRow_13thColumn.click();
	    	
	    	Thread.sleep(2000);
	    	
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
			batchPickOnFIFOIcon.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
			
			Thread.sleep(2000);
			
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
	    	select1stRow_9thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_LSalesOrders));
			enter_LSalesOrders.sendKeys(Keys.SPACE);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
			workFlowOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_9thColumn));
	    	select2ndRow_9thColumn.click();
			
	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_LSalesOrders));
			enter_LSalesOrders.sendKeys(Keys.SPACE);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
			workFlowOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_9thColumn));
	    	select3rdRow_9thColumn.click();
			
	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_LSalesOrders));
			enter_LSalesOrders.sendKeys(Keys.SPACE);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
			workFlowOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_9thColumn));
	    	select4thRow_9thColumn.click();
			
	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_LSalesOrders));
			enter_LSalesOrders.sendKeys(Keys.SPACE);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
			workFlowOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_9thColumn));
			select5thRow_9thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_LSalesOrders));
			enter_LSalesOrders.sendKeys(Keys.SPACE);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
			workFlowOkBtn.click();
			
			Thread.sleep(2000);
			
			// Batch Bin Rma Selection
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
	    	select1stRow_13thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
			batchPickOnFIFOIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_14thColumn));
	    	select2ndRow_14thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
			binAutoAllocateBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
			binOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_15thColumn));
	    	select3rdRow_15thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardExpandBtn));
			rmaoutwardExpandBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAHeaderChkBox));
			searchRMAHeaderChkBox.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAOkBtn));
			searchRMAOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardOkBtn));
			rmaoutwardOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_13thColumn));
			select5thRow_13thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
			batchPickOnFIFOIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
			
			Thread.sleep(2000);
			
			return false;
		}
	}
	
	
	
	
	

	public boolean checkSavingSalesInvoiceVoucherWithAllItemsReservation() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	    String docno=documentNumberTxt.getAttribute("value");
	    
	    Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
 		saveBtn.click();
 		
 		Thread.sleep(2000);
	
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(breakUpByTagTab));
 		breakUpByTagTab.click();
 		
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
 		billRefNewReferenceTxt.click();

 		
 		String actBillNewReference,actBillAmtAdjAgainstNewRefInOtherVouchers,actBillTransactionCurrency,actBillBaseCurrency,actBillLocalCurrency,actBillBalanceNewRefAmount,actBillBreakUpByTagDepartment,actBillBreakUpByTagBaseCurrency,actBillBreakUpByTagBillCurrency,actBillBreakUpByTagLocalCurrency,actBillAmtAdjustedInTransactionCurrency,actBillBalanceAmtToBeAdjustedInTransactionCurrency,act13;
 		String expBillNewReference,expBillAmtAdjAgainstNewRefInOtherVouchers,expBillTransactionCurrency,expBillBaseCurrency,expBillLocalCurrency,expBillBalanceNewRefAmount,expBillBreakUpByTagDepartment,expBillBreakUpByTagBaseCurrency,expBillBreakUpByTagBillCurrency,expBillBreakUpByTagLocalCurrency,expBillAmtAdjustedInTransactionCurrency,expBillBalanceAmtToBeAdjustedInTransactionCurrency;
 		
 		actBillNewReference									=billRefNewReferenceTxt.getAttribute("value");
 		actBillAmtAdjAgainstNewRefInOtherVouchers			=amtAdjustedAgainstNewREfinOtherVouchers.getText();
 		actBillTransactionCurrency							=transactionCurency.getText();
 		actBillBaseCurrency									=baseCurrency.getText();
 		actBillLocalCurrency								=localCurrencyDhs.getText();
 		
 		actBillBalanceNewRefAmount							=balanceNewReferenceAmt.getText();
 		
 		actBillBreakUpByTagDepartment						=breakUpByTagDepartment.getText();
 		actBillBreakUpByTagBaseCurrency						=breakUpByTagBaseCurrency.getText();
 		actBillBreakUpByTagBillCurrency						=breakUpByTagBillCurrency.getText();
 		
 		actBillBreakUpByTagLocalCurrency					=breakUpByTagBaseLocalCurrency.getText();
 		actBillAmtAdjustedInTransactionCurrency				=billRefAdjustAmountInTransCurency.getText();
 		actBillBalanceAmtToBeAdjustedInTransactionCurrency	=billRefBalanceAmountAdjustInTrnasCurrency.getText();
 		
 		
 		expBillNewReference									="0.00";
 		expBillAmtAdjAgainstNewRefInOtherVouchers			="0.00";
 		expBillTransactionCurrency							="50.00";
 		expBillBaseCurrency									="50.00";
 		expBillLocalCurrency								="3.50";
 		
 		expBillBalanceNewRefAmount							="0.00";
 		
 		expBillBreakUpByTagDepartment						="INDIA";
 		expBillBreakUpByTagBillCurrency						="50";
 		expBillBreakUpByTagBaseCurrency						="50.00";
 		
 		
 		expBillBreakUpByTagLocalCurrency					="3.50";
 		expBillAmtAdjustedInTransactionCurrency				="0";
 		expBillBalanceAmtToBeAdjustedInTransactionCurrency	="50.00";
 	

 		System.out.println("*********************************** checkSavingSalesInvoiceVoucherWithAllItemsThroughCopyDocument  ************************************");


 		System.out.println("actBillNewReference								   : "+ actBillNewReference									+" Value Expected : "+expBillNewReference);
 		System.out.println("actBillAmtAdjAgainstNewRefInOtherVouchers		   : "+actBillAmtAdjAgainstNewRefInOtherVouchers			+" Value Expected : "+expBillAmtAdjAgainstNewRefInOtherVouchers);
 		System.out.println("actBillTransactionCurrency						   : "+actBillTransactionCurrency							+" Value Expected : "+expBillTransactionCurrency);
 		System.out.println("actBillBaseCurrency								   : "+actBillBaseCurrency									+" Value Expected : "+ expBillBaseCurrency);
 		System.out.println("actBillLocalCurrency							   : "+actBillLocalCurrency									+" Value Expected : "+expBillLocalCurrency);
 		System.out.println("actBillBalanceNewRefAmount						   : "+ actBillBalanceNewRefAmount							+" Value Expected : "+expBillBalanceNewRefAmount);
        System.out.println("actBillBreakUpByTagDepartment					   : "+actBillBreakUpByTagDepartment						+" Value Expected : "+expBillBreakUpByTagDepartment);
 		System.out.println("actBillBreakUpByTagBaseCurrency				       : "+actBillBreakUpByTagBaseCurrency						+" Value Expected : "+expBillBreakUpByTagBaseCurrency);
 		System.out.println("actBillBreakUpByTagBillCurrency 				   : "+actBillBreakUpByTagBillCurrency						+" Value Expected : "+expBillBreakUpByTagBillCurrency);
 		System.out.println("actBillBreakUpByTagLocalCurrency				   : "+actBillBreakUpByTagLocalCurrency						+" Value Expected : "+expBillBreakUpByTagLocalCurrency);
 		System.out.println("actBillAmtAdjustedInTransactionCurrency			   : "+actBillAmtAdjustedInTransactionCurrency				+" Value Expected : "+expBillAmtAdjustedInTransactionCurrency);
 		System.out.println("actBillBalanceAmtToBeAdjustedInTransactionCurrency : "+actBillBalanceAmtToBeAdjustedInTransactionCurrency	+" Value Expected : "+expBillBalanceAmtToBeAdjustedInTransactionCurrency);
 		
 		   
 	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
	    billRefPickIcon.click();
	   
	    //pick button is click
	   
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(breakUpByTagTab));
 		breakUpByTagTab.click();
 		
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
 		billRefNewReferenceTxt.click();
 		
 		
 		String actBillNewReferencePick,actBillAmtAdjAgainstNewRefInOtherVouchersPick,actBillTransactionCurrencyPick,actBillBaseCurrencyPick,actBillLocalCurrencyPick,actBillBalanceNewRefAmountPick,actBillBreakUpByTagDepartmentPick,actBillBreakUpByTagBaseCurrencyPick,actBillBreakUpByTagBillCurrencyPick,actBillBreakUpByTagLocalCurrencyPick,actBillAmtAdjustedInTransactionCurrencyPick,actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick;
 		String expBillNewReferencePick,expBillAmtAdjAgainstNewRefInOtherVouchersPick,expBillTransactionCurrencyPick,expBillBaseCurrencyPick,expBillLocalCurrencyPick,expBillBalanceNewRefAmountPick,expBillBreakUpByTagDepartmentPick,expBillBreakUpByTagBaseCurrencyPick,expBillBreakUpByTagBillCurrencyPick,expBillBreakUpByTagLocalCurrencyPick,expBillAmtAdjustedInTransactionCurrencyPick,expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick;
 		
 		actBillNewReferencePick									=billRefNewReferenceTxt.getAttribute("value");
 		actBillAmtAdjAgainstNewRefInOtherVouchersPick			=amtAdjustedAgainstNewREfinOtherVouchers.getText();
 		actBillTransactionCurrencyPick							=transactionCurency.getText();
 		actBillBaseCurrencyPick									=baseCurrency.getText();
 		actBillLocalCurrencyPick								=localCurrencyDhs.getText();
 		
 		actBillBalanceNewRefAmountPick							=balanceNewReferenceAmt.getText();
 		
 		actBillBreakUpByTagDepartmentPick						=breakUpByTagDepartment.getText();
 		actBillBreakUpByTagBaseCurrencyPick						=breakUpByTagBaseCurrency.getText();
 		actBillBreakUpByTagBillCurrencyPick						=breakUpByTagBillCurrency.getText();
 		
 		actBillBreakUpByTagLocalCurrencyPick					=breakUpByTagBaseLocalCurrency.getText();
 		actBillAmtAdjustedInTransactionCurrencyPick				=billRefAdjustAmountInTransCurency.getText();
 		actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	=billRefBalanceAmountAdjustInTrnasCurrency.getText();
 		
 		
 		expBillNewReferencePick									="50.00";
 		expBillAmtAdjAgainstNewRefInOtherVouchersPick			="0.00";
 		expBillTransactionCurrencyPick							="50.00";
 		expBillBaseCurrencyPick									="50.00";
 		expBillLocalCurrencyPick								="3.50";
 		
 		expBillBalanceNewRefAmountPick							="50.00";
 		
 		expBillBreakUpByTagDepartmentPick						="INDIA";
 		expBillBreakUpByTagBillCurrencyPick						="50";
 		expBillBreakUpByTagBaseCurrencyPick						="50.00";
 		
 		
 		expBillBreakUpByTagLocalCurrencyPick					="3.50";
 		expBillAmtAdjustedInTransactionCurrencyPick				="50";
 		expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	="0.00";

 		System.out.println("actBillNewReferencePick 								: "+actBillNewReferencePick									+ " Value Expected : "+expBillNewReferencePick);
 		System.out.println("actBillAmtAdjAgainstNewRefInOtherVouchersPick			: " + actBillAmtAdjAgainstNewRefInOtherVouchersPick			+ "	Value Expected : "+expBillAmtAdjAgainstNewRefInOtherVouchersPick);
 		System.out.println("actBillTransactionCurrencyPick							: "+ actBillTransactionCurrencyPick							+ " Value Expected : "+expBillTransactionCurrencyPick);
 		System.out.println("actBillBaseCurrencyPick									: "+ actBillBaseCurrencyPick								+ " Value Expected : "+expBillBaseCurrencyPick);
 		System.out.println("actBillLocalCurrencyPick								: "+ actBillLocalCurrencyPick								+ " Value Expected : "+expBillLocalCurrencyPick);
 		System.out.println("actBillBalanceNewRefAmountPick							: "+ actBillBalanceNewRefAmountPick							+ " Value Expected : "+expBillBalanceNewRefAmountPick);
        System.out.println("actBillBreakUpByTagDepartmentPick						: "+ actBillBreakUpByTagDepartmentPick						+ " Value Expected : "+expBillBreakUpByTagDepartmentPick);
 		System.out.println("actBillBreakUpByTagBaseCurrencyPick						: "+ actBillBreakUpByTagBaseCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagBaseCurrencyPick);
 		System.out.println("actBillBreakUpByTagBillCurrencyPick						: "+ actBillBreakUpByTagBillCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagBillCurrencyPick);
 		System.out.println("actBillBreakUpByTagLocalCurrencyPick					: "+ actBillBreakUpByTagLocalCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagLocalCurrencyPick);
 		System.out.println("actBillAmtAdjustedInTransactionCurrencyPick				: "+ actBillAmtAdjustedInTransactionCurrencyPick			+ " Value Expected : "+expBillAmtAdjustedInTransactionCurrencyPick);
 		System.out.println("actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick  : "+ actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	+ " Value Expected : "+expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick);


 			    
 		
 	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
 	    Bill_OkBtn.click();
	   
 	   boolean savingMessage=checkVoucherSavingMessage(docno);
		
		System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));	
		new_CloseBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));	
		voucherhomeCloseBtn.click();
		
		if(savingMessage==true  &&
				
		        actBillNewReference.equalsIgnoreCase(expBillNewReference) &&
 				actBillAmtAdjAgainstNewRefInOtherVouchers.equalsIgnoreCase(expBillAmtAdjAgainstNewRefInOtherVouchers) &&
 				actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 				
 				actBillBaseCurrency.equalsIgnoreCase(actBillBaseCurrency) &&
 				actBillLocalCurrency.equalsIgnoreCase(actBillLocalCurrency) &&
 				actBillBalanceNewRefAmount.equalsIgnoreCase(actBillBalanceNewRefAmount) &&
 				actBillBreakUpByTagDepartment.equalsIgnoreCase(actBillBreakUpByTagDepartment) &&
 				actBillBreakUpByTagBaseCurrency.equalsIgnoreCase(actBillBreakUpByTagBaseCurrency) &&
 				actBillBreakUpByTagBillCurrency.equalsIgnoreCase(actBillBreakUpByTagBillCurrency) &&
 				actBillBreakUpByTagLocalCurrency.equalsIgnoreCase(actBillBreakUpByTagLocalCurrency) &&
 				actBillAmtAdjustedInTransactionCurrency.equalsIgnoreCase(actBillAmtAdjustedInTransactionCurrency) &&
 				actBillBalanceAmtToBeAdjustedInTransactionCurrency.equalsIgnoreCase(actBillBalanceAmtToBeAdjustedInTransactionCurrency) &&
		
 				
 				actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) &&
 				actBillAmtAdjAgainstNewRefInOtherVouchersPick.equalsIgnoreCase(expBillAmtAdjAgainstNewRefInOtherVouchersPick) &&
 				actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) &&
 				actBillBaseCurrencyPick.equalsIgnoreCase(actBillBaseCurrencyPick) &&
 				actBillLocalCurrencyPick.equalsIgnoreCase(actBillLocalCurrencyPick) &&
 				actBillBalanceNewRefAmountPick.equalsIgnoreCase(actBillBalanceNewRefAmountPick) &&
 				actBillBreakUpByTagDepartmentPick.equalsIgnoreCase(actBillBreakUpByTagDepartmentPick) &&
 				actBillBreakUpByTagBaseCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagBaseCurrencyPick) &&
 				actBillBreakUpByTagBillCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagBillCurrencyPick) &&
 				actBillBreakUpByTagLocalCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagLocalCurrencyPick) &&
 				actBillAmtAdjustedInTransactionCurrencyPick.equalsIgnoreCase(actBillAmtAdjustedInTransactionCurrencyPick) &&
 				actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick.equalsIgnoreCase(actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick))
		{
		
			
			
			return true;
			
		}
		else
		{
			
			return false;
		}
	}
	
	
	// Excess In Stock Starts From Here
	
	
	
	
	public boolean checkExcessInStocksVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsStocksMenu));
		inventoryTransactionsStocksMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(excessesInStocksVoucher));
		
    	boolean ExcessesInStocksVoucher       =excessesInStocksVoucher.isDisplayed();
    	
    	String actexcessesInStocksVoucher=Boolean.toString(ExcessesInStocksVoucher);
    	
    	String  expexcessesInStocksVoucher		 =excelReader.getCellData("SmokeExcessInStocks", 7, 7);
    	
    	excelReader.setCellData(xlfile, "SmokeExcessInStocks", 7, 8, actexcessesInStocksVoucher);
    	
    	
    	
    	System.out.println("****************************** checkExcessInStocksVoucher  ********************************************");
    	
		System.out.println("excessesInStocksVoucher          :"+actexcessesInStocksVoucher+" Value Expected : "+expexcessesInStocksVoucher);
		
		if(actexcessesInStocksVoucher.equalsIgnoreCase(expexcessesInStocksVoucher))
		{
			System.out.println("Test Pass : HomeScreen Options Are Displayed");
			excelReader.setCellData(xlfile, "SmokeExcessInStocks", 6, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : HomeScreen Options Are NOT Displayed");
			excelReader.setCellData(xlfile, "SmokeExcessInStocks", 6, 9, resFail);
			return false;
		}
	}
	
	@FindBy(xpath="//ul[@id='id_transaction_viewcontainer']//li[2]")
	private static WebElement  pendingSalesQuotationsView;

	

	public boolean checkExcessInStocksHomePage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(excessesInStocksVoucher));
		excessesInStocksVoucher.click();
		
		Thread.sleep(2000);
		checkDeleteLinkStatus();
		Thread.sleep(2000);
		
		try
		
		{
			
			System.out.println(" Entered Try Block");
		if (errorMessage.isDisplayed()==true) 
		{
			
			String ExpMessage=excelReader.getCellData("SmokeExcessInStocks", 8, 7);
			
			String validationMessage=checkValidationMessage(ExpMessage);
			
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
			miscellaneousTab.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateFAChkBox));
			updateFAChkBox.click();
			
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
			updateBtn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settings_closeBtn));
			settings_closeBtn.click();
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
	    	
			boolean actHomePageNewBtn         		=newBtn.isDisplayed();
			boolean actHomePageEditBtn        		=editBtn.isDisplayed();
			boolean actHomePagePrintBtn       		=printBtn.isDisplayed();
			boolean actHomePageDeleteBtn      		=deleteBtn.isDisplayed();
			boolean actHomePageSuspendBtn     		=suspendBtn.isDisplayed();
			boolean actHomePagePrintBarcodeBtn		=printBarCodeBtn.isDisplayed();
			boolean actHomePageExportXMLBtn   		=exportToXMLBtn.isDisplayed();
			boolean actHomePageSettingsBtn    		=settingsBtn.isDisplayed();
			boolean actHomePageCloseBtn       		=homeCloseBtn.isDisplayed();
			boolean actHomePageGridCheckBox   		=grid_HeaderChkBox.isDisplayed();
			boolean actHomePageSortingBtn     		=sortingBtn.isDisplayed();
			boolean actHomePageCreateViewBn   		=createViewBtn.isDisplayed();
			boolean actHomePageCustomizeBtn   		=customizeBtn.isDisplayed();
			boolean actHomePageFilterBtn      		=filterBtn.isDisplayed();
			boolean actHomePageRefreshBtn     		=refreshBtn.isDisplayed();
			boolean actHomePageOptionsBtn     		=optionsBtn.isDisplayed();
			boolean actHomePageExportBtn      		=exportBtn.isDisplayed();
			boolean actHomePageAllView        		=homePageAllVouchersView.isDisplayed();
			boolean actpendingSalesQuotationsView  	=pendingSalesQuotationsView.isDisplayed();
			

			boolean expHomePageNewBtn         		=true;
			boolean expHomePageEditBtn        		=true;
			boolean expHomePagePrintBtn       		=true;
			boolean expHomePageDeleteBtn      		=true;
			boolean expHomePageAuthorizeBtn   		=true;
			boolean expHomePageSuspendBtn     		=true;
			boolean expHomePageRejectBtn      		=true;
			boolean expHomePagePrintBarcodeBtn		=true;
			boolean expHomePageExportXMLBtn   		=true;
			boolean expHomePageSettingsBtn    		=true;
			boolean expHomePageCloseBtn       		=true;
			boolean expHomePageGridCheckBox   		=true;
			boolean expHomePageSortingBtn     		=true;
			boolean expHomePageCreateViewBn   		=true;
			boolean expHomePageCustomizeBtn   		=true;
			boolean expHomePageFilterBtn     		=true;
			boolean expHomePageRefreshBtn  		    =true;
			boolean expHomePageOptionsBtn  		    =true;
			boolean expHomePageExportBtn     		=true;
			boolean expHomePageAllView        		=true;
			boolean exppendingSalesQuotationsView  	=true;
			
			System.out.println("****************************** checkExcessInStocksHomePage  ********************************************");
			
			System.out.println("Home Page New Btn Value Actual           :"+actHomePageNewBtn			+"   Value Expected : "+expHomePageNewBtn);
			System.out.println("Home Page Edit Btn Value Actual          :"+actHomePageEditBtn			+"   Value Expected : "+expHomePageEditBtn);
			System.out.println("Home Page Print Btn Value Actual         :"+actHomePagePrintBtn			+"	 Value Expected : "+expHomePagePrintBtn);
			System.out.println("Home Page Delete Btn Value Actual        :"+actHomePageDeleteBtn		+"	 Value Expected : "+expHomePageDeleteBtn);
			System.out.println("Home Page Suspend Btn Value Actual       :"+actHomePageSuspendBtn		+"	 Value Expected : "+expHomePageSuspendBtn);
			System.out.println("Home Page Print Barcode Btn Value Actual :"+actHomePagePrintBarcodeBtn	+"	 Value Expected : "+expHomePagePrintBarcodeBtn);
			System.out.println("Home Page Export XML Btn Value Actual    :"+actHomePageExportXMLBtn		+"	 Value Expected : "+expHomePageExportXMLBtn);
			System.out.println("Home Page Settings Btn Value Actual      :"+actHomePageSettingsBtn		+"	 Value Expected : "+expHomePageSettingsBtn);
			System.out.println("Home Page Close Btn Value Actual         :"+actHomePageCloseBtn			+"	 Value Expected : "+expHomePageCloseBtn);
			System.out.println("Home Page Grid check Value Actual        :"+actHomePageGridCheckBox		+"	 Value Expected : "+expHomePageGridCheckBox);
			System.out.println("Home Page Sorting Btn Value Actual       :"+actHomePageSortingBtn		+"	 Value Expected : "+expHomePageSortingBtn);
			System.out.println("Home Page Create View Btn Value Actual   :"+actHomePageCreateViewBn		+"	 Value Expected : "+expHomePageCreateViewBn);
			System.out.println("Home Page Customize Btn Value Actual     :"+actHomePageCustomizeBtn		+"	 Value Expected : "+expHomePageCustomizeBtn);
			System.out.println("Home Page Filter check Value Actual      :"+actHomePageFilterBtn		+"	 Value Expected : "+expHomePageFilterBtn);
			System.out.println("Home Page Refesh Btn Value Actual        :"+actHomePageRefreshBtn		+"	 Value Expected : "+expHomePageRefreshBtn);
			System.out.println("Home Page Options Btn Value Actual       :"+actHomePageOptionsBtn		+"	 Value Expected : "+expHomePageOptionsBtn);
			System.out.println("Home Page Export Btn Value Actual        :"+actHomePageExportBtn		+"	 Value Expected : "+expHomePageExportBtn);
			System.out.println("Home Page All View Value Actual          :"+actHomePageExportBtn		+"	 Value Expected : "+expHomePageExportBtn);
			System.out.println("Home Page Pending SI View Value Actual   :"+actpendingSalesQuotationsView+"	 Value Expected : "+exppendingSalesQuotationsView);
			
			
			boolean result=actHomePageNewBtn==expHomePageNewBtn  && actHomePageEditBtn==expHomePageEditBtn && actHomePagePrintBtn==expHomePagePrintBtn
					&& actHomePageDeleteBtn==expHomePageDeleteBtn && actHomePageSuspendBtn==expHomePageSuspendBtn 
					&& actHomePagePrintBarcodeBtn==expHomePagePrintBarcodeBtn && actHomePageExportXMLBtn==expHomePageExportXMLBtn
					&& actHomePageSettingsBtn==expHomePageSettingsBtn && actHomePageCloseBtn==expHomePageCloseBtn && actHomePageGridCheckBox==expHomePageGridCheckBox
					&& actHomePageSortingBtn==expHomePageSortingBtn && actHomePageCreateViewBn==expHomePageCreateViewBn && actHomePageCustomizeBtn==expHomePageCustomizeBtn
					&& actHomePageFilterBtn==expHomePageFilterBtn && actHomePageRefreshBtn==expHomePageRefreshBtn && actHomePageOptionsBtn==expHomePageOptionsBtn
					&& actHomePageExportBtn==expHomePageExportBtn && actHomePageAllView==expHomePageAllView && actpendingSalesQuotationsView==exppendingSalesQuotationsView;
			
			
			String actDisplay =Boolean.toString(result);
			String expDislay=excelReader.getCellData("SmokeExcessInStocks", 9, 7);
	    	
	    	excelReader.setCellData(xlfile, "SmokeExcessInStocks", 9, 8, actDisplay);
			
	    	if(actDisplay.equalsIgnoreCase(expDislay))
	    	{
					System.out.println("Test Pass : HomeScreen Options Are Displayed");
					excelReader.setCellData(xlfile, "SmokeExcessInStocks", 8, 9, resPass);
					return true;
	    	}
				else
			{
					System.out.println("Test Fail : HomeScreen Options Are NOT Displayed");
					excelReader.setCellData(xlfile, "SmokeExcessInStocks", 8, 9, resFail);
					return false;
			}

			
		}
		}
		
		catch(Exception e)
		{
			System.out.println(" Entered Catch Block");
    	
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
    	
		boolean actHomePageNewBtn         		=newBtn.isDisplayed();
		boolean actHomePageEditBtn        		=editBtn.isDisplayed();
		boolean actHomePagePrintBtn       		=printBtn.isDisplayed();
		boolean actHomePageDeleteBtn      		=deleteBtn.isDisplayed();
		boolean actHomePageSuspendBtn     		=suspendBtn.isDisplayed();
		boolean actHomePagePrintBarcodeBtn		=printBarCodeBtn.isDisplayed();
		boolean actHomePageExportXMLBtn   		=exportToXMLBtn.isDisplayed();
		boolean actHomePageSettingsBtn    		=settingsBtn.isDisplayed();
		boolean actHomePageCloseBtn       		=homeCloseBtn.isDisplayed();
		boolean actHomePageGridCheckBox   		=grid_HeaderChkBox.isDisplayed();
		boolean actHomePageSortingBtn     		=sortingBtn.isDisplayed();
		boolean actHomePageCreateViewBn   		=createViewBtn.isDisplayed();
		boolean actHomePageCustomizeBtn   		=customizeBtn.isDisplayed();
		boolean actHomePageFilterBtn      		=filterBtn.isDisplayed();
		boolean actHomePageRefreshBtn     		=refreshBtn.isDisplayed();
		boolean actHomePageOptionsBtn     		=optionsBtn.isDisplayed();
		boolean actHomePageExportBtn      		=exportBtn.isDisplayed();
		boolean actHomePageAllView        		=homePageAllVouchersView.isDisplayed();
		boolean actpendingSalesQuotationsView  	=pendingSalesQuotationsView.isDisplayed();
		

		boolean expHomePageNewBtn         		=true;
		boolean expHomePageEditBtn        		=true;
		boolean expHomePagePrintBtn       		=true;
		boolean expHomePageDeleteBtn      		=true;
		boolean expHomePageAuthorizeBtn   		=true;
		boolean expHomePageSuspendBtn     		=true;
		boolean expHomePageRejectBtn      		=true;
		boolean expHomePagePrintBarcodeBtn		=true;
		boolean expHomePageExportXMLBtn   		=true;
		boolean expHomePageSettingsBtn    		=true;
		boolean expHomePageCloseBtn       		=true;
		boolean expHomePageGridCheckBox   		=true;
		boolean expHomePageSortingBtn     		=true;
		boolean expHomePageCreateViewBn   		=true;
		boolean expHomePageCustomizeBtn   		=true;
		boolean expHomePageFilterBtn     		=true;
		boolean expHomePageRefreshBtn  		    =true;
		boolean expHomePageOptionsBtn  		    =true;
		boolean expHomePageExportBtn     		=true;
		boolean expHomePageAllView        		=true;
		boolean exppendingSalesQuotationsView  	=true;
		
		System.out.println("****************************** checkExcessInStocksHomePage  ********************************************");
		
		System.out.println("Home Page New Btn Value Actual           :"+actHomePageNewBtn			+"   Value Expected : "+expHomePageNewBtn);
		System.out.println("Home Page Edit Btn Value Actual          :"+actHomePageEditBtn			+"   Value Expected : "+expHomePageEditBtn);
		System.out.println("Home Page Print Btn Value Actual         :"+actHomePagePrintBtn			+"	 Value Expected : "+expHomePagePrintBtn);
		System.out.println("Home Page Delete Btn Value Actual        :"+actHomePageDeleteBtn		+"	 Value Expected : "+expHomePageDeleteBtn);
		System.out.println("Home Page Suspend Btn Value Actual       :"+actHomePageSuspendBtn		+"	 Value Expected : "+expHomePageSuspendBtn);
		System.out.println("Home Page Print Barcode Btn Value Actual :"+actHomePagePrintBarcodeBtn	+"	 Value Expected : "+expHomePagePrintBarcodeBtn);
		System.out.println("Home Page Export XML Btn Value Actual    :"+actHomePageExportXMLBtn		+"	 Value Expected : "+expHomePageExportXMLBtn);
		System.out.println("Home Page Settings Btn Value Actual      :"+actHomePageSettingsBtn		+"	 Value Expected : "+expHomePageSettingsBtn);
		System.out.println("Home Page Close Btn Value Actual         :"+actHomePageCloseBtn			+"	 Value Expected : "+expHomePageCloseBtn);
		System.out.println("Home Page Grid check Value Actual        :"+actHomePageGridCheckBox		+"	 Value Expected : "+expHomePageGridCheckBox);
		System.out.println("Home Page Sorting Btn Value Actual       :"+actHomePageSortingBtn		+"	 Value Expected : "+expHomePageSortingBtn);
		System.out.println("Home Page Create View Btn Value Actual   :"+actHomePageCreateViewBn		+"	 Value Expected : "+expHomePageCreateViewBn);
		System.out.println("Home Page Customize Btn Value Actual     :"+actHomePageCustomizeBtn		+"	 Value Expected : "+expHomePageCustomizeBtn);
		System.out.println("Home Page Filter check Value Actual      :"+actHomePageFilterBtn		+"	 Value Expected : "+expHomePageFilterBtn);
		System.out.println("Home Page Refesh Btn Value Actual        :"+actHomePageRefreshBtn		+"	 Value Expected : "+expHomePageRefreshBtn);
		System.out.println("Home Page Options Btn Value Actual       :"+actHomePageOptionsBtn		+"	 Value Expected : "+expHomePageOptionsBtn);
		System.out.println("Home Page Export Btn Value Actual        :"+actHomePageExportBtn		+"	 Value Expected : "+expHomePageExportBtn);
		System.out.println("Home Page All View Value Actual          :"+actHomePageExportBtn		+"	 Value Expected : "+expHomePageExportBtn);
		System.out.println("Home Page Pending SI View Value Actual   :"+actpendingSalesQuotationsView+"	 Value Expected : "+exppendingSalesQuotationsView);
		
		
		boolean result=actHomePageNewBtn==expHomePageNewBtn  && actHomePageEditBtn==expHomePageEditBtn && actHomePagePrintBtn==expHomePagePrintBtn
				&& actHomePageDeleteBtn==expHomePageDeleteBtn && actHomePageSuspendBtn==expHomePageSuspendBtn 
				&& actHomePagePrintBarcodeBtn==expHomePagePrintBarcodeBtn && actHomePageExportXMLBtn==expHomePageExportXMLBtn
				&& actHomePageSettingsBtn==expHomePageSettingsBtn && actHomePageCloseBtn==expHomePageCloseBtn && actHomePageGridCheckBox==expHomePageGridCheckBox
				&& actHomePageSortingBtn==expHomePageSortingBtn && actHomePageCreateViewBn==expHomePageCreateViewBn && actHomePageCustomizeBtn==expHomePageCustomizeBtn
				&& actHomePageFilterBtn==expHomePageFilterBtn && actHomePageRefreshBtn==expHomePageRefreshBtn && actHomePageOptionsBtn==expHomePageOptionsBtn
				&& actHomePageExportBtn==expHomePageExportBtn && actHomePageAllView==expHomePageAllView && actpendingSalesQuotationsView==exppendingSalesQuotationsView;
		
		
		String actDisplay =Boolean.toString(result);
		String expDislay=excelReader.getCellData("SmokeExcessInStocks", 9, 7);
    	
    	excelReader.setCellData(xlfile, "SmokeExcessInStocks", 9, 8, actDisplay);
		
    	if(actDisplay.equalsIgnoreCase(expDislay))
    	{
				System.out.println("Test Pass : HomeScreen Options Are Displayed");
				excelReader.setCellData(xlfile, "SmokeExcessInStocks", 8, 9, resPass);
				return true;
    	}
			else
		{
				System.out.println("Test Fail : HomeScreen Options Are NOT Displayed");
				excelReader.setCellData(xlfile, "SmokeExcessInStocks", 8, 9, resFail);
				return false;
		}
	 }
		return false;
	}
	
	
	

	
	public boolean checkExcessInStocksEntryPage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		checkUserFriendlyMessage();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jumpToHeaderSectionBtn));

		boolean actEntryPageJumpToHeaderSectionBtn=jumpToHeaderSectionBtn.isDisplayed();
		boolean actEntryPageJumpToBodySectionBtn  =jumpToBodySectionBtn.isDisplayed();
		boolean actEntryPageJumpToFooterBtn       =jumpToFooterBtn.isDisplayed();
		boolean actEntryPageNewBtn                =new_newBtn.isDisplayed();
		boolean actEntryPageSaveBtn               =saveBtn.isDisplayed();
		boolean actEntryPagePreviousBtn           =previousBtn.isDisplayed();
		boolean actEntryPageNextBtn               =nextBtn.isDisplayed();
		boolean actEntryPagePrintBtn              =new_PrintBtn.isDisplayed();
		boolean actEntryPageSuspendBtn            =new_SuspendBtn.isDisplayed();
		boolean actEntryPageCloseBtn              =new_CloseBtn.isDisplayed();
		boolean actEntryPageToggleBtn             =toggleBtn.isDisplayed();

		
		boolean expEntryPageJumpToHeaderSectionBtn=true;
		boolean expEntryPageJumpToBodySectionBtn  =true;
		boolean expEntryPageJumpToFooterBtn       =true;
		boolean expEntryPageNewBtn	              =true;
		boolean expEntryPageSaveBtn               =true;
		boolean expEntryPagePreviousBtn           =true;
		boolean expEntryPageNextBtn               =true;
		boolean expEntryPagePrintBtn              =true;
		boolean expEntryPageSuspendBtn            =true;
		boolean expEntryPageCloseBtn              =true;
		boolean expEntryPageToggleBtn             =true;

		
		
		System.out.println("************************************* checkExcessInStocksEntryPage  ********************************************");
		
		System.out.println("Entry Page RC Jump to Header Value Actual:"+actEntryPageJumpToHeaderSectionBtn+"  Value Expected : "+expEntryPageJumpToHeaderSectionBtn);
		System.out.println("Entry Page RC Jump To Body Value Actual  :"+actEntryPageJumpToBodySectionBtn  +"  Value Expected : "+expEntryPageJumpToBodySectionBtn);
		System.out.println("Entry Page RC Jump To Footer Value Actual:"+actEntryPageJumpToFooterBtn       +"  Value Expected : "+expEntryPageJumpToFooterBtn);
		System.out.println("Entry Page RC New Btn Value Actual       :"+actEntryPageNewBtn                +"  Value Expected : "+expEntryPageNewBtn);
		System.out.println("Entry Page RC Save Btn Value Actual      :"+actEntryPageSaveBtn               +"  Value Expected : "+expEntryPageSaveBtn);
		System.out.println("Entry Page RC Previous Btn Value Actual  :"+actEntryPagePreviousBtn           +"  Value Expected : "+expEntryPagePreviousBtn);
		System.out.println("Entry Page RC Next Btn Value Actual      :"+actEntryPageNextBtn               +"  Value Expected : "+expEntryPageNextBtn);
		System.out.println("Entry Page RC Print Btn Value Actual     :"+actEntryPagePrintBtn              +"  Value Expected : "+expEntryPagePrintBtn);
		System.out.println("Entry Page RC Suspend Btn Value Actual   :"+actEntryPageSuspendBtn            +"  Value Expected : "+expEntryPageSuspendBtn);
		System.out.println("Entry Page RC Close Btn Value Actual     :"+actEntryPageCloseBtn              +"  Value Expected : "+expEntryPageCloseBtn);
		System.out.println("Entry Page RC Toggle Btn Value Actual    :"+actEntryPageToggleBtn             +"  Value Expected : "+expEntryPageToggleBtn);
		
		
		
		boolean result=actEntryPageJumpToHeaderSectionBtn==expEntryPageJumpToHeaderSectionBtn && actEntryPageJumpToBodySectionBtn==expEntryPageJumpToBodySectionBtn 
				&& actEntryPageJumpToFooterBtn==expEntryPageJumpToFooterBtn && actEntryPageJumpToFooterBtn==expEntryPageJumpToFooterBtn
				&& actEntryPageNewBtn==expEntryPageNewBtn && actEntryPageSaveBtn==expEntryPageSaveBtn && actEntryPagePreviousBtn==expEntryPagePreviousBtn
				&& actEntryPageNextBtn==expEntryPageNextBtn && actEntryPagePrintBtn==expEntryPagePrintBtn &&actEntryPageSuspendBtn==expEntryPageSuspendBtn 
				&& actEntryPageCloseBtn==expEntryPageCloseBtn && actEntryPageToggleBtn==expEntryPageToggleBtn ;
		
		
		String actDisplay =Boolean.toString(result);
		String expDislay=excelReader.getCellData("SmokeExcessInStocks", 11, 7);
    	
    	excelReader.setCellData(xlfile, "SmokeExcessInStocks", 11, 8, actDisplay);
		
    	if(actDisplay.equalsIgnoreCase(expDislay))
		{
			System.out.println("Test Pass : Entry Page Options Are Displayed");
			excelReader.setCellData(xlfile, "SmokeExcessInStocks", 10, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Entry Page NOT Displayed");
			excelReader.setCellData(xlfile, "SmokeExcessInStocks", 10, 9, resFail);
			return false;
		}
	}
	
	
	
	
	

	public boolean checkExcessInStocksEntryPageHeaderFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		
		// Actual
		boolean actDocumentNumberTxt        	 =documentNumberTxt.isDisplayed();
		boolean actDateTxt                  	 =dateTxt.isDisplayed();
		boolean actexcessesinStocks_NarrationTxt =excessesinStocks_NarrationTxt.isDisplayed();
		
		// Expected
		boolean expDocumentNumberTxt      	     =true;
		boolean expDateTxt                   	 =true;
		boolean expexcessesinStocks_NarrationTxt =true;
		
		
		System.out.println("************************************* checkExcessInStocksEntryPageHeaderFields  ********************************************");
		
		System.out.println("Entry Page Header Value Actual    :"+actDocumentNumberTxt+         " Value Expected : "+expDocumentNumberTxt);
		System.out.println("Entry Page Header Value Actual    :"+actDateTxt+                   " Value Expected : "+expDateTxt);
		System.out.println("Entry Page Header Value Actual    :"+actexcessesinStocks_NarrationTxt+ " Value Expected : "+expexcessesinStocks_NarrationTxt);
		

		boolean result=actDocumentNumberTxt==expDocumentNumberTxt && actDateTxt==expDateTxt && actexcessesinStocks_NarrationTxt==expexcessesinStocks_NarrationTxt ;
		
		
		String actDisplay =Boolean.toString(result);
		String expDisplay=excelReader.getCellData("SmokeExcessInStocks", 13, 7);
    	
    	excelReader.setCellData(xlfile, "SmokeExcessInStocks", 13, 8, actDisplay);
		
		
		
		if(actDisplay.equalsIgnoreCase(expDisplay))			     
		
		{
			System.out.println("Test Pass : entry Page Header Options Are Displayed");
			excelReader.setCellData(xlfile, "SmokeExcessInStocks", 12, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, "SmokeExcessInStocks", 12, 9, resFail);
			return false;
		}
	}
	
	

	@FindBy(xpath="//div[contains(text(),'L-Sales Quotations')]")
	private static WebElement voucherBodyLinkSalesQuotations;
	
		
	public boolean checkExcessInStocksEntryPageBodyFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		
        // Actual
		boolean actBodyWareHouseName    			=voucherBodyWareHouseName.isDisplayed();
		boolean actBodyItemName         			=voucherBodyItemName.isDisplayed();
		boolean actBodyUnitName         			=voucherBodyUnitsName.isDisplayed();
		boolean actBodyQtyName          			=voucherBodyQtyName.isDisplayed();
		boolean actvoucherBodyLinkSalesQuotations 	=voucherBodyLinkSalesQuotations.isDisplayed();
					
		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("arguments[0].scrollIntoView();", voucherBodyRMAName);
		
		boolean actBodyRate             =voucherBodyRateName.isDisplayed();
		boolean actBodyGross            =voucherBodyGrossName.isDisplayed();
		boolean actBodyBatch            =voucherBodyBatchName.isDisplayed();
		boolean actBodyBins             =voucherBodyBinsName.isDisplayed();
		boolean actBodyExpirydate       =voucherBodyExpirytDateName.isDisplayed();
		boolean actBodyRMA              =voucherBodyRMAName.isDisplayed();
		

		
		// Expected
		
		boolean expBodyWareHouseName				=true; 
		boolean expBodyItemName						=true; 
		boolean expBodyUnitName						=true;
		boolean expBodyQtyName						=true;
		boolean expvoucherBodyLinkSalesQuotations	=true;
		boolean expBodyRateName						=true;
		boolean expBodyGrossName					=true;
		boolean expBodyBatchName					=true;
		boolean expBodyBinsName						=true;
		boolean expBodyExpirydate					=true;
		boolean expBodyRMA							=true;
		
		
		System.out.println("************************************* checkExcessInStocksEntryPageBodyFields  ********************************************");
		
		System.out.println("Entry Page Body Value Actual    :"+actBodyWareHouseName					+ " Value Expected : "+expBodyWareHouseName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyItemName						+ " Value Expected : "+expBodyItemName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyUnitName						+ " Value Expected : "+expBodyUnitName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyQtyName						+ " Value Expected : "+expBodyQtyName);
		System.out.println("Entry Page Body Value Actual    :"+actvoucherBodyLinkSalesQuotations 	+ " Value Expected : "+expvoucherBodyLinkSalesQuotations);
		System.out.println("Entry Page Body Value Actual    :"+actBodyRate							+ " Value Expected : "+expBodyRateName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyGross							+ " Value Expected : "+expBodyGrossName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyBatch							+ " Value Expected : "+expBodyBatchName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyBins							+ " Value Expected : "+expBodyBinsName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyExpirydate					+ " Value Expected : "+expBodyExpirydate);
		System.out.println("Entry Page Body Value Actual    :"+actBodyRMA							+ " Value Expected : "+expBodyRMA);
		
		
		
		boolean result=actBodyWareHouseName==expBodyWareHouseName && actBodyItemName==expBodyItemName && actBodyUnitName==expBodyUnitName && actBodyQtyName==expBodyQtyName
		&& actvoucherBodyLinkSalesQuotations==expvoucherBodyLinkSalesQuotations && actBodyRate==expBodyQtyName && actBodyGross==expBodyGrossName
		&& actBodyBatch==expBodyBatchName && actBodyBins==expBodyBinsName && actBodyExpirydate==expBodyExpirydate && actBodyRMA==expBodyRMA ;
		
		
		String actDisplay =Boolean.toString(result);
		String expDisplay=excelReader.getCellData("SmokeExcessInStocks", 15, 7);
    	
    	excelReader.setCellData(xlfile, "SmokeExcessInStocks", 15, 8, actDisplay);
		
		
		
		
		if(actDisplay.equalsIgnoreCase(expDisplay) )
		{
			
			System.out.println(" Test Pass: Displayed Entry page Body Fileds ");
			excelReader.setCellData(xlfile, "SmokeExcessInStocks", 14, 9, resPass);
			
			js.executeScript("arguments[0].scrollIntoView();", voucherBodyHeaderIndex);
			
			return true;
		}
		else 
		{
			System.out.println(" Test Fail:  Not Displayed Entry page Body Fileds ");
			excelReader.setCellData(xlfile, "SmokeExcessInStocks", 14, 9, resFail);
			
			js.executeScript("arguments[0].scrollIntoView();", voucherBodyHeaderIndex);
			
			return false;
		}
			
	}

		
		


	public boolean checkExcessInStocksEntryPageFooterFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jumpToFooterBtn));
		jumpToFooterBtn.click();
		

		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(netLabel));
		
		boolean actEntryPageFooterFieldsNetLabel  =netLabel.isDisplayed();
		boolean actEntryPageFooterFieldsNetAmount =netAmount.isDisplayed();

		boolean expEntryPageFooterFieldsNetLabel  =true;
		boolean expEntryPageFooterFieldsNetAmount =true;

		System.out.println("**************************************** checkExcessInStocksEntryPageFooterFields  ***************************************************");
		
		System.out.println("Entry Page Footer Fields Net Label Value Actual  : "+actEntryPageFooterFieldsNetLabel+"   Value Expected : "+expEntryPageFooterFieldsNetLabel);
		System.out.println("Entry Page Footer Fields Net Amount Value Actual : "+actEntryPageFooterFieldsNetAmount+"  Value Expected : "+expEntryPageFooterFieldsNetAmount);

		boolean result = actEntryPageFooterFieldsNetLabel==expEntryPageFooterFieldsNetLabel && actEntryPageFooterFieldsNetAmount==expEntryPageFooterFieldsNetAmount;
		
		
		String actDisplay=Boolean.toString(result);
		String expDisplay=excelReader.getCellData("SmokeExcessInStocks", 17, 7);
    	
    	excelReader.setCellData(xlfile, "SmokeExcessInStocks", 17, 8, actDisplay);
		
		
		
		if(actDisplay.equalsIgnoreCase(expDisplay))
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, "SmokeExcessInStocks", 16, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, "SmokeExcessInStocks", 16, 9, resFail);
			return false;
		}


	}


	public boolean checkSavingVoucherWithoutInputDATA() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		

		String ExpMessage=excelReader.getCellData("SmokeExcessInStocks", 19, 7);
		
		String validationMessage=checkValidationMessage(ExpMessage);
		
		excelReader.setCellData(xlfile, "SmokeExcessInStocks", 19, 8, validationMessage);
		
		
		if(validationMessage.equalsIgnoreCase(ExpMessage))
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, "SmokeExcessInStocks", 18, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, "SmokeExcessInStocks", 18, 9, resFail);
			return false;
		}

	}	
	
	public boolean checkExcessStockLessthanAccountingDate() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();
		documentNumberTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.sendKeys(Keys.ARROW_LEFT,Keys.END);
		Thread.sleep(2000);
		dateTxt.sendKeys(Keys.BACK_SPACE);
		dateTxt.sendKeys(Keys.BACK_SPACE);
		
		

		String ExpMessage=excelReader.getCellData("SmokeExcessInStocks", 21, 7);
		
		String validationMessage=checkValidationMessage(ExpMessage);
		
		excelReader.setCellData(xlfile, "SmokeExcessInStocks", 21, 8, validationMessage);
		
		
		if(validationMessage.equalsIgnoreCase(ExpMessage))
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, "SmokeExcessInStocks", 20, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, "SmokeExcessInStocks", 20, 9, resFail);
			return false;
		}

	}	
	
	
	
	
	
	
	public boolean checkSavingexcessInStocksVoucherWithALLItems() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_newBtn));
		new_newBtn.click();
		
		
		// First Row STD RATe Cogs 	item
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.SPACE);
			
		int warehousecount=pvwareHouseListCount.size();
		
		System.err.println(warehousecount);
			
		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=pvwareHouseListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData("SmokeExcessInStocks", 23, 6)))
			{
				pvwareHouseListCount.get(i).click();
				
				break;
			}
		}
			
		pvWareHouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData("SmokeExcessInStocks", 24, 6)))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(excelReader.getCellData("SmokeExcessInStocks", 25, 6));
		Thread.sleep(2000);
		enter_Quantity.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData("SmokeExcessInStocks", 26, 6));
		Thread.sleep(2000);
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		
		
		//Enter Secound  Line for BR COgs 	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		select2ndRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount2=itemListCount.size();
		
		System.err.println(itemcount2);
			
		for(int i=0 ; i < itemcount2 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData("SmokeExcessInStocks", 27, 6)))
			{
				itemListCount.get(i).click();
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(excelReader.getCellData("SmokeExcessInStocks", 28, 6));
		Thread.sleep(2000);
		enter_Quantity.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData("SmokeExcessInStocks", 29, 6));
		Thread.sleep(2000);
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys(excelReader.getCellData("SmokeExcessInStocks", 30, 6));
		Thread.sleep(2000);
		enter_Batch.sendKeys(Keys.TAB);
		
		// Thrid  Row  FIFo Cogs Item 
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
		select3rdRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount3=itemListCount.size();
		
		System.err.println(itemcount3);
			
		for(int i=0 ; i < itemcount3 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData("SmokeExcessInStocks", 31, 6)))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(excelReader.getCellData("SmokeExcessInStocks", 32, 6));
		Thread.sleep(2000);
		enter_Quantity.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData("SmokeExcessInStocks", 33, 6));
		Thread.sleep(2000);
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchBtn));
		binSearchBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
		binAutoAllocateBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
		binOkBtn.click();
		
		// fourth Row Rma ritem
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount4=itemListCount.size();
		
		System.err.println(itemcount4);
			
		for(int i=0 ; i < itemcount4 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData("SmokeExcessInStocks", 34, 6)))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(excelReader.getCellData("SmokeExcessInStocks", 35, 6));
		Thread.sleep(2000);
		enter_Quantity.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData("SmokeExcessInStocks", 36, 6));
		Thread.sleep(2000);
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaSerialNumberTxtField));
		rmaSerialNumberTxtField.click();
		rmaSerialNumberTxtField.sendKeys(excelReader.getCellData("SmokeExcessInStocks", 37, 6));
		

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaAddBtn));
		rmaAddBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaOkBtn));
		rmaOkBtn.click();
		
				
		Thread.sleep(2000);
		
		String docno=documentNumberTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		

		boolean savingMessage=checkVoucherSavingMessage(docno);
		
		
		String actMessage=Boolean.toString(savingMessage);
		String expMessage=excelReader.getCellData("SmokeExcessInStocks", 38, 7);
		
		excelReader.setCellData(xlfile, "SmokeExcessInStocks", 38, 8, actMessage);
				
		
		System.out.println("actMessage   : "+actMessage  +" Value Expected : "+expMessage);
		
		System.out.println("************************************* checkSavingexcessInStocksVoucherWithAllItems  ********************************************");
		
		System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
		
		if(savingMessage==true)
		{
			System.out.println("Test Pass : Voucher Saved Successfully");
			excelReader.setCellData(xlfile, "SmokeExcessInStocks", 22, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Voucher Not Saved");
			excelReader.setCellData(xlfile, "SmokeExcessInStocks", 22, 9, resFail);
			return false;
		}
		
		
	}
	
	

	public boolean checkSavedExcessInStocksVoucherPrevious() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    {
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();
		
		boolean loading=checkLoadingMessage();
		
		System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_footerExpandBtn));
		new_footerExpandBtn.click();
		
    
		// Actual
		
		String actdocumentNumberTxt				=documentNumberTxt.getAttribute("value");
		String actdateTxt						=dateTxt.getAttribute("value");
		
        String actBodyWarehouseValueR1			=select1stRow_1stColumn.getText();
        String actBodyItemValueR1				=select1stRow_2ndColumn.getText();
        String actBodyUnitsValueR1				=select1stRow_3rdColumn.getText();
        String actBodyQtyValueR1				=select1stRow_4thColumn.getText();
        boolean actBodyLExcessInStocksValueR1	=select1stRow_5thColumn.getText().isEmpty();
        String actBodyRateValueR1				=select1stRow_6thColumn.getText();
        String actBodyGrossValueR1				=select1stRow_7thColumn.getText();
        boolean actBodyBatchValueR1				=select1stRow_8thColumn.getText().isEmpty();
        boolean actBodyBinsValueR1				=select1stRow_9thColumn.getText().isEmpty();
        boolean actBodyexpiryValueR1			=select1stRow_10thColumn.getText().isEmpty();
        boolean actBodyRmaValueR1				=select1stRow_11thColumn.getText().isEmpty();
        
        String actBodyWarehouseValueR2			=select2ndRow_1stColumn.getText();
        String actBodyItemValueR2				=select2ndRow_2ndColumn.getText();
        String actBodyUnitsValueR2				=select2ndRow_3rdColumn.getText();
        String actBodyQtyValueR2				=select2ndRow_4thColumn.getText();
        boolean actBodyLExcessInStocksValueR2	=select2ndRow_5thColumn.getText().isEmpty();
        String actBodyRateValueR2				=select2ndRow_6thColumn.getText();
        String actBodyGrossValueR2				=select2ndRow_7thColumn.getText();
        String actBodyBatchValueR2				=select2ndRow_8thColumn.getText();
        boolean actBodyBinsValueR2				=select2ndRow_9thColumn.getText().isEmpty();
        String actBodyexpiryValueR2			    =select2ndRow_10thColumn.getText();
        boolean actBodyRmaValueR2				=select2ndRow_11thColumn.getText().isEmpty();
        
        
        String actBodyWarehouseValueR3			=select3rdRow_1stColumn.getText();
        String actBodyItemValueR3				=select3rdRow_2ndColumn.getText();
        String actBodyUnitsValueR3				=select3rdRow_3rdColumn.getText();
        String actBodyQtyValueR3				=select3rdRow_4thColumn.getText();
        boolean actBodyLExcessInStocksValueR3	=select3rdRow_5thColumn.getText().isEmpty();
        String actBodyRateValueR3				=select3rdRow_6thColumn.getText();
        String actBodyGrossValueR3				=select3rdRow_7thColumn.getText();
        boolean actBodyBatchValueR3				=select3rdRow_8thColumn.getText().isEmpty();
        String actBodyBinsValueR3				=select3rdRow_9thColumn.getText();
        boolean actBodyexpiryValueR3			=select3rdRow_10thColumn.getText().isEmpty();
        boolean actBodyRmaValueR3				=select3rdRow_11thColumn.getText().isEmpty();
        
        
        String actBodyWarehouseValueR4			=select4thRow_1stColumn.getText();
        String actBodyItemValueR4				=select4thRow_2ndColumn.getText();
        String actBodyUnitsValueR4				=select4thRow_3rdColumn.getText();
        String actBodyQtyValueR4				=select4thRow_4thColumn.getText();
        boolean actBodyLExcessInStocksValueR4	=select4thRow_5thColumn.getText().isEmpty();
        String actBodyRateValueR4				=select4thRow_6thColumn.getText();
        String actBodyGrossValueR4				=select4thRow_7thColumn.getText();
        boolean actBodyBatchValueR4				=select4thRow_8thColumn.getText().isEmpty();
        boolean actBodyBinsValueR4				=select4thRow_9thColumn.getText().isEmpty();
        boolean actBodyexpiryValueR4			=select4thRow_10thColumn.getText().isEmpty();
        String actBodyRmaValueR4				=select4thRow_11thColumn.getText();
       
        
        String actQtyAmount						=QtyAmount.getText();
        String actGrossAmount					=GrossAmount.getText();
        String actnetAmount						=netAmount.getText();
        
        
        DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Date date=new Date();
		System.out.println(df.format(date));
		
		
        // Expected
		
        String expdocumentNumberTxt				=excelReader.getCellData("SmokeExcessInStocks", 40, 7);
		String expdateTxt						=df.format(date);
		
		excelReader.setCellData(xlfile, "SmokeExcessInStocks", 40, 8, actdocumentNumberTxt);
		excelReader.setCellData(xlfile, "SmokeExcessInStocks", 41, 8, actdateTxt);
		excelReader.setCellData(xlfile, "SmokeExcessInStocks", 41, 7, expdateTxt);
		
		String expBodyWarehouseValueR1			=excelReader.getCellData("SmokeExcessInStocks", 42, 7);
        String expBodyItemValueR1				=excelReader.getCellData("SmokeExcessInStocks", 43, 7);
        String expBodyUnitsValueR1				=excelReader.getCellData("SmokeExcessInStocks", 44, 7);
        String expBodyQtyValueR1				=excelReader.getCellData("SmokeExcessInStocks", 45, 7);
        boolean expBodyLExcessInStocksValueR1	=true;
        String expBodyRateValueR1				=excelReader.getCellData("SmokeExcessInStocks", 46, 7);
        String expBodyGrossValueR1				=excelReader.getCellData("SmokeExcessInStocks", 47, 7);
        boolean expBodyBatchValueR1				=true;
        boolean expBodyBinsValueR1				=true;
        boolean expBodyexpiryValueR1			=true;
        boolean expBodyRmaValueR1				=true;
		
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 42, 8, actBodyWarehouseValueR1);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 43, 8, actBodyItemValueR1);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 44, 8, actBodyUnitsValueR1);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 45, 8, actBodyQtyValueR1);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 46, 8, actBodyRateValueR1);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 47, 8, actBodyGrossValueR1);
        
        
        
        
        String expBodyWarehouseValueR2			=excelReader.getCellData("SmokeExcessInStocks", 48, 7);
        String expBodyItemValueR2				=excelReader.getCellData("SmokeExcessInStocks", 49, 7);
        String expBodyUnitsValueR2				=excelReader.getCellData("SmokeExcessInStocks", 50, 7);
        String expBodyQtyValueR2				=excelReader.getCellData("SmokeExcessInStocks", 51, 7);
        boolean expBodyLExcessInStocksValueR2	=true;
        String expBodyRateValueR2				=excelReader.getCellData("SmokeExcessInStocks", 52, 7);
        String expBodyGrossValueR2				=excelReader.getCellData("SmokeExcessInStocks", 53, 7);
        String expBodyBatchValueR2				=excelReader.getCellData("SmokeExcessInStocks", 54, 7);
        boolean expBodyBinsValueR2				=true;
        String expBodyexpiryValueR2				=df.format(date);
        boolean expBodyRmaValueR2				=true;
        
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 48, 8, actBodyWarehouseValueR2);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 49, 8, actBodyItemValueR2);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 50, 8, actBodyUnitsValueR2);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 51, 8, actBodyQtyValueR2);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 52, 8, actBodyRateValueR2);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 53, 8, actBodyGrossValueR2);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 54, 8, actBodyBatchValueR2);
        
        
        String expBodyWarehouseValueR3			=excelReader.getCellData("SmokeExcessInStocks", 55, 7);
        String expBodyItemValueR3				=excelReader.getCellData("SmokeExcessInStocks", 56, 7);
        String expBodyUnitsValueR3				=excelReader.getCellData("SmokeExcessInStocks", 57, 7);
        String expBodyQtyValueR3				=excelReader.getCellData("SmokeExcessInStocks", 58, 7);
        boolean expBodyLExcessInStocksValueR3	=true;
        String expBodyRateValueR3				=excelReader.getCellData("SmokeExcessInStocks", 59, 7);
        String expBodyGrossValueR3				=excelReader.getCellData("SmokeExcessInStocks", 60, 7);
        boolean expBodyBatchValueR3				=true;
        String expBodyBinsValueR3				=excelReader.getCellData("SmokeExcessInStocks", 61, 7);
        boolean expBodyexpiryValueR3			=true;
        boolean expBodyRmaValueR3				=true;
        
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 55, 8, actBodyWarehouseValueR3);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 56, 8, actBodyItemValueR3);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 57, 8, actBodyUnitsValueR3);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 58, 8, actBodyQtyValueR3);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 59, 8, actBodyRateValueR3);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 60, 8, actBodyGrossValueR3);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 61, 8, actBodyBinsValueR3);
        
        
        
        
        String expBodyWarehouseValueR4			=excelReader.getCellData("SmokeExcessInStocks", 62, 7);
        String expBodyItemValueR4				=excelReader.getCellData("SmokeExcessInStocks", 63, 7);
        String expBodyUnitsValueR4				=excelReader.getCellData("SmokeExcessInStocks", 64, 7);
        String expBodyQtyValueR4				=excelReader.getCellData("SmokeExcessInStocks", 65, 7);
        boolean expBodyLExcessInStocksValueR4	=true;
        String expBodyRateValueR4				=excelReader.getCellData("SmokeExcessInStocks", 66, 7);;
        String expBodyGrossValueR4				=excelReader.getCellData("SmokeExcessInStocks", 67, 7);
        boolean expBodyBatchValueR4				=true;
        boolean expBodyBinsValueR4				=true;
        boolean expBodyexpiryValueR4			=true;
        String expBodyRmaValueR4				=excelReader.getCellData("SmokeExcessInStocks", 68, 7);
        
       
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 62, 8, actBodyWarehouseValueR4);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 63, 8, actBodyItemValueR4);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 63, 8, actBodyUnitsValueR4);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 65, 8, actBodyQtyValueR4);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 66, 8, actBodyRateValueR4);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 67, 8, actBodyGrossValueR4);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 68, 8, actBodyRmaValueR4);
        
        String expQtyAmount						=excelReader.getCellData("SmokeExcessInStocks", 69, 7);
        String expGrossAmount					=excelReader.getCellData("SmokeExcessInStocks", 70, 7);
        String expnetAmount						=excelReader.getCellData("SmokeExcessInStocks", 71, 7);
        
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 69, 8, actQtyAmount);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 70, 8, actGrossAmount);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 71, 8, actnetAmount);
        
        
		
		System.out.println("************************************* checkSavedExcessInStocksVoucherPrevious  ********************************************");
		
		System.out.println("documentNumberTxt 				: "+actdocumentNumberTxt			+"  Value Expected : "+expdocumentNumberTxt);
		System.out.println("dateTxt 						: "+actdateTxt						+"  Value Expected : "+expdateTxt);
		
		System.out.println("BodyWarehouseValueR1 			: "+actBodyWarehouseValueR1			+"  Value Expected : "+expBodyWarehouseValueR1);
		System.out.println("BodyItemValueR1 				: "+actBodyItemValueR1				+"  Value Expected : "+expBodyItemValueR1);
		System.out.println("BodyUnitsValueR1 				: "+actBodyUnitsValueR1				+"  Value Expected : "+expBodyUnitsValueR1);
		System.out.println("BodyQtyValueR1 					: "+actBodyQtyValueR1				+"  Value Expected : "+expBodyQtyValueR1);
		System.out.println("BodyLExcessInStocksValueR1 		: "+actBodyLExcessInStocksValueR1	+"  Value Expected : "+expBodyLExcessInStocksValueR1);
		System.out.println("BodyRateValueR1 				: "+actBodyRateValueR1				+"  Value Expected : "+expBodyRateValueR1);
		System.out.println("BodyGrossValueR1 				: "+actBodyGrossValueR1				+"  Value Expected : "+expBodyGrossValueR1);
		System.out.println("BodyBatchValueR1 				: "+actBodyBatchValueR1				+"  Value Expected : "+expBodyBatchValueR1);
		System.out.println("BodyBinsValueR1 				: "+actBodyBinsValueR1				+"  Value Expected : "+expBodyBinsValueR1);
		System.out.println("BodyexpiryValueR1 				: "+actBodyexpiryValueR1			+"  Value Expected : "+expBodyexpiryValueR1);
		System.out.println("BodyRmaValueR1 					: "+actBodyRmaValueR1				+"  Value Expected : "+expBodyRmaValueR1);
		
		System.out.println("BodyWarehouseValueR2 			: "+actBodyWarehouseValueR2			+"  Value Expected : "+expBodyWarehouseValueR2);
		System.out.println("BodyItemValueR2 				: "+actBodyItemValueR2				+"  Value Expected : "+expBodyItemValueR2);
		System.out.println("BodyUnitsValueR2 				: "+actBodyUnitsValueR2				+"  Value Expected : "+expBodyUnitsValueR2);
		System.out.println("BodyQtyValueR2 					: "+actBodyQtyValueR2				+"  Value Expected : "+expBodyQtyValueR2);
		System.out.println("BodyLExcessInStocksValueR2 		: "+actBodyLExcessInStocksValueR2	+"  Value Expected : "+expBodyLExcessInStocksValueR2);
		System.out.println("BodyRateValueR2 				: "+actBodyRateValueR2				+"  Value Expected : "+expBodyRateValueR2);
		System.out.println("BodyGrossValueR2 				: "+actBodyGrossValueR2				+"  Value Expected : "+expBodyGrossValueR2);
		System.out.println("BodyBatchValueR2 				: "+actBodyBatchValueR2				+"  Value Expected : "+expBodyBatchValueR2);
		System.out.println("BodyBinsValueR2 				: "+actBodyBinsValueR2				+"  Value Expected : "+expBodyBinsValueR2);
		System.out.println("BodyexpiryValueR2 				: "+actBodyexpiryValueR2			+"  Value Expected : "+expBodyexpiryValueR2);
		System.out.println("BodyRmaValueR2 					: "+actBodyRmaValueR2				+"  Value Expected : "+expBodyRmaValueR2);
		
		System.out.println("BodyWarehouseValueR3 			: "+actBodyWarehouseValueR3			+"  Value Expected : "+expBodyWarehouseValueR3);
		System.out.println("BodyItemValueR3 				: "+actBodyItemValueR3				+"  Value Expected : "+expBodyItemValueR3);
		System.out.println("BodyUnitsValueR3 				: "+actBodyUnitsValueR3				+"  Value Expected : "+expBodyUnitsValueR3);
		System.out.println("BodyQtyValueR3 					: "+actBodyQtyValueR3				+"  Value Expected : "+expBodyQtyValueR3);
		System.out.println("BodyLExcessInStocksValueR3 		: "+actBodyLExcessInStocksValueR3	+"  Value Expected : "+expBodyLExcessInStocksValueR3);
		System.out.println("BodyRateValueR3 				: "+actBodyRateValueR3				+"  Value Expected : "+expBodyRateValueR3);
		System.out.println("BodyGrossValueR3 				: "+actBodyGrossValueR3				+"  Value Expected : "+expBodyGrossValueR3);
		System.out.println("BodyBatchValueR3 				: "+actBodyBatchValueR3				+"  Value Expected : "+expBodyBatchValueR3);
		System.out.println("BodyBinsValueR3 				: "+actBodyBinsValueR3				+"  Value Expected : "+expBodyBinsValueR3);
		System.out.println("BodyexpiryValueR3 				: "+actBodyexpiryValueR3			+"  Value Expected : "+expBodyexpiryValueR3);
		System.out.println("BodyRmaValueR3 					: "+actBodyRmaValueR3				+"  Value Expected : "+expBodyRmaValueR3);
		
		System.out.println("BodyWarehouseValueR4 			: "+actBodyWarehouseValueR4			+"  Value Expected : "+expBodyWarehouseValueR4);
		System.out.println("BodyItemValueR4 				: "+actBodyItemValueR4				+"  Value Expected : "+expBodyItemValueR4);
		System.out.println("BodyUnitsValueR4 				: "+actBodyUnitsValueR4				+"  Value Expected : "+expBodyUnitsValueR4);
		System.out.println("BodyQtyValueR4 					: "+actBodyQtyValueR4				+"  Value Expected : "+expBodyQtyValueR4);
		System.out.println("BodyLExcessInStocksValueR4 		: "+actBodyLExcessInStocksValueR4	+"  Value Expected : "+expBodyLExcessInStocksValueR4);
		System.out.println("BodyRateValueR4 				: "+actBodyRateValueR4				+"  Value Expected : "+expBodyRateValueR4);
		System.out.println("BodyGrossValueR4 				: "+actBodyGrossValueR4				+"  Value Expected : "+expBodyGrossValueR4);
		System.out.println("BodyBatchValueR4 				: "+actBodyBatchValueR4				+"  Value Expected : "+expBodyBatchValueR4);
		System.out.println("BodyBinsValueR4 				: "+actBodyBinsValueR4				+"  Value Expected : "+expBodyBinsValueR4);
		System.out.println("BodyexpiryValueR4 				: "+actBodyexpiryValueR4			+"  Value Expected : "+expBodyexpiryValueR4);
		System.out.println("BodyRmaValueR4 					: "+actBodyRmaValueR4				+"  Value Expected : "+expBodyRmaValueR4);
		
		
		
		System.out.println("QtyAmount 						: "+actQtyAmount					+"  Value Expected : "+expQtyAmount);
		System.out.println("GrossAmount 					: "+actGrossAmount					+"  Value Expected : "+expGrossAmount);
		System.out.println("netAmount 						: "+actnetAmount					+"  Value Expected : "+expnetAmount);
		
		if(actdocumentNumberTxt.equalsIgnoreCase(expdocumentNumberTxt) && actdateTxt.equalsIgnoreCase(expdateTxt)
				
				&& actBodyWarehouseValueR1.equalsIgnoreCase(expBodyWarehouseValueR1) && actBodyItemValueR1.equalsIgnoreCase(expBodyItemValueR1)
	    		&& actBodyUnitsValueR1.equalsIgnoreCase(expBodyUnitsValueR1) && actBodyQtyValueR1.equalsIgnoreCase(expBodyQtyValueR1)
	    		&& actBodyLExcessInStocksValueR1==expBodyLExcessInStocksValueR1 && actBodyRateValueR1.equalsIgnoreCase(expBodyRateValueR1)
	    		&& actBodyGrossValueR1.equalsIgnoreCase(expBodyGrossValueR1) && actBodyBatchValueR1==expBodyBatchValueR1
	    		&& actBodyBinsValueR1==expBodyBinsValueR1 && actBodyexpiryValueR1==expBodyexpiryValueR1 && actBodyRmaValueR1==expBodyRmaValueR1
	    		
				&& actBodyWarehouseValueR2.equalsIgnoreCase(expBodyWarehouseValueR2) && actBodyItemValueR2.equalsIgnoreCase(expBodyItemValueR2)
	    		&& actBodyUnitsValueR2.equalsIgnoreCase(expBodyUnitsValueR2) && actBodyQtyValueR2.equalsIgnoreCase(expBodyQtyValueR2)
	    		&& actBodyLExcessInStocksValueR2==expBodyLExcessInStocksValueR2 && actBodyRateValueR2.equalsIgnoreCase(expBodyRateValueR2)
	    		&& actBodyGrossValueR2.equalsIgnoreCase(expBodyGrossValueR2) && actBodyBatchValueR2.equalsIgnoreCase(expBodyBatchValueR2)
	    		&& actBodyBinsValueR2==expBodyBinsValueR2 && actBodyexpiryValueR2.equalsIgnoreCase(expBodyexpiryValueR2) && actBodyRmaValueR2==expBodyRmaValueR2
	    				
	    		&& actBodyWarehouseValueR3.equalsIgnoreCase(expBodyWarehouseValueR3) && actBodyItemValueR3.equalsIgnoreCase(expBodyItemValueR3)
	    		&& actBodyUnitsValueR3.equalsIgnoreCase(expBodyUnitsValueR3) && actBodyQtyValueR3.equalsIgnoreCase(expBodyQtyValueR3)
	    		&& actBodyLExcessInStocksValueR3==expBodyLExcessInStocksValueR3 && actBodyRateValueR3.equalsIgnoreCase(expBodyRateValueR3)
	    		&& actBodyGrossValueR3.equalsIgnoreCase(expBodyGrossValueR3) && actBodyBatchValueR3==expBodyBatchValueR3
	    		&& actBodyBinsValueR3.equalsIgnoreCase(expBodyBinsValueR3) && actBodyexpiryValueR3==expBodyexpiryValueR3 && actBodyRmaValueR3==expBodyRmaValueR3
	    				
	    		&& actBodyWarehouseValueR4.equalsIgnoreCase(expBodyWarehouseValueR4) && actBodyItemValueR4.equalsIgnoreCase(expBodyItemValueR4)
	    		&& actBodyUnitsValueR4.equalsIgnoreCase(expBodyUnitsValueR4) && actBodyQtyValueR4.equalsIgnoreCase(expBodyQtyValueR4)
	    		&& actBodyLExcessInStocksValueR4==expBodyLExcessInStocksValueR4 && actBodyRateValueR4.equalsIgnoreCase(expBodyRateValueR4)
	    		&& actBodyGrossValueR4.equalsIgnoreCase(expBodyGrossValueR4) && actBodyBatchValueR4==expBodyBatchValueR4
	    		&& actBodyBinsValueR4==expBodyBinsValueR4 && actBodyexpiryValueR4==expBodyexpiryValueR4 && actBodyRmaValueR4.equalsIgnoreCase(expBodyRmaValueR4)

	    		&& actQtyAmount.equalsIgnoreCase(expQtyAmount) && actGrossAmount.equalsIgnoreCase(expGrossAmount)
	    		&& actnetAmount.equalsIgnoreCase(expnetAmount))
		{
			System.out.println(" Displayed Values As Expected ");
			 excelReader.setCellData(xlfile, "SmokeExcessInStocks", 39, 8, resPass);
			return true;
		}
		else
		{
			System.out.println(" Not Displayes Values As  Expected ");
			 excelReader.setCellData(xlfile, "SmokeExcessInStocks", 39, 8, resFail);
			return false;
		}
    }
	
	
	
	
	
	

	
	
	
	
	public boolean checkEntryPageSuspendOptionInExcessInStocksVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(3000);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	    String docno=documentNumberTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();
		
		boolean savingMessage=checkVoucherSavingMessage(docno);
		
		
		String actMessage=Boolean.toString(savingMessage);
		String expMessage=excelReader.getCellData("SmokeExcessInStocks", 73, 7);
		
		excelReader.setCellData(xlfile, "SmokeExcessInStocks", 73, 8, actMessage);
		
		
		System.out.println("actMessage   : "+actMessage  +" Value Expected  : "+expMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(suspendStatusRow1));
		
		String actsuspendStatusRow1HomePage	=suspendStatusRow1.getText();
		String expsuspendStatusRow1HomePage	=excelReader.getCellData("SmokeExcessInStocks", 74, 7);
		
		excelReader.setCellData(xlfile, "SmokeExcessInStocks", 74, 8, actsuspendStatusRow1HomePage);
		
		System.out.println("actsuspendStatusRow1HomePage   : "+actsuspendStatusRow1HomePage  +" Value Expected  : "+expsuspendStatusRow1HomePage);
		
		
		System.out.println("************************************* checkEntryPageSuspendOptionInExcessInStocksVoucher  *********************************");
		
		System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
		
		if(savingMessage==true)
		{
			System.out.println("Test Pass : Error Message is Displayed ");
			excelReader.setCellData(xlfile, "SmokeExcessInStocks", 72, 9, resPass);
			
					
			return true;
		}
		
		else
		{
			System.out.println("Test Fail :  Error Message is  not Displayed ");
		     excelReader.setCellData(xlfile, "SmokeExcessInStocks", 72, 9, resFail);
			
			
			return false;
		}
	}
	

	public boolean checkCopyToPasteClipBoardOptionInExcessInStocks() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
         Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
		getAction().doubleClick(grid_ChkBox1).build().perform();
		
		boolean loading=checkLoadingMessage();
		
		System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
		toggleBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(copyToClipBoardOption));
		copyToClipBoardOption.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_newBtn));
		new_newBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
		toggleBtn.click();

		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pasteFromClipBoardOption));
		pasteFromClipBoardOption.click();
		
		checkUserFriendlyMessage();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();

		

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_footerExpandBtn));
		new_footerExpandBtn.click();
		
    
		// Actual
		
		String actdocumentNumberTxt				=documentNumberTxt.getAttribute("value");
		String actdateTxt						=dateTxt.getAttribute("value");
		
        String actBodyWarehouseValueR1			=select1stRow_1stColumn.getText();
        String actBodyItemValueR1				=select1stRow_2ndColumn.getText();
        String actBodyUnitsValueR1				=select1stRow_3rdColumn.getText();
        String actBodyQtyValueR1				=select1stRow_4thColumn.getText();
        boolean actBodyLExcessInStocksValueR1	=select1stRow_5thColumn.getText().isEmpty();
        String actBodyRateValueR1				=select1stRow_6thColumn.getText();
        String actBodyGrossValueR1				=select1stRow_7thColumn.getText();
       
        
        String actBodyWarehouseValueR2			=select2ndRow_1stColumn.getText();
        String actBodyItemValueR2				=select2ndRow_2ndColumn.getText();
        String actBodyUnitsValueR2				=select2ndRow_3rdColumn.getText();
        String actBodyQtyValueR2				=select2ndRow_4thColumn.getText();
        boolean actBodyLExcessInStocksValueR2	=select2ndRow_5thColumn.getText().isEmpty();
        String actBodyRateValueR2				=select2ndRow_6thColumn.getText();
        String actBodyGrossValueR2				=select2ndRow_7thColumn.getText();
       
        
        String actBodyWarehouseValueR3			=select3rdRow_1stColumn.getText();
        String actBodyItemValueR3				=select3rdRow_2ndColumn.getText();
        String actBodyUnitsValueR3				=select3rdRow_3rdColumn.getText();
        String actBodyQtyValueR3				=select3rdRow_4thColumn.getText();
        boolean actBodyLExcessInStocksValueR3	=select3rdRow_5thColumn.getText().isEmpty();
        String actBodyRateValueR3				=select3rdRow_6thColumn.getText();
        String actBodyGrossValueR3				=select3rdRow_7thColumn.getText();
        
        
        
        String actBodyWarehouseValueR4			=select4thRow_1stColumn.getText();
        String actBodyItemValueR4				=select4thRow_2ndColumn.getText();
        String actBodyUnitsValueR4				=select4thRow_3rdColumn.getText();
        String actBodyQtyValueR4				=select4thRow_4thColumn.getText();
        boolean actBodyLExcessInStocksValueR4	=select4thRow_5thColumn.getText().isEmpty();
        String actBodyRateValueR4				=select4thRow_6thColumn.getText();
        String actBodyGrossValueR4				=select4thRow_7thColumn.getText();
       
        String actQtyAmount						=QtyAmount.getText();
        String actGrossAmount					=GrossAmount.getText();
        String actnetAmount						=netAmount.getText();
        
        
        DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Date date=new Date();
		System.out.println(df.format(date));
		
		
        // Expected
		
        String expdocumentNumberTxt				=excelReader.getCellData("SmokeExcessInStocks", 76, 7);
		String expdateTxt						=df.format(date);
		
		excelReader.setCellData(xlfile, "SmokeExcessInStocks", 76, 8, actdocumentNumberTxt);
		excelReader.setCellData(xlfile, "SmokeExcessInStocks", 77, 8, actdateTxt);
		excelReader.setCellData(xlfile, "SmokeExcessInStocks", 77, 7, expdateTxt);
		
		String expBodyWarehouseValueR1			=excelReader.getCellData("SmokeExcessInStocks", 79, 7);
        String expBodyItemValueR1				=excelReader.getCellData("SmokeExcessInStocks", 80, 7);
        String expBodyUnitsValueR1				=excelReader.getCellData("SmokeExcessInStocks", 81, 7);
        String expBodyQtyValueR1				=excelReader.getCellData("SmokeExcessInStocks", 82, 7);
        boolean expBodyLExcessInStocksValueR1	=true;
        String expBodyRateValueR1				=excelReader.getCellData("SmokeExcessInStocks", 83, 7);
        String expBodyGrossValueR1				=excelReader.getCellData("SmokeExcessInStocks", 84, 7);
       
		
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 79, 8, actBodyWarehouseValueR1);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 80, 8, actBodyItemValueR1);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 81, 8, actBodyUnitsValueR1);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 82, 8, actBodyQtyValueR1);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 83, 8, actBodyRateValueR1);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 84, 8, actBodyGrossValueR1);
        
        
        
        
        String expBodyWarehouseValueR2			=excelReader.getCellData("SmokeExcessInStocks", 85, 7);
        String expBodyItemValueR2				=excelReader.getCellData("SmokeExcessInStocks", 86, 7);
        String expBodyUnitsValueR2				=excelReader.getCellData("SmokeExcessInStocks", 87, 7);
        String expBodyQtyValueR2				=excelReader.getCellData("SmokeExcessInStocks", 88, 7);
        boolean expBodyLExcessInStocksValueR2	=true;
        String expBodyRateValueR2				=excelReader.getCellData("SmokeExcessInStocks", 89, 7);
        String expBodyGrossValueR2				=excelReader.getCellData("SmokeExcessInStocks", 90, 7);
       
        
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 85, 8, actBodyWarehouseValueR2);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 86, 8, actBodyItemValueR2);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 87, 8, actBodyUnitsValueR2);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 88, 8, actBodyQtyValueR2);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 89, 8, actBodyRateValueR2);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 90, 8, actBodyGrossValueR2);
       
        
        
        String expBodyWarehouseValueR3			=excelReader.getCellData("SmokeExcessInStocks", 91, 7);
        String expBodyItemValueR3				=excelReader.getCellData("SmokeExcessInStocks", 92, 7);
        String expBodyUnitsValueR3				=excelReader.getCellData("SmokeExcessInStocks", 93, 7);
        String expBodyQtyValueR3				=excelReader.getCellData("SmokeExcessInStocks", 94, 7);
        boolean expBodyLExcessInStocksValueR3	=true;
        String expBodyRateValueR3				=excelReader.getCellData("SmokeExcessInStocks", 95, 7);
        String expBodyGrossValueR3				=excelReader.getCellData("SmokeExcessInStocks", 96, 7);
       
        
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 91, 8, actBodyWarehouseValueR3);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 92, 8, actBodyItemValueR3);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 93, 8, actBodyUnitsValueR3);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 94, 8, actBodyQtyValueR3);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 95, 8, actBodyRateValueR3);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 96, 8, actBodyGrossValueR3);
        
        
        
        
        
        String expBodyWarehouseValueR4			=excelReader.getCellData("SmokeExcessInStocks", 97, 7);
        String expBodyItemValueR4				=excelReader.getCellData("SmokeExcessInStocks", 98, 7);
        String expBodyUnitsValueR4				=excelReader.getCellData("SmokeExcessInStocks", 99, 7);
        String expBodyQtyValueR4				=excelReader.getCellData("SmokeExcessInStocks", 100, 7);
        boolean expBodyLExcessInStocksValueR4	=true;
        String expBodyRateValueR4				=excelReader.getCellData("SmokeExcessInStocks", 101, 7);;
        String expBodyGrossValueR4				=excelReader.getCellData("SmokeExcessInStocks", 102, 7);
       
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 97, 8, actBodyWarehouseValueR4);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 98, 8, actBodyItemValueR4);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 99, 8, actBodyUnitsValueR4);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 100, 8, actBodyQtyValueR4);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 101, 8, actBodyRateValueR4);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 102, 8, actBodyGrossValueR4);
        
        String expQtyAmount						=excelReader.getCellData("SmokeExcessInStocks", 103, 7);
        String expGrossAmount					=excelReader.getCellData("SmokeExcessInStocks", 104, 7);
        String expnetAmount						=excelReader.getCellData("SmokeExcessInStocks", 105, 7);
        
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 103, 8, actQtyAmount);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 104, 8, actGrossAmount);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 105, 8, actnetAmount);
        
        
		
		System.out.println("************************************* checkSavedExcessInStocksVoucherPrevious  ********************************************");
		
		System.out.println("documentNumberTxt 				: "+actdocumentNumberTxt			+"  Value Expected : "+expdocumentNumberTxt);
		System.out.println("dateTxt 						: "+actdateTxt						+"  Value Expected : "+expdateTxt);
		
		System.out.println("BodyWarehouseValueR1 			: "+actBodyWarehouseValueR1			+"  Value Expected : "+expBodyWarehouseValueR1);
		System.out.println("BodyItemValueR1 				: "+actBodyItemValueR1				+"  Value Expected : "+expBodyItemValueR1);
		System.out.println("BodyUnitsValueR1 				: "+actBodyUnitsValueR1				+"  Value Expected : "+expBodyUnitsValueR1);
		System.out.println("BodyQtyValueR1 					: "+actBodyQtyValueR1				+"  Value Expected : "+expBodyQtyValueR1);
		System.out.println("BodyLExcessInStocksValueR1 		: "+actBodyLExcessInStocksValueR1	+"  Value Expected : "+expBodyLExcessInStocksValueR1);
		System.out.println("BodyRateValueR1 				: "+actBodyRateValueR1				+"  Value Expected : "+expBodyRateValueR1);
		System.out.println("BodyGrossValueR1 				: "+actBodyGrossValueR1				+"  Value Expected : "+expBodyGrossValueR1);
		
		System.out.println("BodyWarehouseValueR2 			: "+actBodyWarehouseValueR2			+"  Value Expected : "+expBodyWarehouseValueR2);
		System.out.println("BodyItemValueR2 				: "+actBodyItemValueR2				+"  Value Expected : "+expBodyItemValueR2);
		System.out.println("BodyUnitsValueR2 				: "+actBodyUnitsValueR2				+"  Value Expected : "+expBodyUnitsValueR2);
		System.out.println("BodyQtyValueR2 					: "+actBodyQtyValueR2				+"  Value Expected : "+expBodyQtyValueR2);
		System.out.println("BodyLExcessInStocksValueR2 		: "+actBodyLExcessInStocksValueR2	+"  Value Expected : "+expBodyLExcessInStocksValueR2);
		System.out.println("BodyRateValueR2 				: "+actBodyRateValueR2				+"  Value Expected : "+expBodyRateValueR2);
		System.out.println("BodyGrossValueR2 				: "+actBodyGrossValueR2				+"  Value Expected : "+expBodyGrossValueR2);
		
		System.out.println("BodyWarehouseValueR3 			: "+actBodyWarehouseValueR3			+"  Value Expected : "+expBodyWarehouseValueR3);
		System.out.println("BodyItemValueR3 				: "+actBodyItemValueR3				+"  Value Expected : "+expBodyItemValueR3);
		System.out.println("BodyUnitsValueR3 				: "+actBodyUnitsValueR3				+"  Value Expected : "+expBodyUnitsValueR3);
		System.out.println("BodyQtyValueR3 					: "+actBodyQtyValueR3				+"  Value Expected : "+expBodyQtyValueR3);
		System.out.println("BodyLExcessInStocksValueR3 		: "+actBodyLExcessInStocksValueR3	+"  Value Expected : "+expBodyLExcessInStocksValueR3);
		System.out.println("BodyRateValueR3 				: "+actBodyRateValueR3				+"  Value Expected : "+expBodyRateValueR3);
		System.out.println("BodyGrossValueR3 				: "+actBodyGrossValueR3				+"  Value Expected : "+expBodyGrossValueR3);
		
		System.out.println("BodyWarehouseValueR4 			: "+actBodyWarehouseValueR4			+"  Value Expected : "+expBodyWarehouseValueR4);
		System.out.println("BodyItemValueR4 				: "+actBodyItemValueR4				+"  Value Expected : "+expBodyItemValueR4);
		System.out.println("BodyUnitsValueR4 				: "+actBodyUnitsValueR4				+"  Value Expected : "+expBodyUnitsValueR4);
		System.out.println("BodyQtyValueR4 					: "+actBodyQtyValueR4				+"  Value Expected : "+expBodyQtyValueR4);
		System.out.println("BodyLExcessInStocksValueR4 		: "+actBodyLExcessInStocksValueR4	+"  Value Expected : "+expBodyLExcessInStocksValueR4);
		System.out.println("BodyRateValueR4 				: "+actBodyRateValueR4				+"  Value Expected : "+expBodyRateValueR4);
		System.out.println("BodyGrossValueR4 				: "+actBodyGrossValueR4				+"  Value Expected : "+expBodyGrossValueR4);
		
		
		
		System.out.println("QtyAmount 						: "+actQtyAmount					+"  Value Expected : "+expQtyAmount);
		System.out.println("GrossAmount 					: "+actGrossAmount					+"  Value Expected : "+expGrossAmount);
		System.out.println("netAmount 						: "+actnetAmount					+"  Value Expected : "+expnetAmount);
		
		if(actdocumentNumberTxt.equalsIgnoreCase(expdocumentNumberTxt) && actdateTxt.equalsIgnoreCase(expdateTxt)
				
				&& actBodyWarehouseValueR1.equalsIgnoreCase(expBodyWarehouseValueR1) && actBodyItemValueR1.equalsIgnoreCase(expBodyItemValueR1)
	    		&& actBodyUnitsValueR1.equalsIgnoreCase(expBodyUnitsValueR1) && actBodyQtyValueR1.equalsIgnoreCase(expBodyQtyValueR1)
	    		&& actBodyLExcessInStocksValueR1==expBodyLExcessInStocksValueR1 && actBodyRateValueR1.equalsIgnoreCase(expBodyRateValueR1)
	    		&& actBodyGrossValueR1.equalsIgnoreCase(expBodyGrossValueR1) 
	    		
				&& actBodyWarehouseValueR2.equalsIgnoreCase(expBodyWarehouseValueR2) && actBodyItemValueR2.equalsIgnoreCase(expBodyItemValueR2)
	    		&& actBodyUnitsValueR2.equalsIgnoreCase(expBodyUnitsValueR2) && actBodyQtyValueR2.equalsIgnoreCase(expBodyQtyValueR2)
	    		&& actBodyLExcessInStocksValueR2==expBodyLExcessInStocksValueR2 && actBodyRateValueR2.equalsIgnoreCase(expBodyRateValueR2)
	    		&& actBodyGrossValueR2.equalsIgnoreCase(expBodyGrossValueR2) 
	    				
	    		&& actBodyWarehouseValueR3.equalsIgnoreCase(expBodyWarehouseValueR3) && actBodyItemValueR3.equalsIgnoreCase(expBodyItemValueR3)
	    		&& actBodyUnitsValueR3.equalsIgnoreCase(expBodyUnitsValueR3) && actBodyQtyValueR3.equalsIgnoreCase(expBodyQtyValueR3)
	    		&& actBodyLExcessInStocksValueR3==expBodyLExcessInStocksValueR3 && actBodyRateValueR3.equalsIgnoreCase(expBodyRateValueR3)
	    		&& actBodyGrossValueR3.equalsIgnoreCase(expBodyGrossValueR3)
	    				
	    		&& actBodyWarehouseValueR4.equalsIgnoreCase(expBodyWarehouseValueR4) && actBodyItemValueR4.equalsIgnoreCase(expBodyItemValueR4)
	    		&& actBodyUnitsValueR4.equalsIgnoreCase(expBodyUnitsValueR4) && actBodyQtyValueR4.equalsIgnoreCase(expBodyQtyValueR4)
	    		&& actBodyLExcessInStocksValueR4==expBodyLExcessInStocksValueR4 && actBodyRateValueR4.equalsIgnoreCase(expBodyRateValueR4)
	    		&& actBodyGrossValueR4.equalsIgnoreCase(expBodyGrossValueR4)

	    		&& actQtyAmount.equalsIgnoreCase(expQtyAmount) && actGrossAmount.equalsIgnoreCase(expGrossAmount)
	    		&& actnetAmount.equalsIgnoreCase(expnetAmount))
		{
			
			System.out.println(" Test Pass: Copy to ClipBoard option on Excess In Stocks ");
			
			//Enter Secound  Line for BR COgs 	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
			select2ndRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
			pvWareHouseTxt.sendKeys(Keys.TAB);
			
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.sendKeys(excelReader.getCellData("SmokeExcessInStocks", 30, 6));
			Thread.sleep(2000);
			enter_Batch.sendKeys(Keys.TAB);
			
			// Thrid  Row  FIFo Cogs Item 
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
			select3rdRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
			pvWareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchBtn));
			binSearchBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
			binAutoAllocateBtn.click();

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
			binOkBtn.click();
			
			// fourth Row Rma ritem
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
			pvWareHouseTxt.sendKeys(Keys.TAB);
			
				
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaSerialNumberTxtField));
			rmaSerialNumberTxtField.click();
			rmaSerialNumberTxtField.sendKeys(excelReader.getCellData("SmokeExcessInStocks", 37, 6));
			

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaAddBtn));
			rmaAddBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaOkBtn));
			rmaOkBtn.click();
			
					
			Thread.sleep(2000);
			
			String docno=documentNumberTxt.getAttribute("value");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			

			boolean savingMessage=checkVoucherSavingMessage(docno);
			
			
			String actMessage=Boolean.toString(savingMessage);
			String expMessage=excelReader.getCellData("SmokeExcessInStocks", 106, 7);
			
			excelReader.setCellData(xlfile, "SmokeExcessInStocks", 106, 8, actMessage);
			
			
			return true;
		}

		else
		{
			System.out.println(" Test Fail: Copy to ClipBoard option on Excess In Stocks ");
			

			System.out.println(" Entered Else Block ");

			// First Row STD RATe Cogs 	item
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
			pvWareHouseTxt.sendKeys(Keys.END);
			pvWareHouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			pvWareHouseTxt.sendKeys(Keys.BACK_SPACE);
			
			pvWareHouseTxt.sendKeys(Keys.SPACE);
				
			int warehousecount=pvwareHouseListCount.size();
			
			System.err.println(warehousecount);
				
			for(int i=0 ; i < warehousecount ;i++)
			{
				String data=pvwareHouseListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("SmokeExcessInStocks", 23, 6)))
				{
					pvwareHouseListCount.get(i).click();
					
					break;
				}
			}
				
			pvWareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.END);
			enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemcount1=itemListCount.size();
			
			System.err.println(itemcount1);
				
			for(int i=0 ; i < itemcount1 ;i++)
			{
				String data=itemListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("SmokeExcessInStocks", 24, 6)))
				{
					itemListCount.get(i).click();
					
					break;
				}
			}
				
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys(excelReader.getCellData("SmokeExcessInStocks", 25, 6));
			Thread.sleep(2000);
			enter_Quantity.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(excelReader.getCellData("SmokeExcessInStocks", 26, 6));
			Thread.sleep(2000);
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			
			
			//Enter Secound  Line for BR COgs 	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
			select2ndRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
			pvWareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.END);
			enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemcount2=itemListCount.size();
			
			System.err.println(itemcount2);
				
			for(int i=0 ; i < itemcount2 ;i++)
			{
				String data=itemListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("SmokeExcessInStocks", 27, 6)))
				{
					itemListCount.get(i).click();
					break;
				}
			}
				
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys(excelReader.getCellData("SmokeExcessInStocks", 28, 6));
			Thread.sleep(2000);
			enter_Quantity.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(excelReader.getCellData("SmokeExcessInStocks", 29, 6));
			Thread.sleep(2000);
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.sendKeys(excelReader.getCellData("SmokeExcessInStocks", 30, 6));
			Thread.sleep(2000);
			enter_Batch.sendKeys(Keys.TAB);
			
			// Thrid  Row  FIFo Cogs Item 
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
			select3rdRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
			pvWareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.END);
			enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemcount3=itemListCount.size();
			
			System.err.println(itemcount3);
				
			for(int i=0 ; i < itemcount3 ;i++)
			{
				String data=itemListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("SmokeExcessInStocks", 31, 6)))
				{
					itemListCount.get(i).click();
					
					break;
				}
			}
				
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys(excelReader.getCellData("SmokeExcessInStocks", 32, 6));
			Thread.sleep(2000);
			enter_Quantity.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(excelReader.getCellData("SmokeExcessInStocks", 33, 6));
			Thread.sleep(2000);
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchBtn));
			binSearchBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
			binAutoAllocateBtn.click();

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
			binOkBtn.click();
			
			// fourth Row Rma ritem
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
			pvWareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.END);
			enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemcount4=itemListCount.size();
			
			System.err.println(itemcount4);
				
			for(int i=0 ; i < itemcount4 ;i++)
			{
				String data=itemListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("SmokeExcessInStocks", 34, 6)))
				{
					itemListCount.get(i).click();
					
					break;
				}
			}
				
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys(excelReader.getCellData("SmokeExcessInStocks", 35, 6));
			Thread.sleep(2000);
			enter_Quantity.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(excelReader.getCellData("SmokeExcessInStocks", 36, 6));
			Thread.sleep(2000);
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaSerialNumberTxtField));
			rmaSerialNumberTxtField.click();
			rmaSerialNumberTxtField.sendKeys(excelReader.getCellData("SmokeExcessInStocks", 37, 6));
			

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaAddBtn));
			rmaAddBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaOkBtn));
			rmaOkBtn.click();
			
					
			Thread.sleep(2000);
			
			String docno=documentNumberTxt.getAttribute("value");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			

			boolean savingMessage=checkVoucherSavingMessage(docno);
			
			
			String actMessage=Boolean.toString(savingMessage);
			String expMessage=excelReader.getCellData("SmokeExcessInStocks", 106, 7);
			
			excelReader.setCellData(xlfile, "SmokeExcessInStocks", 106, 8, actMessage);
					
			
			System.out.println("actMessage   : "+actMessage  +" Value Expected : "+expMessage);


			
			return false;
		}
	}
	
		
	
	
	public boolean checkDeleteOptionINExcessStockEntryPage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
        Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();
		
		boolean loading=checkLoadingMessage();
		
		System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
		
		
		Thread.sleep(3000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));
		new_DeleteBtn.click();
		
		
		getWaitForAlert();
		
        String actAlertMessage=getAlert().getText();
		
		String expAlertMessage=excelReader.getCellData("SmokeExcessInStocks", 108, 7);
		
		
		excelReader.setCellData(xlfile, "SmokeExcessInStocks", 108, 8, actAlertMessage);
		
	
		System.out.println("Alert Message on Deleteing the Voucher :  "+actAlertMessage +"  "+expAlertMessage);
		
		getAlert().accept();
		
		
		String expErrorMessage=excelReader.getCellData("SmokeExcessInStocks", 109, 7);
		
		String validationMessage=checkValidationMessage(expErrorMessage);
		
		excelReader.setCellData(xlfile, "SmokeExcessInStocks", 108, 8, validationMessage);
		

		System.out.println("Message on Delete Voucher and Click on Ok button  :  "+validationMessage+"  "+expErrorMessage);
		
		if (actAlertMessage.equalsIgnoreCase(expAlertMessage) && 
				validationMessage.equalsIgnoreCase(expErrorMessage))
		{
			excelReader.setCellData(xlfile, "SmokeExcessInStocks", 107, 8, resPass);
			System.out.println(" Voucher Deleted Successfully");
			return true;
			
		}
		else 
		{
			excelReader.setCellData(xlfile, "SmokeExcessInStocks", 107, 8, resFail);
			System.out.println(" Voucher Not  Deleted Successfully");
			return false;
		}
		
	}
	
	
	
	

	public boolean checkCopyDocumentOptionAndSavingInExcessInStocks() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		try
		{
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
		toggleBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(copyDocumentOption));
		copyDocumentOption.click();
		
		Thread.sleep(2000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cd_FirstChkBox));
		cd_FirstChkBox.click();
		
		Thread.sleep(3000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cd_OkBtn));
		cd_OkBtn.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();

	
    
		// Actual
		
		String actdocumentNumberTxt				=documentNumberTxt.getAttribute("value");
		String actdateTxt						=dateTxt.getAttribute("value");
		
        String actBodyWarehouseValueR1			=select1stRow_1stColumn.getText();
        String actBodyItemValueR1				=select1stRow_2ndColumn.getText();
        String actBodyUnitsValueR1				=select1stRow_3rdColumn.getText();
        String actBodyQtyValueR1				=select1stRow_4thColumn.getText();
        boolean actBodyLExcessInStocksValueR1	=select1stRow_5thColumn.getText().isEmpty();
        String actBodyRateValueR1				=select1stRow_6thColumn.getText();
        String actBodyGrossValueR1				=select1stRow_7thColumn.getText();
       
        
        String actBodyWarehouseValueR2			=select2ndRow_1stColumn.getText();
        String actBodyItemValueR2				=select2ndRow_2ndColumn.getText();
        String actBodyUnitsValueR2				=select2ndRow_3rdColumn.getText();
        String actBodyQtyValueR2				=select2ndRow_4thColumn.getText();
        boolean actBodyLExcessInStocksValueR2	=select2ndRow_5thColumn.getText().isEmpty();
        String actBodyRateValueR2				=select2ndRow_6thColumn.getText();
        String actBodyGrossValueR2				=select2ndRow_7thColumn.getText();
       
        
        String actBodyWarehouseValueR3			=select3rdRow_1stColumn.getText();
        String actBodyItemValueR3				=select3rdRow_2ndColumn.getText();
        String actBodyUnitsValueR3				=select3rdRow_3rdColumn.getText();
        String actBodyQtyValueR3				=select3rdRow_4thColumn.getText();
        boolean actBodyLExcessInStocksValueR3	=select3rdRow_5thColumn.getText().isEmpty();
        String actBodyRateValueR3				=select3rdRow_6thColumn.getText();
        String actBodyGrossValueR3				=select3rdRow_7thColumn.getText();
        
        
        
        String actBodyWarehouseValueR4			=select4thRow_1stColumn.getText();
        String actBodyItemValueR4				=select4thRow_2ndColumn.getText();
        String actBodyUnitsValueR4				=select4thRow_3rdColumn.getText();
        String actBodyQtyValueR4				=select4thRow_4thColumn.getText();
        boolean actBodyLExcessInStocksValueR4	=select4thRow_5thColumn.getText().isEmpty();
        String actBodyRateValueR4				=select4thRow_6thColumn.getText();
        String actBodyGrossValueR4				=select4thRow_7thColumn.getText();
       
        String actQtyAmount						=QtyAmount.getText();
        String actGrossAmount					=GrossAmount.getText();
        String actnetAmount						=netAmount.getText();
        
        
        DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Date date=new Date();
		System.out.println(df.format(date));
		
		
        // Expected
		
        String expdocumentNumberTxt				=excelReader.getCellData("SmokeExcessInStocks", 111, 7);
		String expdateTxt						=df.format(date);
		
		excelReader.setCellData(xlfile, "SmokeExcessInStocks", 111, 8, actdocumentNumberTxt);
		excelReader.setCellData(xlfile, "SmokeExcessInStocks", 112, 8, actdateTxt);
		excelReader.setCellData(xlfile, "SmokeExcessInStocks", 112, 7, expdateTxt);
		
		String expBodyWarehouseValueR1			=excelReader.getCellData("SmokeExcessInStocks", 113, 7);
        String expBodyItemValueR1				=excelReader.getCellData("SmokeExcessInStocks", 114, 7);
        String expBodyUnitsValueR1				=excelReader.getCellData("SmokeExcessInStocks", 115, 7);
        String expBodyQtyValueR1				=excelReader.getCellData("SmokeExcessInStocks", 116, 7);
        boolean expBodyLExcessInStocksValueR1	=true;
        String expBodyRateValueR1				=excelReader.getCellData("SmokeExcessInStocks", 117, 7);
        String expBodyGrossValueR1				=excelReader.getCellData("SmokeExcessInStocks", 118, 7);
       
		
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 113, 8, actBodyWarehouseValueR1);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 114, 8, actBodyItemValueR1);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 115, 8, actBodyUnitsValueR1);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 116, 8, actBodyQtyValueR1);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 117, 8, actBodyRateValueR1);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 118, 8, actBodyGrossValueR1);
        
        
        
        
        String expBodyWarehouseValueR2			=excelReader.getCellData("SmokeExcessInStocks", 119, 7);
        String expBodyItemValueR2				=excelReader.getCellData("SmokeExcessInStocks", 120, 7);
        String expBodyUnitsValueR2				=excelReader.getCellData("SmokeExcessInStocks", 121, 7);
        String expBodyQtyValueR2				=excelReader.getCellData("SmokeExcessInStocks", 122, 7);
        boolean expBodyLExcessInStocksValueR2	=true;
        String expBodyRateValueR2				=excelReader.getCellData("SmokeExcessInStocks", 123, 7);
        String expBodyGrossValueR2				=excelReader.getCellData("SmokeExcessInStocks", 124, 7);
       
        
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 119, 8, actBodyWarehouseValueR2);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 120, 8, actBodyItemValueR2);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 121, 8, actBodyUnitsValueR2);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 122, 8, actBodyQtyValueR2);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 123, 8, actBodyRateValueR2);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 124, 8, actBodyGrossValueR2);
       
        
        
        String expBodyWarehouseValueR3			=excelReader.getCellData("SmokeExcessInStocks", 125, 7);
        String expBodyItemValueR3				=excelReader.getCellData("SmokeExcessInStocks", 126, 7);
        String expBodyUnitsValueR3				=excelReader.getCellData("SmokeExcessInStocks", 127, 7);
        String expBodyQtyValueR3				=excelReader.getCellData("SmokeExcessInStocks", 128, 7);
        boolean expBodyLExcessInStocksValueR3	=true;
        String expBodyRateValueR3				=excelReader.getCellData("SmokeExcessInStocks", 129, 7);
        String expBodyGrossValueR3				=excelReader.getCellData("SmokeExcessInStocks", 130, 7);
       
        
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 125, 8, actBodyWarehouseValueR3);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 126, 8, actBodyItemValueR3);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 127, 8, actBodyUnitsValueR3);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 128, 8, actBodyQtyValueR3);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 129, 8, actBodyRateValueR3);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 130, 8, actBodyGrossValueR3);
        
        
        
        
        
        String expBodyWarehouseValueR4			=excelReader.getCellData("SmokeExcessInStocks", 131, 7);
        String expBodyItemValueR4				=excelReader.getCellData("SmokeExcessInStocks", 132, 7);
        String expBodyUnitsValueR4				=excelReader.getCellData("SmokeExcessInStocks", 133, 7);
        String expBodyQtyValueR4				=excelReader.getCellData("SmokeExcessInStocks", 134, 7);
        boolean expBodyLExcessInStocksValueR4	=true;
        String expBodyRateValueR4				=excelReader.getCellData("SmokeExcessInStocks", 135, 7);;
        String expBodyGrossValueR4				=excelReader.getCellData("SmokeExcessInStocks", 136, 7);
       
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 131, 8, actBodyWarehouseValueR4);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 132, 8, actBodyItemValueR4);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 133, 8, actBodyUnitsValueR4);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 134, 8, actBodyQtyValueR4);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 135, 8, actBodyRateValueR4);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 136, 8, actBodyGrossValueR4);
        
        String expQtyAmount						=excelReader.getCellData("SmokeExcessInStocks", 137, 7);
        String expGrossAmount					=excelReader.getCellData("SmokeExcessInStocks", 138, 7);
        String expnetAmount						=excelReader.getCellData("SmokeExcessInStocks", 139, 7);
        
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 137, 8, actQtyAmount);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 138, 8, actGrossAmount);
        excelReader.setCellData(xlfile, "SmokeExcessInStocks", 139, 8, actnetAmount);
        
        
		
		System.out.println("************************************* checkCopyDocumentOptionAndSavingInExcessInStocks  ********************************************");
		
		System.out.println("documentNumberTxt 				: "+actdocumentNumberTxt			+"  Value Expected : "+expdocumentNumberTxt);
		System.out.println("dateTxt 						: "+actdateTxt						+"  Value Expected : "+expdateTxt);
		
		System.out.println("BodyWarehouseValueR1 			: "+actBodyWarehouseValueR1			+"  Value Expected : "+expBodyWarehouseValueR1);
		System.out.println("BodyItemValueR1 				: "+actBodyItemValueR1				+"  Value Expected : "+expBodyItemValueR1);
		System.out.println("BodyUnitsValueR1 				: "+actBodyUnitsValueR1				+"  Value Expected : "+expBodyUnitsValueR1);
		System.out.println("BodyQtyValueR1 					: "+actBodyQtyValueR1				+"  Value Expected : "+expBodyQtyValueR1);
		System.out.println("BodyLExcessInStocksValueR1 		: "+actBodyLExcessInStocksValueR1	+"  Value Expected : "+expBodyLExcessInStocksValueR1);
		System.out.println("BodyRateValueR1 				: "+actBodyRateValueR1				+"  Value Expected : "+expBodyRateValueR1);
		System.out.println("BodyGrossValueR1 				: "+actBodyGrossValueR1				+"  Value Expected : "+expBodyGrossValueR1);
		
		System.out.println("BodyWarehouseValueR2 			: "+actBodyWarehouseValueR2			+"  Value Expected : "+expBodyWarehouseValueR2);
		System.out.println("BodyItemValueR2 				: "+actBodyItemValueR2				+"  Value Expected : "+expBodyItemValueR2);
		System.out.println("BodyUnitsValueR2 				: "+actBodyUnitsValueR2				+"  Value Expected : "+expBodyUnitsValueR2);
		System.out.println("BodyQtyValueR2 					: "+actBodyQtyValueR2				+"  Value Expected : "+expBodyQtyValueR2);
		System.out.println("BodyLExcessInStocksValueR2 		: "+actBodyLExcessInStocksValueR2	+"  Value Expected : "+expBodyLExcessInStocksValueR2);
		System.out.println("BodyRateValueR2 				: "+actBodyRateValueR2				+"  Value Expected : "+expBodyRateValueR2);
		System.out.println("BodyGrossValueR2 				: "+actBodyGrossValueR2				+"  Value Expected : "+expBodyGrossValueR2);
		
		System.out.println("BodyWarehouseValueR3 			: "+actBodyWarehouseValueR3			+"  Value Expected : "+expBodyWarehouseValueR3);
		System.out.println("BodyItemValueR3 				: "+actBodyItemValueR3				+"  Value Expected : "+expBodyItemValueR3);
		System.out.println("BodyUnitsValueR3 				: "+actBodyUnitsValueR3				+"  Value Expected : "+expBodyUnitsValueR3);
		System.out.println("BodyQtyValueR3 					: "+actBodyQtyValueR3				+"  Value Expected : "+expBodyQtyValueR3);
		System.out.println("BodyLExcessInStocksValueR3 		: "+actBodyLExcessInStocksValueR3	+"  Value Expected : "+expBodyLExcessInStocksValueR3);
		System.out.println("BodyRateValueR3 				: "+actBodyRateValueR3				+"  Value Expected : "+expBodyRateValueR3);
		System.out.println("BodyGrossValueR3 				: "+actBodyGrossValueR3				+"  Value Expected : "+expBodyGrossValueR3);
		
		System.out.println("BodyWarehouseValueR4 			: "+actBodyWarehouseValueR4			+"  Value Expected : "+expBodyWarehouseValueR4);
		System.out.println("BodyItemValueR4 				: "+actBodyItemValueR4				+"  Value Expected : "+expBodyItemValueR4);
		System.out.println("BodyUnitsValueR4 				: "+actBodyUnitsValueR4				+"  Value Expected : "+expBodyUnitsValueR4);
		System.out.println("BodyQtyValueR4 					: "+actBodyQtyValueR4				+"  Value Expected : "+expBodyQtyValueR4);
		System.out.println("BodyLExcessInStocksValueR4 		: "+actBodyLExcessInStocksValueR4	+"  Value Expected : "+expBodyLExcessInStocksValueR4);
		System.out.println("BodyRateValueR4 				: "+actBodyRateValueR4				+"  Value Expected : "+expBodyRateValueR4);
		System.out.println("BodyGrossValueR4 				: "+actBodyGrossValueR4				+"  Value Expected : "+expBodyGrossValueR4);
		
		
		
		System.out.println("QtyAmount 						: "+actQtyAmount					+"  Value Expected : "+expQtyAmount);
		System.out.println("GrossAmount 					: "+actGrossAmount					+"  Value Expected : "+expGrossAmount);
		System.out.println("netAmount 						: "+actnetAmount					+"  Value Expected : "+expnetAmount);
		
		if(actdocumentNumberTxt.equalsIgnoreCase(expdocumentNumberTxt) && actdateTxt.equalsIgnoreCase(expdateTxt)
				
				&& actBodyWarehouseValueR1.equalsIgnoreCase(expBodyWarehouseValueR1) && actBodyItemValueR1.equalsIgnoreCase(expBodyItemValueR1)
	    		&& actBodyUnitsValueR1.equalsIgnoreCase(expBodyUnitsValueR1) && actBodyQtyValueR1.equalsIgnoreCase(expBodyQtyValueR1)
	    		&& actBodyLExcessInStocksValueR1==expBodyLExcessInStocksValueR1 && actBodyRateValueR1.equalsIgnoreCase(expBodyRateValueR1)
	    		&& actBodyGrossValueR1.equalsIgnoreCase(expBodyGrossValueR1) 
	    		
				&& actBodyWarehouseValueR2.equalsIgnoreCase(expBodyWarehouseValueR2) && actBodyItemValueR2.equalsIgnoreCase(expBodyItemValueR2)
	    		&& actBodyUnitsValueR2.equalsIgnoreCase(expBodyUnitsValueR2) && actBodyQtyValueR2.equalsIgnoreCase(expBodyQtyValueR2)
	    		&& actBodyLExcessInStocksValueR2==expBodyLExcessInStocksValueR2 && actBodyRateValueR2.equalsIgnoreCase(expBodyRateValueR2)
	    		&& actBodyGrossValueR2.equalsIgnoreCase(expBodyGrossValueR2) 
	    				
	    		&& actBodyWarehouseValueR3.equalsIgnoreCase(expBodyWarehouseValueR3) && actBodyItemValueR3.equalsIgnoreCase(expBodyItemValueR3)
	    		&& actBodyUnitsValueR3.equalsIgnoreCase(expBodyUnitsValueR3) && actBodyQtyValueR3.equalsIgnoreCase(expBodyQtyValueR3)
	    		&& actBodyLExcessInStocksValueR3==expBodyLExcessInStocksValueR3 && actBodyRateValueR3.equalsIgnoreCase(expBodyRateValueR3)
	    		&& actBodyGrossValueR3.equalsIgnoreCase(expBodyGrossValueR3)
	    				
	    		&& actBodyWarehouseValueR4.equalsIgnoreCase(expBodyWarehouseValueR4) && actBodyItemValueR4.equalsIgnoreCase(expBodyItemValueR4)
	    		&& actBodyUnitsValueR4.equalsIgnoreCase(expBodyUnitsValueR4) && actBodyQtyValueR4.equalsIgnoreCase(expBodyQtyValueR4)
	    		&& actBodyLExcessInStocksValueR4==expBodyLExcessInStocksValueR4 && actBodyRateValueR4.equalsIgnoreCase(expBodyRateValueR4)
	    		&& actBodyGrossValueR4.equalsIgnoreCase(expBodyGrossValueR4)

	    		&& actQtyAmount.equalsIgnoreCase(expQtyAmount) && actGrossAmount.equalsIgnoreCase(expGrossAmount)
	    		&& actnetAmount.equalsIgnoreCase(expnetAmount))
		{
			
			System.out.println(" Test Pass: Copy to ClipBoard option on Excess In Stocks ");
			
			//Enter Secound  Line for BR COgs 	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
			select2ndRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
			pvWareHouseTxt.sendKeys(Keys.TAB);
			
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.sendKeys(excelReader.getCellData("SmokeExcessInStocks", 30, 6));
			Thread.sleep(2000);
			enter_Batch.sendKeys(Keys.TAB);
			
			// Thrid  Row  FIFo Cogs Item 
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
			select3rdRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
			pvWareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchBtn));
			binSearchBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
			binAutoAllocateBtn.click();

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
			binOkBtn.click();
			
			// fourth Row Rma ritem
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
			pvWareHouseTxt.sendKeys(Keys.TAB);
			
				
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaSerialNumberTxtField));
			rmaSerialNumberTxtField.click();
			rmaSerialNumberTxtField.sendKeys(excelReader.getCellData("SmokeExcessInStocks", 37, 6));
			

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaAddBtn));
			rmaAddBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaOkBtn));
			rmaOkBtn.click();
			
					
			Thread.sleep(2000);
			
			String docno=documentNumberTxt.getAttribute("value");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			

			boolean savingMessage=checkVoucherSavingMessage(docno);
			
			
			String actMessage=Boolean.toString(savingMessage);
			String expMessage=excelReader.getCellData("SmokeExcessInStocks", 140, 7);
			
			excelReader.setCellData(xlfile, "SmokeExcessInStocks", 140, 8, actMessage);
			
			
			return true;
		}

		else
		{
			System.out.println(" Test Fail: Copy to ClipBoard option on Excess In Stocks ");
			

			System.out.println(" Entered Else Block ");

			// First Row STD RATe Cogs 	item
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
			pvWareHouseTxt.sendKeys(Keys.END);
			pvWareHouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			pvWareHouseTxt.sendKeys(Keys.BACK_SPACE);
			
			pvWareHouseTxt.sendKeys(Keys.SPACE);
				
			int warehousecount=pvwareHouseListCount.size();
			
			System.err.println(warehousecount);
				
			for(int i=0 ; i < warehousecount ;i++)
			{
				String data=pvwareHouseListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("SmokeExcessInStocks", 23, 6)))
				{
					pvwareHouseListCount.get(i).click();
					
					break;
				}
			}
				
			pvWareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.END);
			enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemcount1=itemListCount.size();
			
			System.err.println(itemcount1);
				
			for(int i=0 ; i < itemcount1 ;i++)
			{
				String data=itemListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("SmokeExcessInStocks", 24, 6)))
				{
					itemListCount.get(i).click();
					
					break;
				}
			}
				
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys(excelReader.getCellData("SmokeExcessInStocks", 25, 6));
			Thread.sleep(2000);
			enter_Quantity.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(excelReader.getCellData("SmokeExcessInStocks", 26, 6));
			Thread.sleep(2000);
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			
			
			//Enter Secound  Line for BR COgs 	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
			select2ndRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
			pvWareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.END);
			enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemcount2=itemListCount.size();
			
			System.err.println(itemcount2);
				
			for(int i=0 ; i < itemcount2 ;i++)
			{
				String data=itemListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("SmokeExcessInStocks", 27, 6)))
				{
					itemListCount.get(i).click();
					break;
				}
			}
				
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys(excelReader.getCellData("SmokeExcessInStocks", 28, 6));
			Thread.sleep(2000);
			enter_Quantity.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(excelReader.getCellData("SmokeExcessInStocks", 29, 6));
			Thread.sleep(2000);
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.sendKeys(excelReader.getCellData("SmokeExcessInStocks", 30, 6));
			Thread.sleep(2000);
			enter_Batch.sendKeys(Keys.TAB);
			
			// Thrid  Row  FIFo Cogs Item 
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
			select3rdRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
			pvWareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.END);
			enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemcount3=itemListCount.size();
			
			System.err.println(itemcount3);
				
			for(int i=0 ; i < itemcount3 ;i++)
			{
				String data=itemListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("SmokeExcessInStocks", 31, 6)))
				{
					itemListCount.get(i).click();
					
					break;
				}
			}
				
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys(excelReader.getCellData("SmokeExcessInStocks", 32, 6));
			Thread.sleep(2000);
			enter_Quantity.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(excelReader.getCellData("SmokeExcessInStocks", 33, 6));
			Thread.sleep(2000);
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchBtn));
			binSearchBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
			binAutoAllocateBtn.click();

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
			binOkBtn.click();
			
			// fourth Row Rma ritem
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
			pvWareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.END);
			enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemcount4=itemListCount.size();
			
			System.err.println(itemcount4);
				
			for(int i=0 ; i < itemcount4 ;i++)
			{
				String data=itemListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("SmokeExcessInStocks", 34, 6)))
				{
					itemListCount.get(i).click();
					
					break;
				}
			}
				
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys(excelReader.getCellData("SmokeExcessInStocks", 35, 6));
			Thread.sleep(2000);
			enter_Quantity.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(excelReader.getCellData("SmokeExcessInStocks", 36, 6));
			Thread.sleep(2000);
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaSerialNumberTxtField));
			rmaSerialNumberTxtField.click();
			rmaSerialNumberTxtField.sendKeys(excelReader.getCellData("SmokeExcessInStocks", 37, 6));
			

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaAddBtn));
			rmaAddBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaOkBtn));
			rmaOkBtn.click();
			
					
			Thread.sleep(2000);
			
			String docno=documentNumberTxt.getAttribute("value");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			

			boolean savingMessage=checkVoucherSavingMessage(docno);
			
			
			String actMessage=Boolean.toString(savingMessage);
			String expMessage=excelReader.getCellData("SmokeExcessInStocks", 140, 7);
			
			excelReader.setCellData(xlfile, "SmokeExcessInStocks", 140, 8, actMessage);
					
			
			System.out.println("actMessage   : "+actMessage  +" Value Expected : "+expMessage);


			
			return false;
		}
		}
		catch(Exception e)
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cd_CancelBtn));
			cd_CancelBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
			previousBtn.click();
			
			if(getIsAlertPresent())
			{
				getAlert().accept();
			}
			
			checkUserFriendlyMessage();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
			toggleBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(copyToClipBoardOption));
			copyToClipBoardOption.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_newBtn));
			new_newBtn.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
			toggleBtn.click();

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pasteFromClipBoardOption));
			pasteFromClipBoardOption.click();
			
			checkUserFriendlyMessage();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			documentNumberTxt.click();

			
//Enter Secound  Line for BR COgs 	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
			select2ndRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
			pvWareHouseTxt.sendKeys(Keys.TAB);
			
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.sendKeys(excelReader.getCellData("SmokeExcessInStocks", 30, 6));
			Thread.sleep(2000);
			enter_Batch.sendKeys(Keys.TAB);
			
			// Thrid  Row  FIFo Cogs Item 
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
			select3rdRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
			pvWareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchBtn));
			binSearchBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
			binAutoAllocateBtn.click();

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
			binOkBtn.click();
			
			// fourth Row Rma ritem
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
			pvWareHouseTxt.sendKeys(Keys.TAB);
			
				
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaSerialNumberTxtField));
			rmaSerialNumberTxtField.click();
			rmaSerialNumberTxtField.sendKeys(excelReader.getCellData("SmokeExcessInStocks", 37, 6));
			

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaAddBtn));
			rmaAddBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaOkBtn));
			rmaOkBtn.click();
			
					
			Thread.sleep(2000);
			
			String docno=documentNumberTxt.getAttribute("value");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			

			boolean savingMessage=checkVoucherSavingMessage(docno);
			
			
			String actMessage=Boolean.toString(savingMessage);
			String expMessage=excelReader.getCellData("SmokeExcessInStocks", 140, 7);
			
			excelReader.setCellData(xlfile, "SmokeExcessInStocks", 140, 8, actMessage);
			
			
			return false;
		}
		
	}
		
		
	

	
	
	
	
		
	
	
	
	
	
	// Shortage In Stocks Starts From Here
	

	public boolean checkShortagesInStocksVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsStocksMenu));
		inventoryTransactionsStocksMenu.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(shortagesInStockVoucher));
    	
    	boolean ShortagesInStockVoucher       =shortagesInStockVoucher.isDisplayed();
    	
    	String actshortagesInStockVoucher=Boolean.toString(ShortagesInStockVoucher);
    	
    	String  expshortagesInStockVoucher		 =excelReader.getCellData("SmokeShortageInStocks", 7, 7);
    	
    	excelReader.setCellData(xlfile, "SmokeShortageInStocks", 7, 8, actshortagesInStockVoucher);
    	
    	
    	System.out.println("****************************** checkShortagesInStocksVoucher  ********************************************");
    	
		System.out.println("shortagesInStockVoucher          :"+actshortagesInStockVoucher+" Value Expected : "+expshortagesInStockVoucher);
		
		if(actshortagesInStockVoucher.equalsIgnoreCase(expshortagesInStockVoucher))
		{
			System.out.println("Test Pass : Shortage In Stocks Options  Are Displayed");
			excelReader.setCellData(xlfile, "SmokeShortageInStocks", 6, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail :  Shortage In Stocks  Options Are NOT Displayed");
			excelReader.setCellData(xlfile, "SmokeShortageInStocks", 6, 9, resFail);
			return false;
		}
	}
	

	

	public boolean checkShortagesInStocksHomePage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(shortagesInStockVoucher));
		shortagesInStockVoucher.click();
    	
		Thread.sleep(2000);
		checkDeleteLinkStatus();
		Thread.sleep(2000);
		
		try
		
		{
			
			System.out.println(" Entered Try Block");
		if (errorMessage.isDisplayed()==true) 
		{
			
		String ExpMessage=excelReader.getCellData("SmokeShortageInStocks", 8, 7);
		
		String validationMessage=checkValidationMessage(ExpMessage);
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
		miscellaneousTab.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateFAChkBox));
		updateFAChkBox.click();
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
		errorMessageCloseBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settings_closeBtn));
		settings_closeBtn.click();
			
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
    	
		boolean actHomePageNewBtn         		=newBtn.isDisplayed();
		boolean actHomePageEditBtn        		=editBtn.isDisplayed();
		boolean actHomePagePrintBtn       		=printBtn.isDisplayed();
		boolean actHomePageDeleteBtn      		=deleteBtn.isDisplayed();
		//boolean actHomePageAuthorizeBtn   		=authorizeBtn.isDisplayed();
		boolean actHomePageSuspendBtn     		=suspendBtn.isDisplayed();
		//boolean actHomePageRejectBtn      		=rejectBtn.isDisplayed();
		boolean actHomePagePrintBarcodeBtn		=printBarCodeBtn.isDisplayed();
		boolean actHomePageExportXMLBtn   		=exportToXMLBtn.isDisplayed();
		boolean actHomePageSettingsBtn    		=settingsBtn.isDisplayed();
		boolean actHomePageCloseBtn       		=homeCloseBtn.isDisplayed();
		boolean actHomePageGridCheckBox   		=grid_HeaderChkBox.isDisplayed();
		boolean actHomePageSortingBtn     		=sortingBtn.isDisplayed();
		boolean actHomePageCreateViewBn   		=createViewBtn.isDisplayed();
		boolean actHomePageCustomizeBtn   		=customizeBtn.isDisplayed();
		boolean actHomePageFilterBtn      		=filterBtn.isDisplayed();
		boolean actHomePageRefreshBtn     		=refreshBtn.isDisplayed();
		boolean actHomePageOptionsBtn     		=optionsBtn.isDisplayed();
		boolean actHomePageExportBtn      		=exportBtn.isDisplayed();
		boolean actHomePageAllView        		=homePageAllVouchersView.isDisplayed();
		boolean actpendingExcessInStocksView  	=pendingExcessInStocksView.isDisplayed();
		

		boolean expHomePageNewBtn         		=true;
		boolean expHomePageEditBtn        		=true;
		boolean expHomePagePrintBtn       		=true;
		boolean expHomePageDeleteBtn      		=true;
		boolean expHomePageAuthorizeBtn   		=true;
		boolean expHomePageSuspendBtn     		=true;
		boolean expHomePageRejectBtn      		=true;
		boolean expHomePagePrintBarcodeBtn		=true;
		boolean expHomePageExportXMLBtn   		=true;
		boolean expHomePageSettingsBtn    		=true;
		boolean expHomePageCloseBtn       		=true;
		boolean expHomePageGridCheckBox   		=true;
		boolean expHomePageSortingBtn     		=true;
		boolean expHomePageCreateViewBn   		=true;
		boolean expHomePageCustomizeBtn   		=true;
		boolean expHomePageFilterBtn     		=true;
		boolean expHomePageRefreshBtn  		    =true;
		boolean expHomePageOptionsBtn  		    =true;
		boolean expHomePageExportBtn     		=true;
		boolean expHomePageAllView        		=true;
		boolean exppendingExcessInStocksView  	=true;
		
		System.out.println("****************************** checkShortagesInStocksHomePage  ********************************************");
		
		System.out.println("Home Page New Btn Value Actual           :"+actHomePageNewBtn			+"   Value Expected : "+expHomePageNewBtn);
		System.out.println("Home Page Edit Btn Value Actual          :"+actHomePageEditBtn			+"   Value Expected : "+expHomePageEditBtn);
		System.out.println("Home Page Print Btn Value Actual         :"+actHomePagePrintBtn			+"	 Value Expected : "+expHomePagePrintBtn);
		System.out.println("Home Page Delete Btn Value Actual        :"+actHomePageDeleteBtn		+"	 Value Expected : "+expHomePageDeleteBtn);
		//System.out.println("Home Page Authorize Btn Value Actual     :"+actHomePageAuthorizeBtn		+"	 Value Expected : "+expHomePageAuthorizeBtn);
		System.out.println("Home Page Suspend Btn Value Actual       :"+actHomePageSuspendBtn		+"	 Value Expected : "+expHomePageSuspendBtn);
		//System.out.println("Home Page Reject Btn Value Actual        :"+actHomePageRejectBtn		+"	 Value Expected : "+expHomePageRejectBtn);
		System.out.println("Home Page Print Barcode Btn Value Actual :"+actHomePagePrintBarcodeBtn	+"	 Value Expected : "+expHomePagePrintBarcodeBtn);
		System.out.println("Home Page Export XML Btn Value Actual    :"+actHomePageExportXMLBtn		+"	 Value Expected : "+expHomePageExportXMLBtn);
		System.out.println("Home Page Settings Btn Value Actual      :"+actHomePageSettingsBtn		+"	 Value Expected : "+expHomePageSettingsBtn);
		System.out.println("Home Page Close Btn Value Actual         :"+actHomePageCloseBtn			+"	 Value Expected : "+expHomePageCloseBtn);
		System.out.println("Home Page Grid check Value Actual        :"+actHomePageGridCheckBox		+"	 Value Expected : "+expHomePageGridCheckBox);
		System.out.println("Home Page Sorting Btn Value Actual       :"+actHomePageSortingBtn		+"	 Value Expected : "+expHomePageSortingBtn);
		System.out.println("Home Page Create View Btn Value Actual   :"+actHomePageCreateViewBn		+"	 Value Expected : "+expHomePageCreateViewBn);
		System.out.println("Home Page Customize Btn Value Actual     :"+actHomePageCustomizeBtn		+"	 Value Expected : "+expHomePageCustomizeBtn);
		System.out.println("Home Page Filter check Value Actual      :"+actHomePageFilterBtn		+"	 Value Expected : "+expHomePageFilterBtn);
		System.out.println("Home Page Refesh Btn Value Actual        :"+actHomePageRefreshBtn		+"	 Value Expected : "+expHomePageRefreshBtn);
		System.out.println("Home Page Options Btn Value Actual       :"+actHomePageOptionsBtn		+"	 Value Expected : "+expHomePageOptionsBtn);
		System.out.println("Home Page Export Btn Value Actual        :"+actHomePageExportBtn		+"	 Value Expected : "+expHomePageExportBtn);
		System.out.println("Home Page All View Value Actual          :"+actHomePageExportBtn		+"	 Value Expected : "+expHomePageExportBtn);
		System.out.println("Home Page Pending SI View Value Actual   :"+actpendingExcessInStocksView+"	 Value Expected : "+exppendingExcessInStocksView);
		
		
    	if(actHomePageNewBtn==expHomePageNewBtn  && actHomePageEditBtn==expHomePageEditBtn && actHomePagePrintBtn==expHomePagePrintBtn
				&& actHomePageDeleteBtn==expHomePageDeleteBtn /*&& actHomePageAuthorizeBtn==expHomePageAuthorizeBtn*/ && actHomePageSuspendBtn==expHomePageSuspendBtn 
				/*&& actHomePageRejectBtn==expHomePageRejectBtn*/ && actHomePagePrintBarcodeBtn==expHomePagePrintBarcodeBtn && actHomePageExportXMLBtn==expHomePageExportXMLBtn
				&& actHomePageSettingsBtn==expHomePageSettingsBtn && actHomePageCloseBtn==expHomePageCloseBtn && actHomePageGridCheckBox==expHomePageGridCheckBox
				&& actHomePageSortingBtn==expHomePageSortingBtn && actHomePageCreateViewBn==expHomePageCreateViewBn && actHomePageCustomizeBtn==expHomePageCustomizeBtn
				&& actHomePageFilterBtn==expHomePageFilterBtn && actHomePageRefreshBtn==expHomePageRefreshBtn && actHomePageOptionsBtn==expHomePageOptionsBtn
				&& actHomePageExportBtn==expHomePageExportBtn && actHomePageAllView==expHomePageAllView && actpendingExcessInStocksView==exppendingExcessInStocksView)
    	{
				System.out.println("Test Pass : HomeScreen Options Are Displayed");
				excelReader.setCellData(xlfile, "SmokeShortageInStocks", 8, 9, resPass);
				return true;
    	}
			else
		{
				System.out.println("Test Fail : HomeScreen Options Are NOT Displayed");
				excelReader.setCellData(xlfile, "SmokeShortageInStocks", 8, 9, resFail);
				return false;
		}
		}
		}
		catch(Exception e)
		{
			System.out.println(" Entered Catch Block");
    	
        	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
        	
    		boolean actHomePageNewBtn         		=newBtn.isDisplayed();
    		boolean actHomePageEditBtn        		=editBtn.isDisplayed();
    		boolean actHomePagePrintBtn       		=printBtn.isDisplayed();
    		boolean actHomePageDeleteBtn      		=deleteBtn.isDisplayed();
    		//boolean actHomePageAuthorizeBtn   		=authorizeBtn.isDisplayed();
    		boolean actHomePageSuspendBtn     		=suspendBtn.isDisplayed();
    		//boolean actHomePageRejectBtn      		=rejectBtn.isDisplayed();
    		boolean actHomePagePrintBarcodeBtn		=printBarCodeBtn.isDisplayed();
    		boolean actHomePageExportXMLBtn   		=exportToXMLBtn.isDisplayed();
    		boolean actHomePageSettingsBtn    		=settingsBtn.isDisplayed();
    		boolean actHomePageCloseBtn       		=homeCloseBtn.isDisplayed();
    		boolean actHomePageGridCheckBox   		=grid_HeaderChkBox.isDisplayed();
    		boolean actHomePageSortingBtn     		=sortingBtn.isDisplayed();
    		boolean actHomePageCreateViewBn   		=createViewBtn.isDisplayed();
    		boolean actHomePageCustomizeBtn   		=customizeBtn.isDisplayed();
    		boolean actHomePageFilterBtn      		=filterBtn.isDisplayed();
    		boolean actHomePageRefreshBtn     		=refreshBtn.isDisplayed();
    		boolean actHomePageOptionsBtn     		=optionsBtn.isDisplayed();
    		boolean actHomePageExportBtn      		=exportBtn.isDisplayed();
    		boolean actHomePageAllView        		=homePageAllVouchersView.isDisplayed();
    		boolean actpendingExcessInStocksView  	=pendingExcessInStocksView.isDisplayed();
    		

    		boolean expHomePageNewBtn         		=true;
    		boolean expHomePageEditBtn        		=true;
    		boolean expHomePagePrintBtn       		=true;
    		boolean expHomePageDeleteBtn      		=true;
    		boolean expHomePageAuthorizeBtn   		=true;
    		boolean expHomePageSuspendBtn     		=true;
    		boolean expHomePageRejectBtn      		=true;
    		boolean expHomePagePrintBarcodeBtn		=true;
    		boolean expHomePageExportXMLBtn   		=true;
    		boolean expHomePageSettingsBtn    		=true;
    		boolean expHomePageCloseBtn       		=true;
    		boolean expHomePageGridCheckBox   		=true;
    		boolean expHomePageSortingBtn     		=true;
    		boolean expHomePageCreateViewBn   		=true;
    		boolean expHomePageCustomizeBtn   		=true;
    		boolean expHomePageFilterBtn     		=true;
    		boolean expHomePageRefreshBtn  		    =true;
    		boolean expHomePageOptionsBtn  		    =true;
    		boolean expHomePageExportBtn     		=true;
    		boolean expHomePageAllView        		=true;
    		boolean exppendingExcessInStocksView  	=true;
    		
    		System.out.println("****************************** checkShortagesInStocksHomePage  ********************************************");
    		
    		System.out.println("Home Page New Btn Value Actual           :"+actHomePageNewBtn			+"   Value Expected : "+expHomePageNewBtn);
    		System.out.println("Home Page Edit Btn Value Actual          :"+actHomePageEditBtn			+"   Value Expected : "+expHomePageEditBtn);
    		System.out.println("Home Page Print Btn Value Actual         :"+actHomePagePrintBtn			+"	 Value Expected : "+expHomePagePrintBtn);
    		System.out.println("Home Page Delete Btn Value Actual        :"+actHomePageDeleteBtn		+"	 Value Expected : "+expHomePageDeleteBtn);
    		//System.out.println("Home Page Authorize Btn Value Actual     :"+actHomePageAuthorizeBtn		+"	 Value Expected : "+expHomePageAuthorizeBtn);
    		System.out.println("Home Page Suspend Btn Value Actual       :"+actHomePageSuspendBtn		+"	 Value Expected : "+expHomePageSuspendBtn);
    		//System.out.println("Home Page Reject Btn Value Actual        :"+actHomePageRejectBtn		+"	 Value Expected : "+expHomePageRejectBtn);
    		System.out.println("Home Page Print Barcode Btn Value Actual :"+actHomePagePrintBarcodeBtn	+"	 Value Expected : "+expHomePagePrintBarcodeBtn);
    		System.out.println("Home Page Export XML Btn Value Actual    :"+actHomePageExportXMLBtn		+"	 Value Expected : "+expHomePageExportXMLBtn);
    		System.out.println("Home Page Settings Btn Value Actual      :"+actHomePageSettingsBtn		+"	 Value Expected : "+expHomePageSettingsBtn);
    		System.out.println("Home Page Close Btn Value Actual         :"+actHomePageCloseBtn			+"	 Value Expected : "+expHomePageCloseBtn);
    		System.out.println("Home Page Grid check Value Actual        :"+actHomePageGridCheckBox		+"	 Value Expected : "+expHomePageGridCheckBox);
    		System.out.println("Home Page Sorting Btn Value Actual       :"+actHomePageSortingBtn		+"	 Value Expected : "+expHomePageSortingBtn);
    		System.out.println("Home Page Create View Btn Value Actual   :"+actHomePageCreateViewBn		+"	 Value Expected : "+expHomePageCreateViewBn);
    		System.out.println("Home Page Customize Btn Value Actual     :"+actHomePageCustomizeBtn		+"	 Value Expected : "+expHomePageCustomizeBtn);
    		System.out.println("Home Page Filter check Value Actual      :"+actHomePageFilterBtn		+"	 Value Expected : "+expHomePageFilterBtn);
    		System.out.println("Home Page Refesh Btn Value Actual        :"+actHomePageRefreshBtn		+"	 Value Expected : "+expHomePageRefreshBtn);
    		System.out.println("Home Page Options Btn Value Actual       :"+actHomePageOptionsBtn		+"	 Value Expected : "+expHomePageOptionsBtn);
    		System.out.println("Home Page Export Btn Value Actual        :"+actHomePageExportBtn		+"	 Value Expected : "+expHomePageExportBtn);
    		System.out.println("Home Page All View Value Actual          :"+actHomePageExportBtn		+"	 Value Expected : "+expHomePageExportBtn);
    		System.out.println("Home Page Pending SI View Value Actual   :"+actpendingExcessInStocksView+"	 Value Expected : "+exppendingExcessInStocksView);
    		
    		
        	if(actHomePageNewBtn==expHomePageNewBtn  && actHomePageEditBtn==expHomePageEditBtn && actHomePagePrintBtn==expHomePagePrintBtn
    				&& actHomePageDeleteBtn==expHomePageDeleteBtn /*&& actHomePageAuthorizeBtn==expHomePageAuthorizeBtn*/ && actHomePageSuspendBtn==expHomePageSuspendBtn 
    				/*&& actHomePageRejectBtn==expHomePageRejectBtn*/ && actHomePagePrintBarcodeBtn==expHomePagePrintBarcodeBtn && actHomePageExportXMLBtn==expHomePageExportXMLBtn
    				&& actHomePageSettingsBtn==expHomePageSettingsBtn && actHomePageCloseBtn==expHomePageCloseBtn && actHomePageGridCheckBox==expHomePageGridCheckBox
    				&& actHomePageSortingBtn==expHomePageSortingBtn && actHomePageCreateViewBn==expHomePageCreateViewBn && actHomePageCustomizeBtn==expHomePageCustomizeBtn
    				&& actHomePageFilterBtn==expHomePageFilterBtn && actHomePageRefreshBtn==expHomePageRefreshBtn && actHomePageOptionsBtn==expHomePageOptionsBtn
    				&& actHomePageExportBtn==expHomePageExportBtn && actHomePageAllView==expHomePageAllView && actpendingExcessInStocksView==exppendingExcessInStocksView)
        	{
    				System.out.println("Test Pass : HomeScreen Options Are Displayed");
    				excelReader.setCellData(xlfile, "SmokeShortageInStocks", 8, 9, resPass);
    				return true;
        	}
    			else
    		{
    				System.out.println("Test Fail : HomeScreen Options Are NOT Displayed");
    				excelReader.setCellData(xlfile, "SmokeShortageInStocks", 8, 9, resFail);
    				return false;
    		}
    	}
		
		return true;
	 }
	
	
	

	
	public boolean checkShortagesInStocksEntryPage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		checkUserFriendlyMessage();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jumpToHeaderSectionBtn));
		

		boolean actEntryPageJumpToHeaderSectionBtn=jumpToHeaderSectionBtn.isDisplayed();
		boolean actEntryPageJumpToBodySectionBtn  =jumpToBodySectionBtn.isDisplayed();
		boolean actEntryPageJumpToFooterBtn       =jumpToFooterBtn.isDisplayed();
		boolean actEntryPageNewBtn                =new_newBtn.isDisplayed();
		boolean actEntryPageSaveBtn               =saveBtn.isDisplayed();
		boolean actEntryPagePreviousBtn           =previousBtn.isDisplayed();
		boolean actEntryPageNextBtn               =nextBtn.isDisplayed();
		boolean actEntryPagePrintBtn              =new_PrintBtn.isDisplayed();
		boolean actEntryPageSuspendBtn            =new_SuspendBtn.isDisplayed();
		boolean actEntryPageCloseBtn              =new_CloseBtn.isDisplayed();
		boolean actEntryPageToggleBtn             =toggleBtn.isDisplayed();

		
		boolean expEntryPageJumpToHeaderSectionBtn=true;
		boolean expEntryPageJumpToBodySectionBtn  =true;
		boolean expEntryPageJumpToFooterBtn       =true;
		boolean expEntryPageNewBtn	              =true;
		boolean expEntryPageSaveBtn               =true;
		boolean expEntryPagePreviousBtn           =true;
		boolean expEntryPageNextBtn               =true;
		boolean expEntryPagePrintBtn              =true;
		boolean expEntryPageSuspendBtn            =true;
		boolean expEntryPageCloseBtn              =true;
		boolean expEntryPageToggleBtn             =true;

		
		
		System.out.println("************************************* checkShortagesInStocksEntryPage  ********************************************");
		
		System.out.println("Entry Page RC Jump to Header Value Actual:"+actEntryPageJumpToHeaderSectionBtn+"  Value Expected : "+expEntryPageJumpToHeaderSectionBtn);
		System.out.println("Entry Page RC Jump To Body Value Actual  :"+actEntryPageJumpToBodySectionBtn+"    Value Expected : "+expEntryPageJumpToBodySectionBtn);
		System.out.println("Entry Page RC Jump To Footer Value Actual:"+actEntryPageJumpToFooterBtn+"         Value Expected : "+expEntryPageJumpToFooterBtn);
		System.out.println("Entry Page RC New Btn Value Actual       :"+actEntryPageNewBtn+"                  Value Expected : "+expEntryPageNewBtn);
		System.out.println("Entry Page RC Save Btn Value Actual      :"+actEntryPageSaveBtn+"                 Value Expected : "+expEntryPageSaveBtn);
		System.out.println("Entry Page RC Previous Btn Value Actual  :"+actEntryPagePreviousBtn+"             Value Expected : "+expEntryPagePreviousBtn);
		System.out.println("Entry Page RC Next Btn Value Actual      :"+actEntryPageNextBtn+"                 Value Expected : "+expEntryPageNextBtn);
		System.out.println("Entry Page RC Print Btn Value Actual     :"+actEntryPagePrintBtn+"                Value Expected : "+expEntryPagePrintBtn);
		System.out.println("Entry Page RC Suspend Btn Value Actual   :"+actEntryPageSuspendBtn+"              Value Expected : "+expEntryPageSuspendBtn);
		System.out.println("Entry Page RC Close Btn Value Actual     :"+actEntryPageCloseBtn+"                Value Expected : "+expEntryPageCloseBtn);
		System.out.println("Entry Page RC Toggle Btn Value Actual    :"+actEntryPageToggleBtn+"               Value Expected : "+expEntryPageToggleBtn);
		
		
		
		boolean result=actEntryPageJumpToHeaderSectionBtn==expEntryPageJumpToHeaderSectionBtn && actEntryPageJumpToBodySectionBtn==expEntryPageJumpToBodySectionBtn 
				&& actEntryPageJumpToFooterBtn==expEntryPageJumpToFooterBtn && actEntryPageJumpToFooterBtn==expEntryPageJumpToFooterBtn
				&& actEntryPageNewBtn==expEntryPageNewBtn && actEntryPageSaveBtn==expEntryPageSaveBtn && actEntryPagePreviousBtn==expEntryPagePreviousBtn
				&& actEntryPageNextBtn==expEntryPageNextBtn && actEntryPagePrintBtn==expEntryPagePrintBtn &&actEntryPageSuspendBtn==expEntryPageSuspendBtn 
				&& actEntryPageCloseBtn==expEntryPageCloseBtn && actEntryPageToggleBtn==expEntryPageToggleBtn;
		
		
		String actDisplay=Boolean.toString(result);
		String expDisplay=excelReader.getCellData("SmokeShortageInStocks",11, 7);
    	
    	excelReader.setCellData(xlfile, "SmokeShortageInStocks", 11, 8, actDisplay);
    	
		
		
		if( actDisplay.equalsIgnoreCase(expDisplay))
		{
			System.out.println("Test Pass : Entry Page Options Are Displayed");
			excelReader.setCellData(xlfile, "SmokeShortageInStocks", 10, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Entry Page NOT Displayed");
			excelReader.setCellData(xlfile, "SmokeShortageInStocks", 10, 9, resFail);
			return false;
		}
	}
	
	
	


	public boolean checkShortagesInStocksEntryPageHeaderFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		
		// Actual
		boolean actDocumentNumberTxt        	 =documentNumberTxt.isDisplayed();
		boolean actDateTxt                  	 =dateTxt.isDisplayed();
		boolean actshortagesinStock_NarrationTxt =shortagesinStock_NarrationTxt.isDisplayed();
		
		// Expected
		boolean expDocumentNumberTxt      	     =true;
		boolean expDateTxt                   	 =true;
		boolean expshortagesinStock_NarrationTxt =true;
		
		
		System.out.println("************************************* checkShortagesInStocksEntryPageHeaderFields  ********************************************");
		
		System.out.println("Entry Page Header Value Actual    :"+actDocumentNumberTxt			 + " Value Expected : "+expDocumentNumberTxt);
		System.out.println("Entry Page Header Value Actual    :"+actDateTxt						 + " Value Expected : "+expDateTxt);
		System.out.println("Entry Page Header Value Actual    :"+actshortagesinStock_NarrationTxt+ " Value Expected : "+expshortagesinStock_NarrationTxt);
		
		
		boolean result=actDocumentNumberTxt==expDocumentNumberTxt && actDateTxt==expDateTxt && actshortagesinStock_NarrationTxt==expshortagesinStock_NarrationTxt;
		
		
		String actmethod=Boolean.toString(result);
		String expMethod =excelReader.getCellData("SmokeShortageInStocks",13, 7);
    	
    	excelReader.setCellData(xlfile, "SmokeShortageInStocks", 13, 8, actmethod);
		
		
		if(actmethod.equalsIgnoreCase(expMethod))			     
		
		{
			System.out.println("Test Pass : entry Page Header Options Are Displayed");
			excelReader.setCellData(xlfile, "SmokeShortageInStocks", 12, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, "SmokeShortageInStocks", 12, 9, resFail);
			return false;
		}
	}
	
	@FindBy(xpath="//div[contains(text(),'Avg Rate(O)')]")
	private static WebElement voucherBodyAvgRate_o_Name;
	
	@FindBy(xpath="//div[contains(text(),'L-Sales Orders')]")
	private static WebElement voucherBodyLinkSalesOrder;
	
	@FindBy(xpath="//div[contains(text(),'Quantity to release')]")
	private static WebElement voucherBodyQtyToReleaseName;
	
	@FindBy(xpath="//div[contains(text(),'Remarks')]")
	private static WebElement voucherBodyRemarksName;

		
	public boolean checkShortagesInStocksEntryPageBodyFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		
        // Actual
		boolean actBodyWareHouseName    			=voucherBodyWareHouseName.isDisplayed();
		boolean actBodyItemName         			=voucherBodyItemName.isDisplayed();
		boolean actBodyUnitName         			=voucherBodyUnitsName.isDisplayed();
		boolean actvoucherBodyAvgRate_o_Name 		=voucherBodyAvgRate_o_Name.isDisplayed();
		boolean actBodyQtyName          			=voucherBodyQtyName.isDisplayed();
					
		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("arguments[0].scrollIntoView();", voucherBodyRMAName);
		
		boolean actBodyRate             =voucherBodyRateName.isDisplayed();
		boolean actBodyGross            =voucherBodyGrossName.isDisplayed();
		boolean actBodyBatch            =voucherBodyBatchName.isDisplayed();
		boolean actBodyBins             =voucherBodyBinsName.isDisplayed();
		boolean actBodyRMA              =voucherBodyRMAName.isDisplayed();
		

		
		// Expected
		
		boolean expBodyWareHouseName				=true; 
		boolean expBodyItemName						=true; 
		boolean expBodyUnitName						=true;
		boolean expvoucherBodyAvgRate_o_Name		=true;
		boolean expBodyQtyName						=true;
		boolean expvoucherBodyLinkSalesQuotations	=true;
		boolean expBodyRateName						=true;
		boolean expBodyGrossName					=true;
		boolean expBodyBatchName					=true;
		boolean expBodyBinsName						=true;
		boolean expBodyRMA							=true;
		
		
		System.out.println("************************************* checkShortagesInStocksEntryPageBodyFields  ********************************************");
		
		System.out.println("Entry Page Body Value Actual    :"+actBodyWareHouseName					+ " Value Expected : "+expBodyWareHouseName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyItemName						+ " Value Expected : "+expBodyItemName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyUnitName						+ " Value Expected : "+expBodyUnitName);
		System.out.println("Entry Page Body Value Actual    :"+actvoucherBodyAvgRate_o_Name			+ " Value Expected : "+expvoucherBodyAvgRate_o_Name);
		System.out.println("Entry Page Body Value Actual    :"+actBodyQtyName						+ " Value Expected : "+expBodyQtyName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyRate							+ " Value Expected : "+expBodyRateName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyGross							+ " Value Expected : "+expBodyGrossName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyBatch							+ " Value Expected : "+expBodyBatchName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyBins							+ " Value Expected : "+expBodyBinsName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyRMA							+ " Value Expected : "+expBodyRMA);
		
		
       boolean result=actBodyWareHouseName==expBodyWareHouseName && actBodyItemName==expBodyItemName && actBodyUnitName==expBodyUnitName
				&& actvoucherBodyAvgRate_o_Name==expvoucherBodyAvgRate_o_Name && actBodyQtyName==expBodyQtyName
				&& actBodyRate==expBodyQtyName && actBodyGross==expBodyGrossName 	&& actBodyBatch==expBodyBatchName 
				&& actBodyBins==expBodyBinsName&& actBodyRMA==expBodyRMA;
		
		
		String actmethod=Boolean.toString(result);
		String expMethod =excelReader.getCellData("SmokeShortageInStocks",15, 7);
    	
    	excelReader.setCellData(xlfile, "SmokeShortageInStocks", 15, 8, actmethod);
		
		
		
		
		if(actmethod.equalsIgnoreCase(expMethod) )
		{
			
			System.out.println(" Test Pass: Displayed Entry page Body Fileds ");
			excelReader.setCellData(xlfile, "SmokeShortageInStocks", 14, 9, resPass);
			
			js.executeScript("arguments[0].scrollIntoView();", voucherBodyHeaderIndex);
			
			return true;
		}
		else 
		{
			System.out.println(" Test Fail:  Not Displayed Entry page Body Fileds ");
			excelReader.setCellData(xlfile, "SmokeShortageInStocks", 14, 9, resFail);
			
			js.executeScript("arguments[0].scrollIntoView();", voucherBodyHeaderIndex);
			
			return false;
		}
			
	}

		
		


	public boolean checkShortagesInStocksEntryPageFooterFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jumpToFooterBtn));
		jumpToFooterBtn.click();
		

		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(netLabel));
		
		boolean actEntryPageFooterFieldsNetLabel  =netLabel.isDisplayed();
		boolean actEntryPageFooterFieldsNetAmount =netAmount.isDisplayed();

		boolean expEntryPageFooterFieldsNetLabel  =true;
		boolean expEntryPageFooterFieldsNetAmount =true;

		System.out.println("**************************************** checkShortagesInStocksEntryPageFooterFields  ***************************************************");
		
		System.out.println("Entry Page Footer Fields Net Label Value Actual  : "+actEntryPageFooterFieldsNetLabel+"   Value Expected : "+expEntryPageFooterFieldsNetLabel);
		System.out.println("Entry Page Footer Fields Net Amount Value Actual : "+actEntryPageFooterFieldsNetAmount+"  Value Expected : "+expEntryPageFooterFieldsNetAmount);

				
		   boolean result=actEntryPageFooterFieldsNetLabel==expEntryPageFooterFieldsNetLabel && actEntryPageFooterFieldsNetAmount==expEntryPageFooterFieldsNetAmount;
			
			
			String actmethod=Boolean.toString(result);
			String expMethod =excelReader.getCellData("SmokeShortageInStocks",17, 7);
	    	
	    	excelReader.setCellData(xlfile, "SmokeShortageInStocks", 17, 8, actmethod);
			
		
		
		if(actmethod.equalsIgnoreCase(expMethod))
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, "SmokeShortageInStocks", 16, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, "SmokeShortageInStocks", 16, 9, resFail);
			return false;
		}


	}

	
	/* @FindBy(xpath="//input[@id='id_body_33554463']")
     private static WebElement enter_ShortagesInStockAvgRateo;*/
	
	 @FindBy(xpath="//*[@id='id_body_33554479']")
     private static WebElement enter_ShortagesInStockAvgRateo;
	
	
	 
	 
	 public boolean CheckLinksDisplayInShortageInStocks() throws EncryptedDocumentException, InvalidFormatException, IOException
	 {
		 
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		workFlowExpandBtn.click();
		
		List<WebElement> rowCountInLinkScreen=LinkRowCountCL;
		
		int actLinkRowCountCLValue=rowCountInLinkScreen.size();
		
		boolean actsearchOnDropdownCL		=searchOnDropdownCL.isDisplayed();
		boolean actcontainingDropdownCL		=containingDropdownCL.isDisplayed();
		boolean actworkFlowSearchTxtCL		=workFlowSearchTxtCL.isDisplayed();
		boolean actworkFlowCustomizeBtnCL	=workFlowCustomizeBtnCL.isDisplayed();
		boolean actworkFlowOkBtnCL			=workFlowOkBtnCL.isDisplayed();
		
		String actworkFlowRow1Column1CL		=workFlowRow1Column1CL.getText();
		String actworkFlowRow1Column2CL		=workFlowRow1Column2CL.getText();
		String actworkFlowRow1Column3CL		=workFlowRow1Column3CL.getText();
		String actworkFlowRow1Column4CL		=workFlowRow1Column4CL.getText();
		String actworkFlowRow1Column5CL		=workFlowRow1Column5CL.getText();
		
		String actworkFlowRow2Column1CL		=workFlowRow2Column1CL.getText();
		String actworkFlowRow2Column2CL		=workFlowRow2Column2CL.getText();
		String actworkFlowRow2Column3CL		=workFlowRow2Column3CL.getText();
		String actworkFlowRow2Column4CL		=workFlowRow2Column4CL.getText();
		String actworkFlowRow2Column5CL		=workFlowRow2Column5CL.getText();
		
		String actworkFlowRow3Column1CL		=workFlowRow3Column1CL.getText();
		String actworkFlowRow3Column2CL		=workFlowRow3Column2CL.getText();
		String actworkFlowRow3Column3CL		=workFlowRow3Column3CL.getText();
		String actworkFlowRow3Column4CL		=workFlowRow3Column4CL.getText();
		String actworkFlowRow3Column5CL		=workFlowRow3Column5CL.getText();
		
		String actworkFlowRow4Column1CL		=workFlowRow4Column1CL.getText();
		String actworkFlowRow4Column2CL		=workFlowRow4Column2CL.getText();
		String actworkFlowRow4Column3CL		=workFlowRow4Column3CL.getText();
		String actworkFlowRow4Column4CL		=workFlowRow4Column4CL.getText();
		String actworkFlowRow4Column5CL		=workFlowRow4Column5CL.getText();

		
		// Expected
		
		int expLinkRowCountCLValue=4;
		
		boolean expsearchOnDropdownCL		=true;
		boolean expcontainingDropdownCL		=true;
		boolean expworkFlowSearchTxtCL		=true;
		boolean expworkFlowCustomizeBtnCL	=true;
		boolean expworkFlowOkBtnCL			=true;
		
		String expworkFlowRow1Column1CL		=excelReader.getCellData("SmokeShortageInStocks", 19, 7);
		String expworkFlowRow1Column3CL		=excelReader.getCellData("SmokeShortageInStocks", 20, 7);
		String expworkFlowRow1Column4CL		=excelReader.getCellData("SmokeShortageInStocks", 21, 7);
		String expworkFlowRow1Column5CL		=excelReader.getCellData("SmokeShortageInStocks", 22, 7);
		
		String expworkFlowRow2Column1CL		=excelReader.getCellData("SmokeShortageInStocks", 23, 7);
		String expworkFlowRow2Column3CL		=excelReader.getCellData("SmokeShortageInStocks", 24, 7);
		String expworkFlowRow2Column4CL		=excelReader.getCellData("SmokeShortageInStocks", 25, 7);
		String expworkFlowRow2Column5CL		=excelReader.getCellData("SmokeShortageInStocks", 26, 7);

		String expworkFlowRow3Column1CL		=excelReader.getCellData("SmokeShortageInStocks", 27, 7);
		String expworkFlowRow3Column3CL		=excelReader.getCellData("SmokeShortageInStocks", 28, 7);
		String expworkFlowRow3Column4CL		=excelReader.getCellData("SmokeShortageInStocks", 29, 7);
		String expworkFlowRow3Column5CL		=excelReader.getCellData("SmokeShortageInStocks", 30, 7);
		
		String expworkFlowRow4Column1CL		=excelReader.getCellData("SmokeShortageInStocks", 31, 7);
		String expworkFlowRow4Column3CL		=excelReader.getCellData("SmokeShortageInStocks", 32, 7);
		String expworkFlowRow4Column4CL		=excelReader.getCellData("SmokeShortageInStocks", 33, 7);
		String expworkFlowRow4Column5CL		=excelReader.getCellData("SmokeShortageInStocks", 34, 7);
		
		
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 19, 8, actworkFlowRow1Column1CL);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 20, 8, actworkFlowRow1Column3CL);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 21, 8, actworkFlowRow1Column4CL);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 22, 8, actworkFlowRow1Column5CL);
		
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 23, 8, actworkFlowRow1Column1CL);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 24, 8, actworkFlowRow1Column3CL);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 25, 8, actworkFlowRow1Column4CL);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 26, 8, actworkFlowRow1Column5CL);
		
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 27, 8, actworkFlowRow1Column1CL);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 28, 8, actworkFlowRow1Column3CL);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 29, 8, actworkFlowRow1Column4CL);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 30, 8, actworkFlowRow1Column5CL);
		
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 31, 8, actworkFlowRow1Column1CL);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 32, 8, actworkFlowRow1Column3CL);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 33, 8, actworkFlowRow1Column4CL);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 34, 8, actworkFlowRow1Column5CL);
		
		
		
		System.out.println("**************************************** CheckLinksDisplayInShortageInStocks  ***************************************");
		
		System.out.println("LinkRowCountCLValue  		: "+actLinkRowCountCLValue		+" 	Value Expected : "+expLinkRowCountCLValue);
		
		System.out.println("searchOnDropdownCL  		: "+actsearchOnDropdownCL		+" 	Value Expected : "+expsearchOnDropdownCL);
		System.out.println("containingDropdownCL  		: "+actcontainingDropdownCL		+" 	Value Expected : "+expcontainingDropdownCL);
		System.out.println("workFlowSearchTxtCL  		: "+actworkFlowSearchTxtCL		+" 	Value Expected : "+expworkFlowSearchTxtCL);
		System.out.println("workFlowCustomizeBtnCL  	: "+actworkFlowCustomizeBtnCL	+" 	Value Expected : "+expworkFlowCustomizeBtnCL);
		System.out.println("workFlowOkBtnCL  			: "+actworkFlowOkBtnCL			+" 	Value Expected : "+expworkFlowOkBtnCL);
		
		System.out.println("workFlowRow1Column1CL  		: "+actworkFlowRow1Column1CL	+" 	Value Expected : "+expworkFlowRow1Column1CL);
		System.out.println("workFlowRow1Column3CL  		: "+actworkFlowRow1Column3CL	+" 	Value Expected : "+expworkFlowRow1Column3CL);
		System.out.println("workFlowRow1Column4CL  		: "+actworkFlowRow1Column4CL	+" 	Value Expected : "+expworkFlowRow1Column4CL);
		System.out.println("workFlowRow1Column5CL  		: "+actworkFlowRow1Column5CL	+" 	Value Expected : "+expworkFlowRow1Column5CL);
		
		System.out.println("workFlowRow2Column1CL  		: "+actworkFlowRow2Column1CL	+" 	Value Expected : "+expworkFlowRow2Column1CL);
		System.out.println("workFlowRow2Column3CL  		: "+actworkFlowRow2Column3CL	+" 	Value Expected : "+expworkFlowRow2Column3CL);
		System.out.println("workFlowRow2Column4CL  		: "+actworkFlowRow2Column4CL	+" 	Value Expected : "+expworkFlowRow2Column4CL);
		System.out.println("workFlowRow2Column5CL  		: "+actworkFlowRow2Column5CL	+" 	Value Expected : "+expworkFlowRow2Column5CL);
		
		System.out.println("workFlowRow3Column1CL  		: "+actworkFlowRow3Column1CL	+" 	Value Expected : "+expworkFlowRow3Column1CL);
		System.out.println("workFlowRow3Column3CL  		: "+actworkFlowRow3Column3CL	+" 	Value Expected : "+expworkFlowRow3Column3CL);
		System.out.println("workFlowRow3Column4CL  		: "+actworkFlowRow3Column4CL	+" 	Value Expected : "+expworkFlowRow3Column4CL);
		System.out.println("workFlowRow3Column5CL  		: "+actworkFlowRow3Column5CL	+" 	Value Expected : "+expworkFlowRow3Column5CL);
		
		System.out.println("workFlowRow4Column1CL  		: "+actworkFlowRow4Column1CL	+" 	Value Expected : "+expworkFlowRow4Column1CL);
		System.out.println("workFlowRow4Column3CL  		: "+actworkFlowRow4Column3CL	+" 	Value Expected : "+expworkFlowRow4Column3CL);
		System.out.println("workFlowRow4Column4CL  		: "+actworkFlowRow4Column4CL	+" 	Value Expected : "+expworkFlowRow4Column4CL);
		System.out.println("workFlowRow4Column5CL  		: "+actworkFlowRow4Column5CL	+" 	Value Expected : "+expworkFlowRow4Column5CL);
		
				
				
		if(actLinkRowCountCLValue==expLinkRowCountCLValue
				
				&& actsearchOnDropdownCL==expsearchOnDropdownCL && actcontainingDropdownCL==expcontainingDropdownCL && actworkFlowSearchTxtCL==expworkFlowSearchTxtCL
				&& actworkFlowCustomizeBtnCL==expworkFlowCustomizeBtnCL && actworkFlowOkBtnCL==expworkFlowOkBtnCL
				
				&& actworkFlowRow1Column1CL.equalsIgnoreCase(expworkFlowRow1Column1CL)
				&& actworkFlowRow1Column3CL.equalsIgnoreCase(expworkFlowRow1Column3CL)
				&& actworkFlowRow1Column4CL.equalsIgnoreCase(expworkFlowRow1Column4CL)
				&& actworkFlowRow1Column5CL.equalsIgnoreCase(expworkFlowRow1Column5CL)
				
				&& actworkFlowRow2Column1CL.equalsIgnoreCase(expworkFlowRow2Column1CL)
				&& actworkFlowRow2Column3CL.equalsIgnoreCase(expworkFlowRow2Column3CL)
				&& actworkFlowRow2Column4CL.equalsIgnoreCase(expworkFlowRow2Column4CL)
				&& actworkFlowRow2Column5CL.equalsIgnoreCase(expworkFlowRow2Column5CL)
				
				&& actworkFlowRow3Column1CL.equalsIgnoreCase(expworkFlowRow3Column1CL)
				&& actworkFlowRow3Column3CL.equalsIgnoreCase(expworkFlowRow3Column3CL)
				&& actworkFlowRow3Column4CL.equalsIgnoreCase(expworkFlowRow3Column4CL)
				&& actworkFlowRow3Column5CL.equalsIgnoreCase(expworkFlowRow3Column5CL)
				
				&& actworkFlowRow4Column1CL.equalsIgnoreCase(expworkFlowRow4Column1CL)
				&& actworkFlowRow4Column3CL.equalsIgnoreCase(expworkFlowRow4Column3CL)
				&& actworkFlowRow4Column4CL.equalsIgnoreCase(expworkFlowRow4Column4CL)
				&& actworkFlowRow4Column5CL.equalsIgnoreCase(expworkFlowRow4Column5CL))
		{
			System.out.println("Test Pass  : Links Displayed As Expected ");
			excelReader.setCellData(xlfile, "SmokeShortageInStocks", 18, 9, resPass);
					
			return true;
		}
		else
		{
			System.out.println("Test Fail :Links Displayed As Expected ");
			excelReader.setCellData(xlfile, "SmokeShortageInStocks", 18, 9, resFail);
					
			return false;
		}
	 }
	 
	 
	 
	 
	 
	 
	public boolean checkEntryPageSuspendAndDeleteOptionOnSavingAVoucherWithUsingLinksInShortagesInStocks() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBoxCL));
		workFlowHeaderChkBoxCL.click();
			
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnInSalesVoucher));
		workFlowOkBtnInSalesVoucher.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys(Keys.END);
		pvWareHouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		pvWareHouseTxt.sendKeys("WH1");
		Thread.sleep(3000);
		pvWareHouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		select2ndRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
		select3rdRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_1stColumn));
		select4thRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_7thColumn));
		select2ndRow_7thColumn.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		
		/*Thread.sleep(2000);
		
		List<WebElement> batchrowcount=batchPopUPRowCount;
		
		int batchrowcount1=batchrowcount.size();
	
		System.out.println(batchrowcount1);
		
		for (int i = 1; i <= batchrowcount1; i++) 
		{
			WebElement batchno=getDriver().findElement(By.xpath("//tbody[@id='Id_MRPBatch_Grid_body']/tr["+i+"]/td[2]"));
			
			
			String actbatchno=batchno.getText();
			
			
			System.out.println(actbatchno);
			
			
			if(actbatchno.equalsIgnoreCase(excelReader.getCellData("SmokeShortageInStocks", 46, 6)))
			{
				Thread.sleep(2000);
				WebElement index=getDriver().findElement(By.xpath("//tbody[@id='Id_MRPBatch_Grid_body']/tr["+i+"]/td[1]"));
				getAction().doubleClick(index).build().perform();
				
				break;
			}

		}
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();*/
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_7thColumn));
		select3rdRow_7thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Bin));
		enter_Bin.sendKeys(Keys.SPACE);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchBtn));
		binSearchBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
		binAutoAllocateBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
		binOkBtn.click();*/
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_7thColumn));
		select4thRow_7thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
		enter_RMA.sendKeys(Keys.SPACE);
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardExpandBtn));
		rmaoutwardExpandBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAHeaderChkBox));
		searchRMAHeaderChkBox.click();

		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAOkBtn));
		searchRMAOkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardOkBtn));
		rmaoutwardOkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		saveBtn.click();
	
		
		boolean savingMessage=checkVoucherSavingMessage(docno);
		String actMessage=Boolean.toString(savingMessage);
		String expMessage=excelReader.getCellData("SmokeShortageInStocks", 36, 7);
		
		excelReader.setCellData(xlfile, "SmokeExcessInStocks", 36, 8, actMessage);
		
		System.out.println("actMessage   : "+actMessage  +" Value Expected : "+expMessage);
	
		
		System.out.println("******checkEntryPageSuspendAndDeleteOptionOnSavingAVoucherWithUsingLinksInShortagesInStocks*****");
		
		System.out.println("actMessage  :  "+actMessage +"Value Expected  :"+expMessage);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();
		
		boolean LoadingMessage=checkLoadingMessage();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();
	
        boolean SuspendedMessage=checkVoucherSavingMessage(docno);
		
		
		String actSuspendedMessage=Boolean.toString(savingMessage);
		String expSuspendedMessage=excelReader.getCellData("SmokeShortageInStocks", 37, 7);
		
		excelReader.setCellData(xlfile, "SmokeExcessInStocks", 37, 8, actSuspendedMessage);
		
		
		System.out.println("actSuspendedMessage  : "+actSuspendedMessage  +" Value Expected : "+expSuspendedMessage);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();
		
		boolean LoadingMessage1=checkLoadingMessage();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));
		new_DeleteBtn.click();
	
		
		getWaitForAlert();
		
		String actAlertMessage=getAlert().getText();
			
		String expAlertMessage=excelReader.getCellData("SmokeShortageInStocks", 38, 7);
		
		
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 38, 8, actAlertMessage);
		
	
		System.out.println("Alert Message on Deleteing the Voucher :  "+actAlertMessage +"  "+expAlertMessage);
		
		getAlert().accept();
		
		
		String expErrorMessage=excelReader.getCellData("SmokeShortageInStocks", 39, 7);
		
		String validationMessage=checkValidationMessage(expErrorMessage);
		
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 39, 8, validationMessage);
		
		
		if (savingMessage==true && actSuspendedMessage.equalsIgnoreCase(expSuspendedMessage) && 
				actAlertMessage.equalsIgnoreCase(expAlertMessage) && validationMessage.equalsIgnoreCase(expErrorMessage))
		{
			excelReader.setCellData(xlfile, "SmokeShortageInStocks", 35, 9, resPass);
			System.out.println(" Voucher Saved With Links in Shortage is Stocks and Suspneded Successfully");
			return true;
		} 
		else
		{
			excelReader.setCellData(xlfile, "SmokeShortageInStocks", 35, 9, resPass);
			System.out.println(" Voucher Not Saved With Links in Shortage is Stocks and Suspneded Successfully");
			return false;
		}
	}
	

	 	
	
	
	
	
	 @FindBy(xpath="//tbody[@id='Id_MRPBatch_Grid_body']/tr")
	 private static List<WebElement>  batchPopUPRowCount;
	 
		@FindBy(xpath="//button[@class='Fbutton'][contains(text(),'Cancel')]")
		private static WebElement CancelBtn; 
		
		
		@FindBy(xpath="//*[@id='WorkflowCheckboxDiv']/div/ul/li/label")
		private static List<WebElement> definitionTabChkBoxNameList;
		
		@FindBy(xpath="//*[@id='WorkflowCheckboxDiv']/div/ul/li/input")
		private static List<WebElement> definitionTabChkBoxList;
		
		
		@FindBy(xpath="//tbody[@id='mapWorkflow_GrdId_body']/tr/td[2]")
		private static List<WebElement> baseFieldList;
		
		@FindBy(xpath="//select[@id='mapWorkflow_GrdId_control_heading_ctrl_1']")
		private static WebElement baseFieldDropDown;
		
		@FindBy(xpath="//select[@id='mapWorkflow_GrdId_control_heading_ctrl_2']")
		private static WebElement linkFieldDropDown;
		
		@FindBy(xpath="//*[@id='mapWorkflow_GrdId_body']/tr[1]/td[2]")
		private static WebElement baseFieldRow1;
	 
		@FindBy(xpath="//div[contains(text(),'Excesses in Stocks')]")
		private static WebElement draggedExcessesInStocks; 
		
		@FindBy(xpath="//button[contains(text(),'Map')]")
		private static WebElement MapBtn; 
		
		@FindBy(xpath="//div[@id='Workflow_Mapping_dialog']//tr[1]//td[1]")
		private static WebElement mapFirstRowIndex;
		
		@FindBy(xpath="//span[@class='icon-delete icon-font8']")
		private static WebElement  mapdeleteRowBtn;
		
		@FindBy(xpath="//div[contains(text(),'Shortages in Stock')]")
		private static WebElement draggedShortagesInStock; 
		
		@FindBy(xpath="//span[@id='btnClear']//i[@class='icon-save icon-font6']")
		private static WebElement designWorkFlowsaveBtn; 
		
		@FindBy(xpath="//i[@class='icon-close icon-font6']")
		private static WebElement designWorkFlowcloseBtn;
		
		@FindBy(xpath="//div[@class='modal-footer']//button[@class='Fbutton'][contains(text(),'Ok')]")
		private static WebElement linkMappingOkBtn; 
		
		@FindBy(xpath="//button[contains(text(),'Close')]")
		private static WebElement linkMappingCloseBtn; 
	 
	
	public boolean checkSavingShortagesInStocksVoucherWithAllItemsWithLinksLineWise() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		designWorkflowbtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("Sales Flow");
		Thread.sleep(2000);
		workflowNameTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(3000);
		
		getAction().dragAndDropBy(draggedShortagesInStock, 0, 50).build().perform();
		
		Thread.sleep(2000);
		
		draggedExcessesInStocks.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(link1TO2));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link1TO2));
		link1TO2.click();
		
		Thread.sleep(2000);
		
		boolean res =getIsAlertPresent();
		
		if(res==true)
		{
			getWaitForAlert();
			
			getAlert().accept();
			
		}
			
			
		Thread.sleep(2000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(MapBtn));
		MapBtn.click();
		
		Thread.sleep(3000);
		
		for(int i=0;i<20;i++)
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mapFirstRowIndex));
			mapFirstRowIndex.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mapdeleteRowBtn));
			mapdeleteRowBtn.click();
			
			getWaitForAlert();
			
			getAlert().accept();
			
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(baseFieldRow1));
		baseFieldRow1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(baseFieldDropDown));
		Select baseFieldDropDownselect = new Select(baseFieldDropDown);
		
		baseFieldDropDownselect.selectByVisibleText("Item");
		baseFieldDropDown.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(linkFieldDropDown));
		Select linkFieldDropDownselect = new Select(linkFieldDropDown);
		
		linkFieldDropDownselect.selectByVisibleText("Item");
		linkFieldDropDown.sendKeys(Keys.TAB);
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(linkMappingOkBtn));
		linkMappingOkBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		OkBtn.click();
		
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkFlowsaveBtn));
		designWorkFlowsaveBtn.click();
		
		String expMessage=excelReader.getCellData("SmokeSalesInvoiceVATRelease", 728, 7);
  		
		String actMessage=checkValidationMessage(expMessage);
		  		
		excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 728, 8, actMessage);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkFlowcloseBtn));
		designWorkFlowcloseBtn.click();
		
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
	     userNameDisplay.click();
		
		
	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
	     logoutOption.click();
	     
	     LoginPage lp=new LoginPage(getDriver()); 

	     Thread.sleep(3000);
	     
	     lp.enterUserName("su");
	     
	     lp.enterPassword("su");
	     
	     Thread.sleep(2000);
	     
	     
	     lp.clickOnSignInBtn();
		
		Thread.sleep(3000);
		
		try
		{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsStocksMenu));
		inventoryTransactionsStocksMenu.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(shortagesInStockVoucher));
		shortagesInStockVoucher.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		// First Row Batch wa item
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.END);
		pvWareHouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		pvWareHouseTxt.sendKeys(Keys.SPACE);
			
		int warehousecount=pvwareHouseListCount.size();
		
		System.err.println(warehousecount);
			
		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=pvwareHouseListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("WH1"))
			{
				pvwareHouseListCount.get(i).click();
				break;
			}
		}
			
		pvWareHouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData("SmokeShortageInStocks", 42, 6)))
			{
				itemListCount.get(i).click();
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ShortagesInStockAvgRateo));
		enter_ShortagesInStockAvgRateo.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("6");
		enter_Quantity.sendKeys(Keys.TAB);
		
		Thread.sleep(3000);
		
		
		List<WebElement> rowCountInLinkScreen=LinkRowCount;
		
		int rowCount=rowCountInLinkScreen.size();
	
		System.out.println(rowCount);
		
		for (int i = 1; i <= rowCount; i++) 
		{
			WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
			
			WebElement itemName=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[9]"));
			
			String actvoucheno=voucherno.getText();
			
			String actitemName=itemName.getText();
			
			System.out.println(actvoucheno);
			
			System.out.println(actitemName);
			
			if(actvoucheno.equalsIgnoreCase(excelReader.getCellData("SmokeShortageInStocks", 44, 6)) && 
					actitemName.equalsIgnoreCase(excelReader.getCellData("SmokeShortageInStocks", 42, 6)))
			{
				Thread.sleep(2000);
				WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
				radioBtn.click();
				break;
			}

		}
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
		workFlowOkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.END);
		pvWareHouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		pvWareHouseTxt.sendKeys(Keys.SPACE);
			
		
		System.err.println(warehousecount);
			
		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=pvwareHouseListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData("SmokeShortageInStocks", 41, 6)))
			{
				pvwareHouseListCount.get(i).click();
				break;
			}
		}
			
		pvWareHouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
		select1stRow_7thColumn.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData("SmokeShortageInStocks", 45, 6));
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		
		Thread.sleep(2000);
		
		List<WebElement> batchrowcount=batchPopUPRowCount;
		
		int batchrowcount1=batchrowcount.size();
	
		System.out.println(batchrowcount1);
		
		for (int i = 1; i <= batchrowcount1; i++) 
		{
			WebElement batchno=getDriver().findElement(By.xpath("//tbody[@id='Id_MRPBatch_Grid_body']/tr["+i+"]/td[2]"));
			
			
			String actbatchno=batchno.getText();
			
			
			System.out.println(actbatchno);
			
			
			if(actbatchno.equalsIgnoreCase(excelReader.getCellData("SmokeShortageInStocks", 46, 6)))
			{
				Thread.sleep(2000);
				WebElement index=getDriver().findElement(By.xpath("//tbody[@id='Id_MRPBatch_Grid_body']/tr["+i+"]/td[1]"));
				getAction().doubleClick(index).build().perform();
				
				break;
			}

		}
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();
		
		// Second Row FIFO Cogs Item	
		
		Thread.sleep(2000);
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.END);
		pvWareHouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		pvWareHouseTxt.sendKeys(Keys.SPACE);
			
		
		System.err.println(warehousecount);
			
		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=pvwareHouseListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData("SmokeShortageInStocks", 41, 6)))
			{
				pvwareHouseListCount.get(i).click();
				break;
			}
		}
			
		pvWareHouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount2=itemListCount.size();
		
		System.err.println(itemcount2);
			
		for(int i=0 ; i < itemcount2 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData("SmokeShortageInStocks", 47, 6)))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ShortagesInStockAvgRateo));
		enter_ShortagesInStockAvgRateo.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(excelReader.getCellData("SmokeShortageInStocks", 48, 6));
		enter_Quantity.sendKeys(Keys.TAB);
		
		Thread.sleep(3000);
		
		
		List<WebElement> rowCountInLinkScreen1=LinkRowCount;
		
		int rowCount1=rowCountInLinkScreen1.size();
	
		System.out.println(rowCount1);
		
		for (int i = 1; i <= rowCount1; i++) 
		{
			WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
			
			WebElement itemName=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[9]"));
			
			String actvoucheno=voucherno.getText();
			
			String actitemName=itemName.getText();
			
			System.out.println(actvoucheno);
			
			System.out.println(actitemName);
			
			if(actvoucheno.equalsIgnoreCase(excelReader.getCellData("SmokeShortageInStocks", 49, 6)) && 
					actitemName.equalsIgnoreCase(excelReader.getCellData("SmokeShortageInStocks", 47, 6)))
			{
				Thread.sleep(2000);
				WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
				radioBtn.click();
				
				break;
			}

		}
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
		workFlowOkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		select2ndRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.END);
		pvWareHouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		pvWareHouseTxt.sendKeys(Keys.SPACE);
		
		System.err.println(warehousecount);
			
		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=pvwareHouseListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData("SmokeShortageInStocks", 41, 6)))
			{
				pvwareHouseListCount.get(i).click();
				break;
			}
		}
			
		pvWareHouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_7thColumn));
		select2ndRow_7thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData("SmokeShortageInStocks", 50, 6));
		Thread.sleep(2000);
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchBtn));
		binSearchBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
		binAutoAllocateBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
		binOkBtn.click();
		
		// Third Row Rma ritem
		
		Thread.sleep(3000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.END);
		pvWareHouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		pvWareHouseTxt.sendKeys(Keys.SPACE);
			
		
		System.err.println(warehousecount);
			
		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=pvwareHouseListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData("SmokeShortageInStocks", 41, 6)))
			{
				pvwareHouseListCount.get(i).click();
				break;
			}
		}
			
		pvWareHouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount3=itemListCount.size();
		
		System.err.println(itemcount3);
			
		for(int i=0 ; i < itemcount3 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData("SmokeShortageInStocks", 51, 6)))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ShortagesInStockAvgRateo));
		enter_ShortagesInStockAvgRateo.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(excelReader.getCellData("SmokeShortageInStocks", 52, 6));
		Thread.sleep(2000);
		enter_Quantity.sendKeys(Keys.TAB);
		
		Thread.sleep(3000);
		
		
		List<WebElement> rowCountInLinkScreen2=LinkRowCount;
		
		int rowCount2=rowCountInLinkScreen2.size();
	
		System.out.println(rowCount2);
		
		for (int i = 1; i <= rowCount2; i++) 
		{
			WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
			
			WebElement itemName=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[9]"));
			
			String actvoucheno=voucherno.getText();
			
			String actitemName=itemName.getText();
			
			System.out.println(actvoucheno);
			
			System.out.println(actitemName);
			
			if(actvoucheno.equalsIgnoreCase(excelReader.getCellData("SmokeShortageInStocks", 53, 6)) &&
                      actitemName.equalsIgnoreCase(excelReader.getCellData("SmokeShortageInStocks", 51, 6)))
			{
				Thread.sleep(2000);
				WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
				radioBtn.click();
				
				break;
			}

		}
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
		workFlowOkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
		select3rdRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.END);
		pvWareHouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		pvWareHouseTxt.sendKeys(Keys.SPACE);
			
		System.err.println(warehousecount);
			
		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=pvwareHouseListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData("SmokeShortageInStocks", 41, 6)))
			{
				pvwareHouseListCount.get(i).click();
				break;
			}
		}
			
		pvWareHouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_7thColumn));
		select3rdRow_7thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData("SmokeShortageInStocks", 54, 6));
		Thread.sleep(2000);
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
		enter_RMA.sendKeys(Keys.SPACE);
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardExpandBtn));
		rmaoutwardExpandBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAHeaderChkBox));
		searchRMAHeaderChkBox.click();

		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAOkBtn));
		searchRMAOkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardOkBtn));
		rmaoutwardOkBtn.click();
		
		// Fourth Row StockItem
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_1stColumn));
		select4thRow_1stColumn.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.END);
		pvWareHouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		pvWareHouseTxt.sendKeys(Keys.SPACE);
			
		
		System.err.println(warehousecount);
			
		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=pvwareHouseListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData("SmokeShortageInStocks", 41, 6)))
			{
				pvwareHouseListCount.get(i).click();
				break;
			}
		}
			
		pvWareHouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount4=itemListCount.size();
		
		System.err.println(itemcount4);
			
		for(int i=0 ; i < itemcount4 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData("SmokeShortageInStocks", 55, 6)))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ShortagesInStockAvgRateo));
		enter_ShortagesInStockAvgRateo.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(excelReader.getCellData("SmokeShortageInStocks", 56, 6));
		Thread.sleep(2000);
		enter_Quantity.sendKeys(Keys.TAB);
		
		Thread.sleep(3000);
		
		
		List<WebElement> rowCountInLinkScreen3=LinkRowCount;
		
		int rowCount3=rowCountInLinkScreen3.size();
	
		System.out.println(rowCount3);
		
		for (int i = 1; i <= rowCount3; i++) 
		{
			WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
			
			WebElement itemName=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[9]"));
			
			String actvoucheno=voucherno.getText();
			
			String actitemName=itemName.getText();
			
			System.out.println(actvoucheno);
			
			System.out.println(actitemName);
			
			if(actvoucheno.equalsIgnoreCase(excelReader.getCellData("SmokeShortageInStocks", 57, 6)) &&
					actitemName.equalsIgnoreCase(excelReader.getCellData("SmokeShortageInStocks", 55, 6)))
			{
				Thread.sleep(2000);
				WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
				radioBtn.click();
				
				break;
			}

		}
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
		workFlowOkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_1stColumn));
		select4thRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.END);
		pvWareHouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		pvWareHouseTxt.sendKeys(Keys.SPACE);
			
		
		System.err.println(warehousecount);
			
		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=pvwareHouseListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData("SmokeShortageInStocks", 41, 6)))
			{
				pvwareHouseListCount.get(i).click();
				break;
			}
		}
			
		pvWareHouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_7thColumn));
		select4thRow_7thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
			
		Thread.sleep(2000);
		
		String docno=documentNumberTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
	
		boolean savingMessage=checkVoucherSavingMessage(docno);
		
		String validationMessage=Boolean.toString(savingMessage);
		String ExpMessage=excelReader.getCellData("SmokeShortageInStocks", 59, 7);
		
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 59, 8, validationMessage);
		
		
		System.out.println("************************************* checkSavingShortagesInStocksVoucherWithAllItems  ********************************************");
		
		System.out.println("validationMessage  	:  "+validationMessage +" Value Expected : "+ExpMessage);
		
		System.out.println("SavingMessage  		:  "+savingMessage +" Value Expected : "+"TRUE");
		
		if(validationMessage.equalsIgnoreCase(ExpMessage) )
		{
			System.out.println("Test Pass : Voucher Saved Successfully");
			excelReader.setCellData(xlfile, "SmokeShortageInStocks", 40, 8, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Voucher Not Saved");
			excelReader.setCellData(xlfile, "SmokeShortageInStocks", 40, 8, resFail);
			return false;
		}
		}
		catch(Exception e)
		{
			getDriver().navigate().refresh();
			
			Thread.sleep(3000);
			
			 getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(userNameDisplay));
			 userNameDisplay.click();
			 
			 Thread.sleep(3000);
				  
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			 logoutOption.click();
			 
			 Thread.sleep(2000);
			 
			 getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(username));
			 username.click();
				 
			 username.sendKeys("su");
			 getAction().moveToElement(username).sendKeys(Keys.TAB).perform();
			 
			 getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(password));
			 password.sendKeys("su");
			 
			 getAction().moveToElement(password).sendKeys(Keys.TAB).perform();
			  
			 getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(signIn));
			 signIn.click();
			 
			Thread.sleep(2000);
			
			getDriver().navigate().refresh();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
			inventoryTransactionsMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsStocksMenu));
			inventoryTransactionsStocksMenu.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(shortagesInStockVoucher));
			shortagesInStockVoucher.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			// First Row Batch wa item
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
			pvWareHouseTxt.click();
			pvWareHouseTxt.sendKeys(Keys.END);
			pvWareHouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			pvWareHouseTxt.sendKeys(Keys.SPACE);
				
			int warehousecount=pvwareHouseListCount.size();
			
			System.err.println(warehousecount);
				
			for(int i=0 ; i < warehousecount ;i++)
			{
				String data=pvwareHouseListCount.get(i).getText();
				
				if(data.equalsIgnoreCase("WH1"))
				{
					pvwareHouseListCount.get(i).click();
					break;
				}
			}
				
			pvWareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.END);
			enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemcount1=itemListCount.size();
			System.err.println(itemcount1);
				
			for(int i=0 ; i < itemcount1 ;i++)
			{
				String data=itemListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("SmokeShortageInStocks", 42, 6)))
				{
					itemListCount.get(i).click();
					break;
				}
			}
				
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ShortagesInStockAvgRateo));
			enter_ShortagesInStockAvgRateo.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("6");
			enter_Quantity.sendKeys(Keys.TAB);
			
			Thread.sleep(3000);
			
			
			List<WebElement> rowCountInLinkScreen=LinkRowCount;
			
			int rowCount=rowCountInLinkScreen.size();
		
			System.out.println(rowCount);
			
			for (int i = 1; i <= rowCount; i++) 
			{
				WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
				
				WebElement itemName=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[9]"));
				
				String actvoucheno=voucherno.getText();
				
				String actitemName=itemName.getText();
				
				System.out.println(actvoucheno);
				
				System.out.println(actitemName);
				
				if(actvoucheno.equalsIgnoreCase(excelReader.getCellData("SmokeShortageInStocks", 44, 6)) && 
						actitemName.equalsIgnoreCase(excelReader.getCellData("SmokeShortageInStocks", 42, 6)))
				{
					Thread.sleep(2000);
					WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
					radioBtn.click();
					break;
				}

			}
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
			workFlowOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
			pvWareHouseTxt.click();
			pvWareHouseTxt.sendKeys(Keys.END);
			pvWareHouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			pvWareHouseTxt.sendKeys(Keys.SPACE);
				
			
			System.err.println(warehousecount);
				
			for(int i=0 ; i < warehousecount ;i++)
			{
				String data=pvwareHouseListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("SmokeShortageInStocks", 41, 6)))
				{
					pvwareHouseListCount.get(i).click();
					break;
				}
			}
				
			pvWareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
			select1stRow_7thColumn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(excelReader.getCellData("SmokeShortageInStocks", 45, 6));
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			
			Thread.sleep(2000);
			
			List<WebElement> batchrowcount=batchPopUPRowCount;
			
			int batchrowcount1=batchrowcount.size();
		
			System.out.println(batchrowcount1);
			
			for (int i = 1; i <= batchrowcount1; i++) 
			{
				WebElement batchno=getDriver().findElement(By.xpath("//tbody[@id='Id_MRPBatch_Grid_body']/tr["+i+"]/td[2]"));
				
				
				String actbatchno=batchno.getText();
				
				
				System.out.println(actbatchno);
				
				
				if(actbatchno.equalsIgnoreCase(excelReader.getCellData("SmokeShortageInStocks", 46, 6)))
				{
					Thread.sleep(2000);
					WebElement index=getDriver().findElement(By.xpath("//tbody[@id='Id_MRPBatch_Grid_body']/tr["+i+"]/td[1]"));
					getAction().doubleClick(index).build().perform();
					
					break;
				}

			}
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			checkUserFriendlyMessage();
			
			getDriver().navigate().refresh();
			
			Thread.sleep(3000);
			
			 getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(userNameDisplay));
			 userNameDisplay.click();
			 
			 Thread.sleep(3000);
				  
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			 logoutOption.click();
			 
			 Thread.sleep(2000);
			 
			 getDriver().navigate().refresh();
			 
			 Thread.sleep(2000);
			 
			 getDriver().navigate().refresh();
			 
			 Thread.sleep(2000);
			 
			 getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(username));
			 username.click();
				 
			 username.sendKeys("su");
			 getAction().moveToElement(username).sendKeys(Keys.TAB).perform();
			 
			 getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(password));
			 password.sendKeys("su");
			 
			 getAction().moveToElement(password).sendKeys(Keys.TAB).perform();
			  
			 getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(signIn));
			 signIn.click();
			 
			Thread.sleep(2000);
			
			getDriver().navigate().refresh();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
			inventoryTransactionsMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsStocksMenu));
			inventoryTransactionsStocksMenu.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(shortagesInStockVoucher));
			shortagesInStockVoucher.click();
			
			Thread.sleep(5000);
			
			int docNumberListCount = docNumberList.size();
			
			for(int i=0;i<docNumberListCount;i++)
			{
				String data = docNumberList.get(i).getText();
				
				if(data.equalsIgnoreCase("1"))
				{
					getAction().doubleClick(voucherChkBoxList.get(i)).build().perform();
					break;
				}
			}
			
			
			checkUserFriendlyMessage();
			
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
			select2ndRow_1stColumn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
			pvWareHouseTxt.click();
			pvWareHouseTxt.sendKeys(Keys.END);
			pvWareHouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			pvWareHouseTxt.sendKeys(Keys.SPACE);
				
			
			System.err.println(warehousecount);
				
			for(int i=0 ; i < warehousecount ;i++)
			{
				String data=pvwareHouseListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("SmokeShortageInStocks", 41, 6)))
				{
					pvwareHouseListCount.get(i).click();
					break;
				}
			}
				
			pvWareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.END);
			enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemcount2=itemListCount.size();
			
			System.err.println(itemcount2);
				
			for(int i=0 ; i < itemcount2 ;i++)
			{
				String data=itemListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("SmokeShortageInStocks", 47, 6)))
				{
					itemListCount.get(i).click();
					
					break;
				}
			}
				
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ShortagesInStockAvgRateo));
			enter_ShortagesInStockAvgRateo.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys(excelReader.getCellData("SmokeShortageInStocks", 48, 6));
			enter_Quantity.sendKeys(Keys.TAB);
			
			Thread.sleep(3000);
			
			
			List<WebElement> rowCountInLinkScreen1=LinkRowCount;
			
			int rowCount1=rowCountInLinkScreen1.size();
		
			System.out.println(rowCount1);
			
			for (int i = 1; i <= rowCount1; i++) 
			{
				WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
				
				WebElement itemName=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[9]"));
				
				String actvoucheno=voucherno.getText();
				
				String actitemName=itemName.getText();
				
				System.out.println(actvoucheno);
				
				System.out.println(actitemName);
				
				if(actvoucheno.equalsIgnoreCase(excelReader.getCellData("SmokeShortageInStocks", 49, 6)) && 
						actitemName.equalsIgnoreCase(excelReader.getCellData("SmokeShortageInStocks", 47, 6)))
				{
					Thread.sleep(2000);
					WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
					radioBtn.click();
					
					break;
				}

			}
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
			workFlowOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
			select2ndRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
			pvWareHouseTxt.click();
			pvWareHouseTxt.sendKeys(Keys.END);
			pvWareHouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			pvWareHouseTxt.sendKeys(Keys.SPACE);
			
			System.err.println(warehousecount);
				
			for(int i=0 ; i < warehousecount ;i++)
			{
				String data=pvwareHouseListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("SmokeShortageInStocks", 41, 6)))
				{
					pvwareHouseListCount.get(i).click();
					break;
				}
			}
				
			pvWareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_7thColumn));
			select2ndRow_7thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(excelReader.getCellData("SmokeShortageInStocks", 50, 6));
			Thread.sleep(2000);
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchBtn));
			binSearchBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
			binAutoAllocateBtn.click();

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
			binOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			checkUserFriendlyMessage();
			
			getDriver().navigate().refresh();
			
			Thread.sleep(3000);
			
			 getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(userNameDisplay));
			 userNameDisplay.click();
			 
			 Thread.sleep(3000);
				  
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			 logoutOption.click();
			 
			 Thread.sleep(2000);
			 
			 getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(username));
			 username.click();
				 
			 username.sendKeys("su");
			 getAction().moveToElement(username).sendKeys(Keys.TAB).perform();
			 
			 getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(password));
			 password.sendKeys("su");
			 
			 getAction().moveToElement(password).sendKeys(Keys.TAB).perform();
			  
			 getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(signIn));
			 signIn.click();
			 
			Thread.sleep(2000);
			
			getDriver().navigate().refresh();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
			inventoryTransactionsMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsStocksMenu));
			inventoryTransactionsStocksMenu.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(shortagesInStockVoucher));
			shortagesInStockVoucher.click();
			
			Thread.sleep(5000);
			
			int docNumberListCount1 = docNumberList.size();
			
			for(int i=0;i<docNumberListCount1;i++)
			{
				String data = docNumberList.get(i).getText();
				
				if(data.equalsIgnoreCase("1"))
				{
					getAction().doubleClick(voucherChkBoxList.get(i)).build().perform();
					break;
				}
			}
			
			
			checkUserFriendlyMessage();
			
			// Third Row Rma ritem
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
			select3rdRow_1stColumn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
			pvWareHouseTxt.click();
			pvWareHouseTxt.sendKeys(Keys.END);
			pvWareHouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			pvWareHouseTxt.sendKeys(Keys.SPACE);
				
			
			System.err.println(warehousecount);
				
			for(int i=0 ; i < warehousecount ;i++)
			{
				String data=pvwareHouseListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("SmokeShortageInStocks", 41, 6)))
				{
					pvwareHouseListCount.get(i).click();
					break;
				}
			}
				
			pvWareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.END);
			enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemcount3=itemListCount.size();
			
			System.err.println(itemcount3);
				
			for(int i=0 ; i < itemcount3 ;i++)
			{
				String data=itemListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("SmokeShortageInStocks", 51, 6)))
				{
					itemListCount.get(i).click();
					
					break;
				}
			}
				
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ShortagesInStockAvgRateo));
			enter_ShortagesInStockAvgRateo.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys(excelReader.getCellData("SmokeShortageInStocks", 52, 6));
			Thread.sleep(2000);
			enter_Quantity.sendKeys(Keys.TAB);
			
			Thread.sleep(3000);
			
			
			List<WebElement> rowCountInLinkScreen2=LinkRowCount;
			
			int rowCount2=rowCountInLinkScreen2.size();
		
			System.out.println(rowCount2);
			
			for (int i = 1; i <= rowCount2; i++) 
			{
				WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
				
				WebElement itemName=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[9]"));
				
				String actvoucheno=voucherno.getText();
				
				String actitemName=itemName.getText();
				
				System.out.println(actvoucheno);
				
				System.out.println(actitemName);
				
				if(actvoucheno.equalsIgnoreCase(excelReader.getCellData("SmokeShortageInStocks", 53, 6)) &&
	                      actitemName.equalsIgnoreCase(excelReader.getCellData("SmokeShortageInStocks", 51, 6)))
				{
					Thread.sleep(2000);
					WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
					radioBtn.click();
					
					break;
				}

			}
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
			workFlowOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
			select3rdRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
			pvWareHouseTxt.click();
			pvWareHouseTxt.sendKeys(Keys.END);
			pvWareHouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			pvWareHouseTxt.sendKeys(Keys.SPACE);
				
			System.err.println(warehousecount);
				
			for(int i=0 ; i < warehousecount ;i++)
			{
				String data=pvwareHouseListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("SmokeShortageInStocks", 41, 6)))
				{
					pvwareHouseListCount.get(i).click();
					break;
				}
			}
				
			pvWareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_7thColumn));
			select3rdRow_7thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(excelReader.getCellData("SmokeShortageInStocks", 54, 6));
			Thread.sleep(2000);
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
			enter_RMA.sendKeys(Keys.SPACE);
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardExpandBtn));
			rmaoutwardExpandBtn.click();

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAHeaderChkBox));
			searchRMAHeaderChkBox.click();

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAOkBtn));
			searchRMAOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardOkBtn));
			rmaoutwardOkBtn.click();
			
Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			checkUserFriendlyMessage();
			
getDriver().navigate().refresh();
			
			Thread.sleep(3000);
			
			 getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(userNameDisplay));
			 userNameDisplay.click();
			 
			 Thread.sleep(3000);
				  
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			 logoutOption.click();
			 
			 Thread.sleep(2000);
			 
			 getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(username));
			 username.click();
				 
			 username.sendKeys("su");
			 getAction().moveToElement(username).sendKeys(Keys.TAB).perform();
			 
			 getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(password));
			 password.sendKeys("su");
			 
			 getAction().moveToElement(password).sendKeys(Keys.TAB).perform();
			  
			 getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(signIn));
			 signIn.click();
			 
			Thread.sleep(2000);
			
			getDriver().navigate().refresh();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
			inventoryTransactionsMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsStocksMenu));
			inventoryTransactionsStocksMenu.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(shortagesInStockVoucher));
			shortagesInStockVoucher.click();
			
			Thread.sleep(5000);
			
			int docNumberListCount2 = docNumberList.size();
			
			for(int i=0;i<docNumberListCount2;i++)
			{
				String data = docNumberList.get(i).getText();
				
				if(data.equalsIgnoreCase("1"))
				{
					getAction().doubleClick(voucherChkBoxList.get(i)).build().perform();
					break;
				}
			}
			
			
			checkUserFriendlyMessage();
			
			// Fourth Row StockItem
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_1stColumn));
			select4thRow_1stColumn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
			pvWareHouseTxt.click();
			pvWareHouseTxt.sendKeys(Keys.END);
			pvWareHouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			pvWareHouseTxt.sendKeys(Keys.SPACE);
				
			
			System.err.println(warehousecount);
				
			for(int i=0 ; i < warehousecount ;i++)
			{
				String data=pvwareHouseListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("SmokeShortageInStocks", 41, 6)))
				{
					pvwareHouseListCount.get(i).click();
					break;
				}
			}
				
			pvWareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.END);
			enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemcount4=itemListCount.size();
			
			System.err.println(itemcount4);
				
			for(int i=0 ; i < itemcount4 ;i++)
			{
				String data=itemListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("SmokeShortageInStocks", 55, 6)))
				{
					itemListCount.get(i).click();
					
					break;
				}
			}
				
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ShortagesInStockAvgRateo));
			enter_ShortagesInStockAvgRateo.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys(excelReader.getCellData("SmokeShortageInStocks", 56, 6));
			Thread.sleep(2000);
			enter_Quantity.sendKeys(Keys.TAB);
			
			Thread.sleep(3000);
			
			
			List<WebElement> rowCountInLinkScreen3=LinkRowCount;
			
			int rowCount3=rowCountInLinkScreen3.size();
		
			System.out.println(rowCount3);
			
			for (int i = 1; i <= rowCount3; i++) 
			{
				WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
				
				WebElement itemName=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[9]"));
				
				String actvoucheno=voucherno.getText();
				
				String actitemName=itemName.getText();
				
				System.out.println(actvoucheno);
				
				System.out.println(actitemName);
				
				if(actvoucheno.equalsIgnoreCase(excelReader.getCellData("SmokeShortageInStocks", 57, 6)) &&
						actitemName.equalsIgnoreCase(excelReader.getCellData("SmokeShortageInStocks", 55, 6)))
				{
					Thread.sleep(2000);
					WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
					radioBtn.click();
					
					break;
				}

			}
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
			workFlowOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_1stColumn));
			select4thRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
			pvWareHouseTxt.click();
			pvWareHouseTxt.sendKeys(Keys.END);
			pvWareHouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			pvWareHouseTxt.sendKeys(Keys.SPACE);
				
			
			System.err.println(warehousecount);
				
			for(int i=0 ; i < warehousecount ;i++)
			{
				String data=pvwareHouseListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("SmokeShortageInStocks", 41, 6)))
				{
					pvwareHouseListCount.get(i).click();
					break;
				}
			}
				
			pvWareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_7thColumn));
			select4thRow_7thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
				
			Thread.sleep(2000);
			
			String docno=documentNumberTxt.getAttribute("value");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			
			System.err.println("Exception : "+e.getMessage());
			return false;
		}
	}
	
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_workflow_body']/tr/td[9]")
	private static List<WebElement> itemNameList;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_workflow_body']/tr/td[7]")
	private static List<WebElement> voucherNameList;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_workflow_body']/tr/td[2]/input")
	private static List<WebElement> workFlowChkBox;
	
	@FindBy(xpath="//*[@id='tblBodyTransRender']/tr/td[4]")
	private static List<WebElement> docNumberList;
	
	@FindBy(xpath="//*[@id='tblBodyTransRender']/tr/td[2]/input")
	private static List<WebElement> voucherChkBoxList;
	  @FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr/td")
	  private static List<WebElement> voucherGridBodyList;
	
	public boolean checkSavedDocumentinShortageInStocks() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();
					
		checkUserFriendlyMessage();
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
   	 
   	 int voucherGridBodyListCount = voucherGridBodyList.size();
			
   	 ArrayList<String> voucherGridBodyListArray = new ArrayList<String>();
			
   	 for(int i=0;i<voucherGridBodyListCount;i++)
   	 {
   		 
   		 String data = voucherGridBodyList.get(i).getText();
   		 
   		 
   		 voucherGridBodyListArray.add(data);
   	 }	
				
   	 
   	 String actvoucherGridBodyList = voucherGridBodyListArray.toString();
			
   	 String expvoucherGridBodyList = "";
			
   	 System.out.println("voucherGridBodyList Actual    : " + actvoucherGridBodyList);
   	 System.out.println("voucherGridBodyList Expected  : " + expvoucherGridBodyList);
   	 
		String actWarehouseR1   =select1stRow_1stColumn.getText();
		String actItemR1        =select1stRow_2ndColumn.getText();
		String actUnitsR1       =select1stRow_3rdColumn.getText();
		String actQtyR1         =select1stRow_5thColumn.getText();
		String actLinksR1       =select1stRow_6thColumn.getText();
		String actRateR1        =select1stRow_7thColumn.getText();
		String actGrossR1       =select1stRow_8thColumn.getText();
		String actBatchR1       =select1stRow_9thColumn.getText();
		
		String expWarehouseR1   =excelReader.getCellData("SmokeShortageInStocks", 61, 7);
		String expItemR1        =excelReader.getCellData("SmokeShortageInStocks", 62, 7);
		String expUnitsR1       =excelReader.getCellData("SmokeShortageInStocks", 63, 7);
		String expQtyR1         =excelReader.getCellData("SmokeShortageInStocks", 64, 7);
		String expLinksR1       =excelReader.getCellData("SmokeShortageInStocks", 65, 7);
		String expRateR1        =excelReader.getCellData("SmokeShortageInStocks", 66, 7);
		String expGrossR1       =excelReader.getCellData("SmokeShortageInStocks", 67, 7);
		String expBatchR1       =excelReader.getCellData("SmokeShortageInStocks", 68, 7);
		
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 61, 8, actWarehouseR1);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 62, 8, actItemR1);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 63, 8, actUnitsR1);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 64, 8, actQtyR1);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 65, 8, actLinksR1);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 66, 8, actRateR1);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 67, 8, actGrossR1);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 68, 8, actBatchR1);
	
		String actWarehouseR2   =select2ndRow_1stColumn.getText();
		String actItemR2        =select2ndRow_2ndColumn.getText();
		String actUnitsR2       =select2ndRow_3rdColumn.getText();
		String actQtyR2         =select2ndRow_5thColumn.getText();
		String actLinksR2       =select2ndRow_6thColumn.getText();
		String actRateR2        =select2ndRow_7thColumn.getText();
		String actGrossR2       =select2ndRow_8thColumn.getText();
		String actBinR2         =select2ndRow_10thColumn.getText();
		
		
		
		String expWarehouseR2   =excelReader.getCellData("SmokeShortageInStocks", 69, 7);
		String expItemR2        =excelReader.getCellData("SmokeShortageInStocks", 70, 7);
		String expUnitsR2       =excelReader.getCellData("SmokeShortageInStocks", 71, 7);
		String expQtyR2         =excelReader.getCellData("SmokeShortageInStocks", 72, 7);
		String expLinksR2       =excelReader.getCellData("SmokeShortageInStocks", 73, 7);
		String expRateR2        =excelReader.getCellData("SmokeShortageInStocks", 74, 7);
		String expGrossR2       =excelReader.getCellData("SmokeShortageInStocks", 75, 7);
		String expBinR2        =excelReader.getCellData("SmokeShortageInStocks", 76, 7);
		
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 69, 8, actWarehouseR2);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 70, 8, actItemR2);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 71, 8, actUnitsR2);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 72, 8, actQtyR2);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 73, 8, actLinksR2);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 74, 8, actRateR2);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 75, 8, actGrossR2);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 76, 8, actBinR2);
		
		
		String actWarehouseR3   =select3rdRow_1stColumn.getText();
		String actItemR3        =select3rdRow_2ndColumn.getText();
		String actUnitsR3       =select3rdRow_3rdColumn.getText();
		String actQtyR3         =select3rdRow_5thColumn.getText();
		String actLinksR3       =select3rdRow_6thColumn.getText();
		String actRateR3        =select3rdRow_7thColumn.getText();
		String actGrossR3       =select3rdRow_8thColumn.getText();
		String actRMAR3         =select3rdRow_11thColumn.getText();
		
		
		
		String expWarehouseR3   =excelReader.getCellData("SmokeShortageInStocks", 77, 7);
		String expItemR3        =excelReader.getCellData("SmokeShortageInStocks", 78, 7);
		String expUnitsR3       =excelReader.getCellData("SmokeShortageInStocks", 79, 7);
		String expQtyR3         =excelReader.getCellData("SmokeShortageInStocks", 80, 7);
		String expLinksR3       =excelReader.getCellData("SmokeShortageInStocks", 81, 7);
		String expRateR3        =excelReader.getCellData("SmokeShortageInStocks", 82, 7);
		String expGrossR3       =excelReader.getCellData("SmokeShortageInStocks", 83, 7);
		String expRMAR3         =excelReader.getCellData("SmokeShortageInStocks", 84, 7);
		
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 77, 8, actWarehouseR3);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 78, 8, actItemR3);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 79, 8, actUnitsR3);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 80, 8, actQtyR3);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 81, 8, actLinksR3);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 82, 8, actRateR3);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 83, 8, actGrossR3);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 84, 8, actRMAR3);
		

		//Change 
		
		String actWarehouseR4   =select4thRow_1stColumn.getText();
		String actItemR4        =select4thRow_2ndColumn.getText();
		String actUnitsR4       =select4thRow_3rdColumn.getText();
		String actQtyR4         =select4thRow_5thColumn.getText();
		String actLinksR4       =select4thRow_6thColumn.getText();
		String actRateR4        =select4thRow_7thColumn.getText();
		String actGrossR4       =select4thRow_8thColumn.getText();
		
		
		String expWarehouseR4   =excelReader.getCellData("SmokeShortageInStocks", 85, 7);
		String expItemR4        =excelReader.getCellData("SmokeShortageInStocks", 86, 7);
		String expUnitsR4       =excelReader.getCellData("SmokeShortageInStocks", 87, 7);
		String expQtyR4         =excelReader.getCellData("SmokeShortageInStocks", 88, 7);
		String expLinksR4       =excelReader.getCellData("SmokeShortageInStocks", 89, 7);
		String expRateR4        =excelReader.getCellData("SmokeShortageInStocks", 90, 7);
		String expGrossR4       =excelReader.getCellData("SmokeShortageInStocks", 91, 7);
		
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 85, 8, actWarehouseR3);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 86, 8, actItemR3);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 87, 8, actUnitsR3);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 88, 8, actQtyR3);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 89, 8, actLinksR3);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 90, 8, actRateR3);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 91, 8, actGrossR3);

		System.out.println("***********************************checkSavedDocumentinShortageInStocks***********************");
		
		System.out.println("WarehouseR1    : "+actWarehouseR1  +" Value Expected  : "+expWarehouseR1);
		System.out.println("ItemR1         : "+actItemR1       +" Value Expected  : "+expItemR1);
		System.out.println("UnitsR1        : "+actUnitsR1      +" Value Expected  : "+expUnitsR1);
		System.out.println("QtyR1          : "+actQtyR1        +" Value Expected  : "+expQtyR1);
		System.out.println("LinksR1        : "+actLinksR1      +" Value Expected  : "+expLinksR1);
		System.out.println("RateR1         : "+actRateR1       +" Value Expected  : "+expRateR1);
		System.out.println("GrossR1        : "+actGrossR1      +" Value Expected  : "+expGrossR1);
		System.out.println("BatchR1        : "+actBatchR1      +" Value Expected  : "+expBatchR1);
		
		System.out.println("WarehouseR2    : "+actWarehouseR2  +" Value Expected  : "+expWarehouseR2);
		System.out.println("ItemR2         : "+actItemR2       +" Value Expected  : "+expItemR2);
		System.out.println("UnitsR2        : "+actUnitsR2      +" Value Expected  : "+expUnitsR2);
		System.out.println("QtyR2          : "+actQtyR2        +" Value Expected  : "+expQtyR2);
		System.out.println("LinksR2        : "+actLinksR2      +" Value Expected  : "+expLinksR2);
		System.out.println("RateR2         : "+actRateR2       +" Value Expected  : "+expRateR2);
		System.out.println("GrossR2        : "+actGrossR2      +" Value Expected  : "+expGrossR2);
		System.out.println("BinR2        : "+actBinR2      +" Value Expected  : "+expBinR2);
		
		System.out.println("WarehouseR3    : "+actWarehouseR3  +" Value Expected  : "+expWarehouseR3);
		System.out.println("ItemR3         : "+actItemR3       +" Value Expected  : "+expItemR3);
		System.out.println("UnitsR3        : "+actUnitsR3      +" Value Expected  : "+expUnitsR3);
		System.out.println("QtyR3          : "+actQtyR3        +" Value Expected  : "+expQtyR3);
		System.out.println("LinksR3        : "+actLinksR3      +" Value Expected  : "+expLinksR3);
		System.out.println("RateR3         : "+actRateR3       +" Value Expected  : "+expRateR3);
		System.out.println("GrossR3        : "+actGrossR3      +" Value Expected  : "+expGrossR3);
		System.out.println("RMAR3          : "+actRMAR3        +" Value Expected  : "+expRMAR3);
		
		System.out.println("WarehouseR4    : "+actWarehouseR4  +" Value Expected  : "+expWarehouseR4);
		System.out.println("ItemR4         : "+actItemR4       +" Value Expected  : "+expItemR4);
		System.out.println("UnitsR4        : "+actUnitsR4      +" Value Expected  : "+expUnitsR4);
		System.out.println("QtyR4          : "+actQtyR4        +" Value Expected  : "+expQtyR4);
		System.out.println("LinksR4        : "+actLinksR4      +" Value Expected  : "+expLinksR4);
		System.out.println("RateR4         : "+actRateR4       +" Value Expected  : "+expRateR4);
		System.out.println("GrossR4        : "+actGrossR4      +" Value Expected  : "+expGrossR4);
		
		
		if (actWarehouseR1.equalsIgnoreCase(expWarehouseR1) && actItemR1.equalsIgnoreCase(expItemR1) && 
				actUnitsR1.equalsIgnoreCase(expUnitsR1) && actQtyR1.equalsIgnoreCase(expQtyR1) && actLinksR1.equalsIgnoreCase(expLinksR1) && 
				actRateR1.equalsIgnoreCase(expRateR1) && actGrossR1.equalsIgnoreCase(expGrossR1) && actBatchR1.equalsIgnoreCase(expBatchR1) && 
				
				actWarehouseR2.equalsIgnoreCase(expWarehouseR2) && actItemR2.equalsIgnoreCase(expItemR2) && 
				actUnitsR2.equalsIgnoreCase(expUnitsR2) && actQtyR2.equalsIgnoreCase(expQtyR2) && actLinksR2.equalsIgnoreCase(expLinksR2) && 
				actRateR2.equalsIgnoreCase(expRateR2) && actGrossR2.equalsIgnoreCase(expGrossR2) && actBinR2.equalsIgnoreCase(expBinR2) &&
				
				actWarehouseR3.equalsIgnoreCase(expWarehouseR3) && actItemR3.equalsIgnoreCase(expItemR3) && 
				actUnitsR3.equalsIgnoreCase(expUnitsR3) && actQtyR3.equalsIgnoreCase(expQtyR3) && actLinksR3.equalsIgnoreCase(expLinksR3) && 
				actRateR3.equalsIgnoreCase(expRateR3) && actGrossR3.equalsIgnoreCase(expGrossR3) && actRMAR3.equalsIgnoreCase(expRMAR3) &&
				
				actWarehouseR4.equalsIgnoreCase(expWarehouseR4) && actItemR4.equalsIgnoreCase(expItemR4) && 
				actUnitsR4.equalsIgnoreCase(expUnitsR4) && actQtyR4.equalsIgnoreCase(expQtyR4) && actLinksR4.equalsIgnoreCase(expLinksR4) && 
				actRateR4.equalsIgnoreCase(expRateR4) && actGrossR4.equalsIgnoreCase(expGrossR4))
		{
			System.out.println(" Values Are Expected in Entry Page ");
			excelReader.setCellData(xlfile, "SmokeShortageInStocks", 60, 9, resPass);
			return true;
		} 
		else
		{
			System.out.println(" Values ARe Not Expected in Entry Page  ");
			excelReader.setCellData(xlfile, "SmokeShortageInStocks", 60, 9, resFail);
			return false;
		}
	}
	
	

	public boolean checkCopyDocumentOptionInShortagesInStocks() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nextBtn));
		
		nextBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
		toggleBtn.click();
		

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(copyDocumentOption));
		copyDocumentOption.click();
		
		Thread.sleep(2000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cd_FirstChkBox));
		cd_FirstChkBox.click();
		
		Thread.sleep(3000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cd_OkBtn));
		cd_OkBtn.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actWarehouseR1   =select1stRow_1stColumn.getText();
		String actItemR1        =select1stRow_2ndColumn.getText();
		String actUnitsR1       =select1stRow_3rdColumn.getText();
		String actQtyR1         =select1stRow_5thColumn.getText();
		String actLinksR1       =select1stRow_6thColumn.getText();
		String actRateR1        =select1stRow_7thColumn.getText();
		String actGrossR1       =select1stRow_8thColumn.getText();
		
		
		String expWarehouseR1   =excelReader.getCellData("SmokeShortageInStocks", 93, 7);
		String expItemR1        =excelReader.getCellData("SmokeShortageInStocks", 94, 7);
		String expUnitsR1       =excelReader.getCellData("SmokeShortageInStocks", 95, 7);
		String expQtyR1         =excelReader.getCellData("SmokeShortageInStocks", 96, 7);
		String expLinksR1       =excelReader.getCellData("SmokeShortageInStocks", 97, 7);
		String expRateR1        =excelReader.getCellData("SmokeShortageInStocks", 98, 7);
		String expGrossR1       =excelReader.getCellData("SmokeShortageInStocks", 99, 7);
		
		
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 93, 8, actWarehouseR1);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 94, 8, actItemR1);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 95, 8, actUnitsR1);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 96, 8, actQtyR1);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 97, 8, actLinksR1);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 98, 8, actRateR1);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 99, 8, actGrossR1);
		
		String actWarehouseR2   =select2ndRow_1stColumn.getText();
		String actItemR2        =select2ndRow_2ndColumn.getText();
		String actUnitsR2       =select2ndRow_3rdColumn.getText();
		String actQtyR2         =select2ndRow_5thColumn.getText();
		String actLinksR2       =select2ndRow_6thColumn.getText();
		String actRateR2        =select2ndRow_7thColumn.getText();
		String actGrossR2       =select2ndRow_8thColumn.getText();
		
		String expWarehouseR2   =excelReader.getCellData("SmokeShortageInStocks", 100, 7);
		String expItemR2        =excelReader.getCellData("SmokeShortageInStocks", 101, 7);
		String expUnitsR2       =excelReader.getCellData("SmokeShortageInStocks", 102, 7);
		String expQtyR2         =excelReader.getCellData("SmokeShortageInStocks", 103, 7);
		String expLinksR2       =excelReader.getCellData("SmokeShortageInStocks", 104, 7);
		String expRateR2        =excelReader.getCellData("SmokeShortageInStocks", 105, 7);
		String expGrossR2       =excelReader.getCellData("SmokeShortageInStocks", 106, 7);
		
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 100, 8, actWarehouseR2);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 101, 8, actItemR2);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 102, 8, actUnitsR2);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 103, 8, actQtyR2);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 104, 8, actLinksR2);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 105, 8, actRateR2);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 106, 8, actGrossR2);
		
		String actWarehouseR3   =select3rdRow_1stColumn.getText();
		String actItemR3        =select3rdRow_2ndColumn.getText();
		String actUnitsR3       =select3rdRow_3rdColumn.getText();
		String actQtyR3         =select3rdRow_5thColumn.getText();
		String actLinksR3       =select3rdRow_6thColumn.getText();
		String actRateR3        =select3rdRow_7thColumn.getText();
		String actGrossR3       =select3rdRow_8thColumn.getText();
		
		String expWarehouseR3   =excelReader.getCellData("SmokeShortageInStocks", 107, 7);
		String expItemR3        =excelReader.getCellData("SmokeShortageInStocks", 108, 7);
		String expUnitsR3       =excelReader.getCellData("SmokeShortageInStocks", 109, 7);
		String expQtyR3         =excelReader.getCellData("SmokeShortageInStocks", 110, 7);
		String expLinksR3       =excelReader.getCellData("SmokeShortageInStocks", 111, 7);
		String expRateR3        =excelReader.getCellData("SmokeShortageInStocks", 112, 7);
		String expGrossR3       =excelReader.getCellData("SmokeShortageInStocks", 113, 7);
		
		
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 107, 8, actWarehouseR3);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 108, 8, actItemR3);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 109, 8, actUnitsR3);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 110, 8, actQtyR3);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 111, 8, actLinksR3);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 112, 8, actRateR3);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 113, 8, actGrossR3);
		
		
		String actWarehouseR4   =select4thRow_1stColumn.getText();
		String actItemR4        =select4thRow_2ndColumn.getText();
		String actUnitsR4       =select4thRow_3rdColumn.getText();
		String actQtyR4         =select4thRow_5thColumn.getText();
		String actLinksR4       =select4thRow_6thColumn.getText();
		String actRateR4        =select4thRow_7thColumn.getText();
		String actGrossR4       =select4thRow_8thColumn.getText();
		
		String expWarehouseR4   =excelReader.getCellData("SmokeShortageInStocks", 114, 7);
		String expItemR4        =excelReader.getCellData("SmokeShortageInStocks", 115, 7);
		String expUnitsR4       =excelReader.getCellData("SmokeShortageInStocks", 116, 7);
		String expQtyR4         =excelReader.getCellData("SmokeShortageInStocks", 117, 7);
		String expLinksR4       =excelReader.getCellData("SmokeShortageInStocks", 118, 7);
		String expRateR4        =excelReader.getCellData("SmokeShortageInStocks", 119, 7);
		String expGrossR4       =excelReader.getCellData("SmokeShortageInStocks", 120, 7);
		
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 114, 8, actWarehouseR3);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 115, 8, actItemR3);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 116, 8, actUnitsR3);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 117, 8, actQtyR3);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 118, 8, actLinksR3);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 119, 8, actRateR3);
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 120, 8, actGrossR3);

		System.out.println("**************************checkCopyDocumentOptionInShortagesInStocks****************");
		
		System.out.println("WarehouseR1    : "+actWarehouseR1  +" Value Expected  : "+expWarehouseR1);
		System.out.println("ItemR1         : "+actItemR1       +" Value Expected  : "+expItemR1);
		System.out.println("UnitsR1        : "+actUnitsR1      +" Value Expected  : "+expUnitsR1);
		System.out.println("QtyR1          : "+actQtyR1        +" Value Expected  : "+expQtyR1);
		System.out.println("LinksR1        : "+actLinksR1      +" Value Expected  : "+expLinksR1);
		System.out.println("RateR1         : "+actRateR1       +" Value Expected  : "+expRateR1);
		System.out.println("GrossR1        : "+actGrossR1      +" Value Expected  : "+expGrossR1);
		
		System.out.println("WarehouseR2    : "+actWarehouseR2  +" Value Expected  : "+expWarehouseR2);
		System.out.println("ItemR2         : "+actItemR2       +" Value Expected  : "+expItemR2);
		System.out.println("UnitsR2        : "+actUnitsR2      +" Value Expected  : "+expUnitsR2);
		System.out.println("QtyR2          : "+actQtyR2        +" Value Expected  : "+expQtyR2);
		System.out.println("LinksR2        : "+actLinksR2      +" Value Expected  : "+expLinksR2);
		System.out.println("RateR2         : "+actRateR2       +" Value Expected  : "+expRateR2);
		System.out.println("GrossR2        : "+actGrossR2      +" Value Expected  : "+expGrossR2);
		
		System.out.println("WarehouseR3    : "+actWarehouseR3  +" Value Expected  : "+expWarehouseR3);
		System.out.println("ItemR3         : "+actItemR3       +" Value Expected  : "+expItemR3);
		System.out.println("UnitsR3        : "+actUnitsR3      +" Value Expected  : "+expUnitsR3);
		System.out.println("QtyR3          : "+actQtyR3        +" Value Expected  : "+expQtyR3);
		System.out.println("LinksR3        : "+actLinksR3      +" Value Expected  : "+expLinksR3);
		System.out.println("RateR3         : "+actRateR3       +" Value Expected  : "+expRateR3);
		System.out.println("GrossR3        : "+actGrossR3      +" Value Expected  : "+expGrossR3);
		
		System.out.println("WarehouseR4    : "+actWarehouseR4  +" Value Expected  : "+expWarehouseR4);
		System.out.println("ItemR4         : "+actItemR4       +" Value Expected  : "+expItemR4);
		System.out.println("UnitsR4        : "+actUnitsR4      +" Value Expected  : "+expUnitsR4);
		System.out.println("QtyR4          : "+actQtyR4        +" Value Expected  : "+expQtyR4);
		System.out.println("LinksR4        : "+actLinksR4      +" Value Expected  : "+expLinksR4);
		System.out.println("RateR4         : "+actRateR4       +" Value Expected  : "+expRateR4);
		System.out.println("GrossR4        : "+actGrossR4      +" Value Expected  : "+expGrossR4);
		
		
		if (actWarehouseR1.equalsIgnoreCase(expWarehouseR1) && actItemR1.equalsIgnoreCase(expItemR1) && 
				actUnitsR1.equalsIgnoreCase(expUnitsR1) && actQtyR1.equalsIgnoreCase(expQtyR1) && actLinksR1.equalsIgnoreCase(expLinksR1) && 
				actRateR1.equalsIgnoreCase(expRateR1) && actGrossR1.equalsIgnoreCase(expGrossR1)&& 
				
				actWarehouseR2.equalsIgnoreCase(expWarehouseR2) && actItemR2.equalsIgnoreCase(expItemR2) && 
				actUnitsR2.equalsIgnoreCase(expUnitsR2) && actQtyR2.equalsIgnoreCase(expQtyR2) && actLinksR2.equalsIgnoreCase(expLinksR2) && 
				actRateR2.equalsIgnoreCase(expRateR2) && actGrossR2.equalsIgnoreCase(expGrossR2) &&
				
				actWarehouseR3.equalsIgnoreCase(expWarehouseR3) && actItemR3.equalsIgnoreCase(expItemR3) && 
				actUnitsR3.equalsIgnoreCase(expUnitsR3) && actQtyR3.equalsIgnoreCase(expQtyR3) && actLinksR3.equalsIgnoreCase(expLinksR3) && 
				actRateR3.equalsIgnoreCase(expRateR3) && actGrossR3.equalsIgnoreCase(expGrossR3)  &&
				
				actWarehouseR4.equalsIgnoreCase(expWarehouseR4) && actItemR4.equalsIgnoreCase(expItemR4) && 
				actUnitsR4.equalsIgnoreCase(expUnitsR4) && actQtyR4.equalsIgnoreCase(expQtyR4) && actLinksR4.equalsIgnoreCase(expLinksR4) && 
				actRateR4.equalsIgnoreCase(expRateR4) && actGrossR4.equalsIgnoreCase(expGrossR4))
		{
			System.out.println(" Values Are Expected in Entry Page ");
			excelReader.setCellData(xlfile, "SmokeShortageInStocks", 92, 9, resPass);
			return true;
		} 
		else
		{
			System.out.println(" Values ARe Not Expected in Entry Page  ");
			excelReader.setCellData(xlfile, "SmokeShortageInStocks", 92, 9, resFail);
			return false;
		}
	}
	
	
	public boolean checkPendingLinksInShortageInStocks() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		
        Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_newBtn));
		new_newBtn.click();
		
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		workFlowExpandBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowSearchTxtCL));
		workFlowSearchTxtCL.click();
		workFlowSearchTxtCL.sendKeys(excelReader.getCellData("SmokeShortageInStocks", 122, 6));
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBoxCL));
		workFlowHeaderChkBoxCL.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();
		
		
        Thread.sleep(2000);
		
        String docno=documentNumberTxt.getAttribute("value");
        
		Thread.sleep(3000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.END);
		pvWareHouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		pvWareHouseTxt.sendKeys(Keys.SPACE);
			
		int warehousecount=pvwareHouseListCount.size();
		
			
		
		System.err.println(warehousecount);
			
		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=pvwareHouseListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData("SmokeShortageInStocks", 41, 6)))
			{
				pvwareHouseListCount.get(i).click();
				break;
			}
		}
			
		pvWareHouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
		select1stRow_7thColumn.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		
		Thread.sleep(2000);
		
		List<WebElement> batchrowcount=batchPopUPRowCount;
		
		int batchrowcount1=batchrowcount.size();
	
		System.out.println(batchrowcount1);
		
		for (int i = 1; i <= batchrowcount1; i++) 
		{
			WebElement batchno=getDriver().findElement(By.xpath("//tbody[@id='Id_MRPBatch_Grid_body']/tr["+i+"]/td[2]"));
			
			
			String actbatchno=batchno.getText();
			
			
			System.out.println(actbatchno);
			
			
			if(actbatchno.equalsIgnoreCase(excelReader.getCellData("SmokeShortageInStocks", 46, 6)))
			{
				Thread.sleep(2000);
				WebElement index=getDriver().findElement(By.xpath("//tbody[@id='Id_MRPBatch_Grid_body']/tr["+i+"]/td[1]"));
				getAction().doubleClick(index).build().perform();
				
				break;
			}

		}
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		select2ndRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.END);
		pvWareHouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		pvWareHouseTxt.sendKeys(Keys.SPACE);
			
		System.err.println(warehousecount);
			
		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=pvwareHouseListCount.get(i).getText();
			
			if(data.equalsIgnoreCase(excelReader.getCellData("SmokeShortageInStocks", 41, 6)))
			{
				pvwareHouseListCount.get(i).click();
				break;
			}
		}
			
		pvWareHouseTxt.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_10thColumn));
		select2ndRow_10thColumn.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardExpandBtn));
		rmaoutwardExpandBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAHeaderChkBox));
		searchRMAHeaderChkBox.click();

		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAOkBtn));
		searchRMAOkBtn.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardOkBtn));
		rmaoutwardOkBtn.click();
        
		Thread.sleep(2000);
        
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
        boolean savingMessage=checkVoucherSavingMessage(docno);
		
		String validationMessage=Boolean.toString(savingMessage);
		String ExpMessage=excelReader.getCellData("SmokeShortageInStocks", 123, 7);
		
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 123, 8, validationMessage);
		
		
		if (validationMessage.equalsIgnoreCase(ExpMessage))
		{
		
			excelReader.setCellData(xlfile, "SmokeShortageInStocks", 121, 9, resPass);
			return true;
		}
		else 
		{

			excelReader.setCellData(xlfile, "SmokeShortageInStocks", 121, 9, resPass);
			return false;
		}
	}

	
	public boolean checkSuspendedOptionFromHomePageInExcessInStocks() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
		grid_ChkBox1.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(suspendBtn));
		suspendBtn.click();
		
		String expErrorMessage      =excelReader.getCellData("SmokeShortageInStocks", 125, 7);
			
		String validationMessage=checkValidationMessage(expErrorMessage);
			
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 125, 8, validationMessage);
		
		System.out.println("*****************checkSuspendedOptionFromHomePageInExcessInStocks***************");
		

		System.out.println(" Mesage Display : "+validationMessage +" Value Expected : "+expErrorMessage);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(suspendStatusRow1));
		
		String actsuspendStatusRow1HomePage	=suspendStatusRow1.getText();
		String expsuspendStatusRow1HomePage	=excelReader.getCellData("SmokeShortageInStocks", 126, 7);
		
		excelReader.setCellData(xlfile, "SmokeShortageInStocks", 126, 8, actsuspendStatusRow1HomePage);
		
		
		System.out.println(" Mesage Display : "+actsuspendStatusRow1HomePage +" Value Expected : "+expsuspendStatusRow1HomePage);
		
		
		
		if (actsuspendStatusRow1HomePage.equalsIgnoreCase(expsuspendStatusRow1HomePage)&& 
				validationMessage.equalsIgnoreCase(expErrorMessage))
		{
			System.out.println(" Test Pass: Suspended Option Home Page ");
			excelReader.setCellData(xlfile, "SmokeShortageInStocks", 124, 8, resPass);
			return true;
		}
		else
		{
			System.out.println(" Test Fail: Suspended Option Home Page ");
			excelReader.setCellData(xlfile, "SmokeShortageInStocks", 124, 8, resFail);
			return false;
		}
		
	}
	
	
	// Sales Return Starts From Here
	
	
	
	@FindBy(xpath="//span[contains(text(),'Sales Returns')]")
	private static WebElement  salesReturnsVoucher;
	
	public boolean checkSalesReturnsVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
		finacinalsMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialTransactionSalesMenu));
		financialTransactionSalesMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReturnsVoucher));
    	
    	boolean actsalesReturnsVoucher       =salesReturnsVoucher.isDisplayed();
    	boolean expsalesReturnsVoucher		 =true;
    	
    	System.out.println("****************************** checkSalesReturnsVoucher  ********************************************");
    	
		System.out.println("salesReturnsVoucher          :"+actsalesReturnsVoucher+         "     Value Expected : "+expsalesReturnsVoucher);
		
		if(actsalesReturnsVoucher==expsalesReturnsVoucher)
		{
			System.out.println("Test Pass : HomeScreen Options Are Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 270, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : HomeScreen Options Are NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 270, 9, resFail);
			return false;
		}
	}
	
	
	@FindBy(xpath="//ul[@id='id_transaction_viewcontainer']//li[2]")
	private static WebElement  pendingSalesInvoicesView;
	
	
	

	public boolean checkSalesReturnsHomePage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReturnsVoucher));
		salesReturnsVoucher.click();
    	
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
    	
		boolean actHomePageNewBtn         		=newBtn.isDisplayed();
		boolean actHomePageEditBtn        		=editBtn.isDisplayed();
		boolean actHomePagePrintBtn       		=printBtn.isDisplayed();
		boolean actHomePageDeleteBtn      		=deleteBtn.isDisplayed();
		boolean actHomePageSuspendBtn     		=suspendBtn.isDisplayed();
		boolean actHomePagePrintBarcodeBtn		=printBarCodeBtn.isDisplayed();
		boolean actHomePageExportXMLBtn   		=exportToXMLBtn.isDisplayed();
		boolean actHomePageSettingsBtn    		=settingsBtn.isDisplayed();
		boolean actHomePageCloseBtn       		=homeCloseBtn.isDisplayed();
		boolean actHomePageGridCheckBox   		=grid_HeaderChkBox.isDisplayed();
		boolean actHomePageSortingBtn     		=sortingBtn.isDisplayed();
		boolean actHomePageCreateViewBn   		=createViewBtn.isDisplayed();
		boolean actHomePageCustomizeBtn   		=customizeBtn.isDisplayed();
		boolean actHomePageFilterBtn      		=filterBtn.isDisplayed();
		boolean actHomePageRefreshBtn     		=refreshBtn.isDisplayed();
		boolean actHomePageOptionsBtn     		=optionsBtn.isDisplayed();
		boolean actHomePageExportBtn      		=exportBtn.isDisplayed();
		boolean actHomePageAllView        		=homePageAllVouchersView.isDisplayed();
		boolean actpendingSalesInvoicesView  	=pendingSalesInvoicesView.isDisplayed();
		

		boolean expHomePageNewBtn         		=true;
		boolean expHomePageEditBtn        		=true;
		boolean expHomePagePrintBtn       		=true;
		boolean expHomePageDeleteBtn      		=true;
		boolean expHomePageAuthorizeBtn   		=true;
		boolean expHomePageSuspendBtn     		=true;
		boolean expHomePageRejectBtn      		=true;
		boolean expHomePagePrintBarcodeBtn		=true;
		boolean expHomePageExportXMLBtn   		=true;
		boolean expHomePageSettingsBtn    		=true;
		boolean expHomePageCloseBtn       		=true;
		boolean expHomePageGridCheckBox   		=true;
		boolean expHomePageSortingBtn     		=true;
		boolean expHomePageCreateViewBn   		=true;
		boolean expHomePageCustomizeBtn   		=true;
		boolean expHomePageFilterBtn     		=true;
		boolean expHomePageRefreshBtn  		    =true;
		boolean expHomePageOptionsBtn  		    =true;
		boolean expHomePageExportBtn     		=true;
		boolean expHomePageAllView        		=true;
		boolean exppendingSalesInvoicesView  	=true;
		
		System.out.println("****************************** checkSalesReturnsHomePage  ********************************************");
		
		System.out.println("Home Page New Btn Value Actual           :"+actHomePageNewBtn			+"   Value Expected : "+expHomePageNewBtn);
		System.out.println("Home Page Edit Btn Value Actual          :"+actHomePageEditBtn			+"   Value Expected : "+expHomePageEditBtn);
		System.out.println("Home Page Print Btn Value Actual         :"+actHomePagePrintBtn			+"	 Value Expected : "+expHomePagePrintBtn);
		System.out.println("Home Page Delete Btn Value Actual        :"+actHomePageDeleteBtn		+"	 Value Expected : "+expHomePageDeleteBtn);
		System.out.println("Home Page Suspend Btn Value Actual       :"+actHomePageSuspendBtn		+"	 Value Expected : "+expHomePageSuspendBtn);
		System.out.println("Home Page Print Barcode Btn Value Actual :"+actHomePagePrintBarcodeBtn	+"	 Value Expected : "+expHomePagePrintBarcodeBtn);
		System.out.println("Home Page Export XML Btn Value Actual    :"+actHomePageExportXMLBtn		+"	 Value Expected : "+expHomePageExportXMLBtn);
		System.out.println("Home Page Settings Btn Value Actual      :"+actHomePageSettingsBtn		+"	 Value Expected : "+expHomePageSettingsBtn);
		System.out.println("Home Page Close Btn Value Actual         :"+actHomePageCloseBtn			+"	 Value Expected : "+expHomePageCloseBtn);
		System.out.println("Home Page Grid check Value Actual        :"+actHomePageGridCheckBox		+"	 Value Expected : "+expHomePageGridCheckBox);
		System.out.println("Home Page Sorting Btn Value Actual       :"+actHomePageSortingBtn		+"	 Value Expected : "+expHomePageSortingBtn);
		System.out.println("Home Page Create View Btn Value Actual   :"+actHomePageCreateViewBn		+"	 Value Expected : "+expHomePageCreateViewBn);
		System.out.println("Home Page Customize Btn Value Actual     :"+actHomePageCustomizeBtn		+"	 Value Expected : "+expHomePageCustomizeBtn);
		System.out.println("Home Page Filter check Value Actual      :"+actHomePageFilterBtn		+"	 Value Expected : "+expHomePageFilterBtn);
		System.out.println("Home Page Refesh Btn Value Actual        :"+actHomePageRefreshBtn		+"	 Value Expected : "+expHomePageRefreshBtn);
		System.out.println("Home Page Options Btn Value Actual       :"+actHomePageOptionsBtn		+"	 Value Expected : "+expHomePageOptionsBtn);
		System.out.println("Home Page Export Btn Value Actual        :"+actHomePageExportBtn		+"	 Value Expected : "+expHomePageExportBtn);
		System.out.println("Home Page All View Value Actual          :"+actHomePageExportBtn		+"	 Value Expected : "+expHomePageExportBtn);
		System.out.println("Home Page Pending SI View Value Actual   :"+actpendingSalesInvoicesView+"	 Value Expected : "+exppendingSalesInvoicesView);
		
		
    	if(actHomePageNewBtn==expHomePageNewBtn  && actHomePageEditBtn==expHomePageEditBtn && actHomePagePrintBtn==expHomePagePrintBtn
				&& actHomePageDeleteBtn==expHomePageDeleteBtn && actHomePageSuspendBtn==expHomePageSuspendBtn 
				&& actHomePagePrintBarcodeBtn==expHomePagePrintBarcodeBtn && actHomePageExportXMLBtn==expHomePageExportXMLBtn
				&& actHomePageSettingsBtn==expHomePageSettingsBtn && actHomePageCloseBtn==expHomePageCloseBtn && actHomePageGridCheckBox==expHomePageGridCheckBox
				&& actHomePageSortingBtn==expHomePageSortingBtn && actHomePageCreateViewBn==expHomePageCreateViewBn && actHomePageCustomizeBtn==expHomePageCustomizeBtn
				&& actHomePageFilterBtn==expHomePageFilterBtn && actHomePageRefreshBtn==expHomePageRefreshBtn && actHomePageOptionsBtn==expHomePageOptionsBtn
				&& actHomePageExportBtn==expHomePageExportBtn && actHomePageAllView==expHomePageAllView && actpendingSalesInvoicesView==exppendingSalesInvoicesView)
    	{
				System.out.println("Test Pass : HomeScreen Options Are Displayed");
				excelReader.setCellData(xlfile, xlSheetName, 270, 9, resPass);
				return true;
    	}
			else
		{
				System.out.println("Test Fail : HomeScreen Options Are NOT Displayed");
				excelReader.setCellData(xlfile, xlSheetName, 270, 9, resFail);
				return false;
		}
	 }
	
	
	
	public boolean checkSalesReturnsEntryPage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		checkUserFriendlyMessage();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jumpToHeaderSectionBtn));
		

		boolean actEntryPageJumpToHeaderSectionBtn=jumpToHeaderSectionBtn.isDisplayed();
		boolean actEntryPageJumpToBodySectionBtn  =jumpToBodySectionBtn.isDisplayed();
		boolean actEntryPageJumpToFooterBtn       =jumpToFooterBtn.isDisplayed();
		boolean actEntryPageNewBtn                =new_newBtn.isDisplayed();
		boolean actEntryPageSaveBtn               =saveBtn.isDisplayed();
		boolean actEntryPagePreviousBtn           =previousBtn.isDisplayed();
		boolean actEntryPageNextBtn               =nextBtn.isDisplayed();
		boolean actEntryPagePrintBtn              =new_PrintBtn.isDisplayed();
		boolean actEntryPageSuspendBtn            =new_SuspendBtn.isDisplayed();
		boolean actEntryPageCloseBtn              =new_CloseBtn.isDisplayed();
		boolean actEntryPageToggleBtn             =toggleBtn.isDisplayed();

		
		boolean expEntryPageJumpToHeaderSectionBtn=true;
		boolean expEntryPageJumpToBodySectionBtn  =true;
		boolean expEntryPageJumpToFooterBtn       =true;
		boolean expEntryPageNewBtn	              =true;
		boolean expEntryPageSaveBtn               =true;
		boolean expEntryPagePreviousBtn           =true;
		boolean expEntryPageNextBtn               =true;
		boolean expEntryPagePrintBtn              =true;
		boolean expEntryPageSuspendBtn            =true;
		boolean expEntryPageCloseBtn              =true;
		boolean expEntryPageToggleBtn             =true;

		
		
		System.out.println("************************************* checkSalesReturnsEntryPage  ********************************************");
		
		System.out.println("Entry Page RC Jump to Header Value Actual:"+actEntryPageJumpToHeaderSectionBtn+"  Value Expected : "+expEntryPageJumpToHeaderSectionBtn);
		System.out.println("Entry Page RC Jump To Body Value Actual  :"+actEntryPageJumpToBodySectionBtn+"    Value Expected : "+expEntryPageJumpToBodySectionBtn);
		System.out.println("Entry Page RC Jump To Footer Value Actual:"+actEntryPageJumpToFooterBtn+"         Value Expected : "+expEntryPageJumpToFooterBtn);
		System.out.println("Entry Page RC New Btn Value Actual       :"+actEntryPageNewBtn+"                  Value Expected : "+expEntryPageNewBtn);
		System.out.println("Entry Page RC Save Btn Value Actual      :"+actEntryPageSaveBtn+"                 Value Expected : "+expEntryPageSaveBtn);
		System.out.println("Entry Page RC Previous Btn Value Actual  :"+actEntryPagePreviousBtn+"             Value Expected : "+expEntryPagePreviousBtn);
		System.out.println("Entry Page RC Next Btn Value Actual      :"+actEntryPageNextBtn+"                 Value Expected : "+expEntryPageNextBtn);
		System.out.println("Entry Page RC Print Btn Value Actual     :"+actEntryPagePrintBtn+"                Value Expected : "+expEntryPagePrintBtn);
		System.out.println("Entry Page RC Suspend Btn Value Actual   :"+actEntryPageSuspendBtn+"              Value Expected : "+expEntryPageSuspendBtn);
		System.out.println("Entry Page RC Close Btn Value Actual     :"+actEntryPageCloseBtn+"                Value Expected : "+expEntryPageCloseBtn);
		System.out.println("Entry Page RC Toggle Btn Value Actual    :"+actEntryPageToggleBtn+"               Value Expected : "+expEntryPageToggleBtn);
		
		
		if(actEntryPageJumpToHeaderSectionBtn==expEntryPageJumpToHeaderSectionBtn && actEntryPageJumpToBodySectionBtn==expEntryPageJumpToBodySectionBtn 
				&& actEntryPageJumpToFooterBtn==expEntryPageJumpToFooterBtn && actEntryPageJumpToFooterBtn==expEntryPageJumpToFooterBtn
				&& actEntryPageNewBtn==expEntryPageNewBtn && actEntryPageSaveBtn==expEntryPageSaveBtn && actEntryPagePreviousBtn==expEntryPagePreviousBtn
				&& actEntryPageNextBtn==expEntryPageNextBtn && actEntryPagePrintBtn==expEntryPagePrintBtn &&actEntryPageSuspendBtn==expEntryPageSuspendBtn 
				&& actEntryPageCloseBtn==expEntryPageCloseBtn && actEntryPageToggleBtn==expEntryPageToggleBtn )
		{
			System.out.println("Test Pass : Entry Page Options Are Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 11, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Entry Page NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 11, 9, resFail);
			return false;
		}
	}
	
	
	@FindBy(xpath="//input[@id='id_header_21']")
	private static WebElement  voucherRaiseReceiptCheckBox;
	
	

	public boolean checkSalesReturnsEntryPageHeaderFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		
		// Actual
		boolean actDocumentNumberTxt         =documentNumberTxt.isDisplayed();
		boolean actDateTxt                   =dateTxt.isDisplayed();
		boolean actSalesAccount              =salesAccountTxt.isDisplayed();
		boolean actCustomerAccount           =customerAccountTxt.isDisplayed();
		boolean actRaiseReceipt              =voucherRaiseReceiptCheckBox.isDisplayed();
		boolean actDepartment                =departmentTxt.isDisplayed();
		boolean actsalesReturns_NarrationTxt =salesReturns_NarrationTxt.isDisplayed();
		
		// Expected
		boolean expDocumentNumberTxt         =true;
		boolean expDateTxt                   =true;
		boolean expSalesAccount              =true;
		boolean expCustomerAccount           =true;
		boolean expRaiseReceipt              =true;
		boolean expDepartment                =true;
		boolean expsalesReturns_NarrationTxt =true;
		
		
		System.out.println("************************************* checkSalesReturnsEntryPageHeaderFields  ********************************************");
		
		System.out.println("Entry Page Header Value Actual    :"+actDocumentNumberTxt+         " Value Expected : "+expDocumentNumberTxt);
		System.out.println("Entry Page Header Value Actual    :"+actDateTxt+                   " Value Expected : "+expDateTxt);
		System.out.println("Entry Page Header Value Actual    :"+actSalesAccount+              " Value Expected : "+expSalesAccount);
		System.out.println("Entry Page Header Value Actual    :"+actCustomerAccount+           " Value Expected : "+expCustomerAccount);
		System.out.println("Entry Page Header Value Actual    :"+actRaiseReceipt+              " Value Expected : "+expRaiseReceipt);
		System.out.println("Entry Page Header Value Actual    :"+actDepartment+                " Value Expected : "+expDepartment);
		System.out.println("Entry Page Header Value Actual    :"+actsalesReturns_NarrationTxt+ " Value Expected : "+expsalesReturns_NarrationTxt);
		
		
		if(actDocumentNumberTxt==expDocumentNumberTxt && actDateTxt==expDateTxt && actSalesAccount==expSalesAccount
				 && actCustomerAccount==expCustomerAccount  && actRaiseReceipt==expRaiseReceipt  
				 && actDepartment==expDepartment && actsalesReturns_NarrationTxt==expsalesReturns_NarrationTxt)			     
		
		{
			System.out.println("Test Pass : entry Page Header Options Are Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 272, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 272, 9, resFail);
			return false;
		}
	}

	
	@FindBy(xpath="//div[contains(text(),'L-Sales Invoices')]")
	private static WebElement voucherBodyLinkSalesinvoice;
	
		
	public boolean checkSalesReturnsEntryPageBodyFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
        // Actual
		boolean actBodyWareHouseName    =voucherBodyWareHouseName.isDisplayed();
		boolean actBodyItemName         =voucherBodyItemName.isDisplayed();
		boolean actBodyUnitName         =voucherBodyUnitsName.isDisplayed();
		boolean actBodyAVGRateO         =voucherBodyAvgRate_o_Name.isDisplayed();
		boolean actBodyQtyName          =voucherBodyQtyName.isDisplayed();
		boolean actBodyLinkSalesInvoice =voucherBodyLinkSalesinvoice.isDisplayed();
					
		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("arguments[0].scrollIntoView();", voucherBodyRMAName);
		
		boolean actBodyRate             =voucherBodyRateName.isDisplayed();
		boolean actBodyGross            =voucherBodyGrossName.isDisplayed();
		boolean actBodyBatch            =voucherBodyBatchName.isDisplayed();
		boolean actBodyBins             =voucherBodyBinsName.isDisplayed();
		boolean actBodyExpirydate       =voucherBodyExpirytDateName.isDisplayed();
		boolean actBodyRMA              =voucherBodyRMAName.isDisplayed();
		

		
		// Expected
		
		boolean expBodyWareHouseName=true; 
		boolean expBodyItemName=true; 
		boolean expBodyUnitName=true;
		boolean expBodyAvgRateOName=true;
		boolean expBodyQtyName=true;
		boolean expBodyLinkSalesInvoicee=true;
		boolean expBodyRateName=true;
		boolean expBodyGrossName=true;
		boolean expBodyBatchName=true;
		boolean expBodyBinsName=true;
		boolean expBodyExpirydate=true;
		boolean expBodyRMA=true;
		
		
		System.out.println("************************************* checkSalesReturnsEntryPageBodyFields  ********************************************");
		
		System.out.println("Entry Page Body Value Actual    :"+actBodyWareHouseName	+ " Value Expected : "+expBodyWareHouseName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyItemName		+ " Value Expected : "+expBodyItemName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyUnitName		+ " Value Expected : "+expBodyUnitName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyAVGRateO		+ " Value Expected : "+expBodyAvgRateOName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyQtyName		+ " Value Expected : "+expBodyQtyName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyRate			+ " Value Expected : "+expBodyRateName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyGross			+ " Value Expected : "+expBodyGrossName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyBatch			+ " Value Expected : "+expBodyBatchName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyBins			+ " Value Expected : "+expBodyBinsName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyExpirydate	+ " Value Expected : "+expBodyExpirydate);
		System.out.println("Entry Page Body Value Actual    :"+actBodyRMA			+ " Value Expected : "+expBodyRMA);
		
		if(actBodyWareHouseName==expBodyWareHouseName && actBodyItemName==expBodyItemName && actBodyUnitName==expBodyUnitName && actBodyAVGRateO==expBodyAvgRateOName 
				&& actBodyQtyName==expBodyQtyName && actBodyRate==expBodyQtyName && actBodyGross==expBodyGrossName
				&& actBodyBatch==expBodyBatchName && actBodyBins==expBodyBinsName && actBodyExpirydate==expBodyExpirydate && actBodyRMA==expBodyRMA )
		{
			
			System.out.println(" Test Pass: Displayed Entry page Body Fileds ");
			excelReader.setCellData(xlfile, xlSheetName, 273, 9, resPass);
			
			js.executeScript("arguments[0].scrollIntoView();", voucherBodyHeaderIndex);
			
			return true;
		}
		else 
		{
			System.out.println(" Test Fail:  Not Displayed Entry page Body Fileds ");
			excelReader.setCellData(xlfile, xlSheetName, 273, 9, resFail);
			
			js.executeScript("arguments[0].scrollIntoView();", voucherBodyHeaderIndex);
			
			return false;
		}
			
	}

		
		


	public boolean checkSalesReturnsEntryPageFooterFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jumpToFooterBtn));
		jumpToFooterBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(netLabel));
		
		boolean actEntryPageFooterFieldsNetLabel  =netLabel.isDisplayed();
		boolean actEntryPageFooterFieldsNetAmount =netAmount.isDisplayed();

		boolean expEntryPageFooterFieldsNetLabel  =true;
		boolean expEntryPageFooterFieldsNetAmount =true;

		System.out.println("****************************&&************* checkSalesReturnsEntryPageFooterFields  ***************************************************");
		
		System.out.println("Entry Page Footer Fields Net Label Value Actual  : "+actEntryPageFooterFieldsNetLabel+"   Value Expected : "+expEntryPageFooterFieldsNetLabel);
		System.out.println("Entry Page Footer Fields Net Amount Value Actual : "+actEntryPageFooterFieldsNetAmount+"  Value Expected : "+expEntryPageFooterFieldsNetAmount);

				
		if(actEntryPageFooterFieldsNetLabel==expEntryPageFooterFieldsNetLabel && actEntryPageFooterFieldsNetAmount==expEntryPageFooterFieldsNetAmount)
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 14, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 14, 9, resFail);
			return false;
		}

	}


	
	public boolean checkSalesReturnsVoucherEntryPageInfoSideBar() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoSideBarCustomizeBtn));
		
		// Actual
		boolean actInforSideBarCustomization            =infoSideBarCustomizeBtn.isDisplayed();
		boolean actInforSideBarCustomizationExpandButton=infoSideBarMinimizeExpandBtn.isDisplayed();
		
		
		// Expected
		boolean expInforSideBarCustomization            =true;
		boolean expInforSideBarCustomizationExpandButton=true;
		
		System.out.println("***************************************** checkSalesReturnsVoucherEntryPageInfoSideBar  ***************************************************");
		System.out.println("Entry Page Open Docuemnt Number Value Actual  : "+actInforSideBarCustomization               +" Value Expected : "+expInforSideBarCustomization);
		System.out.println("Entry Page Open Docuemnt Number Value Actual  : "+actInforSideBarCustomizationExpandButton   +" Value Expected : "+expInforSideBarCustomizationExpandButton);
		
		if(actInforSideBarCustomization==expInforSideBarCustomization && actInforSideBarCustomizationExpandButton==expInforSideBarCustomizationExpandButton)
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 276, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 276, 9, resFail);
			return false;
		}
	}


	
	public boolean checkSalesReturnsVoucherEntryPageInfoSideBarCustomizeBtn() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoSideBarCustomizeBtn));
		
		infoSideBarCustomizeBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeSearchTxt));

		boolean actInfoCustomizationSearchTxt        =customizeSearchTxt.isDisplayed();
		boolean actInfoCustomizationSearchBtn        =customizeSearchBtn.isDisplayed();
		boolean actInfoCustomizationCloseBtn         =customizeCloseBtn.isDisplayed();
		boolean actInfoCustomizationSaveBtn          =customizeSaveBtn.isDisplayed();
		boolean actInfoCustomizationCancelBtn        =customizeCancelBtn.isDisplayed();
		boolean actInfoCustomizationGraphBtn         =graphBtn.isDisplayed();
		boolean actInfoCustomizationReportBtn        =reportBtn.isDisplayed();
		boolean actInfoCustomizationInfopanelBtn     =infoPanelBtn.isDisplayed();
		boolean actInfoCustomizationWorkFlowBtn      =workFlowBtn.isDisplayed();
		boolean actInfoCustomizationOtherDashletsBtn =otherDashlets.isDisplayed();

		boolean expInfoCustomizationSearchTxt        =true;
		boolean expInfoCustomizationSearchBtn        =true;
		boolean expInfoCustomizationCloseBtn         =true;
		boolean expInfoCustomizationSaveBtn          =true;
		boolean expInfoCustomizationCancelBtn        =true;
		boolean expInfoCustomizationGraphBtn         =true;
		boolean expInfoCustomizationReportBtn        =true;
		boolean expInfoCustomizationInfopanelBtn     =true;
		boolean expInfoCustomizationWorkFlowBtn      =true;
		boolean expInfoCustomizationOtherDashletsBtn =true;

		
		System.out.println("***************************************** checkSalesReturnsVoucherEntryPageInfoSideBarCustomizeBtn  ***************************************************");
		
		System.out.println("Entry Page Info Panel Search Txt Value Actual : "+actInfoCustomizationSearchTxt        +" Value Expected : "+expInfoCustomizationSearchTxt);
		System.out.println("Entry Page Info Panel Search Btn Value Actual : "+actInfoCustomizationSearchBtn        +" Value Expected : "+expInfoCustomizationSearchBtn);
		System.out.println("Entry Page Info Panel Close Btn Value Actual  : "+actInfoCustomizationCloseBtn         +" Value Expected : "+expInfoCustomizationCloseBtn);
		System.out.println("Entry Page Info Panel Save Btn Value Actual   : "+actInfoCustomizationSaveBtn          +" Value Expected : "+expInfoCustomizationSaveBtn);
		System.out.println("Entry Page Info Panel Cancel Value Actual     : "+actInfoCustomizationCancelBtn        +" Value Expected : "+expInfoCustomizationCancelBtn);
		System.out.println("Entry Page Info Panel Graph Value Actual      : "+actInfoCustomizationGraphBtn         +" Value Expected : "+expInfoCustomizationGraphBtn);
		System.out.println("Entry Page Info Panel Report Value Actual     : "+actInfoCustomizationReportBtn        +" Value Expected : "+expInfoCustomizationReportBtn);
		System.out.println("Entry Page Info Panel Value Actual            : "+actInfoCustomizationInfopanelBtn     +" Value Expected : "+expInfoCustomizationInfopanelBtn);
		System.out.println("Entry Page Info Panel WorkFlow Btn Actual     : "+actInfoCustomizationWorkFlowBtn      +" Value Expected : "+expInfoCustomizationWorkFlowBtn);
		System.out.println("Entry Page Info Panel Dashlet Btn Actual      : "+actInfoCustomizationOtherDashletsBtn +" Value Expected : "+expInfoCustomizationOtherDashletsBtn);
		
		
		if(actInfoCustomizationSearchTxt==expInfoCustomizationSearchTxt && actInfoCustomizationSearchBtn==expInfoCustomizationSearchBtn && actInfoCustomizationCloseBtn==expInfoCustomizationCloseBtn 
				&& actInfoCustomizationSaveBtn==expInfoCustomizationSaveBtn && actInfoCustomizationGraphBtn==expInfoCustomizationGraphBtn
				&& actInfoCustomizationReportBtn==expInfoCustomizationReportBtn && actInfoCustomizationInfopanelBtn==expInfoCustomizationInfopanelBtn  
				&& actInfoCustomizationWorkFlowBtn==expInfoCustomizationWorkFlowBtn && actInfoCustomizationOtherDashletsBtn==expInfoCustomizationOtherDashletsBtn)
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 277, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 277, 9, resFail);
			return false;
		}
	}

	
	
	public boolean checkSalesReturnsVoucherEntryPageInfoSideBarGraphOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(graphBtn));
		
		graphBtn.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newGraphOption));
		
		boolean actNewGraphOption       =newGraphOption.isDisplayed();
		boolean expNewGraphOption       =true;
		
		System.out.println("***************************************** checkSalesReturnsVoucherEntryPageInfoSideBarGraphOption  *****************************************");
		System.out.println("Entry Page Open Info Side Graph Value Actual  : "+actNewGraphOption               +" Value Expected : "+expNewGraphOption);
		
		if(actNewGraphOption==expNewGraphOption)
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 278, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 278, 9, resFail);
			return false;
		}
	}
	
	
	public boolean checkSalesReturnsVoucherEntryPageInfoSideBarReportOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reportBtn));
		
		reportBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newReportOption));
		
		boolean actNewReportOption       =newReportOption.isDisplayed();
		boolean expNewReportOption       =true;
		
		System.out.println("***************************************** checkSalesReturnsVoucherEntryPageInfoSideBarReportOption  *****************************************");
		System.out.println("Entry Page Open Info Side Report Value Actual  : "+actNewReportOption               +" Value Expected : "+expNewReportOption);
		
		
		if(actNewReportOption==expNewReportOption)
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 279, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 279, 9, resFail);
			return false;
		}
	}


	
	public boolean checkSalesReturnsVoucherEntryPageInfoSideBarInfoPanelOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoPanelBtn));
		
		infoPanelBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newInfoPanelOption));
		
		boolean actNewInfoPanelOption       =newInfoPanelOption.isDisplayed();
		boolean expNewInfoPanelOption       =true;
		
	
		System.out.println("***************************************** checkSalesReturnsVoucherEntryPageInfoSideBarInfoPanelOption  *****************************************");
		System.out.println("Entry Page Open Info Side Info Panel Value Actual  : "+actNewInfoPanelOption               +" Value Expected : "+expNewInfoPanelOption);
		
		
		
		if(actNewInfoPanelOption==expNewInfoPanelOption)
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 280, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 280, 9, resFail);
			return false;
		}
	}

	
	
	public boolean checkSalesReturnsVoucherEntryPageInfoSideBarWorkFlowOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowBtn));
		
		workFlowBtn.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newWorkFlowOption));
		
		boolean actNewWorkFlowOption       =newWorkFlowOption.isDisplayed();
		boolean expNewWorkFlowOption       =true;
		
	
		System.out.println("***************************************** checkSalesReturnsVoucherEntryPageInfoSideBarWorkFlowOption  *****************************************");
		System.out.println("Entry Page Open Info Side Workflow Value Actual  : "+actNewWorkFlowOption               +" Value Expected : "+expNewWorkFlowOption);
		
		
		if(actNewWorkFlowOption==expNewWorkFlowOption)
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 281, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 281, 9, resFail);
			return false;
		}
	}
	
	
	@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//label[contains(@class,'theme_icon-color')][contains(text(),'Document Info')]")
	private static WebElement  salesReturnsSearchDocumentInfo;
	
	public boolean checkSalesReturnsVoucherEntryPageInfoSideBarOtherDashletsOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(otherDashlets));
		
		otherDashlets.click();
				
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReturnsSearchDocumentInfo));
		
		boolean actSearchDocumentInfo       =salesReturnsSearchDocumentInfo.isDisplayed();
		boolean expSearchDocumentInfo       =true;
		
	
		System.out.println("***************************************** checkSalesReturnsVoucherEntryPageInfoSideBarOtherDashletsOption  *****************************************");
		System.out.println("Entry Page Open Info Side Search Info Value Actual  : "+actSearchDocumentInfo               +" Value Expected : "+expSearchDocumentInfo);

		
		if(actSearchDocumentInfo==expSearchDocumentInfo)
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 282, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 282, 9, resFail);
			return false;
		}
	}

	
		
	public boolean checkSalesReturnsVoucherEntryPageInfoSideBarSearch() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeSearchTxt));
		
		customizeSearchTxt.click();
		
		
	    customizeSearchTxt.sendKeys("Document Info");
	 
	
	    customizeSearchTxt.sendKeys(Keys.TAB);
	 
	   
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchDocumentInfo));
		
		boolean actSearchDocumentInfo       =searchDocumentInfo.isDisplayed();
		boolean expSearchDocumentInfo       =true;
		
	
		System.out.println("***************************************** checkSalesReturnsVoucherEntryPageInfoSideBarSearch  *****************************************");
		System.out.println("Entry Page Open Info Side Search Info Value Actual  : "+actSearchDocumentInfo               +" Value Expected : "+expSearchDocumentInfo);

		
		if(actSearchDocumentInfo==expSearchDocumentInfo)
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 283, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 283, 9, resFail);
			return false;
		}
	}
	





	
	public boolean checkSalesReturnsVoucherInfoPanelDashlet() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\infoPanels.exe");
		
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addCreateDashlet));
		
		boolean actAddCreateDashlet       =addCreateDashlet.isDisplayed();
		boolean expAddCreateDashlet       =true;
		
	
		System.out.println("***************************************** checkSalesReturnsVoucherInfoPanelDashlet  *****************************************");
		System.out.println("Entry Page Open Info Side Add Create Dashlet Value Actual  : "+actAddCreateDashlet               +" Value Expected : "+expAddCreateDashlet);

		
		
		if(actAddCreateDashlet==expAddCreateDashlet)
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 284, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 284, 9, resFail);
			return false;
		}
	}




	
	public boolean checkSalesReturnsVoucherSaveInfoPanelDashlet() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeSaveBtn));
		
		customizeSaveBtn.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(errorMessage));
		
		String actSaveInfoPanelMessage       =errorMessage.getText();
		String expSaveInfoPanelMessage       ="Dashboard Layout Saved Successfully.";
		
		System.out.println("***************************************** checkSalesReturnsVoucherSaveInfoPanelDashlet  *****************************************");
		
		System.out.println("Entry Page Open Info Side New Save Value Actual  : "+actSaveInfoPanelMessage               +" Value Expected : "+expSaveInfoPanelMessage);	
		
		if(actSaveInfoPanelMessage.equalsIgnoreCase(expSaveInfoPanelMessage) && dashletI.isDisplayed())
		{
			System.out.println("Test Pass : Error Message Is As Expected");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			
			excelReader.setCellData(xlfile, xlSheetName, 285, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Error Message Is NOT As Expected");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 285, 9, resFail);
			return false;
		}	
	}

	
	
	

	public boolean checkSalesReturnsSaveWithoutMandatoryFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessage));
		
		String actSaveMandatoryWithNoInputValidationMessage        =errorMessage.getText();
		String expSaveMandatoryWithNoInputValidationMessageOne     ="Controls marked with arrow mark, require Values";
		String expSaveMandatoryWithNoInputValidationMessageTwo     ="Main -> SalesAC";
		String expSaveMandatoryWithNoInputValidationMessageThree   ="Main -> CustomerAC";
		String expSaveMandatoryWithNoInputValidationMessageFour    ="Main -> Department";
	
		
		System.out.println("*********************************************** checkSalesReturnsSaveWithoutMandatoryFields  ********************************************");
		System.out.println("Entry Page Save with No Mandatory Input Value Actual  : "+actSaveMandatoryWithNoInputValidationMessage  +" Value Expected : "+expSaveMandatoryWithNoInputValidationMessageOne+expSaveMandatoryWithNoInputValidationMessageTwo+expSaveMandatoryWithNoInputValidationMessageThree+expSaveMandatoryWithNoInputValidationMessageFour);	
		
		if(actSaveMandatoryWithNoInputValidationMessage.startsWith(expSaveMandatoryWithNoInputValidationMessageOne) 
				&& actSaveMandatoryWithNoInputValidationMessage.contains(expSaveMandatoryWithNoInputValidationMessageTwo) 
				&& actSaveMandatoryWithNoInputValidationMessage.contains(expSaveMandatoryWithNoInputValidationMessageThree) 
				&& actSaveMandatoryWithNoInputValidationMessage.endsWith(expSaveMandatoryWithNoInputValidationMessageFour))
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			
			excelReader.setCellData(xlfile, xlSheetName, 19, 9, resPass);
			return true;
		}
		else
		{
			
			excelReader.setCellData(xlfile, xlSheetName, 19, 9, resFail);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			
			return false;
		}
	}
	
	
	
	

	public boolean checkSalesReturnsSalesOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAccountTxt));
		salesAccountTxt.click();
		
		salesAccountTxt.sendKeys(Keys.SPACE);
		
		Thread.sleep(2000);
		
		salesAccountTxt.sendKeys(Keys.TAB);
	    
		salesAccountTxt.sendKeys(Keys.SHIFT,Keys.TAB);
		
		WebElement options=salesAccountTxt;
		
		ArrayList<String>  actSalesAccount = new ArrayList<String>(); 
		
		actSalesAccount.add("Legal Fee");
		    
		actSalesAccount.add("Sales - Computers");
		    
		actSalesAccount.add("Sales - Electronics");
		    
		actSalesAccount.add("Sales - Home Appliances");
		   
		actSalesAccount.add("Uninvoiced DO");
		    
		actSalesAccount.add("Utility charges");
		    
		ArrayList<String> 
		
		expSalesAccount = new ArrayList<String>(); 
		
		
		int count=salesAccountListCount.size();
		
		System.err.println(count);
		
		for(int i=0 ; i < count ;i++)
		{
			String data=salesAccountListCount.get(i).getAttribute("data-name");
			System.err.println("IN FOR LOOP : "+data);
			expSalesAccount.add(data);
			
		}
		
		System.err.println(expSalesAccount);
		
		boolean actSalesAccountValue=actSalesAccount.equals(expSalesAccount);
	    boolean expSalesAccountValue=true;
		
	    System.out.println("********************************************* checkSalesReturnsSalesOptions  ********************************************************");
		System.out.println("Entry Page Warehouse Masters Value Actual  : "+actSalesAccount       +"  Value Expected : "+expSalesAccount);
		System.out.println("Entry Page Warehouse Masters Value Actual  : "+ actSalesAccountValue +"  Value Expected : "+expSalesAccountValue);
	    
	    	
	   if(actSalesAccountValue==expSalesAccountValue)
		{
			System.out.println("Test Pass : Error Message Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 20, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Pass : Date is 08/26/2019");
			excelReader.setCellData(xlfile, xlSheetName, 20, 9, resFail);
			return false;
		}
		
	}
		


   public boolean checkSalesReturnsSaveWithSalesInput() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
   {
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessage));
		String actSaveMandatoryWithNoInputValidationMessage       =errorMessage.getText();
		String expSaveMandatoryWithNoInputValidationMessageOne    ="Controls marked with arrow mark, require Values";
		String expSaveMandatoryWithNoInputValidationMessageTwo    ="Main -> CustomerAC";
		String expSaveMandatoryWithNoInputValidationMessageThree  ="Main -> Department";
	
		
		System.out.println("*********************************************** checkSalesReturnsSaveWithSalesInput  ********************************************");
		System.out.println("Entry Page Save with No Mandatory Input Value Actual  : "+actSaveMandatoryWithNoInputValidationMessage  +" Value Expected : "+expSaveMandatoryWithNoInputValidationMessageOne+expSaveMandatoryWithNoInputValidationMessageTwo+expSaveMandatoryWithNoInputValidationMessageThree);	
		
		if(actSaveMandatoryWithNoInputValidationMessage.startsWith(expSaveMandatoryWithNoInputValidationMessageOne) 
				&& actSaveMandatoryWithNoInputValidationMessage.contains(expSaveMandatoryWithNoInputValidationMessageTwo) 
				&& actSaveMandatoryWithNoInputValidationMessage.contains(expSaveMandatoryWithNoInputValidationMessageThree))
		{
			System.out.println("Test Pass : Error Message Displayed");
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 19, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Error Message Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 19, 9, resFail);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			return false;
		}
	}
	
		

   public boolean checkSalesReturnsCustomerOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
   {
		
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		
		customerAccountTxt.sendKeys(Keys.SPACE);
		
		WebElement options=customerAccountTxt;
		
		ArrayList<String>  actCustomerAccount= new ArrayList<String>(); 
	
		actCustomerAccount.add("Bank");
	    
		actCustomerAccount.add("Cash");
	    
		actCustomerAccount.add("Customer A");
	    
		actCustomerAccount.add("Customer B");
		   		   
		actCustomerAccount.add("Customer C");
	    
		actCustomerAccount.add("Customer Display CD For Each Account One");
	    
		actCustomerAccount.add("Customer Display CD For Each Account Three");
	    
		actCustomerAccount.add("Customer Display CD For Each Account Two");
	    
		actCustomerAccount.add("Customer Update");
	    
		ArrayList<String> 
		
		expCustomerAccount = new ArrayList<String>(); 
		
		int count=customerAccountListCount.size();

		System.err.println(count);
		
		for(int i=0 ; i < count ;i++)
		{
			String data=customerAccountListCount.get(i).getAttribute("data-name");
			System.err.println("IN FOR LOOP : "+data);
			expCustomerAccount.add(data);
			
		}
		
		
		System.out.println("actCustomerAccount"+actCustomerAccount);
		
		System.out.println("expCustomerAccount"+expCustomerAccount);
		
		boolean actCustomerAccountValue=actCustomerAccount.equals(expCustomerAccount);
		boolean expCustomerAcountValue=true;
	   
		System.out.println("********************************************* checkSalesReturnsCustomerOptions  ********************************************************");
	    System.out.println("Entry Page Warehouse Masters Value Actual  : "+actCustomerAccount       +"  Value Expected : "+expCustomerAccount);
	    System.out.println("Entry Page Warehouse Masters Value Actual  : "+ actCustomerAccountValue +"  Value Expected : "+expCustomerAcountValue);
		    
		
		
	   if(actCustomerAccountValue==expCustomerAcountValue)
		{
			System.out.println("Test Pass : All Customer Account Fileds are Displayed  ");
			excelReader.setCellData(xlfile, xlSheetName, 20, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : All Customer Account Fileds are Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 20, 9, resFail);
			return false;
		}
		
	}



   public boolean checkSalesReturnsSaveWithCustomerInput() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
   {
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessage));
		String actSaveMandatoryWithNoInputValidationMessage        =errorMessage.getText();
		String expSaveMandatoryWithNoInputValidationMessageOne     ="Controls marked with arrow mark, require Values";
		String expSaveMandatoryWithNoInputValidationMessageTwo     ="Main -> Department";
	
		
		System.out.println("*********************************************** checkSalesReturnsSaveWithCustomerInput  ********************************************");
		System.out.println("Entry Page Save with No Mandatory Input Value Actual  : "+actSaveMandatoryWithNoInputValidationMessage  +" Value Expected : "+expSaveMandatoryWithNoInputValidationMessageOne+expSaveMandatoryWithNoInputValidationMessageTwo);	
		
		if(actSaveMandatoryWithNoInputValidationMessage.startsWith(expSaveMandatoryWithNoInputValidationMessageOne) 
				&& actSaveMandatoryWithNoInputValidationMessage.contains(expSaveMandatoryWithNoInputValidationMessageTwo))
		{
		
		
			System.out.println("Test Pass : Error Message Displayed");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			
			excelReader.setCellData(xlfile, xlSheetName, 19, 9, resPass);
			
			
			return true;
		}
		else
		{
			System.out.println("Test Pass : Date is 08/26/2019");
			
			excelReader.setCellData(xlfile, xlSheetName, 19, 9, resFail);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			
			
			return false;
		}
	}
	

   
  	public boolean checkSalesReturnsDepartmentValues() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  	{
  		
  		
  		excelReader=new ExcelReader(POJOUtility.getExcelPath());
  		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
  		
  		Thread.sleep(2000);
  		
  		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.click();
		
		departmentTxt.sendKeys(Keys.SPACE);
		
		
		WebElement options=departmentTxt;
		
		ArrayList<String> actDepartmentList= new ArrayList<String>(); 
	
		actDepartmentList.add("AMERICA");
	    
		actDepartmentList.add("DUBAI");
	    
		actDepartmentList.add("INDIA");
	   
		actDepartmentList.add("WALES");   		    
	    
		ArrayList<String> 
		
		expDepartmentList = new ArrayList<String>(); 

		int count=departmentListCount.size();
		
		System.err.println(count);
		
		for(int i=0 ; i < count ;i++)
		{
			String data=departmentListCount.get(i).getAttribute("data-name");
			System.err.println("IN FOR LOOP : "+data);
			expDepartmentList.add(data);
			
		}
		
		System.err.println(expDepartmentList);
		
		
		System.out.println("actDepartmentList"+actDepartmentList);
		
		System.out.println("expDepartmentList"+expDepartmentList);
		
		boolean actDepartmentValue=actDepartmentList.equals(expDepartmentList);
		boolean expDepartmentValue=true;
          

  		System.out.println("*********************************************** checkSalesReturnsDepartmentValues  ********************************************");
  		
  		System.out.println("Entry Page Department Value Actual  : "+actDepartmentValue  +" Value Expected : "+expDepartmentValue);	
  		
  		
  	   if(actDepartmentValue==expDepartmentValue)
  	   {
  		   System.out.println("Test Pass : Error Message Displayed");
  		   excelReader.setCellData(xlfile, xlSheetName, 20, 9, resPass);
  		   return true;
  	   }
  	   else
  	   {
  		   System.out.println("Test Pass : Date is 08/26/2019");
  		   excelReader.setCellData(xlfile, xlSheetName, 20, 9, resFail);
  		   return false;
  	   }
  	}
  	 


	public boolean checkSalesReturnsSaveWithDepartmentInput() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
			
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
		
		String expSaveValidationMessageOnSaveWithoutBodyRows="There should be atleast one row entered.";
		
		String emptyRowsValidation=checkValidationMessage(expSaveValidationMessageOnSaveWithoutBodyRows);
		

		System.out.println("*********************************************** checkSalesReturnsSaveWithDepartmentInput  ********************************************");
		
		System.out.println("emptyRowsValidation  : "+emptyRowsValidation  +" Value Expected : "+expSaveValidationMessageOnSaveWithoutBodyRows);	
		
		
		if (emptyRowsValidation.equalsIgnoreCase(expSaveValidationMessageOnSaveWithoutBodyRows))
		{
			System.out.println("Test Pass : Error Message Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 19, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test FAil :Error Message  Not Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 19, 9, resFail);
			return false;
		}
	} 
	 
	 
	
	public boolean checkSalesReturnsBodyWarehouseOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    {
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.SPACE);
            
        ArrayList<String>  actWarehouseList= new ArrayList<String>(); 
            
        actWarehouseList.add("HYDERABAD");
                
        actWarehouseList.add("MUMBAI");
                
        actWarehouseList.add("SECUNDERABAD");
                
        actWarehouseList.add("WH1");
               
        ArrayList<String>
        
        expWarehouseList = new ArrayList<String>(); 

        int count=pvwareHouseListCount.size();
		
		System.err.println(count);
		
		for(int i=0 ; i < count ;i++)
		{
			String data=pvwareHouseListCount.get(i).getAttribute("data-name");
			System.err.println("IN FOR LOOP : "+data);
			expWarehouseList.add(data);
			
		}
		
		System.err.println(expWarehouseList);
		
		
		System.out.println("actWarehouseList"+actWarehouseList);
		
		System.out.println("expWarehouseList"+expWarehouseList);
		
		
		boolean actWarehouseValue=actWarehouseList.equals(expWarehouseList);
		boolean expWarehouseValue=true;
		
		
		System.out.println("************************************* checkSalesReturnsBodyWarehouseOptions  ********************************************");
		
		System.out.println("Entry Page Warehouse Masters Value Actual  : "+actWarehouseList	+"  Value Expected : "+expWarehouseList);
		System.out.println("Entry Page Warehouse Masters Value Actual  : "+actWarehouseValue	+"  Value Expected : "+expWarehouseValue);
		
	    if(actWarehouseValue==expWarehouseValue)
		{
			
			return true;
		}
		else
		{
			
			return false;
		}
    }
		
	
	

	
	public boolean checkSalesReturnsVoucherBodyItemOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_2ndColumn));
		select1stRow_2ndColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
			
		WebElement options=enter_ItemTxt;
		
		ArrayList<String>  actItemComboxValues= new ArrayList<String>(); 
		
		actItemComboxValues.add("BATCH BIN FINISHED GOODS ITEM");
		    
		actItemComboxValues.add("BATCH BIN WITH NO RESERVATION ITEM");
		    
		actItemComboxValues.add("BATCH BIN WITH NO STOCK UPDATE ITEM");
		    
		actItemComboxValues.add("BATCH BR ITEM");
		    
		actItemComboxValues.add("BATCH FIFO ITEM");
		    
		actItemComboxValues.add("BATCH IGNORE EXP LIFO ITEM");
		    
		actItemComboxValues.add("BATCH WA ITEM");
		   
		actItemComboxValues.add("BIN FINISHED GOODS ITEM");
		    
		actItemComboxValues.add("BIN RAW MATERIAL ITEM");
		    
		actItemComboxValues.add("RMA BATCH ITEM");
		    
		actItemComboxValues.add("RMA FITEM");
		    
		actItemComboxValues.add("RMA RITEM");
		    
		actItemComboxValues.add("STOCK ITEM");
		    
		    
		ArrayList<String> 
		
		expItemComboxValues = new ArrayList<String>(); 
		
		int count=itemListCount.size();
		
		System.err.println(count);
		
		for(int i=0 ; i < count ;i++)
		{
			String data=itemListCount.get(i).getText();
			System.err.println("IN FOR LOOP : "+data);
			expItemComboxValues.add(data);
			
		}
		
		System.err.println(expItemComboxValues);
		
		System.out.println("actItemComboxValues"+actItemComboxValues);
		
		System.out.println("expItemComboxValues"+expItemComboxValues);
		
		boolean actGetItemValue=actItemComboxValues.equals(expItemComboxValues);
		boolean expGetItemValue=true;
		
		
		Thread.sleep(2000);
		
		enter_ItemTxt.sendKeys(Keys.TAB);
		
		System.out.println("********************************************* checkSalesReturnsVoucherBodyItemOptions  *************************************************");
		
		System.out.println("Entry Page Item Masters Value Actual  : "+actItemComboxValues +"  Value Expected : "+expItemComboxValues);
		System.out.println("Entry Page Item Masters Value Actual  : "+actGetItemValue     +"  Value Expected : "+expGetItemValue);
		
		if(actGetItemValue==expGetItemValue)
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			excelReader.setCellData(xlfile, xlSheetName, 31, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			excelReader.setCellData(xlfile, xlSheetName, 31, 9, resFail);
			return false;
		}
	}
	
	
	
	

	
	public boolean checkSalesReturnsVouchersEntryPageNew() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
		Thread.sleep(2000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_newBtn));
		new_newBtn.click();
		
		Thread.sleep(2000);
		
		getWaitForAlert();
		
		String actAlertMessageBeforeNewClick   =getAlert().getText();
		String expAlertMessageBeforeNewClick0  ="The contents of the voucher are changed.";
		String expAlertMessageBeforeNewClick1  ="Are you sure that you want to ignore the changes?";
		

		getAlert().accept();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocNumberAfterNewClick  =documentNumberTxt.getAttribute("value");
		String expDocNumberAfterNewClick  ="1";
		
		System.out.println("************************************* checkSalesReturnsVouchersEntryPageNew  ***********************************************");
		
		System.out.println("Entry Page Save on Click New Value Actual  : "+actAlertMessageBeforeNewClick+"    Value Expected   : "+expAlertMessageBeforeNewClick0+expAlertMessageBeforeNewClick1);
	
		
		
		if(actAlertMessageBeforeNewClick.startsWith(expAlertMessageBeforeNewClick0) && actAlertMessageBeforeNewClick.endsWith(expAlertMessageBeforeNewClick1) 
				&& actDocNumberAfterNewClick.equalsIgnoreCase(expDocNumberAfterNewClick))
		{
			System.out.println("Test Pass : DOC NO is 1");
			excelReader.setCellData(xlfile, xlSheetName, 30, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Customize Pop Up NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 30, 9, resFail);
			return false;
		}
		
	}
	
	@FindBy(xpath="//tbody[@id='id_body_24_table_body']/tr")
    private static List<WebElement> unitsListCount;

	public boolean checkSalesReturnsEntryBatchItemInFirstRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
		Thread.sleep(2000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAccountTxt));
		salesAccountTxt.click();
		salesAccountTxt.sendKeys(Keys.SPACE);
		
		int count=salesAccountListCount.size();
		
		System.err.println(count);
		
		for(int i=0 ; i < count ;i++)
		{
			String data=salesAccountListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("Sales - Computers"))
			{
				salesAccountListCount.get(i).click();
				
				break;
			}
		}
		
		salesAccountTxt.sendKeys(Keys.TAB);
		
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		 customerAccountTxt.click();
		 customerAccountTxt.sendKeys(Keys.SPACE);
		 
		 int customercount=customerAccountListCount.size();
		 
		 System.err.println(customercount);
		 
		 for(int i=0 ; i < customercount ;i++)
		 {
			 String data=customerAccountListCount.get(i).getAttribute("data-name");
			 
			 if(data.equalsIgnoreCase("Customer A"))
			 {
				 customerAccountListCount.get(i).click();
				 
				 break;
			 }
		 }
			
		 customerAccountTxt.sendKeys(Keys.TAB);
		
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		 departmentTxt.click();
		 departmentTxt.sendKeys(Keys.SPACE);
		 
		 int departmentcount=departmentListCount.size();
		 
		 System.err.println(departmentcount);
		 
		 for(int i=0 ; i < departmentcount ;i++)
		 {
			 String data=departmentListCount.get(i).getAttribute("data-name");
			 
			 if(data.equalsIgnoreCase("INDIA"))
			 {
				 departmentListCount.get(i).click();
				 
				 break;
			 }
		 }
				
		 departmentTxt.sendKeys(Keys.TAB);	
		 
		 
		 Thread.sleep(2000);
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		 select1stRow_1stColumn.click();
		
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		 pvWareHouseTxt.click();
		 pvWareHouseTxt.sendKeys(Keys.SPACE);
		 
		 int warehousecount=pvwareHouseListCount.size();
		 
		 System.err.println(warehousecount);
		 
		 for(int i=0 ; i < warehousecount ;i++)
		 {
			 String data=pvwareHouseListCount.get(i).getAttribute("data-name");
			 
			 if(data.equalsIgnoreCase("SECUNDERABAD"))
			 {
				 pvwareHouseListCount.get(i).click();
				 
				 break;
			 }
		 }
				
		pvWareHouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("BATCH WA ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.END);
		enter_UnitTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_UnitTxt.sendKeys(Keys.BACK_SPACE);
		enter_UnitTxt.sendKeys(Keys.SPACE);
		
		int unitCount=unitsListCount.size();
		
		System.err.println(unitCount);
			
		for(int i=0 ; i < unitCount ;i++)
		{
			String data=unitsListCount.get(i).getAttribute("data-name");
			System.err.println(data);
			if(data.equalsIgnoreCase("Pcs"))
			{
				unitsListCount.get(i).click();
				
				break;
			}
		}
			
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		Thread.sleep(2000);
		enter_Quantity.sendKeys(Keys.TAB);
		
		Thread.sleep(3000);
		
		
		
		List<WebElement> rowCountInLinkScreen=LinkRowCount;
		
		int rowCount=rowCountInLinkScreen.size();
	
		System.out.println(rowCount);
		
		for (int i = 1; i <= rowCount; i++) 
		{
			WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
			String actvoucheno=voucherno.getText();
			System.out.println(actvoucheno);
			
			if(actvoucheno.equalsIgnoreCase("SalInv:6"))
			{
				Thread.sleep(2000);
				WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
				radioBtn.click();
				
				break;
			}

		}
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
		workFlowOkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
		select1stRow_7thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		Thread.sleep(2000);
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys("SR@SecWa1");
		Thread.sleep(2000);
		enter_Batch.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
   	 
		// Actual
		
   	 	String actWareHouseR1	=select1stRow_1stColumn.getText();
   	 	String actItemR1		=select1stRow_2ndColumn.getText();
   	 	String actUnitsR1		=select1stRow_3rdColumn.getText();
   	 	String actAvgRateOR1	=select1stRow_4thColumn.getText(); 
   	 	String actQtyR1		    =select1stRow_5thColumn.getText();
   	 	String actLsiR1	        =select1stRow_6thColumn.getText();
   	 	String actRateR1	    =select1stRow_7thColumn.getText();
   	 	String actGrossR1		=select1stRow_8thColumn.getText();
   	 	String actBatchR1		=select1stRow_9thColumn.getText();
   	 	boolean actBinR1	    =select1stRow_10thColumn.getText().isEmpty();
   	 	String actExpiryDateR1	=select1stRow_11thColumn.getText();
   	 	boolean actRmaR1	    =select1stRow_12thColumn.getText().isEmpty();
   	 	
   	 	
   	 	// Expected
   	 	DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
	    Date date=new Date();
	   
		
		
   		String expWareHouseR1	="SECUNDERABAD";
   	 	String expItemR1		="BATCH WA ITEM";
   	 	String expUnitsR1		="Pcs";
   	 	String expAvgRateOR1	="47"; 
   	 	String expQtyR1		    ="1.00";
   	 	String expLsiR1	        ="SalInv:6";
   	 	String expRateR1	    ="10.00";
   	 	String expGrossR1		="10.00";
   	 	String expBatchR1		="SR@SecWa1";
   	 	boolean expBinR1	    =true;
   	 	String expExpiryDateR1	=df.format(date);
   	 	boolean expRmaR1	    =true;
		
		
		 
		 
		 System.out.println("*********************************** checkSalesReturnsEntryBatchItemInFirstRow  *******************************");
		 
		 System.out.println("WareHouseR1      : "+actWareHouseR1      +" Value Expected : "+expWareHouseR1);
		 System.out.println("ItemR1           : "+actItemR1           +" Value Expected : "+expItemR1);
		 System.out.println("UnitsR1          : "+actUnitsR1          +" Value Expected : "+expUnitsR1);
		 System.out.println("AvgRateOR1       : "+actAvgRateOR1       +" Value Expected : "+expAvgRateOR1);
		 System.out.println("QtyR1            : "+actQtyR1            +" Value Expected : "+expQtyR1);
		 System.out.println("LsiR1            : "+actLsiR1            +" Value Expected : "+expLsiR1);
		 System.out.println("RateR1           : "+actRateR1           +" Value Expected : "+expRateR1);
		 System.out.println("GrossR1          : "+actGrossR1          +" Value Expected : "+expGrossR1);
		 System.out.println("BatchR1          : "+actBatchR1          +" Value Expected : "+expBatchR1);
		 System.out.println("BinR1            : "+actBinR1            +" Value Expected : "+expBinR1);
		 System.out.println("ExpiryDateR1     : "+actExpiryDateR1     +" Value Expected : "+expExpiryDateR1);
		 System.out.println("RmaR1            : "+actRmaR1            +" Value Expected : "+expRmaR1);
		 
		 if(actWareHouseR1.equalsIgnoreCase(expWareHouseR1) && actItemR1.equalsIgnoreCase(expItemR1) && actUnitsR1.equalsIgnoreCase(expUnitsR1)
				 && actAvgRateOR1.equalsIgnoreCase(expAvgRateOR1) && actQtyR1.equalsIgnoreCase(expQtyR1) && actLsiR1.equalsIgnoreCase(expLsiR1)
				 && actRateR1.equalsIgnoreCase(expRateR1) && actGrossR1.equalsIgnoreCase(expGrossR1) && actBatchR1.equalsIgnoreCase(expBatchR1)
				 && actBinR1==expBinR1 /*&& actExpiryDateR1.equalsIgnoreCase(expExpiryDateR1)*/ && actRmaR1==expRmaR1)
		{
			System.out.println("Test Pass : DOC NO is 1");
			excelReader.setCellData(xlfile, xlSheetName, 30, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Customize Pop Up NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 30, 9, resFail);
			return false;
		}
		
	}
	
	
	
	public boolean checkSalesReturnsEntryBinFinishedGoodsItemInSecondRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		Thread.sleep(2000);
		pvWareHouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("BIN FINISHED GOODS ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.END);
		enter_UnitTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_UnitTxt.sendKeys(Keys.BACK_SPACE);
		enter_UnitTxt.sendKeys(Keys.SPACE);
		
		int unitCount=unitsListCount.size();
		
		System.err.println(unitCount);
			
		for(int i=0 ; i < unitCount ;i++)
		{
			String data=unitsListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("Pcs"))
			{
				unitsListCount.get(i).click();
				
				break;
			}
		}
			
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_5thColumn));
		select2ndRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		Thread.sleep(2000);
		enter_Quantity.sendKeys(Keys.TAB);
		
		Thread.sleep(3000);
		
		
		List<WebElement> rowCountInLinkScreen=LinkRowCount;
		
		int rowCount=rowCountInLinkScreen.size();
	
		System.out.println(rowCount);
		
		for (int i = 1; i <= rowCount; i++) 
		{
			WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
			String actvoucheno=voucherno.getText();
			System.out.println(actvoucheno);
			
			if(actvoucheno.equalsIgnoreCase("SalInv:6"))
			{
				Thread.sleep(2000);
				WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
				radioBtn.click();
				
				break;
			}

		}
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
		workFlowOkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_7thColumn));
		select2ndRow_7thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		Thread.sleep(2000);
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchBtn));
		binSearchBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
		binAutoAllocateBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
		binOkBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
   	 
		// Actual
		
   	 	String actWareHouseR2	=select2ndRow_1stColumn.getText();
   	 	String actItemR2		=select2ndRow_2ndColumn.getText();
   	 	String actUnitsR2		=select2ndRow_3rdColumn.getText();
   	 	String actAvgRateOR2	=select2ndRow_4thColumn.getText(); 
   	 	String actQtyR2		    =select2ndRow_5thColumn.getText();
   	 	String actLsiR2	        =select2ndRow_6thColumn.getText();
   	 	String actRateR2	    =select2ndRow_7thColumn.getText();
   	 	String actGrossR2		=select2ndRow_8thColumn.getText();
   	 	boolean actBatchR2		=select2ndRow_9thColumn.getText().isEmpty();
   	 	String actBinR2	        =select2ndRow_10thColumn.getText();
   	 	boolean actExpiryDateR2	=select2ndRow_11thColumn.getText().isEmpty();
   	 	boolean actRmaR2	    =select2ndRow_12thColumn.getText().isEmpty();
   	 	
   	 	
   	 	// Expected
   	 	DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
	    Date date=new Date();
	   
		
		
   		String expWareHouseR2	="SECUNDERABAD";
   	 	String expItemR2		="BIN FINISHED GOODS ITEM";
   	 	String expUnitsR2		="Pcs";
   	 	String expAvgRateOR2	="2"; 
   	 	String expQtyR2		    ="1.00";
   	 	String expLsiR2	        ="SalInv:6";
   	 	String expRateR2	    ="10.00";
   	 	String expGrossR2		="10.00";
   	 	boolean expBatchR2		=true;
   	 	String expBinR2	   		="Bin Update";
   	 	boolean expExpiryDateR2	=true;
   	 	boolean expRmaR2	    =true;
		
		
		 
		 
		 System.out.println("*********************************** checkSalesReturnsEntryBinFinishedGoodsItemInSecondRow  *******************************");
		 
		 System.out.println("WareHouseR2      : "+actWareHouseR2      +" Value Expected : "+expWareHouseR2);
		 System.out.println("ItemR2           : "+actItemR2           +" Value Expected : "+expItemR2);
		 System.out.println("UnitsR2          : "+actUnitsR2          +" Value Expected : "+expUnitsR2);
		 System.out.println("AvgRateOR2       : "+actAvgRateOR2       +" Value Expected : "+expAvgRateOR2);
		 System.out.println("QtyR2            : "+actQtyR2            +" Value Expected : "+expQtyR2);
		 System.out.println("LsiR2            : "+actLsiR2            +" Value Expected : "+expLsiR2);
		 System.out.println("RateR2           : "+actRateR2           +" Value Expected : "+expRateR2);
		 System.out.println("GrossR2          : "+actGrossR2          +" Value Expected : "+expGrossR2);
		 System.out.println("BatchR2          : "+actBatchR2          +" Value Expected : "+expBatchR2);
		 System.out.println("BinR2            : "+actBinR2            +" Value Expected : "+expBinR2);
		 System.out.println("ExpiryDateR2     : "+actExpiryDateR2     +" Value Expected : "+expExpiryDateR2);
		 System.out.println("RmaR2            : "+actRmaR2            +" Value Expected : "+expRmaR2);
		 
		 if(actWareHouseR2.equalsIgnoreCase(expWareHouseR2) && actItemR2.equalsIgnoreCase(expItemR2) && actUnitsR2.equalsIgnoreCase(expUnitsR2)
				 && actAvgRateOR2.equalsIgnoreCase(expAvgRateOR2) && actQtyR2.equalsIgnoreCase(expQtyR2) && actLsiR2.equalsIgnoreCase(expLsiR2)
				 && actRateR2.equalsIgnoreCase(expRateR2) && actGrossR2.equalsIgnoreCase(expGrossR2) && actBatchR2==expBatchR2
				 && actBinR2.equalsIgnoreCase(expBinR2) && actExpiryDateR2==expExpiryDateR2 && actRmaR2==expRmaR2)
		{
			System.out.println("Test Pass : DOC NO is 1");
			excelReader.setCellData(xlfile, xlSheetName, 30, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Customize Pop Up NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 30, 9, resFail);
			return false;
		}
		
	}
	
	
	
	
	
	
	public boolean checkSalesReturnsEntryRmaRItemInThirdRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		Thread.sleep(2000);
		pvWareHouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("RMA RITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.END);
		enter_UnitTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_UnitTxt.sendKeys(Keys.BACK_SPACE);
		enter_UnitTxt.sendKeys(Keys.SPACE);
		
		int unitCount=unitsListCount.size();
		
		System.err.println(unitCount);
			
		for(int i=0 ; i < unitCount ;i++)
		{
			String data=unitsListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("Pcs"))
			{
				unitsListCount.get(i).click();
				
				break;
			}
		}
			
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_5thColumn));
		select3rdRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		Thread.sleep(2000);
		enter_Quantity.sendKeys(Keys.TAB);
		
		Thread.sleep(3000);
		
		
		List<WebElement> rowCountInLinkScreen=LinkRowCount;
		
		int rowCount=rowCountInLinkScreen.size();
	
		System.out.println(rowCount);
		
		for (int i = 1; i <= rowCount; i++) 
		{
			WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
			String actvoucheno=voucherno.getText();
			System.out.println(actvoucheno);
			
			if(actvoucheno.equalsIgnoreCase("SalInv:6"))
			{
				Thread.sleep(2000);
				WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
				radioBtn.click();
				
				break;
			}

		}
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
		workFlowOkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_7thColumn));
		select3rdRow_7thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		Thread.sleep(2000);
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaSerialNumberTxtField));
		rmaSerialNumberTxtField.click();
		rmaSerialNumberTxtField.sendKeys("Rma@Sec#Sr1");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaAddBtn));
		rmaAddBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaOkBtn));
		rmaOkBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
		enter_RMA.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
   	 
		// Actual
		
   	 	String actWareHouseR3	=select3rdRow_1stColumn.getText();
   	 	String actItemR3		=select3rdRow_2ndColumn.getText();
   	 	String actUnitsR3		=select3rdRow_3rdColumn.getText();
   	 	String actAvgRateOR3	=select3rdRow_4thColumn.getText(); 
   	 	String actQtyR3		    =select3rdRow_5thColumn.getText();
   	 	String actLsiR3	        =select3rdRow_6thColumn.getText();
   	 	String actRateR3	    =select3rdRow_7thColumn.getText();
   	 	String actGrossR3		=select3rdRow_8thColumn.getText();
   	 	boolean actBatchR3		=select3rdRow_9thColumn.getText().isEmpty();
   	 	boolean actBinR3	    =select3rdRow_10thColumn.getText().isEmpty();
   	 	boolean actExpiryDateR3	=select3rdRow_11thColumn.getText().isEmpty();
   	 	String actRmaR3	    	=select3rdRow_12thColumn.getText();
   	 	
   	 	
   	 	// Expected
   	 	DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
	    Date date=new Date();
	   
		
		
   		String expWareHouseR3	="SECUNDERABAD";
   	 	String expItemR3		="RMA RITEM";
   	 	String expUnitsR3		="Pcs";
   	 	String expAvgRateOR3	="17"; 
   	 	String expQtyR3		    ="1.00";
   	 	String expLsiR3	        ="SalInv:6";
   	 	String expRateR3	    ="10.00";
   	 	String expGrossR3		="10.00";
   	 	boolean expBatchR3		=true;
   	 	boolean expBinR3	   	=true;
   	 	boolean expExpiryDateR3	=true;
   	 	String expRmaR3	    	="Rma@Sec#Sr1";
		
		
		 
		 
		 System.out.println("*********************************** checkSalesReturnsEntryRmaRItemInThirdRow  *******************************");
		 
		 System.out.println("WareHouseR3      : "+actWareHouseR3      +" Value Expected : "+expWareHouseR3);
		 System.out.println("ItemR3           : "+actItemR3           +" Value Expected : "+expItemR3);
		 System.out.println("UnitsR3          : "+actUnitsR3          +" Value Expected : "+expUnitsR3);
		 System.out.println("AvgRateOR3       : "+actAvgRateOR3       +" Value Expected : "+expAvgRateOR3);
		 System.out.println("QtyR3            : "+actQtyR3            +" Value Expected : "+expQtyR3);
		 System.out.println("LsiR3            : "+actLsiR3            +" Value Expected : "+expLsiR3);
		 System.out.println("RateR3           : "+actRateR3           +" Value Expected : "+expRateR3);
		 System.out.println("GrossR3          : "+actGrossR3          +" Value Expected : "+expGrossR3);
		 System.out.println("BatchR3          : "+actBatchR3          +" Value Expected : "+expBatchR3);
		 System.out.println("BinR3            : "+actBinR3            +" Value Expected : "+expBinR3);
		 System.out.println("ExpiryDateR3     : "+actExpiryDateR3     +" Value Expected : "+expExpiryDateR3);
		 System.out.println("RmaR3            : "+actRmaR3            +" Value Expected : "+expRmaR3);
		 
		 if(actWareHouseR3.equalsIgnoreCase(expWareHouseR3) && actItemR3.equalsIgnoreCase(expItemR3) && actUnitsR3.equalsIgnoreCase(expUnitsR3)
				 && actAvgRateOR3.equalsIgnoreCase(expAvgRateOR3) && actQtyR3.equalsIgnoreCase(expQtyR3) && actLsiR3.equalsIgnoreCase(expLsiR3)
				 && actRateR3.equalsIgnoreCase(expRateR3) && actGrossR3.equalsIgnoreCase(expGrossR3) && actBatchR3==expBatchR3
				 && actBinR3==expBinR3 && actExpiryDateR3==expExpiryDateR3 && actRmaR3.equalsIgnoreCase(expRmaR3))
		{
			System.out.println("Test Pass : DOC NO is 1");
			excelReader.setCellData(xlfile, xlSheetName, 30, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Customize Pop Up NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 30, 9, resFail);
			return false;
		}
		
	}
	
	
	
	public boolean checkSalesReturnsEntryStockItemInFourthRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		Thread.sleep(2000);
		pvWareHouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("STOCK ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.END);
		enter_UnitTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_UnitTxt.sendKeys(Keys.BACK_SPACE);
		enter_UnitTxt.sendKeys(Keys.SPACE);
		
		int unitCount=unitsListCount.size();
		
		System.err.println(unitCount);
			
		for(int i=0 ; i < unitCount ;i++)
		{
			String data=unitsListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("Pcs"))
			{
				unitsListCount.get(i).click();
				
				break;
			}
		}
			
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_5thColumn));
		select4thRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		Thread.sleep(2000);
		enter_Quantity.sendKeys(Keys.TAB);
		
		Thread.sleep(3000);
		
		
		List<WebElement> rowCountInLinkScreen=LinkRowCount;
		
		int rowCount=rowCountInLinkScreen.size();
	
		System.out.println(rowCount);
		
		for (int i = 1; i <= rowCount; i++) 
		{
			WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
			String actvoucheno=voucherno.getText();
			System.out.println(actvoucheno);
			
			if(actvoucheno.equalsIgnoreCase("SalInv:6"))
			{
				Thread.sleep(2000);
				WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
				radioBtn.click();
				
				break;
			}

		}
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
		workFlowOkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_7thColumn));
		select4thRow_7thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		Thread.sleep(2000);
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_1stColumn));
   	 
		// Actual
		
   	 	String actWareHouseR4	=select4thRow_1stColumn.getText();
   	 	String actItemR4		=select4thRow_2ndColumn.getText();
   	 	String actUnitsR4		=select4thRow_3rdColumn.getText();
   	 	String actAvgRateOR4	=select4thRow_4thColumn.getText(); 
   	 	String actQtyR4		    =select4thRow_5thColumn.getText();
   	 	String actLsiR4	        =select4thRow_6thColumn.getText();
   	 	String actRateR4	    =select4thRow_7thColumn.getText();
   	 	String actGrossR4		=select4thRow_8thColumn.getText();
   	 	boolean actBatchR4		=select4thRow_9thColumn.getText().isEmpty();
   	 	boolean actBinR4	    =select4thRow_10thColumn.getText().isEmpty();
   	 	boolean actExpiryDateR4	=select4thRow_11thColumn.getText().isEmpty();
   	 	boolean actRmaR4	    =select4thRow_12thColumn.getText().isEmpty();
   	 	
   	 	
   	 	// Expected
   	 	DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
	    Date date=new Date();
	   
		
		
   		String expWareHouseR4	="SECUNDERABAD";
   	 	String expItemR4		="Stock ITEM";
   	 	String expUnitsR4		="Pcs";
   	 	String expAvgRateOR4	="2"; 
   	 	String expQtyR4		    ="1.00";
   	 	String expLsiR4	        ="SalInv:6";
   	 	String expRateR4	    ="10.00";
   	 	String expGrossR4		="10.00";
   	 	boolean expBatchR4		=true;
   	 	boolean expBinR4	   	=true;
   	 	boolean expExpiryDateR4	=true;
   	 	boolean expRmaR4	    =true;
		
		
		 
		 
		 System.out.println("*********************************** checkSalesReturnsEntryStockItemInFourthRow  *******************************");
		 
		 System.out.println("WareHouseR4      : "+actWareHouseR4      +" Value Expected : "+expWareHouseR4);
		 System.out.println("ItemR4           : "+actItemR4           +" Value Expected : "+expItemR4);
		 System.out.println("UnitsR4          : "+actUnitsR4          +" Value Expected : "+expUnitsR4);
		 System.out.println("AvgRateOR4       : "+actAvgRateOR4       +" Value Expected : "+expAvgRateOR4);
		 System.out.println("QtyR4            : "+actQtyR4            +" Value Expected : "+expQtyR4);
		 System.out.println("LsiR4            : "+actLsiR4            +" Value Expected : "+expLsiR4);
		 System.out.println("RateR4           : "+actRateR4           +" Value Expected : "+expRateR4);
		 System.out.println("GrossR4          : "+actGrossR4          +" Value Expected : "+expGrossR4);
		 System.out.println("BatchR4          : "+actBatchR4          +" Value Expected : "+expBatchR4);
		 System.out.println("BinR4            : "+actBinR4            +" Value Expected : "+expBinR4);
		 System.out.println("ExpiryDateR4     : "+actExpiryDateR4     +" Value Expected : "+expExpiryDateR4);
		 System.out.println("RmaR4            : "+actRmaR4            +" Value Expected : "+expRmaR4);
		 
		 if(actWareHouseR4.equalsIgnoreCase(expWareHouseR4) && actItemR4.equalsIgnoreCase(expItemR4) && actUnitsR4.equalsIgnoreCase(expUnitsR4)
				 && actAvgRateOR4.equalsIgnoreCase(expAvgRateOR4) && actQtyR4.equalsIgnoreCase(expQtyR4) && actLsiR4.equalsIgnoreCase(expLsiR4)
				 && actRateR4.equalsIgnoreCase(expRateR4) && actGrossR4.equalsIgnoreCase(expGrossR4) && actBatchR4==expBatchR4
				 && actBinR4==expBinR4 && actExpiryDateR4==expExpiryDateR4 && actRmaR4==expRmaR4)
		{
			System.out.println("Test Pass : DOC NO is 1");
			excelReader.setCellData(xlfile, xlSheetName, 30, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Customize Pop Up NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 30, 9, resFail);
			return false;
		}
		
	}
	

	
	@FindBy(xpath="//input[@id='id_body_37']")
	private static WebElement enter_Expirydate;


	public boolean checkSalesReturnsEntryBatchBRItemInFifthRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("BATCH BR ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.END);
		enter_UnitTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_UnitTxt.sendKeys(Keys.BACK_SPACE);
		enter_UnitTxt.sendKeys(Keys.SPACE);
		
		int unitCount=unitsListCount.size();
		
		System.err.println(unitCount);
			
		for(int i=0 ; i < unitCount ;i++)
		{
			String data=unitsListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("Pcs"))
			{
				unitsListCount.get(i).click();
				
				break;
			}
		}
			
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_5thColumn));
		select5thRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		Thread.sleep(2000);
		enter_Quantity.sendKeys(Keys.TAB);
		
		Thread.sleep(3000);
		
		
		
		List<WebElement> rowCountInLinkScreen=LinkRowCount;
		
		int rowCount=rowCountInLinkScreen.size();
	
		System.out.println(rowCount);
		
		for (int i = 1; i <= rowCount; i++) 
		{
			WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
			String actvoucheno=voucherno.getText();
			System.out.println(actvoucheno);
			
			if(actvoucheno.equalsIgnoreCase("SalInv:6"))
			{
				Thread.sleep(2000);
				WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
				radioBtn.click();
				
				break;
			}

		}
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
		workFlowOkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_7thColumn));
		select5thRow_7thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		Thread.sleep(2000);
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys("SR@SecBR1");
		Thread.sleep(2000);
		enter_Batch.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_1stColumn));
   	 
		// Actual
		
   	 	String actWareHouseR5	=select5thRow_1stColumn.getText();
   	 	String actItemR5		=select5thRow_2ndColumn.getText();
   	 	String actUnitsR5		=select5thRow_3rdColumn.getText();
   	 	String actAvgRateOR5	=select5thRow_4thColumn.getText(); 
   	 	String actQtyR5		    =select5thRow_5thColumn.getText();
   	 	String actLsiR5	        =select5thRow_6thColumn.getText();
   	 	String actRateR5	    =select5thRow_7thColumn.getText();
   	 	String actGrossR5		=select5thRow_8thColumn.getText();
   	 	String actBatchR5		=select5thRow_9thColumn.getText();
   	 	boolean actBinR5	    =select5thRow_10thColumn.getText().isEmpty();
   	 	String actExpiryDateR5	=select5thRow_11thColumn.getText();
   	 	boolean actRmaR5	    =select5thRow_12thColumn.getText().isEmpty();
   	 	
   	 	
   	 	// Expected
   	 	DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
	    Date date=new Date();
	   
		
		
   		String expWareHouseR5	="SECUNDERABAD";
   	 	String expItemR5		="BATCH BR ITEM";
   	 	String expUnitsR5		="Pcs";
   	 	String expAvgRateOR5	="0"; 
   	 	String expQtyR5		    ="1.00";
   	 	String expLsiR5	        ="SalInv:6";
   	 	String expRateR5	    ="10.00";
   	 	String expGrossR5		="10.00";
   	 	String expBatchR5		="SR@SecBR1";
   	 	boolean expBinR5	    =true;
   	 	String expExpiryDateR5	=df.format(date);
   	 	boolean expRmaR5	    =true;
		
		
		 
		 
		 System.out.println("*********************************** checkSalesReturnsEntryBatchBRItemInFifthRow  *******************************");
		 
		 System.out.println("WareHouseR5      : "+actWareHouseR5      +" Value Expected : "+expWareHouseR5);
		 System.out.println("ItemR5           : "+actItemR5           +" Value Expected : "+expItemR5);
		 System.out.println("UnitsR5          : "+actUnitsR5          +" Value Expected : "+expUnitsR5);
		 System.out.println("AvgRateOR5       : "+actAvgRateOR5       +" Value Expected : "+expAvgRateOR5);
		 System.out.println("QtyR5            : "+actQtyR5            +" Value Expected : "+expQtyR5);
		 System.out.println("LsiR5            : "+actLsiR5            +" Value Expected : "+expLsiR5);
		 System.out.println("RateR5           : "+actRateR5           +" Value Expected : "+expRateR5);
		 System.out.println("GrossR5          : "+actGrossR5          +" Value Expected : "+expGrossR5);
		 System.out.println("BatchR5          : "+actBatchR5          +" Value Expected : "+expBatchR5);
		 System.out.println("BinR5            : "+actBinR5            +" Value Expected : "+expBinR5);
		 System.out.println("ExpiryDateR5     : "+actExpiryDateR5     +" Value Expected : "+expExpiryDateR5);
		 System.out.println("RmaR5            : "+actRmaR5            +" Value Expected : "+expRmaR5);
		 
		 if(actWareHouseR5.equalsIgnoreCase(expWareHouseR5) && actItemR5.equalsIgnoreCase(expItemR5) && actUnitsR5.equalsIgnoreCase(expUnitsR5)
				 && actAvgRateOR5.equalsIgnoreCase(expAvgRateOR5) && actQtyR5.equalsIgnoreCase(expQtyR5) && actLsiR5.equalsIgnoreCase(expLsiR5)
				 && actRateR5.equalsIgnoreCase(expRateR5) && actGrossR5.equalsIgnoreCase(expGrossR5) && actBatchR5.equalsIgnoreCase(expBatchR5)
				 && actBinR5==expBinR5 /*&& actExpiryDateR5.equalsIgnoreCase(expExpiryDateR5)*/ && actRmaR5==expRmaR5)
		{
			System.out.println("Test Pass : DOC NO is 1");
			excelReader.setCellData(xlfile, xlSheetName, 30, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Customize Pop Up NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 30, 9, resFail);
			return false;
		}
		
	}
	
	
	
	
	
	
	
	
	
	
	
	public boolean checkSavingSalesReturnsWithAllItems() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
 		saveBtn.click();
 		
 		Thread.sleep(2000);
	
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(breakUpByTagTab));
 		breakUpByTagTab.click();
 		
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
 		billRefNewReferenceTxt.click();

 		
 		String actBillNewReference,actBillAmtAdjAgainstNewRefInOtherVouchers,actBillTransactionCurrency,actBillBaseCurrency,actBillLocalCurrency,actBillBalanceNewRefAmount,actBillBreakUpByTagDepartment,actBillBreakUpByTagBaseCurrency,actBillBreakUpByTagBillCurrency,actBillBreakUpByTagLocalCurrency,actBillAmtAdjustedInTransactionCurrency,actBillBalanceAmtToBeAdjustedInTransactionCurrency,act13;
 		String expBillNewReference,expBillAmtAdjAgainstNewRefInOtherVouchers,expBillTransactionCurrency,expBillBaseCurrency,expBillLocalCurrency,expBillBalanceNewRefAmount,expBillBreakUpByTagDepartment,expBillBreakUpByTagBaseCurrency,expBillBreakUpByTagBillCurrency,expBillBreakUpByTagLocalCurrency,expBillAmtAdjustedInTransactionCurrency,expBillBalanceAmtToBeAdjustedInTransactionCurrency;
 		
 		actBillNewReference									=billRefNewReferenceTxt.getAttribute("value");
 		actBillAmtAdjAgainstNewRefInOtherVouchers			=amtAdjustedAgainstNewREfinOtherVouchers.getText();
 		actBillTransactionCurrency							=transactionCurency.getText();
 		actBillBaseCurrency									=baseCurrency.getText();
 		actBillLocalCurrency								=localCurrencyDhs.getText();
 		
 		actBillBalanceNewRefAmount							=balanceNewReferenceAmt.getText();
 		
 		actBillBreakUpByTagDepartment						=breakUpByTagDepartment.getText();
 		actBillBreakUpByTagBaseCurrency						=breakUpByTagBaseCurrency.getText();
 		actBillBreakUpByTagBillCurrency						=breakUpByTagBillCurrency.getText();
 		
 		actBillBreakUpByTagLocalCurrency					=breakUpByTagBaseLocalCurrency.getText();
 		actBillAmtAdjustedInTransactionCurrency				=billRefAdjustAmountInTransCurency.getText();
 		actBillBalanceAmtToBeAdjustedInTransactionCurrency	=billRefBalanceAmountAdjustInTrnasCurrency.getText();
 		
 		
 		expBillNewReference									="0.00";
 		expBillAmtAdjAgainstNewRefInOtherVouchers			="0.00";
 		expBillTransactionCurrency							="50.00";
 		expBillBaseCurrency									="50.00";
 		expBillLocalCurrency								="3.50";
 		
 		expBillBalanceNewRefAmount							="0.00";
 		
 		expBillBreakUpByTagDepartment						="INDIA";
 		expBillBreakUpByTagBillCurrency						="50";
 		expBillBreakUpByTagBaseCurrency						="50.00.";
 		
 		
 		expBillBreakUpByTagLocalCurrency					="3.50";
 		expBillAmtAdjustedInTransactionCurrency				="0";
 		expBillBalanceAmtToBeAdjustedInTransactionCurrency	="50.00";
 	

 		System.out.println("*********************************** checkSavingSalesReturnsWithAllItems  ************************************");


 		System.out.println("actBillNewReference								   : "+ actBillNewReference									+" Value Expected : "+expBillNewReference);
 		System.out.println("actBillAmtAdjAgainstNewRefInOtherVouchers		   : "+actBillAmtAdjAgainstNewRefInOtherVouchers			+" Value Expected : "+expBillAmtAdjAgainstNewRefInOtherVouchers);
 		System.out.println("actBillTransactionCurrency						   : "+actBillTransactionCurrency							+" Value Expected : "+expBillTransactionCurrency);
 		System.out.println("actBillBaseCurrency								   : "+actBillBaseCurrency									+" Value Expected : "+ expBillBaseCurrency);
 		System.out.println("actBillLocalCurrency							   : "+actBillLocalCurrency									+" Value Expected : "+expBillLocalCurrency);
 		System.out.println("actBillBalanceNewRefAmount						   : "+ actBillBalanceNewRefAmount							+" Value Expected : "+expBillBalanceNewRefAmount);
        System.out.println("actBillBreakUpByTagDepartment					   : "+actBillBreakUpByTagDepartment						+" Value Expected : "+expBillBreakUpByTagDepartment);
 		System.out.println("actBillBreakUpByTagBaseCurrency				       : "+actBillBreakUpByTagBaseCurrency						+" Value Expected : "+expBillBreakUpByTagBaseCurrency);
 		System.out.println("actBillBreakUpByTagBillCurrency 				   : "+actBillBreakUpByTagBillCurrency						+" Value Expected : "+expBillBreakUpByTagBillCurrency);
 		System.out.println("actBillBreakUpByTagLocalCurrency				   : "+actBillBreakUpByTagLocalCurrency						+" Value Expected : "+expBillBreakUpByTagLocalCurrency);
 		System.out.println("actBillAmtAdjustedInTransactionCurrency			   : "+actBillAmtAdjustedInTransactionCurrency				+" Value Expected : "+expBillAmtAdjustedInTransactionCurrency);
 		System.out.println("actBillBalanceAmtToBeAdjustedInTransactionCurrency : "+actBillBalanceAmtToBeAdjustedInTransactionCurrency	+" Value Expected : "+expBillBalanceAmtToBeAdjustedInTransactionCurrency);
 		
 		   
 	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
	    billRefPickIcon.click();
	   
	    //pick button is click
	   
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(breakUpByTagTab));
 		breakUpByTagTab.click();
 		
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
 		billRefNewReferenceTxt.click();
 		
 		
 		String actBillNewReferencePick,actBillAmtAdjAgainstNewRefInOtherVouchersPick,actBillTransactionCurrencyPick,actBillBaseCurrencyPick,actBillLocalCurrencyPick,actBillBalanceNewRefAmountPick,actBillBreakUpByTagDepartmentPick,actBillBreakUpByTagBaseCurrencyPick,actBillBreakUpByTagBillCurrencyPick,actBillBreakUpByTagLocalCurrencyPick,actBillAmtAdjustedInTransactionCurrencyPick,actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick;
 		String expBillNewReferencePick,expBillAmtAdjAgainstNewRefInOtherVouchersPick,expBillTransactionCurrencyPick,expBillBaseCurrencyPick,expBillLocalCurrencyPick,expBillBalanceNewRefAmountPick,expBillBreakUpByTagDepartmentPick,expBillBreakUpByTagBaseCurrencyPick,expBillBreakUpByTagBillCurrencyPick,expBillBreakUpByTagLocalCurrencyPick,expBillAmtAdjustedInTransactionCurrencyPick,expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick;
 		
 		actBillNewReferencePick									=billRefNewReferenceTxt.getAttribute("value");
 		actBillAmtAdjAgainstNewRefInOtherVouchersPick			=amtAdjustedAgainstNewREfinOtherVouchers.getText();
 		actBillTransactionCurrencyPick							=transactionCurency.getText();
 		actBillBaseCurrencyPick									=baseCurrency.getText();
 		actBillLocalCurrencyPick								=localCurrencyDhs.getText();
 		
 		actBillBalanceNewRefAmountPick							=balanceNewReferenceAmt.getText();
 		
 		actBillBreakUpByTagDepartmentPick						=breakUpByTagDepartment.getText();
 		actBillBreakUpByTagBaseCurrencyPick						=breakUpByTagBaseCurrency.getText();
 		actBillBreakUpByTagBillCurrencyPick						=breakUpByTagBillCurrency.getText();
 		
 		actBillBreakUpByTagLocalCurrencyPick					=breakUpByTagBaseLocalCurrency.getText();
 		actBillAmtAdjustedInTransactionCurrencyPick				=billRefAdjustAmountInTransCurency.getText();
 		actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	=billRefBalanceAmountAdjustInTrnasCurrency.getText();
 		
 		
 		expBillNewReferencePick									="50.00";
 		expBillAmtAdjAgainstNewRefInOtherVouchersPick			="0.00";
 		expBillTransactionCurrencyPick							="50.00";
 		expBillBaseCurrencyPick									="50.0";
 		expBillLocalCurrencyPick								="3.50";
 		
 		expBillBalanceNewRefAmountPick							="50.00";
 		
 		expBillBreakUpByTagDepartmentPick						="INDIA";
 		expBillBreakUpByTagBillCurrencyPick						="50.00";
 		expBillBreakUpByTagBaseCurrencyPick						="50.00";
 		
 		
 		expBillBreakUpByTagLocalCurrencyPick					="3.50";
 		expBillAmtAdjustedInTransactionCurrencyPick				="50.00";
 		expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	="0.00";

 		System.out.println("actBillNewReferencePick 								: "+actBillNewReferencePick									+ " Value Expected : "+expBillNewReferencePick);
 		System.out.println("actBillAmtAdjAgainstNewRefInOtherVouchersPick			: " + actBillAmtAdjAgainstNewRefInOtherVouchersPick			+ "	Value Expected : "+expBillAmtAdjAgainstNewRefInOtherVouchersPick);
 		System.out.println("actBillTransactionCurrencyPick							: "+ actBillTransactionCurrencyPick							+ " Value Expected : "+expBillTransactionCurrencyPick);
 		System.out.println("actBillBaseCurrencyPick									: "+ actBillBaseCurrencyPick								+ " Value Expected : "+expBillBaseCurrencyPick);
 		System.out.println("actBillLocalCurrencyPick								: "+ actBillLocalCurrencyPick								+ " Value Expected : "+expBillLocalCurrencyPick);
 		System.out.println("actBillBalanceNewRefAmountPick							: "+ actBillBalanceNewRefAmountPick							+ " Value Expected : "+expBillBalanceNewRefAmountPick);
        System.out.println("actBillBreakUpByTagDepartmentPick						: "+ actBillBreakUpByTagDepartmentPick						+ " Value Expected : "+expBillBreakUpByTagDepartmentPick);
 		System.out.println("actBillBreakUpByTagBaseCurrencyPick						: "+ actBillBreakUpByTagBaseCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagBaseCurrencyPick);
 		System.out.println("actBillBreakUpByTagBillCurrencyPick						: "+ actBillBreakUpByTagBillCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagBillCurrencyPick);
 		System.out.println("actBillBreakUpByTagLocalCurrencyPick					: "+ actBillBreakUpByTagLocalCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagLocalCurrencyPick);
 		System.out.println("actBillAmtAdjustedInTransactionCurrencyPick				: "+ actBillAmtAdjustedInTransactionCurrencyPick			+ " Value Expected : "+expBillAmtAdjustedInTransactionCurrencyPick);
 		System.out.println("actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick  : "+ actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	+ " Value Expected : "+expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick);


 			    
 		
 	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
 	    Bill_OkBtn.click();
	   
 	    boolean savingMessage=checkVoucherSavingMessage(docno);
		
		System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
		
		if(savingMessage==true  &&
				
		        actBillNewReference.equalsIgnoreCase(expBillNewReference) &&
 				actBillAmtAdjAgainstNewRefInOtherVouchers.equalsIgnoreCase(expBillAmtAdjAgainstNewRefInOtherVouchers) &&
 				actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 				
 				actBillBaseCurrency.equalsIgnoreCase(actBillBaseCurrency) &&
 				actBillLocalCurrency.equalsIgnoreCase(actBillLocalCurrency) &&
 				actBillBalanceNewRefAmount.equalsIgnoreCase(actBillBalanceNewRefAmount) &&
 				actBillBreakUpByTagDepartment.equalsIgnoreCase(actBillBreakUpByTagDepartment) &&
 				actBillBreakUpByTagBaseCurrency.equalsIgnoreCase(actBillBreakUpByTagBaseCurrency) &&
 				actBillBreakUpByTagBillCurrency.equalsIgnoreCase(actBillBreakUpByTagBillCurrency) &&
 				actBillBreakUpByTagLocalCurrency.equalsIgnoreCase(actBillBreakUpByTagLocalCurrency) &&
 				actBillAmtAdjustedInTransactionCurrency.equalsIgnoreCase(actBillAmtAdjustedInTransactionCurrency) &&
 				actBillBalanceAmtToBeAdjustedInTransactionCurrency.equalsIgnoreCase(actBillBalanceAmtToBeAdjustedInTransactionCurrency) &&
		
 				
 				actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) &&
 				actBillAmtAdjAgainstNewRefInOtherVouchersPick.equalsIgnoreCase(expBillAmtAdjAgainstNewRefInOtherVouchersPick) &&
 				actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) &&
 				actBillBaseCurrencyPick.equalsIgnoreCase(actBillBaseCurrencyPick) &&
 				actBillLocalCurrencyPick.equalsIgnoreCase(actBillLocalCurrencyPick) &&
 				actBillBalanceNewRefAmountPick.equalsIgnoreCase(actBillBalanceNewRefAmountPick) &&
 				actBillBreakUpByTagDepartmentPick.equalsIgnoreCase(actBillBreakUpByTagDepartmentPick) &&
 				actBillBreakUpByTagBaseCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagBaseCurrencyPick) &&
 				actBillBreakUpByTagBillCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagBillCurrencyPick) &&
 				actBillBreakUpByTagLocalCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagLocalCurrencyPick) &&
 				actBillAmtAdjustedInTransactionCurrencyPick.equalsIgnoreCase(actBillAmtAdjustedInTransactionCurrencyPick) &&
 				actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick.equalsIgnoreCase(actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick))
		{
		
			
			return true;
			
		}
		else
		{
			
			return false;
		}
	}
	
	
	 @FindBy(xpath="//div[@id='id_transactionentry_summary']//div[2]//div[2]")
	 private static WebElement  sr_FooterAvgRateO;
		
	 
	public boolean checkSalesReturnsSavedVoucherWithAllItemsOnPreviousOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();
		
		boolean loading=checkLoadingMessage();
		
		System.out.println("VoucherLoadingMessage  : "+loading +" Value Expected : "+"TRUE");
				
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_footerExpandBtn));
		new_footerExpandBtn.click();
		
		// Actual
		
		String actdocumentNumberTxt		=documentNumberTxt.getAttribute("value");
		String actsalesAccountTxt		=salesAccountTxt.getAttribute("value");
		String actcustomerAccountTxt	=customerAccountTxt.getAttribute("value");
		String actdepartmentTxt			=departmentTxt.getAttribute("value");
		
		
		String expdocumentNumberTxt		="1";
		String expsalesAccountTxt		="Sales-Computers";
		String expcustomerAccountTxt	="Customer A";
		String expdepartmentTxt			="INDIA";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
	   	 
		
   	 	String actWareHouseR1	=select1stRow_1stColumn.getText();
   	 	String actItemR1		=select1stRow_2ndColumn.getText();
   	 	String actUnitsR1		=select1stRow_3rdColumn.getText();
   	 	String actAvgRateOR1	=select1stRow_4thColumn.getText(); 
   	 	String actQtyR1		    =select1stRow_5thColumn.getText();
   	 	String actLsiR1	        =select1stRow_6thColumn.getText();
   	 	String actRateR1	    =select1stRow_7thColumn.getText();
   	 	String actGrossR1		=select1stRow_8thColumn.getText();
   	 	String actBatchR1		=select1stRow_9thColumn.getText();
   	 	boolean actBinR1	    =select1stRow_10thColumn.getText().isEmpty();
   	 	String actExpiryDateR1	=select1stRow_11thColumn.getText();
   	 	boolean actRmaR1	    =select1stRow_12thColumn.getText().isEmpty();
   	 	
   	 	
   	 	DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
	    Date date=new Date();
	   
		
		
   		String expWareHouseR1	="SECUNDERABAD";
   	 	String expItemR1		="BATCH WA ITEM";
   	 	String expUnitsR1		="Pcs";
   	 	String expAvgRateOR1	="47"; 
   	 	String expQtyR1		    ="1.00";
   	 	String expLsiR1	        ="SalInv:6";
   	 	String expRateR1	    ="10.00";
   	 	String expGrossR1		="10.00";
   	 	String expBatchR1		="SR@SecWA1";
   	 	boolean expBinR1	    =true;
   	 	String expExpiryDateR1	=df.format(date);
   	 	boolean expRmaR1	    =true;
   	 	
   	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
   	 
		
	 	String actWareHouseR2	=select2ndRow_1stColumn.getText();
	 	String actItemR2		=select2ndRow_2ndColumn.getText();
	 	String actUnitsR2		=select2ndRow_3rdColumn.getText();
	 	String actAvgRateOR2	=select2ndRow_4thColumn.getText(); 
	 	String actQtyR2		    =select2ndRow_5thColumn.getText();
	 	String actLsiR2	        =select2ndRow_6thColumn.getText();
	 	String actRateR2	    =select2ndRow_7thColumn.getText();
	 	String actGrossR2		=select2ndRow_8thColumn.getText();
	 	boolean actBatchR2		=select2ndRow_9thColumn.getText().isEmpty();
	 	String actBinR2	        =select2ndRow_10thColumn.getText();
	 	boolean actExpiryDateR2	=select2ndRow_11thColumn.getText().isEmpty();
	 	boolean actRmaR2	    =select2ndRow_12thColumn.getText().isEmpty();
	 	
		
		String expWareHouseR2	="SECUNDERABAD";
	 	String expItemR2		="BIN FINISHED GOODS ITEM";
	 	String expUnitsR2		="Pcs";
	 	String expAvgRateOR2	="2"; 
	 	String expQtyR2		    ="1.00";
	 	String expLsiR2	        ="SalInv:6";
	 	String expRateR2	    ="10.00";
	 	String expGrossR2		="10.00";
	 	boolean expBatchR2		=true;
	 	String expBinR2	   		="Bin Update";
	 	boolean expExpiryDateR2	=true;
	 	boolean expRmaR2	    =true;
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
	   	 
		
   	 	String actWareHouseR3	=select3rdRow_1stColumn.getText();
   	 	String actItemR3		=select3rdRow_2ndColumn.getText();
   	 	String actUnitsR3		=select3rdRow_3rdColumn.getText();
   	 	String actAvgRateOR3	=select3rdRow_4thColumn.getText(); 
   	 	String actQtyR3		    =select3rdRow_5thColumn.getText();
   	 	String actLsiR3	        =select3rdRow_6thColumn.getText();
   	 	String actRateR3	    =select3rdRow_7thColumn.getText();
   	 	String actGrossR3		=select3rdRow_8thColumn.getText();
   	 	boolean actBatchR3		=select3rdRow_9thColumn.getText().isEmpty();
   	 	boolean actBinR3	    =select3rdRow_10thColumn.getText().isEmpty();
   	 	boolean actExpiryDateR3	=select3rdRow_11thColumn.getText().isEmpty();
   	 	String actRmaR3	    	=select3rdRow_12thColumn.getText();
   	 	
   	 	
   		String expWareHouseR3	="SECUNDERABAD";
   	 	String expItemR3		="RMA RITEM";
   	 	String expUnitsR3		="Pcs";
   	 	String expAvgRateOR3	="17"; 
   	 	String expQtyR3		    ="1.00";
   	 	String expLsiR3	        ="SalInv:6";
   	 	String expRateR3	    ="10.00";
   	 	String expGrossR3		="10.00";
   	 	boolean expBatchR3		=true;
   	 	boolean expBinR3	   	=true;
   	 	boolean expExpiryDateR3	=true;
   	 	String expRmaR3	    	="Rma@Sec#Sr1";
		
		
   	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_1stColumn));
   	 
		
	 	String actWareHouseR4	=select4thRow_1stColumn.getText();
	 	String actItemR4		=select4thRow_2ndColumn.getText();
	 	String actUnitsR4		=select4thRow_3rdColumn.getText();
	 	String actAvgRateOR4	=select4thRow_4thColumn.getText(); 
	 	String actQtyR4		    =select4thRow_5thColumn.getText();
	 	String actLsiR4	        =select4thRow_6thColumn.getText();
	 	String actRateR4	    =select4thRow_7thColumn.getText();
	 	String actGrossR4		=select4thRow_8thColumn.getText();
	 	boolean actBatchR4		=select4thRow_9thColumn.getText().isEmpty();
	 	boolean actBinR4	    =select4thRow_10thColumn.getText().isEmpty();
	 	boolean actExpiryDateR4	=select4thRow_11thColumn.getText().isEmpty();
	 	boolean actRmaR4	    =select4thRow_12thColumn.getText().isEmpty();
	 	
	 	
		
		String expWareHouseR4	="SECUNDERABAD";
	 	String expItemR4		="Stock ITEM";
	 	String expUnitsR4		="Pcs";
	 	String expAvgRateOR4	="2"; 
	 	String expQtyR4		    ="1.00";
	 	String expLsiR4	        ="SalInv:6";
	 	String expRateR4	    ="10.00";
	 	String expGrossR4		="10.00";
	 	boolean expBatchR4		=true;
	 	boolean expBinR4	   	=true;
	 	boolean expExpiryDateR4	=true;
	 	boolean expRmaR4	    =true;
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_1stColumn));
	   	 
		
   	 	String actWareHouseR5	=select5thRow_1stColumn.getText();
   	 	String actItemR5		=select5thRow_2ndColumn.getText();
   	 	String actUnitsR5		=select5thRow_3rdColumn.getText();
   	 	String actAvgRateOR5	=select5thRow_4thColumn.getText(); 
   	 	String actQtyR5		    =select5thRow_5thColumn.getText();
   	 	String actLsiR5	        =select5thRow_6thColumn.getText();
   	 	String actRateR5	    =select5thRow_7thColumn.getText();
   	 	String actGrossR5		=select5thRow_8thColumn.getText();
   	 	String actBatchR5		=select5thRow_9thColumn.getText();
   	 	boolean actBinR5	    =select5thRow_10thColumn.getText().isEmpty();
   	 	String actExpiryDateR5	=select5thRow_11thColumn.getText();
   	 	boolean actRmaR5	    =select5thRow_12thColumn.getText().isEmpty();
   	 	
		
		
   		String expWareHouseR5	="SECUNDERABAD";
   	 	String expItemR5		="BATCH BR ITEM";
   	 	String expUnitsR5		="Pcs";
   	 	String expAvgRateOR5	="0"; 
   	 	String expQtyR5		    ="1.00";
   	 	String expLsiR5	        ="SalInv:6";
   	 	String expRateR5	    ="10.00";
   	 	String expGrossR5		="10.00";
   	 	String expBatchR5		="SR@SecBR1";
   	 	boolean expBinR5	    =true;
   	 	String expExpiryDateR5	=df.format(date);
   	 	boolean expRmaR5	    =true;
	 	
	 	
	 	
	 	String actFooterQty     =QtyAmount.getText();
	 	String actFooterGross   =GrossAmount.getText();
	 	String actFooterNet     =netAmount.getText();
	 	String actFooterAvgRateO=sr_FooterAvgRateO.getText();
		
		
	 	String expFooterQty     ="5.00";
	 	String expFooterGross   ="50.00";
	 	String expFooterNet     ="50.00";
	 	String expFooterAvgRateO="68";
		 
		 
		 System.out.println("*********************************** checkSalesReturnsSavedVoucherWithAllItemsOnPreviousOption  *******************************");
		 
		 System.out.println("documentNumberTxt      : "+actdocumentNumberTxt      +" Value Expected : "+expdocumentNumberTxt);
		 System.out.println("salesAccountTxt        : "+actsalesAccountTxt        +" Value Expected : "+expsalesAccountTxt);
		 System.out.println("customerAccountTxt     : "+actcustomerAccountTxt     +" Value Expected : "+expcustomerAccountTxt);
		 System.out.println("departmentTxt          : "+actdepartmentTxt          +" Value Expected : "+expdepartmentTxt);
		 
		 System.out.println("WareHouseR1      : "+actWareHouseR1      +" Value Expected : "+expWareHouseR1);
		 System.out.println("ItemR1           : "+actItemR1           +" Value Expected : "+expItemR1);
		 System.out.println("UnitsR1          : "+actUnitsR1          +" Value Expected : "+expUnitsR1);
		 System.out.println("AvgRateOR1       : "+actAvgRateOR1       +" Value Expected : "+expAvgRateOR1);
		 System.out.println("QtyR1            : "+actQtyR1            +" Value Expected : "+expQtyR1);
		 System.out.println("LsiR1            : "+actLsiR1            +" Value Expected : "+expLsiR1);
		 System.out.println("RateR1           : "+actRateR1           +" Value Expected : "+expRateR1);
		 System.out.println("GrossR1          : "+actGrossR1          +" Value Expected : "+expGrossR1);
		 System.out.println("BatchR1          : "+actBatchR1          +" Value Expected : "+expBatchR1);
		 System.out.println("BinR1            : "+actBinR1            +" Value Expected : "+expBinR1);
		 System.out.println("ExpiryDateR1     : "+actExpiryDateR1     +" Value Expected : "+expExpiryDateR1);
		 System.out.println("RmaR1            : "+actRmaR1            +" Value Expected : "+expRmaR1);
		 
		 System.out.println("WareHouseR2      : "+actWareHouseR2      +" Value Expected : "+expWareHouseR2);
		 System.out.println("ItemR2           : "+actItemR2           +" Value Expected : "+expItemR2);
		 System.out.println("UnitsR2          : "+actUnitsR2          +" Value Expected : "+expUnitsR2);
		 System.out.println("AvgRateOR2       : "+actAvgRateOR2       +" Value Expected : "+expAvgRateOR2);
		 System.out.println("QtyR2            : "+actQtyR2            +" Value Expected : "+expQtyR2);
		 System.out.println("LsiR2            : "+actLsiR2            +" Value Expected : "+expLsiR2);
		 System.out.println("RateR2           : "+actRateR2           +" Value Expected : "+expRateR2);
		 System.out.println("GrossR2          : "+actGrossR2          +" Value Expected : "+expGrossR2);
		 System.out.println("BatchR2          : "+actBatchR2          +" Value Expected : "+expBatchR2);
		 System.out.println("BinR2            : "+actBinR2            +" Value Expected : "+expBinR2);
		 System.out.println("ExpiryDateR2     : "+actExpiryDateR2     +" Value Expected : "+expExpiryDateR2);
		 System.out.println("RmaR2            : "+actRmaR2            +" Value Expected : "+expRmaR2);
		 
		 System.out.println("WareHouseR3      : "+actWareHouseR3      +" Value Expected : "+expWareHouseR3);
		 System.out.println("ItemR3           : "+actItemR3           +" Value Expected : "+expItemR3);
		 System.out.println("UnitsR3          : "+actUnitsR3          +" Value Expected : "+expUnitsR3);
		 System.out.println("AvgRateOR3       : "+actAvgRateOR3       +" Value Expected : "+expAvgRateOR3);
		 System.out.println("QtyR3            : "+actQtyR3            +" Value Expected : "+expQtyR3);
		 System.out.println("LsiR3            : "+actLsiR3            +" Value Expected : "+expLsiR3);
		 System.out.println("RateR3           : "+actRateR3           +" Value Expected : "+expRateR3);
		 System.out.println("GrossR3          : "+actGrossR3          +" Value Expected : "+expGrossR3);
		 System.out.println("BatchR3          : "+actBatchR3          +" Value Expected : "+expBatchR3);
		 System.out.println("BinR3            : "+actBinR3            +" Value Expected : "+expBinR3);
		 System.out.println("ExpiryDateR3     : "+actExpiryDateR3     +" Value Expected : "+expExpiryDateR3);
		 System.out.println("RmaR3            : "+actRmaR3            +" Value Expected : "+expRmaR3);
		 
		 System.out.println("WareHouseR4      : "+actWareHouseR4      +" Value Expected : "+expWareHouseR4);
		 System.out.println("ItemR4           : "+actItemR4           +" Value Expected : "+expItemR4);
		 System.out.println("UnitsR4          : "+actUnitsR4          +" Value Expected : "+expUnitsR4);
		 System.out.println("AvgRateOR4       : "+actAvgRateOR4       +" Value Expected : "+expAvgRateOR4);
		 System.out.println("QtyR4            : "+actQtyR4            +" Value Expected : "+expQtyR4);
		 System.out.println("LsiR4            : "+actLsiR4            +" Value Expected : "+expLsiR4);
		 System.out.println("RateR4           : "+actRateR4           +" Value Expected : "+expRateR4);
		 System.out.println("GrossR4          : "+actGrossR4          +" Value Expected : "+expGrossR4);
		 System.out.println("BatchR4          : "+actBatchR4          +" Value Expected : "+expBatchR4);
		 System.out.println("BinR4            : "+actBinR4            +" Value Expected : "+expBinR4);
		 System.out.println("ExpiryDateR4     : "+actExpiryDateR4     +" Value Expected : "+expExpiryDateR4);
		 System.out.println("RmaR4            : "+actRmaR4            +" Value Expected : "+expRmaR4);
		 
		 System.out.println("WareHouseR5      : "+actWareHouseR5      +" Value Expected : "+expWareHouseR5);
		 System.out.println("ItemR5           : "+actItemR5           +" Value Expected : "+expItemR5);
		 System.out.println("UnitsR5          : "+actUnitsR5          +" Value Expected : "+expUnitsR5);
		 System.out.println("AvgRateOR5       : "+actAvgRateOR5       +" Value Expected : "+expAvgRateOR5);
		 System.out.println("QtyR5            : "+actQtyR5            +" Value Expected : "+expQtyR5);
		 System.out.println("LsiR5            : "+actLsiR5            +" Value Expected : "+expLsiR5);
		 System.out.println("RateR5           : "+actRateR5           +" Value Expected : "+expRateR5);
		 System.out.println("GrossR5          : "+actGrossR5          +" Value Expected : "+expGrossR5);
		 System.out.println("BatchR5          : "+actBatchR5          +" Value Expected : "+expBatchR5);
		 System.out.println("BinR5            : "+actBinR5            +" Value Expected : "+expBinR5);
		 System.out.println("ExpiryDateR5     : "+actExpiryDateR5     +" Value Expected : "+expExpiryDateR5);
		 System.out.println("RmaR5            : "+actRmaR5            +" Value Expected : "+expRmaR5);
		 
		 System.out.println("FooterQty        : "+actFooterQty        +" Value Expected : "+expFooterQty);
		 System.out.println("FooterGross      : "+actFooterGross      +" Value Expected : "+expFooterGross);
		 System.out.println("FooterNet        : "+actFooterNet        +" Value Expected : "+expFooterNet);
		 System.out.println("FooterAvgRateO   : "+actFooterAvgRateO   +" Value Expected : "+expFooterAvgRateO);
		 
		 
		 if(actdocumentNumberTxt.equalsIgnoreCase(expdocumentNumberTxt) && actsalesAccountTxt.equalsIgnoreCase(expsalesAccountTxt)
				 && actcustomerAccountTxt.equalsIgnoreCase(expcustomerAccountTxt) && actdepartmentTxt.equalsIgnoreCase(expdepartmentTxt)
				 
				 && actWareHouseR1.equalsIgnoreCase(expWareHouseR1) && actItemR1.equalsIgnoreCase(expItemR1) && actUnitsR1.equalsIgnoreCase(expUnitsR1)
				 && actAvgRateOR1.equalsIgnoreCase(expAvgRateOR1) && actQtyR1.equalsIgnoreCase(expQtyR1) && actLsiR1.equalsIgnoreCase(expLsiR1)
				 && actRateR1.equalsIgnoreCase(expRateR1) && actGrossR1.equalsIgnoreCase(expGrossR1) && actBatchR1.equalsIgnoreCase(expBatchR1)
				 && actBinR1==expBinR1 /*&& actExpiryDateR1.equalsIgnoreCase(expExpiryDateR1)*/ && actRmaR1==expRmaR1
				 
				 && actWareHouseR2.equalsIgnoreCase(expWareHouseR2) && actItemR2.equalsIgnoreCase(expItemR2) && actUnitsR2.equalsIgnoreCase(expUnitsR2)
				 && actAvgRateOR2.equalsIgnoreCase(expAvgRateOR2) && actQtyR2.equalsIgnoreCase(expQtyR2) && actLsiR2.equalsIgnoreCase(expLsiR2)
				 && actRateR2.equalsIgnoreCase(expRateR2) && actGrossR2.equalsIgnoreCase(expGrossR2) && actBatchR2==expBatchR2
				 && actBinR2.equalsIgnoreCase(expBinR2) && actExpiryDateR2==expExpiryDateR2 && actRmaR2==expRmaR2
				 
				 && actWareHouseR3.equalsIgnoreCase(expWareHouseR3) && actItemR3.equalsIgnoreCase(expItemR3) && actUnitsR3.equalsIgnoreCase(expUnitsR3)
				 && actAvgRateOR3.equalsIgnoreCase(expAvgRateOR3) && actQtyR3.equalsIgnoreCase(expQtyR3) && actLsiR3.equalsIgnoreCase(expLsiR3)
				 && actRateR3.equalsIgnoreCase(expRateR3) && actGrossR3.equalsIgnoreCase(expGrossR3) && actBatchR3==expBatchR3
				 && actBinR3==expBinR3 && actExpiryDateR3==expExpiryDateR3 && actRmaR3.equalsIgnoreCase(expRmaR3)
				 
				 && actWareHouseR4.equalsIgnoreCase(expWareHouseR4) && actItemR4.equalsIgnoreCase(expItemR4) && actUnitsR4.equalsIgnoreCase(expUnitsR4)
				 && actAvgRateOR4.equalsIgnoreCase(expAvgRateOR4) && actQtyR4.equalsIgnoreCase(expQtyR4) && actLsiR4.equalsIgnoreCase(expLsiR4)
				 && actRateR4.equalsIgnoreCase(expRateR4) && actGrossR4.equalsIgnoreCase(expGrossR4) && actBatchR4==expBatchR4
				 && actBinR4==expBinR4 && actExpiryDateR4==expExpiryDateR4 && actRmaR4==expRmaR4
				 
				 && actWareHouseR5.equalsIgnoreCase(expWareHouseR5) && actItemR5.equalsIgnoreCase(expItemR5) && actUnitsR5.equalsIgnoreCase(expUnitsR5)
				 && actAvgRateOR5.equalsIgnoreCase(expAvgRateOR5) && actQtyR5.equalsIgnoreCase(expQtyR5) && actLsiR5.equalsIgnoreCase(expLsiR5)
				 && actRateR5.equalsIgnoreCase(expRateR5) && actGrossR5.equalsIgnoreCase(expGrossR5) && actBatchR5.equalsIgnoreCase(expBatchR5)
				 && actBinR5==expBinR5/* && actExpiryDateR5.equalsIgnoreCase(expExpiryDateR5)*/ && actRmaR5==expRmaR5
				 
				 && actFooterQty.equalsIgnoreCase(expFooterQty) && actFooterGross.equalsIgnoreCase(expFooterGross)
				 && actFooterNet.equalsIgnoreCase(expFooterNet) && actFooterAvgRateO.equalsIgnoreCase(expFooterAvgRateO))
			 
		 
		{
			System.out.println("Test Pass : Voucher Data is Correct");
			
			new_footerMinimizeBtn.click();
			
			return true;
		}
		else
		{
			System.out.println("Test Fail : Voucher Data is NOT Correct");
			
			new_footerMinimizeBtn.click();
			
			return false;
		}
	}
	
	
	
	public boolean checkEntryPageSuspendOptionInSalesReturnsVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(3000);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	    String docno=documentNumberTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();
		
		boolean suspendMessage=checkVoucherSavingMessage(docno);
			
		System.out.println("************************************* checkEntryPageSuspendOptionInSalesReturnsVoucher  *********************************");
		
		System.out.println("SavingMessage  :  "+suspendMessage +" Value Expected : "+"TRUE");
		
		if(suspendMessage==true)
		{
			System.out.println("Test Pass : Error Message is Displayed ");
			excelReader.setCellData(xlfile, xlSheetName, 11, 9, resPass);
			
			return true;
		}
		
		else
		{
			System.out.println("Test Fail :  Error Message is  not Displayed ");
		     excelReader.setCellData(xlfile, xlSheetName, 11, 9, resFail);
			
			return false;
		}
	}
	


	
	public boolean checkSuspendStatusInEntryPageAndHomePageOnPreviousOptionSalesReturns() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();
		
		boolean loading=checkLoadingMessage();
		
		System.out.println("VoucherLoadingMessage  : "+loading +" Value Expected : "+"TRUE");
		
		Thread.sleep(5000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoPanelStatus));
		
		String actinfoPanelStatusEntryPage	=infoPanelStatus.getText();
		String expinfoPanelStatusEntryPage	="Suspended";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(suspendStatusRow1));
		
		String actsuspendStatusRow1HomePage	=suspendStatusRow1.getText();
		String expsuspendStatusRow1HomePage	="TRUE";
		
		System.out.println("************************************* checkSuspendStatusInEntryPageAndHomePageOnPreviousOptionSalesReturns  *********************************");
		
		System.out.println("infoPanelStatusEntryPage  	:  "+actinfoPanelStatusEntryPage 	+" value Expected : "+expinfoPanelStatusEntryPage);
		System.out.println("suspendStatusRow1HomePage  	:  "+actsuspendStatusRow1HomePage 	+" value Expected : "+expsuspendStatusRow1HomePage);
		
		if(actinfoPanelStatusEntryPage.equalsIgnoreCase(expinfoPanelStatusEntryPage) && actsuspendStatusRow1HomePage.equalsIgnoreCase(expsuspendStatusRow1HomePage))
		{
			System.out.println("Test Pass : Suspended Succesfully");
			return true;
		}
		else
		{
			System.out.println("Test Fail : NOT Suspended Succesfully");
			return false;
		}
		
	}
	
	
	
	// Copy Document Option In Sales Returns Voucher

	public boolean checkCopyDocumentScreenOptionsInSalesReturns() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		checkUserFriendlyMessage();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
		toggleBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(copyDocumentOption));
		copyDocumentOption.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cd_vouchertypeTxt));
		
		boolean actcd_vouchertypeTxt		=cd_vouchertypeTxt.isDisplayed();
		boolean actcd_searchOnDropdown1		=cd_searchOnDropdown1.isDisplayed();
		boolean actcd_searchOnDropdown2		=cd_searchOnDropdown2.isDisplayed();
		boolean actcd_searchTxt				=cd_searchTxt.isDisplayed();
		boolean actcd_refreshBtn			=cd_refreshBtn.isDisplayed();
		boolean actcd_filterBtn				=cd_filterBtn.isDisplayed();
		boolean actcd_HeaderChkBox			=cd_HeaderChkBox.isDisplayed();
		boolean actcd_FirstChkBox			=cd_FirstChkBox.isDisplayed();
		boolean actcd_clubsimilarTransChkBox=cd_clubsimilarTransChkBox.isDisplayed();
		boolean actcd_SelectallBtn			=cd_SelectallBtn.isDisplayed();
		boolean actcd_firstBtn				=cd_firstBtn.isDisplayed();
		boolean actcd_PreviousBtn			=cd_PreviousBtn.isDisplayed();
		boolean actcd_PageNo				=cd_PageNo.isDisplayed();
		boolean actcd_nextBtn				=cd_nextBtn.isDisplayed();
		boolean actcd_LastBtn				=cd_LastBtn.isDisplayed();
		boolean actcd_OkBtn					=cd_OkBtn.isDisplayed();
		boolean actcd_CancelBtn				=cd_CancelBtn.isDisplayed();
		
		
		boolean expcd_vouchertypeTxt		=true;
		boolean expcd_searchOnDropdown1		=true;
		boolean expcd_searchOnDropdown2		=true;
		boolean expcd_searchTxt				=true;
		boolean expcd_refreshBtn			=true;
		boolean expcd_filterBtn				=true;
		boolean expcd_HeaderChkBox			=true;
		boolean expcd_FirstChkBox			=true;
		boolean expcd_clubsimilarTransChkBox=true;
		boolean expcd_SelectallBtn			=true;
		boolean expcd_firstBtn				=true;
		boolean expcd_PreviousBtn			=true;
		boolean expcd_PageNo				=true;
		boolean expcd_nextBtn				=true;
		boolean expcd_LastBtn				=true;
		boolean expcd_OkBtn					=true;
		boolean expcd_CancelBtn				=true;
		
		System.out.println("************************************* checkCopyDocumentScreenOptionsInSalesReturns  *********************************");
		
		System.out.println("Copy Document Voucher type                : "+actcd_vouchertypeTxt			+"  Value Expected : "+expcd_vouchertypeTxt);
		System.out.println("Copy Document Search dropdown 1           : "+actcd_searchOnDropdown1		+"  Value Expected : "+expcd_searchOnDropdown1);
		System.out.println("Copy Document Search dropdown 2           : "+actcd_searchOnDropdown2		+"  Value Expected : "+expcd_searchOnDropdown2);
		System.out.println("Copy Document Search text                 : "+actcd_searchTxt				+"  Value Expected : "+expcd_searchTxt);
		System.out.println("Copy Document Refresh                     : "+actcd_refreshBtn				+"  Value Expected : "+expcd_refreshBtn);
		System.out.println("Copy Document Filter                      : "+actcd_filterBtn				+"  Value Expected : "+expcd_filterBtn);
		System.out.println("Copy Document Header Chk box              : "+actcd_HeaderChkBox			+"  Value Expected : "+expcd_HeaderChkBox);
		System.out.println("Copy Document First Chk Box               : "+actcd_FirstChkBox				+"  Value Expected : "+expcd_FirstChkBox);
		System.out.println("Copy Document Club Similar Trans Chk Box  : "+actcd_clubsimilarTransChkBox	+"  Value Expected : "+expcd_clubsimilarTransChkBox);
		System.out.println("Copy Document Select All                  : "+actcd_SelectallBtn			+"  Value Expected : "+expcd_SelectallBtn);
		System.out.println("Copy Document first Button                : "+actcd_firstBtn				+"  Value Expected : "+expcd_firstBtn);
		System.out.println("Copy Document Previous Button             : "+actcd_PreviousBtn				+"  Value Expected : "+expcd_PreviousBtn);
		System.out.println("Copy Document Page No                     : "+actcd_PageNo					+"  Value Expected : "+expcd_PageNo);
		System.out.println("Copy Document Next Button                 : "+actcd_nextBtn					+"  Value Expected : "+expcd_nextBtn);
		System.out.println("Copy Document last Button                 : "+actcd_LastBtn					+"  Value Expected : "+expcd_LastBtn);
		System.out.println("Copy Document Ok Button                   : "+actcd_OkBtn					+"  Value Expected : "+expcd_OkBtn);
		System.out.println("Copy Document cancel Button               : "+actcd_CancelBtn				+"  Value Expected : "+expcd_CancelBtn);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cd_vouchertypeTxt));
		
		if(actcd_vouchertypeTxt==expcd_vouchertypeTxt && actcd_searchOnDropdown1==expcd_searchOnDropdown1
				&& actcd_searchOnDropdown2==expcd_searchOnDropdown2 && actcd_searchTxt==expcd_searchTxt
				&& actcd_refreshBtn==expcd_refreshBtn && actcd_filterBtn==expcd_filterBtn
				&& actcd_HeaderChkBox==expcd_HeaderChkBox && actcd_FirstChkBox==expcd_FirstChkBox
				&& actcd_clubsimilarTransChkBox==expcd_clubsimilarTransChkBox && actcd_SelectallBtn==expcd_SelectallBtn
				&& actcd_firstBtn==expcd_firstBtn && actcd_PreviousBtn==expcd_PreviousBtn
				&& actcd_PageNo==expcd_PageNo && actcd_nextBtn==expcd_nextBtn
				&& actcd_LastBtn==expcd_LastBtn && actcd_OkBtn==expcd_OkBtn && actcd_CancelBtn==expcd_CancelBtn)
		{	
			System.out.println("Test Pass : Copy Document Options Are As Expected");
			excelReader.setCellData(xlfile, xlSheetName, 78, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Copy Document Options Are NOT As Expected");
			excelReader.setCellData(xlfile, xlSheetName, 78, 9, resFail);
			return false;
		}
	}

		
	
	public boolean checkFirstRowCheckboxInCopyDocumentInSalesReturns() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cd_FirstChkBox));
		cd_FirstChkBox.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cd_R1C2));

		String actCopyDocWareHouseR1	=cd_R1C2.getText();
		String actCopyDocItemR1			=cd_R1C3.getText();
		String actCopyDocUnitsR1		=cd_R1C4.getText();
		String actCopyDocAvgRateOR1		=cd_R1C5.getText();
		String actCopyDocQtyR1			=cd_R1C6.getText();
		boolean actCopyDocLsiR1			=cd_R1C7.getText().isEmpty();
		String actCopyDocRateR1			=cd_R1C8.getText();
		String actCopyDocGrossR1		=cd_R1C9.getText();
		String actCopyDocBatchR1		=cd_R1C10.getText();
		boolean actCopyDocBinsR1		=cd_R1C11.getText().isEmpty();
		String actCopyDocExpiryDateR1 	=cd_R1C12.getText();
		boolean actCopyDocRmaR1			=cd_R1C13.getText().isEmpty();
	
		
		String actCopyDocWareHouseR2	=cd_R2C2.getText();
		String actCopyDocItemR2			=cd_R2C3.getText();
		String actCopyDocUnitsR2		=cd_R2C4.getText();
		String actCopyDocAvgRateOR2		=cd_R2C5.getText();
		String actCopyDocQtyR2			=cd_R2C6.getText();
		boolean actCopyDocLsiR2			=cd_R2C7.getText().isEmpty();
		String actCopyDocRateR2			=cd_R2C8.getText();
		String actCopyDocGrossR2		=cd_R2C9.getText();
		boolean actCopyDocBatchR2		=cd_R2C10.getText().isEmpty();
		String actCopyDocBinsR2			=cd_R2C11.getText();
		String actCopyDocExpiryDateR2 	=cd_R2C12.getText();
		boolean actCopyDocRmaR2			=cd_R2C13.getText().isEmpty();
		
		String actCopyDocWareHouseR3	=cd_R3C2.getText();
		String actCopyDocItemR3			=cd_R3C3.getText();
		String actCopyDocUnitsR3		=cd_R3C4.getText();
		String actCopyDocAvgRateOR3		=cd_R3C5.getText();
		String actCopyDocQtyR3			=cd_R3C6.getText();
		boolean actCopyDocLsiR3			=cd_R3C7.getText().isEmpty();
		String actCopyDocRateR3			=cd_R3C8.getText();
		String actCopyDocGrossR3		=cd_R3C9.getText();
		boolean actCopyDocBatchR3		=cd_R3C10.getText().isEmpty();
		boolean actCopyDocBinsR3		=cd_R3C11.getText().isEmpty();
		String actCopyDocExpiryDateR3 	=cd_R3C12.getText();
		String actCopyDocRmaR3			=cd_R3C13.getText();
		
		String actCopyDocWareHouseR4	=cd_R4C2.getText();
		String actCopyDocItemR4			=cd_R4C3.getText();
		String actCopyDocUnitsR4		=cd_R4C4.getText();
		String actCopyDocAvgRateOR4		=cd_R4C5.getText();
		String actCopyDocQtyR4			=cd_R4C6.getText();
		boolean actCopyDocLsiR4			=cd_R4C7.getText().isEmpty();
		String actCopyDocRateR4			=cd_R4C8.getText();
		String actCopyDocGrossR4		=cd_R4C9.getText();
		boolean actCopyDocBatchR4		=cd_R4C10.getText().isEmpty();
		boolean actCopyDocBinsR4		=cd_R4C11.getText().isEmpty();
		String actCopyDocExpiryDateR4 	=cd_R4C12.getText();
		boolean actCopyDocRmaR4			=cd_R4C13.getText().isEmpty();
		
		String actCopyDocWareHouseR5	=cd_R5C2.getText();
		String actCopyDocItemR5			=cd_R5C3.getText();
		String actCopyDocUnitsR5		=cd_R5C4.getText();
		String actCopyDocAvgRateOR5		=cd_R5C5.getText();
		String actCopyDocQtyR5			=cd_R5C6.getText();
		boolean actCopyDocLsiR5			=cd_R5C7.getText().isEmpty();
		String actCopyDocRateR5			=cd_R5C8.getText();
		String actCopyDocGrossR5		=cd_R5C9.getText();
		String actCopyDocBatchR5		=cd_R5C10.getText();
		boolean actCopyDocBinsR5		=cd_R5C11.getText().isEmpty();
		String actCopyDocExpiryDateR5 	=cd_R5C12.getText();
		boolean actCopyDocRmaR5			=cd_R5C13.getText().isEmpty();
		
		// Expected
		
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
	    Date date=new Date();
		
		String expCopyDocWareHouseR1	="SECUNDERABAD";
		String expCopyDocItemR1			="BATCH WA ITEM";
		String expCopyDocUnitsR1		="Pcs";
		String expCopyDocAvgRateOR1		="47";
		String expCopyDocQtyR1			="1.00";
		boolean expCopyDocLsiR1			=true;
		String expCopyDocRateR1			="10.00";
		String expCopyDocGrossR1		="10.00";
		String expCopyDocBatchR1		="SR@SECWA1";
		boolean expCopyDocBinsR1		=true;
		String expCopyDocExpiryDateR1 	=df.format(date);
		boolean expCopyDocRmaR1			=true;
	
		
		String expCopyDocWareHouseR2	="SECUNDERABAD";
		String expCopyDocItemR2			="BIN FINISHED GOODS ITEM";
		String expCopyDocUnitsR2		="Pcs";
		String expCopyDocAvgRateOR2		="2";
		String expCopyDocQtyR2			="1.00";
		boolean expCopyDocLsiR2			=true;
		String expCopyDocRateR2			="10.00";
		String expCopyDocGrossR2		="10.00";
		boolean expCopyDocBatchR2		=true;
		String expCopyDocBinsR2			="Bin Update";
		String expCopyDocExpiryDateR2 	="0-0-0";
		boolean expCopyDocRmaR2			=true;
		
		String expCopyDocWareHouseR3	="SECUNDERABAD";
		String expCopyDocItemR3			="RMA RITEM";
		String expCopyDocUnitsR3		="Pcs";
		String expCopyDocAvgRateOR3		="17";
		String expCopyDocQtyR3			="1.00";
		boolean expCopyDocLsiR3			=true;
		String expCopyDocRateR3			="10.00";
		String expCopyDocGrossR3		="10.00";
		boolean expCopyDocBatchR3		=true;
		boolean expCopyDocBinsR3		=true;
		String expCopyDocExpiryDateR3 	="0-0-0";
		String expCopyDocRmaR3			="RMA@SEC#Sr1";
		
		String expCopyDocWareHouseR4	="SECUNDERABAD";
		String expCopyDocItemR4			="STOCK ITEM";
		String expCopyDocUnitsR4		="Pcs";
		String expCopyDocAvgRateOR4		="2";
		String expCopyDocQtyR4			="1.00";
		boolean expCopyDocLsiR4			=true;
		String expCopyDocRateR4			="10.00";
		String expCopyDocGrossR4		="10.00";
		boolean expCopyDocBatchR4		=true;
		boolean expCopyDocBinsR4		=true;
		String expCopyDocExpiryDateR4 	="0-0-0";
		boolean expCopyDocRmaR4			=true;
		
		String expCopyDocWareHouseR5	="SECUNDERABAD";
		String expCopyDocItemR5			="BATCH BR ITEM";
		String expCopyDocUnitsR5		="Pcs";
		String expCopyDocAvgRateOR5		="0";
		String expCopyDocQtyR5			="1.00";
		boolean expCopyDocLsiR5			=true;
		String expCopyDocRateR5			="10.00";
		String expCopyDocGrossR5		="10.00";
		String expCopyDocBatchR5		="SR@SECBR1";
		boolean expCopyDocBinsR5		=true;
		String expCopyDocExpiryDateR5 	=df.format(date);
		boolean expCopyDocRmaR5			=true;
		
		System.out.println("************************************* checkFirstRowCheckboxInCopyDocumentInSalesReturns  *********************************");
		
		System.out.println("CopyDocWareHouseR1       : "+actCopyDocWareHouseR1		+"  Value Expected : "+expCopyDocWareHouseR1);
		System.out.println("CopyDocItemR1            : "+actCopyDocItemR1			+"  Value Expected : "+expCopyDocItemR1);
		System.out.println("CopyDocUnitsR1         	 : "+actCopyDocUnitsR1			+"  Value Expected : "+expCopyDocUnitsR1);
		System.out.println("CopyDocAvgRateOR1        : "+actCopyDocAvgRateOR1		+"  Value Expected : "+expCopyDocAvgRateOR1);
		System.out.println("CopyDocQtyR1             : "+actCopyDocQtyR1			+"  Value Expected : "+expCopyDocQtyR1);
		System.out.println("CopyDocLsiR1             : "+actCopyDocLsiR1			+"  Value Expected : "+expCopyDocLsiR1);
		System.out.println("CopyDocRateR1            : "+actCopyDocRateR1			+"  Value Expected : "+expCopyDocRateR1);
		System.out.println("CopyDocGrossR1           : "+actCopyDocGrossR1			+"  Value Expected : "+expCopyDocGrossR1);
		System.out.println("CopyDocBatchR1           : "+actCopyDocBatchR1			+"  Value Expected : "+expCopyDocBatchR1);
		System.out.println("CopyDocBinsR1            : "+actCopyDocBinsR1			+"  Value Expected : "+expCopyDocBinsR1);
		System.out.println("CopyDocExpiryDateR1      : "+actCopyDocExpiryDateR1		+"  Value Expected : "+expCopyDocExpiryDateR1);
		System.out.println("CopyDocRmaR1             : "+actCopyDocRmaR1			+"  Value Expected : "+expCopyDocRmaR1);
		
		System.out.println("CopyDocWareHouseR2       : "+actCopyDocWareHouseR2		+"  Value Expected : "+expCopyDocWareHouseR2);
		System.out.println("CopyDocItemR2            : "+actCopyDocItemR2			+"  Value Expected : "+expCopyDocItemR2);
		System.out.println("CopyDocUnitsR2         	 : "+actCopyDocUnitsR2			+"  Value Expected : "+expCopyDocUnitsR2);
		System.out.println("CopyDocAvgRateOR2        : "+actCopyDocAvgRateOR2		+"  Value Expected : "+expCopyDocAvgRateOR2);
		System.out.println("CopyDocQtyR2             : "+actCopyDocQtyR2			+"  Value Expected : "+expCopyDocQtyR2);
		System.out.println("CopyDocLsiR2             : "+actCopyDocLsiR2			+"  Value Expected : "+expCopyDocLsiR2);
		System.out.println("CopyDocRateR2            : "+actCopyDocRateR2			+"  Value Expected : "+expCopyDocRateR2);
		System.out.println("CopyDocGrossR2           : "+actCopyDocGrossR2			+"  Value Expected : "+expCopyDocGrossR2);
		System.out.println("CopyDocBatchR2           : "+actCopyDocBatchR2			+"  Value Expected : "+expCopyDocBatchR2);
		System.out.println("CopyDocBinsR2            : "+actCopyDocBinsR2			+"  Value Expected : "+expCopyDocBinsR2);
		System.out.println("CopyDocExpiryDateR2      : "+actCopyDocExpiryDateR2		+"  Value Expected : "+expCopyDocExpiryDateR2);
		System.out.println("CopyDocRmaR2             : "+actCopyDocRmaR2			+"  Value Expected : "+expCopyDocRmaR2);
		
		System.out.println("CopyDocWareHouseR3       : "+actCopyDocWareHouseR3		+"  Value Expected : "+expCopyDocWareHouseR3);
		System.out.println("CopyDocItemR3            : "+actCopyDocItemR3			+"  Value Expected : "+expCopyDocItemR3);
		System.out.println("CopyDocUnitsR3         	 : "+actCopyDocUnitsR3			+"  Value Expected : "+expCopyDocUnitsR3);
		System.out.println("CopyDocAvgRateOR3        : "+actCopyDocAvgRateOR3		+"  Value Expected : "+expCopyDocAvgRateOR3);
		System.out.println("CopyDocQtyR3             : "+actCopyDocQtyR3			+"  Value Expected : "+expCopyDocQtyR3);
		System.out.println("CopyDocLsiR3             : "+actCopyDocLsiR3			+"  Value Expected : "+expCopyDocLsiR3);
		System.out.println("CopyDocRateR3            : "+actCopyDocRateR3			+"  Value Expected : "+expCopyDocRateR3);
		System.out.println("CopyDocGrossR3           : "+actCopyDocGrossR3			+"  Value Expected : "+expCopyDocGrossR3);
		System.out.println("CopyDocBatchR3           : "+actCopyDocBatchR3			+"  Value Expected : "+expCopyDocBatchR3);
		System.out.println("CopyDocBinsR3            : "+actCopyDocBinsR3			+"  Value Expected : "+expCopyDocBinsR3);
		System.out.println("CopyDocExpiryDateR3      : "+actCopyDocExpiryDateR3		+"  Value Expected : "+expCopyDocExpiryDateR3);
		System.out.println("CopyDocRmaR3             : "+actCopyDocRmaR3			+"  Value Expected : "+expCopyDocRmaR3);
		
		System.out.println("CopyDocWareHouseR4       : "+actCopyDocWareHouseR4		+"  Value Expected : "+expCopyDocWareHouseR4);
		System.out.println("CopyDocItemR4            : "+actCopyDocItemR4			+"  Value Expected : "+expCopyDocItemR4);
		System.out.println("CopyDocUnitsR4         	 : "+actCopyDocUnitsR4			+"  Value Expected : "+expCopyDocUnitsR4);
		System.out.println("CopyDocAvgRateOR4        : "+actCopyDocAvgRateOR4		+"  Value Expected : "+expCopyDocAvgRateOR4);
		System.out.println("CopyDocQtyR4             : "+actCopyDocQtyR4			+"  Value Expected : "+expCopyDocQtyR4);
		System.out.println("CopyDocLsiR4             : "+actCopyDocLsiR4			+"  Value Expected : "+expCopyDocLsiR4);
		System.out.println("CopyDocRateR4            : "+actCopyDocRateR4			+"  Value Expected : "+expCopyDocRateR4);
		System.out.println("CopyDocGrossR4           : "+actCopyDocGrossR4			+"  Value Expected : "+expCopyDocGrossR4);
		System.out.println("CopyDocBatchR4           : "+actCopyDocBatchR4			+"  Value Expected : "+expCopyDocBatchR4);
		System.out.println("CopyDocBinsR4            : "+actCopyDocBinsR4			+"  Value Expected : "+expCopyDocBinsR4);
		System.out.println("CopyDocExpiryDateR4      : "+actCopyDocExpiryDateR4		+"  Value Expected : "+expCopyDocExpiryDateR4);
		System.out.println("CopyDocRmaR4             : "+actCopyDocRmaR4			+"  Value Expected : "+expCopyDocRmaR4);
		
		System.out.println("CopyDocWareHouseR5       : "+actCopyDocWareHouseR5		+"  Value Expected : "+expCopyDocWareHouseR5);
		System.out.println("CopyDocItemR5            : "+actCopyDocItemR5			+"  Value Expected : "+expCopyDocItemR5);
		System.out.println("CopyDocUnitsR5         	 : "+actCopyDocUnitsR5			+"  Value Expected : "+expCopyDocUnitsR5);
		System.out.println("CopyDocAvgRateOR5        : "+actCopyDocAvgRateOR5		+"  Value Expected : "+expCopyDocAvgRateOR5);
		System.out.println("CopyDocQtyR5             : "+actCopyDocQtyR5			+"  Value Expected : "+expCopyDocQtyR5);
		System.out.println("CopyDocLsiR5             : "+actCopyDocLsiR5			+"  Value Expected : "+expCopyDocLsiR5);
		System.out.println("CopyDocRateR5            : "+actCopyDocRateR5			+"  Value Expected : "+expCopyDocRateR5);
		System.out.println("CopyDocGrossR5           : "+actCopyDocGrossR5			+"  Value Expected : "+expCopyDocGrossR5);
		System.out.println("CopyDocBatchR5           : "+actCopyDocBatchR5			+"  Value Expected : "+expCopyDocBatchR5);
		System.out.println("CopyDocBinsR5            : "+actCopyDocBinsR5			+"  Value Expected : "+expCopyDocBinsR5);
		System.out.println("CopyDocExpiryDateR5      : "+actCopyDocExpiryDateR5		+"  Value Expected : "+expCopyDocExpiryDateR5);
		System.out.println("CopyDocRmaR5             : "+actCopyDocRmaR5			+"  Value Expected : "+expCopyDocRmaR5);
		
		
		if(actCopyDocWareHouseR1.equalsIgnoreCase(expCopyDocWareHouseR1) && actCopyDocItemR1.equalsIgnoreCase(expCopyDocItemR1) && actCopyDocUnitsR1.equalsIgnoreCase(expCopyDocUnitsR1)
				&& actCopyDocAvgRateOR1.equalsIgnoreCase(expCopyDocAvgRateOR1) && actCopyDocQtyR1.equalsIgnoreCase(expCopyDocQtyR1) && actCopyDocLsiR1==expCopyDocLsiR1
				&& actCopyDocRateR1.equalsIgnoreCase(expCopyDocRateR1) && actCopyDocGrossR1.equalsIgnoreCase(expCopyDocGrossR1) && actCopyDocBatchR1.equalsIgnoreCase(expCopyDocBatchR1)
				&& actCopyDocBinsR1==expCopyDocBinsR1 /*&& actCopyDocExpiryDateR1.equalsIgnoreCase(expCopyDocExpiryDateR1)*/ && actCopyDocRmaR1==expCopyDocRmaR1
				
				&& actCopyDocWareHouseR2.equalsIgnoreCase(expCopyDocWareHouseR2) && actCopyDocItemR2.equalsIgnoreCase(expCopyDocItemR2) && actCopyDocUnitsR2.equalsIgnoreCase(expCopyDocUnitsR2)
				&& actCopyDocAvgRateOR2.equalsIgnoreCase(expCopyDocAvgRateOR2) && actCopyDocQtyR2.equalsIgnoreCase(expCopyDocQtyR2) && actCopyDocLsiR2==expCopyDocLsiR2
				&& actCopyDocRateR2.equalsIgnoreCase(expCopyDocRateR2) && actCopyDocGrossR2.equalsIgnoreCase(expCopyDocGrossR2) && actCopyDocBatchR2==expCopyDocBatchR2
				&& actCopyDocBinsR2.equalsIgnoreCase(expCopyDocBinsR2) /*&& actCopyDocExpiryDateR2.equalsIgnoreCase(expCopyDocExpiryDateR2)*/ && actCopyDocRmaR2==expCopyDocRmaR2
				
				&& actCopyDocWareHouseR3.equalsIgnoreCase(expCopyDocWareHouseR3) && actCopyDocItemR3.equalsIgnoreCase(expCopyDocItemR3) && actCopyDocUnitsR3.equalsIgnoreCase(expCopyDocUnitsR3)
				&& actCopyDocAvgRateOR3.equalsIgnoreCase(expCopyDocAvgRateOR3) && actCopyDocQtyR3.equalsIgnoreCase(expCopyDocQtyR3) && actCopyDocLsiR3==expCopyDocLsiR3
				&& actCopyDocRateR3.equalsIgnoreCase(expCopyDocRateR3) && actCopyDocGrossR3.equalsIgnoreCase(expCopyDocGrossR3) && actCopyDocBatchR3==expCopyDocBatchR3
				&& actCopyDocBinsR3==expCopyDocBinsR3 /*&& actCopyDocExpiryDateR3.equalsIgnoreCase(expCopyDocExpiryDateR3)*/ && actCopyDocRmaR3.equalsIgnoreCase(expCopyDocRmaR3)
				
				&& actCopyDocWareHouseR4.equalsIgnoreCase(expCopyDocWareHouseR4) && actCopyDocItemR4.equalsIgnoreCase(expCopyDocItemR4) && actCopyDocUnitsR4.equalsIgnoreCase(expCopyDocUnitsR4)
				&& actCopyDocAvgRateOR4.equalsIgnoreCase(expCopyDocAvgRateOR4) && actCopyDocQtyR4.equalsIgnoreCase(expCopyDocQtyR4) && actCopyDocLsiR4==expCopyDocLsiR4
				&& actCopyDocRateR4.equalsIgnoreCase(expCopyDocRateR4) && actCopyDocGrossR4.equalsIgnoreCase(expCopyDocGrossR4) && actCopyDocBatchR4==expCopyDocBatchR4
				&& actCopyDocBinsR4==expCopyDocBinsR4/* && actCopyDocExpiryDateR4.equalsIgnoreCase(expCopyDocExpiryDateR4)*/ && actCopyDocRmaR4==expCopyDocRmaR4
				
				&& actCopyDocWareHouseR5.equalsIgnoreCase(expCopyDocWareHouseR5) && actCopyDocItemR5.equalsIgnoreCase(expCopyDocItemR5) && actCopyDocUnitsR5.equalsIgnoreCase(expCopyDocUnitsR5)
				&& actCopyDocAvgRateOR5.equalsIgnoreCase(expCopyDocAvgRateOR5) && actCopyDocQtyR5.equalsIgnoreCase(expCopyDocQtyR5) && actCopyDocLsiR5==expCopyDocLsiR5
				&& actCopyDocRateR5.equalsIgnoreCase(expCopyDocRateR5) && actCopyDocGrossR5.equalsIgnoreCase(expCopyDocGrossR5) && actCopyDocBatchR5.equalsIgnoreCase(expCopyDocBatchR5)
				&& actCopyDocBinsR5==expCopyDocBinsR5 /*&& actCopyDocExpiryDateR5.equalsIgnoreCase(expCopyDocExpiryDateR5)*/ && actCopyDocRmaR5==expCopyDocRmaR5)
		{	
			
			
			excelReader.setCellData(xlfile, xlSheetName, 79, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Copy Document Options Are NOT As Expected");
			excelReader.setCellData(xlfile, xlSheetName, 79, 9, resFail);
			return false;
		}
	}
	
	
	
	@FindBy(xpath="//input[@id='id_body_35_5']")
	private static WebElement  enter_LSalesInvoice;
	
	// Issues Fails As Link Coloum Is Not Empty
	public boolean checkLoadingVoucherInformationFromCopyDocumentOnClickOnOkInSalesReturns() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cd_OkBtn));
		cd_OkBtn.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();
		
		// Actual
		
        boolean actLSOR1	=select1stRow_6thColumn.getText().isEmpty();
        boolean actLSOR2	=select2ndRow_6thColumn.getText().isEmpty();
        boolean actLSOR3	=select3rdRow_6thColumn.getText().isEmpty();
        boolean actLSOR4	=select4thRow_6thColumn.getText().isEmpty();
        
        // Expected
		
        boolean expLSOR1	=true;
        boolean expLSOR2	=true;
        boolean expLSOR3	=true;
        boolean expLSOR4	=true;
        
        Thread.sleep(2000);
        
		
		System.out.println("************************************* checkLoadingVoucherInformationFromCopyDocumentOnClickOnOkInSalesReturns  ********************************************");
		
		System.out.println("LSOR1 			: "+actLSOR1		+"  Value Expected : "+expLSOR1);
		System.out.println("LSOR2 			: "+actLSOR2		+"  Value Expected : "+expLSOR2);
		System.out.println("LSOR3 			: "+actLSOR3		+"  Value Expected : "+expLSOR3);
		System.out.println("LSOR4 			: "+actLSOR4		+"  Value Expected : "+expLSOR4);
		
		if(actLSOR1==expLSOR1 && actLSOR2==expLSOR2 && actLSOR3==expLSOR3 && actLSOR4==expLSOR4)
		{
			
	    	// First Row
	    	
	    	select1stRow_6thColumn.click();
	    	
	    	Thread.sleep(2000);
	    	
	    	List<WebElement> rowCountInLinkScreen1=LinkRowCount;
			
			int rowCount1=rowCountInLinkScreen1.size();
		
			System.out.println(rowCount1);
			
			for (int i = 1; i <= rowCount1; i++) 
			{
				WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
				String actvoucheno=voucherno.getText();
				System.out.println(actvoucheno);
				
				if(actvoucheno.equalsIgnoreCase("SalInv:6"))
				{
					Thread.sleep(2000);
					WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
					radioBtn.click();
					
					break;
				}

			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
			workFlowOkBtn.click();
			
			Thread.sleep(2000);
			
			select1stRow_9thColumn.click();
			enter_Batch.sendKeys("SEC@SrWa2");
			enter_Batch.sendKeys(Keys.TAB);
			
			// Second Row
			Thread.sleep(2000);
			
			select2ndRow_6thColumn.click();
			
			Thread.sleep(2000);
	    	
	    	List<WebElement> rowCountInLinkScreen2=LinkRowCount;
			
			int rowCount2=rowCountInLinkScreen2.size();
		
			System.out.println(rowCount2);
			
			for (int i = 1; i <= rowCount2; i++) 
			{
				WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
				String actvoucheno=voucherno.getText();
				System.out.println(actvoucheno);
				
				if(actvoucheno.equalsIgnoreCase("SalInv:6"))
				{
					Thread.sleep(2000);
					WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
					radioBtn.click();
					
					break;
				}

			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
			workFlowOkBtn.click();
			
			Thread.sleep(2000);
			
			select2ndRow_10thColumn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchBtn));
			binSearchBtn.click();
			
			Thread.sleep(2000);
			
			binAutoAllocateBtn.click();
			
			Thread.sleep(2000);
			
			binOkBtn.click();
			
			// Third Row
			Thread.sleep(2000);
			
			select3rdRow_6thColumn.click();
			
			Thread.sleep(2000);
	    	
	    	List<WebElement> rowCountInLinkScreen3=LinkRowCount;
			
			int rowCount3=rowCountInLinkScreen3.size();
		
			System.out.println(rowCount3);
			
			for (int i = 1; i <= rowCount3; i++) 
			{
				WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
				String actvoucheno=voucherno.getText();
				System.out.println(actvoucheno);
				
				if(actvoucheno.equalsIgnoreCase("SalInv:6"))
				{
					Thread.sleep(2000);
					WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
					radioBtn.click();
					
					break;
				}

			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
			workFlowOkBtn.click();
			
			Thread.sleep(2000);
			
			select3rdRow_12thColumn.click();
			
			rmaSerialNumberTxtField.sendKeys("RMA@SEC#Sr2");
			
			Thread.sleep(2000);
			
			rmaAddBtn.click();
			
			Thread.sleep(2000);
			
			rmaOkBtn.click();
			
			
			// Fourth Row
			Thread.sleep(2000);
			
			select4thRow_6thColumn.click();
			
			Thread.sleep(2000);
	    	
	    	List<WebElement> rowCountInLinkScreen4=LinkRowCount;
			
			int rowCount4=rowCountInLinkScreen4.size();
		
			System.out.println(rowCount4);
			
			for (int i = 1; i <= rowCount4; i++) 
			{
				WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
				String actvoucheno=voucherno.getText();
				System.out.println(actvoucheno);
				
				if(actvoucheno.equalsIgnoreCase("SalInv:6"))
				{
					Thread.sleep(2000);
					WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
					radioBtn.click();
					
					break;
				}

			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
			workFlowOkBtn.click();
			
			Thread.sleep(3000);
			
			// Fifth row br
			
			select5thRow_6thColumn.click();
			
			Thread.sleep(2000);
	    	
	    	List<WebElement> rowCountInLinkScreen5=LinkRowCount;
			
			int rowCount5=rowCountInLinkScreen5.size();
		
			System.out.println(rowCount5);
			
			for (int i = 1; i <= rowCount5; i++) 
			{
				WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
				String actvoucheno=voucherno.getText();
				System.out.println(actvoucheno);
				
				if(actvoucheno.equalsIgnoreCase("SalInv:6"))
				{
					Thread.sleep(2000);
					WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
					radioBtn.click();
					
					break;
				}

			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
			workFlowOkBtn.click();
			
			Thread.sleep(2000);
			
			
			select5thRow_9thColumn.click();
			
			enter_Batch.sendKeys("SEC@SrBR2");
			enter_Batch.sendKeys(Keys.TAB);
			
			
			return true;
		}
		else
		{
			select1stRow_6thColumn.click();
			
			enter_LSalesInvoice.sendKeys(Keys.SPACE);
			
			Thread.sleep(2000);
			
			workFlowOkBtn.click();
			
			Thread.sleep(2000);
			
			select1stRow_9thColumn.click();
			enter_Batch.sendKeys("SEC@SRWA2");
			enter_Batch.sendKeys(Keys.TAB);
			
			// Second Row
			Thread.sleep(2000);
			
			select2ndRow_6thColumn.click();
			
			enter_LSalesInvoice.sendKeys(Keys.SPACE);
			
			Thread.sleep(2000);
			
			workFlowOkBtn.click();
			
			Thread.sleep(2000);
			
			select2ndRow_10thColumn.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchBtn));
			binSearchBtn.click();
			
			Thread.sleep(2000);
			
			binAutoAllocateBtn.click();
			Thread.sleep(2000);
			
			binOkBtn.click();
			
			// Third Row
			Thread.sleep(2000);
			
			select3rdRow_6thColumn.click();
			
			enter_LSalesInvoice.sendKeys(Keys.SPACE);
			
			Thread.sleep(2000);
			
			workFlowOkBtn.click();	
			
			Thread.sleep(2000);
			
			select3rdRow_12thColumn.click();
			
			rmaSerialNumberTxtField.sendKeys("RMA@SEC#Sr2");
			
			rmaAddBtn.click();
			
			rmaOkBtn.click();
			
			
			// Fourth Row
			Thread.sleep(2000);
			
			select4thRow_6thColumn.click();
			
			enter_LSalesInvoice.sendKeys(Keys.SPACE);
			
			Thread.sleep(2000);
			
			workFlowOkBtn.click();
			
			// Fifith Row
			
			Thread.sleep(3000);
			
			select5thRow_6thColumn.click();
			
			enter_LSalesInvoice.sendKeys(Keys.SPACE);
			
			Thread.sleep(2000);
			
			workFlowOkBtn.click();
			
			Thread.sleep(2000);
			
			select5thRow_9thColumn.click();
			enter_Batch.sendKeys("SEC@SrBR2");
			enter_Batch.sendKeys(Keys.TAB);
			
			return false;
		}
	}
	
	

	public boolean checkSavingSalesReturnsWithAllItemsThroughCopyDocument() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
 		saveBtn.click();
 		
 		Thread.sleep(2000);
	
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(breakUpByTagTab));
 		breakUpByTagTab.click();
 		
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
 		billRefNewReferenceTxt.click();

 		
 		String actBillNewReference,actBillAmtAdjAgainstNewRefInOtherVouchers,actBillTransactionCurrency,actBillBaseCurrency,actBillLocalCurrency,actBillBalanceNewRefAmount,actBillBreakUpByTagDepartment,actBillBreakUpByTagBaseCurrency,actBillBreakUpByTagBillCurrency,actBillBreakUpByTagLocalCurrency,actBillAmtAdjustedInTransactionCurrency,actBillBalanceAmtToBeAdjustedInTransactionCurrency,act13;
 		String expBillNewReference,expBillAmtAdjAgainstNewRefInOtherVouchers,expBillTransactionCurrency,expBillBaseCurrency,expBillLocalCurrency,expBillBalanceNewRefAmount,expBillBreakUpByTagDepartment,expBillBreakUpByTagBaseCurrency,expBillBreakUpByTagBillCurrency,expBillBreakUpByTagLocalCurrency,expBillAmtAdjustedInTransactionCurrency,expBillBalanceAmtToBeAdjustedInTransactionCurrency;
 		
 		actBillNewReference									=billRefNewReferenceTxt.getAttribute("value");
 		actBillAmtAdjAgainstNewRefInOtherVouchers			=amtAdjustedAgainstNewREfinOtherVouchers.getText();
 		actBillTransactionCurrency							=transactionCurency.getText();
 		actBillBaseCurrency									=baseCurrency.getText();
 		actBillLocalCurrency								=localCurrencyDhs.getText();
 		
 		actBillBalanceNewRefAmount							=balanceNewReferenceAmt.getText();
 		
 		actBillBreakUpByTagDepartment						=breakUpByTagDepartment.getText();
 		actBillBreakUpByTagBaseCurrency						=breakUpByTagBaseCurrency.getText();
 		actBillBreakUpByTagBillCurrency						=breakUpByTagBillCurrency.getText();
 		
 		actBillBreakUpByTagLocalCurrency					=breakUpByTagBaseLocalCurrency.getText();
 		actBillAmtAdjustedInTransactionCurrency				=billRefAdjustAmountInTransCurency.getText();
 		actBillBalanceAmtToBeAdjustedInTransactionCurrency	=billRefBalanceAmountAdjustInTrnasCurrency.getText();
 		
 		
 		expBillNewReference									="0.00";
 		expBillAmtAdjAgainstNewRefInOtherVouchers			="0.00";
 		expBillTransactionCurrency							="50.00";
 		expBillBaseCurrency									="50.00";
 		expBillLocalCurrency								="3.50";
 		
 		expBillBalanceNewRefAmount							="0.00";
 		
 		expBillBreakUpByTagDepartment						="INDIA";
 		expBillBreakUpByTagBillCurrency						="50";
 		expBillBreakUpByTagBaseCurrency						="50.00";
 		
 		
 		expBillBreakUpByTagLocalCurrency					="3.50";
 		expBillAmtAdjustedInTransactionCurrency				="0";
 		expBillBalanceAmtToBeAdjustedInTransactionCurrency	="50.00";
 	

 		System.out.println("*********************************** checkSavingSalesReturnsWithAllItemsThroughCopyDocument  ************************************");


 		System.out.println("actBillNewReference								   : "+ actBillNewReference									+" Value Expected : "+expBillNewReference);
 		System.out.println("actBillAmtAdjAgainstNewRefInOtherVouchers		   : "+actBillAmtAdjAgainstNewRefInOtherVouchers			+" Value Expected : "+expBillAmtAdjAgainstNewRefInOtherVouchers);
 		System.out.println("actBillTransactionCurrency						   : "+actBillTransactionCurrency							+" Value Expected : "+expBillTransactionCurrency);
 		System.out.println("actBillBaseCurrency								   : "+actBillBaseCurrency									+" Value Expected : "+ expBillBaseCurrency);
 		System.out.println("actBillLocalCurrency							   : "+actBillLocalCurrency									+" Value Expected : "+expBillLocalCurrency);
 		System.out.println("actBillBalanceNewRefAmount						   : "+ actBillBalanceNewRefAmount							+" Value Expected : "+expBillBalanceNewRefAmount);
        System.out.println("actBillBreakUpByTagDepartment					   : "+actBillBreakUpByTagDepartment						+" Value Expected : "+expBillBreakUpByTagDepartment);
 		System.out.println("actBillBreakUpByTagBaseCurrency				       : "+actBillBreakUpByTagBaseCurrency						+" Value Expected : "+expBillBreakUpByTagBaseCurrency);
 		System.out.println("actBillBreakUpByTagBillCurrency 				   : "+actBillBreakUpByTagBillCurrency						+" Value Expected : "+expBillBreakUpByTagBillCurrency);
 		System.out.println("actBillBreakUpByTagLocalCurrency				   : "+actBillBreakUpByTagLocalCurrency						+" Value Expected : "+expBillBreakUpByTagLocalCurrency);
 		System.out.println("actBillAmtAdjustedInTransactionCurrency			   : "+actBillAmtAdjustedInTransactionCurrency				+" Value Expected : "+expBillAmtAdjustedInTransactionCurrency);
 		System.out.println("actBillBalanceAmtToBeAdjustedInTransactionCurrency : "+actBillBalanceAmtToBeAdjustedInTransactionCurrency	+" Value Expected : "+expBillBalanceAmtToBeAdjustedInTransactionCurrency);
 		
 		   
 	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
	    billRefPickIcon.click();
	   
	    //pick button is click
	   
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(breakUpByTagTab));
 		breakUpByTagTab.click();
 		
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
 		billRefNewReferenceTxt.click();
 		
 		
 		String actBillNewReferencePick,actBillAmtAdjAgainstNewRefInOtherVouchersPick,actBillTransactionCurrencyPick,actBillBaseCurrencyPick,actBillLocalCurrencyPick,actBillBalanceNewRefAmountPick,actBillBreakUpByTagDepartmentPick,actBillBreakUpByTagBaseCurrencyPick,actBillBreakUpByTagBillCurrencyPick,actBillBreakUpByTagLocalCurrencyPick,actBillAmtAdjustedInTransactionCurrencyPick,actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick;
 		String expBillNewReferencePick,expBillAmtAdjAgainstNewRefInOtherVouchersPick,expBillTransactionCurrencyPick,expBillBaseCurrencyPick,expBillLocalCurrencyPick,expBillBalanceNewRefAmountPick,expBillBreakUpByTagDepartmentPick,expBillBreakUpByTagBaseCurrencyPick,expBillBreakUpByTagBillCurrencyPick,expBillBreakUpByTagLocalCurrencyPick,expBillAmtAdjustedInTransactionCurrencyPick,expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick;
 		
 		actBillNewReferencePick									=billRefNewReferenceTxt.getAttribute("value");
 		actBillAmtAdjAgainstNewRefInOtherVouchersPick			=amtAdjustedAgainstNewREfinOtherVouchers.getText();
 		actBillTransactionCurrencyPick							=transactionCurency.getText();
 		actBillBaseCurrencyPick									=baseCurrency.getText();
 		actBillLocalCurrencyPick								=localCurrencyDhs.getText();
 		
 		actBillBalanceNewRefAmountPick							=balanceNewReferenceAmt.getText();
 		
 		actBillBreakUpByTagDepartmentPick						=breakUpByTagDepartment.getText();
 		actBillBreakUpByTagBaseCurrencyPick						=breakUpByTagBaseCurrency.getText();
 		actBillBreakUpByTagBillCurrencyPick						=breakUpByTagBillCurrency.getText();
 		
 		actBillBreakUpByTagLocalCurrencyPick					=breakUpByTagBaseLocalCurrency.getText();
 		actBillAmtAdjustedInTransactionCurrencyPick				=billRefAdjustAmountInTransCurency.getText();
 		actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	=billRefBalanceAmountAdjustInTrnasCurrency.getText();
 		
 		
 		expBillNewReferencePick									="50.00";
 		expBillAmtAdjAgainstNewRefInOtherVouchersPick			="0.00";
 		expBillTransactionCurrencyPick							="50.00";
 		expBillBaseCurrencyPick									="50.00";
 		expBillLocalCurrencyPick								="3.50";
 		
 		expBillBalanceNewRefAmountPick							="50.00";
 		
 		expBillBreakUpByTagDepartmentPick						="INDIA";
 		expBillBreakUpByTagBillCurrencyPick						="50";
 		expBillBreakUpByTagBaseCurrencyPick						="50.00";
 		
 		
 		expBillBreakUpByTagLocalCurrencyPick					="3.50";
 		expBillAmtAdjustedInTransactionCurrencyPick				="50";
 		expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	="0.00";

 		System.out.println("actBillNewReferencePick 								: "+actBillNewReferencePick									+ " Value Expected : "+expBillNewReferencePick);
 		System.out.println("actBillAmtAdjAgainstNewRefInOtherVouchersPick			: " + actBillAmtAdjAgainstNewRefInOtherVouchersPick			+ "	Value Expected : "+expBillAmtAdjAgainstNewRefInOtherVouchersPick);
 		System.out.println("actBillTransactionCurrencyPick							: "+ actBillTransactionCurrencyPick							+ " Value Expected : "+expBillTransactionCurrencyPick);
 		System.out.println("actBillBaseCurrencyPick									: "+ actBillBaseCurrencyPick								+ " Value Expected : "+expBillBaseCurrencyPick);
 		System.out.println("actBillLocalCurrencyPick								: "+ actBillLocalCurrencyPick								+ " Value Expected : "+expBillLocalCurrencyPick);
 		System.out.println("actBillBalanceNewRefAmountPick							: "+ actBillBalanceNewRefAmountPick							+ " Value Expected : "+expBillBalanceNewRefAmountPick);
        System.out.println("actBillBreakUpByTagDepartmentPick						: "+ actBillBreakUpByTagDepartmentPick						+ " Value Expected : "+expBillBreakUpByTagDepartmentPick);
 		System.out.println("actBillBreakUpByTagBaseCurrencyPick						: "+ actBillBreakUpByTagBaseCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagBaseCurrencyPick);
 		System.out.println("actBillBreakUpByTagBillCurrencyPick						: "+ actBillBreakUpByTagBillCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagBillCurrencyPick);
 		System.out.println("actBillBreakUpByTagLocalCurrencyPick					: "+ actBillBreakUpByTagLocalCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagLocalCurrencyPick);
 		System.out.println("actBillAmtAdjustedInTransactionCurrencyPick				: "+ actBillAmtAdjustedInTransactionCurrencyPick			+ " Value Expected : "+expBillAmtAdjustedInTransactionCurrencyPick);
 		System.out.println("actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick  : "+ actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	+ " Value Expected : "+expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick);

 		
 	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
 	    Bill_OkBtn.click();
 	    
 	    boolean savingMessage=checkVoucherSavingMessage(docno);
		
	    System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");;
 	    
 	    
 	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));	
	 	new_CloseBtn.click();
	   
 	 
		
		if(savingMessage==true  &&
				
		        actBillNewReference.equalsIgnoreCase(expBillNewReference) &&
 				actBillAmtAdjAgainstNewRefInOtherVouchers.equalsIgnoreCase(expBillAmtAdjAgainstNewRefInOtherVouchers) &&
 				actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 				
 				actBillBaseCurrency.equalsIgnoreCase(actBillBaseCurrency) &&
 				actBillLocalCurrency.equalsIgnoreCase(actBillLocalCurrency) &&
 				actBillBalanceNewRefAmount.equalsIgnoreCase(actBillBalanceNewRefAmount) &&
 				actBillBreakUpByTagDepartment.equalsIgnoreCase(actBillBreakUpByTagDepartment) &&
 				actBillBreakUpByTagBaseCurrency.equalsIgnoreCase(actBillBreakUpByTagBaseCurrency) &&
 				actBillBreakUpByTagBillCurrency.equalsIgnoreCase(actBillBreakUpByTagBillCurrency) &&
 				actBillBreakUpByTagLocalCurrency.equalsIgnoreCase(actBillBreakUpByTagLocalCurrency) &&
 				actBillAmtAdjustedInTransactionCurrency.equalsIgnoreCase(actBillAmtAdjustedInTransactionCurrency) &&
 				actBillBalanceAmtToBeAdjustedInTransactionCurrency.equalsIgnoreCase(actBillBalanceAmtToBeAdjustedInTransactionCurrency) &&
		
 				
 				actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) &&
 				actBillAmtAdjAgainstNewRefInOtherVouchersPick.equalsIgnoreCase(expBillAmtAdjAgainstNewRefInOtherVouchersPick) &&
 				actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) &&
 				actBillBaseCurrencyPick.equalsIgnoreCase(actBillBaseCurrencyPick) &&
 				actBillLocalCurrencyPick.equalsIgnoreCase(actBillLocalCurrencyPick) &&
 				actBillBalanceNewRefAmountPick.equalsIgnoreCase(actBillBalanceNewRefAmountPick) &&
 				actBillBreakUpByTagDepartmentPick.equalsIgnoreCase(actBillBreakUpByTagDepartmentPick) &&
 				actBillBreakUpByTagBaseCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagBaseCurrencyPick) &&
 				actBillBreakUpByTagBillCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagBillCurrencyPick) &&
 				actBillBreakUpByTagLocalCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagLocalCurrencyPick) &&
 				actBillAmtAdjustedInTransactionCurrencyPick.equalsIgnoreCase(actBillAmtAdjustedInTransactionCurrencyPick) &&
 				actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick.equalsIgnoreCase(actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick))
		{
		
			return true;
			
		}
		else
		{
			return false;
		}
	}
	
	

	public boolean checkSalesReturnsVoucherEntryPageDeleteOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
		getAction().doubleClick(grid_ChkBox1).build().perform();
		
		boolean loading=checkLoadingMessage();
		
		System.out.println("VoucherLoadingMessage  : "+loading +" Value Expected : "+"TRUE");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));
		new_DeleteBtn.click();
		
		getWaitForAlert();
		
		String actAlertMessage=getAlert().getText();
		
		String expAlertMessage="Are you sure that you want to delete the Selected Voucher?";
		
		System.out.println("*********************************** checkSalesReturnsVoucherEntryPageDeleteOption  ************************************");
	
		System.out.println("Alert Message display on Delete the Vocher  :  "+actAlertMessage +"  "+expAlertMessage);
		
		if(actAlertMessage.contains(expAlertMessage))
		{
			System.out.println("Test Pass : Alert Poped After Clicking Delete");
			
			excelReader.setCellData(xlfile, xlSheetName, 64, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Alert NOT Poped After Clicking Delete");
			
			excelReader.setCellData(xlfile, xlSheetName, 64, 9, resFail);
			return false;
		}
	
	}
	
	public boolean checkSalesReturnsVoucherCancelButtonInAlertOnDelete() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getAlert().dismiss();
		
		
		if(getIsAlertPresent()==false)
		{
			excelReader.setCellData(xlfile, xlSheetName, 65, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 65, 9, resFail);
			return false;
		}
	
	}
	
	
	
	public boolean checkSalesReturnsVoucherOkButtonInAlertOnDelete() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));
		new_DeleteBtn.click();
		
		getWaitForAlert();
		
		String actAlertMessage=getAlert().getText();
		
		String expAlertMessage="Are you sure that you want to delete the Selected Voucher?";
		
		System.out.println("*********************************** checkSalesReturnsVoucherOkButtonInAlertOnDelete  ************************************");
	
		System.out.println("Alert Message on Deleteing the Voucher :  "+actAlertMessage +"  "+expAlertMessage);
		
		getAlert().accept();
		
		String ExpMessage="Deleting this document has has resulted in negative stock. Voucher deleted Successfully";
		
		String deleteMessage=checkValidationMessage(ExpMessage);

		System.out.println("Message on Delete Voucher and Click on Ok button  :  "+deleteMessage +" Value Expected : "+ExpMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();
	
		if(actAlertMessage.contains(expAlertMessage) && deleteMessage.equalsIgnoreCase(ExpMessage))
		{
			System.out.println("Test Pass : Deleted Voucher");
			
			excelReader.setCellData(xlfile, xlSheetName, 66, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : NOT Deleted Voucher");
			
			excelReader.setCellData(xlfile, xlSheetName, 66, 9, resFail);
			return false;
		}
	}
	
	
	
	
	
	
	public boolean checkSalesReturnsVoucherCopyAndPasteFromClipBoardOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
		getAction().doubleClick(grid_ChkBox1).build().perform();
		
		boolean loading=checkLoadingMessage();
		
		System.out.println("VoucherLoadingMessage  : "+loading +" Value Expected : "+"TRUE");
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
		toggleBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(copyToClipBoardOption));
		copyToClipBoardOption.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_newBtn));
		new_newBtn.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
		toggleBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pasteFromClipBoardOption));
		pasteFromClipBoardOption.click();
		
		checkUserFriendlyMessage();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();
		
		// Actual
		
        boolean actLSOR1	=select1stRow_6thColumn.getText().isEmpty();
        boolean actLSOR2	=select2ndRow_6thColumn.getText().isEmpty();
        boolean actLSOR3	=select3rdRow_6thColumn.getText().isEmpty();
        boolean actLSOR4	=select4thRow_6thColumn.getText().isEmpty();
        
        // Expected
		
        boolean expLSOR1	=true;
        boolean expLSOR2	=true;
        boolean expLSOR3	=true;
        boolean expLSOR4	=true;
        
        Thread.sleep(2000);
        
		
		System.out.println("************************************* checkSalesReturnsVoucherCopyAndPasteFromClipBoardOptions  ********************************************");
		
		System.out.println("LSOR1 			: "+actLSOR1		+"  Value Expected : "+expLSOR1);
		System.out.println("LSOR2 			: "+actLSOR2		+"  Value Expected : "+expLSOR2);
		System.out.println("LSOR3 			: "+actLSOR3		+"  Value Expected : "+expLSOR3);
		System.out.println("LSOR4 			: "+actLSOR4		+"  Value Expected : "+expLSOR4);
		
		if(actLSOR1==expLSOR1 && actLSOR2==expLSOR2 && actLSOR3==expLSOR3 && actLSOR4==expLSOR4)
		{
			
	    	// First Row
	    	
	    	select1stRow_6thColumn.click();
	    	
	    	Thread.sleep(2000);
	    	
	    	List<WebElement> rowCountInLinkScreen1=LinkRowCount;
			
			int rowCount1=rowCountInLinkScreen1.size();
		
			System.out.println(rowCount1);
			
			for (int i = 1; i <= rowCount1; i++) 
			{
				WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
				String actvoucheno=voucherno.getText();
				System.out.println(actvoucheno);
				
				if(actvoucheno.equalsIgnoreCase("SalInv:6"))
				{
					Thread.sleep(2000);
					WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
					radioBtn.click();
					
					break;
				}

			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
			workFlowOkBtn.click();
			
			Thread.sleep(2000);
			
			select1stRow_9thColumn.click();
			enter_Batch.sendKeys("SEC@SrWa2");
			enter_Batch.sendKeys(Keys.TAB);
			
			// Second Row
			Thread.sleep(2000);
			
			select2ndRow_6thColumn.click();
			
			Thread.sleep(2000);
	    	
	    	List<WebElement> rowCountInLinkScreen2=LinkRowCount;
			
			int rowCount2=rowCountInLinkScreen2.size();
		
			System.out.println(rowCount2);
			
			for (int i = 1; i <= rowCount2; i++) 
			{
				WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
				String actvoucheno=voucherno.getText();
				System.out.println(actvoucheno);
				
				if(actvoucheno.equalsIgnoreCase("SalInv:6"))
				{
					Thread.sleep(2000);
					WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
					radioBtn.click();
					
					break;
				}

			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
			workFlowOkBtn.click();
			
			Thread.sleep(2000);
			
			select2ndRow_10thColumn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchBtn));
			binSearchBtn.click();
			
			Thread.sleep(2000);
			
			binAutoAllocateBtn.click();
			
			Thread.sleep(2000);
			
			binOkBtn.click();
			
			// Third Row
			Thread.sleep(2000);
			
			select3rdRow_6thColumn.click();
			
			Thread.sleep(2000);
	    	
	    	List<WebElement> rowCountInLinkScreen3=LinkRowCount;
			
			int rowCount3=rowCountInLinkScreen3.size();
		
			System.out.println(rowCount3);
			
			for (int i = 1; i <= rowCount3; i++) 
			{
				WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
				String actvoucheno=voucherno.getText();
				System.out.println(actvoucheno);
				
				if(actvoucheno.equalsIgnoreCase("SalInv:6"))
				{
					Thread.sleep(2000);
					WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
					radioBtn.click();
					
					break;
				}

			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
			workFlowOkBtn.click();
			
			Thread.sleep(2000);
			
			select3rdRow_12thColumn.click();
			
			rmaSerialNumberTxtField.sendKeys("RMA@SEC#Sr2");
			
			Thread.sleep(2000);
			
			rmaAddBtn.click();
			
			Thread.sleep(2000);
			
			rmaOkBtn.click();
			
			
			// Fourth Row
			Thread.sleep(2000);
			
			select4thRow_6thColumn.click();
			
			Thread.sleep(2000);
	    	
	    	List<WebElement> rowCountInLinkScreen4=LinkRowCount;
			
			int rowCount4=rowCountInLinkScreen4.size();
		
			System.out.println(rowCount4);
			
			for (int i = 1; i <= rowCount4; i++) 
			{
				WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
				String actvoucheno=voucherno.getText();
				System.out.println(actvoucheno);
				
				if(actvoucheno.equalsIgnoreCase("SalInv:6"))
				{
					Thread.sleep(2000);
					WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
					radioBtn.click();
					
					break;
				}

			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
			workFlowOkBtn.click();
			
			Thread.sleep(3000);
			
			// Fifth row br
			
			select5thRow_6thColumn.click();
			
			Thread.sleep(2000);
	    	
	    	List<WebElement> rowCountInLinkScreen5=LinkRowCount;
			
			int rowCount5=rowCountInLinkScreen5.size();
		
			System.out.println(rowCount5);
			
			for (int i = 1; i <= rowCount5; i++) 
			{
				WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
				String actvoucheno=voucherno.getText();
				System.out.println(actvoucheno);
				
				if(actvoucheno.equalsIgnoreCase("SalInv:6"))
				{
					Thread.sleep(2000);
					WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
					radioBtn.click();
					
					break;
				}

			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
			workFlowOkBtn.click();
			
			Thread.sleep(2000);
			
			
			select5thRow_9thColumn.click();
			
			enter_Batch.sendKeys("SEC@SrBR2");
			enter_Batch.sendKeys(Keys.TAB);
			
			
			return true;
		}
		else
		{
			select1stRow_6thColumn.click();
			
			enter_LSalesInvoice.sendKeys(Keys.SPACE);
			
			Thread.sleep(2000);
			
			workFlowOkBtn.click();
			
			Thread.sleep(2000);
			
			select1stRow_9thColumn.click();
			enter_Batch.sendKeys("SEC@SRWA2");
			enter_Batch.sendKeys(Keys.TAB);
			
			// Second Row
			Thread.sleep(2000);
			
			select2ndRow_6thColumn.click();
			
			enter_LSalesInvoice.sendKeys(Keys.SPACE);
			
			Thread.sleep(2000);
			
			workFlowOkBtn.click();
			
			Thread.sleep(2000);
			
			select2ndRow_10thColumn.click();

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchBtn));
			binSearchBtn.click();
			
			Thread.sleep(2000);
			
			binAutoAllocateBtn.click();
			Thread.sleep(2000);
			
			binOkBtn.click();
			
			// Third Row
			Thread.sleep(2000);
			
			select3rdRow_6thColumn.click();
			
			enter_LSalesInvoice.sendKeys(Keys.SPACE);
			
			Thread.sleep(2000);
			
			workFlowOkBtn.click();	
			
			Thread.sleep(2000);
			
			select3rdRow_12thColumn.click();
			
			rmaSerialNumberTxtField.sendKeys("RMA@SEC#Sr2");
			
			rmaAddBtn.click();
			
			rmaOkBtn.click();
			
			
			// Fourth Row
			Thread.sleep(2000);
			
			select4thRow_6thColumn.click();
			
			enter_LSalesInvoice.sendKeys(Keys.SPACE);
			
			Thread.sleep(2000);
			
			workFlowOkBtn.click();
			
			// Fifith Row
			
			Thread.sleep(3000);
			
			select5thRow_6thColumn.click();
			
			enter_LSalesInvoice.sendKeys(Keys.SPACE);
			
			Thread.sleep(2000);
			
			workFlowOkBtn.click();
			
			Thread.sleep(2000);
			
			select5thRow_9thColumn.click();
			enter_Batch.sendKeys("SEC@SrBR2");
			enter_Batch.sendKeys(Keys.TAB);
			
			return false;
		}
	}
	
	
	
	
	

	public boolean checkSavingSalesReturnsWithAllItemsThroughCopyAndPasteFromClipBoard() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
 		saveBtn.click();
 		
 		Thread.sleep(2000);
	
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(breakUpByTagTab));
 		breakUpByTagTab.click();
 		
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
 		billRefNewReferenceTxt.click();

 		
 		String actBillNewReference,actBillAmtAdjAgainstNewRefInOtherVouchers,actBillTransactionCurrency,actBillBaseCurrency,actBillLocalCurrency,actBillBalanceNewRefAmount,actBillBreakUpByTagDepartment,actBillBreakUpByTagBaseCurrency,actBillBreakUpByTagBillCurrency,actBillBreakUpByTagLocalCurrency,actBillAmtAdjustedInTransactionCurrency,actBillBalanceAmtToBeAdjustedInTransactionCurrency,act13;
 		String expBillNewReference,expBillAmtAdjAgainstNewRefInOtherVouchers,expBillTransactionCurrency,expBillBaseCurrency,expBillLocalCurrency,expBillBalanceNewRefAmount,expBillBreakUpByTagDepartment,expBillBreakUpByTagBaseCurrency,expBillBreakUpByTagBillCurrency,expBillBreakUpByTagLocalCurrency,expBillAmtAdjustedInTransactionCurrency,expBillBalanceAmtToBeAdjustedInTransactionCurrency;
 		
 		actBillNewReference									=billRefNewReferenceTxt.getAttribute("value");
 		actBillAmtAdjAgainstNewRefInOtherVouchers			=amtAdjustedAgainstNewREfinOtherVouchers.getText();
 		actBillTransactionCurrency							=transactionCurency.getText();
 		actBillBaseCurrency									=baseCurrency.getText();
 		actBillLocalCurrency								=localCurrencyDhs.getText();
 		
 		actBillBalanceNewRefAmount							=balanceNewReferenceAmt.getText();
 		
 		actBillBreakUpByTagDepartment						=breakUpByTagDepartment.getText();
 		actBillBreakUpByTagBaseCurrency						=breakUpByTagBaseCurrency.getText();
 		actBillBreakUpByTagBillCurrency						=breakUpByTagBillCurrency.getText();
 		
 		actBillBreakUpByTagLocalCurrency					=breakUpByTagBaseLocalCurrency.getText();
 		actBillAmtAdjustedInTransactionCurrency				=billRefAdjustAmountInTransCurency.getText();
 		actBillBalanceAmtToBeAdjustedInTransactionCurrency	=billRefBalanceAmountAdjustInTrnasCurrency.getText();
 		
 		
 		expBillNewReference									="0.00";
 		expBillAmtAdjAgainstNewRefInOtherVouchers			="0.00";
 		expBillTransactionCurrency							="50.00";
 		expBillBaseCurrency									="50.00";
 		expBillLocalCurrency								="3.50";
 		
 		expBillBalanceNewRefAmount							="0.00";
 		
 		expBillBreakUpByTagDepartment						="INDIA";
 		expBillBreakUpByTagBillCurrency						="50";
 		expBillBreakUpByTagBaseCurrency						="50.00";
 		
 		
 		expBillBreakUpByTagLocalCurrency					="3.50";
 		expBillAmtAdjustedInTransactionCurrency				="0";
 		expBillBalanceAmtToBeAdjustedInTransactionCurrency	="50.00";
 	

 		System.out.println("*********************************** checkSavingSalesReturnsWithAllItemsThroughCopyAndPasteFromClipBoard  ************************************");


 		System.out.println("actBillNewReference								   : "+ actBillNewReference									+" Value Expected : "+expBillNewReference);
 		System.out.println("actBillAmtAdjAgainstNewRefInOtherVouchers		   : "+actBillAmtAdjAgainstNewRefInOtherVouchers			+" Value Expected : "+expBillAmtAdjAgainstNewRefInOtherVouchers);
 		System.out.println("actBillTransactionCurrency						   : "+actBillTransactionCurrency							+" Value Expected : "+expBillTransactionCurrency);
 		System.out.println("actBillBaseCurrency								   : "+actBillBaseCurrency									+" Value Expected : "+ expBillBaseCurrency);
 		System.out.println("actBillLocalCurrency							   : "+actBillLocalCurrency									+" Value Expected : "+expBillLocalCurrency);
 		System.out.println("actBillBalanceNewRefAmount						   : "+ actBillBalanceNewRefAmount							+" Value Expected : "+expBillBalanceNewRefAmount);
        System.out.println("actBillBreakUpByTagDepartment					   : "+actBillBreakUpByTagDepartment						+" Value Expected : "+expBillBreakUpByTagDepartment);
 		System.out.println("actBillBreakUpByTagBaseCurrency				       : "+actBillBreakUpByTagBaseCurrency						+" Value Expected : "+expBillBreakUpByTagBaseCurrency);
 		System.out.println("actBillBreakUpByTagBillCurrency 				   : "+actBillBreakUpByTagBillCurrency						+" Value Expected : "+expBillBreakUpByTagBillCurrency);
 		System.out.println("actBillBreakUpByTagLocalCurrency				   : "+actBillBreakUpByTagLocalCurrency						+" Value Expected : "+expBillBreakUpByTagLocalCurrency);
 		System.out.println("actBillAmtAdjustedInTransactionCurrency			   : "+actBillAmtAdjustedInTransactionCurrency				+" Value Expected : "+expBillAmtAdjustedInTransactionCurrency);
 		System.out.println("actBillBalanceAmtToBeAdjustedInTransactionCurrency : "+actBillBalanceAmtToBeAdjustedInTransactionCurrency	+" Value Expected : "+expBillBalanceAmtToBeAdjustedInTransactionCurrency);
 		
 		   
 	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
	    billRefPickIcon.click();
	   
	    //pick button is click
	   
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(breakUpByTagTab));
 		breakUpByTagTab.click();
 		
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
 		billRefNewReferenceTxt.click();
 		
 		
 		String actBillNewReferencePick,actBillAmtAdjAgainstNewRefInOtherVouchersPick,actBillTransactionCurrencyPick,actBillBaseCurrencyPick,actBillLocalCurrencyPick,actBillBalanceNewRefAmountPick,actBillBreakUpByTagDepartmentPick,actBillBreakUpByTagBaseCurrencyPick,actBillBreakUpByTagBillCurrencyPick,actBillBreakUpByTagLocalCurrencyPick,actBillAmtAdjustedInTransactionCurrencyPick,actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick;
 		String expBillNewReferencePick,expBillAmtAdjAgainstNewRefInOtherVouchersPick,expBillTransactionCurrencyPick,expBillBaseCurrencyPick,expBillLocalCurrencyPick,expBillBalanceNewRefAmountPick,expBillBreakUpByTagDepartmentPick,expBillBreakUpByTagBaseCurrencyPick,expBillBreakUpByTagBillCurrencyPick,expBillBreakUpByTagLocalCurrencyPick,expBillAmtAdjustedInTransactionCurrencyPick,expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick;
 		
 		actBillNewReferencePick									=billRefNewReferenceTxt.getAttribute("value");
 		actBillAmtAdjAgainstNewRefInOtherVouchersPick			=amtAdjustedAgainstNewREfinOtherVouchers.getText();
 		actBillTransactionCurrencyPick							=transactionCurency.getText();
 		actBillBaseCurrencyPick									=baseCurrency.getText();
 		actBillLocalCurrencyPick								=localCurrencyDhs.getText();
 		
 		actBillBalanceNewRefAmountPick							=balanceNewReferenceAmt.getText();
 		
 		actBillBreakUpByTagDepartmentPick						=breakUpByTagDepartment.getText();
 		actBillBreakUpByTagBaseCurrencyPick						=breakUpByTagBaseCurrency.getText();
 		actBillBreakUpByTagBillCurrencyPick						=breakUpByTagBillCurrency.getText();
 		
 		actBillBreakUpByTagLocalCurrencyPick					=breakUpByTagBaseLocalCurrency.getText();
 		actBillAmtAdjustedInTransactionCurrencyPick				=billRefAdjustAmountInTransCurency.getText();
 		actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	=billRefBalanceAmountAdjustInTrnasCurrency.getText();
 		
 		
 		expBillNewReferencePick									="50.00";
 		expBillAmtAdjAgainstNewRefInOtherVouchersPick			="0.00";
 		expBillTransactionCurrencyPick							="50.00";
 		expBillBaseCurrencyPick									="50.00";
 		expBillLocalCurrencyPick								="3.50";
 		
 		expBillBalanceNewRefAmountPick							="50.00";
 		
 		expBillBreakUpByTagDepartmentPick						="INDIA";
 		expBillBreakUpByTagBillCurrencyPick						="50";
 		expBillBreakUpByTagBaseCurrencyPick						="50.00";
 		
 		
 		expBillBreakUpByTagLocalCurrencyPick					="3.50";
 		expBillAmtAdjustedInTransactionCurrencyPick				="50";
 		expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	="0.00";

 		System.out.println("actBillNewReferencePick 								: "+actBillNewReferencePick									+ " Value Expected : "+expBillNewReferencePick);
 		System.out.println("actBillAmtAdjAgainstNewRefInOtherVouchersPick			: " + actBillAmtAdjAgainstNewRefInOtherVouchersPick			+ "	Value Expected : "+expBillAmtAdjAgainstNewRefInOtherVouchersPick);
 		System.out.println("actBillTransactionCurrencyPick							: "+ actBillTransactionCurrencyPick							+ " Value Expected : "+expBillTransactionCurrencyPick);
 		System.out.println("actBillBaseCurrencyPick									: "+ actBillBaseCurrencyPick								+ " Value Expected : "+expBillBaseCurrencyPick);
 		System.out.println("actBillLocalCurrencyPick								: "+ actBillLocalCurrencyPick								+ " Value Expected : "+expBillLocalCurrencyPick);
 		System.out.println("actBillBalanceNewRefAmountPick							: "+ actBillBalanceNewRefAmountPick							+ " Value Expected : "+expBillBalanceNewRefAmountPick);
        System.out.println("actBillBreakUpByTagDepartmentPick						: "+ actBillBreakUpByTagDepartmentPick						+ " Value Expected : "+expBillBreakUpByTagDepartmentPick);
 		System.out.println("actBillBreakUpByTagBaseCurrencyPick						: "+ actBillBreakUpByTagBaseCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagBaseCurrencyPick);
 		System.out.println("actBillBreakUpByTagBillCurrencyPick						: "+ actBillBreakUpByTagBillCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagBillCurrencyPick);
 		System.out.println("actBillBreakUpByTagLocalCurrencyPick					: "+ actBillBreakUpByTagLocalCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagLocalCurrencyPick);
 		System.out.println("actBillAmtAdjustedInTransactionCurrencyPick				: "+ actBillAmtAdjustedInTransactionCurrencyPick			+ " Value Expected : "+expBillAmtAdjustedInTransactionCurrencyPick);
 		System.out.println("actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick  : "+ actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	+ " Value Expected : "+expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick);

 		
 	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
 	    Bill_OkBtn.click();
	   
 	    boolean savingMessage=checkVoucherSavingMessage(docno);
		
 	    System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
 	    
 	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));	
		new_CloseBtn.click();
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));	
		voucherhomeCloseBtn.click();
		
		if(savingMessage==true  &&
				
		        actBillNewReference.equalsIgnoreCase(expBillNewReference) &&
 				actBillAmtAdjAgainstNewRefInOtherVouchers.equalsIgnoreCase(expBillAmtAdjAgainstNewRefInOtherVouchers) &&
 				actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 				
 				actBillBaseCurrency.equalsIgnoreCase(actBillBaseCurrency) &&
 				actBillLocalCurrency.equalsIgnoreCase(actBillLocalCurrency) &&
 				actBillBalanceNewRefAmount.equalsIgnoreCase(actBillBalanceNewRefAmount) &&
 				actBillBreakUpByTagDepartment.equalsIgnoreCase(actBillBreakUpByTagDepartment) &&
 				actBillBreakUpByTagBaseCurrency.equalsIgnoreCase(actBillBreakUpByTagBaseCurrency) &&
 				actBillBreakUpByTagBillCurrency.equalsIgnoreCase(actBillBreakUpByTagBillCurrency) &&
 				actBillBreakUpByTagLocalCurrency.equalsIgnoreCase(actBillBreakUpByTagLocalCurrency) &&
 				actBillAmtAdjustedInTransactionCurrency.equalsIgnoreCase(actBillAmtAdjustedInTransactionCurrency) &&
 				actBillBalanceAmtToBeAdjustedInTransactionCurrency.equalsIgnoreCase(actBillBalanceAmtToBeAdjustedInTransactionCurrency) &&
		
 				
 				actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) &&
 				actBillAmtAdjAgainstNewRefInOtherVouchersPick.equalsIgnoreCase(expBillAmtAdjAgainstNewRefInOtherVouchersPick) &&
 				actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) &&
 				actBillBaseCurrencyPick.equalsIgnoreCase(actBillBaseCurrencyPick) &&
 				actBillLocalCurrencyPick.equalsIgnoreCase(actBillLocalCurrencyPick) &&
 				actBillBalanceNewRefAmountPick.equalsIgnoreCase(actBillBalanceNewRefAmountPick) &&
 				actBillBreakUpByTagDepartmentPick.equalsIgnoreCase(actBillBreakUpByTagDepartmentPick) &&
 				actBillBreakUpByTagBaseCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagBaseCurrencyPick) &&
 				actBillBreakUpByTagBillCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagBillCurrencyPick) &&
 				actBillBreakUpByTagLocalCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagLocalCurrencyPick) &&
 				actBillAmtAdjustedInTransactionCurrencyPick.equalsIgnoreCase(actBillAmtAdjustedInTransactionCurrencyPick) &&
 				actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick.equalsIgnoreCase(actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick))
		{
		
			return true;
			
		}
		else
		{
			return false;
		}
	}
	
	
	
	
	
	// sales Order After Sales Returns
	
	
	
	

	public boolean checkSavingSalesOrderVoucherAfterSalesReturnsWithAllItemsInSecunderabadForCustomerA() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		checkUserFriendlyMessage();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);
		
		int customercount=customerAccountListCount.size();
		
		System.err.println(customercount);
		
		for(int i=0 ; i < customercount ;i++)
		{
			String data=customerAccountListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("Customer A"))
			{
				customerAccountListCount.get(i).click();
				
				break;
			}
		}
			
		customerAccountTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.SPACE);
			
		int warehousecount=pvwareHouseListCount.size();
		
		System.err.println(warehousecount);
			
		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=pvwareHouseListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("SECUNDERABAD"))
			{
				pvwareHouseListCount.get(i).click();
				
				break;
			}
		}
			
		pvWareHouseTxt.sendKeys(Keys.TAB);
        
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("STOCK ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("1");
		Thread.sleep(2000);
		so_enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockRes_QtyToReserveRow1));
		stockRes_QtyToReserveRow1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
		res_PickBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
        
		// Second Row Batch Br Item
		
		Thread.sleep(2000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys(Keys.TAB);
        
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount2=itemListCount.size();
		
		System.err.println(itemcount2);
			
		for(int i=0 ; i < itemcount2 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("BATCH BR ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_5thColumn));
		select2ndRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		Thread.sleep(2000);
		so_enter_AQTxt.sendKeys("1");
		so_enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchRes_Row1Index));
		batchRes_Row1Index.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
		res_PickBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		
		
		// Third Row BAtch Wa Item
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys(Keys.TAB);
        
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount3=itemListCount.size();
		
		System.err.println(itemcount3);
			
		for(int i=0 ; i < itemcount3 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("BATCH WA ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_5thColumn));
		select3rdRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("1");
		Thread.sleep(2000);
		so_enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchRes_Row1Index));
		batchRes_Row1Index.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
		res_PickBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
	
		// Fourth Row Bin Finished Goods Item
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys(Keys.TAB);
        
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount4=itemListCount.size();
		
		System.err.println(itemcount4);
			
		for(int i=0 ; i < itemcount4 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("BIN FINISHED GOODS ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_5thColumn));
		select4thRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("1");
		Thread.sleep(2000);
		so_enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binRes_QtyToReserveRow1));
		binRes_QtyToReserveRow1.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
		res_PickBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		// Fifth Row Rma RItem
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys(Keys.TAB);
        
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount5=itemListCount.size();
		
		System.err.println(itemcount5);
			
		for(int i=0 ; i < itemcount5 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("RMA RITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_5thColumn));
		select5thRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("1");
		Thread.sleep(2000);
		so_enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaRes_SelectedRow4));
		rmaRes_SelectedRow4.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
		res_PickBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");
		
		Thread.sleep(3000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		String ExpMessage="This Transaction will make the Stock Negative";
		
		String validationMessage=checkValidationMessage(ExpMessage);
		
		boolean savingMessage=checkVoucherSavingMessage(docno);
		
		System.out.println("************************************* checkSavingSalesOrderVoucherAfterSalesReturnsWithAllItemsInSecunderabadForCustomerA  ********************************************");
		
		System.out.println("validationMessage  	:  "+validationMessage +" Value Expected : "+ExpMessage);
		
		System.out.println("SavingMessage  		:  "+savingMessage +" Value Expected : "+"TRUE");
		
		if(validationMessage.equalsIgnoreCase(ExpMessage) && savingMessage==true)
		{
			System.out.println("Test Pass : Error Message is Displayed ");
			excelReader.setCellData(xlfile, xlSheetName, 11, 9, resPass);
			
					
			return true;
		}
		
		else
		{
			System.out.println("Test Fail :  Error Message is  not Displayed ");
		     excelReader.setCellData(xlfile, xlSheetName, 11, 9, resFail);
			
			
			return false;
		}
	}
	
	
	
	
	
	

	
	public boolean checkSuspendingSalesOrderVoucherAfterSalesReturnOnPrevious() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();
		
		boolean loading=checkLoadingMessage();
		
		System.out.println("VoucherLoadingMessage  : "+loading +" Value Expected : "+"TRUE");
		
		Thread.sleep(5000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	    String docno=documentNumberTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();
		
		boolean suspendMessage=checkVoucherSavingMessage(docno);
			
		System.out.println("************************************* checkSuspendingSalesOrderVoucherAfterSalesReturnOnPrevious  *********************************");
		
		System.out.println("SavingMessage  :  "+suspendMessage +" Value Expected : "+"TRUE");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();
		
		if(suspendMessage==true)
		{
			System.out.println("Test Pass : Error Message is Displayed ");
			excelReader.setCellData(xlfile, xlSheetName, 11, 9, resPass);
			
			return true;
		}
		
		else
		{
			System.out.println("Test Fail :  Error Message is  not Displayed ");
		     excelReader.setCellData(xlfile, xlSheetName, 11, 9, resFail);
			
			return false;
		}
	}
	


	
	
	
	
	

	public boolean checkSavingSalesOrderVoucherAfterSuspendPreviousvoucherAfterSalesReturn() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		/*Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();*/
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		checkUserFriendlyMessage();  
		
        
        Thread.sleep(3000);
		
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
        customerAccountTxt.click();
        customerAccountTxt.sendKeys(Keys.SPACE);
        
        int customercount=customerAccountListCount.size();
        
        System.err.println(customercount);
        
        for(int i=0 ; i < customercount ;i++)
        {
        	String data=customerAccountListCount.get(i).getAttribute("data-name");
        	
        	if(data.equalsIgnoreCase("Customer A"))
        	{
        		customerAccountListCount.get(i).click();
        		
        		break;
        	}
        }
			
        customerAccountTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.SPACE);
			
		int warehousecount=pvwareHouseListCount.size();
		
		System.err.println(warehousecount);
			
		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=pvwareHouseListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("SECUNDERABAD"))
			{
				pvwareHouseListCount.get(i).click();
				
				break;
			}
		}
			
		pvWareHouseTxt.sendKeys(Keys.TAB);
        
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("STOCK ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("1");
		Thread.sleep(2000);
		so_enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockRes_QtyToReserveRow1));
		stockRes_QtyToReserveRow1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
		res_PickBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
        
		// Second Row Batch Br Item
		
		Thread.sleep(2000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys(Keys.TAB);
        
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount2=itemListCount.size();
		
		System.err.println(itemcount2);
			
		for(int i=0 ; i < itemcount2 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("BATCH BR ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_5thColumn));
		select2ndRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		Thread.sleep(2000);
		so_enter_AQTxt.sendKeys("1");
		so_enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchRes_Row1Index));
		batchRes_Row1Index.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
		res_PickBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		
		
		// Third Row BAtch Wa Item
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys(Keys.TAB);
        
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.SPACE);
		Thread.sleep(2000);
		
		int itemcount3=itemListCount.size();
		
		System.err.println(itemcount3);
			
		for(int i=0 ; i < itemcount3 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("BATCH WA ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_5thColumn));
		select3rdRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("1");
		Thread.sleep(2000);
		so_enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchRes_Row1Index));
		batchRes_Row1Index.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
		res_PickBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
	
		// Fourth Row Bin Finished Goods Item
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys(Keys.TAB);
        
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.SPACE);
		Thread.sleep(2000);
		
		int itemcount4=itemListCount.size();
		
		System.err.println(itemcount4);
			
		for(int i=0 ; i < itemcount4 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("BIN FINISHED GOODS ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_5thColumn));
		select4thRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("1");
		Thread.sleep(2000);
		so_enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binRes_QtyToReserveRow1));
		binRes_QtyToReserveRow1.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
		res_PickBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		// Fifth Row Rma RItem
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys(Keys.TAB);
        
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.SPACE);
		Thread.sleep(2000);
		
		int itemcount5=itemListCount.size();
		
		System.err.println(itemcount5);
			
		for(int i=0 ; i < itemcount5 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("RMA RITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_5thColumn));
		select5thRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("1");
		Thread.sleep(2000);
		so_enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaRes_SelectedRow4));
		rmaRes_SelectedRow4.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
		res_PickBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");
		
		Thread.sleep(3000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		String ExpMessage="This Transaction will make the Stock Negative";
		
		String validationMessage=checkValidationMessage(ExpMessage);
		
		boolean savingMessage=checkVoucherSavingMessage(docno);
		
		System.out.println("************************************* checkSavingSalesOrderVoucherAfterSuspendPreviousvoucherAfterSalesReturn  ********************************************");
		
		System.out.println("validationMessage  	:  "+validationMessage +" Value Expected : "+ExpMessage);
		
		System.out.println("SavingMessage  		:  "+savingMessage +" Value Expected : "+"TRUE");
		
		if(validationMessage.equalsIgnoreCase(ExpMessage) && savingMessage==true)
		{
			System.out.println("Test Pass : Error Message is Displayed ");
			excelReader.setCellData(xlfile, xlSheetName, 11, 9, resPass);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			
					
			return true;
		}
		
		else
		{
			System.out.println("Test Fail :  Error Message is  not Displayed ");
			excelReader.setCellData(xlfile, xlSheetName, 11, 9, resFail);
		     
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click(); 
		     
			
			
			return false;
		}
	}
	
	
	
	
	
	
	
	
	
	// Sales Invoice After Sales Returns
	
	

	public boolean checkReleaseAfterSalesReturnsThroughReserveLinks() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
		finacinalsMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialTransactionSalesMenu));
		financialTransactionSalesMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoicesVoucher));
		salesInvoicesVoucher.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		checkUserFriendlyMessage();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAccountTxt));
		salesAccountTxt.click();
		salesAccountTxt.sendKeys(Keys.SPACE);
		
		int count=salesAccountListCount.size();
		
		System.err.println(count);
		
		for(int i=0 ; i < count ;i++)
		{
			String data=salesAccountListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("Sales - Computers"))
			{
				salesAccountListCount.get(i).click();
				
				break;
			}
		}
		
		salesAccountTxt.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.END);
		Thread.sleep(2000);
		customerAccountTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		Thread.sleep(2000);
		customerAccountTxt.sendKeys(Keys.SPACE);
		 
	  	int customercount=customerAccountListCount.size();
	  	
	  	System.err.println(customercount);
	  	
	  	for(int i=0 ; i < customercount ;i++)
	  	{
	  		String data=customerAccountListCount.get(i).getAttribute("data-name");
	  		
	  		if(data.equalsIgnoreCase("Customer A"))
	  		{
	  			customerAccountListCount.get(i).click();
	  			
	  			break;
	  		}
	  	}
				
	  	customerAccountTxt.sendKeys(Keys.TAB);
	
	  	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.click();
		departmentTxt.sendKeys(Keys.SPACE);
			
		int departmentcount=departmentListCount.size();
		
		System.err.println(departmentcount);
			
		for(int i=0 ; i < departmentcount ;i++)
		{
			String data=departmentListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("INDIA"))
			{
				departmentListCount.get(i).click();
				
				break;
			}
		}
			
		departmentTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
		wareHouseTxt.click();
		wareHouseTxt.sendKeys(Keys.SPACE);
			
		int warehousecount=wareHouseListCount.size();
		
		System.err.println(warehousecount);
			
		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=wareHouseListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("SECUNDERABAD"))
			{
				wareHouseListCount.get(i).click();
				
				break;
			}
		}
			
		wareHouseTxt.sendKeys(Keys.TAB);
	
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		workFlowExpandBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowSearchTxtCL));
		workFlowSearchTxtCL.click();
		workFlowSearchTxtCL.sendKeys("SalOrd:13");
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBoxCL));
		workFlowHeaderChkBoxCL.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();
		
		Thread.sleep(2000);
		
		// 2nd Row batch br
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_13thColumn));
		select2ndRow_13thColumn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();
	
	
		// 3rd Row batch WA
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_13thColumn));
		select3rdRow_13thColumn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();
	
		// 4th Row bin
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_14thColumn));
		select4thRow_14thColumn.click();
		
Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchBtn));
		binSearchBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
		binAutoAllocateBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
		binOkBtn.click();
		
		// 5th row rma
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_15thColumn));
		select5thRow_15thColumn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardExpandBtn));
		rmaoutwardExpandBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMA4ChkBox));
		searchRMA4ChkBox.click();
	
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAOkBtn));
		searchRMAOkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardOkBtn));
		rmaoutwardOkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();
		
		String ExpMessage="This Transaction will make the Stock Negative";
		
		String validationMessage=checkValidationMessage(ExpMessage);
		
		boolean savingMessage=checkVoucherSavingMessage(docno);
		
		System.out.println("************************************* checkReleaseAfterSalesReturnsThroughReserveLinks  ********************************************");
		
		System.out.println("validationMessage  	:  "+validationMessage +" Value Expected : "+ExpMessage);
		
		System.out.println("SavingMessage  		:  "+savingMessage +" Value Expected : "+"TRUE");
		
		if(validationMessage.equalsIgnoreCase(ExpMessage) && savingMessage==true)
		{
			System.out.println("Voucher Saved");
			excelReader.setCellData(xlfile, xlSheetName, 256, 9, resPass);
			
			
			return true;
		}
		else
		{
			System.out.println("Voucher Not Saved");
			
			excelReader.setCellData(xlfile, xlSheetName, 256, 9, resFail);
			
			return false;
		}
	}
	
	

	

	
	public boolean checkSuspendingSalesInvoiceVoucherAfterSalesReturnOnPrevious() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();
		
		boolean loading=checkLoadingMessage();
		
		System.out.println("VoucherLoadingMessage  : "+loading +" Value Expected : "+"TRUE");
		
		Thread.sleep(5000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	    String docno=documentNumberTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();
		
		boolean suspendMessage=checkVoucherSavingMessage(docno);
			
		System.out.println("************************************* checkSuspendingSalesInvoiceVoucherAfterSalesReturnOnPrevious  *********************************");
		
		System.out.println("SavingMessage  :  "+suspendMessage +" Value Expected : "+"TRUE");
		
		if(suspendMessage==true)
		{
			System.out.println("Test Pass : Error Message is Displayed ");
			excelReader.setCellData(xlfile, xlSheetName, 11, 9, resPass);
			
			return true;
		}
		
		else
		{
			System.out.println("Test Fail :  Error Message is  not Displayed ");
		     excelReader.setCellData(xlfile, xlSheetName, 11, 9, resFail);
			
			return false;
		}
	}
	

	
	

	public boolean checkReleaseOnSupendingPreviousVoucherAfterSalesReturnsThroughReserveLinks() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
		/*Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
		finacinalsMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialTransactionSalesMenu));
		financialTransactionSalesMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoicesVoucher));
		salesInvoicesVoucher.click();
			
		Thread.sleep(5000);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		checkUserFriendlyMessage();  */
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAccountTxt));
		salesAccountTxt.click();
		salesAccountTxt.sendKeys(Keys.SPACE);
		
		int count=salesAccountListCount.size();
		
		System.err.println(count);
		
		for(int i=0 ; i < count ;i++)
		{
			String data=salesAccountListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("Sales - Computers"))
			{
				salesAccountListCount.get(i).click();
				
				break;
			}
		}
		
		salesAccountTxt.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.END);
		Thread.sleep(2000);
		customerAccountTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		Thread.sleep(2000);
		customerAccountTxt.sendKeys(Keys.SPACE);
		 
	  	int customercount=customerAccountListCount.size();
	  	
	  	System.err.println(customercount);
	  	
	  	for(int i=0 ; i < customercount ;i++)
	  	{
	  		String data=customerAccountListCount.get(i).getAttribute("data-name");
	  		
	  		if(data.equalsIgnoreCase("Customer A"))
	  		{
	  			customerAccountListCount.get(i).click();
	  			
	  			break;
	  		}
	  	}
				
	  	customerAccountTxt.sendKeys(Keys.TAB);
	
	  	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.click();
		departmentTxt.sendKeys(Keys.SPACE);
			
		int departmentcount=departmentListCount.size();
		
		System.err.println(departmentcount);
			
		for(int i=0 ; i < departmentcount ;i++)
		{
			String data=departmentListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("INDIA"))
			{
				departmentListCount.get(i).click();
				
				break;
			}
		}
			
		departmentTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
		wareHouseTxt.click();
		wareHouseTxt.sendKeys(Keys.SPACE);
			
		int warehousecount=wareHouseListCount.size();
		
		System.err.println(warehousecount);
			
		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=wareHouseListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("SECUNDERABAD"))
			{
				wareHouseListCount.get(i).click();
				
				break;
			}
		}
			
		wareHouseTxt.sendKeys(Keys.TAB);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		workFlowExpandBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowSearchTxtCL));
		workFlowSearchTxtCL.click();
		workFlowSearchTxtCL.sendKeys("SalOrd:13");
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBoxCL));
		workFlowHeaderChkBoxCL.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();
		
		Thread.sleep(2000);
		
		// 2nd Row batch br
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_13thColumn));
		select2ndRow_13thColumn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();
	
	
		// 3rd Row batch WA
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_13thColumn));
		select3rdRow_13thColumn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();
	
		// 4th Row bin
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_14thColumn));
		select4thRow_14thColumn.click();
		
Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchBtn));
		binSearchBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
		binAutoAllocateBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
		binOkBtn.click();
		
		// 5th row rma
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_15thColumn));
		select5thRow_15thColumn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardExpandBtn));
		rmaoutwardExpandBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMA4ChkBox));
		searchRMA4ChkBox.click();
	
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAOkBtn));
		searchRMAOkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardOkBtn));
		rmaoutwardOkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();
		
		String ExpMessage="This Transaction will make the Stock Negative";
		
		String validationMessage=checkValidationMessage(ExpMessage);
		
		boolean savingMessage=checkVoucherSavingMessage(docno);
		
		System.out.println("************************************* checkReleaseOnSupendingPreviousVoucherAfterSalesReturnsThroughReserveLinks  ********************************************");
		
		System.out.println("validationMessage  	:  "+validationMessage +" Value Expected : "+ExpMessage);
		
		System.out.println("SavingMessage  		:  "+savingMessage +" Value Expected : "+"TRUE");
		
		if(validationMessage.equalsIgnoreCase(ExpMessage) && savingMessage==true)
		{
			System.out.println("Voucher Saved");
			excelReader.setCellData(xlfile, xlSheetName, 256, 9, resPass);
			
			
			return true;
		}
		else
		{
			System.out.println("Voucher Not Saved");
			
			excelReader.setCellData(xlfile, xlSheetName, 256, 9, resFail);
			
			return false;
		}
	}
	
	
	
	
	
	
	
	
	
	
	
	
	// Purchase Return Starts From Here
	
	
	
	@FindBy(xpath="//span[contains(text(),'Purchases Returns')]")
	private static WebElement  purchasesReturnsVoucher;
	
	public boolean checkPurchasesReturnsVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
		finacinalsMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();
		
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesReturnsVoucher));
    	
    	boolean actpurchasesReturnsVoucher       =purchasesReturnsVoucher.isDisplayed();
    	boolean exppurchasesReturnsVoucher		 =true;
    	
    	System.out.println("****************************** checkPurchasesReturnsVoucher  ********************************************");
    	
		System.out.println("purchasesReturnsVoucher          :"+actpurchasesReturnsVoucher+         "     Value Expected : "+exppurchasesReturnsVoucher);
		
		if(actpurchasesReturnsVoucher==exppurchasesReturnsVoucher)
		{
			System.out.println("Test Pass : HomeScreen Options Are Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 270, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : HomeScreen Options Are NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 270, 9, resFail);
			return false;
		}
	}
	
	
	@FindBy(xpath="//ul[@id='id_transaction_viewcontainer']//li[2]")
	private static WebElement  pendingPurchaseVoucherNView;
	
	@FindBy(xpath="//ul[@id='id_transaction_viewcontainer']//li[3]")
	private static WebElement  pendingMaterialReceiptsNotesView;
	
	
	

	public boolean checkPurchasesReturnsHomePage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesReturnsVoucher));
		purchasesReturnsVoucher.click();
    	
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
    	
		boolean actHomePageNewBtn         			=newBtn.isDisplayed();
		boolean actHomePageEditBtn        			=editBtn.isDisplayed();
		boolean actHomePagePrintBtn       			=printBtn.isDisplayed();
		boolean actHomePageDeleteBtn      			=deleteBtn.isDisplayed();
		//boolean actHomePageAuthorizeBtn   			=authorizeBtn.isDisplayed();
		boolean actHomePageSuspendBtn     			=suspendBtn.isDisplayed();
		//boolean actHomePageRejectBtn      			=rejectBtn.isDisplayed();
		boolean actHomePagePrintBarcodeBtn			=printBarCodeBtn.isDisplayed();
		boolean actHomePageExportXMLBtn   			=exportToXMLBtn.isDisplayed();
		boolean actHomePageSettingsBtn    			=settingsBtn.isDisplayed();
		boolean actHomePageCloseBtn       			=homeCloseBtn.isDisplayed();
		boolean actHomePageGridCheckBox   			=grid_HeaderChkBox.isDisplayed();
		boolean actHomePageSortingBtn     			=sortingBtn.isDisplayed();
		boolean actHomePageCreateViewBn   			=createViewBtn.isDisplayed();
		boolean actHomePageCustomizeBtn   			=customizeBtn.isDisplayed();
		boolean actHomePageFilterBtn      			=filterBtn.isDisplayed();
		boolean actHomePageRefreshBtn     			=refreshBtn.isDisplayed();
		boolean actHomePageOptionsBtn     			=optionsBtn.isDisplayed();
		boolean actHomePageExportBtn      			=exportBtn.isDisplayed();
		boolean actHomePageAllView        			=homePageAllVouchersView.isDisplayed();
		boolean actpendingPurchaseVoucherNView  	=pendingPurchaseVoucherNView.isDisplayed();
		boolean actpendingMaterialReceiptsNotesView =pendingMaterialReceiptsNotesView.isDisplayed();
		

		boolean expHomePageNewBtn        	 		=true;
		boolean expHomePageEditBtn        			=true;
		boolean expHomePagePrintBtn       			=true;
		boolean expHomePageDeleteBtn      			=true;
		boolean expHomePageAuthorizeBtn   			=true;
		boolean expHomePageSuspendBtn     			=true;
		boolean expHomePageRejectBtn      			=true;
		boolean expHomePagePrintBarcodeBtn			=true;
		boolean expHomePageExportXMLBtn   			=true;
		boolean expHomePageSettingsBtn    			=true;
		boolean expHomePageCloseBtn       			=true;
		boolean expHomePageGridCheckBox   			=true;
		boolean expHomePageSortingBtn     			=true;
		boolean expHomePageCreateViewBn   			=true;
		boolean expHomePageCustomizeBtn   			=true;
		boolean expHomePageFilterBtn     			=true;
		boolean expHomePageRefreshBtn  			    =true;
		boolean expHomePageOptionsBtn  			    =true;
		boolean expHomePageExportBtn     			=true;
		boolean expHomePageAllView        			=true;
		boolean exppendingPurchaseVoucherNView 		=true;
		boolean exppendingMaterialReceiptsNotesView	=true;
		
		System.out.println("****************************** checkSalesReturnsHomePage  ********************************************");
		
		System.out.println("Home Page New Btn Value Actual           :"+actHomePageNewBtn				+"   Value Expected : "+expHomePageNewBtn);
		System.out.println("Home Page Edit Btn Value Actual          :"+actHomePageEditBtn				+"   Value Expected : "+expHomePageEditBtn);
		System.out.println("Home Page Print Btn Value Actual         :"+actHomePagePrintBtn				+"	 Value Expected : "+expHomePagePrintBtn);
		System.out.println("Home Page Delete Btn Value Actual        :"+actHomePageDeleteBtn			+"	 Value Expected : "+expHomePageDeleteBtn);
		//System.out.println("Home Page Authorize Btn Value Actual     :"+actHomePageAuthorizeBtn			+"	 Value Expected : "+expHomePageAuthorizeBtn);
		System.out.println("Home Page Suspend Btn Value Actual       :"+actHomePageSuspendBtn			+"	 Value Expected : "+expHomePageSuspendBtn);
		//System.out.println("Home Page Reject Btn Value Actual        :"+actHomePageRejectBtn			+"	 Value Expected : "+expHomePageRejectBtn);
		System.out.println("Home Page Print Barcode Btn Value Actual :"+actHomePagePrintBarcodeBtn		+"	 Value Expected : "+expHomePagePrintBarcodeBtn);
		System.out.println("Home Page Export XML Btn Value Actual    :"+actHomePageExportXMLBtn			+"	 Value Expected : "+expHomePageExportXMLBtn);
		System.out.println("Home Page Settings Btn Value Actual      :"+actHomePageSettingsBtn			+"	 Value Expected : "+expHomePageSettingsBtn);
		System.out.println("Home Page Close Btn Value Actual         :"+actHomePageCloseBtn				+"	 Value Expected : "+expHomePageCloseBtn);
		System.out.println("Home Page Grid check Value Actual        :"+actHomePageGridCheckBox			+"	 Value Expected : "+expHomePageGridCheckBox);
		System.out.println("Home Page Sorting Btn Value Actual       :"+actHomePageSortingBtn			+"	 Value Expected : "+expHomePageSortingBtn);
		System.out.println("Home Page Create View Btn Value Actual   :"+actHomePageCreateViewBn			+"	 Value Expected : "+expHomePageCreateViewBn);
		System.out.println("Home Page Customize Btn Value Actual     :"+actHomePageCustomizeBtn			+"	 Value Expected : "+expHomePageCustomizeBtn);
		System.out.println("Home Page Filter check Value Actual      :"+actHomePageFilterBtn			+"	 Value Expected : "+expHomePageFilterBtn);
		System.out.println("Home Page Refesh Btn Value Actual        :"+actHomePageRefreshBtn			+"	 Value Expected : "+expHomePageRefreshBtn);
		System.out.println("Home Page Options Btn Value Actual       :"+actHomePageOptionsBtn			+"	 Value Expected : "+expHomePageOptionsBtn);
		System.out.println("Home Page Export Btn Value Actual        :"+actHomePageExportBtn			+"	 Value Expected : "+expHomePageExportBtn);
		System.out.println("Home Page All View Value Actual          :"+actHomePageExportBtn			+"	 Value Expected : "+expHomePageExportBtn);
		System.out.println("Home Page Pending PVN View Value Actual  :"+actpendingPurchaseVoucherNView	+"	 Value Expected : "+exppendingPurchaseVoucherNView);
		System.out.println("Home Page Pending SI View Value Actual   :"+actpendingPurchaseVoucherNView	+"	 Value Expected : "+exppendingPurchaseVoucherNView);
		
		
    	if(actHomePageNewBtn==expHomePageNewBtn  && actHomePageEditBtn==expHomePageEditBtn && actHomePagePrintBtn==expHomePagePrintBtn
				&& actHomePageDeleteBtn==expHomePageDeleteBtn/* && actHomePageAuthorizeBtn==expHomePageAuthorizeBtn*/ && actHomePageSuspendBtn==expHomePageSuspendBtn 
				/*&& actHomePageRejectBtn==expHomePageRejectBtn*/ && actHomePagePrintBarcodeBtn==expHomePagePrintBarcodeBtn && actHomePageExportXMLBtn==expHomePageExportXMLBtn
				&& actHomePageSettingsBtn==expHomePageSettingsBtn && actHomePageCloseBtn==expHomePageCloseBtn && actHomePageGridCheckBox==expHomePageGridCheckBox
				&& actHomePageSortingBtn==expHomePageSortingBtn && actHomePageCreateViewBn==expHomePageCreateViewBn && actHomePageCustomizeBtn==expHomePageCustomizeBtn
				&& actHomePageFilterBtn==expHomePageFilterBtn && actHomePageRefreshBtn==expHomePageRefreshBtn && actHomePageOptionsBtn==expHomePageOptionsBtn
				&& actHomePageExportBtn==expHomePageExportBtn && actHomePageAllView==expHomePageAllView && actpendingPurchaseVoucherNView==exppendingPurchaseVoucherNView
				&& actpendingMaterialReceiptsNotesView==exppendingMaterialReceiptsNotesView)
    	{
				System.out.println("Test Pass : HomeScreen Options Are Displayed");
				excelReader.setCellData(xlfile, xlSheetName, 270, 9, resPass);
				return true;
    	}
			else
		{
				System.out.println("Test Fail : HomeScreen Options Are NOT Displayed");
				excelReader.setCellData(xlfile, xlSheetName, 270, 9, resFail);
				return false;
		}
	 }
	
	
	
	public boolean checkPurchasesReturnsEntryPage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		checkUserFriendlyMessage();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jumpToHeaderSectionBtn));

		boolean actEntryPageJumpToHeaderSectionBtn=jumpToHeaderSectionBtn.isDisplayed();
		boolean actEntryPageJumpToBodySectionBtn  =jumpToBodySectionBtn.isDisplayed();
		boolean actEntryPageJumpToFooterBtn       =jumpToFooterBtn.isDisplayed();
		boolean actEntryPageNewBtn                =new_newBtn.isDisplayed();
		boolean actEntryPageSaveBtn               =saveBtn.isDisplayed();
		boolean actEntryPagePreviousBtn           =previousBtn.isDisplayed();
		boolean actEntryPageNextBtn               =nextBtn.isDisplayed();
		boolean actEntryPagePrintBtn              =new_PrintBtn.isDisplayed();
		boolean actEntryPageSuspendBtn            =new_SuspendBtn.isDisplayed();
		boolean actEntryPageCloseBtn              =new_CloseBtn.isDisplayed();
		boolean actEntryPageToggleBtn             =toggleBtn.isDisplayed();

		
		boolean expEntryPageJumpToHeaderSectionBtn=true;
		boolean expEntryPageJumpToBodySectionBtn  =true;
		boolean expEntryPageJumpToFooterBtn       =true;
		boolean expEntryPageNewBtn	              =true;
		boolean expEntryPageSaveBtn               =true;
		boolean expEntryPagePreviousBtn           =true;
		boolean expEntryPageNextBtn               =true;
		boolean expEntryPagePrintBtn              =true;
		boolean expEntryPageSuspendBtn            =true;
		boolean expEntryPageCloseBtn              =true;
		boolean expEntryPageToggleBtn             =true;

		
		
		System.out.println("************************************* checkPurchasesReturnsEntryPage  ********************************************");
		
		System.out.println("Entry Page RC Jump to Header Value Actual:"+actEntryPageJumpToHeaderSectionBtn+"  Value Expected : "+expEntryPageJumpToHeaderSectionBtn);
		System.out.println("Entry Page RC Jump To Body Value Actual  :"+actEntryPageJumpToBodySectionBtn+"    Value Expected : "+expEntryPageJumpToBodySectionBtn);
		System.out.println("Entry Page RC Jump To Footer Value Actual:"+actEntryPageJumpToFooterBtn+"         Value Expected : "+expEntryPageJumpToFooterBtn);
		System.out.println("Entry Page RC New Btn Value Actual       :"+actEntryPageNewBtn+"                  Value Expected : "+expEntryPageNewBtn);
		System.out.println("Entry Page RC Save Btn Value Actual      :"+actEntryPageSaveBtn+"                 Value Expected : "+expEntryPageSaveBtn);
		System.out.println("Entry Page RC Previous Btn Value Actual  :"+actEntryPagePreviousBtn+"             Value Expected : "+expEntryPagePreviousBtn);
		System.out.println("Entry Page RC Next Btn Value Actual      :"+actEntryPageNextBtn+"                 Value Expected : "+expEntryPageNextBtn);
		System.out.println("Entry Page RC Print Btn Value Actual     :"+actEntryPagePrintBtn+"                Value Expected : "+expEntryPagePrintBtn);
		System.out.println("Entry Page RC Suspend Btn Value Actual   :"+actEntryPageSuspendBtn+"              Value Expected : "+expEntryPageSuspendBtn);
		System.out.println("Entry Page RC Close Btn Value Actual     :"+actEntryPageCloseBtn+"                Value Expected : "+expEntryPageCloseBtn);
		System.out.println("Entry Page RC Toggle Btn Value Actual    :"+actEntryPageToggleBtn+"               Value Expected : "+expEntryPageToggleBtn);
		
		
		if(actEntryPageJumpToHeaderSectionBtn==expEntryPageJumpToHeaderSectionBtn && actEntryPageJumpToBodySectionBtn==expEntryPageJumpToBodySectionBtn 
				&& actEntryPageJumpToFooterBtn==expEntryPageJumpToFooterBtn && actEntryPageJumpToFooterBtn==expEntryPageJumpToFooterBtn
				&& actEntryPageNewBtn==expEntryPageNewBtn && actEntryPageSaveBtn==expEntryPageSaveBtn && actEntryPagePreviousBtn==expEntryPagePreviousBtn
				&& actEntryPageNextBtn==expEntryPageNextBtn && actEntryPagePrintBtn==expEntryPagePrintBtn &&actEntryPageSuspendBtn==expEntryPageSuspendBtn 
				&& actEntryPageCloseBtn==expEntryPageCloseBtn && actEntryPageToggleBtn==expEntryPageToggleBtn )
		{
			System.out.println("Test Pass : Entry Page Options Are Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 11, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Entry Page NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 11, 9, resFail);
			return false;
		}
	}
	
	
	
	

	
	

	public boolean checkPurchasesReturnsEntryPageHeaderFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		
		// Actual
		boolean actDocumentNumberTxt         	=documentNumberTxt.isDisplayed();
		boolean actDateTxt                  	=dateTxt.isDisplayed();
		boolean actpurchaseAccountTxt        	=purchaseAccountTxt.isDisplayed();
		boolean actCustomerAccount           	=customerAccountTxt.isDisplayed();
		boolean actRaiseReceipt              	=voucherRaiseReceiptCheckBox.isDisplayed();
		boolean actDepartment                	=departmentTxt.isDisplayed();
		boolean actpurchaseReturns_NarrationTxt =purchaseReturns_NarrationTxt.isDisplayed();
		
		// Expected
		boolean expDocumentNumberTxt        	 =true;
		boolean expDateTxt                  	 =true;
		boolean exppurchaseAccountTxt       	 =true;
		boolean expCustomerAccount          	 =true;
		boolean expRaiseReceipt             	 =true;
		boolean expDepartment                	 =true;
		boolean exppurchaseReturns_NarrationTxt	 =true;
		
		
		System.out.println("************************************* checkPurchasesReturnsEntryPageHeaderFields  ********************************************");
		
		System.out.println("Entry Page Header Value Actual    :"+actDocumentNumberTxt				+ " Value Expected : "+expDocumentNumberTxt);
		System.out.println("Entry Page Header Value Actual    :"+actDateTxt							+ " Value Expected : "+expDateTxt);
		System.out.println("Entry Page Header Value Actual    :"+actpurchaseAccountTxt				+ " Value Expected : "+exppurchaseAccountTxt);
		System.out.println("Entry Page Header Value Actual    :"+actCustomerAccount					+ " Value Expected : "+expCustomerAccount);
		System.out.println("Entry Page Header Value Actual    :"+actRaiseReceipt					+ " Value Expected : "+expRaiseReceipt);
		System.out.println("Entry Page Header Value Actual    :"+actDepartment						+ " Value Expected : "+expDepartment);
		System.out.println("Entry Page Header Value Actual    :"+actpurchaseReturns_NarrationTxt	+ " Value Expected : "+exppurchaseReturns_NarrationTxt);
		
		
		if(actDocumentNumberTxt==expDocumentNumberTxt && actDateTxt==expDateTxt && actpurchaseAccountTxt==exppurchaseAccountTxt
				 && actCustomerAccount==expCustomerAccount  && actRaiseReceipt==expRaiseReceipt  
				 && actDepartment==expDepartment && actpurchaseReturns_NarrationTxt==exppurchaseReturns_NarrationTxt)			     
		
		{
			System.out.println("Test Pass : entry Page Header Options Are Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 272, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 272, 9, resFail);
			return false;
		}
	}

	
	@FindBy(xpath="//div[contains(text(),'L-Purchase Vouchers N')]")
	private static WebElement voucherBodyLinkPurchaseVouchersN;
	
	
	@FindBy(xpath="//div[contains(text(),'L-Material Receipt Notes')]")
	private static WebElement voucherBodyLinkMaterailReceiptNotes;
	
		
	public boolean checkPurchasesReturnsEntryPageBodyFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
        // Actual
		boolean actBodyWareHouseName         =voucherBodyWareHouseName.isDisplayed();
		boolean actBodyItemName              =voucherBodyItemName.isDisplayed();
		boolean actBodyUnitName              =voucherBodyUnitsName.isDisplayed();
		boolean actBodyRdName                =voucherBodyRDName.isDisplayed();
		boolean actBodyAVGRateO              =voucherBodyAvgRate_o_Name.isDisplayed();
		boolean actBodyQtyName               =voucherBodyQtyName.isDisplayed();
		
					
		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("arguments[0].scrollIntoView();", voucherBodyRMAName);
		
		boolean actBodyLinkPurchaseVouchersN =voucherBodyLinkPurchaseVouchersN.isDisplayed();
		boolean actBodyLinkMrnName			 =voucherBodyLinkMaterailReceiptNotes.isDisplayed();
		boolean actBodyRate             	 =voucherBodyRateName.isDisplayed();
		boolean actBodyGross            	 =voucherBodyGrossName.isDisplayed();
		boolean actBodyBatch                 =voucherBodyBatchName.isDisplayed();
		boolean actBodyBins                  =voucherBodyBinsName.isDisplayed();
		boolean actBodyRMA                   =voucherBodyRMAName.isDisplayed();
		

		
		// Expected
		
		boolean expBodyWareHouseName		=true; 
		boolean expBodyItemName				=true; 
		boolean expBodyUnitName				=true;
		boolean expBodyRdName				=true;
		boolean expBodyAvgRateOName			=true;
		boolean expBodyQtyName				=true; 
		boolean expBodyLinkPurchaseVouchersN=true;
		boolean expBodyLinkMrnName			=true;
		boolean expBodyRateName				=true;
		boolean expBodyGrossName			=true;
		boolean expBodyBatchName			=true;
		boolean expBodyBinsName				=true;
		boolean expBodyRMA					=true;
		
		
		System.out.println("************************************* checkPurchasesReturnsEntryPageBodyFields  ********************************************");
		
		System.out.println("Entry Page Body Value Actual    :"+actBodyWareHouseName				+ " Value Expected : "+expBodyWareHouseName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyItemName					+ " Value Expected : "+expBodyItemName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyUnitName					+ " Value Expected : "+expBodyUnitName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyRdName					+ " Value Expected : "+expBodyRdName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyAVGRateO					+ " Value Expected : "+expBodyAvgRateOName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyQtyName					+ " Value Expected : "+expBodyQtyName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyLinkPurchaseVouchersN		+ " Value Expected : "+expBodyLinkPurchaseVouchersN);
		System.out.println("Entry Page Body Value Actual    :"+actBodyLinkMrnName				+ " Value Expected : "+expBodyLinkMrnName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyRate						+ " Value Expected : "+expBodyRateName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyGross						+ " Value Expected : "+expBodyGrossName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyBatch						+ " Value Expected : "+expBodyBatchName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyBins						+ " Value Expected : "+expBodyBinsName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyRMA						+ " Value Expected : "+expBodyRMA);
		
		if(actBodyWareHouseName==expBodyWareHouseName && actBodyItemName==expBodyItemName && actBodyUnitName==expBodyUnitName && actBodyAVGRateO==expBodyAvgRateOName 
				&& actBodyQtyName==expBodyQtyName && actBodyLinkPurchaseVouchersN==expBodyLinkPurchaseVouchersN  && actBodyLinkMrnName==expBodyLinkMrnName
				&& actBodyRate==expBodyQtyName && actBodyGross==expBodyGrossName && actBodyBatch==expBodyBatchName 
				&& actBodyBins==expBodyBinsName && actBodyRMA==expBodyRMA )
		{
			
			System.out.println(" Test Pass: Displayed Entry page Body Fileds ");
			excelReader.setCellData(xlfile, xlSheetName, 273, 9, resPass);
			
			js.executeScript("arguments[0].scrollIntoView();", voucherBodyHeaderIndex);
			
			return true;
		}
		else 
		{
			System.out.println(" Test Fail:  Not Displayed Entry page Body Fileds ");
			excelReader.setCellData(xlfile, xlSheetName, 273, 9, resFail);
			
			js.executeScript("arguments[0].scrollIntoView();", voucherBodyHeaderIndex);
			
			return false;
		}
			
	}

		
		


	public boolean checkPurchasesReturnsEntryPageFooterFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jumpToFooterBtn));
		jumpToFooterBtn.click();
		

		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(netLabel));
		
		boolean actEntryPageFooterFieldsNetLabel  =netLabel.isDisplayed();
		boolean actEntryPageFooterFieldsNetAmount =netAmount.isDisplayed();

		boolean expEntryPageFooterFieldsNetLabel  =true;
		boolean expEntryPageFooterFieldsNetAmount =true;

		System.out.println("****************************&&************* checkPurchasesReturnsEntryPageFooterFields  ***************************************************");
		
		System.out.println("Entry Page Footer Fields Net Label Value Actual  : "+actEntryPageFooterFieldsNetLabel+"   Value Expected : "+expEntryPageFooterFieldsNetLabel);
		System.out.println("Entry Page Footer Fields Net Amount Value Actual : "+actEntryPageFooterFieldsNetAmount+"  Value Expected : "+expEntryPageFooterFieldsNetAmount);

				
		if(actEntryPageFooterFieldsNetLabel==expEntryPageFooterFieldsNetLabel && actEntryPageFooterFieldsNetAmount==expEntryPageFooterFieldsNetAmount)
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 14, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 14, 9, resFail);
			return false;
		}


	}


	
	// Purchase Returns Info Side bar Starts
	
	public boolean checkPurchasesReturnsVoucherEntryPageInfoSideBar() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoSideBarCustomizeBtn));
		
		// Actual
		boolean actInforSideBarCustomization            =infoSideBarCustomizeBtn.isDisplayed();
		boolean actInforSideBarCustomizationExpandButton=infoSideBarMinimizeExpandBtn.isDisplayed();
		
		
		// Expected
		boolean expInforSideBarCustomization            =true;
		boolean expInforSideBarCustomizationExpandButton=true;
		
		System.out.println("***************************************** checkPurchasesReturnsVoucherEntryPageInfoSideBar  ***************************************************");
		System.out.println("Entry Page Open Docuemnt Number Value Actual  : "+actInforSideBarCustomization               +" Value Expected : "+expInforSideBarCustomization);
		System.out.println("Entry Page Open Docuemnt Number Value Actual  : "+actInforSideBarCustomizationExpandButton   +" Value Expected : "+expInforSideBarCustomizationExpandButton);
		
		if(actInforSideBarCustomization==expInforSideBarCustomization && actInforSideBarCustomizationExpandButton==expInforSideBarCustomizationExpandButton)
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 276, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 276, 9, resFail);
			return false;
		}
	}


	
	public boolean checkPurchasesReturnsVoucherEntryPageInfoSideBarCustomizeBtn() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoSideBarCustomizeBtn));
		
		infoSideBarCustomizeBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeSearchTxt));

		boolean actInfoCustomizationSearchTxt        =customizeSearchTxt.isDisplayed();
		boolean actInfoCustomizationSearchBtn        =customizeSearchBtn.isDisplayed();
		boolean actInfoCustomizationCloseBtn         =customizeCloseBtn.isDisplayed();
		boolean actInfoCustomizationSaveBtn          =customizeSaveBtn.isDisplayed();
		boolean actInfoCustomizationCancelBtn        =customizeCancelBtn.isDisplayed();
		boolean actInfoCustomizationGraphBtn         =graphBtn.isDisplayed();
		boolean actInfoCustomizationReportBtn        =reportBtn.isDisplayed();
		boolean actInfoCustomizationInfopanelBtn     =infoPanelBtn.isDisplayed();
		boolean actInfoCustomizationWorkFlowBtn      =workFlowBtn.isDisplayed();
		boolean actInfoCustomizationOtherDashletsBtn =otherDashlets.isDisplayed();

		boolean expInfoCustomizationSearchTxt        =true;
		boolean expInfoCustomizationSearchBtn        =true;
		boolean expInfoCustomizationCloseBtn         =true;
		boolean expInfoCustomizationSaveBtn          =true;
		boolean expInfoCustomizationCancelBtn        =true;
		boolean expInfoCustomizationGraphBtn         =true;
		boolean expInfoCustomizationReportBtn        =true;
		boolean expInfoCustomizationInfopanelBtn     =true;
		boolean expInfoCustomizationWorkFlowBtn      =true;
		boolean expInfoCustomizationOtherDashletsBtn =true;

		
		System.out.println("***************************************** checkPurchasesReturnsVoucherEntryPageInfoSideBarCustomizeBtn  ***************************************************");
		
		System.out.println("Entry Page Info Panel Search Txt Value Actual : "+actInfoCustomizationSearchTxt        +" Value Expected : "+expInfoCustomizationSearchTxt);
		System.out.println("Entry Page Info Panel Search Btn Value Actual : "+actInfoCustomizationSearchBtn        +" Value Expected : "+expInfoCustomizationSearchBtn);
		System.out.println("Entry Page Info Panel Close Btn Value Actual  : "+actInfoCustomizationCloseBtn         +" Value Expected : "+expInfoCustomizationCloseBtn);
		System.out.println("Entry Page Info Panel Save Btn Value Actual   : "+actInfoCustomizationSaveBtn          +" Value Expected : "+expInfoCustomizationSaveBtn);
		System.out.println("Entry Page Info Panel Cancel Value Actual     : "+actInfoCustomizationCancelBtn        +" Value Expected : "+expInfoCustomizationCancelBtn);
		System.out.println("Entry Page Info Panel Graph Value Actual      : "+actInfoCustomizationGraphBtn         +" Value Expected : "+expInfoCustomizationGraphBtn);
		System.out.println("Entry Page Info Panel Report Value Actual     : "+actInfoCustomizationReportBtn        +" Value Expected : "+expInfoCustomizationReportBtn);
		System.out.println("Entry Page Info Panel Value Actual            : "+actInfoCustomizationInfopanelBtn     +" Value Expected : "+expInfoCustomizationInfopanelBtn);
		System.out.println("Entry Page Info Panel WorkFlow Btn Actual     : "+actInfoCustomizationWorkFlowBtn      +" Value Expected : "+expInfoCustomizationWorkFlowBtn);
		System.out.println("Entry Page Info Panel Dashlet Btn Actual      : "+actInfoCustomizationOtherDashletsBtn +" Value Expected : "+expInfoCustomizationOtherDashletsBtn);
		
		
		if(actInfoCustomizationSearchTxt==expInfoCustomizationSearchTxt && actInfoCustomizationSearchBtn==expInfoCustomizationSearchBtn && actInfoCustomizationCloseBtn==expInfoCustomizationCloseBtn 
				&& actInfoCustomizationSaveBtn==expInfoCustomizationSaveBtn && actInfoCustomizationGraphBtn==expInfoCustomizationGraphBtn
				&& actInfoCustomizationReportBtn==expInfoCustomizationReportBtn && actInfoCustomizationInfopanelBtn==expInfoCustomizationInfopanelBtn  
				&& actInfoCustomizationWorkFlowBtn==expInfoCustomizationWorkFlowBtn && actInfoCustomizationOtherDashletsBtn==expInfoCustomizationOtherDashletsBtn)
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 277, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 277, 9, resFail);
			return false;
		}
	}

	
	
	public boolean checkPurchasesReturnsVoucherEntryPageInfoSideBarGraphOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(graphBtn));
		
		graphBtn.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newGraphOption));
		
		boolean actNewGraphOption       =newGraphOption.isDisplayed();
		boolean expNewGraphOption       =true;
		
		System.out.println("***************************************** checkPurchasesReturnsVoucherEntryPageInfoSideBarGraphOption  *****************************************");
		System.out.println("Entry Page Open Info Side Graph Value Actual  : "+actNewGraphOption               +" Value Expected : "+expNewGraphOption);
		
		if(actNewGraphOption==expNewGraphOption)
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 278, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 278, 9, resFail);
			return false;
		}
	}
	
	
	public boolean checkPurchasesReturnsVoucherEntryPageInfoSideBarReportOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reportBtn));
		
		reportBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newReportOption));
		
		boolean actNewReportOption       =newReportOption.isDisplayed();
		boolean expNewReportOption       =true;
		
		System.out.println("***************************************** checkPurchasesReturnsVoucherEntryPageInfoSideBarReportOption  *****************************************");
		System.out.println("Entry Page Open Info Side Report Value Actual  : "+actNewReportOption               +" Value Expected : "+expNewReportOption);
		
		
		if(actNewReportOption==expNewReportOption)
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 279, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 279, 9, resFail);
			return false;
		}
	}


	
	public boolean checkPurchasesReturnsVoucherEntryPageInfoSideBarInfoPanelOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoPanelBtn));
		
		infoPanelBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newInfoPanelOption));
		
		boolean actNewInfoPanelOption       =newInfoPanelOption.isDisplayed();
		boolean expNewInfoPanelOption       =true;
		
	
		System.out.println("***************************************** checkPurchasesReturnsVoucherEntryPageInfoSideBarInfoPanelOption  *****************************************");
		System.out.println("Entry Page Open Info Side Info Panel Value Actual  : "+actNewInfoPanelOption               +" Value Expected : "+expNewInfoPanelOption);
		
		
		
		if(actNewInfoPanelOption==expNewInfoPanelOption)
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 280, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 280, 9, resFail);
			return false;
		}
	}

	
	
	public boolean checkPurchasesReturnsVoucherEntryPageInfoSideBarWorkFlowOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowBtn));
		
		workFlowBtn.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newWorkFlowOption));
		
		boolean actNewWorkFlowOption       =newWorkFlowOption.isDisplayed();
		boolean expNewWorkFlowOption       =true;
		
	
		System.out.println("***************************************** checkPurchasesReturnsVoucherEntryPageInfoSideBarWorkFlowOption  *****************************************");
		System.out.println("Entry Page Open Info Side Workflow Value Actual  : "+actNewWorkFlowOption               +" Value Expected : "+expNewWorkFlowOption);
		
		
		if(actNewWorkFlowOption==expNewWorkFlowOption)
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 281, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 281, 9, resFail);
			return false;
		}
	}
	
	
	@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//label[contains(@class,'theme_icon-color')][contains(text(),'Document Info')]")
	private static WebElement  purchasesReturnsSearchDocumentInfo;
	
	public boolean checkPurchasesReturnsVoucherEntryPageInfoSideBarOtherDashletsOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(otherDashlets));
		
		otherDashlets.click();
				
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesReturnsSearchDocumentInfo));
		
		boolean actSearchDocumentInfo       =purchasesReturnsSearchDocumentInfo.isDisplayed();
		boolean expSearchDocumentInfo       =true;
		
	
		System.out.println("***************************************** checkPurchasesReturnsVoucherEntryPageInfoSideBarOtherDashletsOption  *****************************************");
		System.out.println("Entry Page Open Info Side Search Info Value Actual  : "+actSearchDocumentInfo               +" Value Expected : "+expSearchDocumentInfo);

		
		if(actSearchDocumentInfo==expSearchDocumentInfo)
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 282, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 282, 9, resFail);
			return false;
		}
	}

	
		
	public boolean checkPurchasesReturnsVoucherEntryPageInfoSideBarSearch() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeSearchTxt));
		
		customizeSearchTxt.click();
		
		
	    customizeSearchTxt.sendKeys("Document Info");
	 
	    Thread.sleep(2000);
	
	    customizeSearchTxt.sendKeys(Keys.TAB);
	 
	   
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchDocumentInfo));
		
		boolean actSearchDocumentInfo       =searchDocumentInfo.isDisplayed();
		boolean expSearchDocumentInfo       =true;
		
	
		System.out.println("***************************************** checkPurchasesReturnsVoucherEntryPageInfoSideBarSearch  *****************************************");
		System.out.println("Entry Page Open Info Side Search Info Value Actual  : "+actSearchDocumentInfo               +" Value Expected : "+expSearchDocumentInfo);

		
		if(actSearchDocumentInfo==expSearchDocumentInfo)
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 283, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 283, 9, resFail);
			return false;
		}
	}
	





	
	public boolean checkPurchasesReturnsVoucherInfoPanelDashlet() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\infoPanels.exe");
		
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addCreateDashlet));
		
		boolean actAddCreateDashlet       =addCreateDashlet.isDisplayed();
		boolean expAddCreateDashlet       =true;
		
	
		System.out.println("***************************************** checkPurchasesReturnsVoucherInfoPanelDashlet  *****************************************");
		System.out.println("Entry Page Open Info Side Add Create Dashlet Value Actual  : "+actAddCreateDashlet               +" Value Expected : "+expAddCreateDashlet);

		
		
		if(actAddCreateDashlet==expAddCreateDashlet)
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 284, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 284, 9, resFail);
			return false;
		}
	}




	
	public boolean checkPurchasesReturnsVoucherSaveInfoPanelDashlet() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeSaveBtn));
		
		customizeSaveBtn.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(errorMessage));
		
		String actSaveInfoPanelMessage       =errorMessage.getText();
		String expSaveInfoPanelMessage       ="Dashboard Layout Saved Successfully.";
		
		System.out.println("***************************************** checkPurchasesReturnsVoucherSaveInfoPanelDashlet  *****************************************");
		
		System.out.println("Entry Page Open Info Side New Save Value Actual  : "+actSaveInfoPanelMessage               +" Value Expected : "+expSaveInfoPanelMessage);	
		
		if(actSaveInfoPanelMessage.equalsIgnoreCase(expSaveInfoPanelMessage) && dashletI.isDisplayed())
		{
			System.out.println("Test Pass : Error Message Is As Expected");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			
			excelReader.setCellData(xlfile, xlSheetName, 285, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Error Message Is NOT As Expected");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 285, 9, resFail);
			return false;
		}	
	}

	// purchase Returns Info Side bar Stop
	
	
	

	public boolean checkPurchasesReturnsSaveWithoutMandatoryFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessage));
		
		String actSaveMandatoryWithNoInputValidationMessage        =errorMessage.getText();
		String expSaveMandatoryWithNoInputValidationMessageOne     ="Controls marked with arrow mark, require Values";
		String expSaveMandatoryWithNoInputValidationMessageTwo     ="Main -> PurchaseAC";
		String expSaveMandatoryWithNoInputValidationMessageThree   ="Main -> VendorAC";
		String expSaveMandatoryWithNoInputValidationMessageFour    ="Main -> Department";
	
		
		System.out.println("*********************************************** checkPurchasesReturnsSaveWithoutMandatoryFields  ********************************************");
		System.out.println("Entry Page Save with No Mandatory Input Value Actual  : "+actSaveMandatoryWithNoInputValidationMessage  +" Value Expected : "+expSaveMandatoryWithNoInputValidationMessageOne+expSaveMandatoryWithNoInputValidationMessageTwo+expSaveMandatoryWithNoInputValidationMessageThree+expSaveMandatoryWithNoInputValidationMessageFour);	
		
		if(actSaveMandatoryWithNoInputValidationMessage.startsWith(expSaveMandatoryWithNoInputValidationMessageOne) 
				&& actSaveMandatoryWithNoInputValidationMessage.contains(expSaveMandatoryWithNoInputValidationMessageTwo) 
				&& actSaveMandatoryWithNoInputValidationMessage.contains(expSaveMandatoryWithNoInputValidationMessageThree) 
				&& actSaveMandatoryWithNoInputValidationMessage.endsWith(expSaveMandatoryWithNoInputValidationMessageFour))
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			
			excelReader.setCellData(xlfile, xlSheetName, 19, 9, resPass);
			return true;
		}
		else
		{
			
			excelReader.setCellData(xlfile, xlSheetName, 19, 9, resFail);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			
			return false;
		}
	}
	
	
	
	@FindBy(xpath="//tbody[@id='id_header_3_table_body']/tr")
	private static List<WebElement> purchaseAccountListCount; 
	
	
	public boolean checkPurchasesReturnsPurchaseOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
		purchaseAccountTxt.click();
		
		purchaseAccountTxt.sendKeys(Keys.SPACE);
		
		ArrayList<String>  actPVPurchaseAccount= new ArrayList<String>(); 
		
		actPVPurchaseAccount.add("Cost of goods sold - Computers");
		    
		actPVPurchaseAccount.add("Cost of goods sold - Electronics");
		    
		actPVPurchaseAccount.add("Cost of goods sold - HA");
		    
		actPVPurchaseAccount.add("Inventory  Trade");
		   
		actPVPurchaseAccount.add("Inventory FG");
		    
		actPVPurchaseAccount.add("Inventory RM");
		    
		actPVPurchaseAccount.add("Purchase");
		
		ArrayList<String> 
		
		expPVPurchaseAccount = new ArrayList<String>(); 
		
		
		int count=purchaseAccountListCount.size();
		
		System.err.println(count);
		
		for(int i=0 ; i < count ;i++)
		{
			String data=purchaseAccountListCount.get(i).getAttribute("data-name");
			System.err.println("IN FOR LOOP : "+data);
			expPVPurchaseAccount.add(data);
			
		}
		
		System.err.println(expPVPurchaseAccount);
		
		boolean actPVPurchaseAccountValue=actPVPurchaseAccount.equals(expPVPurchaseAccount);
	    boolean expPVPurchaseAccountValue=true;
		
	    System.out.println("********************************************* checkPurchasesReturnsPurchaseOptions  ********************************************************");
		System.out.println("Entry Page Warehouse Masters Value Actual  : "+actPVPurchaseAccount+"       Value Expected : "+expPVPurchaseAccount);
		System.out.println("Entry Page Warehouse Masters Value Actual  : "+actPVPurchaseAccountValue+"  Value Expected : "+expPVPurchaseAccountValue);
	    
	    	
	   if(actPVPurchaseAccountValue==expPVPurchaseAccountValue)
		{
			System.out.println("Test Pass : Error Message Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 105, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Pass : Date is 08/26/2019");
			excelReader.setCellData(xlfile, xlSheetName, 105, 9, resFail);
			return false;
		}
		
	}
	
	
	public boolean checkPurchasesReturnsSaveWithPurchaseInput() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();


	    String actSaveWithInputPurchaseAccountValidationMessage=errorMessage.getText();
	    
	    String expSaveWithInputPurchaseAccountValidationMsg     ="Controls marked with arrow mark, require Values";
		String expSaveWithInputPurchaseAccountValidationMsgOne  ="Main -> VendorAC";
		String expSaveWithInputPurchaseAccountValidationMsgTwo  ="Main -> Department";
		
		
		System.out.println("*********************************************** checkPurchasesReturnsSaveWithPurchaseInput  ********************************************");
		System.out.println("Entry Page Save with Purchase Input Value Actual  : "+actSaveWithInputPurchaseAccountValidationMessage  +" Value Expected : "+expSaveWithInputPurchaseAccountValidationMsg+expSaveWithInputPurchaseAccountValidationMsgOne+expSaveWithInputPurchaseAccountValidationMsgTwo);	
		
	
	    	
		if(actSaveWithInputPurchaseAccountValidationMessage.startsWith(expSaveWithInputPurchaseAccountValidationMsg) 
				&& actSaveWithInputPurchaseAccountValidationMessage.contains(expSaveWithInputPurchaseAccountValidationMsgOne) 
				&& actSaveWithInputPurchaseAccountValidationMessage.contains(actSaveWithInputPurchaseAccountValidationMessage))
		{
			System.out.println("Test Pass : Error Message Displayed");
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 106, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Pass : Date is 08/26/2019");
			excelReader.setCellData(xlfile, xlSheetName, 106, 9, resFail);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			return false;
		}
	}
	
	@FindBy(xpath="//tbody[@id='id_header_4_table_body']/tr")
	private static List<WebElement> vendorAccountListCount; 
	
	public boolean checkPurchasesReturnsVendorOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		
		vendorAccountTxt.sendKeys(Keys.SPACE);
		
		ArrayList<String>  actVendorAccountList= new ArrayList<String>(); 
	
		actVendorAccountList.add("Bank");
	    
		actVendorAccountList.add("Cash");
	    
		actVendorAccountList.add("Vendor A");
	    
		actVendorAccountList.add("Vendor B");
		
		actVendorAccountList.add("Vendor C");
		   		    
		ArrayList<String> 
		
        expVendorAccountList = new ArrayList<String>(); 
		
		int count=vendorAccountListCount.size();

		System.err.println(count);
		
		for(int i=0 ; i < count ;i++)
		{
			String data=vendorAccountListCount.get(i).getAttribute("data-name");
			System.err.println("IN FOR LOOP : "+data);
			expVendorAccountList.add(data);
			
		}
		
		System.err.println(expVendorAccountList);
		
		System.out.println("actVendorAccountList"+actVendorAccountList);
		
		System.out.println("expVendorAccountList"+expVendorAccountList);
		
		boolean actVendorAccountValue=actVendorAccountList.equals(expVendorAccountList);
		boolean expVendorAccountValue=true;
		

	    System.out.println("********************************************* checkPurchasesReturnsVendorOptions  ********************************************************");
		System.out.println("Entry Page Warehouse Masters Value Actual  : "+actVendorAccountList+"       Value Expected : "+expVendorAccountList);
		System.out.println("Entry Page Warehouse Masters Value Actual  : "+actVendorAccountValue+"      Value Expected : "+expVendorAccountValue);
	    
		
	   if(actVendorAccountValue==true)
		{
			System.out.println("Test Pass : Error Message Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 107, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Pass : Date is 08/26/2019");
			excelReader.setCellData(xlfile, xlSheetName, 107, 9, resFail);
			return false;
		}
		
	}
	
	
	public boolean checkPurchasesReturnsSaveWithVendorInput() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessage));
		String actSaveMandatoryWithNoInputValidationMessage        =errorMessage.getText();
		String expSaveMandatoryWithNoInputValidationMessageOne     ="Controls marked with arrow mark, require Values";
		String expSaveMandatoryWithNoInputValidationMessageTwo     ="Main -> Department";
	
		
		System.out.println("*********************************************** checkPurchasesReturnsSaveWithVendorInput  ********************************************");
		System.out.println("Entry Page Save with No Mandatory Input Value Actual  : "+actSaveMandatoryWithNoInputValidationMessage  +" Value Expected : "+expSaveMandatoryWithNoInputValidationMessageOne+expSaveMandatoryWithNoInputValidationMessageTwo);	
		
		if(actSaveMandatoryWithNoInputValidationMessage.startsWith(expSaveMandatoryWithNoInputValidationMessageOne) 
				&& actSaveMandatoryWithNoInputValidationMessage.contains(expSaveMandatoryWithNoInputValidationMessageTwo))
		{
		
		
			System.out.println("Test Pass : Error Message Displayed");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			
			excelReader.setCellData(xlfile, xlSheetName, 19, 9, resPass);
			
			
			return true;
		}
		else
		{
			System.out.println("Test Pass : Date is 08/26/2019");
			
			excelReader.setCellData(xlfile, xlSheetName, 19, 9, resFail);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			
			
			return false;
		}
	}
	

   
  	public boolean checkPurchasesReturnsDepartmentValues() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  	{
  		
  		
  		excelReader=new ExcelReader(POJOUtility.getExcelPath());
  		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
  		
  		Thread.sleep(2000);
  		
  		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.click();
		
		departmentTxt.sendKeys(Keys.SPACE);
		
		
		WebElement options=departmentTxt;
		
		ArrayList<String> actDepartmentList= new ArrayList<String>(); 
	
		actDepartmentList.add("AMERICA");
	    
		actDepartmentList.add("DUBAI");
	    
		actDepartmentList.add("INDIA");
	   
		actDepartmentList.add("WALES");   		    
	    
		ArrayList<String> 
		
		expDepartmentList = new ArrayList<String>(); 

		int count=departmentListCount.size();
		
		System.err.println(count);
		
		for(int i=0 ; i < count ;i++)
		{
			String data=departmentListCount.get(i).getAttribute("data-name");
			System.err.println("IN FOR LOOP : "+data);
			expDepartmentList.add(data);
			
		}
		
		System.err.println(expDepartmentList);
		
		
		System.out.println("actDepartmentList"+actDepartmentList);
		
		System.out.println("expDepartmentList"+expDepartmentList);
		
		boolean actDepartmentValue=actDepartmentList.equals(expDepartmentList);
		boolean expDepartmentValue=true;
          

  		System.out.println("*********************************************** checkPurchasesReturnsDepartmentValues  ********************************************");
  		
  		System.out.println("Entry Page Department Value Actual  : "+actDepartmentValue  +" Value Expected : "+expDepartmentValue);	
  		
  		
  	   if(actDepartmentValue==expDepartmentValue)
  	   {
  		   System.out.println("Test Pass : Error Message Displayed");
  		   excelReader.setCellData(xlfile, xlSheetName, 20, 9, resPass);
  		   return true;
  	   }
  	   else
  	   {
  		   System.out.println("Test Pass : Date is 08/26/2019");
  		   excelReader.setCellData(xlfile, xlSheetName, 20, 9, resFail);
  		   return false;
  	   }
  	}
  	 


	public boolean checkPurchasesReturnsSaveWithDepartmentInput() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
			
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessage));
		String actSaveValidationMessageOnSaveWithoutBodyRows=errorMessage.getText();
		String expSaveValidationMessageOnSaveWithoutBodyRows="There should be atleast one row entered.";
		

		System.out.println("*********************************************** checkPurchasesReturnsSaveWithDepartmentInput  ********************************************");
		
		System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actSaveValidationMessageOnSaveWithoutBodyRows  +" Value Expected : "+expSaveValidationMessageOnSaveWithoutBodyRows);	
		
		
		if (actSaveValidationMessageOnSaveWithoutBodyRows.equalsIgnoreCase(expSaveValidationMessageOnSaveWithoutBodyRows))
		{
			System.out.println("Test Pass : Error Message Displayed");
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 19, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test FAil :Error Message  Not Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 19, 9, resFail);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			return false;
		}
	} 
	 
	 
	
	public boolean checkPurchasesReturnsBodyWarehouseOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    {
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.SPACE);
            
        ArrayList<String>  actWarehouseList= new ArrayList<String>(); 
            
        actWarehouseList.add("HYDERABAD");
                
        actWarehouseList.add("MUMBAI");
                
        actWarehouseList.add("SECUNDERABAD");
                
        actWarehouseList.add("WH1");
               
        ArrayList<String>
        
        expWarehouseList = new ArrayList<String>(); 

        int count=pvwareHouseListCount.size();
		
		System.err.println(count);
		
		for(int i=0 ; i < count ;i++)
		{
			String data=pvwareHouseListCount.get(i).getAttribute("data-name");
			System.err.println("IN FOR LOOP : "+data);
			expWarehouseList.add(data);
			
		}
		
		System.err.println(expWarehouseList);
		
		
		System.out.println("actWarehouseList"+actWarehouseList);
		
		System.out.println("expWarehouseList"+expWarehouseList);
		
		
		boolean actWarehouseValue=actWarehouseList.equals(expWarehouseList);
		boolean expWarehouseValue=true;
		
		
		System.out.println("************************************* checkPurchasesReturnsBodyWarehouseOptions  ********************************************");
		
		System.out.println("Entry Page Warehouse Masters Value Actual  : "+actWarehouseList	+"  Value Expected : "+expWarehouseList);
		System.out.println("Entry Page Warehouse Masters Value Actual  : "+actWarehouseValue	+"  Value Expected : "+expWarehouseValue);
		
	    if(actWarehouseValue==expWarehouseValue)
		{
			
			return true;
		}
		else
		{
			
			return false;
		}
    }
		
	
	

	
	public boolean checkPurchasesReturnsVoucherBodyItemOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_2ndColumn));
		select1stRow_2ndColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
			
		WebElement options=enter_ItemTxt;
		
		ArrayList<String>  actItemComboxValues= new ArrayList<String>(); 
		
		actItemComboxValues.add("BATCH BIN FINISHED GOODS ITEM");
		    
		actItemComboxValues.add("BATCH BIN WITH NO RESERVATION ITEM");
		    
		actItemComboxValues.add("BATCH BIN WITH NO STOCK UPDATE ITEM");
		    
		actItemComboxValues.add("BATCH BR ITEM");
		    
		actItemComboxValues.add("BATCH FIFO ITEM");
		    
		actItemComboxValues.add("BATCH IGNORE EXP LIFO ITEM");
		    
		actItemComboxValues.add("BATCH WA ITEM");
		   
		actItemComboxValues.add("BIN FINISHED GOODS ITEM");
		    
		actItemComboxValues.add("BIN RAW MATERIAL ITEM");
		    
		actItemComboxValues.add("RMA BATCH ITEM");
		    
		actItemComboxValues.add("RMA FITEM");
		    
		actItemComboxValues.add("RMA RITEM");
		    
		actItemComboxValues.add("STOCK ITEM");
		    
		    
		ArrayList<String> 
		
		expItemComboxValues = new ArrayList<String>(); 
		
		int count=itemListCount.size();
		
		System.err.println(count);
		
		for(int i=0 ; i < count ;i++)
		{
			String data=itemListCount.get(i).getText();
			System.err.println("IN FOR LOOP : "+data);
			expItemComboxValues.add(data);
			
		}
		
		System.err.println(expItemComboxValues);
		
		System.out.println("actItemComboxValues"+actItemComboxValues);
		
		System.out.println("expItemComboxValues"+expItemComboxValues);
		
		boolean actGetItemValue=actItemComboxValues.equals(expItemComboxValues);
		boolean expGetItemValue=true;
		
		
		Thread.sleep(2000);
		
		enter_ItemTxt.sendKeys(Keys.TAB);
		
		System.out.println("********************************************* checkPurchasesReturnsVoucherBodyItemOptions  *************************************************");
		
		System.out.println("Entry Page Item Masters Value Actual  : "+actItemComboxValues +"  Value Expected : "+expItemComboxValues);
		System.out.println("Entry Page Item Masters Value Actual  : "+actGetItemValue     +"  Value Expected : "+expGetItemValue);
		
		if(actGetItemValue==expGetItemValue)
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			excelReader.setCellData(xlfile, xlSheetName, 31, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			excelReader.setCellData(xlfile, xlSheetName, 31, 9, resFail);
			return false;
		}
	}
	
	
	
	

	
	public boolean checkPurchasesReturnsVouchersEntryPageNew() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
		Thread.sleep(2000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_newBtn));
		new_newBtn.click();
		
		Thread.sleep(2000);
		
		getWaitForAlert();
		
		String actAlertMessageBeforeNewClick   =getAlert().getText();
		String expAlertMessageBeforeNewClick0  ="The contents of the voucher are changed.";
		String expAlertMessageBeforeNewClick1  ="Are you sure that you want to ignore the changes?";
		

		getAlert().accept();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocNumberAfterNewClick  =documentNumberTxt.getAttribute("value");
		String expDocNumberAfterNewClick  ="1";
		
		System.out.println("************************************* checkPurchasesReturnsVouchersEntryPageNew  ***********************************************");
		
		System.out.println("Entry Page Save on Click New Value Actual  : "+actAlertMessageBeforeNewClick+"    Value Expected   : "+expAlertMessageBeforeNewClick0+expAlertMessageBeforeNewClick1);
	
		
		
		if(actAlertMessageBeforeNewClick.startsWith(expAlertMessageBeforeNewClick0) && actAlertMessageBeforeNewClick.endsWith(expAlertMessageBeforeNewClick1) 
				&& actDocNumberAfterNewClick.equalsIgnoreCase(expDocNumberAfterNewClick))
		{
			System.out.println("Test Pass : DOC NO is 1");
			excelReader.setCellData(xlfile, xlSheetName, 30, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Customize Pop Up NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 30, 9, resFail);
			return false;
		}
		
	}
	
	

	

	public boolean checkPurchasesReturnsEntryBatchItemInFirstRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
		Thread.sleep(2000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
		purchaseAccountTxt.click();
		purchaseAccountTxt.sendKeys(Keys.SPACE);
		
		int count=purchaseAccountListCount.size();
		
		System.err.println(count);
		
		for(int i=0 ; i < count ;i++)
		{
			String data=purchaseAccountListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("Purchase"))
			{
				purchaseAccountListCount.get(i).click();
				
				break;
			}
		}
		
		purchaseAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.SPACE);
		
		int vendorcount=vendorAccountListCount.size();
		
		System.err.println(vendorcount);
		
		for(int i=0 ; i < vendorcount ;i++)
		{
			String data=vendorAccountListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("Vendor a"))
			{
				vendorAccountListCount.get(i).click();
				
				break;
			}
		}
			
		vendorAccountTxt.sendKeys(Keys.TAB);
		

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.click();
		departmentTxt.sendKeys(Keys.SPACE);
			
		int departmentcount=departmentListCount.size();
		
		System.err.println(departmentcount);
			
		for(int i=0 ; i < departmentcount ;i++)
		{
			String data=departmentListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("INDIA"))
			{
				departmentListCount.get(i).click();
				
				break;
			}
		}
			
		departmentTxt.sendKeys(Keys.TAB);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.SPACE);
			
		int warehousecount=pvwareHouseListCount.size();
		
		System.err.println(warehousecount);
			
		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=pvwareHouseListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("HYDERABAD"))
			{
				pvwareHouseListCount.get(i).click();
				
				break;
			}
		}
			
		pvWareHouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("BATCH WA ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.END);
		enter_UnitTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_UnitTxt.sendKeys(Keys.BACK_SPACE);
		enter_UnitTxt.sendKeys(Keys.SPACE);
		
		int unitCount=unitsListCount.size();
		
		System.err.println(unitCount);
			
		for(int i=0 ; i < unitCount ;i++)
		{
			String data=unitsListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("Pcs"))
			{
				unitsListCount.get(i).click();
				
				break;
			}
		}
			
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_6thColumn));
		select1stRow_6thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		Thread.sleep(2000);
		enter_Quantity.sendKeys(Keys.TAB);
		
		Thread.sleep(3000);
		
		
		
		List<WebElement> rowCountInLinkScreen=LinkRowCount;
		
		int rowCount=rowCountInLinkScreen.size();
	
		System.out.println(rowCount);
		
		for (int i = 1; i <= rowCount; i++) 
		{
			WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
			
			WebElement itemName=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[9]"));
			
			String actvoucheno=voucherno.getText();
			
			String actitemName=itemName.getText();
			
			System.out.println(actvoucheno);
			
			System.out.println(actitemName);
			
			if(actvoucheno.equalsIgnoreCase("NDT45:1") && actitemName.equalsIgnoreCase("BATCH WA ITEM"))
			{
				Thread.sleep(2000);
				WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
				radioBtn.click();
				
				break;
			}

		}
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
		workFlowOkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		List<WebElement> batchrowcount=batchPopUPRowCount;
		
		int batchrowcount1=batchrowcount.size();
	
		System.out.println(batchrowcount1);
		
		for (int i = 1; i <= batchrowcount1; i++) 
		{
			WebElement batchno=getDriver().findElement(By.xpath("//tbody[@id='Id_MRPBatch_Grid_body']/tr["+i+"]/td[2]"));
			
			
			String actbatchno=batchno.getText();
			
			
			System.out.println(actbatchno);
			
			
			if(actbatchno.equalsIgnoreCase("PVHWA") )
			{
				Thread.sleep(2000);
				WebElement index=getDriver().findElement(By.xpath("//tbody[@id='Id_MRPBatch_Grid_body']/tr["+i+"]/td[1]"));
				getAction().doubleClick(index).build().perform();
				
				break;
			}

		}
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
   	 
		// Actual
		
   	 	String actWareHouseR1	=select1stRow_1stColumn.getText();
   	 	String actItemR1		=select1stRow_2ndColumn.getText();
   	 	String actUnitsR1		=select1stRow_3rdColumn.getText();
   	 	String actRdR1			=select1stRow_4thColumn.getText();
   	 	String actAvgRateOR1	=select1stRow_5thColumn.getText(); 
   	 	String actQtyR1		    =select1stRow_6thColumn.getText();
   	 	String actLPvnR1	    =select1stRow_7thColumn.getText();
   	 	boolean actLMrnR1	    =select1stRow_8thColumn.getText().isEmpty();
   	 	String actRateR1	    =select1stRow_9thColumn.getText();
   	 	String actGrossR1		=select1stRow_10thColumn.getText();
   	 	String actBatchR1		=select1stRow_11thColumn.getText();
   	 	boolean actBinR1	    =select1stRow_12thColumn.getText().isEmpty();
   	 	boolean actRmaR1	    =select1stRow_13thColumn.getText().isEmpty();
   	 	
   	 	
   	 	// Expected
		
   		String expWareHouseR1	="HYDERABAD";
   	 	String expItemR1		="BATCH WA ITEM";
   	 	String expUnitsR1		="Pcs";
   	 	String expRdR1			="0.00";
   	 	String expAvgRateOR1	="1"; 
   	 	String expQtyR1		    ="1.00";
   	 	String expLPvnR1        ="NDT45:1";
   	 	boolean expLMrnR1       =true;
   	 	String expRateR1	    ="1.11";
   	 	String expGrossR1		="1.11";
   	 	String expBatchR1		="PVHWA";
   	 	boolean expBinR1	    =true;
   	 	boolean expRmaR1	    =true;
		
		
		 
		 
		 System.out.println("*********************************** checkPurchasesReturnsEntryBatchItemInFirstRow  *******************************");
		 
		 System.out.println("WareHouseR1      : "+actWareHouseR1      +" Value Expected : "+expWareHouseR1);
		 System.out.println("ItemR1           : "+actItemR1           +" Value Expected : "+expItemR1);
		 System.out.println("UnitsR1          : "+actUnitsR1          +" Value Expected : "+expUnitsR1);
		 System.out.println("RdR1          	  : "+actRdR1          	  +" Value Expected : "+expRdR1);
		 System.out.println("AvgRateOR1       : "+actAvgRateOR1       +" Value Expected : "+expAvgRateOR1);
		 System.out.println("QtyR1            : "+actQtyR1            +" Value Expected : "+expQtyR1);
		 System.out.println("LPvnR1           : "+actLPvnR1           +" Value Expected : "+expLPvnR1);
		 System.out.println("LMrnR1           : "+actLMrnR1           +" Value Expected : "+expLMrnR1);
		 System.out.println("RateR1           : "+actRateR1           +" Value Expected : "+expRateR1);
		 System.out.println("GrossR1          : "+actGrossR1          +" Value Expected : "+expGrossR1);
		 System.out.println("BatchR1          : "+actBatchR1          +" Value Expected : "+expBatchR1);
		 System.out.println("BinR1            : "+actBinR1            +" Value Expected : "+expBinR1);
		 System.out.println("RmaR1            : "+actRmaR1            +" Value Expected : "+expRmaR1);
		 
		 if(actWareHouseR1.equalsIgnoreCase(expWareHouseR1) && actItemR1.equalsIgnoreCase(expItemR1) && actUnitsR1.equalsIgnoreCase(expUnitsR1) && actRdR1.equalsIgnoreCase(expRdR1)
				 && actAvgRateOR1.equalsIgnoreCase(expAvgRateOR1) && actQtyR1.equalsIgnoreCase(expQtyR1) && actLPvnR1.equalsIgnoreCase(expLPvnR1) && actLMrnR1==expLMrnR1
				 && actRateR1.equalsIgnoreCase(expRateR1) && actGrossR1.equalsIgnoreCase(expGrossR1) && actBatchR1.equalsIgnoreCase(expBatchR1)
				 && actBinR1==expBinR1 && actRmaR1==expRmaR1)
		{
			System.out.println("Test Pass : DOC NO is 1");
			excelReader.setCellData(xlfile, xlSheetName, 30, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Customize Pop Up NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 30, 9, resFail);
			return false;
		}
		
	}
	
	
	
	public boolean checkPurchasesReturnsEntryBinFinishedGoodsItemInSecondRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		Thread.sleep(2000);
		pvWareHouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("BIN FINISHED GOODS ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.END);
		enter_UnitTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_UnitTxt.sendKeys(Keys.BACK_SPACE);
		enter_UnitTxt.sendKeys(Keys.SPACE);
		
		int unitCount=unitsListCount.size();
		
		System.err.println(unitCount);
			
		for(int i=0 ; i < unitCount ;i++)
		{
			String data=unitsListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("Pcs"))
			{
				unitsListCount.get(i).click();
				
				break;
			}
		}
			
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_6thColumn));
		select2ndRow_6thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		Thread.sleep(2000);
		enter_Quantity.sendKeys(Keys.TAB);
		
		Thread.sleep(3000);
		
		
		List<WebElement> rowCountInLinkScreen=LinkRowCount;
		
		int rowCount=rowCountInLinkScreen.size();
	
		System.out.println(rowCount);
		
		for (int i = 1; i <= rowCount; i++) 
		{
			WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
			
			WebElement itemName=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[9]"));
			
			String actvoucheno=voucherno.getText();
			
			String actitemName=itemName.getText();
			
			System.out.println(actvoucheno);
			
			System.out.println(actitemName);
			
			if(actvoucheno.equalsIgnoreCase("NDT45:1") && actitemName.equalsIgnoreCase("BIN FINISHED GOODS ITEM"))
			{
				Thread.sleep(2000);
				WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
				radioBtn.click();
				
				break;
			}

		}
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
		workFlowOkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_9thColumn));
		select2ndRow_9thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchBtn));
		binSearchBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
		binAutoAllocateBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
		binOkBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
   	 
		// Actual
		
   	 	String actWareHouseR2	=select2ndRow_1stColumn.getText();
   	 	String actItemR2		=select2ndRow_2ndColumn.getText();
   	 	String actUnitsR2		=select2ndRow_3rdColumn.getText();
   	 	String actRdR2			=select2ndRow_4thColumn.getText();
   	 	String actAvgRateOR2	=select2ndRow_5thColumn.getText(); 
   	 	String actQtyR2		    =select2ndRow_6thColumn.getText();
   	 	String actLPvnR2	    =select2ndRow_7thColumn.getText();
   	 	boolean actLMrnR2	    =select2ndRow_8thColumn.getText().isEmpty();
   	 	String actRateR2	    =select2ndRow_9thColumn.getText();
   	 	String actGrossR2		=select2ndRow_10thColumn.getText();
   	 	boolean actBatchR2		=select2ndRow_11thColumn.getText().isEmpty();
   	 	String actBinR2	    	=select2ndRow_12thColumn.getText();
   	 	boolean actRmaR2	    =select2ndRow_13thColumn.getText().isEmpty();
   	 	
   	 	
   	 	// Expected
		
   		String expWareHouseR2	="HYDERABAD";
   	 	String expItemR2		="BIN FINISHED GOODS ITEM";
   	 	String expUnitsR2		="Pcs";
   	 	String expRdR2			="0.00";
   	 	String expAvgRateOR2	="1"; 
   	 	String expQtyR2		    ="1.00";
   	 	String expLPvnR2        ="NDT45:1";
   	 	boolean expLMrnR2       =true;
   	 	String expRateR2	    ="1.11";
   	 	String expGrossR2		="1.11";
   	 	boolean expBatchR2		=true;
   	 	String expBinR2	    	="Bin4";
   	 	boolean expRmaR2	    =true;
		
		
		 
		 
		 System.out.println("*********************************** checkPurchasesReturnsEntryBinFinishedGoodsItemInSecondRow  *******************************");
		 
		 System.out.println("WareHouseR2      : "+actWareHouseR2      +" Value Expected : "+expWareHouseR2);
		 System.out.println("ItemR2           : "+actItemR2           +" Value Expected : "+expItemR2);
		 System.out.println("UnitsR2          : "+actUnitsR2          +" Value Expected : "+expUnitsR2);
		 System.out.println("RdR2          	  : "+actRdR2          	  +" Value Expected : "+expRdR2);
		 System.out.println("AvgRateOR2       : "+actAvgRateOR2       +" Value Expected : "+expAvgRateOR2);
		 System.out.println("QtyR2            : "+actQtyR2            +" Value Expected : "+expQtyR2);
		 System.out.println("LPvnR2           : "+actLPvnR2           +" Value Expected : "+expLPvnR2);
		 System.out.println("LMrnR2           : "+actLMrnR2           +" Value Expected : "+expLMrnR2);
		 System.out.println("RateR2           : "+actRateR2           +" Value Expected : "+expRateR2);
		 System.out.println("GrossR2          : "+actGrossR2          +" Value Expected : "+expGrossR2);
		 System.out.println("BatchR2          : "+actBatchR2          +" Value Expected : "+expBatchR2);
		 System.out.println("BinR2            : "+actBinR2            +" Value Expected : "+expBinR2);
		 System.out.println("RmaR2            : "+actRmaR2            +" Value Expected : "+expRmaR2);
		 
		 if(actWareHouseR2.equalsIgnoreCase(expWareHouseR2) && actItemR2.equalsIgnoreCase(expItemR2) && actUnitsR2.equalsIgnoreCase(expUnitsR2) && actRdR2.equalsIgnoreCase(expRdR2)
				 && actAvgRateOR2.equalsIgnoreCase(expAvgRateOR2) && actQtyR2.equalsIgnoreCase(expQtyR2) && actLPvnR2.equalsIgnoreCase(expLPvnR2) && actLMrnR2==expLMrnR2
				 && actRateR2.equalsIgnoreCase(expRateR2) && actGrossR2.equalsIgnoreCase(expGrossR2) && actBatchR2==expBatchR2
				 && actBinR2.equalsIgnoreCase(expBinR2) && actRmaR2==expRmaR2)
		{
			System.out.println("Test Pass : DOC NO is 1");
			excelReader.setCellData(xlfile, xlSheetName, 30, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Customize Pop Up NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 30, 9, resFail);
			return false;
		}
		
	}
	
	
	@FindBy(xpath="//table[@id='RMASearchTable']/tbody/tr")
	private static List<WebElement>  searchRmaRowCount;
	
	
	
	public boolean checkPurchasesReturnsEntryRmaRItemInThirdRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		Thread.sleep(2000);
		pvWareHouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("RMA RITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.END);
		enter_UnitTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_UnitTxt.sendKeys(Keys.BACK_SPACE);
		enter_UnitTxt.sendKeys(Keys.SPACE);
		
		int unitCount=unitsListCount.size();
		
		System.err.println(unitCount);
			
		for(int i=0 ; i < unitCount ;i++)
		{
			String data=unitsListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("Pcs"))
			{
				unitsListCount.get(i).click();
				
				break;
			}
		}
			
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_6thColumn));
		select3rdRow_6thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		Thread.sleep(2000);
		enter_Quantity.sendKeys(Keys.TAB);
		
		Thread.sleep(3000);
		
		
		List<WebElement> rowCountInLinkScreen=LinkRowCount;
		
		int rowCount=rowCountInLinkScreen.size();
	
		System.out.println(rowCount);
		
		for (int i = 1; i <= rowCount; i++) 
		{
			WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
			
			WebElement itemName=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[9]"));
			
			String actvoucheno=voucherno.getText();
			
			String actitemName=itemName.getText();
			
			System.out.println(actvoucheno);
			
			System.out.println(actitemName);
			
			if(actvoucheno.equalsIgnoreCase("NDT45:1") && actitemName.equalsIgnoreCase("RMA RITEM"))
			{
				Thread.sleep(2000);
				WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
				radioBtn.click();
				
				break;
			}

		}
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
		workFlowOkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_9thColumn));
		select3rdRow_9thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardExpandBtn));
		rmaoutwardExpandBtn.click();
		
		Thread.sleep(2000);
		
		
		int rowCountRma=searchRmaRowCount.size();
	
		System.out.println(rowCountRma);
		
		for (int i = 1; i <= rowCountRma; i++) 
		{
			WebElement serialNumber=getDriver().findElement(By.xpath("//table[@id='RMASearchTable']/tbody/tr["+i+"]/td[2]"));
			
			String actserialNumber=serialNumber.getText();
			
			
			System.out.println(actserialNumber);
			
			
			if(actserialNumber.equalsIgnoreCase("Hyd@Pv1"))
			{
				Thread.sleep(2000);
				WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='RMASearchTable']/tbody/tr["+i+"]/td[1]/input"));
				radioBtn.click();
				
				break;
			}

		}
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAOkBtn));
		searchRMAOkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardOkBtn));
		rmaoutwardOkBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
		enter_RMA.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
   	 
		// Actual
		
   	 	String actWareHouseR3	=select3rdRow_1stColumn.getText();
   	 	String actItemR3		=select3rdRow_2ndColumn.getText();
   	 	String actUnitsR3		=select3rdRow_3rdColumn.getText();
   	 	String actRdR3			=select3rdRow_4thColumn.getText();
   	 	String actAvgRateOR3	=select3rdRow_5thColumn.getText(); 
   	 	String actQtyR3		    =select3rdRow_6thColumn.getText();
   	 	String actLPvnR3	    =select3rdRow_7thColumn.getText();
   	 	boolean actLMrnR3	    =select3rdRow_8thColumn.getText().isEmpty();
   	 	String actRateR3	    =select3rdRow_9thColumn.getText();
   	 	String actGrossR3		=select3rdRow_10thColumn.getText();
   	 	boolean actBatchR3		=select3rdRow_11thColumn.getText().isEmpty();
   	 	boolean actBinR3	   	=select3rdRow_12thColumn.getText().isEmpty();
   	 	String actRmaR3	        =select3rdRow_13thColumn.getText();
   	 	
   	 	
   	 	// Expected
		
   		String expWareHouseR3	="HYDERABAD";
   	 	String expItemR3		="RMA RITEM";
   	 	String expUnitsR3		="Pcs";
   	 	String expRdR3			="0.00";
   	 	String expAvgRateOR3	="13"; 
   	 	String expQtyR3		    ="1.00";
   	 	String expLPvnR3        ="NDT45:1";
   	 	boolean expLMrnR3       =true;
   	 	String expRateR3	    ="13.33";
   	 	String expGrossR3		="13.33";
   	 	boolean expBatchR3		=true;
   	 	boolean expBinR3	   	=true;
   	 	String expRmaR3	    	="Hyd@Pv1";
		
		
		 
		 
		 System.out.println("*********************************** checkPurchasesReturnsEntryRmaRItemInThirdRow  *******************************");
		 
		 System.out.println("WareHouseR3      : "+actWareHouseR3      +" Value Expected : "+expWareHouseR3);
		 System.out.println("ItemR3           : "+actItemR3           +" Value Expected : "+expItemR3);
		 System.out.println("UnitsR3          : "+actUnitsR3          +" Value Expected : "+expUnitsR3);
		 System.out.println("RdR3          	  : "+actRdR3          	  +" Value Expected : "+expRdR3);
		 System.out.println("AvgRateOR3       : "+actAvgRateOR3       +" Value Expected : "+expAvgRateOR3);
		 System.out.println("QtyR3            : "+actQtyR3            +" Value Expected : "+expQtyR3);
		 System.out.println("LPvnR3           : "+actLPvnR3           +" Value Expected : "+expLPvnR3);
		 System.out.println("LMrnR3           : "+actLMrnR3           +" Value Expected : "+expLMrnR3);
		 System.out.println("RateR3           : "+actRateR3           +" Value Expected : "+expRateR3);
		 System.out.println("GrossR3          : "+actGrossR3          +" Value Expected : "+expGrossR3);
		 System.out.println("BatchR3          : "+actBatchR3          +" Value Expected : "+expBatchR3);
		 System.out.println("BinR3            : "+actBinR3            +" Value Expected : "+expBinR3);
		 System.out.println("RmaR3            : "+actRmaR3            +" Value Expected : "+expRmaR3);
		 
		 if(actWareHouseR3.equalsIgnoreCase(expWareHouseR3) && actItemR3.equalsIgnoreCase(expItemR3) && actUnitsR3.equalsIgnoreCase(expUnitsR3) && actRdR3.equalsIgnoreCase(expRdR3)
				 && actAvgRateOR3.equalsIgnoreCase(expAvgRateOR3) && actQtyR3.equalsIgnoreCase(expQtyR3) && actLPvnR3.equalsIgnoreCase(expLPvnR3) && actLMrnR3==expLMrnR3
				 && actRateR3.equalsIgnoreCase(expRateR3) && actGrossR3.equalsIgnoreCase(expGrossR3) && actBatchR3==expBatchR3
				 && actBinR3==expBinR3 && actRmaR3.equalsIgnoreCase(expRmaR3))
		{
			System.out.println("Test Pass : DOC NO is 1");
			excelReader.setCellData(xlfile, xlSheetName, 30, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Customize Pop Up NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 30, 9, resFail);
			return false;
		}
		
	}

	
	
	


	public boolean checkPurchasesReturnsEntryBatchBrItemInFourthRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		Thread.sleep(2000);
		pvWareHouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("BATCH BR ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.END);
		enter_UnitTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_UnitTxt.sendKeys(Keys.BACK_SPACE);
		enter_UnitTxt.sendKeys(Keys.SPACE);
		
		int unitCount=unitsListCount.size();
		
		System.err.println(unitCount);
			
		for(int i=0 ; i < unitCount ;i++)
		{
			String data=unitsListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("Pcs"))
			{
				unitsListCount.get(i).click();
				
				break;
			}
		}
			
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_6thColumn));
		select4thRow_6thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		Thread.sleep(2000);
		enter_Quantity.sendKeys(Keys.TAB);
		
		Thread.sleep(3000);
		
		
		
		List<WebElement> rowCountInLinkScreen=LinkRowCount;
		
		int rowCount=rowCountInLinkScreen.size();
	
		System.out.println(rowCount);
		
		for (int i = 1; i <= rowCount; i++) 
		{
			WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
			
			WebElement itemName=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[9]"));
			
			String actvoucheno=voucherno.getText();
			
			String actitemName=itemName.getText();
			
			System.out.println(actvoucheno);
			
			System.out.println(actitemName);
			
			if(actvoucheno.equalsIgnoreCase("NDT45:1") && actitemName.equalsIgnoreCase("BATCH BR ITEM"))
			{
				Thread.sleep(2000);
				WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
				radioBtn.click();
				
				break;
			}

		}
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
		workFlowOkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_9thColumn));
		select4thRow_9thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		List<WebElement> batchrowcount=batchPopUPRowCount;
		
		int batchrowcount1=batchrowcount.size();
	
		System.out.println(batchrowcount1);
		
		for (int i = 1; i <= batchrowcount1; i++) 
		{
			WebElement batchno=getDriver().findElement(By.xpath("//tbody[@id='Id_MRPBatch_Grid_body']/tr["+i+"]/td[2]"));
			
			
			String actbatchno=batchno.getText();
			
			
			System.out.println(actbatchno);
			
			
			if(actbatchno.equalsIgnoreCase("PVHBR") )
			{
				Thread.sleep(2000);
				WebElement index=getDriver().findElement(By.xpath("//tbody[@id='Id_MRPBatch_Grid_body']/tr["+i+"]/td[1]"));
				getAction().doubleClick(index).build().perform();
				
				break;
			}

		}
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_1stColumn));
   	 
		// Actual
		
   	 	String actWareHouseR4	=select4thRow_1stColumn.getText();
   	 	String actItemR4		=select4thRow_2ndColumn.getText();
   	 	String actUnitsR4		=select4thRow_3rdColumn.getText();
   	 	String actRdR4			=select4thRow_4thColumn.getText();
   	 	String actAvgRateOR4	=select4thRow_5thColumn.getText(); 
   	 	String actQtyR4		    =select4thRow_6thColumn.getText();
   	 	String actLPvnR4	    =select4thRow_7thColumn.getText();
   	 	boolean actLMrnR4	    =select4thRow_8thColumn.getText().isEmpty();
   	 	String actRateR4	    =select4thRow_9thColumn.getText();
   	 	String actGrossR4		=select4thRow_10thColumn.getText();
   	 	String actBatchR4		=select4thRow_11thColumn.getText();
   	 	boolean actBinR4	    =select4thRow_12thColumn.getText().isEmpty();
   	 	boolean actRmaR4	    =select4thRow_13thColumn.getText().isEmpty();
   	 	
   	 	
   	 	// Expected
		
   		String expWareHouseR4	="HYDERABAD";
   	 	String expItemR4		="BATCH BR ITEM";
   	 	String expUnitsR4		="Pcs";
   	 	String expRdR4			="0.00";
   	 	String expAvgRateOR4	="0"; 
   	 	String expQtyR4		    ="1.00";
   	 	String expLPvnR4        ="NDT45:1";
   	 	boolean expLMrnR4       =true;
   	 	String expRateR4	    ="0.83";
   	 	String expGrossR4		="0.83";
   	 	String expBatchR4		="PVHBR";
   	 	boolean expBinR4	    =true;
   	 	boolean expRmaR4	    =true;
		
		
		 
		 
		 System.out.println("*********************************** checkPurchasesReturnsEntryBatchBrItemInFourthRow  *******************************");
		 
		 System.out.println("WareHouseR4      : "+actWareHouseR4      +" Value Expected : "+expWareHouseR4);
		 System.out.println("ItemR4           : "+actItemR4           +" Value Expected : "+expItemR4);
		 System.out.println("UnitsR4          : "+actUnitsR4          +" Value Expected : "+expUnitsR4);
		 System.out.println("RdR4          	  : "+actRdR4          	  +" Value Expected : "+expRdR4);
		 System.out.println("AvgRateOR4       : "+actAvgRateOR4       +" Value Expected : "+expAvgRateOR4);
		 System.out.println("QtyR4            : "+actQtyR4            +" Value Expected : "+expQtyR4);
		 System.out.println("LPvnR4           : "+actLPvnR4           +" Value Expected : "+expLPvnR4);
		 System.out.println("LMrnR4           : "+actLMrnR4           +" Value Expected : "+expLMrnR4);
		 System.out.println("RateR4           : "+actRateR4           +" Value Expected : "+expRateR4);
		 System.out.println("GrossR4          : "+actGrossR4          +" Value Expected : "+expGrossR4);
		 System.out.println("BatchR4          : "+actBatchR4          +" Value Expected : "+expBatchR4);
		 System.out.println("BinR4            : "+actBinR4            +" Value Expected : "+expBinR4);
		 System.out.println("RmaR4            : "+actRmaR4            +" Value Expected : "+expRmaR4);
		 
		 if(actWareHouseR4.equalsIgnoreCase(expWareHouseR4) && actItemR4.equalsIgnoreCase(expItemR4) && actUnitsR4.equalsIgnoreCase(expUnitsR4) && actRdR4.equalsIgnoreCase(expRdR4)
				 && actAvgRateOR4.equalsIgnoreCase(expAvgRateOR4) && actQtyR4.equalsIgnoreCase(expQtyR4) && actLPvnR4.equalsIgnoreCase(expLPvnR4) && actLMrnR4==expLMrnR4
				 && actRateR4.equalsIgnoreCase(expRateR4) && actGrossR4.equalsIgnoreCase(expGrossR4) && actBatchR4.equalsIgnoreCase(expBatchR4)
				 && actBinR4==expBinR4 && actRmaR4==expRmaR4)
		{
			System.out.println("Test Pass : DOC NO is 1");
			excelReader.setCellData(xlfile, xlSheetName, 30, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Customize Pop Up NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 30, 9, resFail);
			return false;
		}
		
	}
	
	
	
	
	public boolean checkPurchasesReturnsEntryStockItemInFifthRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys(Keys.END);
		pvWareHouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		Thread.sleep(2000);
		pvWareHouseTxt.sendKeys(Keys.SPACE);
			
		int warehousecount=pvwareHouseListCount.size();
		
		System.err.println(warehousecount);
			
		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=pvwareHouseListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("MUMBAI"))
			{
				pvwareHouseListCount.get(i).click();
				
				break;
			}
		}
			
		pvWareHouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("STOCK ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.END);
		enter_UnitTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_UnitTxt.sendKeys(Keys.BACK_SPACE);
		enter_UnitTxt.sendKeys(Keys.SPACE);
		
		int unitCount=unitsListCount.size();
		
		System.err.println(unitCount);
			
		for(int i=0 ; i < unitCount ;i++)
		{
			String data=unitsListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("Pcs"))
			{
				unitsListCount.get(i).click();
				
				break;
			}
		}
			
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_6thColumn));
		select5thRow_6thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		Thread.sleep(2000);
		enter_Quantity.sendKeys(Keys.TAB);
		
		Thread.sleep(3000);
		
		List<WebElement> rowCountInLinkScreen=LinkRowCount;
		
		int rowCount=rowCountInLinkScreen.size();
	
		System.out.println(rowCount);
		
		for (int i = 1; i <= rowCount; i++) 
		{
			WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
			
			WebElement itemName=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[9]"));
			
			String actvoucheno=voucherno.getText();
			
			String actitemName=itemName.getText();
			
			System.out.println(actvoucheno);
			
			System.out.println(actitemName);
			
			if(actvoucheno.equalsIgnoreCase("NDT45:7") && actitemName.equalsIgnoreCase("STOCK ITEM"))
			{
				Thread.sleep(2000);
				WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
				radioBtn.click();
				
				break;
			}

		}
		

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
		workFlowOkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_9thColumn));
		select5thRow_9thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_1stColumn));
   	 
		// Actual
		
   	 	String actWareHouseR5	=select5thRow_1stColumn.getText();
   	 	String actItemR5		=select5thRow_2ndColumn.getText();
   	 	String actUnitsR5		=select5thRow_3rdColumn.getText();
   	 	String actRdR5			=select5thRow_4thColumn.getText();
   	 	String actAvgRateOR5	=select5thRow_5thColumn.getText(); 
   	 	String actQtyR5		    =select5thRow_6thColumn.getText();
   	 	String actLPvnR5	    =select5thRow_7thColumn.getText();
   	 	boolean actLMrnR5	    =select5thRow_8thColumn.getText().isEmpty();
   	 	String actRateR5	    =select5thRow_9thColumn.getText();
   	 	String actGrossR5		=select5thRow_10thColumn.getText();
   	 	boolean actBatchR5		=select5thRow_11thColumn.getText().isEmpty();
   	 	boolean actBinR5	   	=select5thRow_12thColumn.getText().isEmpty();
   	 	boolean actRmaR5	    =select5thRow_13thColumn.getText().isEmpty();
   	 	
   	 	
   	 	// Expected
		
   		String expWareHouseR5	="MUMBAI";
   	 	String expItemR5		="STOCK ITEM";
   	 	String expUnitsR5		="Pcs";
   	 	String expRdR5			="0.00";
   	 	String expAvgRateOR5	="4"; 
   	 	String expQtyR5		    ="1.00";
   	 	String expLPvnR5       ="NDT45:7";;
   	 	boolean expLMrnR5       =true;
   	 	String expRateR5	    ="4.08";
   	 	String expGrossR5		="4.08";
   	 	boolean expBatchR5		=true;
   	 	boolean expBinR5	   	=true;
   	 	boolean expRmaR5	   	=true;
		
		
		 
		 
		 System.out.println("*********************************** checkPurchasesReturnsEntryStockItemInFifthRow  *******************************");
		 
		 System.out.println("WareHouseR5      : "+actWareHouseR5      +" Value Expected : "+expWareHouseR5);
		 System.out.println("ItemR5           : "+actItemR5           +" Value Expected : "+expItemR5);
		 System.out.println("UnitsR5          : "+actUnitsR5          +" Value Expected : "+expUnitsR5);
		 System.out.println("RdR5          	  : "+actRdR5          	  +" Value Expected : "+expRdR5);
		 System.out.println("AvgRateOR5       : "+actAvgRateOR5       +" Value Expected : "+expAvgRateOR5);
		 System.out.println("QtyR5            : "+actQtyR5            +" Value Expected : "+expQtyR5);
		 System.out.println("LPvnR5           : "+actLPvnR5           +" Value Expected : "+expLPvnR5);
		 System.out.println("LMrnR5           : "+actLMrnR5           +" Value Expected : "+expLMrnR5);
		 System.out.println("RateR5           : "+actRateR5           +" Value Expected : "+expRateR5);
		 System.out.println("GrossR5          : "+actGrossR5          +" Value Expected : "+expGrossR5);
		 System.out.println("BatchR5          : "+actBatchR5          +" Value Expected : "+expBatchR5);
		 System.out.println("BinR5            : "+actBinR5            +" Value Expected : "+expBinR5);
		 System.out.println("RmaR5            : "+actRmaR5            +" Value Expected : "+expRmaR5);
		 
		 if(actWareHouseR5.equalsIgnoreCase(expWareHouseR5) && actItemR5.equalsIgnoreCase(expItemR5) && actUnitsR5.equalsIgnoreCase(expUnitsR5) && actRdR5.equalsIgnoreCase(expRdR5)
				 && actAvgRateOR5.equalsIgnoreCase(expAvgRateOR5) && actQtyR5.equalsIgnoreCase(expQtyR5) && actLPvnR5.equalsIgnoreCase(expLPvnR5) && actLMrnR5==expLMrnR5
				 && actRateR5.equalsIgnoreCase(expRateR5) && actGrossR5.equalsIgnoreCase(expGrossR5) && actBatchR5==expBatchR5
				 && actBinR5==expBinR5 && actRmaR5==expRmaR5)
		{
			System.out.println("Test Pass : DOC NO is 1");
			excelReader.setCellData(xlfile, xlSheetName, 30, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Customize Pop Up NOT Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 30, 9, resFail);
			return false;
		}
		
	}
	

	public boolean checkSavingPurchasesReturnsWithAllItems() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
 		saveBtn.click();
 		
 		Thread.sleep(2000);
	
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(breakUpByTagTab));
 		breakUpByTagTab.click();
 		
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
 		billRefNewReferenceTxt.click();

 		
 		String actBillNewReference,actBillAmtAdjAgainstNewRefInOtherVouchers,actBillTransactionCurrency,actBillBaseCurrency,actBillLocalCurrency,actBillBalanceNewRefAmount,actBillBreakUpByTagDepartment,actBillBreakUpByTagBaseCurrency,actBillBreakUpByTagBillCurrency,actBillBreakUpByTagLocalCurrency,actBillAmtAdjustedInTransactionCurrency,actBillBalanceAmtToBeAdjustedInTransactionCurrency,act13;
 		String expBillNewReference,expBillAmtAdjAgainstNewRefInOtherVouchers,expBillTransactionCurrency,expBillBaseCurrency,expBillLocalCurrency,expBillBalanceNewRefAmount,expBillBreakUpByTagDepartment,expBillBreakUpByTagBaseCurrency,expBillBreakUpByTagBillCurrency,expBillBreakUpByTagLocalCurrency,expBillAmtAdjustedInTransactionCurrency,expBillBalanceAmtToBeAdjustedInTransactionCurrency;
 		
 		actBillNewReference									=billRefNewReferenceTxt.getAttribute("value");
 		actBillAmtAdjAgainstNewRefInOtherVouchers			=amtAdjustedAgainstNewREfinOtherVouchers.getText();
 		actBillTransactionCurrency							=transactionCurency.getText();
 		actBillBaseCurrency									=baseCurrency.getText();
 		actBillLocalCurrency								=localCurrencyDhs.getText();
 		
 		actBillBalanceNewRefAmount							=balanceNewReferenceAmt.getText();
 		
 		actBillBreakUpByTagDepartment						=breakUpByTagDepartment.getText();
 		actBillBreakUpByTagBaseCurrency						=breakUpByTagBaseCurrency.getText();
 		actBillBreakUpByTagBillCurrency						=breakUpByTagBillCurrency.getText();
 		
 		actBillBreakUpByTagLocalCurrency					=breakUpByTagBaseLocalCurrency.getText();
 		actBillAmtAdjustedInTransactionCurrency				=billRefAdjustAmountInTransCurency.getText();
 		actBillBalanceAmtToBeAdjustedInTransactionCurrency	=billRefBalanceAmountAdjustInTrnasCurrency.getText();
 		
 		
 		expBillNewReference									="0.00";
 		expBillAmtAdjAgainstNewRefInOtherVouchers			="0.00";
 		expBillTransactionCurrency							="19.63";
 		expBillBaseCurrency									="19.63";
 		expBillLocalCurrency								="1.37";
 		
 		expBillBalanceNewRefAmount							="0.00";
 		
 		expBillBreakUpByTagDepartment						="INDIA";
 		expBillBreakUpByTagBillCurrency						="19.63";
 		expBillBreakUpByTagBaseCurrency						="19.63";
 		
 		
 		expBillBreakUpByTagLocalCurrency					="1.37";
 		expBillAmtAdjustedInTransactionCurrency				="0";
 		expBillBalanceAmtToBeAdjustedInTransactionCurrency	="19.63";
 	

 		System.out.println("*********************************** checkSavingPurchasesReturnsWithAllItems  ************************************");


 		System.out.println("actBillNewReference								   : "+ actBillNewReference									+" Value Expected : "+expBillNewReference);
 		System.out.println("actBillAmtAdjAgainstNewRefInOtherVouchers		   : "+actBillAmtAdjAgainstNewRefInOtherVouchers			+" Value Expected : "+expBillAmtAdjAgainstNewRefInOtherVouchers);
 		System.out.println("actBillTransactionCurrency						   : "+actBillTransactionCurrency							+" Value Expected : "+expBillTransactionCurrency);
 		System.out.println("actBillBaseCurrency								   : "+actBillBaseCurrency									+" Value Expected : "+ expBillBaseCurrency);
 		System.out.println("actBillLocalCurrency							   : "+actBillLocalCurrency									+" Value Expected : "+expBillLocalCurrency);
 		System.out.println("actBillBalanceNewRefAmount						   : "+ actBillBalanceNewRefAmount							+" Value Expected : "+expBillBalanceNewRefAmount);
        System.out.println("actBillBreakUpByTagDepartment					   : "+actBillBreakUpByTagDepartment						+" Value Expected : "+expBillBreakUpByTagDepartment);
 		System.out.println("actBillBreakUpByTagBaseCurrency				       : "+actBillBreakUpByTagBaseCurrency						+" Value Expected : "+expBillBreakUpByTagBaseCurrency);
 		System.out.println("actBillBreakUpByTagBillCurrency 				   : "+actBillBreakUpByTagBillCurrency						+" Value Expected : "+expBillBreakUpByTagBillCurrency);
 		System.out.println("actBillBreakUpByTagLocalCurrency				   : "+actBillBreakUpByTagLocalCurrency						+" Value Expected : "+expBillBreakUpByTagLocalCurrency);
 		System.out.println("actBillAmtAdjustedInTransactionCurrency			   : "+actBillAmtAdjustedInTransactionCurrency				+" Value Expected : "+expBillAmtAdjustedInTransactionCurrency);
 		System.out.println("actBillBalanceAmtToBeAdjustedInTransactionCurrency : "+actBillBalanceAmtToBeAdjustedInTransactionCurrency	+" Value Expected : "+expBillBalanceAmtToBeAdjustedInTransactionCurrency);
 		
 		   
 	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
	    billRefPickIcon.click();
	   
	    //pick button is click
	   
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(breakUpByTagTab));
 		breakUpByTagTab.click();
 		
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
 		billRefNewReferenceTxt.click();
 		
 		
 		String actBillNewReferencePick,actBillAmtAdjAgainstNewRefInOtherVouchersPick,actBillTransactionCurrencyPick,actBillBaseCurrencyPick,actBillLocalCurrencyPick,actBillBalanceNewRefAmountPick,actBillBreakUpByTagDepartmentPick,actBillBreakUpByTagBaseCurrencyPick,actBillBreakUpByTagBillCurrencyPick,actBillBreakUpByTagLocalCurrencyPick,actBillAmtAdjustedInTransactionCurrencyPick,actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick;
 		String expBillNewReferencePick,expBillAmtAdjAgainstNewRefInOtherVouchersPick,expBillTransactionCurrencyPick,expBillBaseCurrencyPick,expBillLocalCurrencyPick,expBillBalanceNewRefAmountPick,expBillBreakUpByTagDepartmentPick,expBillBreakUpByTagBaseCurrencyPick,expBillBreakUpByTagBillCurrencyPick,expBillBreakUpByTagLocalCurrencyPick,expBillAmtAdjustedInTransactionCurrencyPick,expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick;
 		
 		actBillNewReferencePick									=billRefNewReferenceTxt.getAttribute("value");
 		actBillAmtAdjAgainstNewRefInOtherVouchersPick			=amtAdjustedAgainstNewREfinOtherVouchers.getText();
 		actBillTransactionCurrencyPick							=transactionCurency.getText();
 		actBillBaseCurrencyPick									=baseCurrency.getText();
 		actBillLocalCurrencyPick								=localCurrencyDhs.getText();
 		
 		actBillBalanceNewRefAmountPick							=balanceNewReferenceAmt.getText();
 		
 		actBillBreakUpByTagDepartmentPick						=breakUpByTagDepartment.getText();
 		actBillBreakUpByTagBaseCurrencyPick						=breakUpByTagBaseCurrency.getText();
 		actBillBreakUpByTagBillCurrencyPick						=breakUpByTagBillCurrency.getText();
 		
 		actBillBreakUpByTagLocalCurrencyPick					=breakUpByTagBaseLocalCurrency.getText();
 		actBillAmtAdjustedInTransactionCurrencyPick				=billRefAdjustAmountInTransCurency.getText();
 		actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	=billRefBalanceAmountAdjustInTrnasCurrency.getText();
 		
 		
 		expBillNewReferencePick									="19.63";
 		expBillAmtAdjAgainstNewRefInOtherVouchersPick			="0.00";
 		expBillTransactionCurrencyPick							="19.63";
 		expBillBaseCurrencyPick									="19.63";
 		expBillLocalCurrencyPick								="1.37";
 		
 		expBillBalanceNewRefAmountPick							="19.63";
 		
 		expBillBreakUpByTagDepartmentPick						="INDIA";
 		expBillBreakUpByTagBillCurrencyPick						="19.63";
 		expBillBreakUpByTagBaseCurrencyPick						="19.63";
 		
 		
 		expBillBreakUpByTagLocalCurrencyPick					="1.37";
 		expBillAmtAdjustedInTransactionCurrencyPick				="19.63";
 		expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	="0.00";

 		System.out.println("actBillNewReferencePick 								: "+actBillNewReferencePick									+ " Value Expected : "+expBillNewReferencePick);
 		System.out.println("actBillAmtAdjAgainstNewRefInOtherVouchersPick			: " + actBillAmtAdjAgainstNewRefInOtherVouchersPick			+ "	Value Expected : "+expBillAmtAdjAgainstNewRefInOtherVouchersPick);
 		System.out.println("actBillTransactionCurrencyPick							: "+ actBillTransactionCurrencyPick							+ " Value Expected : "+expBillTransactionCurrencyPick);
 		System.out.println("actBillBaseCurrencyPick									: "+ actBillBaseCurrencyPick								+ " Value Expected : "+expBillBaseCurrencyPick);
 		System.out.println("actBillLocalCurrencyPick								: "+ actBillLocalCurrencyPick								+ " Value Expected : "+expBillLocalCurrencyPick);
 		System.out.println("actBillBalanceNewRefAmountPick							: "+ actBillBalanceNewRefAmountPick							+ " Value Expected : "+expBillBalanceNewRefAmountPick);
        System.out.println("actBillBreakUpByTagDepartmentPick						: "+ actBillBreakUpByTagDepartmentPick						+ " Value Expected : "+expBillBreakUpByTagDepartmentPick);
 		System.out.println("actBillBreakUpByTagBaseCurrencyPick						: "+ actBillBreakUpByTagBaseCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagBaseCurrencyPick);
 		System.out.println("actBillBreakUpByTagBillCurrencyPick						: "+ actBillBreakUpByTagBillCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagBillCurrencyPick);
 		System.out.println("actBillBreakUpByTagLocalCurrencyPick					: "+ actBillBreakUpByTagLocalCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagLocalCurrencyPick);
 		System.out.println("actBillAmtAdjustedInTransactionCurrencyPick				: "+ actBillAmtAdjustedInTransactionCurrencyPick			+ " Value Expected : "+expBillAmtAdjustedInTransactionCurrencyPick);
 		System.out.println("actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick  : "+ actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	+ " Value Expected : "+expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick);


 			    
 		
 	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
 	    Bill_OkBtn.click();
	   
	  
 		
		String ExpMessage="This Transaction will make the Stock Negative";
		
		String validationMessage=checkValidationMessage(ExpMessage);
		
		boolean savingMessage=checkVoucherSavingMessage(docno);
		
		
		System.out.println("validationMessage  	:  "+validationMessage +" Value Expected : "+ExpMessage);
		
		System.out.println("SavingMessage  		:  "+savingMessage +" Value Expected : "+"TRUE");
		
		if(validationMessage.equalsIgnoreCase(ExpMessage) && savingMessage==true &&  
				
		        actBillNewReference.equalsIgnoreCase(expBillNewReference) &&
 				actBillAmtAdjAgainstNewRefInOtherVouchers.equalsIgnoreCase(expBillAmtAdjAgainstNewRefInOtherVouchers) &&
 				actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 				
 				actBillBaseCurrency.equalsIgnoreCase(actBillBaseCurrency) &&
 				actBillLocalCurrency.equalsIgnoreCase(actBillLocalCurrency) &&
 				actBillBalanceNewRefAmount.equalsIgnoreCase(actBillBalanceNewRefAmount) &&
 				actBillBreakUpByTagDepartment.equalsIgnoreCase(actBillBreakUpByTagDepartment) &&
 				actBillBreakUpByTagBaseCurrency.equalsIgnoreCase(actBillBreakUpByTagBaseCurrency) &&
 				actBillBreakUpByTagBillCurrency.equalsIgnoreCase(actBillBreakUpByTagBillCurrency) &&
 				actBillBreakUpByTagLocalCurrency.equalsIgnoreCase(actBillBreakUpByTagLocalCurrency) &&
 				actBillAmtAdjustedInTransactionCurrency.equalsIgnoreCase(actBillAmtAdjustedInTransactionCurrency) &&
 				actBillBalanceAmtToBeAdjustedInTransactionCurrency.equalsIgnoreCase(actBillBalanceAmtToBeAdjustedInTransactionCurrency) &&
		
 				
 				actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) &&
 				actBillAmtAdjAgainstNewRefInOtherVouchersPick.equalsIgnoreCase(expBillAmtAdjAgainstNewRefInOtherVouchersPick) &&
 				actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) &&
 				actBillBaseCurrencyPick.equalsIgnoreCase(actBillBaseCurrencyPick) &&
 				actBillLocalCurrencyPick.equalsIgnoreCase(actBillLocalCurrencyPick) &&
 				actBillBalanceNewRefAmountPick.equalsIgnoreCase(actBillBalanceNewRefAmountPick) &&
 				actBillBreakUpByTagDepartmentPick.equalsIgnoreCase(actBillBreakUpByTagDepartmentPick) &&
 				actBillBreakUpByTagBaseCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagBaseCurrencyPick) &&
 				actBillBreakUpByTagBillCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagBillCurrencyPick) &&
 				actBillBreakUpByTagLocalCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagLocalCurrencyPick) &&
 				actBillAmtAdjustedInTransactionCurrencyPick.equalsIgnoreCase(actBillAmtAdjustedInTransactionCurrencyPick) &&
 				actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick.equalsIgnoreCase(actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick))
		{
		
			
			return true;
			
		}
		else
		{
			return false;
		}
	}
	
	
	
	
	
	
	public boolean checkPurchasesReturnsSavedVoucherWithAllItemsOnPreviousOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();
		
		boolean loading=checkLoadingMessage();
		
		System.out.println("VoucherLoadingMessage  : "+loading +" Value Expected : "+"TRUE");
				
		Thread.sleep(5000);
		
		
		// Actual
		
		String actdocumentNumberTxt		=documentNumberTxt.getAttribute("value");
		String actpurchaseAccountTxt	=purchaseAccountTxt.getAttribute("value");
		String actvendorAccountTxt		=vendorAccountTxt.getAttribute("value");
		String actdepartmentTxt			=departmentTxt.getAttribute("value");
		
		
		String expdocumentNumberTxt		="1";
		String exppurchaseAccountTxt	="PURCHASE";
		String expvendorAccountTxt		="VENDOR A";
		String expdepartmentTxt			="INDIA";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
	   	
		// First Row
		// Actual
		
   	 	String actWareHouseR1	=select1stRow_1stColumn.getText();
   	 	String actItemR1		=select1stRow_2ndColumn.getText();
   	 	String actUnitsR1		=select1stRow_3rdColumn.getText();
   	 	String actRdR1			=select1stRow_4thColumn.getText();
   	 	String actAvgRateOR1	=select1stRow_5thColumn.getText(); 
   	 	String actQtyR1		    =select1stRow_6thColumn.getText();
   	 	String actLPvnR1	    =select1stRow_7thColumn.getText();
   	 	boolean actLMrnR1	    =select1stRow_8thColumn.getText().isEmpty();
   	 	String actRateR1	    =select1stRow_9thColumn.getText();
   	 	String actGrossR1		=select1stRow_10thColumn.getText();
   	 	String actBatchR1		=select1stRow_11thColumn.getText();
   	 	boolean actBinR1	    =select1stRow_12thColumn.getText().isEmpty();
   	 	boolean actRmaR1	    =select1stRow_13thColumn.getText().isEmpty();
   	 	
   	 	
   	 	// Expected
		
   		String expWareHouseR1	="HYDERABAD";
   	 	String expItemR1		="BATCH WA ITEM";
   	 	String expUnitsR1		="Pcs";
   	 	String expRdR1			="0.00";
   	 	String expAvgRateOR1	="1"; 
   	 	String expQtyR1		    ="1.00";
   	 	String expLPvnR1        ="NDT45:1";
   	 	boolean expLMrnR1       =true;
   	 	String expRateR1	    ="1.11";
   	 	String expGrossR1		="1.11";
   	 	String expBatchR1		="PVHWA";
   	 	boolean expBinR1	    =true;
   	 	boolean expRmaR1	    =true;
   	 	
   	 	
   	 	// Second Row
   	 	// Actual
		
   	 	String actWareHouseR2	=select2ndRow_1stColumn.getText();
   	 	String actItemR2		=select2ndRow_2ndColumn.getText();
   	 	String actUnitsR2		=select2ndRow_3rdColumn.getText();
   	 	String actRdR2			=select2ndRow_4thColumn.getText();
   	 	String actAvgRateOR2	=select2ndRow_5thColumn.getText(); 
   	 	String actQtyR2		    =select2ndRow_6thColumn.getText();
   	 	String actLPvnR2	    =select2ndRow_7thColumn.getText();
   	 	boolean actLMrnR2	    =select2ndRow_8thColumn.getText().isEmpty();
   	 	String actRateR2	    =select2ndRow_9thColumn.getText();
   	 	String actGrossR2		=select2ndRow_10thColumn.getText();
   	 	boolean actBatchR2		=select2ndRow_11thColumn.getText().isEmpty();
   	 	String actBinR2	    	=select2ndRow_12thColumn.getText();
   	 	boolean actRmaR2	    =select2ndRow_13thColumn.getText().isEmpty();
   	 	
   	 	
   	 	// Expected
		
   		String expWareHouseR2	="HYDERABAD";
   	 	String expItemR2		="BIN FINISHED GOODS ITEM";
   	 	String expUnitsR2		="Pcs";
   	 	String expRdR2			="0.00";
   	 	String expAvgRateOR2	="1"; 
   	 	String expQtyR2		    ="1.00";
   	 	String expLPvnR2        ="NDT45:1";
   	 	boolean expLMrnR2       =true;
   	 	String expRateR2	    ="1.11";
   	 	String expGrossR2		="1.11";
   	 	boolean expBatchR2		=true;
   	 	String expBinR2	    	="Bin4";
   	 	boolean expRmaR2	    =true;
		
   	 	// Third Row
   	 	// Actual
		
   	 	String actWareHouseR3	=select3rdRow_1stColumn.getText();
   	 	String actItemR3		=select3rdRow_2ndColumn.getText();
   	 	String actUnitsR3		=select3rdRow_3rdColumn.getText();
   	 	String actRdR3			=select3rdRow_4thColumn.getText();
   	 	String actAvgRateOR3	=select3rdRow_5thColumn.getText(); 
   	 	String actQtyR3		    =select3rdRow_6thColumn.getText();
   	 	String actLPvnR3	    =select3rdRow_7thColumn.getText();
   	 	boolean actLMrnR3	    =select3rdRow_8thColumn.getText().isEmpty();
   	 	String actRateR3	    =select3rdRow_9thColumn.getText();
   	 	String actGrossR3		=select3rdRow_10thColumn.getText();
   	 	boolean actBatchR3		=select3rdRow_11thColumn.getText().isEmpty();
   	 	boolean actBinR3	   	=select3rdRow_12thColumn.getText().isEmpty();
   	 	String actRmaR3	        =select3rdRow_13thColumn.getText();
   	 	
   	 	
   	 	// Expected
		
   		String expWareHouseR3	="HYDERABAD";
   	 	String expItemR3		="RMA RITEM";
   	 	String expUnitsR3		="Pcs";
   	 	String expRdR3			="0.00";
   	 	String expAvgRateOR3	="13"; 
   	 	String expQtyR3		    ="1.00";
   	 	String expLPvnR3        ="NDT45:1";
   	 	boolean expLMrnR3       =true;
   	 	String expRateR3	    ="13.33";
   	 	String expGrossR3		="13.33";
   	 	boolean expBatchR3		=true;
   	 	boolean expBinR3	   	=true;
   	 	String expRmaR3	    	="Hyd@Pv1";
   	 	
   	 	// Fourth Row
   	 	
   	 	String actWareHouseR4	=select4thRow_1stColumn.getText();
	 	String actItemR4		=select4thRow_2ndColumn.getText();
	 	String actUnitsR4		=select4thRow_3rdColumn.getText();
	 	String actRdR4			=select4thRow_4thColumn.getText();
	 	String actAvgRateOR4	=select4thRow_5thColumn.getText(); 
	 	String actQtyR4		    =select4thRow_6thColumn.getText();
	 	String actLPvnR4	    =select4thRow_7thColumn.getText();
	 	boolean actLMrnR4	    =select4thRow_8thColumn.getText().isEmpty();
	 	String actRateR4	    =select4thRow_9thColumn.getText();
	 	String actGrossR4		=select4thRow_10thColumn.getText();
	 	String actBatchR4		=select4thRow_11thColumn.getText();
	 	boolean actBinR4	    =select4thRow_12thColumn.getText().isEmpty();
	 	boolean actRmaR4	    =select4thRow_13thColumn.getText().isEmpty();
	 	
	 	
	 	// Expected
		
		String expWareHouseR4	="HYDERABAD";
	 	String expItemR4		="BATCH BR ITEM";
	 	String expUnitsR4		="Pcs";
	 	String expRdR4			="0.00";
	 	String expAvgRateOR4	="2"; 
	 	String expQtyR4		    ="1.00";
	 	String expLPvnR4        ="NDT45:1";
	 	boolean expLMrnR4       =true;
	 	String expRateR4	    ="0.00";
	 	String expGrossR4		="0.00";
	 	String expBatchR4		="PVHBR";
	 	boolean expBinR4	    =true;
	 	boolean expRmaR4	    =true;
   	 	
   	 	
   	 	// Fifth Row
   	 	// Actual
		
   	 	String actWareHouseR5	=select5thRow_1stColumn.getText();
   	 	String actItemR5		=select5thRow_2ndColumn.getText();
   	 	String actUnitsR5		=select5thRow_3rdColumn.getText();
   	 	String actRdR5			=select5thRow_4thColumn.getText();
   	 	String actAvgRateOR5	=select5thRow_5thColumn.getText(); 
   	 	String actQtyR5		    =select5thRow_6thColumn.getText();
   	 	String actLPvnR5	    =select5thRow_7thColumn.getText();
   	 	boolean actLMrnR5	    =select5thRow_8thColumn.getText().isEmpty();
   	 	String actRateR5	    =select5thRow_9thColumn.getText();
   	 	String actGrossR5		=select5thRow_10thColumn.getText();
   	 	boolean actBatchR5		=select5thRow_11thColumn.getText().isEmpty();
   	 	boolean actBinR5	   	=select5thRow_12thColumn.getText().isEmpty();
   	 	boolean actRmaR5	    =select5thRow_13thColumn.getText().isEmpty();
   	 	
   	 	
   	 	// Expected
		
   		String expWareHouseR5	="MUMBAI";
   	 	String expItemR5		="STOCK ITEM";
   	 	String expUnitsR5		="Pcs";
   	 	String expRdR5			="0.00";
   	 	String expAvgRateOR5	="4"; 
   	 	String expQtyR5		    ="1.00";
   	 	String expLPvnR5      	="NDT45:7";
   	 	boolean expLMrnR5       =true;
   	 	String expRateR5	    ="4.08";
   	 	String expGrossR5		="4.08";
   	 	boolean expBatchR5		=true;
   	 	boolean expBinR5	   	=true;
   	 	boolean expRmaR5	   	=true;
		
		
		 
		 
		 System.out.println("*********************************** checkPurchasesReturnsSavedVoucherWithAllItemsOnPreviousOption  *******************************");
		 
		 System.out.println("documentNumberTxt      : "+actdocumentNumberTxt      +" Value Expected : "+expdocumentNumberTxt);
		 System.out.println("purchaseAccountTxt     : "+actpurchaseAccountTxt     +" Value Expected : "+exppurchaseAccountTxt);
		 System.out.println("vendorAccountTxt       : "+actvendorAccountTxt       +" Value Expected : "+expvendorAccountTxt);
		 System.out.println("departmentTxt          : "+actdepartmentTxt          +" Value Expected : "+expdepartmentTxt);
		 
		 System.out.println("WareHouseR1      : "+actWareHouseR1      +" Value Expected : "+expWareHouseR1);
		 System.out.println("ItemR1           : "+actItemR1           +" Value Expected : "+expItemR1);
		 System.out.println("UnitsR1          : "+actUnitsR1          +" Value Expected : "+expUnitsR1);
		 System.out.println("RdR1          	  : "+actRdR1          	  +" Value Expected : "+expRdR1);
		 System.out.println("AvgRateOR1       : "+actAvgRateOR1       +" Value Expected : "+expAvgRateOR1);
		 System.out.println("QtyR1            : "+actQtyR1            +" Value Expected : "+expQtyR1);
		 System.out.println("LPvnR1           : "+actLPvnR1           +" Value Expected : "+expLPvnR1);
		 System.out.println("LMrnR1           : "+actLMrnR1           +" Value Expected : "+expLMrnR1);
		 System.out.println("RateR1           : "+actRateR1           +" Value Expected : "+expRateR1);
		 System.out.println("GrossR1          : "+actGrossR1          +" Value Expected : "+expGrossR1);
		 System.out.println("BatchR1          : "+actBatchR1          +" Value Expected : "+expBatchR1);
		 System.out.println("BinR1            : "+actBinR1            +" Value Expected : "+expBinR1);
		 System.out.println("RmaR1            : "+actRmaR1            +" Value Expected : "+expRmaR1);
		 
		 
		 System.out.println("WareHouseR2      : "+actWareHouseR2      +" Value Expected : "+expWareHouseR2);
		 System.out.println("ItemR2           : "+actItemR2           +" Value Expected : "+expItemR2);
		 System.out.println("UnitsR2          : "+actUnitsR2          +" Value Expected : "+expUnitsR2);
		 System.out.println("RdR2          	  : "+actRdR2          	  +" Value Expected : "+expRdR2);
		 System.out.println("AvgRateOR2       : "+actAvgRateOR2       +" Value Expected : "+expAvgRateOR2);
		 System.out.println("QtyR2            : "+actQtyR2            +" Value Expected : "+expQtyR2);
		 System.out.println("LPvnR2           : "+actLPvnR2           +" Value Expected : "+expLPvnR2);
		 System.out.println("LMrnR2           : "+actLMrnR2           +" Value Expected : "+expLMrnR2);
		 System.out.println("RateR2           : "+actRateR2           +" Value Expected : "+expRateR2);
		 System.out.println("GrossR2          : "+actGrossR2          +" Value Expected : "+expGrossR2);
		 System.out.println("BatchR2          : "+actBatchR2          +" Value Expected : "+expBatchR2);
		 System.out.println("BinR2            : "+actBinR2            +" Value Expected : "+expBinR2);
		 System.out.println("RmaR2            : "+actRmaR2            +" Value Expected : "+expRmaR2);
		 
		 
		 System.out.println("WareHouseR3      : "+actWareHouseR3      +" Value Expected : "+expWareHouseR3);
		 System.out.println("ItemR3           : "+actItemR3           +" Value Expected : "+expItemR3);
		 System.out.println("UnitsR3          : "+actUnitsR3          +" Value Expected : "+expUnitsR3);
		 System.out.println("RdR3          	  : "+actRdR3          	  +" Value Expected : "+expRdR3);
		 System.out.println("AvgRateOR3       : "+actAvgRateOR3       +" Value Expected : "+expAvgRateOR3);
		 System.out.println("QtyR3            : "+actQtyR3            +" Value Expected : "+expQtyR3);
		 System.out.println("LPvnR3           : "+actLPvnR3           +" Value Expected : "+expLPvnR3);
		 System.out.println("LMrnR3           : "+actLMrnR3           +" Value Expected : "+expLMrnR3);
		 System.out.println("RateR3           : "+actRateR3           +" Value Expected : "+expRateR3);
		 System.out.println("GrossR3          : "+actGrossR3          +" Value Expected : "+expGrossR3);
		 System.out.println("BatchR3          : "+actBatchR3          +" Value Expected : "+expBatchR3);
		 System.out.println("BinR3            : "+actBinR3            +" Value Expected : "+expBinR3);
		 System.out.println("RmaR3            : "+actRmaR3            +" Value Expected : "+expRmaR3);
		 
		 System.out.println("WareHouseR4      : "+actWareHouseR4      +" Value Expected : "+expWareHouseR4);
		 System.out.println("ItemR4           : "+actItemR4           +" Value Expected : "+expItemR4);
		 System.out.println("UnitsR4          : "+actUnitsR4          +" Value Expected : "+expUnitsR4);
		 System.out.println("RdR4          	  : "+actRdR4          	  +" Value Expected : "+expRdR4);
		 System.out.println("AvgRateOR4       : "+actAvgRateOR4       +" Value Expected : "+expAvgRateOR4);
		 System.out.println("QtyR4            : "+actQtyR4            +" Value Expected : "+expQtyR4);
		 System.out.println("LPvnR4           : "+actLPvnR4           +" Value Expected : "+expLPvnR4);
		 System.out.println("LMrnR4           : "+actLMrnR4           +" Value Expected : "+expLMrnR4);
		 System.out.println("RateR4           : "+actRateR4           +" Value Expected : "+expRateR4);
		 System.out.println("GrossR4          : "+actGrossR4          +" Value Expected : "+expGrossR4);
		 System.out.println("BatchR4          : "+actBatchR4          +" Value Expected : "+expBatchR4);
		 System.out.println("BinR4            : "+actBinR4            +" Value Expected : "+expBinR4);
		 System.out.println("RmaR4            : "+actRmaR4            +" Value Expected : "+expRmaR4);
		 
		 System.out.println("WareHouseR5      : "+actWareHouseR5      +" Value Expected : "+expWareHouseR5);
		 System.out.println("ItemR5           : "+actItemR5           +" Value Expected : "+expItemR5);
		 System.out.println("UnitsR5          : "+actUnitsR5          +" Value Expected : "+expUnitsR5);
		 System.out.println("RdR5          	  : "+actRdR5          	  +" Value Expected : "+expRdR5);
		 System.out.println("AvgRateOR5       : "+actAvgRateOR5       +" Value Expected : "+expAvgRateOR5);
		 System.out.println("QtyR5            : "+actQtyR5            +" Value Expected : "+expQtyR5);
		 System.out.println("LPvnR5           : "+actLPvnR5           +" Value Expected : "+expLPvnR5);
		 System.out.println("LMrnR5           : "+actLMrnR5           +" Value Expected : "+expLMrnR5);
		 System.out.println("RateR5           : "+actRateR5           +" Value Expected : "+expRateR5);
		 System.out.println("GrossR5          : "+actGrossR5          +" Value Expected : "+expGrossR5);
		 System.out.println("BatchR5          : "+actBatchR5          +" Value Expected : "+expBatchR5);
		 System.out.println("BinR5            : "+actBinR5            +" Value Expected : "+expBinR5);
		 System.out.println("RmaR5            : "+actRmaR5            +" Value Expected : "+expRmaR5);
		 
		 if(actWareHouseR1.equalsIgnoreCase(expWareHouseR1) && actItemR1.equalsIgnoreCase(expItemR1) && actUnitsR1.equalsIgnoreCase(expUnitsR1) && actRdR1.equalsIgnoreCase(expRdR1)
				 && actAvgRateOR1.equalsIgnoreCase(expAvgRateOR1) && actQtyR1.equalsIgnoreCase(expQtyR1) && actLPvnR1.equalsIgnoreCase(expLPvnR1) && actLMrnR1==expLMrnR1
				 && actRateR1.equalsIgnoreCase(expRateR1) && actGrossR1.equalsIgnoreCase(expGrossR1) && actBatchR1.equalsIgnoreCase(expBatchR1)
				 && actBinR1==expBinR1 && actRmaR1==expRmaR1
				 
				 && actWareHouseR2.equalsIgnoreCase(expWareHouseR2) && actItemR2.equalsIgnoreCase(expItemR2) && actUnitsR2.equalsIgnoreCase(expUnitsR2) && actRdR2.equalsIgnoreCase(expRdR2)
				 && actAvgRateOR2.equalsIgnoreCase(expAvgRateOR2) && actQtyR2.equalsIgnoreCase(expQtyR2) && actLPvnR2.equalsIgnoreCase(expLPvnR2) && actLMrnR2==expLMrnR2
				 && actRateR2.equalsIgnoreCase(expRateR2) && actGrossR2.equalsIgnoreCase(expGrossR2) && actBatchR2==expBatchR2
				 && actBinR2.equalsIgnoreCase(expBinR2) && actRmaR2==expRmaR2
				 
				 && actWareHouseR3.equalsIgnoreCase(expWareHouseR3) && actItemR3.equalsIgnoreCase(expItemR3) && actUnitsR3.equalsIgnoreCase(expUnitsR3) && actRdR3.equalsIgnoreCase(expRdR3)
				 && actAvgRateOR3.equalsIgnoreCase(expAvgRateOR3) && actQtyR3.equalsIgnoreCase(expQtyR3) && actLPvnR3.equalsIgnoreCase(expLPvnR3) && actLMrnR3==expLMrnR3
				 && actRateR3.equalsIgnoreCase(expRateR3) && actGrossR3.equalsIgnoreCase(expGrossR3) && actBatchR3==expBatchR3
				 && actBinR3==expBinR3 && actRmaR3.equalsIgnoreCase(expRmaR3)
				 
				 && actWareHouseR4.equalsIgnoreCase(expWareHouseR4) && actItemR4.equalsIgnoreCase(expItemR4) && actUnitsR4.equalsIgnoreCase(expUnitsR4) && actRdR4.equalsIgnoreCase(expRdR4)
				 && actAvgRateOR4.equalsIgnoreCase(expAvgRateOR4) && actQtyR4.equalsIgnoreCase(expQtyR4) && actLPvnR4.equalsIgnoreCase(expLPvnR4) && actLMrnR4==expLMrnR4
				 && actRateR4.equalsIgnoreCase(expRateR4) && actGrossR4.equalsIgnoreCase(expGrossR4) && actBatchR4.equalsIgnoreCase(expBatchR4)
				 && actBinR4==expBinR4 && actRmaR4==expRmaR4
				 
				 && actWareHouseR5.equalsIgnoreCase(expWareHouseR5) && actItemR5.equalsIgnoreCase(expItemR5) && actUnitsR5.equalsIgnoreCase(expUnitsR5) && actRdR5.equalsIgnoreCase(expRdR5)
				 && actAvgRateOR5.equalsIgnoreCase(expAvgRateOR5) && actQtyR5.equalsIgnoreCase(expQtyR5) && actLPvnR5.equalsIgnoreCase(expLPvnR5) && actLMrnR5==expLMrnR5
				 && actRateR5.equalsIgnoreCase(expRateR5) && actGrossR5.equalsIgnoreCase(expGrossR5) && actBatchR5==expBatchR5
				 && actBinR5==expBinR5 && actRmaR5==expRmaR5)
			 
		 
		{
			System.out.println("Test Pass : Voucher Data is Correct");
			
			
			return true;
		}
		else
		{
			System.out.println("Test Fail : Voucher Data is NOT Correct");
			
			
			return false;
		}
	}
	
	
	
	public boolean checkEntryPageSuspendOptionInPurchasesReturnsVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	    String docno=documentNumberTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();
		
		boolean suspendMessage=checkVoucherSavingMessage(docno);
		
		System.out.println("************************************* checkEntryPageSuspendOptionInPurchasesReturnsVoucher  *********************************");
		
		System.out.println("SavingMessage  :  "+suspendMessage +" Value Expected : "+"TRUE");
		
		if(suspendMessage==true)
		{
			System.out.println("Test Pass : Error Message is Displayed ");
			excelReader.setCellData(xlfile, xlSheetName, 11, 9, resPass);
			
			return true;
		}
		
		else
		{
			System.out.println("Test Fail :  Error Message is  not Displayed ");
		     excelReader.setCellData(xlfile, xlSheetName, 11, 9, resFail);
			
			return false;
		}
	}
	


	
	public boolean checkSuspendStatusInEntryPageAndHomePageOnPreviousOptionPurchasesReturns() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();
		
		boolean loading=checkLoadingMessage();
		
		System.out.println("VoucherLoadingMessage  : "+loading +" Value Expected : "+"TRUE");
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoPanelStatus));
		
		String actinfoPanelStatusEntryPage	=infoPanelStatus.getText();
		String expinfoPanelStatusEntryPage	="Suspended";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(suspendStatusRow1));
		
		String actsuspendStatusRow1HomePage	=suspendStatusRow1.getText();
		String expsuspendStatusRow1HomePage	="TRUE";
		
		System.out.println("************************************* checkSuspendStatusInEntryPageAndHomePageOnPreviousOptionPurchasesReturns  *********************************");
		
		System.out.println("infoPanelStatusEntryPage  	:  "+actinfoPanelStatusEntryPage 	+" value Expected : "+expinfoPanelStatusEntryPage);
		System.out.println("suspendStatusRow1HomePage  	:  "+actsuspendStatusRow1HomePage 	+" value Expected : "+expsuspendStatusRow1HomePage);
		
		if(actinfoPanelStatusEntryPage.equalsIgnoreCase(expinfoPanelStatusEntryPage) && actsuspendStatusRow1HomePage.equalsIgnoreCase(expsuspendStatusRow1HomePage))
		{
			System.out.println("Test Pass : Suspended Succesfully");
			return true;
		}
		else
		{
			System.out.println("Test Fail : NOT Suspended Succesfully");
			return false;
		}
		
	}
	
	

	// Copy document Screen Elements
	
	@FindBy(xpath="//input[@id='optCopyDocType']")
	private static WebElement cd_vouchertypeTxt;
	
	@FindBy(xpath="//select[@id='id_searchoncolumns']")
	private static WebElement cd_searchOnDropdown1;
	
	@FindBy(xpath="//div[@id='id_transaction_entry_container_others']//div[5]//select[1]")
	private static WebElement cd_searchOnDropdown2;
	
	@FindBy(xpath="//input[@id='srch_doc']")
	private static WebElement cd_searchTxt;
	
	@FindBy(xpath="//input[@id='id_transaction_entry_copydocument_refresh']")
	private static WebElement cd_refreshBtn;
	
	@FindBy(xpath="//input[@id='id_transaction_entry_copydocument_filter_togglebutton']")
	private static WebElement cd_filterBtn;
	
	@FindBy(xpath="//input[@id='copydoc_HeaderChkBox']")
	private static WebElement cd_HeaderChkBox;
	
	@FindBy(xpath="//tr[@id='tr_copydoc_voucher_1']//td//input")
	private static WebElement cd_FirstChkBox;
	
	@FindBy(xpath="//input[@id='id_chkclubsimilartxn']")
	private static WebElement cd_clubsimilarTransChkBox;
	
	/*@FindBy(xpath="//div[@class='col-xs-2 no_padding_left_right']//input[@class='Fbutton']")
	private static WebElement cd_SelectallBtn;*/
	
	@FindBy(xpath="//*[@id='id_copydoc_grid1_buttonsrow']/div[3]/input")
	private static WebElement cd_SelectallBtn;
	
	
	
	
	@FindBy(xpath="//button[@id='btn_firstPage']")
	private static WebElement cd_firstBtn;
	
	@FindBy(xpath="//button[@id='btn_previousPage']")
	private static WebElement cd_PreviousBtn;
	
	@FindBy(xpath="//button[@id='input_pagenumber']")
	private static WebElement cd_PageNo;
	
	@FindBy(xpath="//button[@id='btn_nextPage']")
	private static WebElement cd_nextBtn; 
	
	@FindBy(xpath="//button[@id='btn_lastPage']")
	private static WebElement cd_LastBtn;
	
	@FindBy(xpath="//input[@id='id_transaction_copydoc_ok']")
	private static WebElement cd_OkBtn;
	
	@FindBy(xpath="//input[@id='id_transaction_copydoc_cancel']")
	private static WebElement cd_CancelBtn;
	
	
	// Gird 
	// row 1
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[1]")
	private static WebElement cd_IndexRow1;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[2]")
	private static WebElement cd_R1C2;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[3]")
	private static WebElement cd_R1C3;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[4]")
	private static WebElement cd_R1C4;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[5]")
	private static WebElement cd_R1C5;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[6]")
	private static WebElement cd_R1C6;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[7]")
	private static WebElement cd_R1C7;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[8]")
	private static WebElement cd_R1C8;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[9]")
	private static WebElement cd_R1C9;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[10]")
	private static WebElement cd_R1C10;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[11]")
	private static WebElement cd_R1C11;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[12]")
	private static WebElement cd_R1C12;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[13]")
	private static WebElement cd_R1C13;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[14]")
	private static WebElement cd_R1C14;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[15]")
	private static WebElement cd_R1C15;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[16]")
	private static WebElement cd_R1C16;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[17]")
	private static WebElement cd_R1C17;
	
	
	// row 2
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[1]")
	private static WebElement cd_IndexRow2;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[2]")
	private static WebElement cd_R2C2;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[3]")
	private static WebElement cd_R2C3;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[4]")
	private static WebElement cd_R2C4;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[5]")
	private static WebElement cd_R2C5;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[6]")
	private static WebElement cd_R2C6;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[7]")
	private static WebElement cd_R2C7;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[8]")
	private static WebElement cd_R2C8;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[9]")
	private static WebElement cd_R2C9;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[10]")
	private static WebElement cd_R2C10;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[11]")
	private static WebElement cd_R2C11;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[12]")
	private static WebElement cd_R2C12;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[13]")
	private static WebElement cd_R2C13;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[14]")
	private static WebElement cd_R2C14;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[15]")
	private static WebElement cd_R2C15;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[16]")
	private static WebElement cd_R2C16;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[17]")
	private static WebElement cd_R2C17;

	// row 3
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[1]")
	private static WebElement cd_IndexRow3;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[2]")
	private static WebElement cd_R3C2;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[3]")
	private static WebElement cd_R3C3;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[4]")
	private static WebElement cd_R3C4;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[5]")
	private static WebElement cd_R3C5;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[6]")
	private static WebElement cd_R3C6;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[7]")
	private static WebElement cd_R3C7;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[8]")
	private static WebElement cd_R3C8;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[9]")
	private static WebElement cd_R3C9;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[10]")
	private static WebElement cd_R3C10;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[11]")
	private static WebElement cd_R3C11;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[12]")
	private static WebElement cd_R3C12;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[13]")
	private static WebElement cd_R3C13;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[14]")
	private static WebElement cd_R3C14;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[15]")
	private static WebElement cd_R3C15;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[16]")
	private static WebElement cd_R3C16;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[17]")
	private static WebElement cd_R3C17;
	
	
	// row 4
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[1]")
	private static WebElement cd_IndexRow4;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[2]")
	private static WebElement cd_R4C2;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[3]")
	private static WebElement cd_R4C3;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[4]")
	private static WebElement cd_R4C4;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[5]")
	private static WebElement cd_R4C5;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[6]")
	private static WebElement cd_R4C6;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[7]")
	private static WebElement cd_R4C7;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[8]")
	private static WebElement cd_R4C8;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[9]")
	private static WebElement cd_R4C9;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[10]")
	private static WebElement cd_R4C10;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[11]")
	private static WebElement cd_R4C11;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[12]")
	private static WebElement cd_R4C12;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[13]")
	private static WebElement cd_R4C13;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[14]")
	private static WebElement cd_R4C14;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[15]")
	private static WebElement cd_R4C15;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[16]")
	private static WebElement cd_R4C16;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[17]")
	private static WebElement cd_R4C17;
	
	
	// row 5
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[1]")
	private static WebElement cd_IndexRow5;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[2]")
	private static WebElement cd_R5C2;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[3]")
	private static WebElement cd_R5C3;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[4]")
	private static WebElement cd_R5C4;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[5]")
	private static WebElement cd_R5C5;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[6]")
	private static WebElement cd_R5C6;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[7]")
	private static WebElement cd_R5C7;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[8]")
	private static WebElement cd_R5C8;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[9]")
	private static WebElement cd_R5C9;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[10]")
	private static WebElement cd_R5C10;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[11]")
	private static WebElement cd_R5C11;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[12]")
	private static WebElement cd_R5C12;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[13]")
	private static WebElement cd_R5C13;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[14]")
	private static WebElement cd_R5C14;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[15]")
	private static WebElement cd_R5C15;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[16]")
	private static WebElement cd_R5C16;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[17]")
	private static WebElement cd_R5C17;
	

	// Copy Document Option In Purchases Returns Voucher

	public boolean checkCopyDocumentScreenOptionsInPurchasesReturns() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		checkUserFriendlyMessage();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
		toggleBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(copyDocumentOption));
		copyDocumentOption.click();
		
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cd_vouchertypeTxt));
		
		boolean actcd_vouchertypeTxt		=cd_vouchertypeTxt.isDisplayed();
		boolean actcd_searchOnDropdown1		=cd_searchOnDropdown1.isDisplayed();
		boolean actcd_searchOnDropdown2		=cd_searchOnDropdown2.isDisplayed();
		boolean actcd_searchTxt				=cd_searchTxt.isDisplayed();
		boolean actcd_refreshBtn			=cd_refreshBtn.isDisplayed();
		boolean actcd_filterBtn				=cd_filterBtn.isDisplayed();
		boolean actcd_HeaderChkBox			=cd_HeaderChkBox.isDisplayed();
		boolean actcd_FirstChkBox			=cd_FirstChkBox.isDisplayed();
		boolean actcd_clubsimilarTransChkBox=cd_clubsimilarTransChkBox.isDisplayed();
		boolean actcd_SelectallBtn			=cd_SelectallBtn.isDisplayed();
		boolean actcd_firstBtn				=cd_firstBtn.isDisplayed();
		boolean actcd_PreviousBtn			=cd_PreviousBtn.isDisplayed();
		boolean actcd_PageNo				=cd_PageNo.isDisplayed();
		boolean actcd_nextBtn				=cd_nextBtn.isDisplayed();
		boolean actcd_LastBtn				=cd_LastBtn.isDisplayed();
		boolean actcd_OkBtn					=cd_OkBtn.isDisplayed();
		boolean actcd_CancelBtn				=cd_CancelBtn.isDisplayed();
		
		
		boolean expcd_vouchertypeTxt		=true;
		boolean expcd_searchOnDropdown1		=true;
		boolean expcd_searchOnDropdown2		=true;
		boolean expcd_searchTxt				=true;
		boolean expcd_refreshBtn			=true;
		boolean expcd_filterBtn				=true;
		boolean expcd_HeaderChkBox			=true;
		boolean expcd_FirstChkBox			=true;
		boolean expcd_clubsimilarTransChkBox=true;
		boolean expcd_SelectallBtn			=true;
		boolean expcd_firstBtn				=true;
		boolean expcd_PreviousBtn			=true;
		boolean expcd_PageNo				=true;
		boolean expcd_nextBtn				=true;
		boolean expcd_LastBtn				=true;
		boolean expcd_OkBtn					=true;
		boolean expcd_CancelBtn				=true;
		
		System.out.println("************************************* checkCopyDocumentScreenOptionsInPurchasesReturns  *********************************");
		
		System.out.println("Copy Document Voucher type                : "+actcd_vouchertypeTxt			+"  Value Expected : "+expcd_vouchertypeTxt);
		System.out.println("Copy Document Search dropdown 1           : "+actcd_searchOnDropdown1		+"  Value Expected : "+expcd_searchOnDropdown1);
		System.out.println("Copy Document Search dropdown 2           : "+actcd_searchOnDropdown2		+"  Value Expected : "+expcd_searchOnDropdown2);
		System.out.println("Copy Document Search text                 : "+actcd_searchTxt				+"  Value Expected : "+expcd_searchTxt);
		System.out.println("Copy Document Refresh                     : "+actcd_refreshBtn				+"  Value Expected : "+expcd_refreshBtn);
		System.out.println("Copy Document Filter                      : "+actcd_filterBtn				+"  Value Expected : "+expcd_filterBtn);
		System.out.println("Copy Document Header Chk box              : "+actcd_HeaderChkBox			+"  Value Expected : "+expcd_HeaderChkBox);
		System.out.println("Copy Document First Chk Box               : "+actcd_FirstChkBox				+"  Value Expected : "+expcd_FirstChkBox);
		System.out.println("Copy Document Club Similar Trans Chk Box  : "+actcd_clubsimilarTransChkBox	+"  Value Expected : "+expcd_clubsimilarTransChkBox);
		System.out.println("Copy Document Select All                  : "+actcd_SelectallBtn			+"  Value Expected : "+expcd_SelectallBtn);
		System.out.println("Copy Document first Button                : "+actcd_firstBtn				+"  Value Expected : "+expcd_firstBtn);
		System.out.println("Copy Document Previous Button             : "+actcd_PreviousBtn				+"  Value Expected : "+expcd_PreviousBtn);
		System.out.println("Copy Document Page No                     : "+actcd_PageNo					+"  Value Expected : "+expcd_PageNo);
		System.out.println("Copy Document Next Button                 : "+actcd_nextBtn					+"  Value Expected : "+expcd_nextBtn);
		System.out.println("Copy Document last Button                 : "+actcd_LastBtn					+"  Value Expected : "+expcd_LastBtn);
		System.out.println("Copy Document Ok Button                   : "+actcd_OkBtn					+"  Value Expected : "+expcd_OkBtn);
		System.out.println("Copy Document cancel Button               : "+actcd_CancelBtn				+"  Value Expected : "+expcd_CancelBtn);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cd_vouchertypeTxt));
		
		if(actcd_vouchertypeTxt==expcd_vouchertypeTxt && actcd_searchOnDropdown1==expcd_searchOnDropdown1
				&& actcd_searchOnDropdown2==expcd_searchOnDropdown2 && actcd_searchTxt==expcd_searchTxt
				&& actcd_refreshBtn==expcd_refreshBtn && actcd_filterBtn==expcd_filterBtn
				&& actcd_HeaderChkBox==expcd_HeaderChkBox && actcd_FirstChkBox==expcd_FirstChkBox
				&& actcd_clubsimilarTransChkBox==expcd_clubsimilarTransChkBox && actcd_SelectallBtn==expcd_SelectallBtn
				&& actcd_firstBtn==expcd_firstBtn && actcd_PreviousBtn==expcd_PreviousBtn
				&& actcd_PageNo==expcd_PageNo && actcd_nextBtn==expcd_nextBtn
				&& actcd_LastBtn==expcd_LastBtn && actcd_OkBtn==expcd_OkBtn && actcd_CancelBtn==expcd_CancelBtn)
		{	
			System.out.println("Test Pass : Copy Document Options Are As Expected");
			excelReader.setCellData(xlfile, xlSheetName, 78, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Copy Document Options Are NOT As Expected");
			excelReader.setCellData(xlfile, xlSheetName, 78, 9, resFail);
			return false;
		}
	}

		
	
	public boolean checkFirstRowCheckboxInCopyDocumentInPurchasesReturns() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cd_FirstChkBox));
		cd_FirstChkBox.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cd_R1C2));

		String actCopyDocWareHouseR1	=cd_R1C2.getText();
		String actCopyDocItemR1			=cd_R1C3.getText();
		String actCopyDocUnitsR1		=cd_R1C4.getText();
		String actCopyDocRdR1			=cd_R1C5.getText();
		String actCopyDocAvgRateOR1		=cd_R1C6.getText();
		String actCopyDocQtyR1			=cd_R1C7.getText();
		boolean actCopyDocLPvnR1		=cd_R1C8.getText().isEmpty();
		boolean actCopyDocLMrnR1		=cd_R1C9.getText().isEmpty();
		String actCopyDocRateR1			=cd_R1C10.getText();
		String actCopyDocGrossR1		=cd_R1C11.getText();
		String actCopyDocBatchR1		=cd_R1C12.getText();
		boolean actCopyDocBinsR1		=cd_R1C13.getText().isEmpty();
		boolean actCopyDocRmaR1			=cd_R1C14.getText().isEmpty();
	
		
		String actCopyDocWareHouseR2	=cd_R2C2.getText();
		String actCopyDocItemR2			=cd_R2C3.getText();
		String actCopyDocUnitsR2		=cd_R2C4.getText();
		String actCopyDocRdR2			=cd_R2C5.getText();
		String actCopyDocAvgRateOR2		=cd_R2C6.getText();
		String actCopyDocQtyR2			=cd_R2C7.getText();
		boolean actCopyDocLPvnR2		=cd_R2C8.getText().isEmpty();
		boolean actCopyDocLMrnR2		=cd_R2C9.getText().isEmpty();
		String actCopyDocRateR2			=cd_R2C10.getText();
		String actCopyDocGrossR2		=cd_R2C11.getText();
		boolean actCopyDocBatchR2		=cd_R2C12.getText().isEmpty();
		String actCopyDocBinsR2			=cd_R2C13.getText();
		boolean actCopyDocRmaR2			=cd_R2C14.getText().isEmpty();
		
		String actCopyDocWareHouseR3	=cd_R3C2.getText();
		String actCopyDocItemR3			=cd_R3C3.getText();
		String actCopyDocUnitsR3		=cd_R3C4.getText();
		String actCopyDocRdR3			=cd_R3C5.getText();
		String actCopyDocAvgRateOR3		=cd_R3C6.getText();
		String actCopyDocQtyR3			=cd_R3C7.getText();
		boolean actCopyDocLPvnR3		=cd_R3C8.getText().isEmpty();
		boolean actCopyDocLMrnR3		=cd_R3C9.getText().isEmpty();
		String actCopyDocRateR3			=cd_R3C10.getText();
		String actCopyDocGrossR3		=cd_R3C11.getText();
		boolean actCopyDocBatchR3		=cd_R3C12.getText().isEmpty();
		boolean actCopyDocBinsR3		=cd_R3C13.getText().isEmpty();
		String actCopyDocRmaR3			=cd_R3C14.getText();
		
		
		String actCopyDocWareHouseR4	=cd_R4C2.getText();
		String actCopyDocItemR4			=cd_R4C3.getText();
		String actCopyDocUnitsR4		=cd_R4C4.getText();
		String actCopyDocRdR4			=cd_R4C5.getText();
		String actCopyDocAvgRateOR4		=cd_R4C6.getText();
		String actCopyDocQtyR4			=cd_R4C7.getText();
		boolean actCopyDocLPvnR4		=cd_R4C8.getText().isEmpty();
		boolean actCopyDocLMrnR4		=cd_R4C9.getText().isEmpty();
		String actCopyDocRateR4			=cd_R4C10.getText();
		String actCopyDocGrossR4		=cd_R4C11.getText();
		String actCopyDocBatchR4		=cd_R4C12.getText();
		boolean actCopyDocBinsR4		=cd_R4C13.getText().isEmpty();
		boolean actCopyDocRmaR4			=cd_R4C14.getText().isEmpty();
		
		String actCopyDocWareHouseR5	=cd_R5C2.getText();
		String actCopyDocItemR5			=cd_R5C3.getText();
		String actCopyDocUnitsR5		=cd_R5C4.getText();
		String actCopyDocRdR5			=cd_R5C5.getText();
		String actCopyDocAvgRateOR5		=cd_R5C6.getText();
		String actCopyDocQtyR5			=cd_R5C7.getText();
		boolean actCopyDocLPvnR5		=cd_R5C8.getText().isEmpty();
		boolean actCopyDocLMrnR5		=cd_R5C9.getText().isEmpty();
		String actCopyDocRateR5			=cd_R5C10.getText();
		String actCopyDocGrossR5		=cd_R5C11.getText();
		boolean actCopyDocBatchR5		=cd_R5C12.getText().isEmpty();
		boolean actCopyDocBinsR5		=cd_R5C13.getText().isEmpty();
		boolean actCopyDocRmaR5			=cd_R5C14.getText().isEmpty();
		
		// Expected
		
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
	    Date date=new Date();
		
		String expCopyDocWareHouseR1	="HYDERABAD";
		String expCopyDocItemR1			="BATCH WA ITEM";
		String expCopyDocUnitsR1		="Pcs";
		String expCopyDocRdR1			="0";
		String expCopyDocAvgRateOR1		="1";
		String expCopyDocQtyR1			="1.00";
		boolean expCopyDocLPvnR1		=true;
		boolean expCopyDocLMrnR1		=true;
		String expCopyDocRateR1			="1.11";
		String expCopyDocGrossR1		="1.11";
		String expCopyDocBatchR1		="PVHWA";
		boolean expCopyDocBinsR1		=true;
		boolean expCopyDocRmaR1			=true;
	
		
		String expCopyDocWareHouseR2	="HYDERABAD";
		String expCopyDocItemR2			="BIN FINISHED GOODS ITEM";
		String expCopyDocUnitsR2		="Pcs";
		String expCopyDocRdR2			="0";
		String expCopyDocAvgRateOR2		="1";
		String expCopyDocQtyR2			="1.00";
		boolean expCopyDocLPvnR2		=true;
		boolean expCopyDocLMrnR2		=true;
		String expCopyDocRateR2			="1.11";
		String expCopyDocGrossR2		="1.11";
		boolean expCopyDocBatchR2		=true;
		String expCopyDocBinsR2			="Bin4";
		boolean expCopyDocRmaR2			=true;
		
		String expCopyDocWareHouseR3	="HYDERABAD";
		String expCopyDocItemR3			="RMA RITEM";
		String expCopyDocUnitsR3		="Pcs";
		String expCopyDocRdR3			="0";
		String expCopyDocAvgRateOR3		="13";
		String expCopyDocQtyR3			="1.00";
		boolean expCopyDocLPvnR3		=true;
		boolean expCopyDocLMrnR3		=true;
		String expCopyDocRateR3			="13.33";
		String expCopyDocGrossR3		="13.33";
		boolean expCopyDocBatchR3		=true;
		boolean expCopyDocBinsR3		=true;
		String expCopyDocRmaR3			="Hyd@Pv1";
		
		
		String expCopyDocWareHouseR4	="HYDERABAD";
		String expCopyDocItemR4			="BATCH BR ITEM";
		String expCopyDocUnitsR4		="Pcs";
		String expCopyDocRdR4			="0";
		String expCopyDocAvgRateOR4		="2";
		String expCopyDocQtyR4			="1.00";
		boolean expCopyDocLPvnR4		=true;
		boolean expCopyDocLMrnR4		=true;
		String expCopyDocRateR4			="0.00";
		String expCopyDocGrossR4		="0.00";
		String expCopyDocBatchR4		="PVHBR";
		boolean expCopyDocBinsR4		=true;
		boolean expCopyDocRmaR4			=true;
		
		String expCopyDocWareHouseR5	="MUMBAI";
		String expCopyDocItemR5			="STOCK ITEM";
		String expCopyDocUnitsR5		="Pcs";
		String expCopyDocRdR5			="0";
		String expCopyDocAvgRateOR5		="4";
		String expCopyDocQtyR5			="1.00";
		boolean expCopyDocLPvnR5		=true;
		boolean expCopyDocLMrnR5		=true;
		String expCopyDocRateR5			="4.08";
		String expCopyDocGrossR5		="4.08";
		boolean expCopyDocBatchR5		=true;
		boolean expCopyDocBinsR5		=true;
		boolean expCopyDocRmaR5			=true;
		
		System.out.println("************************************* checkFirstRowCheckboxInCopyDocumentInPurchasesReturns  *********************************");
		
		System.out.println("CopyDocWareHouseR1       : "+actCopyDocWareHouseR1		+"  Value Expected : "+expCopyDocWareHouseR1);
		System.out.println("CopyDocItemR1            : "+actCopyDocItemR1			+"  Value Expected : "+expCopyDocItemR1);
		System.out.println("CopyDocUnitsR1         	 : "+actCopyDocUnitsR1			+"  Value Expected : "+expCopyDocUnitsR1);
		System.out.println("CopyDocRdR1         	 : "+actCopyDocRdR1				+"  Value Expected : "+expCopyDocRdR1);
		System.out.println("CopyDocAvgRateOR1        : "+actCopyDocAvgRateOR1		+"  Value Expected : "+expCopyDocAvgRateOR1);
		System.out.println("CopyDocQtyR1             : "+actCopyDocQtyR1			+"  Value Expected : "+expCopyDocQtyR1);
		System.out.println("CopyDocLPvnR1            : "+actCopyDocLPvnR1			+"  Value Expected : "+expCopyDocLPvnR1);
		System.out.println("CopyDocLMrnR1            : "+actCopyDocLMrnR1			+"  Value Expected : "+expCopyDocLMrnR1);
		System.out.println("CopyDocRateR1            : "+actCopyDocRateR1			+"  Value Expected : "+expCopyDocRateR1);
		System.out.println("CopyDocGrossR1           : "+actCopyDocGrossR1			+"  Value Expected : "+expCopyDocGrossR1);
		System.out.println("CopyDocBatchR1           : "+actCopyDocBatchR1			+"  Value Expected : "+expCopyDocBatchR1);
		System.out.println("CopyDocBinsR1            : "+actCopyDocBinsR1			+"  Value Expected : "+expCopyDocBinsR1);
		System.out.println("CopyDocRmaR1             : "+actCopyDocRmaR1			+"  Value Expected : "+expCopyDocRmaR1);
		
		
		System.out.println("CopyDocWareHouseR2       : "+actCopyDocWareHouseR2		+"  Value Expected : "+expCopyDocWareHouseR2);
		System.out.println("CopyDocItemR2            : "+actCopyDocItemR2			+"  Value Expected : "+expCopyDocItemR2);
		System.out.println("CopyDocUnitsR2         	 : "+actCopyDocUnitsR2			+"  Value Expected : "+expCopyDocUnitsR2);
		System.out.println("CopyDocRdR2         	 : "+actCopyDocRdR2				+"  Value Expected : "+expCopyDocRdR2);
		System.out.println("CopyDocAvgRateOR2        : "+actCopyDocAvgRateOR2		+"  Value Expected : "+expCopyDocAvgRateOR2);
		System.out.println("CopyDocQtyR2             : "+actCopyDocQtyR2			+"  Value Expected : "+expCopyDocQtyR2);
		System.out.println("CopyDocLPvnR2            : "+actCopyDocLPvnR2			+"  Value Expected : "+expCopyDocLPvnR2);
		System.out.println("CopyDocLMrnR2            : "+actCopyDocLMrnR2			+"  Value Expected : "+expCopyDocLMrnR2);
		System.out.println("CopyDocRateR2            : "+actCopyDocRateR2			+"  Value Expected : "+expCopyDocRateR2);
		System.out.println("CopyDocGrossR2           : "+actCopyDocGrossR2			+"  Value Expected : "+expCopyDocGrossR2);
		System.out.println("CopyDocBatchR2           : "+actCopyDocBatchR2			+"  Value Expected : "+expCopyDocBatchR2);
		System.out.println("CopyDocBinsR2            : "+actCopyDocBinsR2			+"  Value Expected : "+expCopyDocBinsR2);
		System.out.println("CopyDocRmaR2             : "+actCopyDocRmaR2			+"  Value Expected : "+expCopyDocRmaR2);
		
		System.out.println("CopyDocWareHouseR3       : "+actCopyDocWareHouseR3		+"  Value Expected : "+expCopyDocWareHouseR3);
		System.out.println("CopyDocItemR3            : "+actCopyDocItemR3			+"  Value Expected : "+expCopyDocItemR3);
		System.out.println("CopyDocUnitsR3         	 : "+actCopyDocUnitsR3			+"  Value Expected : "+expCopyDocUnitsR3);
		System.out.println("CopyDocRdR3         	 : "+actCopyDocRdR3				+"  Value Expected : "+expCopyDocRdR3);
		System.out.println("CopyDocAvgRateOR3        : "+actCopyDocAvgRateOR3		+"  Value Expected : "+expCopyDocAvgRateOR3);
		System.out.println("CopyDocQtyR3             : "+actCopyDocQtyR3			+"  Value Expected : "+expCopyDocQtyR3);
		System.out.println("CopyDocLPvnR3            : "+actCopyDocLPvnR3			+"  Value Expected : "+expCopyDocLPvnR3);
		System.out.println("CopyDocLMrnR3            : "+actCopyDocLMrnR3			+"  Value Expected : "+expCopyDocLMrnR3);
		System.out.println("CopyDocRateR3            : "+actCopyDocRateR3			+"  Value Expected : "+expCopyDocRateR3);
		System.out.println("CopyDocGrossR3           : "+actCopyDocGrossR3			+"  Value Expected : "+expCopyDocGrossR3);
		System.out.println("CopyDocBatchR3           : "+actCopyDocBatchR3			+"  Value Expected : "+expCopyDocBatchR3);
		System.out.println("CopyDocBinsR3            : "+actCopyDocBinsR3			+"  Value Expected : "+expCopyDocBinsR3);
		System.out.println("CopyDocRmaR3             : "+actCopyDocRmaR3			+"  Value Expected : "+expCopyDocRmaR3);
		
		
		System.out.println("CopyDocWareHouseR4       : "+actCopyDocWareHouseR4		+"  Value Expected : "+expCopyDocWareHouseR4);
		System.out.println("CopyDocItemR4            : "+actCopyDocItemR4			+"  Value Expected : "+expCopyDocItemR4);
		System.out.println("CopyDocUnitsR4         	 : "+actCopyDocUnitsR4			+"  Value Expected : "+expCopyDocUnitsR4);
		System.out.println("CopyDocRdR4         	 : "+actCopyDocRdR4				+"  Value Expected : "+expCopyDocRdR4);
		System.out.println("CopyDocAvgRateOR4        : "+actCopyDocAvgRateOR4		+"  Value Expected : "+expCopyDocAvgRateOR4);
		System.out.println("CopyDocQtyR4             : "+actCopyDocQtyR4			+"  Value Expected : "+expCopyDocQtyR4);
		System.out.println("CopyDocLPvnR4            : "+actCopyDocLPvnR4			+"  Value Expected : "+expCopyDocLPvnR4);
		System.out.println("CopyDocLMrnR4            : "+actCopyDocLMrnR4			+"  Value Expected : "+expCopyDocLMrnR4);
		System.out.println("CopyDocRateR4            : "+actCopyDocRateR4			+"  Value Expected : "+expCopyDocRateR4);
		System.out.println("CopyDocGrossR4           : "+actCopyDocGrossR4			+"  Value Expected : "+expCopyDocGrossR4);
		System.out.println("CopyDocBatchR4           : "+actCopyDocBatchR4			+"  Value Expected : "+expCopyDocBatchR4);
		System.out.println("CopyDocBinsR4            : "+actCopyDocBinsR4			+"  Value Expected : "+expCopyDocBinsR4);
		System.out.println("CopyDocRmaR4             : "+actCopyDocRmaR4			+"  Value Expected : "+expCopyDocRmaR4);
		
		System.out.println("CopyDocWareHouseR5       : "+actCopyDocWareHouseR5		+"  Value Expected : "+expCopyDocWareHouseR5);
		System.out.println("CopyDocItemR5            : "+actCopyDocItemR5			+"  Value Expected : "+expCopyDocItemR5);
		System.out.println("CopyDocUnitsR5         	 : "+actCopyDocUnitsR5			+"  Value Expected : "+expCopyDocUnitsR5);
		System.out.println("CopyDocRdR5         	 : "+actCopyDocRdR5				+"  Value Expected : "+expCopyDocRdR5);
		System.out.println("CopyDocAvgRateOR5        : "+actCopyDocAvgRateOR5		+"  Value Expected : "+expCopyDocAvgRateOR5);
		System.out.println("CopyDocQtyR5             : "+actCopyDocQtyR5			+"  Value Expected : "+expCopyDocQtyR5);
		System.out.println("CopyDocLPvnR5            : "+actCopyDocLPvnR5			+"  Value Expected : "+expCopyDocLPvnR5);
		System.out.println("CopyDocLMrnR5            : "+actCopyDocLMrnR5			+"  Value Expected : "+expCopyDocLMrnR5);
		System.out.println("CopyDocRateR5            : "+actCopyDocRateR5			+"  Value Expected : "+expCopyDocRateR5);
		System.out.println("CopyDocGrossR5           : "+actCopyDocGrossR5			+"  Value Expected : "+expCopyDocGrossR5);
		System.out.println("CopyDocBatchR5           : "+actCopyDocBatchR5			+"  Value Expected : "+expCopyDocBatchR5);
		System.out.println("CopyDocBinsR5            : "+actCopyDocBinsR5			+"  Value Expected : "+expCopyDocBinsR5);
		System.out.println("CopyDocRmaR5             : "+actCopyDocRmaR5			+"  Value Expected : "+expCopyDocRmaR5);
		
		
		if(actCopyDocWareHouseR1.equalsIgnoreCase(expCopyDocWareHouseR1) && actCopyDocItemR1.equalsIgnoreCase(expCopyDocItemR1) && actCopyDocUnitsR1.equalsIgnoreCase(expCopyDocUnitsR1)
				&& actCopyDocRdR1.equalsIgnoreCase(expCopyDocRdR1) && actCopyDocAvgRateOR1.equalsIgnoreCase(expCopyDocAvgRateOR1) && actCopyDocQtyR1.equalsIgnoreCase(expCopyDocQtyR1)
				&& actCopyDocLPvnR1==expCopyDocLPvnR1 && actCopyDocLMrnR1==expCopyDocLMrnR1
				&& actCopyDocRateR1.equalsIgnoreCase(expCopyDocRateR1) && actCopyDocGrossR1.equalsIgnoreCase(expCopyDocGrossR1) && actCopyDocBatchR1.equalsIgnoreCase(expCopyDocBatchR1)
				&& actCopyDocBinsR1==expCopyDocBinsR1  && actCopyDocRmaR1==expCopyDocRmaR1
				
				&& actCopyDocWareHouseR2.equalsIgnoreCase(expCopyDocWareHouseR2) && actCopyDocItemR2.equalsIgnoreCase(expCopyDocItemR2) && actCopyDocUnitsR2.equalsIgnoreCase(expCopyDocUnitsR2)
				&& actCopyDocRdR2.equalsIgnoreCase(expCopyDocRdR2) && actCopyDocAvgRateOR2.equalsIgnoreCase(expCopyDocAvgRateOR2) && actCopyDocQtyR2.equalsIgnoreCase(expCopyDocQtyR2)
				&& actCopyDocLPvnR2==expCopyDocLPvnR2 && actCopyDocLMrnR2==expCopyDocLMrnR2
				&& actCopyDocRateR2.equalsIgnoreCase(expCopyDocRateR2) && actCopyDocGrossR2.equalsIgnoreCase(expCopyDocGrossR2) && actCopyDocBatchR2==expCopyDocBatchR2
				&& actCopyDocBinsR2.equalsIgnoreCase(expCopyDocBinsR2)  && actCopyDocRmaR2==expCopyDocRmaR2
				
				&& actCopyDocWareHouseR3.equalsIgnoreCase(expCopyDocWareHouseR3) && actCopyDocItemR3.equalsIgnoreCase(expCopyDocItemR3) && actCopyDocUnitsR3.equalsIgnoreCase(expCopyDocUnitsR3)
				&& actCopyDocRdR3.equalsIgnoreCase(expCopyDocRdR3) && actCopyDocAvgRateOR3.equalsIgnoreCase(expCopyDocAvgRateOR3) && actCopyDocQtyR3.equalsIgnoreCase(expCopyDocQtyR3)
				&& actCopyDocLPvnR3==expCopyDocLPvnR3 && actCopyDocLMrnR3==expCopyDocLMrnR3
				&& actCopyDocRateR3.equalsIgnoreCase(expCopyDocRateR3) && actCopyDocGrossR3.equalsIgnoreCase(expCopyDocGrossR3) && actCopyDocBatchR3==expCopyDocBatchR3
				&& actCopyDocBinsR3==expCopyDocBinsR3 && actCopyDocRmaR3.equalsIgnoreCase(expCopyDocRmaR3)
				
				&& actCopyDocWareHouseR4.equalsIgnoreCase(expCopyDocWareHouseR4) && actCopyDocItemR4.equalsIgnoreCase(expCopyDocItemR4) && actCopyDocUnitsR4.equalsIgnoreCase(expCopyDocUnitsR4)
				&& actCopyDocRdR4.equalsIgnoreCase(expCopyDocRdR4) && actCopyDocAvgRateOR4.equalsIgnoreCase(expCopyDocAvgRateOR4) && actCopyDocQtyR4.equalsIgnoreCase(expCopyDocQtyR4)
				&& actCopyDocLPvnR4==expCopyDocLPvnR4 && actCopyDocLMrnR4==expCopyDocLMrnR4
				&& actCopyDocRateR4.equalsIgnoreCase(expCopyDocRateR4) && actCopyDocGrossR4.equalsIgnoreCase(expCopyDocGrossR4) && actCopyDocBatchR4.equalsIgnoreCase(expCopyDocBatchR4)
				&& actCopyDocBinsR4==expCopyDocBinsR4  && actCopyDocRmaR4==expCopyDocRmaR4
						
				&& actCopyDocWareHouseR5.equalsIgnoreCase(expCopyDocWareHouseR5) && actCopyDocItemR5.equalsIgnoreCase(expCopyDocItemR5) && actCopyDocUnitsR5.equalsIgnoreCase(expCopyDocUnitsR5)
				&& actCopyDocRdR5.equalsIgnoreCase(expCopyDocRdR5) && actCopyDocAvgRateOR5.equalsIgnoreCase(expCopyDocAvgRateOR5) && actCopyDocQtyR5.equalsIgnoreCase(expCopyDocQtyR5)
				&& actCopyDocLPvnR5==expCopyDocLPvnR5 && actCopyDocLMrnR5==expCopyDocLMrnR5
				&& actCopyDocRateR5.equalsIgnoreCase(expCopyDocRateR5) && actCopyDocGrossR5.equalsIgnoreCase(expCopyDocGrossR5) && actCopyDocBatchR5==expCopyDocBatchR5
				&& actCopyDocBinsR5==expCopyDocBinsR5 && actCopyDocRmaR5==expCopyDocRmaR5)
		{	
			
			
			excelReader.setCellData(xlfile, xlSheetName, 79, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Copy Document Options Are NOT As Expected");
			excelReader.setCellData(xlfile, xlSheetName, 79, 9, resFail);
			return false;
		}
	}
	
	

	@FindBy(xpath="//input[@id='id_body_35_6']")
	private static WebElement  enter_LPucrhaseVoucherN;
	

	public boolean checkLoadingVoucherInformationFromCopyDocumentOnClickOnOkInPurchasesReturns() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cd_OkBtn));
		cd_OkBtn.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();
		
		// Actual
		
        boolean actLPVNR1	=select1stRow_7thColumn.getText().isEmpty();
        boolean actLPVNR2	=select2ndRow_7thColumn.getText().isEmpty();
        boolean actLPVNR3	=select3rdRow_7thColumn.getText().isEmpty();
        boolean actLPVNR4	=select4thRow_7thColumn.getText().isEmpty();
        
        // Expected
		
        boolean expLPVNR1	=true;
        boolean expLPVNR2	=true;
        boolean expLPVNR3	=true;
        boolean expLPVNR4	=true;
        
        Thread.sleep(2000);
        
		
		System.out.println("************************************* checkLoadingVoucherInformationFromCopyDocumentOnClickOnOkInPurchasesReturns  ********************************************");
		
		System.out.println("LPVNR1 			: "+actLPVNR1		+"  Value Expected : "+expLPVNR1);
		System.out.println("LPVNR2 			: "+actLPVNR2		+"  Value Expected : "+expLPVNR2);
		System.out.println("LPVNR3 			: "+actLPVNR3		+"  Value Expected : "+expLPVNR3);
		System.out.println("LSOR4 			: "+actLPVNR4		+"  Value Expected : "+expLPVNR4);
		
		if(actLPVNR1==expLPVNR1 && actLPVNR2==expLPVNR2 && actLPVNR3==expLPVNR3 && actLPVNR4==expLPVNR4)
		{
			
	    	// First Row
	    	
	    	select1stRow_7thColumn.click();
	    	
	    	Thread.sleep(2000);
	    	
	    	List<WebElement> rowCountInLinkScreen=LinkRowCount;
			
			int rowCount=rowCountInLinkScreen.size();
		
			System.out.println(rowCount);
			
			for (int i = 1; i <= rowCount; i++) 
			{
				WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
				
				WebElement itemName=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[9]"));
				
				String actvoucheno=voucherno.getText();
				
				String actitemName=itemName.getText();
				
				System.out.println(actvoucheno);
				
				System.out.println(actitemName);
				
				if(actvoucheno.equalsIgnoreCase("NDT45:1") && actitemName.equalsIgnoreCase("BATCH WA ITEM"))
				{
					Thread.sleep(2000);
					WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
					radioBtn.click();
					
					break;
				}

			}
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
			workFlowOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
			select1stRow_9thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			
			List<WebElement> batchrowcount=batchPopUPRowCount;
			
			int batchrowcount1=batchrowcount.size();
		
			System.out.println(batchrowcount1);
			
			for (int i = 1; i <= batchrowcount1; i++) 
			{
				WebElement batchno=getDriver().findElement(By.xpath("//tbody[@id='Id_MRPBatch_Grid_body']/tr["+i+"]/td[2]"));
				
				
				String actbatchno=batchno.getText();
				
				
				System.out.println(actbatchno);
				
				
				if(actbatchno.equalsIgnoreCase("PVHWA") )
				{
					Thread.sleep(2000);
					WebElement index=getDriver().findElement(By.xpath("//tbody[@id='Id_MRPBatch_Grid_body']/tr["+i+"]/td[1]"));
					getAction().doubleClick(index).build().perform();
					
					break;
				}

			}
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
			
			
			// Second Row
			Thread.sleep(2000);
			
			select2ndRow_7thColumn.click();
			
			Thread.sleep(2000);
	    	
			List<WebElement> rowCountInLinkScreen1=LinkRowCount;
			
			int rowCount1=rowCountInLinkScreen1.size();
		
			System.out.println(rowCount1);
			
			for (int i = 1; i <= rowCount1; i++) 
			{
				WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
				
				WebElement itemName=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[9]"));
				
				String actvoucheno=voucherno.getText();
				
				String actitemName=itemName.getText();
				
				System.out.println(actvoucheno);
				
				System.out.println(actitemName);
				
				if(actvoucheno.equalsIgnoreCase("NDT45:1") && actitemName.equalsIgnoreCase("BIN FINISHED GOODS ITEM"))
				{
					Thread.sleep(2000);
					WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
					radioBtn.click();
					
					break;
				}

			}
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
			workFlowOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_9thColumn));
			select2ndRow_9thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchBtn));
			binSearchBtn.click();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
			binAutoAllocateBtn.click();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
			binOkBtn.click();
			
			// Third Row
			Thread.sleep(2000);
			
			select3rdRow_7thColumn.click();
			
			Thread.sleep(2000);
	    	
			List<WebElement> rowCountInLinkScreen2=LinkRowCount;
			
			int rowCount2=rowCountInLinkScreen2.size();
		
			System.out.println(rowCount2);
			
			for (int i = 1; i <= rowCount2; i++) 
			{
				WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
				
				WebElement itemName=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[9]"));
				
				String actvoucheno=voucherno.getText();
				
				String actitemName=itemName.getText();
				
				System.out.println(actvoucheno);
				
				System.out.println(actitemName);
				
				if(actvoucheno.equalsIgnoreCase("NDT45:1") && actitemName.equalsIgnoreCase("RMA RITEM"))
				{
					Thread.sleep(2000);
					WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
					radioBtn.click();
					
					break;
				}

			}
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
			workFlowOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_9thColumn));
			select3rdRow_9thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardExpandBtn));
			rmaoutwardExpandBtn.click();
			
			Thread.sleep(2000);
			
			
			int rowCountRma=searchRmaRowCount.size();
		
			System.out.println(rowCountRma);
			
			for (int i = 1; i <= rowCountRma; i++) 
			{
				WebElement serialNumber=getDriver().findElement(By.xpath("//table[@id='RMASearchTable']/tbody/tr["+i+"]/td[2]"));
				
				String actserialNumber=serialNumber.getText();
				
				
				System.out.println(actserialNumber);
				
				
				if(actserialNumber.equalsIgnoreCase("Hyd@Pv1"))
				{
					Thread.sleep(2000);
					WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='RMASearchTable']/tbody/tr["+i+"]/td[1]/input"));
					radioBtn.click();
					
					break;
				}

			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAOkBtn));
			searchRMAOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardOkBtn));
			rmaoutwardOkBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
			enter_RMA.sendKeys(Keys.TAB);
			
			
			// Fourth Row
			
			
			Thread.sleep(2000);
			
			select4thRow_7thColumn.click();
			
			Thread.sleep(2000);
	    	
	    	List<WebElement> rowCountInLinkScreen4=LinkRowCount;
			
			int rowCount4=rowCountInLinkScreen4.size();
		
			System.out.println(rowCount4);
			
			for (int i = 1; i <= rowCount4; i++) 
			{
				WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
				
				WebElement itemName=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[9]"));
				
				String actvoucheno=voucherno.getText();
				
				String actitemName=itemName.getText();
				
				System.out.println(actvoucheno);
				
				System.out.println(actitemName);
				
				if(actvoucheno.equalsIgnoreCase("NDT45:1") && actitemName.equalsIgnoreCase("BATCH BR ITEM"))
				{
					Thread.sleep(2000);
					WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
					radioBtn.click();
					
					break;
				}

			}
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
			workFlowOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_9thColumn));
			select4thRow_9thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			
			List<WebElement> batchrowcountbr=batchPopUPRowCount;
			
			int batchrowcount2=batchrowcountbr.size();
		
			System.out.println(batchrowcount2);
			
			for (int i = 1; i <= batchrowcount2; i++) 
			{
				WebElement batchno=getDriver().findElement(By.xpath("//tbody[@id='Id_MRPBatch_Grid_body']/tr["+i+"]/td[2]"));
				
				
				String actbatchno=batchno.getText();
				
				
				System.out.println(actbatchno);
				
				
				if(actbatchno.equalsIgnoreCase("PVHBR") )
				{
					Thread.sleep(2000);
					WebElement index=getDriver().findElement(By.xpath("//tbody[@id='Id_MRPBatch_Grid_body']/tr["+i+"]/td[1]"));
					getAction().doubleClick(index).build().perform();
					
					break;
				}

			}
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
			
			
			// Fifth Row
			
			
			Thread.sleep(2000);
			
			select5thRow_7thColumn.click();
			
			Thread.sleep(2000);
	    	
	    	List<WebElement> rowCountInLinkScreen5=LinkRowCount;
			
			int rowCount5=rowCountInLinkScreen5.size();
		
			System.out.println(rowCount5);
			
			for (int i = 1; i <= rowCount5; i++) 
			{
				WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
				
				WebElement itemName=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[9]"));
				
				String actvoucheno=voucherno.getText();
				
				String actitemName=itemName.getText();
				
				System.out.println(actvoucheno);
				
				System.out.println(actitemName);
				
				if(actvoucheno.equalsIgnoreCase("NDT45:7") && actitemName.equalsIgnoreCase("STOCK ITEM"))
				{
					Thread.sleep(2000);
					WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
					radioBtn.click();
					
					break;
				}

			}
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
			workFlowOkBtn.click();
			
			Thread.sleep(2000);
			
			Thread.sleep(2000);
			
			select5thRow_9thColumn.click();
			
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
	    	
	    	
			
			return true;
		}
		else
		{
			// First Row
	    	
	    	select1stRow_7thColumn.click();
	    	
	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_LPucrhaseVoucherN));
	    	enter_LPucrhaseVoucherN.sendKeys(Keys.SPACE);
	    	
	    	Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
			workFlowOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
			select1stRow_9thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			

			Thread.sleep(2000);
			
			
			List<WebElement> batchrowcount=batchPopUPRowCount;
			
			int batchrowcount1=batchrowcount.size();
		
			System.out.println(batchrowcount1);
			
			for (int i = 1; i <= batchrowcount1; i++) 
			{
				WebElement batchno=getDriver().findElement(By.xpath("//tbody[@id='Id_MRPBatch_Grid_body']/tr["+i+"]/td[2]"));
				
				
				String actbatchno=batchno.getText();
				
				
				System.out.println(actbatchno);
				
				
				if(actbatchno.equalsIgnoreCase("PVHWA") )
				{
					Thread.sleep(2000);
					WebElement index=getDriver().findElement(By.xpath("//tbody[@id='Id_MRPBatch_Grid_body']/tr["+i+"]/td[1]"));
					getAction().doubleClick(index).build().perform();
					
					break;
				}

			}
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
			
			// Second Row
			Thread.sleep(2000);
			
			select2ndRow_7thColumn.click();
	    	
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_LPucrhaseVoucherN));
	    	enter_LPucrhaseVoucherN.sendKeys(Keys.SPACE);
	    	
	    	Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
			workFlowOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_9thColumn));
			select2ndRow_9thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchBtn));
			binSearchBtn.click();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
			binAutoAllocateBtn.click();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
			binOkBtn.click();
			
			// Third Row
			Thread.sleep(2000);
			
			select3rdRow_7thColumn.click();
	    	
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_LPucrhaseVoucherN));
	    	enter_LPucrhaseVoucherN.sendKeys(Keys.SPACE);
	    	
	    	Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
			workFlowOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_9thColumn));
			select3rdRow_9thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardExpandBtn));
			rmaoutwardExpandBtn.click();
			
			Thread.sleep(2000);
			
			
			int rowCountRma=searchRmaRowCount.size();
		
			System.out.println(rowCountRma);
			
			for (int i = 1; i <= rowCountRma; i++) 
			{
				WebElement serialNumber=getDriver().findElement(By.xpath("//table[@id='RMASearchTable']/tbody/tr["+i+"]/td[2]"));
				
				String actserialNumber=serialNumber.getText();
				
				
				System.out.println(actserialNumber);
				
				
				if(actserialNumber.equalsIgnoreCase("Hyd@Pv1"))
				{
					Thread.sleep(2000);
					WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='RMASearchTable']/tbody/tr["+i+"]/td[1]/input"));
					radioBtn.click();
					
					break;
				}

			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAOkBtn));
			searchRMAOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardOkBtn));
			rmaoutwardOkBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
			enter_RMA.sendKeys(Keys.TAB);
			
			// Fourth Row
			
			Thread.sleep(2000);
	    	
	    	select4thRow_7thColumn.click();
	    	
	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_LPucrhaseVoucherN));
	    	enter_LPucrhaseVoucherN.sendKeys(Keys.SPACE);
	    	
	    	Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
			workFlowOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_9thColumn));
			select4thRow_9thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			

			Thread.sleep(2000);
			
			
			List<WebElement> batchrowcountbr=batchPopUPRowCount;
			
			int batchrowcount2=batchrowcountbr.size();
		
			System.out.println(batchrowcount2);
			
			for (int i = 1; i <= batchrowcount2; i++) 
			{
				WebElement batchno=getDriver().findElement(By.xpath("//tbody[@id='Id_MRPBatch_Grid_body']/tr["+i+"]/td[2]"));
				
				
				String actbatchno=batchno.getText();
				
				
				System.out.println(actbatchno);
				
				
				if(actbatchno.equalsIgnoreCase("PVHBR") )
				{
					Thread.sleep(2000);
					WebElement index=getDriver().findElement(By.xpath("//tbody[@id='Id_MRPBatch_Grid_body']/tr["+i+"]/td[1]"));
					getAction().doubleClick(index).build().perform();
					
					break;
				}

			}
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
			
			
			// Fifth Row
			Thread.sleep(2000);
			
			select5thRow_7thColumn.click();
	    	
	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_LPucrhaseVoucherN));
	    	enter_LPucrhaseVoucherN.sendKeys(Keys.SPACE);
	    	
	    	Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
			workFlowOkBtn.click();
			
			
			Thread.sleep(2000);
			
			select5thRow_9thColumn.click();
			
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			return false;
		}
	}
	
	
	
	public boolean checkSavingPurchasesReturnsWithAllItemsThroughCopyDocument() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
 		saveBtn.click();
 		
 		Thread.sleep(2000);
	
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(breakUpByTagTab));
 		breakUpByTagTab.click();
 		
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
 		billRefNewReferenceTxt.click();

 		String actBillNewReference,actBillAmtAdjAgainstNewRefInOtherVouchers,actBillTransactionCurrency,actBillBaseCurrency,actBillLocalCurrency,actBillBalanceNewRefAmount,actBillBreakUpByTagDepartment,actBillBreakUpByTagBaseCurrency,actBillBreakUpByTagBillCurrency,actBillBreakUpByTagLocalCurrency,actBillAmtAdjustedInTransactionCurrency,actBillBalanceAmtToBeAdjustedInTransactionCurrency,act13;
 		String expBillNewReference,expBillAmtAdjAgainstNewRefInOtherVouchers,expBillTransactionCurrency,expBillBaseCurrency,expBillLocalCurrency,expBillBalanceNewRefAmount,expBillBreakUpByTagDepartment,expBillBreakUpByTagBaseCurrency,expBillBreakUpByTagBillCurrency,expBillBreakUpByTagLocalCurrency,expBillAmtAdjustedInTransactionCurrency,expBillBalanceAmtToBeAdjustedInTransactionCurrency;
 		
 		actBillNewReference									=billRefNewReferenceTxt.getAttribute("value");
 		actBillAmtAdjAgainstNewRefInOtherVouchers			=amtAdjustedAgainstNewREfinOtherVouchers.getText();
 		actBillTransactionCurrency							=transactionCurency.getText();
 		actBillBaseCurrency									=baseCurrency.getText();
 		actBillLocalCurrency								=localCurrencyDhs.getText();
 		
 		actBillBalanceNewRefAmount							=balanceNewReferenceAmt.getText();
 		
 		actBillBreakUpByTagDepartment						=breakUpByTagDepartment.getText();
 		actBillBreakUpByTagBaseCurrency						=breakUpByTagBaseCurrency.getText();
 		actBillBreakUpByTagBillCurrency						=breakUpByTagBillCurrency.getText();
 		
 		actBillBreakUpByTagLocalCurrency					=breakUpByTagBaseLocalCurrency.getText();
 		actBillAmtAdjustedInTransactionCurrency				=billRefAdjustAmountInTransCurency.getText();
 		actBillBalanceAmtToBeAdjustedInTransactionCurrency	=billRefBalanceAmountAdjustInTrnasCurrency.getText();
 		
 		
 		expBillNewReference									="0.00";
 		expBillAmtAdjAgainstNewRefInOtherVouchers			="0.00";
 		expBillTransactionCurrency							="19.63";
 		expBillBaseCurrency									="19.63";
 		expBillLocalCurrency								="1.37";
 		
 		expBillBalanceNewRefAmount							="0.00";
 		
 		expBillBreakUpByTagDepartment						="INDIA";
 		expBillBreakUpByTagBillCurrency						="19.63";
 		expBillBreakUpByTagBaseCurrency						="19.63";
 		
 		
 		expBillBreakUpByTagLocalCurrency					="1.37";
 		expBillAmtAdjustedInTransactionCurrency				="0";
 		expBillBalanceAmtToBeAdjustedInTransactionCurrency	="19.63";
 	

 		System.out.println("*********************************** checkSavingPurchasesReturnsWithAllItemsThroughCopyDocument  ************************************");


 		System.out.println("actBillNewReference								   : "+ actBillNewReference									+" Value Expected : "+expBillNewReference);
 		System.out.println("actBillAmtAdjAgainstNewRefInOtherVouchers		   : "+actBillAmtAdjAgainstNewRefInOtherVouchers			+" Value Expected : "+expBillAmtAdjAgainstNewRefInOtherVouchers);
 		System.out.println("actBillTransactionCurrency						   : "+actBillTransactionCurrency							+" Value Expected : "+expBillTransactionCurrency);
 		System.out.println("actBillBaseCurrency								   : "+actBillBaseCurrency									+" Value Expected : "+ expBillBaseCurrency);
 		System.out.println("actBillLocalCurrency							   : "+actBillLocalCurrency									+" Value Expected : "+expBillLocalCurrency);
 		System.out.println("actBillBalanceNewRefAmount						   : "+ actBillBalanceNewRefAmount							+" Value Expected : "+expBillBalanceNewRefAmount);
        System.out.println("actBillBreakUpByTagDepartment					   : "+actBillBreakUpByTagDepartment						+" Value Expected : "+expBillBreakUpByTagDepartment);
 		System.out.println("actBillBreakUpByTagBaseCurrency				       : "+actBillBreakUpByTagBaseCurrency						+" Value Expected : "+expBillBreakUpByTagBaseCurrency);
 		System.out.println("actBillBreakUpByTagBillCurrency 				   : "+actBillBreakUpByTagBillCurrency						+" Value Expected : "+expBillBreakUpByTagBillCurrency);
 		System.out.println("actBillBreakUpByTagLocalCurrency				   : "+actBillBreakUpByTagLocalCurrency						+" Value Expected : "+expBillBreakUpByTagLocalCurrency);
 		System.out.println("actBillAmtAdjustedInTransactionCurrency			   : "+actBillAmtAdjustedInTransactionCurrency				+" Value Expected : "+expBillAmtAdjustedInTransactionCurrency);
 		System.out.println("actBillBalanceAmtToBeAdjustedInTransactionCurrency : "+actBillBalanceAmtToBeAdjustedInTransactionCurrency	+" Value Expected : "+expBillBalanceAmtToBeAdjustedInTransactionCurrency);
 		
 		   
 	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
	    billRefPickIcon.click();
	   
	    //pick button is click
	   
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(breakUpByTagTab));
 		breakUpByTagTab.click();
 		
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
 		billRefNewReferenceTxt.click();
 		
 		
 		String actBillNewReferencePick,actBillAmtAdjAgainstNewRefInOtherVouchersPick,actBillTransactionCurrencyPick,actBillBaseCurrencyPick,actBillLocalCurrencyPick,actBillBalanceNewRefAmountPick,actBillBreakUpByTagDepartmentPick,actBillBreakUpByTagBaseCurrencyPick,actBillBreakUpByTagBillCurrencyPick,actBillBreakUpByTagLocalCurrencyPick,actBillAmtAdjustedInTransactionCurrencyPick,actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick;
 		String expBillNewReferencePick,expBillAmtAdjAgainstNewRefInOtherVouchersPick,expBillTransactionCurrencyPick,expBillBaseCurrencyPick,expBillLocalCurrencyPick,expBillBalanceNewRefAmountPick,expBillBreakUpByTagDepartmentPick,expBillBreakUpByTagBaseCurrencyPick,expBillBreakUpByTagBillCurrencyPick,expBillBreakUpByTagLocalCurrencyPick,expBillAmtAdjustedInTransactionCurrencyPick,expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick;
 		
 		actBillNewReferencePick									=billRefNewReferenceTxt.getAttribute("value");
 		actBillAmtAdjAgainstNewRefInOtherVouchersPick			=amtAdjustedAgainstNewREfinOtherVouchers.getText();
 		actBillTransactionCurrencyPick							=transactionCurency.getText();
 		actBillBaseCurrencyPick									=baseCurrency.getText();
 		actBillLocalCurrencyPick								=localCurrencyDhs.getText();
 		
 		actBillBalanceNewRefAmountPick							=balanceNewReferenceAmt.getText();
 		
 		actBillBreakUpByTagDepartmentPick						=breakUpByTagDepartment.getText();
 		actBillBreakUpByTagBaseCurrencyPick						=breakUpByTagBaseCurrency.getText();
 		actBillBreakUpByTagBillCurrencyPick						=breakUpByTagBillCurrency.getText();
 		
 		actBillBreakUpByTagLocalCurrencyPick					=breakUpByTagBaseLocalCurrency.getText();
 		actBillAmtAdjustedInTransactionCurrencyPick				=billRefAdjustAmountInTransCurency.getText();
 		actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	=billRefBalanceAmountAdjustInTrnasCurrency.getText();
 		
 		
 		expBillNewReferencePick									="19.63";
 		expBillAmtAdjAgainstNewRefInOtherVouchersPick			="0.00";
 		expBillTransactionCurrencyPick							="19.63";
 		expBillBaseCurrencyPick									="19.63";
 		expBillLocalCurrencyPick								="1.37";
 		
 		expBillBalanceNewRefAmountPick							="19.63";
 		
 		expBillBreakUpByTagDepartmentPick						="INDIA";
 		expBillBreakUpByTagBillCurrencyPick						="19.63";
 		expBillBreakUpByTagBaseCurrencyPick						="19.63";
 		
 		
 		expBillBreakUpByTagLocalCurrencyPick					="1.37";
 		expBillAmtAdjustedInTransactionCurrencyPick				="19.63";
 		expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	="0.00";

 		System.out.println("actBillNewReferencePick 								: "+actBillNewReferencePick									+ " Value Expected : "+expBillNewReferencePick);
 		System.out.println("actBillAmtAdjAgainstNewRefInOtherVouchersPick			: " + actBillAmtAdjAgainstNewRefInOtherVouchersPick			+ "	Value Expected : "+expBillAmtAdjAgainstNewRefInOtherVouchersPick);
 		System.out.println("actBillTransactionCurrencyPick							: "+ actBillTransactionCurrencyPick							+ " Value Expected : "+expBillTransactionCurrencyPick);
 		System.out.println("actBillBaseCurrencyPick									: "+ actBillBaseCurrencyPick								+ " Value Expected : "+expBillBaseCurrencyPick);
 		System.out.println("actBillLocalCurrencyPick								: "+ actBillLocalCurrencyPick								+ " Value Expected : "+expBillLocalCurrencyPick);
 		System.out.println("actBillBalanceNewRefAmountPick							: "+ actBillBalanceNewRefAmountPick							+ " Value Expected : "+expBillBalanceNewRefAmountPick);
        System.out.println("actBillBreakUpByTagDepartmentPick						: "+ actBillBreakUpByTagDepartmentPick						+ " Value Expected : "+expBillBreakUpByTagDepartmentPick);
 		System.out.println("actBillBreakUpByTagBaseCurrencyPick						: "+ actBillBreakUpByTagBaseCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagBaseCurrencyPick);
 		System.out.println("actBillBreakUpByTagBillCurrencyPick						: "+ actBillBreakUpByTagBillCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagBillCurrencyPick);
 		System.out.println("actBillBreakUpByTagLocalCurrencyPick					: "+ actBillBreakUpByTagLocalCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagLocalCurrencyPick);
 		System.out.println("actBillAmtAdjustedInTransactionCurrencyPick				: "+ actBillAmtAdjustedInTransactionCurrencyPick			+ " Value Expected : "+expBillAmtAdjustedInTransactionCurrencyPick);
 		System.out.println("actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick  : "+ actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	+ " Value Expected : "+expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick);

 	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
 	    Bill_OkBtn.click();
	   
		String ExpMessage="This Transaction will make the Stock Negative";
		
		String validationMessage=checkValidationMessage(ExpMessage);
		
		boolean savingMessage=checkVoucherSavingMessage(docno);
		
		
		System.out.println("validationMessage  	:  "+validationMessage +" Value Expected : "+ExpMessage);
		
		System.out.println("SavingMessage  		:  "+savingMessage +" Value Expected : "+"TRUE");
		
		if(validationMessage.equalsIgnoreCase(ExpMessage) && savingMessage==true &&  
				
		        actBillNewReference.equalsIgnoreCase(expBillNewReference) &&
 				actBillAmtAdjAgainstNewRefInOtherVouchers.equalsIgnoreCase(expBillAmtAdjAgainstNewRefInOtherVouchers) &&
 				actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 				
 				actBillBaseCurrency.equalsIgnoreCase(actBillBaseCurrency) &&
 				actBillLocalCurrency.equalsIgnoreCase(actBillLocalCurrency) &&
 				actBillBalanceNewRefAmount.equalsIgnoreCase(actBillBalanceNewRefAmount) &&
 				actBillBreakUpByTagDepartment.equalsIgnoreCase(actBillBreakUpByTagDepartment) &&
 				actBillBreakUpByTagBaseCurrency.equalsIgnoreCase(actBillBreakUpByTagBaseCurrency) &&
 				actBillBreakUpByTagBillCurrency.equalsIgnoreCase(actBillBreakUpByTagBillCurrency) &&
 				actBillBreakUpByTagLocalCurrency.equalsIgnoreCase(actBillBreakUpByTagLocalCurrency) &&
 				actBillAmtAdjustedInTransactionCurrency.equalsIgnoreCase(actBillAmtAdjustedInTransactionCurrency) &&
 				actBillBalanceAmtToBeAdjustedInTransactionCurrency.equalsIgnoreCase(actBillBalanceAmtToBeAdjustedInTransactionCurrency) &&
		
 				
 				actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) &&
 				actBillAmtAdjAgainstNewRefInOtherVouchersPick.equalsIgnoreCase(expBillAmtAdjAgainstNewRefInOtherVouchersPick) &&
 				actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) &&
 				actBillBaseCurrencyPick.equalsIgnoreCase(actBillBaseCurrencyPick) &&
 				actBillLocalCurrencyPick.equalsIgnoreCase(actBillLocalCurrencyPick) &&
 				actBillBalanceNewRefAmountPick.equalsIgnoreCase(actBillBalanceNewRefAmountPick) &&
 				actBillBreakUpByTagDepartmentPick.equalsIgnoreCase(actBillBreakUpByTagDepartmentPick) &&
 				actBillBreakUpByTagBaseCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagBaseCurrencyPick) &&
 				actBillBreakUpByTagBillCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagBillCurrencyPick) &&
 				actBillBreakUpByTagLocalCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagLocalCurrencyPick) &&
 				actBillAmtAdjustedInTransactionCurrencyPick.equalsIgnoreCase(actBillAmtAdjustedInTransactionCurrencyPick) &&
 				actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick.equalsIgnoreCase(actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick))
		{
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));	
			new_CloseBtn.click();
			
			
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));	
			new_CloseBtn.click();
			
			
			return false;
		}
	}
	
	
	
	
	
	


	public boolean checkPurchasesReturnsVoucherEntryPageDeleteOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
		getAction().doubleClick(grid_ChkBox1).build().perform();
		
		boolean loading=checkLoadingMessage();
		
		System.out.println("VoucherLoadingMessage  : "+loading +" Value Expected : "+"TRUE");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));
		new_DeleteBtn.click();
		
		getWaitForAlert();
		
		String actAlertMessage=getAlert().getText();
		
		String expAlertMessage="Are you sure that you want to delete the Selected Voucher?";
		
		System.out.println("*********************************** checkPurchasesReturnsVoucherEntryPageDeleteOption  ************************************");
	
		System.out.println("Alert Message display on Delete the Vocher  :  "+actAlertMessage +"  "+expAlertMessage);
		
		if(actAlertMessage.contains(expAlertMessage))
		{
			System.out.println("Test Pass : Alert Poped After Clicking Delete");
			
			excelReader.setCellData(xlfile, xlSheetName, 64, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Alert NOT Poped After Clicking Delete");
			
			excelReader.setCellData(xlfile, xlSheetName, 64, 9, resFail);
			return false;
		}
	
	}
	
	
	
	public boolean checkPurchasesReturnsVoucherCancelButtonInAlertOnDelete() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getAlert().dismiss();
		
		
		if(getIsAlertPresent()==false)
		{
			excelReader.setCellData(xlfile, xlSheetName, 65, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 65, 9, resFail);
			return false;
		}
	
	}
	
	
	
	public boolean checkPurchasesReturnsVoucherOkButtonInAlertOnDelete() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));
		new_DeleteBtn.click();
		
		getWaitForAlert();
		
		String actAlertMessage=getAlert().getText();
		
		String expAlertMessage="Are you sure that you want to delete the Selected Voucher?";
		
		System.out.println("*********************************** checkPurchasesReturnsVoucherOkButtonInAlertOnDelete  ************************************");
	
		System.out.println("Alert Message on Deleteing the Voucher :  "+actAlertMessage +"  "+expAlertMessage);
		
		getAlert().accept();
		
		boolean deleteMessage=checkEntryPageDeleteMessage();
		
		System.out.println("deleteMessage  : "+deleteMessage+" Value Expected : "+"TRUE");
	
		if(actAlertMessage.contains(expAlertMessage) && deleteMessage==true)
		{
			System.out.println("Test Pass : Deleted Voucher");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			
			
			excelReader.setCellData(xlfile, xlSheetName, 66, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : NOT Deleted Voucher");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			
			excelReader.setCellData(xlfile, xlSheetName, 66, 9, resFail);
			return false;
		}
	}
	
	
	
	
	

	public boolean checkPurchasesReturnsVoucherCopyAndPasteFromClipBoardOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
		getAction().doubleClick(grid_ChkBox1).build().perform();
		
		boolean loading=checkLoadingMessage();
		
		System.out.println("VoucherLoadingMessage  : "+loading +" Value Expected : "+"TRUE");
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
		toggleBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(copyToClipBoardOption));
		copyToClipBoardOption.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_newBtn));
		new_newBtn.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
		toggleBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pasteFromClipBoardOption));
		pasteFromClipBoardOption.click();
		
		checkUserFriendlyMessage();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();
		
		// Actual
		
        boolean actLPVNR1	=select1stRow_7thColumn.getText().isEmpty();
        boolean actLPVNR2	=select2ndRow_7thColumn.getText().isEmpty();
        boolean actLPVNR3	=select3rdRow_7thColumn.getText().isEmpty();
        boolean actLPVNR4	=select4thRow_7thColumn.getText().isEmpty();
        
        // Expected
		
        boolean expLPVNR1	=true;
        boolean expLPVNR2	=true;
        boolean expLPVNR3	=true;
        boolean expLPVNR4	=true;
        
        Thread.sleep(2000);
        
		
		System.out.println("************************************* checkPurchasesReturnsVoucherCopyAndPasteFromClipBoardOptions  ********************************************");
		
		System.out.println("LPVNR1 			: "+actLPVNR1		+"  Value Expected : "+expLPVNR1);
		System.out.println("LPVNR2 			: "+actLPVNR2		+"  Value Expected : "+expLPVNR2);
		System.out.println("LPVNR3 			: "+actLPVNR3		+"  Value Expected : "+expLPVNR3);
		System.out.println("LSOR4 			: "+actLPVNR4		+"  Value Expected : "+expLPVNR4);
		
		if(actLPVNR1==expLPVNR1 && actLPVNR2==expLPVNR2 && actLPVNR3==expLPVNR3 && actLPVNR4==expLPVNR4)
		{
			
	    	// First Row
	    	
	    	select1stRow_7thColumn.click();
	    	
	    	Thread.sleep(2000);
	    	
	    	List<WebElement> rowCountInLinkScreen=LinkRowCount;
			
			int rowCount=rowCountInLinkScreen.size();
		
			System.out.println(rowCount);
			
			for (int i = 1; i <= rowCount; i++) 
			{
				WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
				
				WebElement itemName=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[9]"));
				
				String actvoucheno=voucherno.getText();
				
				String actitemName=itemName.getText();
				
				System.out.println(actvoucheno);
				
				System.out.println(actitemName);
				
				if(actvoucheno.equalsIgnoreCase("NDT45:1") && actitemName.equalsIgnoreCase("BATCH WA ITEM"))
				{
					Thread.sleep(2000);
					WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
					radioBtn.click();
					
					break;
				}

			}
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
			workFlowOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
			select1stRow_9thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			
			List<WebElement> batchrowcount=batchPopUPRowCount;
			
			int batchrowcount1=batchrowcount.size();
		
			System.out.println(batchrowcount1);
			
			for (int i = 1; i <= batchrowcount1; i++) 
			{
				WebElement batchno=getDriver().findElement(By.xpath("//tbody[@id='Id_MRPBatch_Grid_body']/tr["+i+"]/td[2]"));
				
				
				String actbatchno=batchno.getText();
				
				
				System.out.println(actbatchno);
				
				
				if(actbatchno.equalsIgnoreCase("PVHWA") )
				{
					Thread.sleep(2000);
					WebElement index=getDriver().findElement(By.xpath("//tbody[@id='Id_MRPBatch_Grid_body']/tr["+i+"]/td[1]"));
					getAction().doubleClick(index).build().perform();
					
					break;
				}

			}
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
			
			
			// Second Row
			Thread.sleep(2000);
			
			select2ndRow_7thColumn.click();
			
			Thread.sleep(2000);
	    	
			List<WebElement> rowCountInLinkScreen1=LinkRowCount;
			
			int rowCount1=rowCountInLinkScreen1.size();
		
			System.out.println(rowCount1);
			
			for (int i = 1; i <= rowCount1; i++) 
			{
				WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
				
				WebElement itemName=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[9]"));
				
				String actvoucheno=voucherno.getText();
				
				String actitemName=itemName.getText();
				
				System.out.println(actvoucheno);
				
				System.out.println(actitemName);
				
				if(actvoucheno.equalsIgnoreCase("NDT45:1") && actitemName.equalsIgnoreCase("BIN FINISHED GOODS ITEM"))
				{
					Thread.sleep(2000);
					WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
					radioBtn.click();
					
					break;
				}

			}
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
			workFlowOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_9thColumn));
			select2ndRow_9thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchBtn));
			binSearchBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
			binAutoAllocateBtn.click();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
			binOkBtn.click();
			
			// Third Row
			Thread.sleep(2000);
			
			select3rdRow_7thColumn.click();
			
			Thread.sleep(2000);
	    	
			List<WebElement> rowCountInLinkScreen2=LinkRowCount;
			
			int rowCount2=rowCountInLinkScreen2.size();
		
			System.out.println(rowCount2);
			
			for (int i = 1; i <= rowCount2; i++) 
			{
				WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
				
				WebElement itemName=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[9]"));
				
				String actvoucheno=voucherno.getText();
				
				String actitemName=itemName.getText();
				
				System.out.println(actvoucheno);
				
				System.out.println(actitemName);
				
				if(actvoucheno.equalsIgnoreCase("NDT45:1") && actitemName.equalsIgnoreCase("RMA RITEM"))
				{
					Thread.sleep(2000);
					WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
					radioBtn.click();
					
					break;
				}

			}
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
			workFlowOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_9thColumn));
			select3rdRow_9thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardExpandBtn));
			rmaoutwardExpandBtn.click();
			
			Thread.sleep(2000);
			
			
			int rowCountRma=searchRmaRowCount.size();
		
			System.out.println(rowCountRma);
			
			for (int i = 1; i <= rowCountRma; i++) 
			{
				WebElement serialNumber=getDriver().findElement(By.xpath("//table[@id='RMASearchTable']/tbody/tr["+i+"]/td[2]"));
				
				String actserialNumber=serialNumber.getText();
				
				
				System.out.println(actserialNumber);
				
				
				if(actserialNumber.equalsIgnoreCase("Hyd@Pv1"))
				{
					Thread.sleep(2000);
					WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='RMASearchTable']/tbody/tr["+i+"]/td[1]/input"));
					radioBtn.click();
					
					break;
				}

			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAOkBtn));
			searchRMAOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardOkBtn));
			rmaoutwardOkBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
			enter_RMA.sendKeys(Keys.TAB);
			
			
			// Fourth Row
			
			
			Thread.sleep(2000);
			
			select4thRow_7thColumn.click();
			
			Thread.sleep(2000);
	    	
	    	List<WebElement> rowCountInLinkScreen4=LinkRowCount;
			
			int rowCount4=rowCountInLinkScreen4.size();
		
			System.out.println(rowCount4);
			
			for (int i = 1; i <= rowCount4; i++) 
			{
				WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
				
				WebElement itemName=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[9]"));
				
				String actvoucheno=voucherno.getText();
				
				String actitemName=itemName.getText();
				
				System.out.println(actvoucheno);
				
				System.out.println(actitemName);
				
				if(actvoucheno.equalsIgnoreCase("NDT45:1") && actitemName.equalsIgnoreCase("BATCH BR ITEM"))
				{
					Thread.sleep(2000);
					WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
					radioBtn.click();
					
					break;
				}

			}
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
			workFlowOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_9thColumn));
			select4thRow_9thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			
			List<WebElement> batchrowcountbr=batchPopUPRowCount;
			
			int batchrowcount2=batchrowcountbr.size();
		
			System.out.println(batchrowcount2);
			
			for (int i = 1; i <= batchrowcount2; i++) 
			{
				WebElement batchno=getDriver().findElement(By.xpath("//tbody[@id='Id_MRPBatch_Grid_body']/tr["+i+"]/td[2]"));
				
				
				String actbatchno=batchno.getText();
				
				
				System.out.println(actbatchno);
				
				
				if(actbatchno.equalsIgnoreCase("PVHBR") )
				{
					Thread.sleep(2000);
					WebElement index=getDriver().findElement(By.xpath("//tbody[@id='Id_MRPBatch_Grid_body']/tr["+i+"]/td[1]"));
					getAction().doubleClick(index).build().perform();
					
					break;
				}

			}
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
			
			
			// Fifth Row
			
			
			Thread.sleep(2000);
			
			select5thRow_7thColumn.click();
			
			Thread.sleep(2000);
	    	
	    	List<WebElement> rowCountInLinkScreen5=LinkRowCount;
			
			int rowCount5=rowCountInLinkScreen5.size();
		
			System.out.println(rowCount5);
			
			for (int i = 1; i <= rowCount5; i++) 
			{
				WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
				
				WebElement itemName=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[9]"));
				
				String actvoucheno=voucherno.getText();
				
				String actitemName=itemName.getText();
				
				System.out.println(actvoucheno);
				
				System.out.println(actitemName);
				
				if(actvoucheno.equalsIgnoreCase("NDT45:7") && actitemName.equalsIgnoreCase("STOCK ITEM"))
				{
					Thread.sleep(2000);
					WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
					radioBtn.click();
					
					break;
				}

			}
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
			workFlowOkBtn.click();
			
			Thread.sleep(2000);
			
			Thread.sleep(2000);
			
			select5thRow_9thColumn.click();
			
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
	    	
	    	
			
			return true;
		}
		else
		{
			// First Row
	    	
	    	select1stRow_7thColumn.click();
	    	
	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_LPucrhaseVoucherN));
	    	enter_LPucrhaseVoucherN.sendKeys(Keys.SPACE);
	    	
	    	Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
			workFlowOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
			select1stRow_9thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			

			Thread.sleep(2000);
			
			
			List<WebElement> batchrowcount=batchPopUPRowCount;
			
			int batchrowcount1=batchrowcount.size();
		
			System.out.println(batchrowcount1);
			
			for (int i = 1; i <= batchrowcount1; i++) 
			{
				WebElement batchno=getDriver().findElement(By.xpath("//tbody[@id='Id_MRPBatch_Grid_body']/tr["+i+"]/td[2]"));
				
				
				String actbatchno=batchno.getText();
				
				
				System.out.println(actbatchno);
				
				
				if(actbatchno.equalsIgnoreCase("PVHWA") )
				{
					Thread.sleep(2000);
					WebElement index=getDriver().findElement(By.xpath("//tbody[@id='Id_MRPBatch_Grid_body']/tr["+i+"]/td[1]"));
					getAction().doubleClick(index).build().perform();
					
					break;
				}

			}
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
			
			// Second Row
			Thread.sleep(2000);
			
			select2ndRow_7thColumn.click();
	    	
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_LPucrhaseVoucherN));
	    	enter_LPucrhaseVoucherN.sendKeys(Keys.SPACE);
	    	
	    	Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
			workFlowOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_9thColumn));
			select2ndRow_9thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchBtn));
			binSearchBtn.click();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
			binAutoAllocateBtn.click();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
			binOkBtn.click();
			
			// Third Row
			Thread.sleep(2000);
			
			select3rdRow_7thColumn.click();
	    	
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_LPucrhaseVoucherN));
	    	enter_LPucrhaseVoucherN.sendKeys(Keys.SPACE);
	    	
	    	Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
			workFlowOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_9thColumn));
			select3rdRow_9thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardExpandBtn));
			rmaoutwardExpandBtn.click();
			
			Thread.sleep(2000);
			
			
			int rowCountRma=searchRmaRowCount.size();
		
			System.out.println(rowCountRma);
			
			for (int i = 1; i <= rowCountRma; i++) 
			{
				WebElement serialNumber=getDriver().findElement(By.xpath("//table[@id='RMASearchTable']/tbody/tr["+i+"]/td[2]"));
				
				String actserialNumber=serialNumber.getText();
				
				
				System.out.println(actserialNumber);
				
				
				if(actserialNumber.equalsIgnoreCase("Hyd@Pv1"))
				{
					Thread.sleep(2000);
					WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='RMASearchTable']/tbody/tr["+i+"]/td[1]/input"));
					radioBtn.click();
					
					break;
				}

			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAOkBtn));
			searchRMAOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardOkBtn));
			rmaoutwardOkBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
			enter_RMA.sendKeys(Keys.TAB);
			
			// Fourth Row
			
			Thread.sleep(2000);
	    	
	    	select4thRow_7thColumn.click();
	    	
	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_LPucrhaseVoucherN));
	    	enter_LPucrhaseVoucherN.sendKeys(Keys.SPACE);
	    	
	    	Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
			workFlowOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_9thColumn));
			select4thRow_9thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			

			Thread.sleep(2000);
			
			
			List<WebElement> batchrowcountbr=batchPopUPRowCount;
			
			int batchrowcount2=batchrowcountbr.size();
		
			System.out.println(batchrowcount2);
			
			for (int i = 1; i <= batchrowcount2; i++) 
			{
				WebElement batchno=getDriver().findElement(By.xpath("//tbody[@id='Id_MRPBatch_Grid_body']/tr["+i+"]/td[2]"));
				
				
				String actbatchno=batchno.getText();
				
				
				System.out.println(actbatchno);
				
				
				if(actbatchno.equalsIgnoreCase("PVHBR") )
				{
					Thread.sleep(2000);
					WebElement index=getDriver().findElement(By.xpath("//tbody[@id='Id_MRPBatch_Grid_body']/tr["+i+"]/td[1]"));
					getAction().doubleClick(index).build().perform();
					
					break;
				}

			}
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
			
			
			// Fifth Row
			Thread.sleep(2000);
			
			select5thRow_7thColumn.click();
	    	
	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_LPucrhaseVoucherN));
	    	enter_LPucrhaseVoucherN.sendKeys(Keys.SPACE);
	    	
	    	Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
			workFlowOkBtn.click();
			
			
			Thread.sleep(2000);
			
			select5thRow_9thColumn.click();
			
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			return false;
		}
	}
	
	//Bill Reference Screen 	
	
	
		@FindBy(xpath="//input[@id='txtNewReference']")
		private static WebElement  billRefNewReferenceTxt;
		
		@FindBy(xpath="//input[@id='txtOnAccount']")
		private static WebElement  billRefTxtOnAccount;		
			
		@FindBy(xpath="//input[@id='Searchtxt']")
		private static WebElement  billRefSearchTxt;		
		
		@FindBy(xpath="//select[@id='cbmShowBillForAdjustment']")
		private static WebElement  billRefNewReferenceDropdown;		
		
		@FindBy(xpath="//select[@id='cbmShowBills']")
		private static WebElement  billRefShowBillsDropdown;		
		
		@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_11']//div[contains(text(),'Due Date')]")
		private static WebElement  billRefGridHeaderDueDate;		
		
		@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_16']//div[contains(text(),'Currency')]")
		private static WebElement  billRefGridHeaderCurrency;		
		
		@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_21']//div[contains(text(),'Original Amt')]")
		private static WebElement  billRefGridHeaderOrginalAmt;		
		
		@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_23']//div[contains(text(),'Balance Amount')]")
		private static WebElement  billRefGridHeaderBalanceAmt;		
		
		@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_33']//div[contains(text(),'Adjustment Amount')]")
		private static WebElement  billRefGridHeaderAdjustmentAmt;		
		
		@FindBy(xpath="//div[contains(text(),'Native Currency')]")
		private static WebElement  billRefGridHeaderNativeCurrency;		
		
		@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_41']//div[contains(text(),'Narration')]")
		private static WebElement  billRefGridHeaderNarration;		
		
		@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_50']//div[contains(text(),'Previous Adjustment Amount')]")
		private static WebElement  billRefGridHeaderPreviosAdjustmentAmt;		
		
		@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_1-0']")
		private static WebElement  billRefGridFirstRow;	
		
		@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_1-1']//input")
		private static WebElement  billRefGridFirstRowChkbox;		
		
		@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_2-1']//input")
		private static WebElement  billRefGridSecondRowChkbox;		
		
		@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_3-1']//input")
		private static WebElement  billRefGridThirdRowChkbox;		
		
		@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_1-33']")
		private static WebElement  billRefGridFirstRowAdjustmentAmtTxt;		
		
		@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_2-33']")
		private static WebElement  billRefGridSecondRowAdjustmentAmtTxt;		
		
		@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_3-33']")
		private static WebElement  billRefGridThirdRowAdjustmentAmtTxt;		
		
		@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_1-41']")
		private static WebElement  billRefGridFirstNarrationTxt;		
		
		@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_2-41']")
		private static WebElement  billRefGridSecondNarrationTxt;		
		
		@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_3-41']")
		private static WebElement  billRefGridThirdNarrationTxt;		
		
		@FindBy(xpath="//input[@id='id_Narration']")
		private static WebElement  narrationToWrite;		
		
		@FindBy(xpath="//input[@id='id_limit']")
		private static WebElement  adjustAmtToWrite;		
		
		@FindBy(xpath="//div[@class='col-xs-6 navbar-header']//div[@class='navText']")
		private static WebElement  billRefPaymentsBillReferenceLabel;		
		
		@FindBy(xpath="//div[@class='col-sm-12 col-md-3']//input[@class='Fbutton']")
		private static WebElement  billRefAdjustOnFIFOBtn;		
		
		@FindBy(xpath="//span[@id='btnPick']")
		private static WebElement  billRefPickIcon;		
		
		@FindBy(xpath="//span[@id='btnOk']")
		private static WebElement  billRefOkBtn;		
		
		@FindBy(xpath="//span[@id='btnCancel']")
		private static WebElement  billRefcancel;		
		
		@FindBy(xpath="//label[@id='id_transactionentry_footer_panel_summary_value_net']")
		private static WebElement  billRefSummatyValueNet;		
		
		@FindBy(xpath="//td[@id='AccountAmount_col_1-1']")
		private static WebElement  billRefGridVendorRow1;	
		
		@FindBy(xpath="//td[@id='AccountAmount_col_1-2']")
		private static WebElement  billRefGridVendorAmtRow1;	
		
		@FindBy(xpath="//td[@id='AccountAmount_col_2-1']")
		private static WebElement  billRefGridVendorRow2;	
		
		@FindBy(xpath="//td[@id='AccountAmount_col_2-2']")
		private static WebElement  billRefGridVendorAmtRow2;	
		
		@FindBy(xpath="//td[@id='AccountAmount_col_3-1']")
		private static WebElement  billRefGridVendorRow3;
		
		@FindBy(xpath="//a[@class='transaction_viewname_anchor font-5']")
		private static WebElement  pendingBillsBtn;
		
		
		
		@FindBy(xpath="//tr[@id='trRender_1']//td//input")
		private static WebElement  pendingBillsGridRow1Chkbox;
		
		@FindBy(xpath="//tr[@id='trRender_2']//td//input")
		private static WebElement  pendingBillsGridRow2Chkbox;
		
		@FindBy(xpath="//tr[@id='trRender_3']//td//input")
		private static WebElement  pendingBillsGridRow3Chkbox;	
			
		@FindBy(xpath="//label[@id='tbAmountToAdjustInTransCurrencyValue']")
		private static WebElement transactionCurency;
		
		@FindBy(xpath="//label[@id='tbAmountToAdjustInBaseCurrencyValue']")
		private static WebElement baseCurrency;
		
		@FindBy(xpath="//label[@id='tbAmountToAdjustInLocalCurrencyValue']")
		private static WebElement localCurrencyDhs;
		
		@FindBy(xpath="//label[@id='tbNewRefBalAmountValue']")
		private static WebElement balanceNewReferenceAmt;
		
		@FindBy(xpath="//li[@id='id_li_Adjustment_Tab_BreakUpByTag']//span[@class='font-5'][contains(text(),'Break Up by Tag')]")
		private static WebElement breakUpByTagTab;
		
		@FindBy(xpath="//span[@class='font-5'][contains(text(),'Adjustment')]")
		private static WebElement adjustmentTab;
		
		@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-9']")
		private static WebElement breakUpByTagDueDate;
		
		@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-10']")
		private static WebElement breakUpByTagDepartment;
		
		@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-18']")
		private static WebElement breakUpByTagBaseCurrency;
		
		@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-17']")
		private static WebElement breakUpByTagBillCurrency;
		
		@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-20']")
		private static WebElement breakUpByTagBaseConversionRate;
			
		@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-21']")
		private static WebElement breakUpByTagBaseLocalCurrency;
		
		@FindBy(xpath="//label[@id='tbNewRefAmountAdjValue']")
		private static WebElement amtAdjustedAgainstNewREfinOtherVouchers;
		

		@FindBy(xpath="//span[@id='btnOk']")
		private static WebElement Bill_OkBtn;
		
		@FindBy(xpath="//label[@id='txtblkAmountadjusted']")
		private static WebElement  billRefAdjustAmountInTransCurency;
		
		
		@FindBy(xpath="//label[@id='txtblkAmounttobeadjust']")
		private static WebElement  billRefBalanceAmountAdjustInTrnasCurrency;
		
		@FindBy(xpath="//label[@id='id_BillWise_IP_LocalConversionRateValue']")
		private static WebElement  billRefInfoBarLocalCurrencyRate;
		
	
	public boolean checkSavingPurchasesReturnsWithAllItemsThroughCopyAndPasteFromClipBoard() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
 		saveBtn.click();
 		
 		Thread.sleep(2000);
	
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(breakUpByTagTab));
 		breakUpByTagTab.click();
 		
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
 		billRefNewReferenceTxt.click();

 		
 		String actBillNewReference,actBillAmtAdjAgainstNewRefInOtherVouchers,actBillTransactionCurrency,actBillBaseCurrency,actBillLocalCurrency,actBillBalanceNewRefAmount,actBillBreakUpByTagDepartment,actBillBreakUpByTagBaseCurrency,actBillBreakUpByTagBillCurrency,actBillBreakUpByTagLocalCurrency,actBillAmtAdjustedInTransactionCurrency,actBillBalanceAmtToBeAdjustedInTransactionCurrency,act13;
 		String expBillNewReference,expBillAmtAdjAgainstNewRefInOtherVouchers,expBillTransactionCurrency,expBillBaseCurrency,expBillLocalCurrency,expBillBalanceNewRefAmount,expBillBreakUpByTagDepartment,expBillBreakUpByTagBaseCurrency,expBillBreakUpByTagBillCurrency,expBillBreakUpByTagLocalCurrency,expBillAmtAdjustedInTransactionCurrency,expBillBalanceAmtToBeAdjustedInTransactionCurrency;
 		
 		actBillNewReference									=billRefNewReferenceTxt.getAttribute("value");
 		actBillAmtAdjAgainstNewRefInOtherVouchers			=amtAdjustedAgainstNewREfinOtherVouchers.getText();
 		actBillTransactionCurrency							=transactionCurency.getText();
 		actBillBaseCurrency									=baseCurrency.getText();
 		actBillLocalCurrency								=localCurrencyDhs.getText();
 		
 		actBillBalanceNewRefAmount							=balanceNewReferenceAmt.getText();
 		
 		actBillBreakUpByTagDepartment						=breakUpByTagDepartment.getText();
 		actBillBreakUpByTagBaseCurrency						=breakUpByTagBaseCurrency.getText();
 		actBillBreakUpByTagBillCurrency						=breakUpByTagBillCurrency.getText();
 		
 		actBillBreakUpByTagLocalCurrency					=breakUpByTagBaseLocalCurrency.getText();
 		actBillAmtAdjustedInTransactionCurrency				=billRefAdjustAmountInTransCurency.getText();
 		actBillBalanceAmtToBeAdjustedInTransactionCurrency	=billRefBalanceAmountAdjustInTrnasCurrency.getText();
 		
 		
 		expBillNewReference									="0.00";
 		expBillAmtAdjAgainstNewRefInOtherVouchers			="0.00";
 		expBillTransactionCurrency							="19.63";
 		expBillBaseCurrency									="19.63";
 		expBillLocalCurrency								="1.37";
 		
 		expBillBalanceNewRefAmount							="0.00";
 		
 		expBillBreakUpByTagDepartment						="INDIA";
 		expBillBreakUpByTagBillCurrency						="19.63";
 		expBillBreakUpByTagBaseCurrency						="19.63";
 		
 		
 		expBillBreakUpByTagLocalCurrency					="1.37";
 		expBillAmtAdjustedInTransactionCurrency				="0";
 		expBillBalanceAmtToBeAdjustedInTransactionCurrency	="19.63";
 	

 		System.out.println("*********************************** checkSavingPurchasesReturnsWithAllItemsThroughCopyAndPasteFromClipBoard  ************************************");


 		System.out.println("actBillNewReference								   : "+ actBillNewReference									+" Value Expected : "+expBillNewReference);
 		System.out.println("actBillAmtAdjAgainstNewRefInOtherVouchers		   : "+actBillAmtAdjAgainstNewRefInOtherVouchers			+" Value Expected : "+expBillAmtAdjAgainstNewRefInOtherVouchers);
 		System.out.println("actBillTransactionCurrency						   : "+actBillTransactionCurrency							+" Value Expected : "+expBillTransactionCurrency);
 		System.out.println("actBillBaseCurrency								   : "+actBillBaseCurrency									+" Value Expected : "+ expBillBaseCurrency);
 		System.out.println("actBillLocalCurrency							   : "+actBillLocalCurrency									+" Value Expected : "+expBillLocalCurrency);
 		System.out.println("actBillBalanceNewRefAmount						   : "+ actBillBalanceNewRefAmount							+" Value Expected : "+expBillBalanceNewRefAmount);
        System.out.println("actBillBreakUpByTagDepartment					   : "+actBillBreakUpByTagDepartment						+" Value Expected : "+expBillBreakUpByTagDepartment);
 		System.out.println("actBillBreakUpByTagBaseCurrency				       : "+actBillBreakUpByTagBaseCurrency						+" Value Expected : "+expBillBreakUpByTagBaseCurrency);
 		System.out.println("actBillBreakUpByTagBillCurrency 				   : "+actBillBreakUpByTagBillCurrency						+" Value Expected : "+expBillBreakUpByTagBillCurrency);
 		System.out.println("actBillBreakUpByTagLocalCurrency				   : "+actBillBreakUpByTagLocalCurrency						+" Value Expected : "+expBillBreakUpByTagLocalCurrency);
 		System.out.println("actBillAmtAdjustedInTransactionCurrency			   : "+actBillAmtAdjustedInTransactionCurrency				+" Value Expected : "+expBillAmtAdjustedInTransactionCurrency);
 		System.out.println("actBillBalanceAmtToBeAdjustedInTransactionCurrency : "+actBillBalanceAmtToBeAdjustedInTransactionCurrency	+" Value Expected : "+expBillBalanceAmtToBeAdjustedInTransactionCurrency);
 		
 		   
 	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
	    billRefPickIcon.click();
	   
	    //pick button is click
	   
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(breakUpByTagTab));
 		breakUpByTagTab.click();
 		
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
 		billRefNewReferenceTxt.click();
 		
 		
 		String actBillNewReferencePick,actBillAmtAdjAgainstNewRefInOtherVouchersPick,actBillTransactionCurrencyPick,actBillBaseCurrencyPick,actBillLocalCurrencyPick,actBillBalanceNewRefAmountPick,actBillBreakUpByTagDepartmentPick,actBillBreakUpByTagBaseCurrencyPick,actBillBreakUpByTagBillCurrencyPick,actBillBreakUpByTagLocalCurrencyPick,actBillAmtAdjustedInTransactionCurrencyPick,actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick;
 		String expBillNewReferencePick,expBillAmtAdjAgainstNewRefInOtherVouchersPick,expBillTransactionCurrencyPick,expBillBaseCurrencyPick,expBillLocalCurrencyPick,expBillBalanceNewRefAmountPick,expBillBreakUpByTagDepartmentPick,expBillBreakUpByTagBaseCurrencyPick,expBillBreakUpByTagBillCurrencyPick,expBillBreakUpByTagLocalCurrencyPick,expBillAmtAdjustedInTransactionCurrencyPick,expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick;
 		
 		actBillNewReferencePick									=billRefNewReferenceTxt.getAttribute("value");
 		actBillAmtAdjAgainstNewRefInOtherVouchersPick			=amtAdjustedAgainstNewREfinOtherVouchers.getText();
 		actBillTransactionCurrencyPick							=transactionCurency.getText();
 		actBillBaseCurrencyPick									=baseCurrency.getText();
 		actBillLocalCurrencyPick								=localCurrencyDhs.getText();
 		
 		actBillBalanceNewRefAmountPick							=balanceNewReferenceAmt.getText();
 		
 		actBillBreakUpByTagDepartmentPick						=breakUpByTagDepartment.getText();
 		actBillBreakUpByTagBaseCurrencyPick						=breakUpByTagBaseCurrency.getText();
 		actBillBreakUpByTagBillCurrencyPick						=breakUpByTagBillCurrency.getText();
 		
 		actBillBreakUpByTagLocalCurrencyPick					=breakUpByTagBaseLocalCurrency.getText();
 		actBillAmtAdjustedInTransactionCurrencyPick				=billRefAdjustAmountInTransCurency.getText();
 		actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	=billRefBalanceAmountAdjustInTrnasCurrency.getText();
 		
 		
 		expBillNewReferencePick									="19.63";
 		expBillAmtAdjAgainstNewRefInOtherVouchersPick			="0.00";
 		expBillTransactionCurrencyPick							="19.63";
 		expBillBaseCurrencyPick									="19.63";
 		expBillLocalCurrencyPick								="1.37";
 		
 		expBillBalanceNewRefAmountPick							="20.46";
 		
 		expBillBreakUpByTagDepartmentPick						="INDIA";
 		expBillBreakUpByTagBillCurrencyPick						="19.63";
 		expBillBreakUpByTagBaseCurrencyPick						="19.63";
 		
 		
 		expBillBreakUpByTagLocalCurrencyPick					="1.37";
 		expBillAmtAdjustedInTransactionCurrencyPick				="19.63";
 		expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	="0.00";

 		System.out.println("actBillNewReferencePick 								: "+actBillNewReferencePick									+ " Value Expected : "+expBillNewReferencePick);
 		System.out.println("actBillAmtAdjAgainstNewRefInOtherVouchersPick			: " + actBillAmtAdjAgainstNewRefInOtherVouchersPick			+ "	Value Expected : "+expBillAmtAdjAgainstNewRefInOtherVouchersPick);
 		System.out.println("actBillTransactionCurrencyPick							: "+ actBillTransactionCurrencyPick							+ " Value Expected : "+expBillTransactionCurrencyPick);
 		System.out.println("actBillBaseCurrencyPick									: "+ actBillBaseCurrencyPick								+ " Value Expected : "+expBillBaseCurrencyPick);
 		System.out.println("actBillLocalCurrencyPick								: "+ actBillLocalCurrencyPick								+ " Value Expected : "+expBillLocalCurrencyPick);
 		System.out.println("actBillBalanceNewRefAmountPick							: "+ actBillBalanceNewRefAmountPick							+ " Value Expected : "+expBillBalanceNewRefAmountPick);
        System.out.println("actBillBreakUpByTagDepartmentPick						: "+ actBillBreakUpByTagDepartmentPick						+ " Value Expected : "+expBillBreakUpByTagDepartmentPick);
 		System.out.println("actBillBreakUpByTagBaseCurrencyPick						: "+ actBillBreakUpByTagBaseCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagBaseCurrencyPick);
 		System.out.println("actBillBreakUpByTagBillCurrencyPick						: "+ actBillBreakUpByTagBillCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagBillCurrencyPick);
 		System.out.println("actBillBreakUpByTagLocalCurrencyPick					: "+ actBillBreakUpByTagLocalCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagLocalCurrencyPick);
 		System.out.println("actBillAmtAdjustedInTransactionCurrencyPick				: "+ actBillAmtAdjustedInTransactionCurrencyPick			+ " Value Expected : "+expBillAmtAdjustedInTransactionCurrencyPick);
 		System.out.println("actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick  : "+ actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	+ " Value Expected : "+expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick);


 		
 	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
 	    Bill_OkBtn.click();
 		
		String ExpMessage="This Transaction will make the Stock Negative";
		
		String validationMessage=checkValidationMessage(ExpMessage);
		
		boolean savingMessage=checkVoucherSavingMessage(docno);
		
		
		System.out.println("validationMessage  	:  "+validationMessage +" Value Expected : "+ExpMessage);
		
		System.out.println("SavingMessage  		:  "+savingMessage +" Value Expected : "+"TRUE");
		
		if(validationMessage.equalsIgnoreCase(ExpMessage) && savingMessage==true &&  
				
		        actBillNewReference.equalsIgnoreCase(expBillNewReference) &&
 				actBillAmtAdjAgainstNewRefInOtherVouchers.equalsIgnoreCase(expBillAmtAdjAgainstNewRefInOtherVouchers) &&
 				actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 				
 				actBillBaseCurrency.equalsIgnoreCase(actBillBaseCurrency) &&
 				actBillLocalCurrency.equalsIgnoreCase(actBillLocalCurrency) &&
 				actBillBalanceNewRefAmount.equalsIgnoreCase(actBillBalanceNewRefAmount) &&
 				actBillBreakUpByTagDepartment.equalsIgnoreCase(actBillBreakUpByTagDepartment) &&
 				actBillBreakUpByTagBaseCurrency.equalsIgnoreCase(actBillBreakUpByTagBaseCurrency) &&
 				actBillBreakUpByTagBillCurrency.equalsIgnoreCase(actBillBreakUpByTagBillCurrency) &&
 				actBillBreakUpByTagLocalCurrency.equalsIgnoreCase(actBillBreakUpByTagLocalCurrency) &&
 				actBillAmtAdjustedInTransactionCurrency.equalsIgnoreCase(actBillAmtAdjustedInTransactionCurrency) &&
 				actBillBalanceAmtToBeAdjustedInTransactionCurrency.equalsIgnoreCase(actBillBalanceAmtToBeAdjustedInTransactionCurrency) &&
		
 				
 				actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) &&
 				actBillAmtAdjAgainstNewRefInOtherVouchersPick.equalsIgnoreCase(expBillAmtAdjAgainstNewRefInOtherVouchersPick) &&
 				actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) &&
 				actBillBaseCurrencyPick.equalsIgnoreCase(actBillBaseCurrencyPick) &&
 				actBillLocalCurrencyPick.equalsIgnoreCase(actBillLocalCurrencyPick) &&
 				actBillBalanceNewRefAmountPick.equalsIgnoreCase(actBillBalanceNewRefAmountPick) &&
 				actBillBreakUpByTagDepartmentPick.equalsIgnoreCase(actBillBreakUpByTagDepartmentPick) &&
 				actBillBreakUpByTagBaseCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagBaseCurrencyPick) &&
 				actBillBreakUpByTagBillCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagBillCurrencyPick) &&
 				actBillBreakUpByTagLocalCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagLocalCurrencyPick) &&
 				actBillAmtAdjustedInTransactionCurrencyPick.equalsIgnoreCase(actBillAmtAdjustedInTransactionCurrencyPick) &&
 				actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick.equalsIgnoreCase(actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick))
		{
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));	
			new_CloseBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			
			Thread.sleep(2000);
			 getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(userNameDisplay));
			 userNameDisplay.click();
			  
			 Thread.sleep(2000);
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			 logoutOption.click();
			
			
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));	
			new_CloseBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			
			Thread.sleep(2000);
			 getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(userNameDisplay));
			 userNameDisplay.click();
			 
			 Thread.sleep(2000);
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			 logoutOption.click();
			
			
			return false;
		}
	}
	

	public VouchersExcessAndShortagesPage(WebDriver driver)
	{
		
		PageFactory.initElements(driver, this);
		
	}
	

}
